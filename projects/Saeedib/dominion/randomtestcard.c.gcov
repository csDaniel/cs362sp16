        -:    0:Source:randomtestcard.c
        -:    0:Graph:randomtestcard.gcno
        -:    0:Data:randomtestcard.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:/*
        -:    2:Behnam Saeedi
        -:    3:Saeedib
        -:    4:93227697
        -:    5:Unit test
        -:    6:*/
        -:    7:
        -:    8:#include <stdlib.h>
        -:    9:#include <stdio.h>
        -:   10:#include <assert.h>
        -:   11:#include <string.h>
        -:   12:#include <time.h>
        -:   13:
        -:   14:#include "dominion.h"
        -:   15:#include "dominion_helpers.h"
        -:   16:#include "rngs.h"
        -:   17:
        -:   18:#define UNITTEST "Smithy"
        -:   19:
        2:   20:int main(int argc, char ** argv)
        -:   21:{
        2:   22:	srand(time(NULL));
        -:   23:	int out;
        2:   24:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,sea_hag, tribute, smithy, council_room};
        -:   25:	int count;
        -:   26:	struct gameState G, testG;
        -:   27:
        -:   28:	//Generating player:
        2:   29:	for(int counter; counter < 1000; counter++)
        -:   30:	{
    #####:   31:		int numPlayers = rand() % 4 + 1;
    #####:   32:		int thisPlayer = rand() % 4 + 1;
        -:   33:
    #####:   34:		initializeGame(numPlayers, k, 1000, &G);
        -:   35:
    #####:   36:		memcpy(&testG, &G, sizeof(struct gameState));
    #####:   37:		count = testG.handCount[thisPlayer];
        -:   38:
    #####:   39:		for(int i = 0; i < count; i++)
    #####:   40:			testG.hand[thisPlayer][i] = estate;
    #####:   41:		for(int i = 0; i < 25; i++)
    #####:   42:			testG.supplyCount[i] = 10;
        -:   43:
    #####:   44:		testG.hand[thisPlayer][rand() % 4 + 1] = gold;
    #####:   45:		testG.hand[thisPlayer][rand() % 4 + 1] = silver;
    #####:   46:		testG.hand[thisPlayer][rand() % 4 + 1] = copper;
    #####:   47:		testG.discardCount[thisPlayer] = 0;
        -:   48:
    #####:   49:		out = Smithy(thisPlayer, 3, &testG);
    #####:   50:		printf("smithy function should return cost of smithy card : %d.\n",out);
    #####:   51:		assert(out==4);
    #####:   52:		printf("New Hand count is: %d.\n",testG.handCount[thisPlayer]);
        -:   53:
    #####:   54:		printf("Discard count is: %d.\n",testG.discardCount[thisPlayer]);
        -:   55:	}
        2:   56:	return 0;
        -:   57:}
