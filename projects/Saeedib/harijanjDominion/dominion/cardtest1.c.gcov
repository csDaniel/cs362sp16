        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:Behnam Saeedi
        -:    3:Saeedib
        -:    4:93227697
        -:    5:Unit test
        -:    6:*/
        -:    7:
        -:    8:#include <stdlib.h>
        -:    9:#include <stdio.h>
        -:   10:#include <assert.h>
        -:   11:#include <string.h>
        -:   12:#include <time.h>
        -:   13:
        -:   14:#include "dominion.h"
        -:   15:#include "dominion_helpers.h"
        -:   16:#include "rngs.h"
        -:   17:
        -:   18:#define UNITTEST "Smithy"
        -:   19:
        1:   20:int main(int argc, char ** argv)
        -:   21:{
        1:   22:	srand(time(NULL));
        -:   23:	//Generating player:
        -:   24:	int out;
        1:   25:	int seed = 1000;
        1:   26:	int numPlayers = 2;
        1:   27:	int thisPlayer = 0;
        -:   28:	struct gameState G, testG;
        -:   29:
        1:   30:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,sea_hag, tribute, smithy, council_room};
        -:   31:	// initialize a game state and player cards
        1:   32:	initializeGame(numPlayers, k, seed, &G);
        -:   33:	// generating a random state
        1:   34:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   35:	int count;
        1:   36:	count = testG.handCount[thisPlayer];
        6:   37:	for(int i = 0; i < count; i++)
        5:   38:		testG.hand[thisPlayer][i] = estate;
       26:   39:	for(int i = 0; i < 25; i++)
       25:   40:		testG.supplyCount[i] = 10;
        1:   41:	testG.hand[thisPlayer][0] = gold;	
        1:   42:	testG.hand[thisPlayer][1] = silver;	
        1:   43:	testG.hand[thisPlayer][2] = copper;	
        1:   44:	testG.discardCount[thisPlayer] = 0;
        -:   45:	// Starting test
        1:   46:	printf("\n\nTesting card: %s\n\n", UNITTEST);
        -:   47:
        1:   48:	printf("Test 1: Checking the function.\n");
        1:   49:	smithyCard(&testG, rand() % 4);
        1:   50:	out = getCost(smithy);
        1:   51:	printf("smithy function should return cost of smithy card : %d.\n",out);
        1:   52:	assert(out==4);
        1:   53:	printf("New Hand count is: %d.\n",testG.handCount[thisPlayer]);
        1:   54:	if(testG.handCount[thisPlayer] < 7)
    #####:   55:		printf("Test 1 failed, it needs to return: %d\n", 5 - 1 + 3);
        -:   56:	else
        1:   57:		printf("Test 1 Passed\n");
        -:   58:
        1:   59:	printf("Test 2: Discard Pile.\n");
        1:   60:	printf("Discard count is: %d.\n",testG.discardCount[thisPlayer]);
        1:   61:	if(testG.discardCount[thisPlayer] == 1 )
    #####:   62:		printf("Test 2 passed.\n");
        -:   63:	else
        1:   64:		printf("Test 2 failed, discard count is not correct.\n");
        1:   65:	return 0;	//No bugs found
        -:   66:}
