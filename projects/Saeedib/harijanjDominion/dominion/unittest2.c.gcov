        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:/* Using testUpdateCoins.c template
        -:    9:
        -:   10:According to documentation: updateCoins()
        -:   11:Description: Returns the count of a specific card in a specific player’s discard deck and hand.
        -:   12:Input: struct gameState state – holds a pointer to a gameState variable
        -:   13:       int player
        -:   14:       int bonus
        -:   15:Return: 0 on success
        -:   16:---------------------------------------------------------------------------
        -:   17:unittest2: unittest2.c dominion.o rngs.o
        -:   18:    gcc -o unittest2 -g  unittest2.c dominion.o rngs.o $(CFLAGS)
        -:   19:
        -:   20:*/
        -:   21:
        1:   22:int main() {
        -:   23:    int i;
        1:   24:    int seed = 1000;
        -:   25:    //int numPlayer = 2;
        -:   26:    //int maxBonus = 10;
        1:   27:    int player = 1;
        1:   28:    int bonus = 0;
        1:   29:    int successFlag = 0;
        1:   30:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   31:               , remodel, smithy, village, baron, great_hall};
        -:   32:
        -:   33:    struct gameState originalG, testingG;
        1:   34:    int maxHandCount = 5;
        -:   35:    // arrays of all coppers, silvers, and golds
        -:   36:    
        -:   37:    //int coppers[MAX_HAND];
        -:   38:    //int silvers[MAX_HAND];
        -:   39:    //int golds[MAX_HAND];
        -:   40:    /*
        -:   41:    for (i = 0; i < MAX_HAND; i++)
        -:   42:    {
        -:   43:        coppers[i] = copper;
        -:   44:        silvers[i] = silver;
        -:   45:        golds[i] = gold;
        -:   46:    }
        -:   47:    */ 
        -:   48:
        1:   49:    printf ("TESTING scoreFor():\n");
        -:   50:
        1:   51:    initializeGame(player, k, seed, &originalG);
        -:   52:    // -------------------------------------------------------
        -:   53:
        1:   54:    printf ("TEST 1: Test if no coins.\n");
        1:   55:    testingG.coins = 0;
        1:   56:    memcpy(&testingG, &originalG, sizeof(struct gameState));
        -:   57:
        6:   58:    for (i = 0; i < maxHandCount; i ++) {
        5:   59:      testingG.hand[player][i] = village;
        -:   60:    }
        -:   61:
        1:   62:    testingG.handCount[player] = maxHandCount;
        1:   63:    updateCoins(player, &testingG, bonus);
        1:   64:    printf ("Coin value: %d. Expected value: 0. \n", testingG.coins);
        1:   65:    if (testingG.coins == 0) {
        1:   66:      printf ("Test 1 Passed.\n");
        1:   67:      successFlag += 1;
        -:   68:    }
        -:   69:    else {
    #####:   70:      printf ("Test 1 Failed.\n");
        -:   71:    }
        -:   72:
        -:   73:    // -------------------------------------------------------
        -:   74:
        -:   75:    // Assuming if "all coopers" works, then "all silvers" and "all golds" too
        1:   76:    printf ("TEST 2: Test all coopers.\n");
        1:   77:    memcpy(&testingG, &originalG, sizeof(struct gameState));
        -:   78:
        6:   79:    for (i = 0; i < maxHandCount; i ++) {
        5:   80:      testingG.hand[player][i] = copper;
        -:   81:    }
        -:   82:
        1:   83:    testingG.handCount[player] = maxHandCount;
        1:   84:    updateCoins(player, &testingG, bonus);
        1:   85:    printf ("Coin value: %d. Expected value: 5. \n", testingG.coins);
        1:   86:    if (testingG.coins == 5) {
        1:   87:      printf ("Test 2 Passed.\n");
        1:   88:      successFlag += 1;
        -:   89:    }
        -:   90:    else {
    #####:   91:      printf ("Test 2 Failed.\n");
        -:   92:    }
        -:   93:
        -:   94:    // -------------------------------------------------------
        -:   95:
        1:   96:    printf ("TEST 3: Test mix between coopers,silvers,and golds.\n");
        1:   97:    memcpy(&testingG, &originalG, sizeof(struct gameState));
        -:   98:
        1:   99:    testingG.hand[player][0] = copper; // 1
        1:  100:    testingG.hand[player][1] = silver; // 2
        1:  101:    testingG.hand[player][2] = gold;   // 3 
        1:  102:    testingG.hand[player][3] = gold;   // 3
        1:  103:    testingG.hand[player][4] = copper; // 1
        -:  104:
        1:  105:    testingG.handCount[player] = maxHandCount;
        1:  106:    updateCoins(player, &testingG, bonus);
        1:  107:    printf ("Coin value: %d. Expected value: 10. \n", testingG.coins);
        1:  108:    if (testingG.coins == 10) {
        1:  109:      printf ("Test 3 Passed.\n");
        1:  110:      successFlag += 1;
        -:  111:    }
        -:  112:    else {
    #####:  113:      printf ("Test 3 Failed.\n");
        -:  114:    }
        -:  115:
        -:  116:    // -------------------------------------------------------
        -:  117:
        1:  118:    printf ("TEST 4: Test with bonus.\n");
        1:  119:    memcpy(&testingG, &originalG, sizeof(struct gameState));
        1:  120:    bonus = 4;
        -:  121:
        1:  122:    testingG.hand[player][0] = copper;  // 1
        1:  123:    testingG.hand[player][1] = silver;  // 2
        1:  124:    testingG.hand[player][2] = gold;    // 3 
        1:  125:    testingG.hand[player][3] = cutpurse;// 2 (Bonus)
        1:  126:    testingG.hand[player][4] = cutpurse;// 2 (Bonus)
        -:  127:
        1:  128:    testingG.handCount[player] = maxHandCount;
        1:  129:    updateCoins(player, &testingG, bonus);
        1:  130:    printf ("Coin value: %d. Expected value: 10. \n", testingG.coins);
        1:  131:    if (testingG.coins == 10) {
        1:  132:      printf ("Test 4 Passed.\n");
        1:  133:      successFlag += 1;
        -:  134:    }
        -:  135:    else {
    #####:  136:      printf ("Test 4 Failed.\n");
        -:  137:    }
        -:  138:
        1:  139:    if (successFlag == 4) {
        1:  140:      printf ("All tests passed!\n");
        -:  141:    }
        -:  142:  
        1:  143:  return 0;
        -:  144:
        -:  145:}
