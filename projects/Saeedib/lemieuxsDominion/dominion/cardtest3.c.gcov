        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        1:    9:int checkCouncilRoom(int choice1, int choice2, int choice3, struct gameState *game, int handPos, int *bonus) {
        -:   10:	int r, i;
        -:   11:	struct gameState testGame;
        1:   12:	int thisPlayer = whoseTurn(game);
        -:   13:
        1:   14:	memcpy(&testGame, game, sizeof(struct gameState));
        -:   15:
        1:   16:	r = cardEffect(council_room, choice1, choice2, choice3, game, handPos, bonus);
        1:   17:	assert(r == 0);
        -:   18:
        1:   19:	printf("Checking handCount\n");
        1:   20:	printf("hand count = %d, expected = %d\n", game->handCount[thisPlayer], testGame.handCount[thisPlayer] + 3);
        1:   21:	assert(game->handCount[thisPlayer] == testGame.handCount[thisPlayer] + 3);
        -:   22:
        1:   23:	printf("Checking deckCount\n");
        1:   24:	printf("deck count = %d, expected = %d\n", game->deckCount[thisPlayer], testGame.deckCount[thisPlayer] -4);
        1:   25:	assert(game->deckCount[thisPlayer] == testGame.deckCount[thisPlayer] - 4);
        -:   26:
        1:   27:	printf("Checking buys\n");
        1:   28:	printf("buys = %d, expected = %d\n", game->numBuys, testGame.numBuys + 1);
        1:   29:	assert(game->numBuys == testGame.numBuys + 1);
        -:   30:
        -:   31:
        1:   32:	printf("\nTesting other players' state:\n");
        -:   33:	// start at 1 since the current player is 0.
        4:   34:	for (i = 1; i < game->numPlayers; ++i) {
        3:   35:		printf("\nChecking Player Number %d:\n", i);
        -:   36:
        3:   37:		printf("Checking handCount\n");
        3:   38:		printf("hand count = %d, expected = %d\n", game->handCount[i], testGame.handCount[i] + 1);
        3:   39:		assert(game->handCount[i] == testGame.handCount[i] + 1);
        -:   40:
        3:   41:		printf("Checking deckCount\n");
        3:   42:		printf("deck count = %d, expected = %d\n", game->deckCount[i], testGame.deckCount[i] - 1);
        3:   43:		assert(game->deckCount[i] == testGame.deckCount[i] - 1);
        -:   44:
        3:   45:		printf("Checking discardCount\n");
        3:   46:		printf("discard count = %d, expected = %d\n", game->discardCount[i], testGame.discardCount[i]);
        3:   47:		assert(game->discardCount[i] == testGame.discardCount[i]);
        -:   48:	}
        -:   49:
        -:   50:	// check that the victory and kingdom card piles are ok
       28:   51:	for (i = 0; i <= treasure_map; ++i){
       27:   52:		assert(game->supplyCount[i] == testGame.supplyCount[i]);
        -:   53:	}
        -:   54:
        -:   55:	// check that the council room card has been added to the played pile
        1:   56:	assert(game->playedCardCount == testGame.playedCardCount + 1);
        -:   57:
        1:   58:	return 0;
        -:   59:}
        -:   60:
        -:   61:
        -:   62:
        1:   63:int main() {
        -:   64:
        1:   65:	int k[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   66:		sea_hag, tribute, council_room };
        -:   67:
        -:   68:
        -:   69:	struct gameState G;
        -:   70:
        1:   71:	int seed = 1000;
        1:   72:	int numPlayers = 4;
        -:   73:
        1:   74:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   75:
        1:   76:	printf("Testing Council Room Card\n");
        -:   77:
        -:   78:
        1:   79:	initializeGame(numPlayers, k, seed, &G);
        -:   80:
        -:   81:
        1:   82:	checkCouncilRoom(choice1, choice2, choice3, &G, handpos, &bonus);
        -:   83:
        -:   84:
        -:   85:
        1:   86:	return 0;
        -:   87:}
