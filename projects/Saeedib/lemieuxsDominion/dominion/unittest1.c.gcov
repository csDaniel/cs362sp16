        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        1:    9:int checkWhoseTurn(struct gameState *game) {
        -:   10:	int i;
        -:   11:	struct gameState testGame;
        -:   12:
        1:   13:	memcpy(&testGame, game, sizeof(struct gameState));
        -:   14:
        1:   15:	game->whoseTurn = 0;
        -:   16:
        1:   17:	printf("Setting game->whoseTurn to 0, checking that whoseTurn returns 0\n");
        1:   18:	assert(whoseTurn(game) == 0);
        -:   19:
        1:   20:	game->whoseTurn = 1;
        -:   21:
        1:   22:	printf("Setting game->whoseTurn to 1, checking that whoseTurn returns 1\n");
        -:   23:
        1:   24:	assert(whoseTurn(game) == 1);
        -:   25:
        1:   26:	printf("\nTesting other players' state:\n");
        -:   27:	// check that players' state hasn't been modified
        3:   28:	for (i = 0; i < game->numPlayers; ++i) {
        2:   29:		printf("\nChecking Player Number %d:\n", i);
        -:   30:
        2:   31:		printf("Checking handCount\n");
        2:   32:		printf("hand count = %d, expected = %d\n", game->handCount[i], testGame.handCount[i]);
        2:   33:		assert(game->handCount[i] == testGame.handCount[i]);
        -:   34:
        2:   35:		printf("Checking deckCount\n");
        2:   36:		printf("deck count = %d, expected = %d\n", game->deckCount[i], testGame.deckCount[i]);
        2:   37:		assert(game->deckCount[i] == testGame.deckCount[i]);
        -:   38:
        2:   39:		printf("Checking discardCount\n");
        2:   40:		printf("discard count = %d, expected = %d\n", game->discardCount[i], testGame.discardCount[i]);
        2:   41:		assert(game->discardCount[i] == testGame.discardCount[i]);
        -:   42:	}
        -:   43:
        1:   44:	printf("\nTesting victory and kingdom cards:\n");
        -:   45:	// check that the victory and kingdom card piles are ok
       28:   46:	for (i = 0; i <= treasure_map; ++i){
       27:   47:		assert(game->supplyCount[i] == testGame.supplyCount[i]);
        -:   48:	}
        -:   49:
        -:   50:
        1:   51:	return 0;
        -:   52:}
        -:   53:
        -:   54:
        -:   55:
        1:   56:int main() {
        -:   57:	
        1:   58:	int k[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   59:		sea_hag, tribute, smithy };
        -:   60:
        -:   61:	struct gameState G;
        -:   62:
        1:   63:	int seed = 1000;
        1:   64:	int numPlayers = 2;
        -:   65:
        1:   66:	printf("Testing whoseTurn()\n");
        -:   67:
        -:   68:
        1:   69:	initializeGame(numPlayers, k, seed, &G);
        -:   70:
        -:   71:
        1:   72:	checkWhoseTurn(&G);
        -:   73:
        -:   74:
        -:   75:
        1:   76:	return 0;
        -:   77:}
