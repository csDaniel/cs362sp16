        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:Behnam Saeedi
        -:    3:Saeedib
        -:    4:93227697
        -:    5:Unit test
        -:    6:
        -:    7:testing updateCoin:
        -:    8:*/
        -:    9:
        -:   10:#include <stdlib.h>
        -:   11:#include <stdio.h>
        -:   12:#include <assert.h>
        -:   13:#include <string.h>
        -:   14:#include <time.h>
        -:   15:
        -:   16:#include "dominion.h"
        -:   17:#include "dominion_helpers.h"
        -:   18:#include "rngs.h"
        -:   19:
        -:   20:#define UNITTEST "updateCoins"
        -:   21:
        1:   22:int main(int argc, char ** argv)
        -:   23:{
        1:   24:	srand(time(NULL));
        -:   25:	//Generating player:
        -:   26:	int out;
        1:   27:	int bonus = 0;
        1:   28:	int seed = 999;
        1:   29:	int numPlayers = 2;
        1:   30:	int thisPlayer = 0;
        -:   31:	struct gameState G, testG;
        -:   32:
        1:   33:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,sea_hag, tribute, smithy, council_room};
        -:   34:	// initialize a game state and player cards
        1:   35:	initializeGame(numPlayers, k, seed, &G);
        -:   36:	// generating a random state
        1:   37:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   38:	int count;
        1:   39:	count = testG.handCount[thisPlayer];
        6:   40:	for(int i = 0; i < count; i++)
        5:   41:		testG.hand[thisPlayer][i] = estate;
        1:   42:	testG.hand[thisPlayer][0] = gold;	//3
        1:   43:	testG.hand[thisPlayer][1] = silver;	//2
        1:   44:	testG.hand[thisPlayer][2] = copper;	//1
        -:   45:	//Total should add up to 6
        -:   46:	// Starting test
        1:   47:	printf("\n\nTesting Unit %s\n\n", UNITTEST);
        -:   48:
        -:   49:
        1:   50:	printf("Test 1: Checking validity of value (in range).\n");
        1:   51:	int bef = testG.handCount[thisPlayer];
        1:   52:	printf("getting initial handCount\n");
        1:   53:	out = updateCoins(thisPlayer,&testG, bonus);
        -:   54:
        1:   55:	printf("coinUpdate returned: %d\n",out);
        1:   56:	printf("bonus is: %d\n",bonus);
        1:   57:	printf("Number of playing player is: %d\n",thisPlayer);
        1:   58:	printf("coinUpdate set the coin value to: %d (expected value is: %d)\n",testG.coins,bonus+6);
        1:   59:	assert(testG.coins == bonus + 6);
        1:   60:	printf("handCount is: %d (%d is expected)\n",testG.handCount[thisPlayer],bef);
        1:   61:	assert(testG.handCount[thisPlayer] == bef);
        1:   62:	printf("Test 1 Passed\n");
        -:   63:
        1:   64:	printf("\nTest 2: Checking addition of coins (all the possible ways to add coin, bonus and cards).\n");
        1:   65:	bonus++;
        1:   66:	printf("bonus is: %d\n",bonus);
        1:   67:	printf("coinUpdate set the coin value to: %d (expected value is: %d)\n",testG.coins,bonus-1+6);
        1:   68:	assert(testG.coins == bonus-1 + 6);
        1:   69:	out = updateCoins(thisPlayer,&testG, bonus);
        1:   70:	printf("coinUpdate set the coin value to: %d (expected value is: %d)\n",testG.coins,bonus+6);
        1:   71:	assert(testG.coins == bonus + 6);
        1:   72:	printf("Test 2 Passed\n");
        -:   73:
        1:   74:	printf("\nTest 3: Checking looking for copper, silver and gold coins.\n");
        1:   75:	bonus = 0;
        1:   76:	printf("bonus is: %d\n",bonus);
        1:   77:	out = updateCoins(thisPlayer,&testG, bonus);
        1:   78:	printf("coinUpdate set the coin value to: %d (expected value is: %d)\n",testG.coins,6);
        1:   79:	assert(testG.coins == 6);
        1:   80:	testG.hand[thisPlayer][3] = gold;
        1:   81:	printf("adding an aditional gold card...\n");
        1:   82:	printf("coinUpdate set the coin value to: %d (expected value is: %d)\n",testG.coins,9);
        1:   83:	out = updateCoins(thisPlayer,&testG, bonus);
        1:   84:	assert(testG.coins == 9);
        1:   85:	printf("cards are:\n");
        6:   86:	for(int i =0; i < count; i++)
        -:   87:	{
        5:   88:		if(testG.hand[thisPlayer][i] == gold)
        2:   89:			printf("gold");
        3:   90:		else if(testG.hand[thisPlayer][i] == silver)
        1:   91:			printf("silver");
        2:   92:		else if(testG.hand[thisPlayer][i] == copper)
        1:   93:			printf("copper");
        -:   94:		else
        1:   95:			printf("Empty");
        5:   96:		if(i != count -1)
        4:   97:			if(i != count -2)
        3:   98:				printf(", ");
        -:   99:			else
        1:  100:				printf(" and ");
        -:  101:		else
        1:  102:			printf("\n");
        -:  103:	}
        1:  104:	assert(testG.hand[thisPlayer][0] == gold);
        1:  105:	assert(testG.hand[thisPlayer][1] == silver);
        1:  106:	assert(testG.hand[thisPlayer][2] == copper);
        1:  107:	assert(testG.hand[thisPlayer][3] == gold);
        1:  108:	printf("Test 3 Passed\n");
        -:  109:
        1:  110:	printf("\nTest 4: Checking unexpected input\n");
        -:  111:
        1:  112:	bonus = 9999999999999999999999;
        1:  113:	out = updateCoins(thisPlayer,&testG, bonus);
        1:  114:	assert(testG.coins == bonus + 9);
        1:  115:	printf("coinUpdate set the coin value to: %d (expected value is: %d)\n",testG.coins,9 + bonus);
        1:  116:	if(testG.coins < 0)
        1:  117:		printf("Test 4 failed: Failed to return a positive value.\n");
        -:  118:	else
    #####:  119:		printf("Test 4 Passed\n");
        -:  120://	assert(testG.coins >= 0);
        1:  121:	bonus = 0;
        -:  122:
        1:  123:	return 0;	//No bugs found
        -:  124:}
