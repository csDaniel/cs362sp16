        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        1:    9:int checkSupplyCount(struct gameState *game, int supply[]) {
        -:   10:	int i;
        -:   11:	struct gameState testGame;
        -:   12:
        1:   13:	memcpy(&testGame, game, sizeof(struct gameState));
        -:   14:
        1:   15:	printf("\n\nChecking that supplyCount returns game->supplyCount[i]\n\n");
       28:   16:	for (i = 0; i <= treasure_map; ++i){
       27:   17:		printf("supply for card %d: %d, expected = %d\n", i, supplyCount(i, game), testGame.supplyCount[i]);
        -:   18:		//printf("supply for card %d: %d\n", i, supplyCount(i, game));
       27:   19:		assert(supplyCount(i, game) == testGame.supplyCount[i]);
        -:   20:	}
        -:   21:
        1:   22:	printf("\nSubtracting 3 cards from each of the kingdom piles\n\n");
        -:   23:
        -:   24:	// check kingdom piles
       11:   25:	for (i = 0; i < 10; ++i) {
       10:   26:		game->supplyCount[supply[i]] -= 3; // subtract three from each pile
       10:   27:		printf("supply for card %d: %d, expected = %d\n", supply[i], supplyCount(supply[i], game), testGame.supplyCount[supply[i]] - 3);
       10:   28:		assert(supplyCount(supply[i], game) == testGame.supplyCount[supply[i]] - 3);
        -:   29:	}
        -:   30:
        1:   31:	printf("\nSubtracting 3 cards from each of the victory, curse, and treasure piles\n\n");
        -:   32:	// check victory, curse, treasure cards
        8:   33:	for (i = 0; i <= gold; ++i){
        7:   34:		game->supplyCount[i] -= 3; // subtract three from each pile
        7:   35:		printf("supply for card %d: %d, expected = %d\n", i, supplyCount(i, game), testGame.supplyCount[i] - 3);
        7:   36:		assert(supplyCount(i, game) == testGame.supplyCount[i] - 3);
        -:   37:	}
        -:   38:
        1:   39:	printf("\nTesting other players' state:\n");
        -:   40:	// check that players' state hasn't been modified
        3:   41:	for (i = 0; i < game->numPlayers; ++i) {
        2:   42:		printf("\nChecking Player Number %d:\n", i);
        -:   43:
        2:   44:		printf("Checking handCount\n");
        2:   45:		printf("hand count = %d, expected = %d\n", game->handCount[i], testGame.handCount[i]);
        2:   46:		assert(game->handCount[i] == testGame.handCount[i]);
        -:   47:
        2:   48:		printf("Checking deckCount\n");
        2:   49:		printf("deck count = %d, expected = %d\n", game->deckCount[i], testGame.deckCount[i]);
        2:   50:		assert(game->deckCount[i] == testGame.deckCount[i]);
        -:   51:
        2:   52:		printf("Checking discardCount\n");
        2:   53:		printf("discard count = %d, expected = %d\n", game->discardCount[i], testGame.discardCount[i]);
        2:   54:		assert(game->discardCount[i] == testGame.discardCount[i]);
        -:   55:	}
        -:   56:
        1:   57:	return 0;
        -:   58:}
        -:   59:
        -:   60:
        -:   61:
        1:   62:int main() {
        -:   63:
        1:   64:	int k[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:   65:		sea_hag, tribute, smithy };
        -:   66:
        -:   67:
        -:   68:	struct gameState G;
        -:   69:
        1:   70:	int seed = 1000;
        1:   71:	int numPlayers = 2;
        -:   72:
        -:   73:
        1:   74:	printf("Testing supplyCount()\n");
        -:   75:
        -:   76:
        1:   77:	initializeGame(numPlayers, k, seed, &G);
        -:   78:
        -:   79:
        1:   80:	checkSupplyCount(&G, k);
        -:   81:
        -:   82:
        -:   83:
        1:   84:	return 0;
        -:   85:}
