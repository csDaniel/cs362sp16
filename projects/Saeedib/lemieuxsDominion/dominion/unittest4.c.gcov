        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        1:    9:int checkGainCard(struct gameState * game) {
        -:   10:	int r, i;
        -:   11:	struct gameState testGame;
        1:   12:	int thisPlayer = whoseTurn(game);
        -:   13:
        -:   14:	// toFlag = 0 : add to discard
        -:   15:	// toFlag = 1 : add to deck
        -:   16:	// toFlag = 2 : add to hand
        -:   17:
        1:   18:	printf("\nTest 1: gain adventurer to discard\n");
        -:   19:
        1:   20:	memcpy(&testGame, game, sizeof(struct gameState));
        -:   21:
        1:   22:	r = gainCard(adventurer, game, 0, thisPlayer);
        1:   23:	assert(r == 0);
        -:   24:
        1:   25:	printf("Checking player's state\n");
        -:   26:	// make sure the appropriate number of cards has been added to the player's hand
        1:   27:	printf("hand count = %d, expected = %d\n", game->handCount[thisPlayer], testGame.handCount[thisPlayer]);
        1:   28:	assert(game->handCount[thisPlayer] == testGame.handCount[thisPlayer]);
        -:   29:
        -:   30:	// make sure the cards came from the player's deck
        1:   31:	printf("deck count = %d, expected = %d\n", game->deckCount[thisPlayer], testGame.deckCount[thisPlayer]);
        1:   32:	assert(game->deckCount[thisPlayer] == testGame.deckCount[thisPlayer]);
        -:   33:
        1:   34:	printf("discard count = %d, expected = %d\n", game->discardCount[thisPlayer], testGame.discardCount[thisPlayer] + 1);
        1:   35:	assert(game->discardCount[thisPlayer] == testGame.discardCount[thisPlayer] + 1);
        -:   36:
        -:   37:	// check that other players' state hasn't been modified
        1:   38:	printf("\nTesting other players' state:\n");
        -:   39:	// start at 1 since the current player is 0.
        2:   40:	for (i = 1; i < game->numPlayers; ++i) {
        1:   41:		printf("\nChecking Player Number %d:\n", i);
        -:   42:
        1:   43:		printf("Checking handCount\n");
        1:   44:		printf("hand count = %d, expected = %d\n", game->handCount[i], testGame.handCount[i]);
        1:   45:		assert(game->handCount[i] == testGame.handCount[i]);
        -:   46:
        1:   47:		printf("Checking deckCount\n");
        1:   48:		printf("deck count = %d, expected = %d\n", game->deckCount[i], testGame.deckCount[i]);
        1:   49:		assert(game->deckCount[i] == testGame.deckCount[i]);
        -:   50:
        1:   51:		printf("Checking discardCount\n");
        1:   52:		printf("discard count = %d, expected = %d\n", game->discardCount[i], testGame.discardCount[i]);
        1:   53:		assert(game->discardCount[i] == testGame.discardCount[i]);
        -:   54:	}
        -:   55:
        1:   56:	printf("\nTesting victory and kingdom cards:\n");
        -:   57:	// check that the victory and kingdom card piles are ok
       28:   58:	for (i = 0; i <= treasure_map; ++i){
       27:   59:		if (i == adventurer)
        1:   60:			assert(game->supplyCount[i] == testGame.supplyCount[i] - 1);
        -:   61:		else
       26:   62:			assert(game->supplyCount[i] == testGame.supplyCount[i]);
        -:   63:	}
        -:   64:
        -:   65:
        -:   66:
        1:   67:	printf("\nTest 2: gain adventurer to deck\n");
        -:   68:
        1:   69:	memcpy(&testGame, game, sizeof(struct gameState));
        -:   70:
        1:   71:	r = gainCard(adventurer, game, 1, thisPlayer);
        1:   72:	assert(r == 0);
        -:   73:
        1:   74:	printf("Checking player's state\n");
        -:   75:	// make sure the appropriate number of cards has been added to the player's hand
        1:   76:	printf("hand count = %d, expected = %d\n", game->handCount[thisPlayer], testGame.handCount[thisPlayer]);
        1:   77:	assert(game->handCount[thisPlayer] == testGame.handCount[thisPlayer]);
        -:   78:
        -:   79:	// make sure the cards came from the player's deck
        1:   80:	printf("deck count = %d, expected = %d\n", game->deckCount[thisPlayer], testGame.deckCount[thisPlayer] + 1);
        1:   81:	assert(game->deckCount[thisPlayer] == testGame.deckCount[thisPlayer] + 1);
        -:   82:
        1:   83:	printf("discard count = %d, expected = %d\n", game->discardCount[thisPlayer], testGame.discardCount[thisPlayer]);
        1:   84:	assert(game->discardCount[thisPlayer] == testGame.discardCount[thisPlayer]);
        -:   85:
        -:   86:	// check that other players' state hasn't been modified
        1:   87:	printf("\nTesting other players' state:\n");
        -:   88:	// start at 1 since the current player is 0.
        2:   89:	for (i = 1; i < game->numPlayers; ++i) {
        1:   90:		printf("\nChecking Player Number %d:\n", i);
        -:   91:
        1:   92:		printf("Checking handCount\n");
        1:   93:		printf("hand count = %d, expected = %d\n", game->handCount[i], testGame.handCount[i]);
        1:   94:		assert(game->handCount[i] == testGame.handCount[i]);
        -:   95:
        1:   96:		printf("Checking deckCount\n");
        1:   97:		printf("deck count = %d, expected = %d\n", game->deckCount[i], testGame.deckCount[i]);
        1:   98:		assert(game->deckCount[i] == testGame.deckCount[i]);
        -:   99:
        1:  100:		printf("Checking discardCount\n");
        1:  101:		printf("discard count = %d, expected = %d\n", game->discardCount[i], testGame.discardCount[i]);
        1:  102:		assert(game->discardCount[i] == testGame.discardCount[i]);
        -:  103:	}
        -:  104:
        1:  105:	printf("\nTesting victory and kingdom cards:\n");
        -:  106:	// check that the victory and kingdom card piles are ok
       28:  107:	for (i = 0; i <= treasure_map; ++i){
       27:  108:		if (i == adventurer)
        1:  109:			assert(game->supplyCount[i] == testGame.supplyCount[i] - 1);
        -:  110:		else
       26:  111:			assert(game->supplyCount[i] == testGame.supplyCount[i]);
        -:  112:	}
        -:  113:
        1:  114:	printf("\nTest 3: gain adventurer to hand\n");
        -:  115:
        1:  116:	memcpy(&testGame, game, sizeof(struct gameState));
        -:  117:
        1:  118:	r = gainCard(adventurer, game, 2, thisPlayer);
        1:  119:	assert(r == 0);
        -:  120:
        1:  121:	printf("Checking player's state\n");
        -:  122:
        -:  123:	// make sure the appropriate number of cards has been added to the player's hand
        1:  124:	printf("hand count = %d, expected = %d\n", game->handCount[thisPlayer], testGame.handCount[thisPlayer] + 1);
        1:  125:	assert(game->handCount[thisPlayer] == testGame.handCount[thisPlayer] + 1);
        -:  126:
        -:  127:	// make sure the cards came from the player's deck
        1:  128:	printf("deck count = %d, expected = %d\n", game->deckCount[thisPlayer], testGame.deckCount[thisPlayer]);
        1:  129:	assert(game->deckCount[thisPlayer] == testGame.deckCount[thisPlayer]);
        -:  130:
        1:  131:	printf("discard count = %d, expected = %d\n", game->discardCount[thisPlayer], testGame.discardCount[thisPlayer]);
        1:  132:	assert(game->discardCount[thisPlayer] == testGame.discardCount[thisPlayer]);
        -:  133:
        -:  134:	// check that other players' state hasn't been modified
        1:  135:	printf("\nTesting other players' state:\n");
        -:  136:
        -:  137:	// start at 1 since the current player is 0.
        2:  138:	for (i = 1; i < game->numPlayers; ++i) {
        1:  139:		printf("\nChecking Player Number %d:\n", i);
        -:  140:
        1:  141:		printf("Checking handCount\n");
        1:  142:		printf("hand count = %d, expected = %d\n", game->handCount[i], testGame.handCount[i]);
        1:  143:		assert(game->handCount[i] == testGame.handCount[i]);
        -:  144:
        1:  145:		printf("Checking deckCount\n");
        1:  146:		printf("deck count = %d, expected = %d\n", game->deckCount[i], testGame.deckCount[i]);
        1:  147:		assert(game->deckCount[i] == testGame.deckCount[i]);
        -:  148:
        1:  149:		printf("Checking discardCount\n");
        1:  150:		printf("discard count = %d, expected = %d\n", game->discardCount[i], testGame.discardCount[i]);
        1:  151:		assert(game->discardCount[i] == testGame.discardCount[i]);
        -:  152:	}
        -:  153:
        1:  154:	printf("\nTesting victory and kingdom cards:\n");
        -:  155:
        -:  156:	// check that the victory and kingdom card piles are ok
       28:  157:	for (i = 0; i <= treasure_map; ++i){
       27:  158:		if (i == adventurer)
        1:  159:			assert(game->supplyCount[i] == testGame.supplyCount[i] - 1);
        -:  160:		else
       26:  161:			assert(game->supplyCount[i] == testGame.supplyCount[i]);
        -:  162:	}
        -:  163:
        1:  164:	printf("\nTest 4: try to gain card not in supply\n");
        -:  165:
        1:  166:	game->supplyCount[adventurer] = 0;
        -:  167:
        1:  168:	memcpy(&testGame, game, sizeof(struct gameState));
        -:  169:
        -:  170:
        1:  171:	r = gainCard(adventurer, game, 0, thisPlayer);
        1:  172:	assert(r != 0);
        -:  173:
        -:  174:	// make sure the appropriate number of cards has been added to the player's hand
        1:  175:	printf("hand count = %d, expected = %d\n", game->handCount[thisPlayer], testGame.handCount[thisPlayer]);
        1:  176:	assert(game->handCount[thisPlayer] == testGame.handCount[thisPlayer]);
        -:  177:
        -:  178:	// make sure the cards came from the player's deck
        1:  179:	printf("deck count = %d, expected = %d\n", game->deckCount[thisPlayer], testGame.deckCount[thisPlayer]);
        1:  180:	assert(game->deckCount[thisPlayer] == testGame.deckCount[thisPlayer]);
        -:  181:
        1:  182:	printf("discard count = %d, expected = %d\n", game->discardCount[thisPlayer], testGame.discardCount[thisPlayer]);
        1:  183:	assert(game->discardCount[thisPlayer] == testGame.discardCount[thisPlayer]);
        -:  184:
        -:  185:	// check that other players' state hasn't been modified
        -:  186:
        -:  187:	// start at 1 since the current player is 0.
        2:  188:	for (i = 1; i < game->numPlayers; ++i) {
        1:  189:		printf("\nChecking Player Number %d:\n", i);
        -:  190:
        1:  191:		printf("Checking handCount\n");
        1:  192:		printf("hand count = %d, expected = %d\n", game->handCount[i], testGame.handCount[i]);
        1:  193:		assert(game->handCount[i] == testGame.handCount[i]);
        -:  194:
        1:  195:		printf("Checking deckCount\n");
        1:  196:		printf("deck count = %d, expected = %d\n", game->deckCount[i], testGame.deckCount[i]);
        1:  197:		assert(game->deckCount[i] == testGame.deckCount[i]);
        -:  198:
        1:  199:		printf("Checking discardCount\n");
        1:  200:		printf("discard count = %d, expected = %d\n", game->discardCount[i], testGame.discardCount[i]);
        1:  201:		assert(game->discardCount[i] == testGame.discardCount[i]);
        -:  202:	}
        -:  203:
        -:  204:	// check that the victory and kingdom card piles are ok
       28:  205:	for (i = 0; i <= treasure_map; ++i) {
       27:  206:		assert(game->supplyCount[i] == testGame.supplyCount[i]);
        -:  207:	}
        -:  208:
        -:  209:
        -:  210:
        1:  211:	return 0;
        -:  212:}
        -:  213:
        -:  214:
        -:  215:
        1:  216:int main() {
        -:  217:	
        1:  218:	int k[10] = { adventurer, gardens, embargo, village, minion, mine, cutpurse,
        -:  219:		sea_hag, tribute, smithy };
        -:  220:
        -:  221:
        -:  222:	struct gameState G;
        -:  223:
        1:  224:	int seed = 1000;
        1:  225:	int numPlayers = 2;
        -:  226:
        -:  227:
        1:  228:	printf("Testing gainCard\n");
        -:  229:
        -:  230:
        1:  231:	initializeGame(numPlayers, k, seed, &G);
        -:  232:
        -:  233:
        1:  234:	checkGainCard(&G);
        -:  235:
        -:  236:
        -:  237:
        1:  238:	return 0;
        -:  239:}
