        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:Behnam Saeedi
        -:    3:Saeedib
        -:    4:93227697
        -:    5:Unit test
        -:    6:*/
        -:    7:
        -:    8:#include <stdlib.h>
        -:    9:#include <stdio.h>
        -:   10:#include <assert.h>
        -:   11:#include <string.h>
        -:   12:#include <time.h>
        -:   13:
        -:   14:#include "dominion.h"
        -:   15:#include "dominion_helpers.h"
        -:   16:#include "rngs.h"
        -:   17:
        -:   18:#define UNITTEST "scoreFor"
        -:   19:
        1:   20:int main(int argc, char ** argv)
        -:   21:{
        1:   22:	srand(time(NULL));
        -:   23:	//Generating player:
        -:   24:	int out;
        1:   25:	int seed = 1000;
        1:   26:	int numPlayers = 2;
        1:   27:	int thisPlayer = 0;
        -:   28:	struct gameState G, testG;
        -:   29:
        1:   30:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,sea_hag, tribute, smithy, council_room};
        -:   31:	// initialize a game state and player cards
        1:   32:	initializeGame(numPlayers, k, seed, &G);
        -:   33:	// generating a random state
        1:   34:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   35:	int count;
        1:   36:	count = testG.handCount[thisPlayer];
        6:   37:	for(int i = 0; i < count; i++)
        5:   38:		testG.hand[thisPlayer][i] = estate;
        1:   39:	testG.hand[thisPlayer][0] = duchy;	//3
        1:   40:	testG.hand[thisPlayer][1] = province;	//6
        1:   41:	testG.hand[thisPlayer][2] = great_hall;	//1
        1:   42:	testG.hand[thisPlayer][3] = estate; //1
        1:   43:	testG.hand[thisPlayer][4] = estate; //1
        1:   44:	for(int i = 0; i < testG.discardCount[thisPlayer]; i++)
    #####:   45:		testG.discard[thisPlayer][i] = estate;
        -:   46:	//Total should add up to 12
        -:   47:	// Starting test
        1:   48:	printf("\n\nTesting Unit %s\n\n", UNITTEST);
        1:   49:	printf("Test 1: Checking the function.\n");
        1:   50:	out = scoreFor(thisPlayer,&testG);
        1:   51:	printf("ScoreFor returned: %d(expected 12).\n",out);
        1:   52:	assert(out == 12);
        1:   53:	testG.hand[thisPlayer][3] = province; //6
        1:   54:	out = scoreFor(thisPlayer,&testG);
        1:   55:	printf("new ScoreFor returned: %d (expected 17).\n",out);
        1:   56:	assert(out == 17);
        1:   57:	printf("Test 1 Passed\n");
        -:   58:
        1:   59:	printf("\nTest 2: discarding a card.\n");
        1:   60:	out = discardCard(4,thisPlayer,&testG,0);
        1:   61:	out = discardCard(3,thisPlayer,&testG,0);
        1:   62:	out = scoreFor(thisPlayer,&testG);
        1:   63:	printf("new ScoreFor returned: %d (expected 10).\n",out);
        1:   64:	assert(out == 10);
        1:   65:	printf("Test 2 Passed\n");
        -:   66:
        1:   67:	return 0;	//No bugs found
        -:   68:}
