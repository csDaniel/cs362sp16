        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:/* ---------------------------------------------------------------------
        -:    2:* Jon Patterson
        -:    3:* Assignment 3
        -:    4:* cardtest1.c
        -:    5:* smithy card tests
        -:    6:*---------------------------------------------------------------------*/
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <assert.h>
        -:   12:#include "rngs.h"
        -:   13:#include <time.h>
        -:   14:#include <stdlib.h>
        -:   15:
        -:   16:// set NOISY_TEST to 0 to remove printfs from output
        -:   17:#define NOISY_TEST 1
        -:   18:// set ASSERTS_ON to 0 to disable asserts for investigating gcov
        -:   19:#define ASSERTS_ON 0
        -:   20:
function main called 4 returned 100% blocks executed 88%
        4:   21:int main() {
        4:   22:    int seed = 1000;
        4:   23:    int numPlayer = 2;
        -:   24:    int p, r;
        4:   25:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   26:               , remodel, smithy, village, baron, great_hall};
        -:   27:    struct gameState G;
        -:   28:    int error;
        -:   29:
        4:   30:    memset(&G, 23, sizeof(struct gameState));
        4:   31:    r = initializeGame(numPlayer, k, seed, &G);
call    0 returned 100%
        -:   32:    // ensure that the values of all of the supply cards are are at least 2
        4:   33:    int j = 0;
      104:   34:    for(j = 0; j < 25; j++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
      100:   35:        G.supplyCount[j] = 2;
        -:   36:    }
        -:   37:
        4:   38:    printf ("Testing smithy for playCard(0, 0, 0, 0, gamestate):\n");
call    0 returned 100%
        4:   39:    for (p = 0; p < numPlayer; p++){
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        4:   40:    	printf("Testing for player %d:\n", p);
call    0 returned 100%
        4:   41:	    int testActions = G.numActions;
        4:   42:	    int testBuys = G.numBuys;
        4:   43:	    int testHandCount = G.handCount[p];
        4:   44:	    int testDeckCount = G.deckCount[p];
        -:   45:
        -:   46:	    // make card in hand a smithy
        4:   47:	    G.hand[p][0] = smithy;
        -:   48:	    //play it
        4:   49:	    playCard(0, 0, 0, 0, &G);
call    0 returned 100%
        -:   50:
        -:   51:	 	//Upon execution, adjust test values
        -:   52:	 	//test actions should be one less
        4:   53:	 	testActions--;
        -:   54:	 	//net hand count should now be +2
        4:   55:	 	testHandCount += 2;
        -:   56:	 	//deck count should be 3 less
        4:   57:	 	testDeckCount -= 3;
        -:   58:	 	#if (NOISY_TEST == 1)
        4:   59:        printf("Test actions updated correctly:\n");
call    0 returned 100%
        4:   60:        printf("Actions = %d, Expected = %d\n", G.numActions, testActions);
call    0 returned 100%
        4:   61:        printf("Test buys unchanged:\n");
call    0 returned 100%
        4:   62:        printf("Buys = %d, Expected = %d\n", G.numBuys, testBuys);
call    0 returned 100%
        4:   63:        printf("Test deck updated correctly:\n");
call    0 returned 100%
        4:   64:        printf("Deck = %d, Expected = %d\n", G.deckCount[p], testDeckCount);
call    0 returned 100%
        4:   65:        printf("Test hand updated correctly:\n");
call    0 returned 100%
        4:   66:        printf("Hand = %d, Expected = %d\n", G.handCount[p], testHandCount);
call    0 returned 100%
        -:   67:        #endif
        -:   68:        #if (ASSERTS_ON == 1)
        -:   69:        assert(G.numActions == testActions);
        -:   70:        assert(G.numBuys == testBuys);
        -:   71:        assert(G.deckCount[p] == testDeckCount);
        -:   72:        assert(G.handCount[p] == testHandCount);
        -:   73:        #endif
        4:   74:        if (G.numActions != testActions) error = 1;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        4:   75:        if (G.numBuys != testBuys) error = 1;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        4:   76:        if (G.deckCount[p] != testDeckCount	) error = 1;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:   77:        if (G.handCount[p] != testHandCount	) error = 1;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:   78:        if(error == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:   79:        	printf("Errors were encountered.\n");
call    0 returned 100%
        4:   80:        	return 1;
        -:   81:        }
        -:   82:
        -:   83:    }
    #####:   84:    return 0;
        -:   85:}
        -:   86:
