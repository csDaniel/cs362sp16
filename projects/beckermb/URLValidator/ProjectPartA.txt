CS 362 - Project Part A
May 4, 2016

Group Members:
Ben Beckerman - beckermb@oregonstate.edu
James Pool - poolj@oregonstate.edu
Susan Eldridge - eldridgs@oregonstate.edu


Explain testIsValid Function of UrlValidator test Code:
 - Initializes testPartsIndex[] to {0, 0, 0, 0, 0} (.length = 5)
    Note: the values at the index locations correspond to the current testUrlScheme indexes.

 - Initializes testUrlParts[] to the following: (.length = 5)
	[0]: testUrlScheme (.length = 9)
	[1]: testUrlAuthority (.length = 19)
	[2]: testUrlPort (.length = 7)
	[3]: testPath (.length = 10)
	[4]: testUrlQuery (.length = 3)
	Note: Combined to form URL for testing as follows:
			<scheme>://<authority><port><path>?<query>
	Note: The values are pairs with a string and a boolean (True/False) which indicates if that portion of the string is valid URL syntax.

testIsValid() {line 43} passes testUrlParts and the options to the overloaded function testIsValid(Object[] testObjects, long options) {line 85}. The overloaded function generates a composite URLs to test by building a string buffer based on the current values in the testPartsIndex array. It also generates an expected return value based on the True/False of each string portion.

The function then tests the composite URL using the isValid class function. If the predicted and actual test results are equal, it prints out the composite URL to the console. The function also asserts that the URLs are equal, producing an assert message displaying the composite URL that produces no-predicted results.

The function then loops through all of the possible combinations from the testUrlParts by use of the testPartsIndex. The total number of URLs that are tested by this function is 31,920.

Some examples of composite URLs that are generated are shown below:
	Example 1:
	testPartsIndex[] = {0, 0, 0, 0, 0} contains the following
	parts:
		- testUrlScheme[0]: "http://", true
		- testUrlAutority[0]: "www.google.com", true
		- testUrlPort[0]: ":80", true
		- testPath[0]: "/test1", true
		- testUrlPathOptions[0]: "?action=view", true
	This produces a composite URL of:
		"http://www.google.com:80/test1?action=view"
	Note: By applying the and operation to the True/False values associated with the URL string portions, we get a true predicted result, which matches what is returned from the isValid class function. This URL is printed to the console

	Example 2:
	testPartsIndex[] = {1, 2, 3, 4, 0} contains the following parts:
		- testUrlScheme[1]: "ftp://", true
		- testUrlAutority[2]: "go.com", true
		- testUrlPort[3]: ":0", true
		- testPath[4]: "/..", false
		- testUrlPathOptions[0]: "?action=view", true
	This produces a composite URL of:
		"ftp://go.com:0/..?action=view"
	Note: By applying the and operation to the True/False values associated with the URL string portions, we get a false predicted result, which matches what is returned from the isValid class function. This URL is not printed to the console.

This function applies the same concepts that we have implemented in the various unit and card tests for the class Dominion project. The main difference is that the amount of test cases executed in the URL validation is significantly higher. Given the variation of a legal URLs, the URLValidator must be tested with more cases, since the range of possible combinations is very high.

In both tests, a test cases is procedurally generated and run through a verification routine, then the results are displayed.
