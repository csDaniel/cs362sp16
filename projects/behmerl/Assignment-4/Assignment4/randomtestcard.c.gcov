        -:    0:Source:randomtestcard.c
        -:    0:Graph:randomtestcard.gcno
        -:    0:Data:randomtestcard.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:#include <math.h>
        -:    9:
        -:   10://Lucile Behmer
        -:   11://CS362 
        -:   12://Assignment 4
        -:   13:
        1:   14:int main()
        -:   15:{
        -:   16:
        1:   17:        printf("This is a random test for the smithy card.\n");
        1:   18:        int seed = 1000;
        1:   19:        int numPlayer = 2;
        -:   20://	time_t t;
        -:   21:	int rNum;
        -:   22:        int p, r, handCount;
        -:   23:
        1:   24:        int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   25:               , remodel, smithy, village, baron, great_hall};
        -:   26:        struct gameState G;
        -:   27:
        1:   28:        p =1;
        1:   29:        handCount=3;
        -:   30:
        1:   31:        memset(&G, 23, sizeof(struct gameState));
        -:   32:
        1:   33:        r = initializeGame(numPlayer, k, seed, &G);
        -:   34:
        -:   35:
        1:   36: 	G.handCount[p] = handCount;
        -:   37:
        1:   38:        if(r==-1)
        -:   39:        {
    #####:   40:                exit(0);
        -:   41:        }
        1:   42:	rNum= (rand()%10)+3;
        -:   43:        int i;
        -:   44:        int counter;
        -:   45:	int g;
        1:   46:        counter= G.handCount[rNum];
        -:   47:	//This is used a random number generator to use 
        -:   48:	//different values of number of cards for the user
        -:   49:        //
        6:   50:	for(g=0; g<5; g++)
        -:   51:	{
        5:   52:	i = Smithy(1, &G, 3, rNum);
        5:   53:        if (counter < G.handCount[rNum])
        -:   54:        {
    #####:   55:        printf("This test passed.\n");
        -:   56:        }
        -:   57:        else
        5:   58:        printf("This test failed. Three cards have not been added.\n");
        -:   59:	}
        1:   60:	i=0;
        1:   61:        return 0;
        -:   62:
        -:   63:
        -:   64:}
        -:   65:
