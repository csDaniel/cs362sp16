CS 362 - Software Engineering II
Carolyn Cheung, Michael Lee, Ismail Orabi
Due: May 8, 2016


Final Project: Part A


1. Explain testIsValid Function of UrlValidator test code. Give how many total number of urls it is testing. 


testIsValid() is the tester for UrlValidator::isValid(). The method creates a UrlValidator object to be put under test and immediately tests the validator with 2 base valid urls. testIsValid() then loops through several test cases by building different urls based on the 5 arrays of url parts. When a permutation of a url is built from the 5 different parts, the validator checks if it is valid and if so, prints it to standard out, while also asserting the expected result. The total number of urls being tested is a permutation of all the different parts needed to build the urls.  There are 9 schemes, 19 authorities, 7 ports, 10 paths, and 3 queries. The total number of urls tested is all possible permutations of these parts (9*19*7*10*3 = 35,910 urls)


1. Also, explain how it is building all the urls. Give an example of valid url being tested and an invalid url being tested by testIsValid() method.  
        
        TestIsValid takes an object, Object[] testObjects, to create the urls that it tests. Within the 
Do while loop the function has a for loop which creates the string url by appending one element from each of the ResultPairs that the object consists of: in this case, testUrlScheme, testUrlAuthority, testUrlPort, testPath, and testUrlQuery. 


A valid url would be built from all true result pairs:
http://www.google.com:80/test1?action=view


A invalid url would have an element or multiple elements built from a false result pair:
http:/go.com:65535/..?action=edit&mode=up


In this case both “http:/” and “/..” are invalid url options


1. Do you think that a real world test (URL Validator's testIsValid() test in this case) is very different than the unit tests and card tests that we wrote (in terms of concepts & complexity)? Explain in few lines. 


The tests used are not very different from the ones used in the unit and card tests in terms of concepts. They check to see if the URL is valid, then print out the results if they are valid or not. The tests include both real and fake URLs, so it is very similar to what we’ve created for our dominion game. For complexity, it is somewhat comparable but there are more parts to a URL, thus more specific cases and options are added. For example, users can set certain ports to be failed, or certain URL schemes to be failed. This is something we weren’t using in the dominion tests.