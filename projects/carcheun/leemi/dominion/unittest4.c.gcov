        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Carolyn Cheung
        -:    3: * Testing: scoreFor
        -:    4: *      Player Score
        -:    5: */
        -:    6: #include<stdio.h>
        -:    7:#include<stdlib.h>
        -:    8:#include <assert.h>
        -:    9:#include <string.h>
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include "rngs.h"
        -:   13:
        -:   14:#define TESTCARD "DrawCard()"
        -:   15:
function testScoreFor called 1 returned 100% blocks executed 96%
        1:   16:void testScoreFor() {
        -:   17:    struct gameState gStateTest;
        1:   18:    int seed = 7;
        1:   19:    int discard = 1;
        1:   20:    int numPlayers = 2;
        1:   21:    int p = 0;
        1:   22:    int choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0, handPos = 0;
        1:   23:    int cardCount = 0, cardCountTest = 0;
        -:   24:    int i, j, total;
        -:   25:
        1:   26:    int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   27:			sea_hag, tribute, smithy, council_room};
        -:   28:
        1:   29:    initializeGame(numPlayers, k, seed, &gStateTest);
call    0 returned 100%
        6:   30:    for (i = 0; i < gStateTest.handCount[p]; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   31:            gStateTest.hand[p][i] = province;
        -:   32:    }
        -:   33:
        1:   34:    printf("==== TESTING: %s ====\n", TESTCARD);
call    0 returned 100%
        1:   35:    printf("\nCASE 1: Full hand of provinces\n");
call    0 returned 100%
        1:   36:    printf("        Expected vs Real\n");
call    0 returned 100%
        1:   37:    total = gStateTest.handCount[p] * 6;
        1:   38:    printf(" full hand province = %d vs %d\n", total, scoreFor(p, &gStateTest));
call    0 returned 100%
call    1 returned 100%
        1:   39:    assert(total == scoreFor(p, &gStateTest));
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:   40:
        1:   41:    initializeGame(numPlayers, k, seed, &gStateTest);
call    0 returned 100%
        6:   42:    for (i = 0; i < gStateTest.handCount[p]; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   43:            gStateTest.hand[p][i] = great_hall;
        -:   44:    }
        -:   45:
        1:   46:    printf("\nCASE 2: Full hand of great_hall\n");
call    0 returned 100%
        1:   47:    printf("        Expected vs Real\n");
call    0 returned 100%
        1:   48:    total = gStateTest.handCount[p] * 1;
        1:   49:    printf(" full hand province = %d vs %d\n", total, scoreFor(p, &gStateTest));
call    0 returned 100%
call    1 returned 100%
        1:   50:    assert(total == scoreFor(p, &gStateTest));
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        -:   51:
        1:   52:    initializeGame(numPlayers, k, seed, &gStateTest);
call    0 returned 100%
        -:   53:
        1:   54:    gStateTest.handCount[p] = 6;
        1:   55:    gStateTest.discardCount[p] = 6;
        1:   56:    gStateTest.deckCount[p] = 6;
        -:   57:
        7:   58:    for (i = 0; i < 6; i++) {
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        6:   59:        if (i == 0) {
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        1:   60:            gStateTest.hand[p][i] = curse;
        1:   61:            gStateTest.deck[p][i] = curse;
        1:   62:            gStateTest.discard[p][i] = curse;
        -:   63:        }
        6:   64:        if ( i == 1) {
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        1:   65:            gStateTest.hand[p][i] = estate;
        1:   66:            gStateTest.deck[p][i] = estate;
        1:   67:            gStateTest.discard[p][i] = estate;
        -:   68:        }
        6:   69:        if ( i == 2) {
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        1:   70:            gStateTest.hand[p][i] = duchy;
        1:   71:            gStateTest.deck[p][i] = duchy;
        1:   72:            gStateTest.discard[p][i] = duchy;
        -:   73:        }
        6:   74:        if ( i == 3) {
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        1:   75:            gStateTest.hand[p][i] = province;
        1:   76:            gStateTest.deck[p][i] = province;
        1:   77:            gStateTest.discard[p][i] = province;
        -:   78:        }
        6:   79:        if (i == 4) {
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        1:   80:            gStateTest.hand[p][i] = great_hall;
        1:   81:            gStateTest.deck[p][i] = great_hall;
        1:   82:            gStateTest.discard[p][i] = great_hall;
        -:   83:        }
        6:   84:        if (i == 5) {
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        1:   85:            gStateTest.hand[p][i] = gardens;
        1:   86:            gStateTest.deck[p][i] = gardens;
        1:   87:            gStateTest.discard[p][i] = gardens;
        -:   88:        }
        -:   89:    }
        1:   90:    printf("\nCASE 3: 1 of every score card in hand, discard, deck\n");
call    0 returned 100%
        1:   91:    printf("        Expected vs Real\n");
call    0 returned 100%
        1:   92:    total = 0 -1 +1 + 3 + 6 + 1;
        1:   93:    total += ((gStateTest.handCount[p] + gStateTest.deckCount[p] + gStateTest.discardCount[p]) / 10);
        1:   94:    total *= 3;
        -:   95:
        1:   96:    printf(" full hand province = %d vs %d\n", total, scoreFor(p, &gStateTest));
call    0 returned 100%
call    1 returned 100%
        -:   97:    //assert(total == scoreFor(p, &gStateTest));
        -:   98:
        1:   99:    printf("\nCASE 4: hand = estate, deck = duchy, discard = province\n");
call    0 returned 100%
        1:  100:    initializeGame(numPlayers, k, seed, &gStateTest);
call    0 returned 100%
        1:  101:    gStateTest.discardCount[p] = 3;
        1:  102:    gStateTest.deckCount[p] = 2;
        -:  103:
        6:  104:    for (i = 0; i < gStateTest.handCount[p]; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  105:            gStateTest.hand[p][i] = estate;
        5:  106:            gStateTest.deck[p][i] = duchy;
        5:  107:            gStateTest.discard[p][i] = province;
        -:  108:    }
        -:  109:
        1:  110:    total = (1 * gStateTest.handCount[p]) + (3 * 2) + (6 * 3);
        1:  111:    printf(" full hand province = %d vs %d\n", total, scoreFor(p, &gStateTest));
call    0 returned 100%
call    1 returned 100%
        -:  112:    //assert(total == scoreFor(p, &gStateTest));
        -:  113:
        1:  114:    printf("\n      testScoreFor(): PASS\n");
call    0 returned 100%
        1:  115:}
        -:  116:
function main called 1 returned 100% blocks executed 100%
        1:  117:int main() {
        1:  118:    testScoreFor();
call    0 returned 100%
        1:  119:    return 0;
        -:  120:}
