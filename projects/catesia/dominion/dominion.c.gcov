        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 25620 returned 100% blocks executed 85%
        -:    8:int compare(const void* a, const void* b) {
    25620:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   10:    return 1;
    25620:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
     9150:   12:    return -1;
    16470:   13:  return 0;
    25620:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 915 returned 100% blocks executed 87%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      915:   44:  SelectStream(1);
      915:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     1830:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      915:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    20130:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
   201300:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
   173850:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
    91500:   65:        }
     9150:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      915:   73:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   74:    {
      915:   75:      state->supplyCount[curse] = 10;
      915:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      915:   87:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   88:    {
      915:   89:      state->supplyCount[estate] = 8;
      915:   90:      state->supplyCount[duchy] = 8;
      915:   91:      state->supplyCount[province] = 8;
      915:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      915:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      915:  102:  state->supplyCount[silver] = 40;
      915:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    38430:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
   301950:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
   141825:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    17385:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 11%
branch  3 taken 89%
        -:  114:		{
     1830:  115:		  if (numPlayers == 2){ 
branch  0 taken 100%
branch  1 taken 0%
     1830:  116:		    state->supplyCount[i] = 8; 
     1830:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
     1830:  119:		}
        -:  120:	      else
        -:  121:		{
     7320:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     9150:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   132675:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
   132675:  130:	}
        -:  131:
    18300:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     5490:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  139:    {
     1830:  140:      state->deckCount[i] = 0;
    14640:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:	{
     5490:  143:	  state->deck[i][j] = estate;
     5490:  144:	  state->deckCount[i]++;
     5490:  145:	}
    29280:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:	{
    12810:  148:	  state->deck[i][j] = copper;
    12810:  149:	  state->deckCount[i]++;		
    12810:  150:	}
     1830:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     5490:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  155:    {
     1830:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
     1830:  160:    }
        -:  161:
        -:  162:  //draw player hands
     5490:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     1830:  166:      state->handCount[i] = 0;
     1830:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
     1830:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    51240:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
    24705:  178:      state->embargoTokens[i] = 0;
    24705:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      915:  182:  state->outpostPlayed = 0;
      915:  183:  state->phase = 0;
      915:  184:  state->numActions = 1;
      915:  185:  state->numBuys = 1;
      915:  186:  state->playedCardCount = 0;
      915:  187:  state->whoseTurn = 0;
      915:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    10980:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
     4575:  193:    drawCard(state->whoseTurn, state);
     4575:  194:  }
        -:  195:
      915:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      915:  198:  return 0;
      915:  199:}
        -:  200:
function shuffle called 1830 returned 100% blocks executed 93%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     1830:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     1830:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0%
branch  1 taken 100%
    #####:  210:    return -1;
     1830:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    40260:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
    18300:  215:    card = floor(Random() * state->deckCount[player]);
    18300:  216:    newDeck[newDeckPos] = state->deck[player][card];
    18300:  217:    newDeckPos++;
   128100:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29%
    45750:  219:      state->deck[player][i] = state->deck[player][i+1];
    45750:  220:    }
    18300:  221:    state->deckCount[player]--;
        -:  222:  }
    40260:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
    18300:  224:    state->deck[player][i] = newDeck[i];
    18300:  225:    state->deckCount[player]++;
    18300:  226:  }
        -:  227:
     1830:  228:  return 0;
     1830:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
function buyCard called 2000 returned 100% blocks executed 100%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
     2000:  280:  who = state->whoseTurn;
        -:  281:
     2000:  282:  if (state->numBuys < 1){
branch  0 taken 48%
branch  1 taken 52%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
      959:  285:    return -1;
     1041:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 taken 51%
branch  1 taken 49%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
      526:  289:    return -1;
      515:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 taken 50%
branch  1 taken 50%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
      255:  293:    return -1;
        -:  294:  } else {
      260:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
      260:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
      260:  299:    state->coins = (state->coins) - (getCost(supplyPos));
      260:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
      260:  308:  return 0;
     2000:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 1301 returned 100% blocks executed 100%
        -:  320:int supplyCount(int card, struct gameState *state) {
     1301:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 8 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
        8:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 3200 returned 100% blocks executed 100%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
     3200:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 25%
branch  1 taken 75%
        -:  396:    {
      800:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
     2400:  401:  j = 0;
   124800:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  403:    {
    60000:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 8%
branch  1 taken 92%
        -:  405:	{
     4800:  406:	  j++;
     4800:  407:	}
    60000:  408:    }
     2400:  409:  if ( j >= 3)
branch  0 taken 33%
branch  1 taken 67%
        -:  410:    {
      800:  411:      return 1;
        -:  412:    }
        -:  413:
     1600:  414:  return 0;
     3200:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 4582 returned 100% blocks executed 41%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     4582:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0%
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
     4582:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     4582:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     4582:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     4582:  576:    state->deckCount[player]--;
     4582:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     4582:  580:  return 0;
     4582:  581:}
        -:  582:
function getCost called 2775 returned 100% blocks executed 41%
        -:  583:int getCost(int cardNumber)
        -:  584:{
     2775:  585:  switch( cardNumber ) 
branch  0 taken 9%
branch  1 taken 10%
branch  2 taken 9%
branch  3 taken 10%
branch  4 taken 11%
branch  5 taken 10%
branch  6 taken 11%
branch  7 taken 10%
branch  8 taken 11%
branch  9 taken 9%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
      238:  588:      return 0;
        -:  589:    case estate:
      277:  590:      return 2;
        -:  591:    case duchy:
      257:  592:      return 5;
        -:  593:    case province:
      267:  594:      return 8;
        -:  595:    case copper:
      299:  596:      return 0;
        -:  597:    case silver:
      291:  598:      return 3;
        -:  599:    case gold:
      308:  600:      return 6;
        -:  601:    case adventurer:
      282:  602:      return 6;
        -:  603:    case council_room:
      293:  604:      return 5;
        -:  605:    case feast:
      263:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
     2775:  644:}
        -:  645:
function cardEffect called 4 returned 100% blocks executed 3%
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        4:  653:  int currentPlayer = whoseTurn(state);
        4:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        4:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        4:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
        4:  660:  int z = 0;// this is the counter for the temp hand
        4:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0%
branch  1 taken 100%
    #####:  662:    nextPlayer = 0;
    #####:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
        4:  667:  switch( card ) 
branch  0 taken 25%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 25%
branch  8 taken 0%
branch  9 taken 25%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:    {
        -:  669:    case adventurer:
        1:  670:      return playAdventurer(state);
        -:  671:			
        -:  672:    case council_room:
        -:  673:      //+4 Cards
    #####:  674:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  675:	{
    #####:  676:	  drawCard(currentPlayer, state);
    #####:  677:	}
        -:  678:			
        -:  679:      //+1 Buy
    #####:  680:      state->numBuys++;
        -:  681:			
        -:  682:      //Each other player draws a card
    #####:  683:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  684:	{
    #####:  685:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  686:	    {
    #####:  687:	      drawCard(i, state);
    #####:  688:	    }
    #####:  689:	}
        -:  690:			
        -:  691:      //put played card in played card pile
    #####:  692:      discardCard(handPos, currentPlayer, state, 0);
        -:  693:			
    #####:  694:      return 0;
        -:  695:			
        -:  696:    case feast:
        -:  697:      //gain card with cost up to 5
        -:  698:      //Backup hand
    #####:  699:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  700:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  701:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  702:      }
        -:  703:      //Backup hand
        -:  704:
        -:  705:      //Update Coins for Buy
    #####:  706:      updateCoins(currentPlayer, state, 5);
    #####:  707:      x = 1;//Condition to loop on
    #####:  708:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  709:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  710:	  if (DEBUG)
        -:  711:	    printf("None of that card left, sorry!\n");
        -:  712:
        -:  713:	  if (DEBUG){
        -:  714:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  715:	  }
    #####:  716:	}
    #####:  717:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  718:	  printf("That card is too expensive!\n");
        -:  719:
        -:  720:	  if (DEBUG){
        -:  721:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  722:	  }
    #####:  723:	}
        -:  724:	else{
        -:  725:
        -:  726:	  if (DEBUG){
        -:  727:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  728:	  }
        -:  729:
    #####:  730:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  731:	  x = 0;//No more buying cards
        -:  732:
        -:  733:	  if (DEBUG){
        -:  734:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  735:	  }
        -:  736:
        -:  737:	}
        -:  738:      }     
        -:  739:
        -:  740:      //Reset Hand
    #####:  741:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  742:	state->hand[currentPlayer][i] = temphand[i];
    #####:  743:	temphand[i] = -1;
    #####:  744:      }
        -:  745:      //Reset Hand
        -:  746:      			
    #####:  747:      return 0;
        -:  748:			
        -:  749:    case gardens:
    #####:  750:      return -1;
        -:  751:			
        -:  752:    case mine:
    #####:  753:      return playMine(state, handPos, choice1, choice2);
        -:  754:			
        -:  755:    case remodel:
    #####:  756:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  757:
    #####:  758:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  759:	{
    #####:  760:	  return -1;
        -:  761:	}
        -:  762:
    #####:  763:      gainCard(choice2, state, 0, currentPlayer);
        -:  764:
        -:  765:      //discard card from hand
    #####:  766:      discardCard(handPos, currentPlayer, state, 0);
        -:  767:
        -:  768:      //discard trashed card
    #####:  769:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  770:	{
    #####:  771:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  772:	    {
    #####:  773:	      discardCard(i, currentPlayer, state, 0);			
    #####:  774:	      break;
        -:  775:	    }
    #####:  776:	}
        -:  777:
        -:  778:
    #####:  779:      return 0;
        -:  780:		
        -:  781:    case smithy:
        1:  782:      return playSmithy(state, handPos);
        -:  783:		
        -:  784:    case village:
        1:  785:      return playVillage(state, handPos);
        -:  786:		
        -:  787:    case baron:
    #####:  788:      state->numBuys++;//Increase buys by 1!
    #####:  789:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  790:	int p = 0;//Iterator for hand!
    #####:  791:	int card_not_discarded = 1;//Flag for discard set!
    #####:  792:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  793:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  794:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  795:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  796:	    state->discardCount[currentPlayer]++;
    #####:  797:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  798:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  799:	    }
    #####:  800:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  801:	    state->handCount[currentPlayer]--;
    #####:  802:	    card_not_discarded = 0;//Exit the loop
    #####:  803:	  }
    #####:  804:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  805:	    if(DEBUG) {
        -:  806:	      printf("No estate cards in your hand, invalid choice\n");
        -:  807:	      printf("Must gain an estate if there are any\n");
        -:  808:	    }
    #####:  809:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  810:	      gainCard(estate, state, 0, currentPlayer);
    #####:  811:	      state->supplyCount[estate]--;//Decrement estates
    #####:  812:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  813:		isGameOver(state);
    #####:  814:	      }
    #####:  815:	    }
    #####:  816:	    card_not_discarded = 0;//Exit the loop
    #####:  817:	  }
        -:  818:			    
        -:  819:	  else{
    #####:  820:	    p++;//Next card
        -:  821:	  }
        -:  822:	}
    #####:  823:      }
        -:  824:			    
        -:  825:      else{
    #####:  826:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  827:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  828:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  829:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  830:	    isGameOver(state);
    #####:  831:	  }
    #####:  832:	}
        -:  833:      }
        -:  834:	    
        -:  835:      
    #####:  836:      return 0;
        -:  837:		
        -:  838:    case great_hall:
        1:  839:      return playGreat_Hall(state, handPos);
        -:  840:		
        -:  841:    case minion:
        -:  842:      //+1 action
    #####:  843:      state->numActions++;
        -:  844:			
        -:  845:      //discard card from hand
    #####:  846:      discardCard(handPos, currentPlayer, state, 0);
        -:  847:			
    #####:  848:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  849:	{
    #####:  850:	  state->coins = state->coins + 2;
    #####:  851:	}
        -:  852:			
    #####:  853:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  854:	{
        -:  855:	  //discard hand
    #####:  856:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  857:	    {
    #####:  858:	      discardCard(handPos, currentPlayer, state, 0);
        -:  859:	    }
        -:  860:				
        -:  861:	  //draw 4
    #####:  862:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  863:	    {
    #####:  864:	      drawCard(currentPlayer, state);
    #####:  865:	    }
        -:  866:				
        -:  867:	  //other players discard hand and redraw if hand size > 4
    #####:  868:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  869:	    {
    #####:  870:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  871:		{
    #####:  872:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  873:		    {
        -:  874:		      //discard hand
    #####:  875:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  876:			{
    #####:  877:			  discardCard(handPos, i, state, 0);
        -:  878:			}
        -:  879:							
        -:  880:		      //draw 4
    #####:  881:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  882:			{
    #####:  883:			  drawCard(i, state);
    #####:  884:			}
    #####:  885:		    }
    #####:  886:		}
    #####:  887:	    }
        -:  888:				
    #####:  889:	}
    #####:  890:      return 0;
        -:  891:		
        -:  892:    case steward:
    #####:  893:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  894:	{
        -:  895:	  //+2 cards
    #####:  896:	  drawCard(currentPlayer, state);
    #####:  897:	  drawCard(currentPlayer, state);
    #####:  898:	}
    #####:  899:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  900:	{
        -:  901:	  //+2 coins
    #####:  902:	  state->coins = state->coins + 2;
    #####:  903:	}
        -:  904:      else
        -:  905:	{
        -:  906:	  //trash 2 cards in hand
    #####:  907:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  908:	  discardCard(choice3, currentPlayer, state, 1);
        -:  909:	}
        -:  910:			
        -:  911:      //discard card from hand
    #####:  912:      discardCard(handPos, currentPlayer, state, 0);
    #####:  913:      return 0;
        -:  914:		
        -:  915:    case tribute:
    #####:  916:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  917:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  918:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  919:	  state->deckCount[nextPlayer]--;
    #####:  920:	}
    #####:  921:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  922:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  923:	  state->discardCount[nextPlayer]--;
    #####:  924:	}
        -:  925:	else{
        -:  926:	  //No Card to Reveal
        -:  927:	  if (DEBUG){
        -:  928:	    printf("No cards to reveal\n");
        -:  929:	  }
        -:  930:	}
    #####:  931:      }
        -:  932:	    
        -:  933:      else{
    #####:  934:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  935:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  936:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  937:	    state->deckCount[nextPlayer]++;
    #####:  938:	    state->discard[nextPlayer][i] = -1;
    #####:  939:	    state->discardCount[nextPlayer]--;
    #####:  940:	  }
        -:  941:			    
    #####:  942:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  943:	} 
    #####:  944:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  945:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  946:	state->deckCount[nextPlayer]--;
    #####:  947:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  948:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  949:	state->deckCount[nextPlayer]--;
        -:  950:      }    
        -:  951:		       
    #####:  952:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  953:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  954:	state->playedCardCount++;
    #####:  955:	tributeRevealedCards[1] = -1;
    #####:  956:      }
        -:  957:
    #####:  958:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  959:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  960:	  state->coins += 2;
    #####:  961:	}
        -:  962:		    
    #####:  963:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  964:	  drawCard(currentPlayer, state);
    #####:  965:	  drawCard(currentPlayer, state);
    #####:  966:	}
        -:  967:	else{//Action Card
    #####:  968:	  state->numActions = state->numActions + 2;
        -:  969:	}
    #####:  970:      }
        -:  971:	    
    #####:  972:      return 0;
        -:  973:		
        -:  974:    case ambassador:
    #####:  975:      j = 0;		//used to check if player has enough cards to discard
        -:  976:
    #####:  977:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  978:	{
    #####:  979:	  return -1;				
        -:  980:	}
        -:  981:
    #####:  982:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  983:	{
    #####:  984:	  return -1;
        -:  985:	}
        -:  986:
    #####:  987:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  988:	{
    #####:  989:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  990:	    {
    #####:  991:	      j++;
    #####:  992:	    }
    #####:  993:	}
    #####:  994:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  995:	{
    #####:  996:	  return -1;				
        -:  997:	}
        -:  998:
        -:  999:      if (DEBUG) 
        -: 1000:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1001:
        -: 1002:      //increase supply count for choosen card by amount being discarded
    #####: 1003:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1004:			
        -: 1005:      //each other player gains a copy of revealed card
    #####: 1006:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1007:	{
    #####: 1008:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1009:	    {
    #####: 1010:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1011:	    }
    #####: 1012:	}
        -: 1013:
        -: 1014:      //discard played card from hand
    #####: 1015:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1016:
        -: 1017:      //trash copies of cards returned to supply
    #####: 1018:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1019:	{
    #####: 1020:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1021:	    {
    #####: 1022:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1023:		{
    #####: 1024:		  discardCard(i, currentPlayer, state, 1);
    #####: 1025:		  break;
        -: 1026:		}
    #####: 1027:	    }
    #####: 1028:	}			
        -: 1029:
    #####: 1030:      return 0;
        -: 1031:		
        -: 1032:    case cutpurse:
        -: 1033:
    #####: 1034:      updateCoins(currentPlayer, state, 2);
    #####: 1035:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1036:	{
    #####: 1037:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1038:	    {
    #####: 1039:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1040:		{
    #####: 1041:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1042:		    {
    #####: 1043:		      discardCard(j, i, state, 0);
    #####: 1044:		      break;
        -: 1045:		    }
    #####: 1046:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1047:		    {
    #####: 1048:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1049:			{
        -: 1050:			  if (DEBUG)
        -: 1051:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1052:			}	
    #####: 1053:		      break;
        -: 1054:		    }		
    #####: 1055:		}
        -: 1056:					
    #####: 1057:	    }
        -: 1058:				
    #####: 1059:	}				
        -: 1060:
        -: 1061:      //discard played card from hand
    #####: 1062:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1063:
    #####: 1064:      return 0;
        -: 1065:
        -: 1066:		
        -: 1067:    case embargo: 
        -: 1068:      //+2 Coins
    #####: 1069:      state->coins = state->coins + 2;
        -: 1070:			
        -: 1071:      //see if selected pile is in play
    #####: 1072:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1073:	{
    #####: 1074:	  return -1;
        -: 1075:	}
        -: 1076:			
        -: 1077:      //add embargo token to selected supply pile
    #####: 1078:      state->embargoTokens[choice1]++;
        -: 1079:			
        -: 1080:      //trash card
    #####: 1081:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1082:      return 0;
        -: 1083:		
        -: 1084:    case outpost:
        -: 1085:      //set outpost flag
    #####: 1086:      state->outpostPlayed++;
        -: 1087:			
        -: 1088:      //discard card
    #####: 1089:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1090:      return 0;
        -: 1091:		
        -: 1092:    case salvager:
        -: 1093:      //+1 buy
    #####: 1094:      state->numBuys++;
        -: 1095:			
    #####: 1096:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1097:	{
        -: 1098:	  //gain coins equal to trashed card
    #####: 1099:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1100:	  //trash card
    #####: 1101:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1102:	}
        -: 1103:			
        -: 1104:      //discard card
    #####: 1105:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1106:      return 0;
        -: 1107:		
        -: 1108:    case sea_hag:
    #####: 1109:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1110:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1111:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1112:	  state->discardCount[i]++;
    #####: 1113:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1114:	}
    #####: 1115:      }
    #####: 1116:      return 0;
        -: 1117:		
        -: 1118:    case treasure_map:
        -: 1119:      //search hand for another treasure_map
    #####: 1120:      index = -1;
    #####: 1121:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1122:	{
    #####: 1123:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1124:	    {
    #####: 1125:	      index = i;
    #####: 1126:	      break;
        -: 1127:	    }
    #####: 1128:	}
    #####: 1129:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1130:	{
        -: 1131:	  //trash both treasure cards
    #####: 1132:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1133:	  discardCard(index, currentPlayer, state, 1);
        -: 1134:
        -: 1135:	  //gain 4 Gold cards
    #####: 1136:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1137:	    {
    #####: 1138:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1139:	    }
        -: 1140:				
        -: 1141:	  //return success
    #####: 1142:	  return 1;
        -: 1143:	}
        -: 1144:			
        -: 1145:      //no second treasure_map found in hand
    #####: 1146:      return -1;
        -: 1147:    }
        -: 1148:	
    #####: 1149:  return -1;
        4: 1150:}
        -: 1151:
function discardCard called 2 returned 100% blocks executed 80%
        -: 1152:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1153:{
        -: 1154:	
        -: 1155:  //if card is not trashed, added to Played pile 
        2: 1156:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1157:    {
        -: 1158:      //add card to played pile
        2: 1159:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1160:      state->playedCardCount++;
        2: 1161:    }
        -: 1162:	
        -: 1163:  //set played card to -1
        2: 1164:  state->hand[currentPlayer][handPos] = -1;
        -: 1165:	
        -: 1166:  //remove card from player's hand
        2: 1167:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1168:    {
        -: 1169:      //reduce number of cards in hand
    #####: 1170:      state->handCount[currentPlayer]--;
    #####: 1171:    }
        2: 1172:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1173:    {
        -: 1174:      //reduce number of cards in hand
    #####: 1175:      state->handCount[currentPlayer]--;
    #####: 1176:    }
        -: 1177:  else 	
        -: 1178:    {
        -: 1179:      //replace discarded card with last card in hand
        2: 1180:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1181:      //set last card to -1
        2: 1182:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1183:      //reduce number of cards in hand
        2: 1184:      state->handCount[currentPlayer]--;
        -: 1185:    }
        -: 1186:	
        2: 1187:  return 0;
        -: 1188:}
        -: 1189:
function gainCard called 260 returned 100% blocks executed 72%
        -: 1190:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1191:{
        -: 1192:  //Note: supplyPos is enum of choosen card
        -: 1193:	
        -: 1194:  //check if supply pile is empty (0) or card is not used in game (-1)
      260: 1195:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -: 1196:    {
    #####: 1197:      return -1;
        -: 1198:    }
        -: 1199:	
        -: 1200:  //added card for [whoseTurn] current player:
        -: 1201:  // toFlag = 0 : add to discard
        -: 1202:  // toFlag = 1 : add to deck
        -: 1203:  // toFlag = 2 : add to hand
        -: 1204:
      260: 1205:  if (toFlag == 1)
branch  0 taken 0%
branch  1 taken 100%
        -: 1206:    {
    #####: 1207:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1208:      state->deckCount[player]++;
    #####: 1209:    }
      260: 1210:  else if (toFlag == 2)
branch  0 taken 0%
branch  1 taken 100%
        -: 1211:    {
    #####: 1212:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1213:      state->handCount[player]++;
    #####: 1214:    }
        -: 1215:  else
        -: 1216:    {
      260: 1217:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      260: 1218:      state->discardCount[player]++;
        -: 1219:    }
        -: 1220:	
        -: 1221:  //decrease number in supply pile
      260: 1222:  state->supplyCount[supplyPos]--;
        -: 1223:	 
      260: 1224:  return 0;
      260: 1225:}
        -: 1226:
function updateCoins called 1245 returned 100% blocks executed 100%
        -: 1227:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1228:{
        -: 1229:  int i;
        -: 1230:	
        -: 1231:  //reset coin count
     1245: 1232:  state->coins = 0;
        -: 1233:
        -: 1234:  //add coins for each Treasure card in player's hand
    13620: 1235:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 82%
branch  1 taken 18%
        -: 1236:    {
     5565: 1237:      if (state->hand[player][i] == copper)
branch  0 taken 72%
branch  1 taken 28%
        -: 1238:	{
     3990: 1239:	  state->coins += 1;
     3990: 1240:	}
     1575: 1241:      else if (state->hand[player][i] == silver)
branch  0 taken 21%
branch  1 taken 79%
        -: 1242:	{
      330: 1243:	  state->coins += 2;
      330: 1244:	}
     1245: 1245:      else if (state->hand[player][i] == gold)
branch  0 taken 27%
branch  1 taken 73%
        -: 1246:	{
      330: 1247:	  state->coins += 3;
      330: 1248:	}	
     5565: 1249:    }	
        -: 1250:
        -: 1251:  //add bonus
     1245: 1252:  state->coins += bonus;
        -: 1253:
     1245: 1254:  return 0;
        -: 1255:}
        -: 1256:
        -: 1257:
function playAdventurer called 1 returned 100% blocks executed 73%
        -: 1258:int playAdventurer(struct gameState *state){
        -: 1259:  int temphand[MAX_HAND];
        1: 1260:  int drawntreasure=0;
        -: 1261:  int cardDrawn;
        1: 1262:  int z = 0;
        1: 1263:  int currentPlayer = whoseTurn(state);
        -: 1264:
        6: 1265:  while(drawntreasure<2){
branch  0 taken 67%
branch  1 taken 33%
        2: 1266:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0%
branch  1 taken 100%
    #####: 1267:	  shuffle(currentPlayer, state);
    #####: 1268:	}
        2: 1269:	drawCard(currentPlayer, state);
        2: 1270:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        2: 1271:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        2: 1272:	  drawntreasure++;
        -: 1273:	else{
    #####: 1274:	  temphand[z]=cardDrawn;
    #####: 1275:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1276:	  z++;
        -: 1277:	}
        -: 1278:      }
        -: 1279: 
        4: 1280:      while(z>=0){ 
branch  0 taken 50%
branch  1 taken 50%
        1: 1281:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        1: 1282:	z=z-1;
        -: 1283:      }
        1: 1284:      return 0;
        -: 1285:  
        -: 1286:}
        -: 1287:
function playSmithy called 1 returned 100% blocks executed 100%
        -: 1288:int playSmithy(struct gameState *state, int handPos){
        1: 1289:  int currentPlayer = whoseTurn(state);
        -: 1290:  int i;
        8: 1291:  for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25%
        -: 1292:	{
        3: 1293:	  drawCard(currentPlayer, state);
        3: 1294:	}
        -: 1295:			
        -: 1296:  
        1: 1297:      return 0;
        -: 1298:
        -: 1299:}
        -: 1300:
function playVillage called 1 returned 100% blocks executed 100%
        -: 1301:int playVillage(struct gameState *state, int handPos){
        1: 1302:  int currentPlayer = whoseTurn(state);
        -: 1303:
        -: 1304:  //+1 Card
        1: 1305:      drawCard(currentPlayer, state);
        -: 1306:			
        -: 1307:      //+2 Actions
        1: 1308:      state->numActions = state->numActions; 
        -: 1309:			
        -: 1310:      //discard played card from hand
        1: 1311:      discardCard(handPos, currentPlayer, state, 0);
        1: 1312:      return 0;
        -: 1313:}
        -: 1314:
function playMine called 0 returned 0% blocks executed 0%
        -: 1315:int playMine(struct gameState *state, int handPos, int choice1, int choice2){
        -: 1316:  int i;
        -: 1317:  int j;
    #####: 1318:  int currentPlayer = whoseTurn(state);
        -: 1319:
    #####: 1320:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1321:
    #####: 1322:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1323:	{
    #####: 1324:	  return -1;
        -: 1325:	}
        -: 1326:		
    #####: 1327:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1328:	{
    #####: 1329:	  return -1;
        -: 1330:	}
        -: 1331:
    #####: 1332:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -: 1333:	{
    #####: 1334:	  return -1;
        -: 1335:	}
        -: 1336:
    #####: 1337:      gainCard(choice2, state, 2, currentPlayer);
        -: 1338:
        -: 1339:      //discard card from hand
    #####: 1340:      discardCard(handPos, currentPlayer, state, 0);
        -: 1341:
        -: 1342:      //discard trashed card
    #####: 1343:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1344:	{
    #####: 1345:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1346:	    {
    #####: 1347:	      discardCard(i, currentPlayer, state, 0);			
        -: 1348:	     
    #####: 1349:	    }
    #####: 1350:	}
        -: 1351:			
    #####: 1352:      return 0;
    #####: 1353:}
        -: 1354:
function playGreat_Hall called 1 returned 100% blocks executed 100%
        -: 1355:int playGreat_Hall(struct gameState*state, int handPos){
        1: 1356:  int currentPlayer = whoseTurn(state);
        -: 1357://+1 Card
        1: 1358:      drawCard(currentPlayer, state);
        -: 1359:			
        -: 1360:      //+1 Actions
        1: 1361:      state->numActions++;
        -: 1362:			
        -: 1363:      //discard card from hand
        1: 1364:      discardCard(handPos, currentPlayer, state, 0);
        1: 1365:      return 0;
        -: 1366:}
        -: 1367:
        -: 1368:
        -: 1369://end of dominion.c
        -: 1370:
