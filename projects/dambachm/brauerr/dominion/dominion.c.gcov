        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       16:    8:int compare(const void* a, const void* b) {
       16:    9:  if (*(int*)a > *(int*)b)
       10:   10:    return 1;
        6:   11:  if (*(int*)a < *(int*)b)
        4:   12:    return -1;
        2:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       13:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       13:   44:  SelectStream(1);
       13:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       13:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
       13:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    #####:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    #####:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    #####:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:  state->supplyCount[silver] = 40;
    #####:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    #####:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    #####:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    #####:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    #####:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    #####:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    #####:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    #####:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    #####:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    #####:  140:      state->deckCount[i] = 0;
    #####:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    #####:  143:	  state->deck[i][j] = estate;
    #####:  144:	  state->deckCount[i]++;
        -:  145:	}
    #####:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    #####:  148:	  state->deck[i][j] = copper;
    #####:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    #####:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    #####:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    #####:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    #####:  166:      state->handCount[i] = 0;
    #####:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    #####:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    #####:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    #####:  182:  state->outpostPlayed = 0;
    #####:  183:  state->phase = 0;
    #####:  184:  state->numActions = 1;
    #####:  185:  state->numBuys = 1;
    #####:  186:  state->playedCardCount = 0;
    #####:  187:  state->whoseTurn = 0;
    #####:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  192:  for (it = 0; it < 5; it++){
    #####:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
    #####:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
    #####:  198:  return 0;
        -:  199:}
        -:  200:
    43789:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    43789:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    43789:  209:  if (state->deckCount[player] < 1)
    43786:  210:    return -1;
        3:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       17:  214:  while (state->deckCount[player] > 0) {
       11:  215:    card = floor(Random() * state->deckCount[player]);
       11:  216:    newDeck[newDeckPos] = state->deck[player][card];
       11:  217:    newDeckPos++;
       27:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
       16:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       11:  221:    state->deckCount[player]--;
        -:  222:  }
       14:  223:  for (i = 0; i < newDeckPos; i++) {
       11:  224:    state->deck[player][i] = newDeck[i];
       11:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        3:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
        1:  311:int numHandCards(struct gameState *state) {
        1:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        9:  346:int whoseTurn(struct gameState *state) {
        9:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        3:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        3:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        1:  401:  j = 0;
       26:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
       25:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
        1:  406:	  j++;
        -:  407:	}
        -:  408:    }
        1:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
        1:  414:  return 0;
        -:  415:}
        -:  416:
        3:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
        3:  420:  int score = 0;
        -:  421:  //score from hand
       24:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
       21:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
       21:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
       21:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
       21:  427:      if (state->hand[player][i] == province) { score = score + 6; };
       21:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
       21:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       19:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
       16:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
       16:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
       16:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
       16:  438:      if (state->discard[player][i] == province) { score = score + 6; };
       16:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
       16:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       19:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
       16:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
       16:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
       16:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
       16:  449:      if (state->deck[player][i] == province) { score = score + 6; };
       16:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
       16:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
        3:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    21914:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    21914:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    23911:  533:    for (i = 0; i < state->discardCount[player];i++){
     2012:  534:      state->deck[player][i] = state->discard[player][i];
     2012:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    21899:  538:    state->deckCount[player] = state->discardCount[player];
    21899:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    21899:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    21899:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    21899:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    21899:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    21899:  559:    if (deckCounter == 0)
    21895:  560:      return -1;
        -:  561:
        4:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        4:  563:    state->deckCount[player]--;
        4:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       15:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       15:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       15:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       15:  576:    state->deckCount[player]--;
       15:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       19:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:/*******START 5 CUSTOM CARD FUNCTIONS******/
        3:  647:int playAdventurer(struct gameState *state, int handPos, int currentPlayer) {
        3:  648:  int drawnTreasure = 0;
        -:  649:  int cardDrawn;
        3:  650:  int z = 0; //counter for temp hand
        -:  651:  int temphand[MAX_HAND];
        -:  652:  
    21909:  653:  while (drawnTreasure < 2) {
    21903:  654:    if (state->deckCount[currentPlayer] < 1) {
        -:  655:      //if the deck is empty we need to shuffle discard and add to deck
    21890:  656:      shuffle(currentPlayer, state);
        -:  657:    }
    21903:  658:    drawCard(currentPlayer, state);
    21903:  659:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]];
        -:  660:    //top card of hand is most recently drawn card.
    21903:  661:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        6:  662:      drawnTreasure++;
        -:  663:    else {
    21897:  664:      temphand[z] = cardDrawn;
    21897:  665:      state->handCount[currentPlayer]--; 
        -:  666:      //this should just remove the top card (the most recently drawn one).
    21897:  667:      z++;
        -:  668:    }
        -:  669:  }
        3:  670:  return 0;
        -:  671:}
        -:  672:
        3:  673:int playSmithy(struct gameState *state, int handPos, int currentPlayer) {
        3:  674:  int i = 0;
        -:  675:  
        -:  676:  //+3 Cards
       12:  677:  for (i = 0; i < 3; i++)
        -:  678:  {
        9:  679:    drawCard(currentPlayer, state);
        -:  680:  }
        -:  681:
        3:  682:  return 0;
        -:  683:}
        -:  684:
        1:  685:int playVillage(struct gameState *state, int handPos, int currentPlayer) {
        -:  686:  //+1 Card
        1:  687:  drawCard(currentPlayer, state);
        -:  688:  
        -:  689:  //+2 Actions
        1:  690:  state->numActions = state->numActions + 2;
        -:  691:  
        -:  692:  //discard played card from hand
        1:  693:  discardCard(handPos, currentPlayer, state, 0);
        1:  694:  return 0;
        -:  695:}
        -:  696:
    #####:  697:int playRemodel(struct gameState *state, int handPos, int currentPlayer, int trashChoice, int getChoice) {
    #####:  698:  int i = 0;
    #####:  699:  int j = state->hand[currentPlayer][trashChoice];  //store card we will trash
        -:  700:
    #####:  701:  if (getCost(state->hand[currentPlayer] + 2) > getCost(getChoice) )
        -:  702:  {
    #####:  703:    return -1;
        -:  704:  }
        -:  705:
    #####:  706:  gainCard(getChoice, state, 0, currentPlayer);
        -:  707:
        -:  708:  //discard card from hand
    #####:  709:  discardCard(handPos, currentPlayer, state, 0);
        -:  710:
        -:  711:  //discard trashed card
    #####:  712:  for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  713:    if (state->hand[currentPlayer][i] == j) {
    #####:  714:        discardCard(i, currentPlayer, state, 0);			
    #####:  715:        break;
        -:  716:    }
        -:  717:	}
        -:  718:  
    #####:  719:  return 0;
        -:  720:}
        -:  721:
    #####:  722:int playMine(struct gameState *state, int handPos, int currentPlayer, int trashChoice, int getChoice) {
    #####:  723:  int i = 0;
    #####:  724:  int j = state->hand[currentPlayer][trashChoice];  //store card we will trash
        -:  725:
    #####:  726:  if (state->hand[currentPlayer][trashChoice] < copper && state->hand[currentPlayer][trashChoice] > gold)
        -:  727:	{
        -:  728:	  //treasure card not chosen to trash
    #####:  729:    return -1;
        -:  730:	}
        -:  731:		
    #####:  732:  if (getChoice > treasure_map || getChoice < curse)
        -:  733:	{
        -:  734:	  //not a valid card
    #####:  735:    return -1;
        -:  736:	}
        -:  737:
    #####:  738:  if ( (getCost(state->hand[currentPlayer][trashChoice]) + 3) > getCost(getChoice) )
        -:  739:	{
    #####:  740:	  return -1;
        -:  741:	}
        -:  742:
    #####:  743:  gainCard(getChoice, state, 2, currentPlayer);
        -:  744:
        -:  745:  //discard card from hand
    #####:  746:  discardCard(handPos, currentPlayer, state, 0);
        -:  747:
        -:  748:  //discard trashed card
    #####:  749:  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  750:	{
    #####:  751:	  if (state->hand[currentPlayer][i] == j)
        -:  752:	    {
    #####:  753:	      discardCard(i, currentPlayer, state, 0);			
    #####:  754:	      break;
        -:  755:	    }
        -:  756:	}
        -:  757:			
    #####:  758:  return 0;
        -:  759:}
        -:  760:/*******END 5 CUSTOM CARD FUNCTIONS********/
        -:  761:
        8:  762:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  763:{
        -:  764:  int i;
        -:  765:  int j;
        -:  766:  int k;
        -:  767:  int x;
        -:  768:  int index;
        8:  769:  int currentPlayer = whoseTurn(state);
        8:  770:  int nextPlayer = currentPlayer + 1;
        -:  771:
        8:  772:  int tributeRevealedCards[2] = {-1, -1};
        -:  773:  int temphand[MAX_HAND];// moved above the if statement
        8:  774:  int drawntreasure=0;
        -:  775:  int cardDrawn;
        8:  776:  int z = 0;// this is the counter for the temp hand
        8:  777:  if (nextPlayer > (state->numPlayers - 1)){
        8:  778:    nextPlayer = 0;
        -:  779:  }
        -:  780:  
        -:  781:	
        -:  782:  //uses switch to select card and perform actions
        8:  783:  switch( card ) 
        -:  784:    {
        -:  785:    case adventurer:
        3:  786:      return playAdventurer(state, handPos, currentPlayer);
        -:  787:      /*while(drawntreasure<2){
        -:  788:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  789:          shuffle(currentPlayer, state);
        -:  790:        }
        -:  791:        drawCard(currentPlayer, state);
        -:  792:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  793:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  794:          drawntreasure++;
        -:  795:        else{
        -:  796:          temphand[z]=cardDrawn;
        -:  797:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  798:          z++;
        -:  799:        }
        -:  800:      }
        -:  801:      while(z-1>=0){
        -:  802:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  803:        z=z-1;
        -:  804:      } 
        -:  805:      return 0;*/
        -:  806:			
        -:  807:    case council_room:
        -:  808:      //+4 Cards
    #####:  809:      for (i = 0; i < 4; i++)
        -:  810:	{
    #####:  811:	  drawCard(currentPlayer, state);
        -:  812:	}
        -:  813:			
        -:  814:      //+1 Buy
    #####:  815:      state->numBuys++;
        -:  816:			
        -:  817:      //Each other player draws a card
    #####:  818:      for (i = 0; i < state->numPlayers; i++)
        -:  819:	{
    #####:  820:	  if ( i != currentPlayer )
        -:  821:	    {
    #####:  822:	      drawCard(i, state);
        -:  823:	    }
        -:  824:	}
        -:  825:			
        -:  826:      //put played card in played card pile
    #####:  827:      discardCard(handPos, currentPlayer, state, 0);
        -:  828:			
    #####:  829:      return 0;
        -:  830:			
        -:  831:    case feast:
        -:  832:      //gain card with cost up to 5
        -:  833:      //Backup hand
    #####:  834:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  835:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  836:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  837:      }
        -:  838:      //Backup hand
        -:  839:
        -:  840:      //Update Coins for Buy
    #####:  841:      updateCoins(currentPlayer, state, 5);
    #####:  842:      x = 1;//Condition to loop on
    #####:  843:      while( x == 1) {//Buy one card
    #####:  844:	if (supplyCount(choice1, state) <= 0){
        -:  845:	  if (DEBUG)
        -:  846:	    printf("None of that card left, sorry!\n");
        -:  847:
        -:  848:	  if (DEBUG){
        -:  849:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  850:	  }
        -:  851:	}
    #####:  852:	else if (state->coins < getCost(choice1)){
    #####:  853:	  printf("That card is too expensive!\n");
        -:  854:
        -:  855:	  if (DEBUG){
        -:  856:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  857:	  }
        -:  858:	}
        -:  859:	else{
        -:  860:
        -:  861:	  if (DEBUG){
        -:  862:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  863:	  }
        -:  864:
    #####:  865:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  866:	  x = 0;//No more buying cards
        -:  867:
        -:  868:	  if (DEBUG){
        -:  869:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  870:	  }
        -:  871:
        -:  872:	}
        -:  873:      }     
        -:  874:
        -:  875:      //Reset Hand
    #####:  876:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  877:	state->hand[currentPlayer][i] = temphand[i];
    #####:  878:	temphand[i] = -1;
        -:  879:      }
        -:  880:      //Reset Hand
        -:  881:      			
    #####:  882:      return 0;
        -:  883:			
        -:  884:    case gardens:
    #####:  885:      return -1;
        -:  886:			
        -:  887:    case mine:
        -:  888:      //return playMine(state, handPos, currentPlayer, choice1, choice2);
    #####:  889:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  890:
    #####:  891:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  892:	{
    #####:  893:	  return -1;
        -:  894:	}
        -:  895:		
    #####:  896:      if (choice2 > treasure_map || choice2 < curse)
        -:  897:	{
    #####:  898:	  return -1;
        -:  899:	}
        -:  900:
    #####:  901:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  902:	{
    #####:  903:	  return -1;
        -:  904:	}
        -:  905:
    #####:  906:      gainCard(choice2, state, 2, currentPlayer);
        -:  907:
        -:  908:      //discard card from hand
    #####:  909:      discardCard(handPos, currentPlayer, state, 0);
        -:  910:
        -:  911:      //discard trashed card
    #####:  912:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  913:	{
    #####:  914:	  if (state->hand[currentPlayer][i] == j)
        -:  915:	    {
    #####:  916:	      discardCard(i, currentPlayer, state, 0);			
    #####:  917:	      break;
        -:  918:	    }
        -:  919:	}
        -:  920:			
    #####:  921:      return 0;
        -:  922:			
        -:  923:    case remodel:
    #####:  924:      return playRemodel(state, handPos, currentPlayer, choice1, choice2);
        -:  925:      /*j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  926:
        -:  927:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  928:	{
        -:  929:	  return -1;
        -:  930:	}
        -:  931:
        -:  932:      gainCard(choice2, state, 0, currentPlayer);
        -:  933:
        -:  934:      //discard card from hand
        -:  935:      discardCard(handPos, currentPlayer, state, 0);
        -:  936:
        -:  937:      //discard trashed card
        -:  938:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  939:	{
        -:  940:	  if (state->hand[currentPlayer][i] == j)
        -:  941:	    {
        -:  942:	      discardCard(i, currentPlayer, state, 0);			
        -:  943:	      break;
        -:  944:	    }
        -:  945:	}
        -:  946:
        -:  947:
        -:  948:      return 0;*/
        -:  949:		
        -:  950:    case smithy:
        3:  951:      return playSmithy(state, handPos, currentPlayer);
        -:  952:      /*//+3 Cards
        -:  953:      for (i = 0; i < 3; i++)
        -:  954:      {
        -:  955:        drawCard(currentPlayer, state);
        -:  956:      }
        -:  957:			
        -:  958:      //discard card from hand
        -:  959:      discardCard(handPos, currentPlayer, state, 0);
        -:  960:      return 0;*/
        -:  961:		
        -:  962:    case village:
        1:  963:      return playVillage(state, handPos, currentPlayer);
        -:  964:      /*//+1 Card
        -:  965:      drawCard(currentPlayer, state);
        -:  966:			
        -:  967:      //+2 Actions
        -:  968:      state->numActions = state->numActions + 2;
        -:  969:			
        -:  970:      //discard played card from hand
        -:  971:      discardCard(handPos, currentPlayer, state, 0);
        -:  972:      return 0;*/
        -:  973:		
        -:  974:    case baron:
    #####:  975:      state->numBuys++;//Increase buys by 1!
    #####:  976:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  977:	int p = 0;//Iterator for hand!
    #####:  978:	int card_not_discarded = 1;//Flag for discard set!
    #####:  979:	while(card_not_discarded){
    #####:  980:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  981:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  982:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  983:	    state->discardCount[currentPlayer]++;
    #####:  984:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  985:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  986:	    }
    #####:  987:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  988:	    state->handCount[currentPlayer]--;
    #####:  989:	    card_not_discarded = 0;//Exit the loop
        -:  990:	  }
    #####:  991:	  else if (p > state->handCount[currentPlayer]){
        -:  992:	    if(DEBUG) {
        -:  993:	      printf("No estate cards in your hand, invalid choice\n");
        -:  994:	      printf("Must gain an estate if there are any\n");
        -:  995:	    }
    #####:  996:	    if (supplyCount(estate, state) > 0){
    #####:  997:	      gainCard(estate, state, 0, currentPlayer);
    #####:  998:	      state->supplyCount[estate]--;//Decrement estates
    #####:  999:	      if (supplyCount(estate, state) == 0){
    #####: 1000:		isGameOver(state);
        -: 1001:	      }
        -: 1002:	    }
    #####: 1003:	    card_not_discarded = 0;//Exit the loop
        -: 1004:	  }
        -: 1005:			    
        -: 1006:	  else{
    #####: 1007:	    p++;//Next card
        -: 1008:	  }
        -: 1009:	}
        -: 1010:      }
        -: 1011:			    
        -: 1012:      else{
    #####: 1013:	if (supplyCount(estate, state) > 0){
    #####: 1014:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1015:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1016:	  if (supplyCount(estate, state) == 0){
    #####: 1017:	    isGameOver(state);
        -: 1018:	  }
        -: 1019:	}
        -: 1020:      }
        -: 1021:	    
        -: 1022:      
    #####: 1023:      return 0;
        -: 1024:		
        -: 1025:    case great_hall:
        -: 1026:      //+1 Card
        1: 1027:      drawCard(currentPlayer, state);
        -: 1028:			
        -: 1029:      //+1 Actions
        1: 1030:      state->numActions++;
        -: 1031:			
        -: 1032:      //discard card from hand
        1: 1033:      discardCard(handPos, currentPlayer, state, 0);
        1: 1034:      return 0;
        -: 1035:		
        -: 1036:    case minion:
        -: 1037:      //+1 action
    #####: 1038:      state->numActions++;
        -: 1039:			
        -: 1040:      //discard card from hand
    #####: 1041:      discardCard(handPos, currentPlayer, state, 0);
        -: 1042:			
    #####: 1043:      if (choice1)		//+2 coins
        -: 1044:	{
    #####: 1045:	  state->coins = state->coins + 2;
        -: 1046:	}
        -: 1047:			
    #####: 1048:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1049:	{
        -: 1050:	  //discard hand
    #####: 1051:	  while(numHandCards(state) > 0)
        -: 1052:	    {
    #####: 1053:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1054:	    }
        -: 1055:				
        -: 1056:	  //draw 4
    #####: 1057:	  for (i = 0; i < 4; i++)
        -: 1058:	    {
    #####: 1059:	      drawCard(currentPlayer, state);
        -: 1060:	    }
        -: 1061:				
        -: 1062:	  //other players discard hand and redraw if hand size > 4
    #####: 1063:	  for (i = 0; i < state->numPlayers; i++)
        -: 1064:	    {
    #####: 1065:	      if (i != currentPlayer)
        -: 1066:		{
    #####: 1067:		  if ( state->handCount[i] > 4 )
        -: 1068:		    {
        -: 1069:		      //discard hand
    #####: 1070:		      while( state->handCount[i] > 0 )
        -: 1071:			{
    #####: 1072:			  discardCard(handPos, i, state, 0);
        -: 1073:			}
        -: 1074:							
        -: 1075:		      //draw 4
    #####: 1076:		      for (j = 0; j < 4; j++)
        -: 1077:			{
    #####: 1078:			  drawCard(i, state);
        -: 1079:			}
        -: 1080:		    }
        -: 1081:		}
        -: 1082:	    }
        -: 1083:				
        -: 1084:	}
    #####: 1085:      return 0;
        -: 1086:		
        -: 1087:    case steward:
    #####: 1088:      if (choice1 == 1)
        -: 1089:	{
        -: 1090:	  //+2 cards
    #####: 1091:	  drawCard(currentPlayer, state);
    #####: 1092:	  drawCard(currentPlayer, state);
        -: 1093:	}
    #####: 1094:      else if (choice1 == 2)
        -: 1095:	{
        -: 1096:	  //+2 coins
    #####: 1097:	  state->coins = state->coins + 2;
        -: 1098:	}
        -: 1099:      else
        -: 1100:	{
        -: 1101:	  //trash 2 cards in hand
    #####: 1102:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1103:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1104:	}
        -: 1105:			
        -: 1106:      //discard card from hand
    #####: 1107:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1108:      return 0;
        -: 1109:		
        -: 1110:    case tribute:
    #####: 1111:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1112:	if (state->deckCount[nextPlayer] > 0){
    #####: 1113:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1114:	  state->deckCount[nextPlayer]--;
        -: 1115:	}
    #####: 1116:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1117:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1118:	  state->discardCount[nextPlayer]--;
        -: 1119:	}
        -: 1120:	else{
        -: 1121:	  //No Card to Reveal
        -: 1122:	  if (DEBUG){
        -: 1123:	    printf("No cards to reveal\n");
        -: 1124:	  }
        -: 1125:	}
        -: 1126:      }
        -: 1127:	    
        -: 1128:      else{
    #####: 1129:	if (state->deckCount[nextPlayer] == 0){
    #####: 1130:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1131:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1132:	    state->deckCount[nextPlayer]++;
    #####: 1133:	    state->discard[nextPlayer][i] = -1;
    #####: 1134:	    state->discardCount[nextPlayer]--;
        -: 1135:	  }
        -: 1136:			    
    #####: 1137:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1138:	} 
    #####: 1139:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1140:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1141:	state->deckCount[nextPlayer]--;
    #####: 1142:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1143:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1144:	state->deckCount[nextPlayer]--;
        -: 1145:      }    
        -: 1146:		       
    #####: 1147:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1148:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1149:	state->playedCardCount++;
    #####: 1150:	tributeRevealedCards[1] = -1;
        -: 1151:      }
        -: 1152:
    #####: 1153:      for (i = 0; i <= 2; i ++){
    #####: 1154:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1155:	  state->coins += 2;
        -: 1156:	}
        -: 1157:		    
    #####: 1158:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1159:	  drawCard(currentPlayer, state);
    #####: 1160:	  drawCard(currentPlayer, state);
        -: 1161:	}
        -: 1162:	else{//Action Card
    #####: 1163:	  state->numActions = state->numActions + 2;
        -: 1164:	}
        -: 1165:      }
        -: 1166:	    
    #####: 1167:      return 0;
        -: 1168:		
        -: 1169:    case ambassador:
    #####: 1170:      j = 0;		//used to check if player has enough cards to discard
        -: 1171:
    #####: 1172:      if (choice2 > 2 || choice2 < 0)
        -: 1173:	{
    #####: 1174:	  return -1;				
        -: 1175:	}
        -: 1176:
    #####: 1177:      if (choice1 == handPos)
        -: 1178:	{
    #####: 1179:	  return -1;
        -: 1180:	}
        -: 1181:
    #####: 1182:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1183:	{
    #####: 1184:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1185:	    {
    #####: 1186:	      j++;
        -: 1187:	    }
        -: 1188:	}
    #####: 1189:      if (j < choice2)
        -: 1190:	{
    #####: 1191:	  return -1;				
        -: 1192:	}
        -: 1193:
        -: 1194:      if (DEBUG) 
        -: 1195:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1196:
        -: 1197:      //increase supply count for choosen card by amount being discarded
    #####: 1198:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1199:			
        -: 1200:      //each other player gains a copy of revealed card
    #####: 1201:      for (i = 0; i < state->numPlayers; i++)
        -: 1202:	{
    #####: 1203:	  if (i != currentPlayer)
        -: 1204:	    {
    #####: 1205:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1206:	    }
        -: 1207:	}
        -: 1208:
        -: 1209:      //discard played card from hand
    #####: 1210:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1211:
        -: 1212:      //trash copies of cards returned to supply
    #####: 1213:      for (j = 0; j < choice2; j++)
        -: 1214:	{
    #####: 1215:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1216:	    {
    #####: 1217:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1218:		{
    #####: 1219:		  discardCard(i, currentPlayer, state, 1);
    #####: 1220:		  break;
        -: 1221:		}
        -: 1222:	    }
        -: 1223:	}			
        -: 1224:
    #####: 1225:      return 0;
        -: 1226:		
        -: 1227:    case cutpurse:
        -: 1228:
    #####: 1229:      updateCoins(currentPlayer, state, 2);
    #####: 1230:      for (i = 0; i < state->numPlayers; i++)
        -: 1231:	{
    #####: 1232:	  if (i != currentPlayer)
        -: 1233:	    {
    #####: 1234:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1235:		{
    #####: 1236:		  if (state->hand[i][j] == copper)
        -: 1237:		    {
    #####: 1238:		      discardCard(j, i, state, 0);
    #####: 1239:		      break;
        -: 1240:		    }
    #####: 1241:		  if (j == state->handCount[i])
        -: 1242:		    {
    #####: 1243:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1244:			{
        -: 1245:			  if (DEBUG)
        -: 1246:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1247:			}	
    #####: 1248:		      break;
        -: 1249:		    }		
        -: 1250:		}
        -: 1251:					
        -: 1252:	    }
        -: 1253:				
        -: 1254:	}				
        -: 1255:
        -: 1256:      //discard played card from hand
    #####: 1257:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1258:
    #####: 1259:      return 0;
        -: 1260:
        -: 1261:		
        -: 1262:    case embargo: 
        -: 1263:      //+2 Coins
    #####: 1264:      state->coins = state->coins + 2;
        -: 1265:			
        -: 1266:      //see if selected pile is in play
    #####: 1267:      if ( state->supplyCount[choice1] == -1 )
        -: 1268:	{
    #####: 1269:	  return -1;
        -: 1270:	}
        -: 1271:			
        -: 1272:      //add embargo token to selected supply pile
    #####: 1273:      state->embargoTokens[choice1]++;
        -: 1274:			
        -: 1275:      //trash card
    #####: 1276:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1277:      return 0;
        -: 1278:		
        -: 1279:    case outpost:
        -: 1280:      //set outpost flag
    #####: 1281:      state->outpostPlayed++;
        -: 1282:			
        -: 1283:      //discard card
    #####: 1284:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1285:      return 0;
        -: 1286:		
        -: 1287:    case salvager:
        -: 1288:      //+1 buy
    #####: 1289:      state->numBuys++;
        -: 1290:			
    #####: 1291:      if (choice1)
        -: 1292:	{
        -: 1293:	  //gain coins equal to trashed card
    #####: 1294:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1295:	  //trash card
    #####: 1296:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1297:	}
        -: 1298:			
        -: 1299:      //discard card
    #####: 1300:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1301:      return 0;
        -: 1302:		
        -: 1303:    case sea_hag:
    #####: 1304:      for (i = 0; i < state->numPlayers; i++){
    #####: 1305:	if (i != currentPlayer){
    #####: 1306:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1307:	  state->discardCount[i]++;
    #####: 1308:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1309:	}
        -: 1310:      }
    #####: 1311:      return 0;
        -: 1312:		
        -: 1313:    case treasure_map:
        -: 1314:      //search hand for another treasure_map
    #####: 1315:      index = -1;
    #####: 1316:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1317:	{
    #####: 1318:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1319:	    {
    #####: 1320:	      index = i;
    #####: 1321:	      break;
        -: 1322:	    }
        -: 1323:	}
    #####: 1324:      if (index > -1)
        -: 1325:	{
        -: 1326:	  //trash both treasure cards
    #####: 1327:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1328:	  discardCard(index, currentPlayer, state, 1);
        -: 1329:
        -: 1330:	  //gain 4 Gold cards
    #####: 1331:	  for (i = 0; i < 4; i++)
        -: 1332:	    {
    #####: 1333:	      gainCard(gold, state, 1, currentPlayer);
        -: 1334:	    }
        -: 1335:				
        -: 1336:	  //return success
    #####: 1337:	  return 1;
        -: 1338:	}
        -: 1339:			
        -: 1340:      //no second treasure_map found in hand
    #####: 1341:      return -1;
        -: 1342:    }
        -: 1343:	
    #####: 1344:  return -1;
        -: 1345:}
        -: 1346:
        2: 1347:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1348:{
        -: 1349:	
        -: 1350:  //if card is not trashed, added to Played pile 
        2: 1351:  if (trashFlag < 1)
        -: 1352:    {
        -: 1353:      //add card to played pile
        2: 1354:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1355:      state->playedCardCount++;
        -: 1356:    }
        -: 1357:	
        -: 1358:  //set played card to -1
        2: 1359:  state->hand[currentPlayer][handPos] = -1;
        -: 1360:	
        -: 1361:  //remove card from player's hand
        2: 1362:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1363:    {
        -: 1364:      //reduce number of cards in hand
    #####: 1365:      state->handCount[currentPlayer]--;
        -: 1366:    }
        2: 1367:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1368:    {
        -: 1369:      //reduce number of cards in hand
    #####: 1370:      state->handCount[currentPlayer]--;
        -: 1371:    }
        -: 1372:  else 	
        -: 1373:    {
        -: 1374:      //replace discarded card with last card in hand
        2: 1375:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1376:      //set last card to -1
        2: 1377:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1378:      //reduce number of cards in hand
        2: 1379:      state->handCount[currentPlayer]--;
        -: 1380:    }
        -: 1381:	
        2: 1382:  return 0;
        -: 1383:}
        -: 1384:
    #####: 1385:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1386:{
        -: 1387:  //Note: supplyPos is enum of choosen card
        -: 1388:	
        -: 1389:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1390:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1391:    {
    #####: 1392:      return -1;
        -: 1393:    }
        -: 1394:	
        -: 1395:  //added card for [whoseTurn] current player:
        -: 1396:  // toFlag = 0 : add to discard
        -: 1397:  // toFlag = 1 : add to deck
        -: 1398:  // toFlag = 2 : add to hand
        -: 1399:
    #####: 1400:  if (toFlag == 1)
        -: 1401:    {
    #####: 1402:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1403:      state->deckCount[player]++;
        -: 1404:    }
    #####: 1405:  else if (toFlag == 2)
        -: 1406:    {
    #####: 1407:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1408:      state->handCount[player]++;
        -: 1409:    }
        -: 1410:  else
        -: 1411:    {
    #####: 1412:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1413:      state->discardCount[player]++;
        -: 1414:    }
        -: 1415:	
        -: 1416:  //decrease number in supply pile
    #####: 1417:  state->supplyCount[supplyPos]--;
        -: 1418:	 
    #####: 1419:  return 0;
        -: 1420:}
        -: 1421:
        1: 1422:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1423:{
        -: 1424:  int i;
        -: 1425:	
        -: 1426:  //reset coin count
        1: 1427:  state->coins = 0;
        -: 1428:
        -: 1429:  //add coins for each Treasure card in player's hand
       21: 1430:  for (i = 0; i < state->handCount[player]; i++)
        -: 1431:    {
       20: 1432:      if (state->hand[player][i] == copper)
        -: 1433:	{
        4: 1434:	  state->coins += 1;
        -: 1435:	}
       16: 1436:      else if (state->hand[player][i] == silver)
        -: 1437:	{
        8: 1438:	  state->coins += 2;
        -: 1439:	}
        8: 1440:      else if (state->hand[player][i] == gold)
        -: 1441:	{
        3: 1442:	  state->coins += 3;
        -: 1443:	}	
        -: 1444:    }	
        -: 1445:
        -: 1446:  //add bonus
        1: 1447:  state->coins += bonus;
        -: 1448:
        1: 1449:  return 0;
        -: 1450:}
        -: 1451:
        -: 1452:
        -: 1453://end of dominion.c
        -: 1454:
