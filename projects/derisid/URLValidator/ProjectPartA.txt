Robert Brauer
Michael Dambacher
David DeRisi
CS362 - ProjectPartA.txt
5/7/2016



Go through instructor video of explaining URL Validation testing. 
Explain testIsValid Function of UrlValidator test code. It is available under aburasali/UrlValidator folder. 

At a high level, the testIsValid method tests the isValid method in the UrlValidator.java file by passing in several URLs with different schemes, authority, ports, paths, and queries and making sure the isValid returns the correct result.
In the UrlValidatorTest file, there is a global object array called testUrlParts that includes ever part of a URL. Each part has various test examples of respective part of the URL and whether that test example should pass or fail. The testIsValid method the calls the testIsValid(Object[], long) method) and passes in the global array object testUrlParts and a long variable defined in the UrlValidator class.
This method in turn creates a UrlValidator object. It then asserts that two valid URL do indeed return a value of true. It does this by passing in http://www.google.com and http://www.google.com/ to the isValid method of the UrlValidator object which should return true. It then runs a do/while loop. Inside this loop, a string is created that includes every part of the URL. In this same process, it is setting the expected variable based on what is set in the global testUrlParts object. It then runs this string through the isValid method in the UrlValidator object to see what it returns. It then compares that with the expected result. It runs this do/while loop until every combination of url parts defined in the global UrlValidator object have been tested.
 
Give how many total number of urls it is testing. Also, explain how it is building all the urls. Give an example of valid url being tested and an invalid url being tested by testIsValid() method. 

Number of schemes - 9
Number of authorities - 19
Number of ports - 7
Number of paths - 10
Number of queries - 3

Total number of urls being tested when using the testURLParts objects - as in the main method (vs. testURLPartsOptions which is not currently being used) is 9*19*7*10*3 = 35910

The urls are built within a for loop nested in a do-while loop in the testIsValid method.  The do-while runs until the incrementTestPartsIndex method returns false.  This method, when called in succession at the end of each do-while cycle, iterates through all the possible permutations of url components, based on counting the number of elements in the testParts object, and tracking and iterating the permutations by modifying the testPartsIndex array.  Within a for loop during each cycle of the do-while, the url is assembled into the testBuffer StringBuffer by using the current values in the testPartsIndex array to access the correct url components in the testParts object.

Example of valid url:  http://www.google.com:80

Example of invalid url:  http:go.com:-1/..?action=view
 
 UrlValidator code is a direct copy paste of apache commons url validator code. The test file/code is also direct copy paste of apache commons test code. Do you think that a real world test (URL Validator's testIsValid() test in this case) is very different than the unit tests and card tests that we wrote (in terms of concepts & complexity)? Explain in few lines.

Conceptually speaking, the code itself does not seem to push the boundaries beyond anything that we’ve already learned up to this point.  The code parses input data in a manner appropriate to the application and then subjects that data to a barrage of verification tests to ensure that what is coming in is what is coming out.  The testing suite does utilize combinatorial testing in executing the input validation, making the code more sophisticated when compared to the unit/card tests of previous assignments.  Also, the code itself supports unique sub-configurations that serve to govern how the testIsValid function accepts URLs maintaining specific characteristics.  The body is considerably longer and upon review intimates that the author made every effort to write code that was as complete and thorough as could be to ensure optimal coverage.



