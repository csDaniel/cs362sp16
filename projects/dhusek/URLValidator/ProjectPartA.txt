Project Part A
Kristen Dhuse		Benjamin Fisher		David Hite

1) Explain testIsValid Function of UrlValidator test code.
* The testIsValid function calls the overloaded version of testIsValid function.
* The overloaded version of testIsValid function takes 2 parameters; an array of objects and a long.
* The array of objects is called testUrlParts and contains 5 objects; testUrlScheme, testUrlAuthority, 
testUrlPort, testPath, testUrlQuery ñ these are arrays of ResultPairs that list valid and invalid UrlSchemes,
UrlAuthorities, port numbers, paths, and queries.
* The long is used to set the options in the initialization the UrlValidator
* The first step in the overloaded testIsValid function is to create a new UrlValidator object.
* The function then enters a doÖ while loop
* In the do while loop it enters a for loop(iterates over an int array called testPartsIndex) and then builds 
a url using the testUrlParts object 
* The code then tests if the url is valid, using the UrlValidator’s isValid method and compares against 
the expected result.
* Finally the do while loop exits when the call to incrementTestPartsIndex returns false.
* The incrementTestPartsIndex method’s job is to increment the values in testPartsIndex array indices in a 
way to generate the unique random url but make sure the indices are valid with respect to the ResultPair array’s. 
They are eventually used to access in the Object array.
 
The UrlValidator class uses the singleton design pattern to return the default settings for the class object.
There are also overloaded public constructors that accept various settings to instantiate a non-default UrlValidator 
object. 
The class supplies one public method which called isValid(), this method accepts the url to be tested and returns 
true if the url is valid or false otherwise. It tests the url against various regular expressions using a Matcher 
object.  A Matcher object is apart of the Java util.regex package and is responsible for comparing a regular 
expression pattern against input, https://docs.oracle.com/javase/7/docs/api/java/util/regex/Matcher.html#matches() .
The UrlValidator class also supplies some protected helper methods to help with validation.


2) How many total URLs are being tested?
We put a counter next to urlVal.isValid and found that it was called 31,922 times.


3) How are the URLs built?
There are several arrays of ResultPair objects that represent elements of the URL,
namely the scheme, authority, port, path, and path options. These elements are put
together in every combination to produce valid and invalid URLs. The validity is 
determined by the boolean values in each element’s ResultPair.
The int array testPartsIndex stores the indices of the elements that are referenced 
in the the ResultPairs arrays to form the urls.  With every call to 
incrementTestPartsIndex one int element in testPartsIndex is incremented. This allows 
all of the URL elements to be covered in every combination.


4) Give an example of a valid URL being tested and an invalid URL being tested by testIsValid().
Valid URLs:
* h3t://go.cc/test1
* h3t://go.cc/t123?action=view 
* h3t://go.cc/t123?action=edit&mode=up

Invalid URLs:
* ://.aaa:0/../?action=edit&mode=up
* ://.aaa:0/../
* ://.aaa:0/test1/?action=view


5) Do you think that a real world test (URL Validator's testIsValid() test in this case) is
very different than the unit tests and card tests that we wrote (in terms of concepts &
complexity)? Explain in few lines.

No, this is not very different from the unit tests and card tests that we wrote because they
are not truly random.  In our unit tests and card tests, we were testing specific inputs and
game configurations.  In URL Validator’s testIsValid(), URLs are being pieced together from
the hard-coded scheme, authority, port, path, and query options to test all of the permutations
of these options.  In both testing scenarios, inputs were being specifically chosen for the tests
to cover a broad area of the possible inputs instead of being random. In both cases the expected
output is known.