Test for: buyCard()
===================
	Running test: insufficient coins.
	Test succesful.
	Running test: insufficient buys.
	Test succesful.
	Running test: insufficient supply.
	Test succesful.
numBuys: 2	Test succesful. State coins: 6, Proper coins: 6
	Test succesful. State properly changed to 1.
	Test succesful. Initial buys: 2, Buys after two rounds: 0
All tests succesful!

Test for: isGameOver()
===================
Test routine for : 2 Players
	Test no victory cards:
	Test succesful.
	Test no kingdom cards:
	Test succesful.
	Testing game end after depletion of province pile:
	Test succesful.
	Testing 3 empty kingdom decks: 14, 8, 11	Test succesful.
	Test: Fresh game continuation:
	Test succesful.
	Test: Random nonzero number of provinces (8):
	Test succesful.
	Test: One kingdom pile (10) empty:
	Test succesful.
	Test: Two kingdom pile (10,16) empty:
	Test succesful.
Test routine for : 3 Players
	Test no victory cards:
	Test succesful.
	Test no kingdom cards:
	Test succesful.
	Testing game end after depletion of province pile:
	Test succesful.
	Testing 3 empty kingdom decks: 11, 13, 14	Test succesful.
	Test: Fresh game continuation:
	Test succesful.
	Test: Random nonzero number of provinces (11):
	Test succesful.
	Test: One kingdom pile (14) empty:
	Test succesful.
	Test: Two kingdom pile (14,8) empty:
	Test succesful.
Test routine for : 4 Players
	Test no victory cards:
	Test succesful.
	Test no kingdom cards:
	Test succesful.
	Testing game end after depletion of province pile:
	Test succesful.
	Testing 3 empty kingdom decks: 14, 13, 8	Test succesful.
	Test: Fresh game continuation:
	Test succesful.
	Test: Random nonzero number of provinces (16):
	Test succesful.
	Test: One kingdom pile (16) empty:
	Test succesful.
	Test: Two kingdom pile (16,13) empty:
	Test succesful.
All tests succesful!
Test for: gainCard()
===================
	Testing attempt to gain a depleted card stock:
	Test passed.
	Testing attempt to gain an unused card:
	Test passed.
	Testing: checking proper kingdom card decrement:
	Test passed! Target supply: 9, Supply after gain: 9
	Test passed. Card at hand position 5 has enum 15
	Test passed. Card at deck position 5 has enum 15
	Test passed. Card at discard position 7 has enum 15
All tests passed!

Test for: discardCard()
===================
	Testing discard of last card in hand:
	Test passed. Target:4, Last played card 4
	Testing discard of every card in hand:
		Discarding card at hand index 4
		Discarding card at hand index 3
		Discarding card at hand index 2
		Discarding card at hand index 1
		Discarding card at hand index 0
		Card in played: 4, Target: 4
		Card in played: 4, Target: 4
		Card in played: 1, Target: 1
		Card in played: 4, Target: 4
		Card in played: 1, Target: 1
	Test passed.
	Testing trash discard:
	Test passed. Target hand count: 4, Actual: 4; Target played count: 0, Actual: 0
	Testing that hand is not re-ordered post discard:
	Test passed. Target card: 4, Actual: 4; Order preserved.
All tests passed!

Test for smithy card effect
===================
	Test that hand increase is correct.
	Test passed. Target handcount: 7, Actual: 7
	Test that empty deck will reshuffle for smithy.
	Discard count: 5, Deck count: 0	Test passed. Target handcount: 7, Actual: 7
All tests successful!

Test for adventurer card effect
===================
	Test that Adventurer card discard is correct.
Card drawn: 4
Card drawn: 4
	Test succeeds. Adventurer present in discard.
	Test that Adventurer gets 2 new treasure cards in hand.
7 4 1 4 1 Card drawn: 4
Card drawn: 4
	Test succeeds. Newest cards in hand are treasure.
All tests successful!

Test for great hall card effect
===================
	Test that hand increase is correct.
	Test passed. Target handcount: 5, Actual: 5; target action count = 1, Actual: 1
	Test that empty deck will reshuffle for great hall.
	Discard count: 5, Deck count: 0	Test passed. Target handcount: 5, Actual: 5
	Test that Great Hall card discard is correct.
	Test succeeds. Great hall present in discard.
All tests successful!

Test for village card effect
===================
	Test that hand increase is correct.
	Test passed. Target handcount: 5, Actual: 5; target action count = 2, Actual: 2
	Test that empty deck will reshuffle for village.
	Discard count: 5, Deck count: 0	Test passed. Target handcount: 5, Actual: 5
	Test that Village card discard is correct.
	Test succeeds. Village present in discard.
All tests successful!

File 'dominion.c'
Lines executed:35.47% of 654
Branches executed:40.05% of 417
Taken at least once:24.46% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 880 returned 100% blocks executed 85%
        -:    8:int compare(const void* a, const void* b) {
      880:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   10:    return 1;
      880:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
      313:   12:    return -1;
      567:   13:  return 0;
      880:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 31 returned 100% blocks executed 87%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       31:   44:  SelectStream(1);
       31:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       62:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       31:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      682:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
     6820:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
     5890:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
     3100:   65:        }
      310:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       31:   73:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   74:    {
       31:   75:      state->supplyCount[curse] = 10;
       31:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       31:   87:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   88:    {
       31:   89:      state->supplyCount[estate] = 8;
       31:   90:      state->supplyCount[duchy] = 8;
       31:   91:      state->supplyCount[province] = 8;
       31:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       31:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       31:  102:  state->supplyCount[silver] = 40;
       31:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     1302:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
    10230:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
     4805:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      589:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 11%
branch  3 taken 89%
        -:  114:		{
       62:  115:		  if (numPlayers == 2){ 
branch  0 taken 100%
branch  1 taken 0%
       62:  116:		    state->supplyCount[i] = 8; 
       62:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
       62:  119:		}
        -:  120:	      else
        -:  121:		{
      248:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      310:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     4495:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
     4495:  130:	}
        -:  131:
      620:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      186:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  139:    {
       62:  140:      state->deckCount[i] = 0;
      496:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:	{
      186:  143:	  state->deck[i][j] = estate;
      186:  144:	  state->deckCount[i]++;
      186:  145:	}
      992:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:	{
      434:  148:	  state->deck[i][j] = copper;
      434:  149:	  state->deckCount[i]++;		
      434:  150:	}
       62:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      186:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  155:    {
       62:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
       62:  160:    }
        -:  161:
        -:  162:  //draw player hands
      186:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       62:  166:      state->handCount[i] = 0;
       62:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
       62:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     1736:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
      837:  178:      state->embargoTokens[i] = 0;
      837:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       31:  182:  state->outpostPlayed = 0;
       31:  183:  state->phase = 0;
       31:  184:  state->numActions = 1;
       31:  185:  state->numBuys = 1;
       31:  186:  state->playedCardCount = 0;
       31:  187:  state->whoseTurn = 0;
       31:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      372:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
      155:  193:    drawCard(state->whoseTurn, state);
      155:  194:  }
        -:  195:
       31:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       31:  198:  return 0;
       31:  199:}
        -:  200:
function shuffle called 65 returned 100% blocks executed 93%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       65:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       65:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0%
branch  1 taken 100%
    #####:  210:    return -1;
       65:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     1400:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
      635:  215:    card = floor(Random() * state->deckCount[player]);
      635:  216:    newDeck[newDeckPos] = state->deck[player][card];
      635:  217:    newDeckPos++;
     3966:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 68%
branch  1 taken 32%
     1348:  219:      state->deck[player][i] = state->deck[player][i+1];
     1348:  220:    }
      635:  221:    state->deckCount[player]--;
        -:  222:  }
     1400:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
      635:  224:    state->deck[player][i] = newDeck[i];
      635:  225:    state->deckCount[player]++;
      635:  226:  }
        -:  227:
       65:  228:  return 0;
       65:  229:}
        -:  230:
function playCard called 10 returned 100% blocks executed 66%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       10:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       10:  237:  if (state->phase != 0)
branch  0 taken 0%
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       10:  243:  if ( state->numActions < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       10:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
       20:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
       10:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
       10:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
       10:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
       10:  269:  return 0;
       10:  270:}
        -:  271:
function buyCard called 7 returned 100% blocks executed 100%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        7:  280:  who = state->whoseTurn;
        -:  281:
        7:  282:  if (state->numBuys < 1){
branch  0 taken 14%
branch  1 taken 86%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        6:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 taken 17%
branch  1 taken 83%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        1:  289:    return -1;
        5:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 taken 20%
branch  1 taken 80%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  293:    return -1;
        -:  294:  } else {
        4:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        4:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        4:  298:    state->coins = (state->coins) - (getCost(supplyPos));
        4:  299:    state->numBuys--;
        -:  300:    if (DEBUG)
        -:  301:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  302:  }
        -:  303:
        -:  304:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  305:  //state->discardCount[who]++;
        -:  306:    
        4:  307:  return 0;
        7:  308:}
        -:  309:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  310:int numHandCards(struct gameState *state) {
    #####:  311:  return state->handCount[ whoseTurn(state) ];
        -:  312:}
        -:  313:
function handCard called 11 returned 100% blocks executed 100%
        -:  314:int handCard(int handPos, struct gameState *state) {
       11:  315:  int currentPlayer = whoseTurn(state);
       11:  316:  return state->hand[currentPlayer][handPos];
        -:  317:}
        -:  318:
function supplyCount called 16 returned 100% blocks executed 100%
        -:  319:int supplyCount(int card, struct gameState *state) {
       16:  320:  return state->supplyCount[card];
        -:  321:}
        -:  322:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  323:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  324:  int i;
    #####:  325:  int count = 0;
        -:  326:
    #####:  327:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  328:    {
    #####:  329:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  330:    }
        -:  331:
    #####:  332:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  333:    {
    #####:  334:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  335:    }
        -:  336:
    #####:  337:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  338:    {
    #####:  339:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  340:    }
        -:  341:
    #####:  342:  return count;
        -:  343:}
        -:  344:
function whoseTurn called 26 returned 100% blocks executed 100%
        -:  345:int whoseTurn(struct gameState *state) {
       26:  346:  return state->whoseTurn;
        -:  347:}
        -:  348:
function endTurn called 0 returned 0% blocks executed 0%
        -:  349:int endTurn(struct gameState *state) {
        -:  350:  int k;
        -:  351:  int i;
    #####:  352:  int currentPlayer = whoseTurn(state);
        -:  353:  
        -:  354:  //Discard hand
    #####:  355:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  356:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  357:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  358:  }
    #####:  359:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  360:    
        -:  361:  //Code for determining the player
    #####:  362:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  363:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  364:  }
        -:  365:  else{
    #####:  366:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  367:  }
        -:  368:
    #####:  369:  state->outpostPlayed = 0;
    #####:  370:  state->phase = 0;
    #####:  371:  state->numActions = 1;
    #####:  372:  state->coins = 0;
    #####:  373:  state->numBuys = 1;
    #####:  374:  state->playedCardCount = 0;
    #####:  375:  state->handCount[state->whoseTurn] = 0;
        -:  376:
        -:  377:  //int k; move to top
        -:  378:  //Next player draws hand
    #####:  379:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  380:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  381:  }
        -:  382:
        -:  383:  //Update money
    #####:  384:  updateCoins(state->whoseTurn, state , 0);
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
function isGameOver called 24 returned 100% blocks executed 100%
        -:  389:int isGameOver(struct gameState *state) {
        -:  390:  int i;
        -:  391:  int j;
        -:  392:	
        -:  393:  //if stack of Province cards is empty, the game ends
       24:  394:  if (state->supplyCount[province] == 0)
branch  0 taken 25%
branch  1 taken 75%
        -:  395:    {
        6:  396:      return 1;
        -:  397:    }
        -:  398:
        -:  399:  //if three supply pile are at 0, the game ends
       18:  400:  j = 0;
      936:  401:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  402:    {
      450:  403:      if (state->supplyCount[i] == 0)
branch  0 taken 11%
branch  1 taken 89%
        -:  404:	{
       48:  405:	  j++;
       48:  406:	}
      450:  407:    }
       18:  408:  if ( j >= 3)
branch  0 taken 33%
branch  1 taken 67%
        -:  409:    {
        6:  410:      return 1;
        -:  411:    }
        -:  412:
       12:  413:  return 0;
       24:  414:}
        -:  415:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  416:int scoreFor (int player, struct gameState *state) {
        -:  417:
        -:  418:  int i;
    #####:  419:  int score = 0;
        -:  420:  //score from hand
    #####:  421:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  422:    {
    #####:  423:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  424:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  429:    }
        -:  430:
        -:  431:  //score from discard
    #####:  432:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  433:    {
    #####:  434:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  435:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  440:    }
        -:  441:
        -:  442:  //score from deck
    #####:  443:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  444:    {
    #####:  445:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  446:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  451:    }
        -:  452:
    #####:  453:  return score;
        -:  454:}
        -:  455:
function getWinners called 0 returned 0% blocks executed 0%
        -:  456:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  457:  int i;	
        -:  458:  int j;
        -:  459:  int highScore;
        -:  460:  int currentPlayer;
        -:  461:
        -:  462:  //get score for each player
    #####:  463:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  464:    {
        -:  465:      //set unused player scores to -9999
    #####:  466:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  467:	{
    #####:  468:	  players[i] = -9999;
    #####:  469:	}
        -:  470:      else
        -:  471:	{
    #####:  472:	  players[i] = scoreFor (i, state);
        -:  473:	}
    #####:  474:    }
        -:  475:
        -:  476:  //find highest score
    #####:  477:  j = 0;
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  479:    {
    #####:  480:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  481:	{
    #####:  482:	  j = i;
    #####:  483:	}
    #####:  484:    }
    #####:  485:  highScore = players[j];
        -:  486:
        -:  487:  //add 1 to players who had less turns
    #####:  488:  currentPlayer = whoseTurn(state);
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  490:    {
    #####:  491:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  492:	{
    #####:  493:	  players[i]++;
    #####:  494:	}
    #####:  495:    }
        -:  496:
        -:  497:  //find new highest score
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  500:    {
    #####:  501:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  502:	{
    #####:  503:	  j = i;
    #####:  504:	}
    #####:  505:    }
    #####:  506:  highScore = players[j];
        -:  507:
        -:  508:  //set winners in array to 1 and rest to 0
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  510:    {
    #####:  511:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  512:	{
    #####:  513:	  players[i] = 1;
    #####:  514:	}
        -:  515:      else
        -:  516:	{
    #####:  517:	  players[i] = 0;
        -:  518:	}
    #####:  519:    }
        -:  520:
    #####:  521:  return 0;
        -:  522:}
        -:  523:
function drawCard called 171 returned 100% blocks executed 91%
        -:  524:int drawCard(int player, struct gameState *state)
        -:  525:{	int count;
        -:  526:  int deckCounter;
      171:  527:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 2%
branch  1 taken 98%
        -:  528:    
        -:  529:    //Step 1 Shuffle the discard pile back into a deck
        -:  530:    int i;
        -:  531:    //Move discard to deck
       36:  532:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 83%
branch  1 taken 17%
       15:  533:      state->deck[player][i] = state->discard[player][i];
       15:  534:      state->discard[player][i] = -1;
       15:  535:    }
        -:  536:
        3:  537:    state->deckCount[player] = state->discardCount[player];
        3:  538:    state->discardCount[player] = 0;//Reset discard
        -:  539:
        -:  540:    //Shufffle the deck
        3:  541:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  542:   
        -:  543:    if (DEBUG){//Debug statements
        -:  544:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  545:    }
        -:  546:    
        3:  547:    state->discardCount[player] = 0;
        -:  548:
        -:  549:    //Step 2 Draw Card
        3:  550:    count = state->handCount[player];//Get current player's hand count
        -:  551:    
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Current hand count: %d\n", count);
        -:  554:    }
        -:  555:    
        3:  556:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  557:
        3:  558:    if (deckCounter == 0)
branch  0 taken 0%
branch  1 taken 100%
    #####:  559:      return -1;
        -:  560:
        3:  561:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        3:  562:    state->deckCount[player]--;
        3:  563:    state->handCount[player]++;//Increment hand count
        3:  564:  }
        -:  565:
        -:  566:  else{
      168:  567:    int count = state->handCount[player];//Get current hand count for player
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
      168:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
      168:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      168:  575:    state->deckCount[player]--;
      168:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
      171:  579:  return 0;
      171:  580:}
        -:  581:
function getCost called 10 returned 100% blocks executed 16%
        -:  582:int getCost(int cardNumber)
        -:  583:{
       10:  584:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 10%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 90%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  585:    {
        -:  586:    case curse:
    #####:  587:      return 0;
        -:  588:    case estate:
    #####:  589:      return 2;
        -:  590:    case duchy:
    #####:  591:      return 5;
        -:  592:    case province:
    #####:  593:      return 8;
        -:  594:    case copper:
    #####:  595:      return 0;
        -:  596:    case silver:
    #####:  597:      return 3;
        -:  598:    case gold:
    #####:  599:      return 6;
        -:  600:    case adventurer:
        1:  601:      return 6;
        -:  602:    case council_room:
    #####:  603:      return 5;
        -:  604:    case feast:
    #####:  605:      return 4;
        -:  606:    case gardens:
        9:  607:      return 4;
        -:  608:    case mine:
    #####:  609:      return 5;
        -:  610:    case remodel:
    #####:  611:      return 4;
        -:  612:    case smithy:
    #####:  613:      return 4;
        -:  614:    case village:
    #####:  615:      return 3;
        -:  616:    case baron:
    #####:  617:      return 4;
        -:  618:    case great_hall:
    #####:  619:      return 3;
        -:  620:    case minion:
    #####:  621:      return 5;
        -:  622:    case steward:
    #####:  623:      return 3;
        -:  624:    case tribute:
    #####:  625:      return 5;
        -:  626:    case ambassador:
    #####:  627:      return 3;
        -:  628:    case cutpurse:
    #####:  629:      return 4;
        -:  630:    case embargo: 
    #####:  631:      return 2;
        -:  632:    case outpost:
    #####:  633:      return 5;
        -:  634:    case salvager:
    #####:  635:      return 4;
        -:  636:    case sea_hag:
    #####:  637:      return 4;
        -:  638:    case treasure_map:
    #####:  639:      return 4;
        -:  640:    }
        -:  641:	
    #####:  642:  return -1;
       10:  643:}
        -:  644:
function cardEffect called 10 returned 100% blocks executed 4%
        -:  645:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  646:{
        -:  647:  int i;
        -:  648:  int j;
        -:  649:  int k;
        -:  650:  int x;
        -:  651:  int index;
       10:  652:  int currentPlayer = whoseTurn(state);
       10:  653:  int nextPlayer = currentPlayer + 1;
        -:  654:
       10:  655:  int tributeRevealedCards[2] = {-1, -1};
        -:  656:  int temphand[MAX_HAND];// moved above the if statement
       10:  657:  int drawntreasure=0;
        -:  658:  int cardDrawn;
       10:  659:  int z = 0;// this is the counter for the temp hand
       10:  660:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0%
branch  1 taken 100%
    #####:  661:    nextPlayer = 0;
    #####:  662:  }
        -:  663:  
        -:  664:	
        -:  665:  //uses switch to select card and perform actions
       10:  666:  switch( card ) 
branch  0 taken 20%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 20%
branch  7 taken 30%
branch  8 taken 0%
branch  9 taken 30%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  667:    {
        -:  668:    case adventurer:
        2:  669:      return playAdventurer(state, handPos);
        -:  670:			
        -:  671:    case council_room:
        -:  672:      //+4 Cards
    #####:  673:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  674:	{
    #####:  675:	  drawCard(currentPlayer, state);
    #####:  676:	}
        -:  677:			
        -:  678:      //+1 Buy
    #####:  679:      state->numBuys++;
        -:  680:			
        -:  681:      //Each other player draws a card
    #####:  682:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  683:	{
    #####:  684:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  685:	    {
    #####:  686:	      drawCard(i, state);
    #####:  687:	    }
    #####:  688:	}
        -:  689:			
        -:  690:      //put played card in played card pile
    #####:  691:      discardCard(handPos, currentPlayer, state, 0);
        -:  692:			
    #####:  693:      return 0;
        -:  694:			
        -:  695:    case feast:
        -:  696:      //gain card with cost up to 5
        -:  697:      //Backup hand
    #####:  698:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  699:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  700:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  701:      }
        -:  702:      //Backup hand
        -:  703:
        -:  704:      //Update Coins for Buy
    #####:  705:      updateCoins(currentPlayer, state, 5);
    #####:  706:      x = 1;//Condition to loop on
    #####:  707:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  708:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  709:	  if (DEBUG)
        -:  710:	    printf("None of that card left, sorry!\n");
        -:  711:
        -:  712:	  if (DEBUG){
        -:  713:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  714:	  }
    #####:  715:	}
    #####:  716:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  717:	  printf("That card is too expensive!\n");
        -:  718:
        -:  719:	  if (DEBUG){
        -:  720:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  721:	  }
    #####:  722:	}
        -:  723:	else{
        -:  724:
        -:  725:	  if (DEBUG){
        -:  726:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  727:	  }
        -:  728:
    #####:  729:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  730:	  x = 0;//No more buying cards
        -:  731:
        -:  732:	  if (DEBUG){
        -:  733:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  734:	  }
        -:  735:
        -:  736:	}
        -:  737:      }     
        -:  738:
        -:  739:      //Reset Hand
    #####:  740:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  741:	state->hand[currentPlayer][i] = temphand[i];
    #####:  742:	temphand[i] = -1;
    #####:  743:      }
        -:  744:      //Reset Hand
        -:  745:      			
    #####:  746:      return 0;
        -:  747:			
        -:  748:    case gardens:
    #####:  749:      return -1;
        -:  750:			
        -:  751:    case mine:
    #####:  752:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  753:
    #####:  754:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  755:	{
    #####:  756:	  return -1;
        -:  757:	}
        -:  758:		
    #####:  759:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  760:	{
    #####:  761:	  return -1;
        -:  762:	}
        -:  763:
    #####:  764:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  765:	{
    #####:  766:	  return -1;
        -:  767:	}
        -:  768:
    #####:  769:      gainCard(choice2, state, 2, currentPlayer);
        -:  770:
        -:  771:      //discard card from hand
    #####:  772:      discardCard(handPos, currentPlayer, state, 0);
        -:  773:
        -:  774:      //discard trashed card
    #####:  775:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  776:	{
    #####:  777:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  778:	    {
    #####:  779:	      discardCard(i, currentPlayer, state, 0);			
    #####:  780:	      break;
        -:  781:	    }
    #####:  782:	}
        -:  783:			
    #####:  784:      return 0;
        -:  785:			
        -:  786:    case remodel:
    #####:  787:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  788:
    #####:  789:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  790:	{
    #####:  791:	  return -1;
        -:  792:	}
        -:  793:
    #####:  794:      gainCard(choice2, state, 0, currentPlayer);
        -:  795:
        -:  796:      //discard card from hand
    #####:  797:      discardCard(handPos, currentPlayer, state, 0);
        -:  798:
        -:  799:      //discard trashed card
    #####:  800:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  801:	{
    #####:  802:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  803:	    {
    #####:  804:	      discardCard(i, currentPlayer, state, 0);			
    #####:  805:	      break;
        -:  806:	    }
    #####:  807:	}
        -:  808:
        -:  809:
    #####:  810:      return 0;
        -:  811:		
        -:  812:    case smithy:
        2:  813:      return playSmithy(state,handPos);
        -:  814:		
        -:  815:    case village:
        -:  816:      //+1 Card
        3:  817:      drawCard(currentPlayer, state);
        -:  818:			
        -:  819:      //+2 Actions
        3:  820:      state->numActions = state->numActions + 2;
        -:  821:			
        -:  822:      //discard played card from hand
        3:  823:      discardCard(handPos, currentPlayer, state, 0);
        3:  824:      return 0;
        -:  825:		
        -:  826:    case baron:
    #####:  827:      state->numBuys++;//Increase buys by 1!
    #####:  828:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  829:	int p = 0;//Iterator for hand!
    #####:  830:	int card_not_discarded = 1;//Flag for discard set!
    #####:  831:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  832:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  833:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  834:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  835:	    state->discardCount[currentPlayer]++;
    #####:  836:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  837:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  838:	    }
    #####:  839:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  840:	    state->handCount[currentPlayer]--;
    #####:  841:	    card_not_discarded = 0;//Exit the loop
    #####:  842:	  }
    #####:  843:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  844:	    if(DEBUG) {
        -:  845:	      printf("No estate cards in your hand, invalid choice\n");
        -:  846:	      printf("Must gain an estate if there are any\n");
        -:  847:	    }
    #####:  848:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  849:	      gainCard(estate, state, 0, currentPlayer);
    #####:  850:	      state->supplyCount[estate]--;//Decrement estates
    #####:  851:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  852:		isGameOver(state);
    #####:  853:	      }
    #####:  854:	    }
    #####:  855:	    card_not_discarded = 0;//Exit the loop
    #####:  856:	  }
        -:  857:			    
        -:  858:	  else{
    #####:  859:	    p++;//Next card
        -:  860:	  }
        -:  861:	}
    #####:  862:      }
        -:  863:			    
        -:  864:      else{
    #####:  865:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  866:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  867:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  868:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  869:	    isGameOver(state);
    #####:  870:	  }
    #####:  871:	}
        -:  872:      }
        -:  873:	    
        -:  874:      
    #####:  875:      return 0;
        -:  876:		
        -:  877:    case great_hall:
        3:  878:      return playGreatHall(state,handPos);
        -:  879:		
        -:  880:    case minion:
        -:  881:      //+1 action
    #####:  882:      state->numActions++;
        -:  883:			
        -:  884:      //discard card from hand
    #####:  885:      discardCard(handPos, currentPlayer, state, 0);
        -:  886:			
    #####:  887:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  888:	{
    #####:  889:	  state->coins = state->coins + 2;
    #####:  890:	}
        -:  891:			
    #####:  892:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  893:	{
        -:  894:	  //discard hand
    #####:  895:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  896:	    {
    #####:  897:	      discardCard(handPos, currentPlayer, state, 0);
        -:  898:	    }
        -:  899:				
        -:  900:	  //draw 4
    #####:  901:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  902:	    {
    #####:  903:	      drawCard(currentPlayer, state);
    #####:  904:	    }
        -:  905:				
        -:  906:	  //other players discard hand and redraw if hand size > 4
    #####:  907:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  908:	    {
    #####:  909:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  910:		{
    #####:  911:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  912:		    {
        -:  913:		      //discard hand
    #####:  914:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  915:			{
    #####:  916:			  discardCard(handPos, i, state, 0);
        -:  917:			}
        -:  918:							
        -:  919:		      //draw 4
    #####:  920:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  921:			{
    #####:  922:			  drawCard(i, state);
    #####:  923:			}
    #####:  924:		    }
    #####:  925:		}
    #####:  926:	    }
        -:  927:				
    #####:  928:	}
    #####:  929:      return 0;
        -:  930:		
        -:  931:    case steward:
    #####:  932:      return playSteward(state,handPos,choice1,choice2,choice3);
        -:  933:
        -:  934:    case tribute:
    #####:  935:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  936:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  937:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  938:	  state->deckCount[nextPlayer]--;
    #####:  939:	}
    #####:  940:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  941:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  942:	  state->discardCount[nextPlayer]--;
    #####:  943:	}
        -:  944:	else{
        -:  945:	  //No Card to Reveal
        -:  946:	  if (DEBUG){
        -:  947:	    printf("No cards to reveal\n");
        -:  948:	  }
        -:  949:	}
    #####:  950:      }
        -:  951:	    
        -:  952:      else{
    #####:  953:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  954:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  955:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  956:	    state->deckCount[nextPlayer]++;
    #####:  957:	    state->discard[nextPlayer][i] = -1;
    #####:  958:	    state->discardCount[nextPlayer]--;
    #####:  959:	  }
        -:  960:			    
    #####:  961:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  962:	} 
    #####:  963:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  964:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  965:	state->deckCount[nextPlayer]--;
    #####:  966:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  967:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  968:	state->deckCount[nextPlayer]--;
        -:  969:      }    
        -:  970:		       
    #####:  971:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  972:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  973:	state->playedCardCount++;
    #####:  974:	tributeRevealedCards[1] = -1;
    #####:  975:      }
        -:  976:
    #####:  977:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  978:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  979:	  state->coins += 2;
    #####:  980:	}
        -:  981:		    
    #####:  982:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  983:	  drawCard(currentPlayer, state);
    #####:  984:	  drawCard(currentPlayer, state);
    #####:  985:	}
        -:  986:	else{//Action Card
    #####:  987:	  state->numActions = state->numActions + 2;
        -:  988:	}
    #####:  989:      }
        -:  990:	    
    #####:  991:      return 0;
        -:  992:		
        -:  993:    case ambassador:
    #####:  994:      return playAmbassador(state,handPos,choice1,choice2);
        -:  995:		
        -:  996:    case cutpurse:
        -:  997:
    #####:  998:      updateCoins(currentPlayer, state, 2);
    #####:  999:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1000:	{
    #####: 1001:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1002:	    {
    #####: 1003:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1004:		{
    #####: 1005:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1006:		    {
    #####: 1007:		      discardCard(j, i, state, 0);
    #####: 1008:		      break;
        -: 1009:		    }
    #####: 1010:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1011:		    {
    #####: 1012:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1013:			{
        -: 1014:			  if (DEBUG)
        -: 1015:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1016:			}	
    #####: 1017:		      break;
        -: 1018:		    }		
    #####: 1019:		}
        -: 1020:					
    #####: 1021:	    }
        -: 1022:				
    #####: 1023:	}				
        -: 1024:
        -: 1025:      //discard played card from hand
    #####: 1026:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1027:
    #####: 1028:      return 0;
        -: 1029:
        -: 1030:		
        -: 1031:    case embargo: 
        -: 1032:      //+2 Coins
    #####: 1033:      state->coins = state->coins + 2;
        -: 1034:			
        -: 1035:      //see if selected pile is in play
    #####: 1036:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1037:	{
    #####: 1038:	  return -1;
        -: 1039:	}
        -: 1040:			
        -: 1041:      //add embargo token to selected supply pile
    #####: 1042:      state->embargoTokens[choice1]++;
        -: 1043:			
        -: 1044:      //trash card
    #####: 1045:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1046:      return 0;
        -: 1047:		
        -: 1048:    case outpost:
        -: 1049:      //set outpost flag
    #####: 1050:      state->outpostPlayed++;
        -: 1051:			
        -: 1052:      //discard card
    #####: 1053:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1054:      return 0;
        -: 1055:		
        -: 1056:    case salvager:
        -: 1057:      //+1 buy
    #####: 1058:      state->numBuys++;
        -: 1059:			
    #####: 1060:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1061:	{
        -: 1062:	  //gain coins equal to trashed card
    #####: 1063:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1064:	  //trash card
    #####: 1065:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1066:	}
        -: 1067:			
        -: 1068:      //discard card
    #####: 1069:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1070:      return 0;
        -: 1071:		
        -: 1072:    case sea_hag:
    #####: 1073:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1074:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1075:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1076:	  state->discardCount[i]++;
    #####: 1077:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1078:	}
    #####: 1079:      }
    #####: 1080:      return 0;
        -: 1081:		
        -: 1082:    case treasure_map:
        -: 1083:      //search hand for another treasure_map
    #####: 1084:      index = -1;
    #####: 1085:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1086:	{
    #####: 1087:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1088:	    {
    #####: 1089:	      index = i;
    #####: 1090:	      break;
        -: 1091:	    }
    #####: 1092:	}
    #####: 1093:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1094:	{
        -: 1095:	  //trash both treasure cards
    #####: 1096:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1097:	  discardCard(index, currentPlayer, state, 1);
        -: 1098:
        -: 1099:	  //gain 4 Gold cards
    #####: 1100:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1101:	    {
    #####: 1102:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1103:	    }
        -: 1104:				
        -: 1105:	  //return success
    #####: 1106:	  return 1;
        -: 1107:	}
        -: 1108:			
        -: 1109:      //no second treasure_map found in hand
    #####: 1110:      return -1;
        -: 1111:    }
        -: 1112:	
    #####: 1113:  return -1;
       10: 1114:}
        -: 1115:
function discardCard called 18 returned 100% blocks executed 90%
        -: 1116:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1117:{
        -: 1118:	
        -: 1119:  //if card is not trashed, added to Played pile 
       18: 1120:  if (trashFlag < 1)
branch  0 taken 94%
branch  1 taken 6%
        -: 1121:    {
        -: 1122:      //add card to played pile
       17: 1123:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       17: 1124:      state->playedCardCount++;
       17: 1125:    }
        -: 1126:	
        -: 1127:  //set played card to -1
       18: 1128:  state->hand[currentPlayer][handPos] = -1;
        -: 1129:	
        -: 1130:  //remove card from player's hand
       18: 1131:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 28%
branch  1 taken 72%
        -: 1132:    {
        -: 1133:      //reduce number of cards in hand
        5: 1134:      state->handCount[currentPlayer]--;
        5: 1135:    }
       13: 1136:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1137:    {
        -: 1138:      //reduce number of cards in hand
    #####: 1139:      state->handCount[currentPlayer]--;
    #####: 1140:    }
        -: 1141:  else 	
        -: 1142:    {
        -: 1143:      //replace discarded card with last card in hand
       13: 1144:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1145:      //set last card to -1
       13: 1146:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1147:      //reduce number of cards in hand
       13: 1148:      state->handCount[currentPlayer]--;
        -: 1149:    }
        -: 1150:	
       18: 1151:  return 0;
        -: 1152:}
        -: 1153:
function gainCard called 10 returned 100% blocks executed 100%
        -: 1154:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1155:{
        -: 1156:  //Note: supplyPos is enum of choosen card
        -: 1157:	
        -: 1158:  //check if supply pile is empty (0) or card is not used in game (-1)
       10: 1159:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 20%
branch  1 taken 80%
        -: 1160:    {
        2: 1161:      return -1;
        -: 1162:    }
        -: 1163:	
        -: 1164:  //added card for [whoseTurn] current player:
        -: 1165:  // toFlag = 0 : add to discard
        -: 1166:  // toFlag = 1 : add to deck
        -: 1167:  // toFlag = 2 : add to hand
        -: 1168:
        8: 1169:  if (toFlag == 1)
branch  0 taken 13%
branch  1 taken 88%
        -: 1170:    {
        1: 1171:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1172:      state->deckCount[player]++;
        1: 1173:    }
        7: 1174:  else if (toFlag == 2)
branch  0 taken 14%
branch  1 taken 86%
        -: 1175:    {
        1: 1176:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1177:      state->handCount[player]++;
        1: 1178:    }
        -: 1179:  else
        -: 1180:    {
        6: 1181:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        6: 1182:      state->discardCount[player]++;
        -: 1183:    }
        -: 1184:	
        -: 1185:  //decrease number in supply pile
        8: 1186:  state->supplyCount[supplyPos]--;
        -: 1187:	 
        8: 1188:  return 0;
       10: 1189:}
        -: 1190:
function updateCoins called 41 returned 100% blocks executed 85%
        -: 1191:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1192:{
        -: 1193:  int i;
        -: 1194:	
        -: 1195:  //reset coin count
       41: 1196:  state->coins = 0;
        -: 1197:
        -: 1198:  //add coins for each Treasure card in player's hand
      504: 1199:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16%
        -: 1200:    {
      211: 1201:      if (state->hand[player][i] == copper)
branch  0 taken 58%
branch  1 taken 42%
        -: 1202:	{
      123: 1203:	  state->coins += 1;
      123: 1204:	}
       88: 1205:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1206:	{
    #####: 1207:	  state->coins += 2;
    #####: 1208:	}
       88: 1209:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1210:	{
    #####: 1211:	  state->coins += 3;
    #####: 1212:	}	
      211: 1213:    }	
        -: 1214:
        -: 1215:  //add bonus
       41: 1216:  state->coins += bonus;
        -: 1217:
       41: 1218:  return 0;
        -: 1219:}
        -: 1220:
function playAdventurer called 2 returned 100% blocks executed 66%
        -: 1221:int playAdventurer(struct gameState *state,int handPos){
        2: 1222:  int currentPlayer= state->whoseTurn;
        2: 1223:  int drawntreasure = 0;
        -: 1224:  int cardDrawn;
        -: 1225:  int temphand[MAX_HAND];
        -: 1226:  int i;//temphand counter
        2: 1227:  int z = 0;
       12: 1228:  while(drawntreasure<2){
branch  0 taken 67%
branch  1 taken 33%
        4: 1229:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0%
branch  1 taken 100%
    #####: 1230:      shuffle(currentPlayer, state);
    #####: 1231:    }
        4: 1232:    drawCard(currentPlayer, state);
        4: 1233:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        4: 1234:    printf("Card drawn: %d\n",cardDrawn);
        4: 1235:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        4: 1236:      drawntreasure++;
        -: 1237:    else{
    #####: 1238:      temphand[z]=cardDrawn;
    #####: 1239:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1240:      z++;
        -: 1241:    }
        -: 1242:  }
        4: 1243:  while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100%
    #####: 1244:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1245:    z=z-1;
        -: 1246:  }
        2: 1247:  discardCard(handPos,currentPlayer,state,0);
        2: 1248:  return 0;
        -: 1249:}
        -: 1250:
function playSmithy called 2 returned 100% blocks executed 100%
        -: 1251:int playSmithy(struct gameState *state,int handPos){
        -: 1252:      //currentPlayer
        2: 1253:      int currentPlayer = whoseTurn(state);
        -: 1254:      int i;
        -: 1255:      //+3 Cards
       16: 1256:      for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25%
        -: 1257:      {
        6: 1258:        drawCard(currentPlayer, state);
        6: 1259:      }
        -: 1260:      //discard card from hand
        2: 1261:      discardCard(handPos, currentPlayer, state, 0);
        2: 1262:      return 0;
        -: 1263:}
        -: 1264:
function playGreatHall called 3 returned 100% blocks executed 100%
        -: 1265:int playGreatHall(struct gameState *state, int handPos){
        3: 1266:      int currentPlayer = whoseTurn(state);
        -: 1267:      //+1 Card
        3: 1268:      drawCard(currentPlayer, state);
        -: 1269:      
        -: 1270:      //+1 Actions
        3: 1271:      state->numActions++;
        -: 1272:      
        -: 1273:      //discard card from hand
        3: 1274:      discardCard(handPos, currentPlayer, state, 0);
        3: 1275:}
        -: 1276:
function playAmbassador called 0 returned 0% blocks executed 0%
        -: 1277:int playAmbassador(struct gameState *state, int handPos, int choice1, int choice2){
    #####: 1278:  int currentPlayer = whoseTurn(state);
    #####: 1279:  int j = 0;    //used to check if player has enough cards to discard
        -: 1280:  int i;
        -: 1281:
    #####: 1282:      if (choice2 > 2 || choice2 < 0)//cannot choose more than 2
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1283:  {
    #####: 1284:    return -1;        
        -: 1285:  }
        -: 1286:
    #####: 1287:      if (choice1 == handPos)//cant choose this ambassador
branch  0 never executed
branch  1 never executed
        -: 1288:  {
    #####: 1289:    return -1;
        -: 1290:  }
        -: 1291:
    #####: 1292:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1293:  {
    #####: 1294:    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1295:      {
    #####: 1296:        j++;
    #####: 1297:      }
    #####: 1298:  }
    #####: 1299:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1300:  {
    #####: 1301:    return -1;        
        -: 1302:  }
        -: 1303:
        -: 1304:      if (DEBUG) 
        -: 1305:  printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1306:
        -: 1307:      //increase supply count for choosen card by amount being discarded
    #####: 1308:      state->supplyCount[choice2] += choice2;
        -: 1309:      
        -: 1310:      //each other player gains a copy of revealed card
    #####: 1311:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1312:  {
    #####: 1313:    if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1314:      {
    #####: 1315:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1316:      }
    #####: 1317:  }
        -: 1318:
        -: 1319:      //discard played card from hand
    #####: 1320:      discardCard(handPos, currentPlayer, state, 0);      
        -: 1321:
        -: 1322:      //trash copies of cards returned to supply
    #####: 1323:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1324:  {
    #####: 1325:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1326:      {
    #####: 1327:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1328:    {
    #####: 1329:      discardCard(i, currentPlayer, state, 1);
    #####: 1330:      break;
        -: 1331:    }
    #####: 1332:      }
    #####: 1333:  }     
        -: 1334:
    #####: 1335:      return 0;
    #####: 1336:}
        -: 1337:
function playSteward called 0 returned 0% blocks executed 0%
        -: 1338:int playSteward(struct gameState *state,int handPos,int choice1,int choice2,int choice3){
    #####: 1339:      int currentPlayer = whoseTurn(state);
    #####: 1340:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1341:  {
        -: 1342:    //+2 cards
    #####: 1343:    drawCard(currentPlayer, state);
    #####: 1344:    drawCard(currentPlayer, state);
    #####: 1345:  }
    #####: 1346:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1347:  {
        -: 1348:    //+2 coins
    #####: 1349:    state->coins = state->coins + 2;
    #####: 1350:  }
        -: 1351:      else
        -: 1352:  {
        -: 1353:    //trash 2 cards in hand
    #####: 1354:    discardCard(choice2, currentPlayer, state, 0);
    #####: 1355:    discardCard(choice3, currentPlayer, state, 0);
        -: 1356:  }
        -: 1357:      
        -: 1358:      //discard card from hand
    #####: 1359:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1360:      return 0;
        -: 1361:}
        -: 1362:
        -: 1363:
        -: 1364://end of dominion.c
