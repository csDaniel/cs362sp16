        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 629 returned 100% blocks executed 100%
      629:    8:int compare(const void* a, const void* b) {
      629:    9:	if (*(int*)a > *(int*)b)
branch  0 taken 48% (fallthrough)
branch  1 taken 52%
      301:   10:		return 1;
      328:   11:	if (*(int*)a < *(int*)b)
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
       91:   12:		return -1;
      237:   13:	return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:	struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:	return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:	int k8, int k9, int k10) {
    #####:   23:	int* k = malloc(10 * sizeof(int));
    #####:   24:	k[0] = k1;
    #####:   25:	k[1] = k2;
    #####:   26:	k[2] = k3;
    #####:   27:	k[3] = k4;
    #####:   28:	k[4] = k5;
    #####:   29:	k[5] = k6;
    #####:   30:	k[6] = k7;
    #####:   31:	k[7] = k8;
    #####:   32:	k[8] = k9;
    #####:   33:	k[9] = k10;
    #####:   34:	return k;
        -:   35:}
        -:   36:
function initializeGame called 1 returned 100% blocks executed 88%
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:struct gameState *state) {
        -:   39:
        -:   40:	int i;
        -:   41:	int j;
        -:   42:	int it;
        -:   43:	//set up random number generator
        1:   44:	SelectStream(1);
call    0 returned 100%
        1:   45:	PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:	//check number of players
        1:   48:	if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:	{
    #####:   50:		return -1;
        -:   51:	}
        -:   52:
        -:   53:	//set number of players
        1:   54:	state->numPlayers = numPlayers;
        -:   55:
        -:   56:	//check selected kingdom cards are different
       11:   57:	for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:	{
      110:   59:		for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:		{
      100:   61:			if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:			{
    #####:   63:				return -1;
        -:   64:			}
        -:   65:		}
        -:   66:	}
        -:   67:
        -:   68:
        -:   69:	//initialize supply
        -:   70:	///////////////////////////////
        -:   71:
        -:   72:	//set number of Curse cards
        1:   73:	if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:	{
        1:   75:		state->supplyCount[curse] = 10;
        -:   76:	}
    #####:   77:	else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:	{
    #####:   79:		state->supplyCount[curse] = 20;
        -:   80:	}
        -:   81:	else
        -:   82:	{
    #####:   83:		state->supplyCount[curse] = 30;
        -:   84:	}
        -:   85:
        -:   86:	//set number of Victory cards
        1:   87:	if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:	{
        1:   89:		state->supplyCount[estate] = 8;
        1:   90:		state->supplyCount[duchy] = 8;
        1:   91:		state->supplyCount[province] = 8;
        -:   92:	}
        -:   93:	else
        -:   94:	{
    #####:   95:		state->supplyCount[estate] = 12;
    #####:   96:		state->supplyCount[duchy] = 12;
    #####:   97:		state->supplyCount[province] = 12;
        -:   98:	}
        -:   99:
        -:  100:	//set number of Treasure cards
        1:  101:	state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:	state->supplyCount[silver] = 40;
        1:  103:	state->supplyCount[gold] = 30;
        -:  104:
        -:  105:	//set number of Kingdom cards
       21:  106:	for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:	{
      165:  108:		for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:		{
      155:  110:			if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:			{
        -:  112:				//check if card is a 'Victory' Kingdom card
       10:  113:				if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:				{
        2:  115:					if (numPlayers == 2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  116:						state->supplyCount[i] = 8;
        -:  117:					}
    #####:  118:					else { state->supplyCount[i] = 12; }
        -:  119:				}
        -:  120:				else
        -:  121:				{
        9:  122:					state->supplyCount[i] = 10;
        -:  123:				}
       10:  124:				break;
        -:  125:			}
        -:  126:			else    //card is not in the set choosen for the game
        -:  127:			{
      145:  128:				state->supplyCount[i] = -1;
        -:  129:			}
        -:  130:		}
        -:  131:
        -:  132:	}
        -:  133:
        -:  134:	////////////////////////
        -:  135:	//supply intilization complete
        -:  136:
        -:  137:	//set player decks
        3:  138:	for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:	{
        2:  140:		state->deckCount[i] = 0;
        8:  141:		for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:		{
        6:  143:			state->deck[i][j] = estate;
        6:  144:			state->deckCount[i]++;
        -:  145:		}
       16:  146:		for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:		{
       14:  148:			state->deck[i][j] = copper;
       14:  149:			state->deckCount[i]++;
        -:  150:		}
        -:  151:	}
        -:  152:
        -:  153:	//shuffle player decks
        3:  154:	for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:	{
        2:  156:		if (shuffle(i, state) < 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:		{
    #####:  158:			return -1;
        -:  159:		}
        -:  160:	}
        -:  161:
        -:  162:	//draw player hands
        3:  163:	for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:	{
        -:  165:		//initialize hand size to zero
        2:  166:		state->handCount[i] = 0;
        2:  167:		state->discardCount[i] = 0;
        -:  168:		//draw 5 cards
        -:  169:		// for (j = 0; j < 5; j++)
        -:  170:		//	{
        -:  171:		//	  drawCard(i, state);
        -:  172:		//	}
        -:  173:	}
        -:  174:
        -:  175:	//set embargo tokens to 0 for all supply piles
       28:  176:	for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:	{
       27:  178:		state->embargoTokens[i] = 0;
        -:  179:	}
        -:  180:
        -:  181:	//initialize first player's turn
        1:  182:	state->outpostPlayed = 0;
        1:  183:	state->phase = 0;
        1:  184:	state->numActions = 1;
        1:  185:	state->numBuys = 1;
        1:  186:	state->playedCardCount = 0;
        1:  187:	state->whoseTurn = 0;
        1:  188:	state->handCount[state->whoseTurn] = 0;
        -:  189:	//int it; move to top
        -:  190:
        -:  191:	//Moved draw cards to here, only drawing at the start of a turn
        6:  192:	for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  193:		drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:	}
        -:  195:
        1:  196:	updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        1:  198:	return 0;
        -:  199:}
        -:  200:
function shuffle called 17 returned 100% blocks executed 100%
       17:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:	int newDeck[MAX_DECK];
       17:  205:	int newDeckPos = 0;
        -:  206:	int card;
        -:  207:	int i;
        -:  208:
       17:  209:	if (state->deckCount[player] < 1)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        1:  210:		return -1;
       16:  211:	qsort((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:	/* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      261:  214:	while (state->deckCount[player] > 0) {
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
      229:  215:		card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      229:  216:		newDeck[newDeckPos] = state->deck[player][card];
      229:  217:		newDeckPos++;
     1016:  218:		for (i = card; i < state->deckCount[player] - 1; i++) {
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
      787:  219:			state->deck[player][i] = state->deck[player][i + 1];
        -:  220:		}
      229:  221:		state->deckCount[player]--;
        -:  222:	}
      245:  223:	for (i = 0; i < newDeckPos; i++) {
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
      229:  224:		state->deck[player][i] = newDeck[i];
      229:  225:		state->deckCount[player]++;
        -:  226:	}
        -:  227:
       16:  228:	return 0;
        -:  229:}
        -:  230:
function playCard called 28 returned 100% blocks executed 80%
       28:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:	int card;
       28:  234:	int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:	//check if it is the right phase
       28:  237:	if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:	{
    #####:  239:		return -1;
        -:  240:	}
        -:  241:
        -:  242:	//check if player has enough actions
       28:  243:	if (state->numActions < 1)
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        -:  244:	{
       24:  245:		return -1;
        -:  246:	}
        -:  247:
        -:  248:	//get card played
        4:  249:	card = handCard(handPos, state);
call    0 returned 100%
        -:  250:
        -:  251:	//check if selected card is an action
        4:  252:	if (card < adventurer || card > treasure_map)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:	{
    #####:  254:		return -1;
        -:  255:	}
        -:  256:
        -:  257:	//play card
        4:  258:	if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:	{
    #####:  260:		return -1;
        -:  261:	}
        -:  262:
        -:  263:	//reduce number of actions
        4:  264:	state->numActions--;
        -:  265:
        -:  266:	//update coins (Treasure cards may be added with card draws)
        4:  267:	updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:
        4:  269:	return 0;
        -:  270:}
        -:  271:
function buyCard called 38 returned 100% blocks executed 79%
       38:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:	int who;
        -:  274:	if (DEBUG) {
        -:  275:		printf("Entering buyCard...\n");
        -:  276:	}
        -:  277:
        -:  278:	// I don't know what to do about the phase thing.
        -:  279:
       38:  280:	who = state->whoseTurn;
        -:  281:
       38:  282:	if (state->numBuys < 1) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  283:		if (DEBUG)
        -:  284:			printf("You do not have any buys left\n");
    #####:  285:		return -1;
        -:  286:	}
       38:  287:	else if (supplyCount(supplyPos, state) < 1) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  288:		if (DEBUG)
        -:  289:			printf("There are not any of that type of card left\n");
    #####:  290:		return -1;
        -:  291:	}
       38:  292:	else if (state->coins < getCost(supplyPos)) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  293:		if (DEBUG)
        -:  294:			printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:		return -1;
        -:  296:	}
        -:  297:	else {
       38:  298:		state->phase = 1;
        -:  299:		//state->supplyCount[supplyPos]--;
       38:  300:		gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  301:
       38:  302:		state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
       38:  303:		state->numBuys--;
        -:  304:		if (DEBUG)
        -:  305:			printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  306:	}
        -:  307:
        -:  308:	//state->discard[who][state->discardCount[who]] = supplyPos;
        -:  309:	//state->discardCount[who]++;
        -:  310:
       38:  311:	return 0;
        -:  312:}
        -:  313:
function numHandCards called 262 returned 100% blocks executed 100%
      262:  314:int numHandCards(struct gameState *state) {
      262:  315:	return state->handCount[whoseTurn(state)];
call    0 returned 100%
        -:  316:}
        -:  317:
function handCard called 527 returned 100% blocks executed 100%
      527:  318:int handCard(int handPos, struct gameState *state) {
      527:  319:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
      527:  320:	return state->hand[currentPlayer][handPos];
        -:  321:}
        -:  322:
function supplyCount called 76 returned 100% blocks executed 100%
       76:  323:int supplyCount(int card, struct gameState *state) {
       76:  324:	return state->supplyCount[card];
        -:  325:}
        -:  326:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  327:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  328:	int i;
    #####:  329:	int count = 0;
        -:  330:
    #####:  331:	for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  332:	{
    #####:  333:		if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  334:	}
        -:  335:
    #####:  336:	for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  337:	{
    #####:  338:		if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  339:	}
        -:  340:
    #####:  341:	for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  342:	{
    #####:  343:		if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  344:	}
        -:  345:
    #####:  346:	return count;
        -:  347:}
        -:  348:
function whoseTurn called 869 returned 100% blocks executed 100%
      869:  349:int whoseTurn(struct gameState *state) {
      869:  350:	return state->whoseTurn;
        -:  351:}
        -:  352:
function endTurn called 38 returned 100% blocks executed 100%
       38:  353:int endTurn(struct gameState *state) {
        -:  354:	int k;
        -:  355:	int i;
       38:  356:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  357:
        -:  358:	//Discard hand
      238:  359:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
      200:  360:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      200:  361:		state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  362:	}
       38:  363:	state->handCount[currentPlayer] = 0;//Reset hand count
        -:  364:
        -:  365:	//Code for determining the player
       38:  366:	if (currentPlayer < (state->numPlayers - 1)) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
       19:  367:		state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  368:	}
        -:  369:	else {
       19:  370:		state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  371:	}
        -:  372:
       38:  373:	state->outpostPlayed = 0;
       38:  374:	state->phase = 0;
       38:  375:	state->numActions = 1;
       38:  376:	state->coins = 0;
       38:  377:	state->numBuys = 1;
       38:  378:	state->playedCardCount = 0;
       38:  379:	state->handCount[state->whoseTurn] = 0;
        -:  380:
        -:  381:	//int k; move to top
        -:  382:	//Next player draws hand
      228:  383:	for (k = 0; k < 5; k++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      190:  384:		drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  385:	}
        -:  386:
        -:  387:	//Update money
       38:  388:	updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  389:
       38:  390:	return 0;
        -:  391:}
        -:  392:
function isGameOver called 39 returned 100% blocks executed 82%
       39:  393:int isGameOver(struct gameState *state) {
        -:  394:	int i;
        -:  395:	int j;
        -:  396:
        -:  397:	//if stack of Province cards is empty, the game ends
       39:  398:	if (state->supplyCount[province] == 0)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:  399:	{
        1:  400:		return 1;
        -:  401:	}
        -:  402:
        -:  403:	//if three supply pile are at 0, the game ends
       38:  404:	j = 0;
      988:  405:	for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  406:	{
      950:  407:		if (state->supplyCount[i] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  408:		{
    #####:  409:			j++;
        -:  410:		}
        -:  411:	}
       38:  412:	if (j >= 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  413:	{
    #####:  414:		return 1;
        -:  415:	}
        -:  416:
       38:  417:	return 0;
        -:  418:}
        -:  419:
function scoreFor called 2 returned 100% blocks executed 68%
        2:  420:int scoreFor(int player, struct gameState *state) {
        -:  421:
        -:  422:	int i;
        2:  423:	int score = 0;
        -:  424:	//score from hand
        7:  425:	for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  426:	{
        5:  427:		if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  428:		if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  429:		if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  430:		if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        5:  431:		if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  432:		if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  433:	}
        -:  434:
        -:  435:	//score from discard
       38:  436:	for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  437:	{
       36:  438:		if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       36:  439:		if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
       36:  440:		if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       36:  441:		if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
       36:  442:		if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       36:  443:		if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  444:	}
        -:  445:
        -:  446:	//score from deck
       38:  447:	for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  448:	{
       36:  449:		if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       36:  450:		if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
       36:  451:		if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       36:  452:		if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
       36:  453:		if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       36:  454:		if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  455:	}
        -:  456:
        2:  457:	return score;
        -:  458:}
        -:  459:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  460:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  461:	int i;
        -:  462:	int j;
        -:  463:	int highScore;
        -:  464:	int currentPlayer;
        -:  465:
        -:  466:	//get score for each player
    #####:  467:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  468:	{
        -:  469:		//set unused player scores to -9999
    #####:  470:		if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  471:		{
    #####:  472:			players[i] = -9999;
        -:  473:		}
        -:  474:		else
        -:  475:		{
    #####:  476:			players[i] = scoreFor(i, state);
call    0 never executed
        -:  477:		}
        -:  478:	}
        -:  479:
        -:  480:	//find highest score
    #####:  481:	j = 0;
    #####:  482:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  483:	{
    #####:  484:		if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  485:		{
    #####:  486:			j = i;
        -:  487:		}
        -:  488:	}
    #####:  489:	highScore = players[j];
        -:  490:
        -:  491:	//add 1 to players who had less turns
    #####:  492:	currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  493:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  494:	{
    #####:  495:		if (players[i] == highScore && i > currentPlayer)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  496:		{
    #####:  497:			players[i]++;
        -:  498:		}
        -:  499:	}
        -:  500:
        -:  501:	//find new highest score
    #####:  502:	j = 0;
    #####:  503:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  504:	{
    #####:  505:		if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  506:		{
    #####:  507:			j = i;
        -:  508:		}
        -:  509:	}
    #####:  510:	highScore = players[j];
        -:  511:
        -:  512:	//set winners in array to 1 and rest to 0
    #####:  513:	for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  514:	{
    #####:  515:		if (players[i] == highScore)
branch  0 never executed
branch  1 never executed
        -:  516:		{
    #####:  517:			players[i] = 1;
        -:  518:		}
        -:  519:		else
        -:  520:		{
    #####:  521:			players[i] = 0;
        -:  522:		}
        -:  523:	}
        -:  524:
    #####:  525:	return 0;
        -:  526:}
        -:  527:
function drawCard called 216 returned 100% blocks executed 92%
      216:  528:int drawCard(int player, struct gameState *state)
        -:  529:{
        -:  530:	int count;
        -:  531:	int deckCounter;
      216:  532:	if (state->deckCount[player] <= 0) {//Deck is empty
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  533:
        -:  534:	  //Step 1 Shuffle the discard pile back into a deck
        -:  535:		int i;
        -:  536:		//Move discard to deck
      223:  537:		for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
      209:  538:			state->deck[player][i] = state->discard[player][i];
      209:  539:			state->discard[player][i] = -1;
        -:  540:		}
        -:  541:
       14:  542:		state->deckCount[player] = state->discardCount[player];
       14:  543:		state->discardCount[player] = 0;//Reset discard
        -:  544:
        -:  545:		//Shufffle the deck
       14:  546:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  547:
        -:  548:		if (DEBUG) {//Debug statements
        -:  549:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  550:		}
        -:  551:
       14:  552:		state->discardCount[player] = 0;
        -:  553:
        -:  554:		//Step 2 Draw Card
       14:  555:		count = state->handCount[player];//Get current player's hand count
        -:  556:
        -:  557:		if (DEBUG) {//Debug statements
        -:  558:			printf("Current hand count: %d\n", count);
        -:  559:		}
        -:  560:
       14:  561:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  562:
       14:  563:		if (deckCounter == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  564:			return -1;
        -:  565:
       14:  566:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       14:  567:		state->deckCount[player]--;
       14:  568:		state->handCount[player]++;//Increment hand count
        -:  569:	}
        -:  570:
        -:  571:	else {
      202:  572:		int count = state->handCount[player];//Get current hand count for player
        -:  573:		int deckCounter;
        -:  574:		if (DEBUG) {//Debug statements
        -:  575:			printf("Current hand count: %d\n", count);
        -:  576:		}
        -:  577:
      202:  578:		deckCounter = state->deckCount[player];//Create holder for the deck count
      202:  579:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      202:  580:		state->deckCount[player]--;
      202:  581:		state->handCount[player]++;//Increment hand count
        -:  582:	}
        -:  583:
      216:  584:	return 0;
        -:  585:}
        -:  586:
function getCost called 76 returned 100% blocks executed 23%
       76:  587:int getCost(int cardNumber)
        -:  588:{
       76:  589:	switch (cardNumber)
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 21%
branch  4 taken 0%
branch  5 taken 37%
branch  6 taken 32%
branch  7 taken 5%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 5%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  590:	{
        -:  591:	case curse:
    #####:  592:		return 0;
        -:  593:	case estate:
    #####:  594:		return 2;
        -:  595:	case duchy:
    #####:  596:		return 5;
        -:  597:	case province:
       16:  598:		return 8;
        -:  599:	case copper:
    #####:  600:		return 0;
        -:  601:	case silver:
       28:  602:		return 3;
        -:  603:	case gold:
       24:  604:		return 6;
        -:  605:	case adventurer:
        4:  606:		return 6;
        -:  607:	case council_room:
    #####:  608:		return 5;
        -:  609:	case feast:
    #####:  610:		return 4;
        -:  611:	case gardens:
    #####:  612:		return 4;
        -:  613:	case mine:
    #####:  614:		return 5;
        -:  615:	case remodel:
    #####:  616:		return 4;
        -:  617:	case smithy:
        4:  618:		return 4;
        -:  619:	case village:
    #####:  620:		return 3;
        -:  621:	case baron:
    #####:  622:		return 4;
        -:  623:	case great_hall:
    #####:  624:		return 3;
        -:  625:	case minion:
    #####:  626:		return 5;
        -:  627:	case steward:
    #####:  628:		return 3;
        -:  629:	case tribute:
    #####:  630:		return 5;
        -:  631:	case ambassador:
    #####:  632:		return 3;
        -:  633:	case cutpurse:
    #####:  634:		return 4;
        -:  635:	case embargo:
    #####:  636:		return 2;
        -:  637:	case outpost:
    #####:  638:		return 5;
        -:  639:	case salvager:
    #####:  640:		return 4;
        -:  641:	case sea_hag:
    #####:  642:		return 4;
        -:  643:	case treasure_map:
    #####:  644:		return 4;
        -:  645:	}
        -:  646:
    #####:  647:	return -1;
        -:  648:}
        -:  649:
function cardEffectAdventurer called 2 returned 100% blocks executed 95%
        2:  650:int cardEffectAdventurer(int player, int handPos, struct gameState *state)
        -:  651:{
        2:  652:	int drawntreasure = 0;
        -:  653:	int cardDrawn;
        2:  654:	int z = 0;
        -:  655:	int temphand[MAX_HAND];// moved above the if statement
       17:  656:	while (drawntreasure <= 2) {
branch  0 taken 87%
branch  1 taken 13% (fallthrough)
       13:  657:		if (state->deckCount[player] < 1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        1:  658:			shuffle(player, state);
call    0 returned 100%
        -:  659:		}
       13:  660:		drawCard(player, state);
call    0 returned 100%
       13:  661:		cardDrawn = state->hand[player][state->handCount[player] - 1];//top card of hand is most recently drawn card.
       13:  662:		if (cardDrawn == copper || cardDrawn == copper || cardDrawn == gold)
branch  0 taken 69% (fallthrough)
branch  1 taken 31%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 22% (fallthrough)
branch  5 taken 78%
        6:  663:			drawntreasure++;
        -:  664:		else {
        7:  665:			if (z < MAX_HAND) // bounds check to avoid segfault
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  666:			{
        7:  667:				temphand[z] = cardDrawn;
        7:  668:				state->handCount[player]--; //this should just remove the top card (the most recently drawn one).
        7:  669:				z++;
        -:  670:			}
    #####:  671:			else break;
        -:  672:		}
        -:  673:	}
       11:  674:	while (z - 1 >= 0) {
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -:  675:		// bounds check to avoid segfault
        7:  676:		if(z <= MAX_HAND) state->discard[player][state->discardCount[player]++] = temphand[z - 1]; // discard all cards in play that have been drawn
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        7:  677:		z = z - 1;
        -:  678:	}
        -:  679:	//discard card from hand
        2:  680:	discardCard(handPos, player, state, 0);
call    0 returned 100%
        2:  681:	return 0;
        -:  682:}
        -:  683:
function cardEffectCouncilRoom called 0 returned 0% blocks executed 0%
    #####:  684:int cardEffectCouncilRoom(int player, int handPos, struct gameState *state)
        -:  685:{
        -:  686:	int i;
        -:  687:
        -:  688:	//+4 Cards
    #####:  689:	for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  690:	{
    #####:  691:		drawCard(player, state);
call    0 never executed
        -:  692:	}
        -:  693:
        -:  694:	//+1 Buy
    #####:  695:	state->numBuys++;
        -:  696:
        -:  697:	//Each other player draws a card
    #####:  698:	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  699:	{
    #####:  700:		if (i < player)
branch  0 never executed
branch  1 never executed
        -:  701:		{
    #####:  702:			drawCard(i, state);
call    0 never executed
        -:  703:		}
        -:  704:	}
        -:  705:
        -:  706:	//put played card in played card pile
    #####:  707:	discardCard(handPos, player, state, 0);
call    0 never executed
        -:  708:
    #####:  709:	return 0;
        -:  710:}
        -:  711:
function cardEffectFeast called 0 returned 0% blocks executed 0%
    #####:  712:int cardEffectFeast(int player, int handPos, int choice1, struct gameState *state)
        -:  713:{
        -:  714:	int i;
        -:  715:	int x;
        -:  716:	int temphand[MAX_HAND];// moved above the if statement
        -:  717:
        -:  718://gain card with cost up to 5
        -:  719://Backup hand
    #####:  720:	for (i = 0; i <= state->handCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  721:		temphand[i] = state->hand[player][i];//Backup card
    #####:  722:		state->hand[player][i] = -1;//Set to nothing
        -:  723:	}
        -:  724:	//Backup hand
        -:  725:
        -:  726:	//Update Coins for Buy
    #####:  727:	updateCoins(player, state, 5);
call    0 never executed
    #####:  728:	x = 1;//Condition to loop on
    #####:  729:	while (x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  730:		if (supplyCount(choice1, state) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  731:			if (DEBUG)
        -:  732:				printf("None of that card left, sorry!\n");
        -:  733:
        -:  734:			if (DEBUG) {
        -:  735:				printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  736:			}
        -:  737:		}
    #####:  738:		else if (state->coins < getCost(choice1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  739:			printf("That card is too expensive!\n");
call    0 never executed
        -:  740:
        -:  741:			if (DEBUG) {
        -:  742:				printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  743:			}
        -:  744:		}
        -:  745:		else {
        -:  746:
        -:  747:			if (DEBUG) {
        -:  748:				printf("Deck Count: %d\n", state->handCount[player] + state->deckCount[player] + state->discardCount[player]);
        -:  749:			}
        -:  750:
    #####:  751:			gainCard(choice1, state, 2, player);//Gain the card
call    0 never executed
    #####:  752:			x = 0;//No more buying cards
        -:  753:
        -:  754:			if (DEBUG) {
        -:  755:				printf("Deck Count: %d\n", state->handCount[player] + state->deckCount[player] + state->discardCount[player]);
        -:  756:			}
        -:  757:
        -:  758:		}
        -:  759:	}
        -:  760:
        -:  761:	//Reset Hand
    #####:  762:	for (i = 0; i <= state->handCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  763:		state->hand[player][i] = temphand[i];
    #####:  764:		temphand[i] = -1;
        -:  765:	}
        -:  766:	//Reset Hand
        -:  767:
        -:  768:	//discard card from hand
    #####:  769:	discardCard(handPos, player, state, 0);
call    0 never executed
    #####:  770:	return 0;
        -:  771:}
        -:  772:
function cardEffectMine called 0 returned 0% blocks executed 0%
    #####:  773:int cardEffectMine(int player, int handPos, int choice1, int choice2, struct gameState *state)
        -:  774:{
        -:  775:	int i, j;
        -:  776:
    #####:  777:	j = state->hand[player][choice1];  //store card we will trash
        -:  778:
    #####:  779:	if (state->hand[player][choice1] < copper || state->hand[player][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  780:	{
    #####:  781:		return -1;
        -:  782:	}
        -:  783:
    #####:  784:	if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  785:	{
    #####:  786:		return -1;
        -:  787:	}
        -:  788:
    #####:  789:	if ((getCost(state->hand[player][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  790:	{
    #####:  791:		return -1;
        -:  792:	}
        -:  793:
    #####:  794:	gainCard(choice2, state, 2, player);
call    0 never executed
        -:  795:
        -:  796:	//discard card from hand
    #####:  797:	discardCard(handPos, player, state, 0);
call    0 never executed
        -:  798:
        -:  799:	//discard trashed card
    #####:  800:	for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  801:	{
    #####:  802:		if (state->hand[player][i] == j)
branch  0 never executed
branch  1 never executed
        -:  803:		{
    #####:  804:			discardCard(i, player, state, 0);
call    0 never executed
    #####:  805:			break;
        -:  806:		}
        -:  807:	}
        -:  808:
    #####:  809:	return 0;
        -:  810:}
        -:  811:
        -:  812:
function cardEffectRemodel called 0 returned 0% blocks executed 0%
    #####:  813:int cardEffectRemodel(int player, int handPos, int choice1, int choice2, struct gameState *state)
        -:  814:{
        -:  815:	int i, j;
        -:  816:
    #####:  817:	j = state->hand[player][choice1];  //store card we will trash
        -:  818:
    #####:  819:	if ((getCost(state->hand[player][choice1]) + 2) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  820:	{
    #####:  821:		return -1;
        -:  822:	}
        -:  823:
    #####:  824:	gainCard(choice1, state, 0, player);
call    0 never executed
        -:  825:
        -:  826:	//discard card from hand
    #####:  827:	discardCard(handPos, player, state, 0);
call    0 never executed
        -:  828:
        -:  829:	//discard trashed card
    #####:  830:	for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  831:	{
    #####:  832:		if (state->hand[player][i] == j)
branch  0 never executed
branch  1 never executed
        -:  833:		{
    #####:  834:			discardCard(i, player, state, 0);
call    0 never executed
    #####:  835:			break;
        -:  836:		}
        -:  837:	}
        -:  838:
    #####:  839:	return 0;
        -:  840:}
        -:  841:
        -:  842:
function cardEffectSmithy called 2 returned 100% blocks executed 100%
        2:  843:int cardEffectSmithy(int player, int handPos, struct gameState *state)
        -:  844:{
        -:  845:	int i;
        -:  846:
        -:  847:	//+3 Cards
       10:  848:	for (i = 0; i <= 3; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  849:	{
        8:  850:		drawCard(player, state);
call    0 returned 100%
        -:  851:	}
        -:  852:
        -:  853:	//discard card from hand
        2:  854:	discardCard(handPos, player, state, 0);
call    0 returned 100%
        2:  855:	return 0;
        -:  856:}
        -:  857:
function cardEffect called 4 returned 100% blocks executed 4%
        4:  858:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  859:{
        -:  860:	int i;
        -:  861:	int j;
        -:  862:	int k;
        -:  863:	int x;
        -:  864:	int index;
        4:  865:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        4:  866:	int nextPlayer = currentPlayer + 1;
        -:  867:
        4:  868:	int tributeRevealedCards[2] = { -1, -1 };
        -:  869:	int temphand[MAX_HAND];// moved above the if statement
        4:  870:	int drawntreasure = 0;
        -:  871:	int cardDrawn;
        4:  872:	int z = 0;// this is the counter for the temp hand
        4:  873:	if (nextPlayer > (state->numPlayers - 1)) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2:  874:		nextPlayer = 0;
        -:  875:	}
        -:  876:
        -:  877:
        -:  878:	//uses switch to select card and perform actions
        4:  879:	switch (card)
branch  0 taken 50%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 50%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  880:	{
        -:  881:	case adventurer:
        2:  882:		return cardEffectAdventurer(currentPlayer, handPos, state);
call    0 returned 100%
        -:  883:
        -:  884:	case council_room:
    #####:  885:		return cardEffectCouncilRoom(currentPlayer, handPos, state);
call    0 never executed
        -:  886:
        -:  887:	case feast:
    #####:  888:		return cardEffectFeast(currentPlayer, handPos, choice1, state);
call    0 never executed
        -:  889:
        -:  890:	case gardens:
    #####:  891:		return -1;
        -:  892:
        -:  893:	case mine:
    #####:  894:		return cardEffectMine(currentPlayer, handPos, choice1, choice2, state);
call    0 never executed
        -:  895:
        -:  896:	case remodel:
    #####:  897:		return cardEffectRemodel(currentPlayer, handPos, choice1, choice2, state);
call    0 never executed
        -:  898:
        -:  899:	case smithy:
        2:  900:		return cardEffectSmithy(currentPlayer, handPos, state);
call    0 returned 100%
        -:  901:
        -:  902:	case village:
        -:  903:		//+1 Card
    #####:  904:		drawCard(currentPlayer, state);
call    0 never executed
        -:  905:
        -:  906:		//+2 Actions
    #####:  907:		state->numActions = state->numActions + 2;
        -:  908:
        -:  909:		//discard played card from hand
    #####:  910:		discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  911:		return 0;
        -:  912:
        -:  913:	case baron:
    #####:  914:		state->numBuys++;//Increase buys by 1!
    #####:  915:		if (choice1 > 0) {//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  916:			int p = 0;//Iterator for hand!
    #####:  917:			int card_not_discarded = 1;//Flag for discard set!
    #####:  918:			while (card_not_discarded) {
branch  0 never executed
branch  1 never executed
    #####:  919:				if (state->hand[currentPlayer][p] == estate) {//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  920:					state->coins += 4;//Add 4 coins to the amount of coins
    #####:  921:					state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  922:					state->discardCount[currentPlayer]++;
    #####:  923:					for (; p < state->handCount[currentPlayer]; p++) {
branch  0 never executed
branch  1 never executed
    #####:  924:						state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -:  925:					}
    #####:  926:					state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  927:					state->handCount[currentPlayer]--;
    #####:  928:					card_not_discarded = 0;//Exit the loop
        -:  929:				}
    #####:  930:				else if (p > state->handCount[currentPlayer]) {
branch  0 never executed
branch  1 never executed
        -:  931:					if (DEBUG) {
        -:  932:						printf("No estate cards in your hand, invalid choice\n");
        -:  933:						printf("Must gain an estate if there are any\n");
        -:  934:					}
    #####:  935:					if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  936:						gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  937:						state->supplyCount[estate]--;//Decrement estates
    #####:  938:						if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  939:							isGameOver(state);
call    0 never executed
        -:  940:						}
        -:  941:					}
    #####:  942:					card_not_discarded = 0;//Exit the loop
        -:  943:				}
        -:  944:
        -:  945:				else {
    #####:  946:					p++;//Next card
        -:  947:				}
        -:  948:			}
        -:  949:		}
        -:  950:
        -:  951:		else {
    #####:  952:			if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  953:				gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  954:				state->supplyCount[estate]--;//Decrement Estates
    #####:  955:				if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  956:					isGameOver(state);
call    0 never executed
        -:  957:				}
        -:  958:			}
        -:  959:		}
        -:  960:
        -:  961:
    #####:  962:		return 0;
        -:  963:
        -:  964:	case great_hall:
        -:  965:		//+1 Card
    #####:  966:		drawCard(currentPlayer, state);
call    0 never executed
        -:  967:
        -:  968:		//+1 Actions
    #####:  969:		state->numActions++;
        -:  970:
        -:  971:		//discard card from hand
    #####:  972:		discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  973:		return 0;
        -:  974:
        -:  975:	case minion:
        -:  976:		//+1 action
    #####:  977:		state->numActions++;
        -:  978:
        -:  979:		//discard card from hand
    #####:  980:		discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  981:
    #####:  982:		if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  983:		{
    #####:  984:			state->coins = state->coins + 2;
        -:  985:		}
        -:  986:
    #####:  987:		else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  988:		{
        -:  989:			//discard hand
    #####:  990:			while (numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  991:			{
    #####:  992:				discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  993:			}
        -:  994:
        -:  995:			//draw 4
    #####:  996:			for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  997:			{
    #####:  998:				drawCard(currentPlayer, state);
call    0 never executed
        -:  999:			}
        -: 1000:
        -: 1001:			//other players discard hand and redraw if hand size > 4
    #####: 1002:			for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1003:			{
    #####: 1004:				if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1005:				{
    #####: 1006:					if (state->handCount[i] > 4)
branch  0 never executed
branch  1 never executed
        -: 1007:					{
        -: 1008:						//discard hand
    #####: 1009:						while (state->handCount[i] > 0)
branch  0 never executed
branch  1 never executed
        -: 1010:						{
    #####: 1011:							discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1012:						}
        -: 1013:
        -: 1014:						//draw 4
    #####: 1015:						for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1016:						{
    #####: 1017:							drawCard(i, state);
call    0 never executed
        -: 1018:						}
        -: 1019:					}
        -: 1020:				}
        -: 1021:			}
        -: 1022:
        -: 1023:		}
    #####: 1024:		return 0;
        -: 1025:
        -: 1026:	case steward:
    #####: 1027:		if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1028:		{
        -: 1029:			//+2 cards
    #####: 1030:			drawCard(currentPlayer, state);
call    0 never executed
    #####: 1031:			drawCard(currentPlayer, state);
call    0 never executed
        -: 1032:		}
    #####: 1033:		else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1034:		{
        -: 1035:			//+2 coins
    #####: 1036:			state->coins = state->coins + 2;
        -: 1037:		}
        -: 1038:		else
        -: 1039:		{
        -: 1040:			//trash 2 cards in hand
    #####: 1041:			discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1042:			discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1043:		}
        -: 1044:
        -: 1045:		//discard card from hand
    #####: 1046:		discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1047:		return 0;
        -: 1048:
        -: 1049:	case tribute:
    #####: 1050:		if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 never executed
branch  1 never executed
    #####: 1051:			if (state->deckCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1052:				tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1053:				state->deckCount[nextPlayer]--;
        -: 1054:			}
    #####: 1055:			else if (state->discardCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####: 1056:				tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1057:				state->discardCount[nextPlayer]--;
        -: 1058:			}
        -: 1059:			else {
        -: 1060:				//No Card to Reveal
        -: 1061:				if (DEBUG) {
        -: 1062:					printf("No cards to reveal\n");
        -: 1063:				}
        -: 1064:			}
        -: 1065:		}
        -: 1066:
        -: 1067:		else {
    #####: 1068:			if (state->deckCount[nextPlayer] == 0) {
branch  0 never executed
branch  1 never executed
    #####: 1069:				for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1070:					state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1071:					state->deckCount[nextPlayer]++;
    #####: 1072:					state->discard[nextPlayer][i] = -1;
    #####: 1073:					state->discardCount[nextPlayer]--;
        -: 1074:				}
        -: 1075:
    #####: 1076:				shuffle(nextPlayer, state);//Shuffle the deck
call    0 never executed
        -: 1077:			}
    #####: 1078:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1079:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1080:			state->deckCount[nextPlayer]--;
    #####: 1081:			tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1082:			state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1083:			state->deckCount[nextPlayer]--;
        -: 1084:		}
        -: 1085:
    #####: 1086:		if (tributeRevealedCards[0] == tributeRevealedCards[1]) {//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1087:			state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1088:			state->playedCardCount++;
    #####: 1089:			tributeRevealedCards[1] = -1;
        -: 1090:		}
        -: 1091:
    #####: 1092:		for (i = 0; i <= 2; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1093:			if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold) {//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1094:				state->coins += 2;
        -: 1095:			}
        -: 1096:
    #####: 1097:			else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) {//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1098:				drawCard(currentPlayer, state);
call    0 never executed
    #####: 1099:				drawCard(currentPlayer, state);
call    0 never executed
        -: 1100:			}
        -: 1101:			else {//Action Card
    #####: 1102:				state->numActions = state->numActions + 2;
        -: 1103:			}
        -: 1104:		}
        -: 1105:
    #####: 1106:		return 0;
        -: 1107:
        -: 1108:	case ambassador:
    #####: 1109:		j = 0;		//used to check if player has enough cards to discard
        -: 1110:
    #####: 1111:		if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1112:		{
    #####: 1113:			return -1;
        -: 1114:		}
        -: 1115:
    #####: 1116:		if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1117:		{
    #####: 1118:			return -1;
        -: 1119:		}
        -: 1120:
    #####: 1121:		for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1122:		{
    #####: 1123:			if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1124:			{
    #####: 1125:				j++;
        -: 1126:			}
        -: 1127:		}
    #####: 1128:		if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1129:		{
    #####: 1130:			return -1;
        -: 1131:		}
        -: 1132:
        -: 1133:		if (DEBUG)
        -: 1134:			printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1135:
        -: 1136:		//increase supply count for choosen card by amount being discarded
    #####: 1137:		state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1138:
        -: 1139:		//each other player gains a copy of revealed card
    #####: 1140:		for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1141:		{
    #####: 1142:			if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1143:			{
    #####: 1144:				gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1145:			}
        -: 1146:		}
        -: 1147:
        -: 1148:		//discard played card from hand
    #####: 1149:		discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1150:
        -: 1151:		//trash copies of cards returned to supply
    #####: 1152:		for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1153:		{
    #####: 1154:			for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1155:			{
    #####: 1156:				if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1157:				{
    #####: 1158:					discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1159:					break;
        -: 1160:				}
        -: 1161:			}
        -: 1162:		}
        -: 1163:
    #####: 1164:		return 0;
        -: 1165:
        -: 1166:	case cutpurse:
        -: 1167:
    #####: 1168:		updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1169:		for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1170:		{
    #####: 1171:			if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1172:			{
    #####: 1173:				for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1174:				{
    #####: 1175:					if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1176:					{
    #####: 1177:						discardCard(j, i, state, 0);
call    0 never executed
    #####: 1178:						break;
        -: 1179:					}
    #####: 1180:					if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1181:					{
    #####: 1182:						for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1183:						{
        -: 1184:							if (DEBUG)
        -: 1185:								printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1186:						}
    #####: 1187:						break;
        -: 1188:					}
        -: 1189:				}
        -: 1190:
        -: 1191:			}
        -: 1192:
        -: 1193:		}
        -: 1194:
        -: 1195:		//discard played card from hand
    #####: 1196:		discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1197:
    #####: 1198:		return 0;
        -: 1199:
        -: 1200:
        -: 1201:	case embargo:
        -: 1202:		//+2 Coins
    #####: 1203:		state->coins = state->coins + 2;
        -: 1204:
        -: 1205:		//see if selected pile is in play
    #####: 1206:		if (state->supplyCount[choice1] == -1)
branch  0 never executed
branch  1 never executed
        -: 1207:		{
    #####: 1208:			return -1;
        -: 1209:		}
        -: 1210:
        -: 1211:		//add embargo token to selected supply pile
    #####: 1212:		state->embargoTokens[choice1]++;
        -: 1213:
        -: 1214:		//trash card
    #####: 1215:		discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1216:		return 0;
        -: 1217:
        -: 1218:	case outpost:
        -: 1219:		//set outpost flag
    #####: 1220:		state->outpostPlayed++;
        -: 1221:
        -: 1222:		//discard card
    #####: 1223:		discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1224:		return 0;
        -: 1225:
        -: 1226:	case salvager:
        -: 1227:		//+1 buy
    #####: 1228:		state->numBuys++;
        -: 1229:
    #####: 1230:		if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1231:		{
        -: 1232:			//gain coins equal to trashed card
    #####: 1233:			state->coins = state->coins + getCost(handCard(choice1, state));
call    0 never executed
call    1 never executed
        -: 1234:			//trash card
    #####: 1235:			discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1236:		}
        -: 1237:
        -: 1238:		//discard card
    #####: 1239:		discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1240:		return 0;
        -: 1241:
        -: 1242:	case sea_hag:
    #####: 1243:		for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1244:			if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1245:				state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1246:				state->discardCount[i]++;
    #####: 1247:				state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1248:			}
        -: 1249:		}
    #####: 1250:		return 0;
        -: 1251:
        -: 1252:	case treasure_map:
        -: 1253:		//search hand for another treasure_map
    #####: 1254:		index = -1;
    #####: 1255:		for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1256:		{
    #####: 1257:			if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1258:			{
    #####: 1259:				index = i;
    #####: 1260:				break;
        -: 1261:			}
        -: 1262:		}
    #####: 1263:		if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1264:		{
        -: 1265:			//trash both treasure cards
    #####: 1266:			discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1267:			discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1268:
        -: 1269:			//gain 4 Gold cards
    #####: 1270:			for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1271:			{
    #####: 1272:				gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1273:			}
        -: 1274:
        -: 1275:			//return success
    #####: 1276:			return 1;
        -: 1277:		}
        -: 1278:
        -: 1279:		//no second treasure_map found in hand
    #####: 1280:		return -1;
        -: 1281:	}
        -: 1282:
    #####: 1283:	return -1;
        -: 1284:}
        -: 1285:
function discardCard called 4 returned 100% blocks executed 78%
        4: 1286:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1287:{
        -: 1288:
        -: 1289:	//if card is not trashed, added to Played pile 
        4: 1290:	if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1291:	{
        -: 1292:		//add card to played pile
        4: 1293:		state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        4: 1294:		state->playedCardCount++;
        -: 1295:	}
        -: 1296:
        -: 1297:	//set played card to -1
        4: 1298:	state->hand[currentPlayer][handPos] = -1;
        -: 1299:
        -: 1300:	//remove card from player's hand
        4: 1301:	if (handPos == (state->handCount[currentPlayer] - 1)) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1302:	{
        -: 1303:		//reduce number of cards in hand
    #####: 1304:		state->handCount[currentPlayer]--;
        -: 1305:	}
        4: 1306:	else if (state->handCount[currentPlayer] == 1) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1307:	{
        -: 1308:		//reduce number of cards in hand
    #####: 1309:		state->handCount[currentPlayer]--;
        -: 1310:	}
        -: 1311:	else
        -: 1312:	{
        -: 1313:		//replace discarded card with last card in hand
        4: 1314:		state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1315:		//set last card to -1
        4: 1316:		state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1317:		//reduce number of cards in hand
        4: 1318:		state->handCount[currentPlayer]--;
        -: 1319:	}
        -: 1320:
        4: 1321:	return 0;
        -: 1322:}
        -: 1323:
function gainCard called 38 returned 100% blocks executed 70%
       38: 1324:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1325:{
        -: 1326:	//Note: supplyPos is enum of choosen card
        -: 1327:
        -: 1328:	//check if supply pile is empty (0) or card is not used in game (-1)
       38: 1329:	if (supplyCount(supplyPos, state) < 1)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1330:	{
    #####: 1331:		return -1;
        -: 1332:	}
        -: 1333:
        -: 1334:	//added card for [whoseTurn] current player:
        -: 1335:	// toFlag = 0 : add to discard
        -: 1336:	// toFlag = 1 : add to deck
        -: 1337:	// toFlag = 2 : add to hand
        -: 1338:
       38: 1339:	if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1340:	{
    #####: 1341:		state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1342:		state->deckCount[player]++;
        -: 1343:	}
       38: 1344:	else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1345:	{
    #####: 1346:		state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1347:		state->handCount[player]++;
        -: 1348:	}
        -: 1349:	else
        -: 1350:	{
       38: 1351:		state->discard[player][state->discardCount[player]] = supplyPos;
       38: 1352:		state->discardCount[player]++;
        -: 1353:	}
        -: 1354:
        -: 1355:	//decrease number in supply pile
       38: 1356:	state->supplyCount[supplyPos]--;
        -: 1357:
       38: 1358:	return 0;
        -: 1359:}
        -: 1360:
function updateCoins called 43 returned 100% blocks executed 100%
       43: 1361:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1362:{
        -: 1363:	int i;
        -: 1364:
        -: 1365:	//reset coin count
       43: 1366:	state->coins = 0;
        -: 1367:
        -: 1368:	//add coins for each Treasure card in player's hand
      268: 1369:	for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -: 1370:	{
      225: 1371:		if (state->hand[player][i] == copper)
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
        -: 1372:		{
       98: 1373:			state->coins += 1;
        -: 1374:		}
      127: 1375:		else if (state->hand[player][i] == silver)
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
        -: 1376:		{
       43: 1377:			state->coins += 2;
        -: 1378:		}
       84: 1379:		else if (state->hand[player][i] == gold)
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
        -: 1380:		{
       26: 1381:			state->coins += 3;
        -: 1382:		}
        -: 1383:	}
        -: 1384:
        -: 1385:	//add bonus
       43: 1386:	state->coins += bonus;
        -: 1387:
       43: 1388:	return 0;
        -: 1389:}
        -: 1390:
        -: 1391:
        -: 1392://end of dominion.c
        -: 1393:
