        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Ben Fisher
        -:    3: * fisheben@oregonstate.edu
        -:    4: * file: cardtest2.c
        -:    5: * Description: Skeleton taken from CS362 week4 module.
        -:    6: * Demonstration of how to write unit tests for dominion-base
        -:    7: * File tests the Dominion card village card effect, cardEffect function is
        -:    8: * implementated in the dominion.c file                                                     }
        -:    9: *
        -:   10: * Include the following lines in your makefile:
        -:   11: *
        -:   12: * cardtest2: cardtest2.c dominion.o rngs.o
        -:   13: *      gcc -o cardtest2 -g  cardtest2.c dominion.o rngs.o $(CFLAGS)
        -:   14: * -----------------------------------------------------------------------
        -:   15: */
        -:   16: 
        -:   17: /*
        -:   18: * Village CARD 
        -:   19: * No documentation in the implementation or the interface
        -:   20: * Description: Village Card is an action card that when played will give the player one extra
        -:   21: * card and 2 extra actions.  At the end of the turn the village card is discarded.
        -:   22: * Testing Requirements: 
        -:   23: * After the card has been played the village card is removed from the players hand at handPos
        -:   24: * After the card is played the player will get 1 new card in their hand
        -:   25: * After the card is player the player will get 2 more actions
        -:   26: * No other changes to the game state should occur.
        -:   27: * The players hand count should not change
        -:   28: * The players deck count should decrease by 1
        -:   29: * The players played cards count should increase by 1
        -:   30: * Player should be a number between 2 and MAX_PLAYERS
        -:   31: * If player has no cards in deck then no changes should be made to deck
        -:   32: case village:
        -:   33:      //+1 Card
        -:   34:      drawCard(currentPlayer, state);
        -:   35:			
        -:   36:      //+2 Actions
        -:   37:      state->numActions = state->numActions + 2;
        -:   38:			
        -:   39:      //discard played card from hand
        -:   40:      discardCard(handPos, currentPlayer, state, 0);
        -:   41:      return 0;
        -:   42: */
        -:   43:
        -:   44:#include "dominion.h"
        -:   45:#include "dominion_helpers.h"
        -:   46:#include <string.h>
        -:   47:#include <stdio.h>
        -:   48:#include <assert.h>
        -:   49:#include "rngs.h"
        -:   50:#include <stdlib.h>
        -:   51:
        -:   52:
        -:   53:#define TESTCARD "village"
        -:   54:#define TEST1 1
        -:   55:#define TEST2 2
        -:   56:#define TEST3 3
        -:   57:#define TEST4 4
        -:   58:#define TEST5 5
        -:   59:#define TEST6 6
        -:   60:#define TEST7 7
        -:   61:#define TEST8 8
        -:   62:
        -:   63://Function will initialize the gameState struct
        -:   64:int initializeMyGame(struct gameState *G, int actionCards[], int seed, int numPlayer);
        -:   65://Function will print the state of the test variable if error is found
        -:   66:void printState(struct gameState *pre, struct gameState *post, int hand[], int testHandCount, int z, 
        -:   67:        int treasure, int player, int test);
        -:   68:		
        -:   69:int noPlayerStateChanges(struct gameState *preCall, struct gameState *postCall, int p);
        -:   70:int noVictoryCardChanges(struct gameState *preCall, struct gameState *postCall, int p);
        -:   71:int noDominionCardChanges(struct gameState *preCall, struct gameState *postCall, int p, int deckSize);
        -:   72:
function main called 1 returned 100% blocks executed 59%
        1:   73:int main() {
        -:   74:	int i;//counter
        1:   75:    int seed = 1000; //used in rngs
        1:   76:    int numPlayer = 2;
        1:   77:	int choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0, cardPosition = 0;
        -:   78:    int p;//used to store player 
        -:   79:	
        1:   80:	int errorFlag1 = 0, errorFlag2 = 0, errorFlag3 = 0, errorFlag4 = 0, errorFlag5 = 0;
        1:   81:	int errorFlagP = 0, errorFlagV = 0, errorFlagD = 0;
        -:   82:	        
        -:   83:    struct gameState preCall;
        -:   84:    struct gameState postCall;
        -:   85:	
        1:   86:	const int CARDS_TOTAL = 10;
        -:   87:	
        -:   88:	//kingdom cards with no village
        1:   89:    int noVillageCards[10] = {adventurer, embargo, embargo, minion, mine, cutpurse,
        -:   90:		sea_hag, tribute, smithy, council_room};			
        -:   91:
        1:   92:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
call    0 returned 100%
        -:   93:	
        -:   94:	//test both players
        2:   95:    for (p = 1; p < numPlayer; p++){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:   96:				
        -:   97:		//test different hands
       10:   98:		for (i = 1; i < CARDS_TOTAL; i++){
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
        -:   99:		
        -:  100:			//test different village card positions in the hand
       54:  101:			for(cardPosition = 0; cardPosition < i; ++cardPosition){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  102:				
       45:  103:				initializeMyGame(&preCall, noVillageCards, seed++, numPlayer);           
call    0 returned 100%
        -:  104:				
        -:  105:				//****************running tests************************************									
        -:  106:                //set actions, coins and buys
       45:  107:                preCall.numActions = 0;
       45:  108:                preCall.numBuys = 0;
       45:  109:                preCall.coins = 0;
        -:  110:                //set played cards to zero	
       45:  111:                preCall.playedCardCount = 0;
        -:  112:                //set the correct turn
       45:  113:                preCall.whoseTurn = p;
        -:  114:				//set hand sizeof
       45:  115:				preCall.handCount[p] = i;
       45:  116:                preCall.trashCount = 0;
       45:  117:			    preCall.deckCount[p] = CARDS_TOTAL;               
       45:  118:                preCall.discardCount[p] = 0; 
       45:  119:                memcpy(preCall.hand[p], noVillageCards, sizeof(int) * CARDS_TOTAL);
        -:  120:            	//add village card into correct position
       45:  121:                preCall.hand[p][cardPosition] = village;
        -:  122:                //save state
       45:  123:				memcpy(&postCall, &preCall, sizeof(struct gameState));
        -:  124:			
       45:  125:                cardEffect(village, choice1, choice2, choice3, &postCall, cardPosition, &bonus);
call    0 returned 100%
        -:  126:				
       45:  127:				if((p == 0) && !errorFlagP){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  128:					if(noPlayerStateChanges(&preCall, &postCall, 1) < 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  129:						printState(&preCall, &postCall, preCall.hand[p], preCall.handCount[p], cardPosition, village, p, TEST6); 
call    0 never executed
    #####:  130:						errorFlagP = 1;
        -:  131:					}
       45:  132:				}else if(!errorFlagP){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       45:  133:					if(noPlayerStateChanges(&preCall, &postCall, 0) < 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  134:						printState(&preCall, &postCall, preCall.hand[p], preCall.handCount[p], cardPosition, village, p, TEST6); 
call    0 never executed
    #####:  135:						errorFlagP = 1;
        -:  136:					}
        -:  137:				}
        -:  138:				
       45:  139:				if(!errorFlagV && (noVictoryCardChanges(&preCall, &postCall, p) < 0) ){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  140:					printState(&preCall, &postCall, preCall.hand[p], preCall.handCount[p], cardPosition, village, p, TEST7); 
call    0 never executed
    #####:  141:					errorFlagV = 1;
        -:  142:				}
       45:  143:				if (!errorFlagD && (noDominionCardChanges(&preCall, &postCall, p, CARDS_TOTAL) < 0) ){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  144:					printState(&preCall, &postCall, preCall.hand[p], preCall.handCount[p], cardPosition, village, p, TEST8); 
call    0 never executed
    #####:  145:					errorFlagD = 1;
        -:  146:				}
        -:  147:				
       90:  148:				if(((postCall.handCount[p] != (preCall.handCount[p])) ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
       45:  149:                          (postCall.deckCount[p] != (preCall.deckCount[p] - 1))) && !errorFlag1){ 
branch  0 never executed
branch  1 never executed
    #####:  150:					printState(&preCall, &postCall, preCall.hand[p], preCall.handCount[p], cardPosition, village, p, TEST1); 
call    0 never executed
    #####:  151:					errorFlag1 = 1;
        -:  152:				}
        -:  153:				
        -:  154:				//test hand counts are correct 
        -:  155:				//assert(postCall.handCount[p] == (preCall.handCount[p]));					
        -:  156:			    	
        -:  157:                //test deck count is 1 smaller post call
        -:  158:                //assert(postCall.deckCount[p] == (preCall.deckCount[p] - 1));                
        -:  159:
       45:  160:				if(((postCall.hand[p][cardPosition] == village) || (preCall.hand[p][cardPosition] != village)) && !errorFlag2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
    #####:  161:					printState(&preCall, &postCall, preCall.hand[p], preCall.handCount[p], cardPosition, village, p, TEST2); 
call    0 never executed
    #####:  162:					errorFlag2 = 1;
        -:  163:				}
        -:  164:			
        -:  165:				//test village card has been removed successfully
        -:  166:				//assert(postCall.hand[p][cardPosition] != village);											   
        -:  167:			    //assert(preCall.hand[p][cardPosition] == village);
        -:  168:				
       45:  169:				if(postCall.numActions != (preCall.numActions + 2) && !errorFlag3){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  170:					printState(&preCall, &postCall, preCall.hand[p], preCall.handCount[p], cardPosition, village, p, TEST3); 
call    0 never executed
    #####:  171:					errorFlag3 = 1;
        -:  172:				}
        -:  173:				
        -:  174:				//test number of actions are correct 
        -:  175:				//assert(postCall.numActions == (preCall.numActions + 2));
        -:  176:				
       45:  177:				if(postCall.playedCardCount != (preCall.playedCardCount + 1) && !errorFlag4){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  178:					printState(&preCall, &postCall, preCall.hand[p], preCall.handCount[p], cardPosition, village, p, TEST4); 
call    0 never executed
    #####:  179:					errorFlag4 = 1;
        -:  180:				}
        -:  181:				
        -:  182:				//test number of playcardCount is correct 
        -:  183:				//assert(postCall.playedCardCount == (preCall.playedCardCount + 1));
        -:  184:
        -:  185:				//test no other changes occured to game state										
       45:  186:                preCall.deckCount[p] -= 1;
       45:  187:				preCall.numActions += 2;
       45:  188:                preCall.playedCardCount += 1;
        -:  189:                
        -:  190:                //deck has been shuffled so need to copy over to preCall
       45:  191:				memcpy(&preCall.hand[p], &postCall.hand[p], sizeof(int) * MAX_HAND);
        -:  192:				//memcpy(&preCall.deck[p], &postCall.deck[p], sizeof(int) * MAX_DECK);
        -:  193:				//memcpy(&preCall.discard[p], &postCall.discard[p], sizeof(int) * MAX_DECK);
       45:  194:				memcpy(&preCall.playedCards, &postCall.playedCards, sizeof(int) * MAX_DECK);
        -:  195:				
       45:  196:				if(memcmp(&preCall, &postCall, sizeof(struct gameState)) != 0 && ! errorFlag5){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
        1:  197:					printState(&preCall, &postCall, preCall.hand[p], preCall.handCount[p], cardPosition, village, p, TEST5); 
call    0 returned 100%
        1:  198:					errorFlag5 = 1;
        -:  199:				}
        -:  200:				//assert(memcmp(&preCall, &postCall, sizeof(struct gameState)) == 0);	
        -:  201:			}
        -:  202:		}	
        -:  203:	}	
        -:  204:
        1:  205:	if(!errorFlag1 && !errorFlag2 && !errorFlag3 && !errorFlag4 && !errorFlag5 &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 never executed
branch 11 never executed
    #####:  206:		!errorFlagP && ! errorFlagV && ! errorFlagD ){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  207:		printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
call    0 never executed
        -:  208:	}else{
        1:  209:		printf("\n >>>>> FAILURES DETECTED: Examine test cases %s <<<<<\n\n", TESTCARD);
call    0 returned 100%
        -:  210:	}
        -:  211:
        1:  212:	return 0;
        -:  213:}
        -:  214:
function initializeMyGame called 45 returned 100% blocks executed 100%
       45:  215:int initializeMyGame(struct gameState *G, int actionCards[], int seed, int numPlayer){
        -:  216:	
       45:  217:		memset(G, 23, sizeof(struct gameState));   // clear the game state
       45:  218:        return initializeGame(numPlayer, actionCards, seed, G); // initialize a new game
call    0 returned 100%
        -:  219:}
        -:  220:
function printState called 1 returned 100% blocks executed 100%
        1:  221:void printState(struct gameState *pre, struct gameState *post, int hand[], int testHandCount, int cardPosition, 
        -:  222:        int treasure, int player, int test){
        -:  223:	
        1:  224:	printf("Error found in %s, %d\n", TESTCARD, test );
call    0 returned 100%
        1:  225:	printf("\tpost.whoseTurn = %d pre.whoseTurn = %d\n", post->whoseTurn, pre->whoseTurn );   
call    0 returned 100%
        1:  226:    printf("\tpost.numBuys = %d pre.numBuys = %d\n", post->numBuys, pre->numBuys );   
call    0 returned 100%
        1:  227:    printf("\tpost.NumAction = %d pre.NumActions = %d\n", post->numActions, pre->numActions );
call    0 returned 100%
        1:  228:    printf("\tpost.Coins = %d pre.Coins = %d\n", post->coins, pre->coins);
call    0 returned 100%
        1:  229:	printf("\tpost.HandCount = %d  pre.HandCount = %d\n", post->handCount[player], pre->handCount[player]);
call    0 returned 100%
        1:  230:	printf("\tcardPosition = %d  \n", cardPosition);
call    0 returned 100%
        1:  231:    printf("\tpreCall.hand[p][cardPosition] = %d\n", pre->hand[player][cardPosition]);	 
call    0 returned 100%
        1:  232:    printf("\tpost.playedCardCount = %d pre.playedCardCount = %d\n", post->playedCardCount, pre->playedCardCount);
call    0 returned 100%
        1:  233:    printf("\tpost.playCards[0] = %d pre.playedCards[0] = %d\n", 
call    0 returned 100%
        -:  234:            post->playedCards[0], pre->playedCards[0]);
        1:  235:    printf("\tpost.discardCount[p] = %d pre.discardCount[p] = %d\n", post->discardCount[player], pre->discardCount[player]); 
call    0 returned 100%
        1:  236:    printf("\tpost.deckCount[p] = %d pre.deckCount[p] = %d\n", post->deckCount[player], pre->deckCount[player]);
call    0 returned 100%
        1:  237:	printf("\ttreasure = %d Player = %d\n\n", treasure, player); 
call    0 returned 100%
        1:  238:}
        -:  239:
function noPlayerStateChanges called 45 returned 100% blocks executed 40%
       45:  240:int noPlayerStateChanges(struct gameState *preCall, struct gameState *postCall, int p){
        -:  241:    //int i = 0;	
        -:  242:	//test no other changes occured to game state	
       45:  243:	if(preCall->deckCount[p] != postCall->deckCount[p]){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  244:		printf("ERROR noPlayerStateChanges DECKCOUNT's off\n");
call    0 never executed
    #####:  245:		return -1;
        -:  246:	}
       45:  247:	if(preCall->discardCount[p] != postCall->discardCount[p]){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  248:		printf("ERROR noPlayerStateChanges DISCARDCOUNT's off\n");
call    0 never executed
    #####:  249:		return -1;
        -:  250:	}
       45:  251:	if(preCall->handCount[p] != postCall->handCount[p]){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  252:		printf("ERROR noPlayerStateChanges HANDCOUNT's off\n");
call    0 never executed
    #####:  253:		return -1;
        -:  254:	}
       45:  255:	if(memcmp(&preCall->deck[p], &postCall->deck[p], MAX_DECK) != 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  256:		printf("ERROR noPlayerStateChanges DECK is off\n");
call    0 never executed
        -:  257:
        -:  258:		//for testing
        -:  259:        //for(i=0; i < MAX_DECK ; ++i){
        -:  260:        //    printf("\tpreCall-deck[%d][%d] = %d, postCall-deck[%d][%d] = %d\n",p, i, preCall->deck[p][i], p, i, postCall->deck[p][i]);
        -:  261:        //}
        -:  262:
    #####:  263:		return -1;
        -:  264:	}
       45:  265:	if(memcmp(&preCall->discard[p], &postCall->discard[p], MAX_DECK) != 0){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  266:		printf("ERROR noPlayerStateChanges DISCARD DECK is off\n");
call    0 never executed
    #####:  267:		return -1;
        -:  268:	}
       45:  269:	if(memcmp(&preCall->hand[p], &postCall->hand[p], MAX_HAND) != 0){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  270:		printf("ERROR noPlayerStateChanges HAND is off\n");
call    0 never executed
    #####:  271:		return -1;
        -:  272:	}
       45:  273:	return 0;
        -:  274:}
        -:  275:
function noVictoryCardChanges called 45 returned 100% blocks executed 71%
       45:  276:int noVictoryCardChanges(struct gameState *preCall, struct gameState *postCall, int p){
       45:  277:	if(scoreFor(p, preCall) != scoreFor(p, postCall)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  278:		printf("ERROR noVictoryCardChanges\n");
call    0 never executed
    #####:  279:		return -1;
        -:  280:	}
       45:  281:	return 0;
        -:  282:}
        -:  283:
function noDominionCardChanges called 45 returned 100% blocks executed 60%
       45:  284:int noDominionCardChanges(struct gameState *preCall, struct gameState *postCall, int p, int deckSize){
       45:  285:	if(memcmp(&preCall->deck[p], &postCall->deck[p], sizeof(int) *  deckSize) != 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  286:		printf("ERROR noDominionCardChanges\n");
call    0 never executed
    #####:  287:		return -1;
        -:  288:	}
       45:  289:	return 0;
        -:  290:}
