        -:    0:Source:randomtestcard.c
        -:    0:Graph:randomtestcard.gcno
        -:    0:Data:randomtestcard.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Ben Fisher
        -:    3: * fisheben@oregonstate.edu
        -:    4: * file: randomtestcard.c
        -:    5: * Description: Demonstration of how to write random test for dominion-base
        -:    6: * File tests the Dominion card smithy card effect for correct functionality, cardEffect function is
        -:    7: * implementated in the dominion.c file.      
        -:    8: *
        -:    9: * Include the following lines in your makefile:
        -:   10: *
        -:   11: * randomtestcard: randomtestcard.c dominion.o rngs.o
        -:   12: *      gcc -o randomtestcard -g  randomtestcard.c dominion.o rngs.o $(CFLAGS)
        -:   13: * -----------------------------------------------------------------------
        -:   14: */
        -:   15: 
        -:   16:  /*
        -:   17: * SMITHY CARD 
        -:   18: * No documentation in the implementation or the interface
        -:   19: * Description: Smithy Card is an action card that when played gives the player 3 more cards.
        -:   20: * Testing Requirements: 
        -:   21: * After the card has been played the smithy card is removed from the players hand at handPos
        -:   22: * After the card is played the player get 3 new cards in their hand
        -:   23: * No other changes to the game state should occur.
        -:   24: * The players hand count should increase by 2
        -:   25: * The players deck count should decrease by 3
        -:   26: * Player should be a number between 2 and MAX_PLAYERS
        -:   27: * If player has no cards in deck then no changes should be made to deck
        -:   28: int mySmithy(struct gameState *state, int currentPlayer, int handPos){
        -:   29:	//+3 Cards
        -:   30:	int i;
        -:   31:	for (i = 0; i < 3; i++)
        -:   32:	{
        -:   33:		drawCard(currentPlayer, state);
        -:   34:	}
        -:   35:		
        -:   36:	//discard card from hand	
        -:   37:	discardCard(handPos, currentPlayer, state, 0);
        -:   38:	return 0;
        -:   39:}
        -:   40: */
        -:   41:
        -:   42:#include "dominion.h"
        -:   43:#include "dominion_helpers.h"
        -:   44:#include <string.h>
        -:   45:#include <stdio.h>
        -:   46:#include <assert.h>
        -:   47:#include "rngs.h"
        -:   48:#include <stdlib.h>
        -:   49:#include <math.h>
        -:   50:#include <time.h>
        -:   51:
        -:   52:
        -:   53:#define TESTCARD "smithy"
        -:   54:#define TEST1 1
        -:   55:#define TEST2 2
        -:   56:#define TEST3 3
        -:   57:#define TEST4 4
        -:   58:#define TEST5 5
        -:   59:#define TEST6 6
        -:   60:#define TEST7 7
        -:   61:#define TEST8 8
        -:   62:#define TEST9 9
        -:   63:#define TEST10 10
        -:   64:#define TEST11 11
        -:   65:#define TEST12 12
        -:   66:
        -:   67://used in the qsort function
function adCompare called 1077103192 returned 100% blocks executed 100%
1077103192:   68:int adCompare(const void* a, const void* b) {
1077103192:   69:  if (*(int*)a > *(int*)b)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
540914584:   70:    return 1;
536188608:   71:  if (*(int*)a < *(int*)b)
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
230936330:   72:    return -1;
305252278:   73:  return 0;
        -:   74:}
        -:   75:
        -:   76://Function will initialize a Random gameState struct, this is the random test case generator
        -:   77:int initializeRandomGame(struct gameState *preCall, struct gameState *postCall, int * deckSize, int * cardPosition, int * discardSize);
        -:   78:
        -:   79:int smithyOracle(struct gameState *G, struct gameState *postCall, int p, int cardPosition, int deckSize, int numTreasInDeck);
        -:   80:
        -:   81://function will simulate the smithy card changes
        -:   82:void mockCardEffect(struct gameState *G, int cardPosition);
        -:   83:
        -:   84://Function will print the state of the test variable if error is found
        -:   85:void printState(struct gameState *pre, struct gameState *post, int card, 
        -:   86:        int treasure, int player, int test);
        -:   87:		
        -:   88:int noPlayerStateChanges(struct gameState *preCall, struct gameState *postCall);
        -:   89:int noVictoryCardChanges(struct gameState *preCall, struct gameState *postCall, int p);
        -:   90:int noDominionCardChanges(struct gameState *preCall, struct gameState *postCall, int p, int deckSize);
        -:   91:
        -:   92://error flags	
        -:   93:int errorFlag1 = 0, errorFlag2 = 0, errorFlag3 = 0, errorFlag4 = 0, errorFlag5 = 0, errorFlag6 = 0, errorFlag7 = 0;	
        -:   94:int errorFlagP = 0, errorFlagV = 0, errorFlagD = 0;
        -:   95:
function main called 1 returned 100% blocks executed 81%
        1:   96:int main() {
        -:   97:	int i;//counter
        -:   98:	int deckSize;
        -:   99:	int cardPosition;
        -:  100:	int numTreasInDeck;
        -:  101:	int discardSize;    
        -:  102:	        
        -:  103:    struct gameState preCall;
        -:  104:    struct gameState postCall;			
        -:  105:    
        -:  106:    time_t t;
        -:  107:
        1:  108:    srand((unsigned) time(&t));
call    0 returned 100%
call    1 returned 100%
        -:  109:
        1:  110:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
call    0 returned 100%
   300001:  111:	for(i = 0; i < 300000; ++i){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   300000:  112:		numTreasInDeck = initializeRandomGame(&preCall, &postCall, &cardPosition, &deckSize, &discardSize);
call    0 returned 100%
   300000:  113:		smithyOracle(&preCall, &postCall, preCall.whoseTurn, cardPosition, deckSize, numTreasInDeck);    
call    0 returned 100%
        -:  114:	}
        -:  115:	
        1:  116:    printf("Random testing complete.\nExecuted %d random tests.", i);
call    0 returned 100%
        -:  117:
        1:  118:	if(!errorFlag1 && !errorFlag2 && !errorFlag3 && !errorFlag4 && !errorFlag5 && !errorFlagP && ! errorFlagV && ! errorFlagD ){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
    #####:  119:		printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
call    0 never executed
        -:  120:	}else{
        1:  121:		printf("\n >>>>> FAILURES DETECTED: Examine test cases %s <<<<<\n\n", TESTCARD);
call    0 returned 100%
        -:  122:	}
        -:  123:
        1:  124:	return 0;
        -:  125:}
        -:  126:
function initializeRandomGame called 300000 returned 100% blocks executed 100%
   300000:  127:int initializeRandomGame(struct gameState *preCall, struct gameState *postCall, int *deckSize, int *cardPosition, int *discardSize){
        -:  128:	
   300000:  129:		int i = 0;
        -:  130:		
   300000:  131:		int numTreasInDeck = 0;		
        -:  132:		
        -:  133:		//set a random number of players
   300000:  134:		int randP = rand() % MAX_PLAYERS; 
call    0 returned 100%
   300000:  135:		randP = (randP < 2) ? MAX_PLAYERS : randP;		
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  136:		
        -:  137:		//set deck size
   300000:  138:		*deckSize = rand() % MAX_DECK;
call    0 returned 100%
   300000:  139:		*deckSize = (*deckSize < 10) ? MAX_DECK : *deckSize;		
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
        -:  140:		
        -:  141:		//all possible cards with extra treasure cards
   300000:  142:		int allCards[33] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:  143:		sea_hag, tribute, smithy, council_room, curse, estate, duchy, province, 
        -:  144:		feast, gardens, remodel, baron, great_hall, steward, outpost, salvager, treasure_map,
        -:  145:		ambassador, copper, silver, gold, copper, silver, gold, copper, silver, gold };		
        -:  146:						
        -:  147:		//set a deck of random cards
   300000:  148:		int randomDeck[*deckSize];		
        -:  149:		
 78203426:  150:		for(i = 0; i < *deckSize; ++i){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
 77903426:  151:			randomDeck[i] = allCards[rand() % 33];
call    0 returned 100%
        -:  152:      
148732072:  153:			if(	randomDeck[i] == copper ||
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
branch  2 taken 90% (fallthrough)
branch  3 taken 10%
134574122:  154:				randomDeck[i] == silver ||
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
 63745476:  155:				randomDeck[i] == gold ){
 21235135:  156:					++numTreasInDeck;
        -:  157:			}
        -:  158:		}		
        -:  159:				     
        -:  160:		//set discard deck size
   300000:  161:		int maxDiscard = MAX_DECK - *deckSize;		
        -:  162:
   300000:  163:        maxDiscard = (maxDiscard == 0) ? 1 : maxDiscard;
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
        -:  164:        
   300000:  165:		*discardSize = rand() % maxDiscard;
call    0 returned 100%
        -:  166:		
        -:  167:		//set a deck of random discard deck
        -:  168:		//set a deck of random cards
   300000:  169:		int randomDiscardDeck[*discardSize];		
        -:  170:		
 36153300:  171:		for(i = 0; i < (*discardSize); ++i){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
 35853300:  172:			randomDiscardDeck[i] = allCards[rand() % 33];				
call    0 returned 100%
        -:  173:		}
        -:  174:						
   300000:  175:		memset(preCall, 23, sizeof(struct gameState));   // clear the game state
   300000:  176:        initializeGame(randP, randomDeck, 1000, preCall); // initialize a new game
call    0 returned 100%
        -:  177:		
        -:  178:		//****************SET RANDOM STARTING VALUES***********				
   300000:  179:        preCall->trashCount = 0;
        -:  180:        //set actions
   300000:  181:        preCall->numActions = 1;
        -:  182:        //set coins
   300000:  183:        preCall->coins = 0;
        -:  184:        //set buys
   300000:  185:        preCall->numBuys = 1;
        -:  186:        //set playedcard
   300000:  187:        preCall->playedCardCount = 0;    
        -:  188:		//set random turn
   300000:  189:		int p = rand() % randP;	
call    0 returned 100%
   300000:  190:		preCall->whoseTurn = p;
        -:  191:		
        -:  192:		//set number of players
   300000:  193:		preCall->numPlayers = randP;
        -:  194:				
        -:  195:		//set hand size
   300000:  196:		preCall->handCount[p] = rand() % MAX_HAND ;			
call    0 returned 100%
        -:  197:		
        -:  198:		//set a random hand
   300000:  199:		int randomHand[preCall->handCount[p]];		
        -:  200:		
 75222973:  201:		for(i = 0; i < preCall->handCount[p]; ++i){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
 74922973:  202:			randomHand[i] = allCards[rand() % 33];			
call    0 returned 100%
        -:  203:		}
        -:  204:		
        -:  205:		//set the random card position
   300000:  206:        int pos = (preCall->handCount[p] == 0) ? 1 : preCall->handCount[p];
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
   300000:  207:		*cardPosition = rand() % pos;
call    0 returned 100%
        -:  208:		
        -:  209:		//set deck count
   300000:  210:		preCall->deckCount[p] = *deckSize;           
        -:  211:		
        -:  212:		//set the discard count
   300000:  213:		preCall->discardCount[p] = *discardSize;
        -:  214:		       
        -:  215:		//copy random deck into players deck
   300000:  216:		memcpy(preCall->deck[p], randomDeck, sizeof(int) * preCall->deckCount[p]);
        -:  217:		//copy random discard deck into players discard deck
   300000:  218:		memcpy(preCall->discard[p], randomDiscardDeck, sizeof(int) * preCall->discardCount[p]);
        -:  219:		//copy random hand into players hand
   300000:  220:		memcpy(preCall->hand[p], randomHand, sizeof(int) * preCall->handCount[p]);		
        -:  221:		//add smithy card into correct position
   300000:  222:		preCall->hand[p][(*cardPosition)] = smithy;
        -:  223:		//save the state
   300000:  224:		memcpy(postCall, preCall, sizeof(struct gameState));//save game state before calling discardCard	
        -:  225:		
        -:  226:		//return the number of treasure cards in the deck
   300000:  227:		return numTreasInDeck;
        -:  228:}
        -:  229:
function printState called 2 returned 100% blocks executed 87%
        2:  230:void printState(struct gameState *pre, struct gameState *post, int card, 
        -:  231:        int treasure, int player, int test){
        -:  232:	
        2:  233:	printf("Error found in %s, %d\n", TESTCARD, test );
call    0 returned 100%
        2:  234:	printf("\tpost.whoseTurn = %d pre.whoseTurn = %d\n", post->whoseTurn, pre->whoseTurn );   
call    0 returned 100%
        2:  235:    printf("\tpost.numBuys = %d pre.numBuys = %d\n", post->numBuys, pre->numBuys );   
call    0 returned 100%
        2:  236:    printf("\tpost.NumAction = %d pre.NumActions = %d\n", post->numActions, pre->numActions );
call    0 returned 100%
        2:  237:    printf("\tpost.Coins = %d pre.Coins = %d\n", post->coins, pre->coins);
call    0 returned 100%
        2:  238:	printf("\tpost.HandCount = %d  pre.HandCount = %d\n", post->handCount[player], pre->handCount[player]);
call    0 returned 100%
        2:  239:	if(card > -1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  240:		printf("\tcard = %d  \n", card);
call    0 never executed
    #####:  241:		printf("\tpreCall.hand[p][card] = %d\n", pre->hand[player][card]);	 
call    0 never executed
        -:  242:	}
        2:  243:    printf("\tpost.playedCardCount = %d pre.playedCardCount = %d\n", post->playedCardCount, pre->playedCardCount);
call    0 returned 100%
        2:  244:    printf("\tpost.playCards[0] = %d pre.playedCards[0] = %d\n", 
call    0 returned 100%
        -:  245:            post->playedCards[0], pre->playedCards[0]);
        2:  246:    printf("\tpost.discardCount[p] = %d pre.discardCount[p] = %d\n", post->discardCount[player], pre->discardCount[player]); 
call    0 returned 100%
        2:  247:    printf("\tpost.deckCount[p] = %d pre.deckCount[p] = %d\n", post->deckCount[player], pre->deckCount[player]);
call    0 returned 100%
        2:  248:	printf("\ttreasure cards in deck = %d Player = %d\n\n", treasure, player); 
call    0 returned 100%
        2:  249:}
        -:  250:
function noPlayerStateChanges called 300000 returned 100% blocks executed 50%
   300000:  251:int noPlayerStateChanges(struct gameState *preCall, struct gameState *postCall){
   300000:  252:    int p = 0;	
        -:  253:	//test no other changes occured to game state	
   637169:  254:	for(p = 0; p < preCall->numPlayers && (p != preCall->whoseTurn); ++p){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 53%
branch  3 taken 47% (fallthrough)
   337169:  255:		if(preCall->deckCount[p] != postCall->deckCount[p]){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  256:			printf("ERROR noPlayerStateChanges DECKCOUNT's off\n");
call    0 never executed
    #####:  257:			return -1;
        -:  258:		}
   337169:  259:		if(preCall->discardCount[p] != postCall->discardCount[p]){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  260:			printf("ERROR noPlayerStateChanges DISCARDCOUNT's off\n");
call    0 never executed
    #####:  261:			return -1;
        -:  262:		}
   337169:  263:		if(preCall->handCount[p] != postCall->handCount[p]){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  264:			printf("ERROR noPlayerStateChanges HANDCOUNT's off\n");
call    0 never executed
    #####:  265:			return -1;
        -:  266:		}
   337169:  267:		if(memcmp(&preCall->deck[p], &postCall->deck[p], MAX_DECK) != 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  268:			printf("ERROR noPlayerStateChanges DECK is off\n");
call    0 never executed
        -:  269:
    #####:  270:			return -1;
        -:  271:		}
   337169:  272:		if(memcmp(&preCall->discard[p], &postCall->discard[p], MAX_DECK) != 0){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  273:			printf("ERROR noPlayerStateChanges DISCARD DECK is off\n");
call    0 never executed
    #####:  274:			return -1;
        -:  275:		}
   337169:  276:		if(memcmp(&preCall->hand[p], &postCall->hand[p], MAX_HAND) != 0){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  277:			printf("ERROR noPlayerStateChanges HAND is off\n");
call    0 never executed
    #####:  278:			return -1;
        -:  279:		}
        -:  280:	}
   300000:  281:	return 0;
        -:  282:}
        -:  283:
function noVictoryCardChanges called 300000 returned 100% blocks executed 71%
   300000:  284:int noVictoryCardChanges(struct gameState *preCall, struct gameState *postCall, int p){
   300000:  285:	if(scoreFor(p, preCall) != scoreFor(p, postCall)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  286:		printf("ERROR noVictoryCardChanges\n");
call    0 never executed
    #####:  287:		return -1;
        -:  288:	}
   300000:  289:	return 0;
        -:  290:}
        -:  291:
function noDominionCardChanges called 300000 returned 100% blocks executed 60%
   300000:  292:int noDominionCardChanges(struct gameState *preCall, struct gameState *postCall, int p, int deckSize){
   300000:  293:	if(memcmp(&preCall->deck[p], &postCall->deck[p], sizeof(int) *  deckSize) != 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  294:		printf("ERROR noDominionCardChanges\n");
call    0 never executed
    #####:  295:		return -1;
        -:  296:	}
   300000:  297:	return 0;
        -:  298:}
        -:  299:
        -:  300://treasure is the number of treasure cards in the deck
        -:  301://function returns the result of the test, 0 = pass, 1 = fail
function smithyOracle called 300000 returned 100% blocks executed 57%
   300000:  302:int smithyOracle(struct gameState *preCall, struct gameState *postCall, int p, int cardPosition, int deckSize, int treasure ){
   300000:  303:    int result = 0;	
   300000:  304:	int choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;	
   300000:  305:	int card = -1;
        -:  306:	
        -:  307:	//**********************************running tests**********************************************	          
        -:  308:	
        -:  309:    //for testing    
        -:  310:	//printState(preCall, postCall, card, treasure, p, TEST1);
        -:  311:    //printf("INITIAL GAME STATES******\n");
   300000:  312:    cardEffect(smithy, choice1, choice2, choice3, postCall, cardPosition, &bonus);
call    0 returned 100%
        -:  313:
        -:  314:    //for testing    
        -:  315:	//printState(preCall, postCall, card, treasure, p, TEST1);
        -:  316:    //printf("AFTER CALL TO CARD EFFECT******\n");
   300000:  317:	mockCardEffect(preCall, cardPosition);//will simulate the smithy card function
call    0 returned 100%
        -:  318:
        -:  319:	
        -:  320:	//**********************************TEST #1****************************************************	          	
        -:  321:	//hand count should be the same
   300000:  322:	if((postCall->handCount[p] != preCall->handCount[p]) && !errorFlag1){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  323:		printState(preCall, postCall, card, treasure, p, TEST1); 
call    0 never executed
    #####:  324:		result = errorFlag1 = 1;
        -:  325:	}
        -:  326:				
        -:  327:	//**********************************TEST #2****************************************************
        -:  328:	//deck count should be -2 in all cases where there are 2 treasure cards in deck
   300000:  329:	if((postCall->deckCount[p] != preCall->deckCount[p]) && !errorFlag2){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  330:		printState(preCall, postCall, card, treasure, p, TEST2); 
call    0 never executed
    #####:  331:		result = errorFlag2 = 1;
        -:  332:	}	
        -:  333:               
        -:  334:	//**********************************TEST #3****************************************************
        -:  335:	//discard count should not change with no shuffling	
   300000:  336:	if((postCall->discardCount[p] != preCall->discardCount[p]) && !errorFlag3){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  337:		printState(preCall, postCall, card, treasure, p, TEST3); 
call    0 never executed
    #####:  338:		result  = errorFlag3 = 1;
        -:  339:	}
        -:  340:
        -:  341:	//**********************************TEST #4****************************************************
        -:  342:	//test that the played card counts are the same, need to address shuffling
   300000:  343:	if(postCall->playedCardCount != (preCall->playedCardCount) && !errorFlag4){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  344:		printState(preCall, postCall, card, treasure, p, TEST4); 
call    0 never executed
    #####:  345:		result = errorFlag4 = 1;
        -:  346:	}
        -:  347:	
        -:  348:	//**********************************TEST #5****************************************************
        -:  349:	//test the smithy card was discarded properly
   300000:  350:	if(((postCall->hand[p][cardPosition] == smithy) ) && !errorFlag5){ 
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        1:  351:		printState(preCall, postCall, card, treasure, p, TEST5); 
call    0 returned 100%
        1:  352:		result = errorFlag5 = 1;
        -:  353:	}
        -:  354:	
        -:  355:	//**********************************TEST #6****************************************************
        -:  356:	//test no unexpected changes to hand for unshuffled deck
   300000:  357:	if((memcmp(preCall->hand[p], postCall->hand[p], sizeof(int) * postCall->handCount[p] ) != 0 ) && !errorFlag6){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  358:		printState(preCall, postCall, card, treasure, p, TEST6); 
call    0 never executed
    #####:  359:		result = errorFlag6 = 1;
        -:  360:	}	
        -:  361: 					
        -:  362:	//**********************************TEST #P****************************************************	
        -:  363:	//test no other change to other players
   300000:  364:	if(!errorFlagP && noPlayerStateChanges(preCall, postCall) < 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  365:		printState(preCall, postCall, card, treasure, p, TEST9); 
call    0 never executed
    #####:  366:		result = errorFlagP = 1;
        -:  367:	}
        -:  368:	
        -:  369:	//**********************************TEST #V****************************************************
        -:  370:	//test no changes to victory cards
   300000:  371:	if(!errorFlagV && (noVictoryCardChanges(preCall, postCall, p) < 0) ){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  372:		printState(preCall, postCall, card, treasure, p, TEST10); 
call    0 never executed
    #####:  373:		result = errorFlagV = 1;
        -:  374:	}
        -:  375:	
        -:  376:	//**********************************TEST #D****************************************************
        -:  377:	//test no changes to dominion cards
   300000:  378:	qsort ((void*)(preCall->deck[p]), preCall->deckCount[p], sizeof(int), adCompare);
call    0 returned 100%
   300000:  379:	qsort ((void*)(postCall->deck[p]), postCall->deckCount[p], sizeof(int), adCompare);
call    0 returned 100%
   300000:  380:	if (!errorFlagD && (noDominionCardChanges(preCall, postCall, p, deckSize) < 0)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
        -:  381:		//sort decks first		
    #####:  382:		printState(preCall, postCall, card, treasure, p, TEST11); 
call    0 never executed
    #####:  383:		result = errorFlagD = 1;
        -:  384:	}
        -:  385:	
        -:  386:	//**********************************TEST #7****************************************************
        -:  387:	//test no unexpected changes to game state 
        -:  388:	//copy random deck into players deck
   300000:  389:	memcpy(preCall->deck[p], postCall->deck[p], sizeof(int) * (deckSize));
   300000:  390:	memcpy(preCall->discard[p], postCall->discard[p], sizeof(int) * postCall->discardCount[p]);
   300000:  391:	memcpy(preCall->hand[p], postCall->hand[p], sizeof(int) * postCall->handCount[p]);
        -:  392:	
   300000:  393:	preCall->discardCount[p] = postCall->discardCount[p];
   300000:  394:	if(memcmp(&preCall, &postCall, sizeof(struct gameState)) != 0 && !errorFlag7){ 			
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        1:  395:		printState(preCall, postCall, card, treasure, p, TEST7);
call    0 returned 100%
        1:  396:		result = errorFlag7 = 1;
        -:  397:	}
        -:  398:	  
   300000:  399:	return result;
        -:  400:}
        -:  401:
        -:  402:
        -:  403://Function simulates the smithy card
function mockCardEffect called 300000 returned 100% blocks executed 100%
   300000:  404:void mockCardEffect(struct gameState *preCall, int cardPosition){
        -:  405:	//+3 Cards
        -:  406:	int i;
  1200000:  407:	for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  408:	{
   900000:  409:		drawCard(preCall->whoseTurn, preCall);
call    0 returned 100%
        -:  410:	}
        -:  411:		
        -:  412:	//discard the smithy card
   300000:  413:	discardCard(cardPosition, preCall->whoseTurn, preCall, 0);
call    0 returned 100%
   300000:  414:}
