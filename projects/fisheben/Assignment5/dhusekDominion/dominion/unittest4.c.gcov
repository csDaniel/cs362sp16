        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Ben Fisher
        -:    3: * fisheben@oregonstate.edu
        -:    4: * file: unittest4.c
        -:    5: * Description: Skeleton taken from CS362 week4 module.
        -:    6: * Demonstration of how to write unit tests for dominion-base
        -:    7: * File tests the getCost function in the dominion_helpers.h interface
        -:    8: * implementation is in the dominion.c file
        -:    9: *
        -:   10: * Include the following lines in your makefile:
        -:   11: *
        -:   12: * unittest4: unittest4.c dominion.o rngs.o
        -:   13: *      gcc -o unittest4 -g  unittest4.c dominion.o rngs.o $(CFLAGS)
        -:   14: * -----------------------------------------------------------------------
        -:   15: */
        -:   16: 
        -:   17: /*
        -:   18: * GET COST FUNCTION
        -:   19: * No documentation in the implementation or the interface
        -:   20: * Description: Function getCost will return the cost a card.
        -:   21: * Preconditions: none
        -:   22: * Postconditions: A int representing the cost of the card is returned or
        -:   23: * -1 if the cardNumber is not valid
        -:   24: * Testing Requirements: 
        -:   25: * Function returns an int corresponding to the cost of the cardNumber
        -:   26: * Function return -1 if cardNumber is not present
        -:   27: */
        -:   28:
        -:   29:#include "dominion.h"
        -:   30:#include "dominion_helpers.h"
        -:   31:#include <string.h>
        -:   32:#include <stdio.h>
        -:   33:#include <assert.h>
        -:   34:#include "rngs.h" //random number generator multiple streams
        -:   35:
        -:   36:
        -:   37:#define TEST "myCost Function"
        -:   38:#define TEST1 1
        -:   39:#define TEST2 2
        -:   40:#define TEST3 3
        -:   41:
        -:   42://Function will initialize the gameState struct
        -:   43:int initializeMyGame(struct gameState *G, int actionCards[], int seed, int numPlayer);
        -:   44://Function will print the state of the test variable if error is found
        -:   45:void printState(struct gameState *pre, struct gameState *post, int hand[], int testPlayedCardCount, int testHandPosition, 
        -:   46:        int testTrashFlag, int player, int test);
        -:   47:int getMyCost(int cardNum);
        -:   48:int noPlayerStateChanges(struct gameState *preCall, struct gameState *postCall, int p);
        -:   49:int noVictoryCardChanges(struct gameState *preCall, struct gameState *postCall, int p);
        -:   50:int noDominionCardChanges(struct gameState *preCall, struct gameState *postCall, int p, int deckSize);
        -:   51:
        -:   52:   
function main called 1 returned 100% blocks executed 77%
        1:   53:int main() {
        -:   54:    int i, k; //counter
        -:   55:	
        1:   56:	int errorFlagP = 0, errorFlagV = 0, errorFlagD = 0;
        -:   57:    int p;//used to store player 
        1:   58:	int trash = 0;
        1:   59:	int cardPosition = 0;
        1:   60:	const int ACTION_CARD_TOTAL = 10;
        1:   61:    int actionCard[10] = { 
        -:   62:        smithy, smithy, smithy, smithy, smithy, smithy, smithy, 
        -:   63:        smithy, smithy, smithy};   
        -:   64:            
        -:   65:    struct gameState preCall;
        -:   66:    struct gameState postCall;  
        1:   67:	int seed = 1000;
        -:   68:
        1:   69:	const int ACTION_CARD_NUM = 20;
        -:   70:	
        1:   71:    int actionCards[20] = { 
        -:   72:        adventurer, council_room, feast, gardens, mine, remodel, smithy, 
        -:   73:        village, baron, great_hall, minion, steward, tribute, ambassador, 
        -:   74:        cutpurse, embargo, outpost, salvager, sea_hag, treasure_map};   
        -:   75:        
        1:   76:    const int ALL_CARDS_COUNT = 29;//all possible cards
        -:   77:
        1:   78:    int testAllCardsDeck[ALL_CARDS_COUNT];   		   
        -:   79:
        1:   80:	int cost = 0;
        -:   81:	/*
        -:   82:	* Initialize the test hand
        -:   83:	*/			
        -:   84:	//add action cards to no treasure test hand
       21:   85:	for(k = 0; k < ACTION_CARD_NUM; ++k){
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
       20:   86:	  testAllCardsDeck[k] = actionCards[k]; 	  
        -:   87:	}
        -:   88:
        -:   89:	//add other cards
        1:   90:	testAllCardsDeck[k] = estate;	
        1:   91:	testAllCardsDeck[k+1] = duchy;	
        1:   92:	testAllCardsDeck[k+2] = province;	
        1:   93:	testAllCardsDeck[k+3] = curse; 	
        1:   94:	testAllCardsDeck[k+4] = gold;	
        1:   95:	testAllCardsDeck[k+5] = silver;				
        1:   96:	testAllCardsDeck[k+6] = copper;	
        1:   97:	testAllCardsDeck[k+7] = 10121;//add a bad card
        1:   98:	testAllCardsDeck[k+8] = -1011;//add a bad card
        -:   99:	
        -:  100:
        1:  101:    printf ("Starting unittest4\nTESTING getCost():\n");
call    0 returned 100%
        -:  102:
       30:  103:	for (i = 0; i < ALL_CARDS_COUNT; i++){			
branch  0 taken 97%
branch  1 taken 3% (fallthrough)
       29:  104:		cost = getCost(testAllCardsDeck[i]);
call    0 returned 100%
        -:  105:		
       29:  106:		if(cost != getMyCost(testAllCardsDeck[i])){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  107:			printf("Error found in %s", TEST);
call    0 never executed
    #####:  108:			return 1;
        -:  109:		}	
        -:  110:		//assert(cost == getMyCost(testAllCardsDeck[i]));				    
        -:  111:    }
        -:  112:
        3:  113:	for (p = 0; p < 2; p++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:  114:		initializeMyGame(&preCall, actionCard, seed++, 2);           
call    0 returned 100%
        -:  115:		
        -:  116:		//****************running tests************************************																
        2:  117:		memcpy(preCall.hand[p], actionCard, sizeof(int) * ACTION_CARD_TOTAL);								
        2:  118:		preCall.handCount[p] = i; 					
        2:  119:		preCall.playedCardCount = 0;
        2:  120:		preCall.discardCount[p] = 0;
        2:  121:		preCall.whoseTurn = p; //set turn
        2:  122:        preCall.trashCount = 0;
        2:  123:		preCall.deckCount[p] = ACTION_CARD_TOTAL;
        2:  124:		memcpy(preCall.deck[p], actionCard, sizeof(int) * ACTION_CARD_TOTAL);
        2:  125:		memcpy(&postCall, &preCall, sizeof(struct gameState));//save game state before calling discardCard
        2:  126:		getCost(smithy);
call    0 returned 100%
        -:  127:		
        2:  128:		if((p == 0) && !errorFlagP){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        2:  129:			if(noPlayerStateChanges(&preCall, &postCall, 1) < 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  130:				printState(&preCall, &postCall, preCall.hand[p], preCall.handCount[p], cardPosition, trash, p, TEST1); 
call    0 never executed
    #####:  131:				errorFlagP = 1;
        -:  132:			}
        1:  133:		}else if(!errorFlagP){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  134:			if(noPlayerStateChanges(&preCall, &postCall, 0) < 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  135:				printState(&preCall, &postCall, preCall.hand[p], preCall.handCount[p], cardPosition, trash, p, TEST1); 
call    0 never executed
    #####:  136:				errorFlagP = 1;
        -:  137:			}
        -:  138:		}
        -:  139:		
        2:  140:		if((!errorFlagV && noVictoryCardChanges(&preCall, &postCall, p) < 0) ){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  141:			printState(&preCall, &postCall, preCall.hand[p], preCall.handCount[p], cardPosition, trash, p, TEST2); 
call    0 never executed
    #####:  142:			errorFlagV = 1;
        -:  143:		}
        2:  144:		if (!errorFlagD && (noDominionCardChanges(&preCall, &postCall, p, ACTION_CARD_TOTAL) < 0)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  145:			printState(&preCall, &postCall, preCall.hand[p], preCall.handCount[p], cardPosition, trash, p, TEST3); 
call    0 never executed
    #####:  146:			errorFlagD = 1;
        -:  147:		}
        -:  148:		
        -:  149:	}
        -:  150:	
        1:  151:    printf("All tests passed!\nEnd of unittest2\n");
call    0 returned 100%
        -:  152:
        1:  153:    return 0;
        -:  154:}
        -:  155:
function getMyCost called 29 returned 100% blocks executed 100%
       29:  156:int getMyCost(int cardNum){
       29:  157:	switch( cardNum ) 
branch  0 taken 3%
branch  1 taken 3%
branch  2 taken 3%
branch  3 taken 3%
branch  4 taken 3%
branch  5 taken 3%
branch  6 taken 3%
branch  7 taken 3%
branch  8 taken 3%
branch  9 taken 3%
branch 10 taken 3%
branch 11 taken 3%
branch 12 taken 3%
branch 13 taken 3%
branch 14 taken 3%
branch 15 taken 3%
branch 16 taken 3%
branch 17 taken 3%
branch 18 taken 3%
branch 19 taken 3%
branch 20 taken 3%
branch 21 taken 3%
branch 22 taken 3%
branch 23 taken 3%
branch 24 taken 3%
branch 25 taken 3%
branch 26 taken 3%
branch 27 taken 7%
        -:  158:    {
        -:  159:		case curse:
        1:  160:		  return 0;
        -:  161:		case estate:
        1:  162:		  return 2;
        -:  163:		case duchy:
        1:  164:		  return 5;
        -:  165:		case province:
        1:  166:		  return 8;
        -:  167:		case copper:
        1:  168:		  return 0;
        -:  169:		case silver:
        1:  170:		  return 3;
        -:  171:		case gold:
        1:  172:		  return 6;
        -:  173:		case adventurer:
        1:  174:		  return 6;
        -:  175:		case council_room:
        1:  176:		  return 5;
        -:  177:		case feast:
        1:  178:		  return 4;
        -:  179:		case gardens:
        1:  180:		  return 4;
        -:  181:		case mine:
        1:  182:		  return 5;
        -:  183:		case remodel:
        1:  184:		  return 4;
        -:  185:		case smithy:
        1:  186:		  return 4;
        -:  187:		case village:
        1:  188:		  return 3;
        -:  189:		case baron:
        1:  190:		  return 4;
        -:  191:		case great_hall:
        1:  192:		  return 3;
        -:  193:		case minion:
        1:  194:		  return 5;
        -:  195:		case steward:
        1:  196:		  return 3;
        -:  197:		case tribute:
        1:  198:		  return 5;
        -:  199:		case ambassador:
        1:  200:		  return 3;
        -:  201:		case cutpurse:
        1:  202:		  return 4;
        -:  203:		case embargo: 
        1:  204:		  return 2;
        -:  205:		case outpost:
        1:  206:		  return 5;
        -:  207:		case salvager:
        1:  208:		  return 4;
        -:  209:		case sea_hag:
        1:  210:		  return 4;
        -:  211:		case treasure_map:
        1:  212:		  return 4;
        -:  213:    }
        2:  214:	return -1;
        -:  215:}
        -:  216:
function printState called 0 returned 0% blocks executed 0%
    #####:  217:void printState(struct gameState *pre, struct gameState *post, int hand[], int testPlayedCardCount, int testHandPosition, 
        -:  218:        int testTrashFlag, int player, int test){
        -:  219:	
    #####:  220:	printf("Error found in %s, %d\n", TEST, test );
call    0 never executed
    #####:  221:	printf("\tpost G->playedCardCount = %d  testPlayedCardCount = %d\n", post->playedCardCount, testPlayedCardCount);
call    0 never executed
    #####:  222:	printf("\tpost G->handCount[player] = %d  testHandPosition = %d\n", post->handCount[player], testHandPosition);
call    0 never executed
    #####:  223:	printf("\tpost testTrashFlag = %d Player = %d\n\n", testTrashFlag, player);  
call    0 never executed
    #####:  224:	printf("\tpost.whoseTurn = %d pre.whoseTurn = %d\n", post->whoseTurn, pre->whoseTurn );   
call    0 never executed
    #####:  225:    printf("\tpost.numBuys = %d pre.numBuys = %d\n", post->numBuys, pre->numBuys );   
call    0 never executed
    #####:  226:    printf("\tpost.NumAction = %d pre.NumActions = %d\n", post->numActions, pre->numActions );
call    0 never executed
    #####:  227:    printf("\tpost.Coins = %d pre.Coins = %d\n", post->coins, pre->coins);
call    0 never executed
    #####:  228:	printf("\tpost.HandCount = %d  pre.HandCount = %d\n", post->handCount[player], pre->handCount[player]);	        
call    0 never executed
    #####:  229:    printf("\tpost.discardCount[p] = %d pre.discardCount[p] = %d\n", post->discardCount[player], pre->discardCount[player]); 
call    0 never executed
    #####:  230:    printf("\tpost.deckCount[p] = %d pre.deckCount[p] = %d\n", post->deckCount[player], pre->deckCount[player]);	
call    0 never executed
    #####:  231:}
        -:  232:
function noPlayerStateChanges called 2 returned 100% blocks executed 40%
        2:  233:int noPlayerStateChanges(struct gameState *preCall, struct gameState *postCall, int p){
        -:  234:    //int i = 0;	
        -:  235:	//test no other changes occured to game state	
        2:  236:	if(preCall->deckCount[p] != postCall->deckCount[p]){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  237:		printf("ERROR noPlayerStateChanges DECKCOUNT's off\n");
call    0 never executed
    #####:  238:		return -1;
        -:  239:	}
        2:  240:	if(preCall->discardCount[p] != postCall->discardCount[p]){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  241:		printf("ERROR noPlayerStateChanges DISCARDCOUNT's off\n");
call    0 never executed
    #####:  242:		return -1;
        -:  243:	}
        2:  244:	if(preCall->handCount[p] != postCall->handCount[p]){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  245:		printf("ERROR noPlayerStateChanges HANDCOUNT's off\n");
call    0 never executed
    #####:  246:		return -1;
        -:  247:	}
        2:  248:	if(memcmp(&preCall->deck[p], &postCall->deck[p], MAX_DECK) != 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  249:		printf("ERROR noPlayerStateChanges DECK is off\n");
call    0 never executed
        -:  250:
        -:  251:		//for testing
        -:  252:        //for(i=0; i < MAX_DECK ; ++i){
        -:  253:        //    printf("\tpreCall-deck[%d][%d] = %d, postCall-deck[%d][%d] = %d\n",p, i, preCall->deck[p][i], p, i, postCall->deck[p][i]);
        -:  254:        //}
        -:  255:
    #####:  256:		return -1;
        -:  257:	}
        2:  258:	if(memcmp(&preCall->discard[p], &postCall->discard[p], MAX_DECK) != 0){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  259:		printf("ERROR noPlayerStateChanges DISCARD DECK is off\n");
call    0 never executed
    #####:  260:		return -1;
        -:  261:	}
        2:  262:	if(memcmp(&preCall->hand[p], &postCall->hand[p], MAX_HAND) != 0){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  263:		printf("ERROR noPlayerStateChanges HAND is off\n");
call    0 never executed
    #####:  264:		return -1;
        -:  265:	}
        2:  266:	return 0;
        -:  267:}
        -:  268:
function noVictoryCardChanges called 2 returned 100% blocks executed 71%
        2:  269:int noVictoryCardChanges(struct gameState *preCall, struct gameState *postCall, int p){
        2:  270:	if(scoreFor(p, preCall) != scoreFor(p, postCall)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  271:		printf("ERROR noVictoryCardChanges\n");
call    0 never executed
    #####:  272:		return -1;
        -:  273:	}
        2:  274:	return 0;
        -:  275:}
        -:  276:
function noDominionCardChanges called 2 returned 100% blocks executed 60%
        2:  277:int noDominionCardChanges(struct gameState *preCall, struct gameState *postCall, int p, int deckSize){
        -:  278:    
        2:  279:    if(memcmp(&preCall->deck[p], &postCall->deck[p], sizeof(int) *  deckSize) != 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  280:		printf("ERROR noDominionCardChanges\n");
call    0 never executed
        -:  281:        
    #####:  282:		return -1;
        -:  283:	}
        2:  284:	return 0;
        -:  285:}
        -:  286:
function initializeMyGame called 2 returned 100% blocks executed 100%
        2:  287:int initializeMyGame(struct gameState *G, int actionCards[], int seed, int numPlayer){
        -:  288:        
        2:  289:    memset(G, 23, sizeof(struct gameState));   // clear the game state
        2:  290:    return initializeGame(numPlayer, actionCards, seed, G); // initialize a new game
call    0 returned 100%
        -:  291:}
        -:  292:
        -:  293:
        -:  294:
