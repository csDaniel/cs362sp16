        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Ben Fisher
        -:    3: * fisheben@oregonstate.edu
        -:    4: * file: cardtest1.c
        -:    5: * Description: Skeleton taken from CS362 week4 module.
        -:    6: * Demonstration of how to write unit tests for dominion-base
        -:    7: * File tests the Dominion card smithy card effect, cardEffect function is
        -:    8: * implementated in the dominion.c file                                                     }
        -:    9: *
        -:   10: * Include the following lines in your makefile:
        -:   11: *
        -:   12: * cardtest1: cardtest1.c dominion.o rngs.o
        -:   13: *      gcc -o cardtest1 -g  cardtest1.c dominion.o rngs.o $(CFLAGS)
        -:   14: * -----------------------------------------------------------------------
        -:   15: */
        -:   16: 
        -:   17: /*
        -:   18: * SMITHY CARD 
        -:   19: * No documentation in the implementation or the interface
        -:   20: * Description: Smithy Card is an action card that when played gives the player 3 more cards.
        -:   21: * Testing Requirements: 
        -:   22: * After the card has been played the smithy card is removed from the players hand at handPos
        -:   23: * After the card is played the player get 3 new cards in their hand
        -:   24: * No other changes to the game state should occur.
        -:   25: * The players hand count should increase by 2
        -:   26: * The players deck count should decrease by 3
        -:   27: * Player should be a number between 2 and MAX_PLAYERS
        -:   28: * If player has no cards in deck then no changes should be made to deck
        -:   29: int mySmithy(struct gameState *state, int currentPlayer, int handPos){
        -:   30:	//+3 Cards
        -:   31:	int i;
        -:   32:	for (i = 0; i < 3; i++)
        -:   33:	{
        -:   34:		drawCard(currentPlayer, state);
        -:   35:	}
        -:   36:		
        -:   37:	//discard card from hand	
        -:   38:	discardCard(handPos, currentPlayer, state, 0);
        -:   39:	return 0;
        -:   40:}
        -:   41: */
        -:   42:
        -:   43:#include "dominion.h"
        -:   44:#include "dominion_helpers.h"
        -:   45:#include <string.h>
        -:   46:#include <stdio.h>
        -:   47:#include <assert.h>
        -:   48:#include "rngs.h"
        -:   49:#include <stdlib.h>
        -:   50:
        -:   51:#define TESTCARD "smithy"
        -:   52:#define TEST1 1
        -:   53:#define TEST2 2
        -:   54:#define TEST3 3
        -:   55:#define TEST4 4
        -:   56:#define TEST5 5
        -:   57:#define TEST6 6
        -:   58:
        -:   59://Function will initialize the gameState struct
        -:   60:int initializeMyGame(struct gameState *G, int actionCards[], int seed, int numPlayer);
        -:   61://Function will print the state of the test variable if error is found
        -:   62:void printState(struct gameState *pre, struct gameState *post, int hand[], int testHandCount, int testHandPosition, 
        -:   63:        int card, int player, int test);
        -:   64:
        -:   65:int noPlayerStateChanges(struct gameState *preCall, struct gameState *postCall, int p);
        -:   66:int noVictoryCardChanges(struct gameState *preCall, struct gameState *postCall, int p);
        -:   67:int noDominionCardChanges(struct gameState *preCall, struct gameState *postCall, int p, int deckSize);
        -:   68:		
function main called 1 returned 100% blocks executed 69%
        1:   69:int main() {
        -:   70:   
        -:   71:	int i;//counter
        1:   72:    int seed = 1000; //used in rngs
        1:   73:    int numPlayer = 2;
        1:   74:	int choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   75:    int p;//used to store player 	
        1:   76:	int cardPosition = 0;	
        -:   77:
        1:   78:	int errorFlag1 = 0, errorFlag2 = 0, errorFlag3 = 0;	
        1:   79:	int errorFlagP = 0, errorFlagV = 0, errorFlagD = 0;
        -:   80:	        
        -:   81:    struct gameState preCall;
        -:   82:    struct gameState postCall;
        -:   83:	
        1:   84:	const int NO_SMITHY_CARDS_TOTAL = 10;
        -:   85:	
        -:   86:	//kingdom cards with no smithy
        1:   87:    int noSmithyCards[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   88:		sea_hag, tribute, tribute, council_room};		
        -:   89:
        -:   90:
        1:   91:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
call    0 returned 100%
        -:   92:	
        -:   93:	//test both players
        3:   94:    for (p = 0; p < numPlayer; p++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   95:		
        -:   96:		//test different hands
       20:   97:		for (i = 1; i < NO_SMITHY_CARDS_TOTAL; i++){
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
        -:   98:		
        -:   99:			//test different smithy card positions in the hand
      108:  100:			for(cardPosition = 0; cardPosition < i; ++cardPosition){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  101:		
       90:  102:				initializeMyGame(&preCall, noSmithyCards, seed++, numPlayer);           
call    0 returned 100%
        -:  103:				
        -:  104:				//****************running tests************************************
        -:  105:				//set actions, coins and buys
       90:  106:                preCall.numActions = 0;
       90:  107:                preCall.numBuys = 0;
       90:  108:                preCall.coins = 0;				
        -:  109:                //set the correct turn
       90:  110:                preCall.whoseTurn = p;
        -:  111:				//set hand sizeof
       90:  112:				preCall.handCount[p] = i;
       90:  113:			    preCall.deckCount[p] = NO_SMITHY_CARDS_TOTAL;                
       90:  114:                preCall.discardCount[p] = 0;
       90:  115:                preCall.playedCardCount = 0;
       90:  116:                memcpy(preCall.hand[p], noSmithyCards, sizeof(int) * NO_SMITHY_CARDS_TOTAL);
        -:  117:            	//add smithy card into correct position
       90:  118:                preCall.hand[p][cardPosition] = smithy;
        -:  119:                //save state
       90:  120:				memcpy(&postCall, &preCall, sizeof(struct gameState));
       90:  121:				cardEffect(smithy, choice1, choice2, choice3, &postCall, cardPosition, &bonus);
call    0 returned 100%
        -:  122:				
       90:  123:				if((p == 0) && !errorFlagP){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       90:  124:					if(noPlayerStateChanges(&preCall, &postCall, 1) < 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  125:						printState(&preCall, &postCall, preCall.hand[p], preCall.handCount[p], cardPosition, smithy, p, TEST4); 
call    0 never executed
    #####:  126:						errorFlagP = 1;
        -:  127:					}
       45:  128:				}else if(!errorFlagP){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       45:  129:					if(noPlayerStateChanges(&preCall, &postCall, 0) < 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  130:						printState(&preCall, &postCall, preCall.hand[p], preCall.handCount[p], cardPosition, smithy, p, TEST4); 
call    0 never executed
    #####:  131:						errorFlagP = 1;
        -:  132:					}
        -:  133:				}
        -:  134:				
       90:  135:				if(!errorFlagV && (noVictoryCardChanges(&preCall, &postCall, p) < 0)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  136:					printState(&preCall, &postCall, preCall.hand[p], preCall.handCount[p], cardPosition, smithy, p, TEST5); 
call    0 never executed
    #####:  137:					errorFlagV = 1;
        -:  138:				}
       90:  139:				if (!errorFlagD && (noDominionCardChanges(&preCall, &postCall, p, NO_SMITHY_CARDS_TOTAL) < 0)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  140:					printState(&preCall, &postCall, preCall.hand[p], preCall.handCount[p], cardPosition, smithy, p, TEST6); 
call    0 never executed
    #####:  141:					errorFlagD = 1;
        -:  142:				}
        -:  143:				
      180:  144:				if(((postCall.handCount[p] != (preCall.handCount[p] + 2)) ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
       90:  145:                          (postCall.deckCount[p] != (preCall.deckCount[p] - 3))) && !errorFlag1){ 
branch  0 never executed
branch  1 never executed
    #####:  146:					printState(&preCall, &postCall, preCall.hand[p], preCall.handCount[p], cardPosition, smithy, p, TEST1); 
call    0 never executed
    #####:  147:					errorFlag1 = 1;
        -:  148:				}
        -:  149:				
        -:  150:				//test hand counts are correct 
        -:  151:				//assert(postCall.handCount[p] == (preCall.handCount[p] + 2));					
        -:  152:			    	
        -:  153:                //test deck count is 3 small post call
        -:  154:                //assert(postCall.deckCount[p] == (preCall.deckCount[p] - 3));                
        -:  155:
       90:  156:				if(((postCall.hand[p][cardPosition] == smithy) || (preCall.hand[p][cardPosition] != smithy)) && !errorFlag2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
    #####:  157:					printState(&preCall, &postCall, preCall.hand[p], preCall.handCount[p], cardPosition, smithy, p, TEST2); 
call    0 never executed
    #####:  158:					errorFlag2 = 1;
        -:  159:				}
        -:  160:			
        -:  161:				//test smithy card has been removed successfully
        -:  162:				//assert(postCall.hand[p][cardPosition] != smithy);											   
        -:  163:			    //assert(preCall.hand[p][cardPosition] == smithy);
        -:  164:
        -:  165:				//test no other changes occured to game state	
       90:  166:				preCall.handCount[p] += 2;						
       90:  167:                preCall.deckCount[p] -= 3;
        -:  168:                
        -:  169:                //deck has been shuffled so need to copy over to preCall
       90:  170:				memcpy(&preCall.hand[p], &postCall.hand[p], sizeof(int) * MAX_HAND);
        -:  171:				//memcpy(&preCall.deck[p], &postCall.deck[p], sizeof(int) * MAX_DECK);
        -:  172:				//memcpy(&preCall.discard[p], &postCall.discard[p], sizeof(int) * MAX_DECK);
        -:  173:				//memcpy(&preCall.playedCards, &postCall.playedCards, sizeof(int) * MAX_DECK);
        -:  174:				
       90:  175:				if(memcmp(&preCall, &postCall, sizeof(struct gameState)) != 0 && !errorFlag3){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        1:  176:					printState(&preCall, &postCall, preCall.hand[p], preCall.handCount[p], cardPosition, smithy, p, TEST3); 
call    0 returned 100%
        1:  177:					errorFlag3 = 1;
        -:  178:				}
        -:  179:				//assert(memcmp(&preCall, &postCall, sizeof(struct gameState)) == 0);												      
        -:  180:			}		  
        -:  181:		}
        -:  182:	}
        -:  183:
        1:  184:	if(!errorFlag1 && !errorFlag2 && !errorFlag3 &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
branch  6 never executed
branch  7 never executed
    #####:  185:		!errorFlagP && ! errorFlagV && ! errorFlagD ){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  186:		printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
call    0 never executed
        -:  187:	}else{
        1:  188:		printf("\n >>>>> FAILURES DETECTED: Examine test cases %s <<<<<\n\n", TESTCARD);
call    0 returned 100%
        -:  189:	}
        -:  190:
        1:  191:	return 0;
        -:  192:}
        -:  193:
function initializeMyGame called 90 returned 100% blocks executed 100%
       90:  194:int initializeMyGame(struct gameState *G, int actionCards[], int seed, int numPlayer){
        -:  195:	
       90:  196:		memset(G, 23, sizeof(struct gameState));   // clear the game state
       90:  197:        return initializeGame(numPlayer, actionCards, seed, G); // initialize a new game
call    0 returned 100%
        -:  198:}
        -:  199:
function printState called 1 returned 100% blocks executed 100%
        1:  200:void printState(struct gameState *pre, struct gameState *post, int hand[], int testHandCount, int cardPosition, 
        -:  201:        int card, int player, int test){
        -:  202:	
        1:  203:	printf("Error found in %s %d\n", TESTCARD, test );
call    0 returned 100%
        1:  204:	printf("\tpost.whoseTurn = %d pre.whoseTurn = %d\n", post->whoseTurn, pre->whoseTurn );   
call    0 returned 100%
        1:  205:    printf("\tpost.numBuys = %d pre.numBuys = %d\n", post->numBuys, pre->numBuys );   
call    0 returned 100%
        1:  206:    printf("\tpost.NumAction = %d pre.NumActions = %d\n", post->numActions, pre->numActions );
call    0 returned 100%
        1:  207:    printf("\tpost.Coins = %d pre.Coins = %d\n", post->coins, pre->coins);
call    0 returned 100%
        1:  208:	printf("\tpost.HandCount = %d  pre.HandCount = %d\n", post->handCount[player], pre->handCount[player]);
call    0 returned 100%
        1:  209:	printf("\tpostCall.hand[p][cardPosition] = %d  testHandPosition = %d\n", post->hand[player][cardPosition], cardPosition);
call    0 returned 100%
        1:  210:    printf("\tpreCall.hand[p][cardPosition] = %d\n", pre->hand[player][cardPosition]);	 
call    0 returned 100%
        1:  211:    printf("\tpost.playedCardCount = %d pre.playedCardCount = %d\n", post->playedCardCount, pre->playedCardCount);
call    0 returned 100%
        1:  212:    printf("\tpost.playCards[0] = %d pre.playedCards[0] = %d\n", 
call    0 returned 100%
        -:  213:            post->playedCards[0], pre->playedCards[0]);
        1:  214:    printf("\tpost.discardCount[p] = %d pre.discardCount[p] = %d\n", post->discardCount[player], pre->discardCount[player]); 
call    0 returned 100%
        1:  215:    printf("\tpost.deckCount[p] = %d pre.deckCount[p] = %d\n", post->deckCount[player], pre->deckCount[player]);
call    0 returned 100%
        1:  216:	printf("\tsmithy card = %d Player = %d\n\n", card, player); 
call    0 returned 100%
        1:  217:}
        -:  218:
function noPlayerStateChanges called 90 returned 100% blocks executed 40%
       90:  219:int noPlayerStateChanges(struct gameState *preCall, struct gameState *postCall, int p){
        -:  220:    //int i = 0;	
        -:  221:	//test no other changes occured to game state	
       90:  222:	if(preCall->deckCount[p] != postCall->deckCount[p]){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  223:		printf("ERROR noPlayerStateChanges DECKCOUNT's off\n");
call    0 never executed
    #####:  224:		return -1;
        -:  225:	}
       90:  226:	if(preCall->discardCount[p] != postCall->discardCount[p]){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  227:		printf("ERROR noPlayerStateChanges DISCARDCOUNT's off\n");
call    0 never executed
    #####:  228:		return -1;
        -:  229:	}
       90:  230:	if(preCall->handCount[p] != postCall->handCount[p]){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  231:		printf("ERROR noPlayerStateChanges HANDCOUNT's off\n");
call    0 never executed
    #####:  232:		return -1;
        -:  233:	}
       90:  234:	if(memcmp(&preCall->deck[p], &postCall->deck[p], MAX_DECK) != 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  235:		printf("ERROR noPlayerStateChanges DECK is off\n");
call    0 never executed
        -:  236:
        -:  237:		//for testing
        -:  238:        //for(i=0; i < MAX_DECK ; ++i){
        -:  239:        //    printf("\tpreCall-deck[%d][%d] = %d, postCall-deck[%d][%d] = %d\n",p, i, preCall->deck[p][i], p, i, postCall->deck[p][i]);
        -:  240:        //}
        -:  241:
    #####:  242:		return -1;
        -:  243:	}
       90:  244:	if(memcmp(&preCall->discard[p], &postCall->discard[p], MAX_DECK) != 0){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  245:		printf("ERROR noPlayerStateChanges DISCARD DECK is off\n");
call    0 never executed
    #####:  246:		return -1;
        -:  247:	}
       90:  248:	if(memcmp(&preCall->hand[p], &postCall->hand[p], MAX_HAND) != 0){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  249:		printf("ERROR noPlayerStateChanges HAND is off\n");
call    0 never executed
    #####:  250:		return -1;
        -:  251:	}
       90:  252:	return 0;
        -:  253:}
        -:  254:
function noVictoryCardChanges called 90 returned 100% blocks executed 71%
       90:  255:int noVictoryCardChanges(struct gameState *preCall, struct gameState *postCall, int p){
       90:  256:	if(scoreFor(p, preCall) != scoreFor(p, postCall)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  257:		printf("ERROR noVictoryCardChanges\n");
call    0 never executed
    #####:  258:		return -1;
        -:  259:	}
       90:  260:	return 0;
        -:  261:}
        -:  262:
function noDominionCardChanges called 90 returned 100% blocks executed 60%
       90:  263:int noDominionCardChanges(struct gameState *preCall, struct gameState *postCall, int p, int deckSize){
       90:  264:	if(memcmp(&preCall->deck[p], &postCall->deck[p], sizeof(int) *  deckSize) != 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  265:		printf("ERROR noDominionCardChanges\n");
call    0 never executed
    #####:  266:		return -1;
        -:  267:	}
       90:  268:	return 0;
        -:  269:}
