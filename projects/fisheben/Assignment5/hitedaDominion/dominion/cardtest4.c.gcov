        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Ben Fisher
        -:    3: * fisheben@oregonstate.edu
        -:    4: * file: cardtest4.c
        -:    5: * Description: Skeleton taken from CS362 week4 module.
        -:    6: * Demonstration of how to write unit tests for dominion-base
        -:    7: * File tests the Dominion card great_hall card effect, cardEffect function is
        -:    8: * implementated in the dominion.c file                                                     }
        -:    9: *
        -:   10: * Include the following lines in your makefile:
        -:   11: *
        -:   12: * cardtest4: cardtest4.c dominion.o rngs.o
        -:   13: *      gcc -o cardtest4 -g  cardtest4.c dominion.o rngs.o $(CFLAGS)
        -:   14: * -----------------------------------------------------------------------
        -:   15: */
        -:   16: 
        -:   17: /*
        -:   18: * great_hall CARD 
        -:   19: * No documentation in the implementation or the interface
        -:   20: * Description: great_hall Card is an action card and a victory card that when played will give the player one extra
        -:   21: * card and 1 extra actions.  If the card is not played it is worth 1 victory point.  
        -:   22: * When played then the great_hall card is discarded.
        -:   23: * Testing Requirements: 
        -:   24: * After the card has been played the great_hall card is removed from the players hand at handPos
        -:   25: * After the card is played the player will get 1 new card in their hand
        -:   26: * After the card is player the player will get 2 more actions
        -:   27: * No other changes to the game state should occur.
        -:   28: * The players hand count should not change
        -:   29: * The players deck count should decrease by 1
        -:   30: * The players played cards count should increase by 1
        -:   31: * Player should be a number between 2 and MAX_PLAYERS
        -:   32: * If player has no cards in deck then no changes should be made to deck
        -:   33:  case great_hall:
        -:   34:      //+1 Card
        -:   35:      drawCard(currentPlayer, state);
        -:   36:			
        -:   37:      //+1 Actions
        -:   38:      state->numActions++;
        -:   39:			
        -:   40:      //discard card from hand
        -:   41:      discardCard(handPos, currentPlayer, state, 0);
        -:   42:      return 0;
        -:   43: */
        -:   44:
        -:   45:#include "dominion.h"
        -:   46:#include "dominion_helpers.h"
        -:   47:#include <string.h>
        -:   48:#include <stdio.h>
        -:   49:#include <assert.h>
        -:   50:#include "rngs.h"
        -:   51:#include <stdlib.h>
        -:   52:
        -:   53:
        -:   54:#define TESTCARD "great_hall"
        -:   55:#define TEST1 1
        -:   56:#define TEST2 2
        -:   57:#define TEST3 3
        -:   58:#define TEST4 4
        -:   59:#define TEST5 5
        -:   60:#define TEST6 6
        -:   61:#define TEST7 7
        -:   62:#define TEST8 8
        -:   63:#define TEST9 9
        -:   64:
        -:   65://Function will initialize the gameState struct
        -:   66:int initializeMyGame(struct gameState *G, int actionCards[], int seed, int numPlayer);
        -:   67://Function will print the state of the test variable if error is found
        -:   68:void printState(struct gameState *pre, struct gameState *post, int hand[], int testHandCount, int z, 
        -:   69:        int treasure, int player, int test);
        -:   70:		
        -:   71:int noPlayerStateChanges(struct gameState *preCall, struct gameState *postCall, int p);
        -:   72:int noVictoryCardChanges(struct gameState *preCall, struct gameState *postCall, int p);
        -:   73:int noDominionCardChanges(struct gameState *preCall, struct gameState *postCall, int p, int deckSize);
        -:   74:
function main called 1 returned 100% blocks executed 64%
        1:   75:int main() {
        -:   76:	int i;//counter
        1:   77:    int seed = 1000; //used in rngs
        1:   78:    int numPlayer = 2;
        1:   79:	int choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0, cardPosition = 0;
        -:   80:    int p;//used to store player 
        -:   81:	
        1:   82:	int errorFlag1 = 0, errorFlag2 = 0, errorFlag3 = 0, errorFlag4 = 0, errorFlag5 = 0, errorFlag6 = 0;
        1:   83:	int errorFlagP = 0, errorFlagV = 0, errorFlagD = 0;
        -:   84:	        
        -:   85:    struct gameState preCall;
        -:   86:    struct gameState postCall;
        -:   87:	
        1:   88:	const int CARDS_TOTAL = 10;
        -:   89:	
        -:   90:	//kingdom cards with no great_hall
        1:   91:    int nogreat_hallCards[10] = {adventurer, embargo, embargo, minion, mine, cutpurse,
        -:   92:		sea_hag, tribute, smithy, council_room};			
        -:   93:
        1:   94:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
call    0 returned 100%
        -:   95:	
        -:   96:	//test both players
        2:   97:    for (p = 1; p < numPlayer; p++){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:   98:				
        -:   99:		//test different hands
       10:  100:		for (i = 1; i < CARDS_TOTAL; i++){
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
        -:  101:		
        -:  102:			//test different great_hall card positions in the hand
       54:  103:			for(cardPosition = 0; cardPosition < i; ++cardPosition){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  104:				
       45:  105:				initializeMyGame(&preCall, nogreat_hallCards, seed++, numPlayer);           
call    0 returned 100%
        -:  106:				
        -:  107:				//****************running tests************************************									
        -:  108:                //set actions, coins and buys
       45:  109:                preCall.numActions = 0;
       45:  110:                preCall.numBuys = 0;
       45:  111:                preCall.coins = 0;
        -:  112:                //set played cards to zero	
       45:  113:                preCall.playedCardCount = 0;
        -:  114:                //set the correct turn
       45:  115:                preCall.whoseTurn = p;
        -:  116:				//set hand size
       45:  117:				preCall.handCount[p] = i;
       45:  118:			    preCall.deckCount[p] = CARDS_TOTAL;               
       45:  119:				preCall.discardCount[p]  = 0;//used in score for method
       45:  120:                memcpy(preCall.hand[p], nogreat_hallCards, sizeof(int) * CARDS_TOTAL);
        -:  121:            	//add great_hall card into correct position
       45:  122:                preCall.hand[p][cardPosition] = great_hall;
        -:  123:                //save state
       45:  124:				memcpy(&postCall, &preCall, sizeof(struct gameState));
        -:  125:			
       45:  126:                cardEffect(great_hall, choice1, choice2, choice3, &postCall, cardPosition, &bonus);
call    0 returned 100%
        -:  127:				
       45:  128:				if((p == 0) && !errorFlagP){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  129:					if(noPlayerStateChanges(&preCall, &postCall, 1) < 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  130:						printState(&preCall, &postCall, preCall.hand[p], preCall.handCount[p], cardPosition, great_hall, p, TEST7); 
call    0 never executed
    #####:  131:						errorFlagP = 1;
        -:  132:					}
       45:  133:				}else if(!errorFlagP){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       45:  134:					if(noPlayerStateChanges(&preCall, &postCall, 0) < 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  135:						printState(&preCall, &postCall, preCall.hand[p], preCall.handCount[p], cardPosition, great_hall, p, TEST7); 
call    0 never executed
    #####:  136:						errorFlagP = 1;
        -:  137:					}
        -:  138:				}
        -:  139:				
       45:  140:				if(!errorFlagV && (noVictoryCardChanges(&preCall, &postCall, p) < 0) ){
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
call    2 returned 100%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
        1:  141:					printState(&preCall, &postCall, preCall.hand[p], preCall.handCount[p], cardPosition, great_hall, p, TEST8); 
call    0 returned 100%
        1:  142:					errorFlagV = 1;
        -:  143:				}
       45:  144:				if (!errorFlagD && (noDominionCardChanges(&preCall, &postCall, p, CARDS_TOTAL) < 0) ){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  145:					printState(&preCall, &postCall, preCall.hand[p], preCall.handCount[p], cardPosition, great_hall, p, TEST9); 
call    0 never executed
    #####:  146:					errorFlagD = 1;
        -:  147:				}
        -:  148:				
       90:  149:				if(((postCall.handCount[p] != (preCall.handCount[p])) ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
       45:  150:                          (postCall.deckCount[p] != (preCall.deckCount[p] - 1))) && !errorFlag1){ 
branch  0 never executed
branch  1 never executed
    #####:  151:					printState(&preCall, &postCall, preCall.hand[p], preCall.handCount[p], cardPosition, great_hall, p, TEST1); 
call    0 never executed
    #####:  152:					errorFlag1 = 1;
        -:  153:				}
        -:  154:				
        -:  155:				//test hand counts are correct 
        -:  156:				//assert(postCall.handCount[p] == (preCall.handCount[p]));					
        -:  157:			    	
        -:  158:                //test deck count is 1 smaller post call
        -:  159:                //assert(postCall.deckCount[p] == (preCall.deckCount[p] - 1));                
        -:  160:
       45:  161:				if(((postCall.hand[p][cardPosition] == great_hall) || (preCall.hand[p][cardPosition] != great_hall)) && !errorFlag2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
    #####:  162:					printState(&preCall, &postCall, preCall.hand[p], preCall.handCount[p], cardPosition, great_hall, p, TEST2); 
call    0 never executed
    #####:  163:					errorFlag2 = 1;
        -:  164:				}
        -:  165:			
        -:  166:				//test great_hall card has been removed successfully
        -:  167:				//assert(postCall.hand[p][cardPosition] != great_hall);											   
        -:  168:			    //assert(preCall.hand[p][cardPosition] == great_hall);
        -:  169:				
       45:  170:				if(postCall.numActions != (preCall.numActions + 1) && !errorFlag3){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  171:					printState(&preCall, &postCall, preCall.hand[p], preCall.handCount[p], cardPosition, great_hall, p, TEST3); 
call    0 never executed
    #####:  172:					errorFlag3 = 1;
        -:  173:				}
        -:  174:				
        -:  175:				//test number of actions are correct 
        -:  176:				//assert(postCall.numActions == (preCall.numActions + 1));
        -:  177:				
       45:  178:				if(postCall.playedCardCount != (preCall.playedCardCount + 1) && !errorFlag4){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  179:					printState(&preCall, &postCall, preCall.hand[p], preCall.handCount[p], cardPosition, great_hall, p, TEST4); 
call    0 never executed
    #####:  180:					errorFlag4 = 1;
        -:  181:				}
        -:  182:				
        -:  183:				//test number of playcardCount is correct 
        -:  184:				//assert(postCall.playedCardCount == (preCall.playedCardCount + 1));
        -:  185:				
       45:  186:				if((scoreFor (p, &postCall) + 1) != scoreFor(p, &preCall) && !errorFlag5){ 
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 2% (fallthrough)
branch  5 taken 98%
        1:  187:					printState(&preCall, &postCall, preCall.hand[p], preCall.handCount[p], cardPosition, great_hall, p, TEST5); 
call    0 returned 100%
        1:  188:					errorFlag5 = 1;
        -:  189:				}
        -:  190:				
        -:  191:				//test number of victory card is correct 
        -:  192:				//assert((scoreFor (p, &postCall) + 1) != scoreFor(p, &preCall));
        -:  193:
        -:  194:				//test no other changes occured to game state										
       45:  195:                preCall.deckCount[p] -= 1;
       45:  196:				preCall.numActions += 1;
       45:  197:                preCall.playedCardCount += 1;
        -:  198:                
        -:  199:                //deck has been shuffled so need to copy over to preCall
       45:  200:				memcpy(&preCall.hand[p], &postCall.hand[p], sizeof(int) * MAX_HAND);
        -:  201:				//memcpy(&preCall.deck[p], &postCall.deck[p], sizeof(int) * MAX_DECK);
        -:  202:				//memcpy(&preCall.discard[p], &postCall.discard[p], sizeof(int) * MAX_DECK);
       45:  203:				memcpy(&preCall.playedCards, &postCall.playedCards, sizeof(int) * MAX_DECK);
        -:  204:				
       45:  205:				if((memcmp(&preCall, &postCall, sizeof(struct gameState)) != 0) && !errorFlag6){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 2% (fallthrough)
branch  3 taken 98%
        1:  206:					printState(&preCall, &postCall, preCall.hand[p], preCall.handCount[p], cardPosition, great_hall, p, TEST6); 
call    0 returned 100%
        1:  207:					errorFlag6 = 1;
        -:  208:				}
        -:  209:				//assert(memcmp(&preCall, &postCall, sizeof(struct gameState)) == 0);	
        -:  210:			}
        -:  211:		}	
        -:  212:	}	
        -:  213:
        1:  214:	if(!errorFlag1 && !errorFlag2 && !errorFlag3 && !errorFlag4 && !errorFlag5 && !errorFlag6 &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 0% (fallthrough)
branch  9 taken 100%
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
    #####:  215:		!errorFlagP && ! errorFlagV && ! errorFlagD ){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  216:		printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
call    0 never executed
        -:  217:	}else{
        1:  218:		printf("\n >>>>> FAILURES DETECTED: Examine test cases %s <<<<<\n\n", TESTCARD);
call    0 returned 100%
        -:  219:	}
        -:  220:
        1:  221:	return 0;
        -:  222:}
        -:  223:
function initializeMyGame called 45 returned 100% blocks executed 100%
       45:  224:int initializeMyGame(struct gameState *G, int actionCards[], int seed, int numPlayer){
        -:  225:	
       45:  226:		memset(G, 23, sizeof(struct gameState));   // clear the game state
       45:  227:        return initializeGame(numPlayer, actionCards, seed, G); // initialize a new game
call    0 returned 100%
        -:  228:}
        -:  229:
function printState called 3 returned 100% blocks executed 100%
        3:  230:void printState(struct gameState *pre, struct gameState *post, int hand[], int testHandCount, int cardPosition, 
        -:  231:        int treasure, int player, int test){
        -:  232:	
        3:  233:	printf("Error found in %s, %d\n", TESTCARD, test );
call    0 returned 100%
        3:  234:	printf("\tpost.whoseTurn = %d pre.whoseTurn = %d\n", post->whoseTurn, pre->whoseTurn );   
call    0 returned 100%
        3:  235:    printf("\tpost.numBuys = %d pre.numBuys = %d\n", post->numBuys, pre->numBuys );   
call    0 returned 100%
        3:  236:    printf("\tpost.NumAction = %d pre.NumActions = %d\n", post->numActions, pre->numActions );
call    0 returned 100%
        3:  237:    printf("\tpost.Coins = %d pre.Coins = %d\n", post->coins, pre->coins);
call    0 returned 100%
        3:  238:	printf("\tpost.HandCount = %d  pre.HandCount = %d\n", post->handCount[player], pre->handCount[player]);
call    0 returned 100%
        3:  239:	printf("\tcardPosition = %d  \n", cardPosition);
call    0 returned 100%
        3:  240:    printf("\tpreCall.hand[p][cardPosition] = %d\n", pre->hand[player][cardPosition]);	 
call    0 returned 100%
        3:  241:    printf("\tpost.playedCardCount = %d pre.playedCardCount = %d\n", post->playedCardCount, pre->playedCardCount);
call    0 returned 100%
        3:  242:    printf("\tpost.playCards[0] = %d pre.playedCards[0] = %d\n", 
call    0 returned 100%
        -:  243:            post->playedCards[0], pre->playedCards[0]);
        3:  244:    printf("\tpost.discardCount[p] = %d pre.discardCount[p] = %d\n", post->discardCount[player], pre->discardCount[player]); 
call    0 returned 100%
        3:  245:    printf("\tpost.deckCount[p] = %d pre.deckCount[p] = %d\n", post->deckCount[player], pre->deckCount[player]);
call    0 returned 100%
        3:  246:	printf("\ttreasure = %d Player = %d\n\n", treasure, player); 
call    0 returned 100%
        3:  247:}
        -:  248:
function noPlayerStateChanges called 45 returned 100% blocks executed 40%
       45:  249:int noPlayerStateChanges(struct gameState *preCall, struct gameState *postCall, int p){
        -:  250:    //int i = 0;	
        -:  251:	//test no other changes occured to game state	
       45:  252:	if(preCall->deckCount[p] != postCall->deckCount[p]){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  253:		printf("ERROR noPlayerStateChanges DECKCOUNT's off\n");
call    0 never executed
    #####:  254:		return -1;
        -:  255:	}
       45:  256:	if(preCall->discardCount[p] != postCall->discardCount[p]){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  257:		printf("ERROR noPlayerStateChanges DISCARDCOUNT's off\n");
call    0 never executed
    #####:  258:		return -1;
        -:  259:	}
       45:  260:	if(preCall->handCount[p] != postCall->handCount[p]){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  261:		printf("ERROR noPlayerStateChanges HANDCOUNT's off\n");
call    0 never executed
    #####:  262:		return -1;
        -:  263:	}
       45:  264:	if(memcmp(&preCall->deck[p], &postCall->deck[p], MAX_DECK) != 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  265:		printf("ERROR noPlayerStateChanges DECK is off\n");
call    0 never executed
        -:  266:
        -:  267:		//for testing
        -:  268:        //for(i=0; i < MAX_DECK ; ++i){
        -:  269:        //    printf("\tpreCall-deck[%d][%d] = %d, postCall-deck[%d][%d] = %d\n",p, i, preCall->deck[p][i], p, i, postCall->deck[p][i]);
        -:  270:        //}
        -:  271:
    #####:  272:		return -1;
        -:  273:	}
       45:  274:	if(memcmp(&preCall->discard[p], &postCall->discard[p], MAX_DECK) != 0){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  275:		printf("ERROR noPlayerStateChanges DISCARD DECK is off\n");
call    0 never executed
    #####:  276:		return -1;
        -:  277:	}
       45:  278:	if(memcmp(&preCall->hand[p], &postCall->hand[p], MAX_HAND) != 0){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  279:		printf("ERROR noPlayerStateChanges HAND is off\n");
call    0 never executed
    #####:  280:		return -1;
        -:  281:	}
       45:  282:	return 0;
        -:  283:}
        -:  284:
function noVictoryCardChanges called 1 returned 100% blocks executed 86%
        1:  285:int noVictoryCardChanges(struct gameState *preCall, struct gameState *postCall, int p){
        1:  286:	if(scoreFor(p, preCall) != scoreFor(p, postCall)+1){//should be a difference of 1
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  287:		printf("ERROR noVictoryCardChanges\n");
call    0 returned 100%
        1:  288:		return -1;
        -:  289:	}
    #####:  290:	return 0;
        -:  291:}
        -:  292:
function noDominionCardChanges called 45 returned 100% blocks executed 60%
       45:  293:int noDominionCardChanges(struct gameState *preCall, struct gameState *postCall, int p, int deckSize){
       45:  294:	if(memcmp(&preCall->deck[p], &postCall->deck[p], sizeof(int) *  deckSize) != 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  295:		printf("ERROR noDominionCardChanges\n");
call    0 never executed
    #####:  296:		return -1;
        -:  297:	}
       45:  298:	return 0;
        -:  299:}
