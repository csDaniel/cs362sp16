        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:10
        -:    0:Programs:10
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
function compare called 4707846 returned 100% blocks executed 100%
  4707846:   10:int compare(const void* a, const void* b) {
  4707846:   11:  if (*(int*)a > *(int*)b)
branch  0 taken 19% (fallthrough)
branch  1 taken 81%
   874976:   12:    return 1;
  3832870:   13:  if (*(int*)a < *(int*)b)
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
  1165904:   14:    return -1;
  2666966:   15:  return 0;
        -:   16:}
        -:   17:
function newGame called 0 returned 0% blocks executed 0%
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
function initializeGame called 600508 returned 100% blocks executed 97%
   600508:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
   600508:   46:  SelectStream(1);
call    0 returned 100%
   600508:   47:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   48:  
        -:   49:  //check number of players
   600508:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
   600508:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
  2072976:   59:  for (i = 0; i < 10; i++)
branch  0 taken 97%
branch  1 taken 3% (fallthrough)
        -:   60:    {
 19703240:   61:      for (j = 0; j < 10; j++)
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
        -:   62:        {
 18230772:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 3% (fallthrough)
branch  3 taken 97%
        -:   64:	    {
   539587:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
    60921:   75:  if (numPlayers == 2)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:   76:    {
    15396:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
    45525:   79:  else if (numPlayers == 3)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   80:    {
    15122:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
    30403:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
    60921:   89:  if (numPlayers == 2)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:   90:    {
    15396:   91:      state->supplyCount[estate] = 8;
    15396:   92:      state->supplyCount[duchy] = 8;
    15396:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    45525:   97:      state->supplyCount[estate] = 12;
    45525:   98:      state->supplyCount[duchy] = 12;
    45525:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
    60921:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    60921:  104:  state->supplyCount[silver] = 40;
    60921:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
  1279341:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  109:    {
 11124699:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
        -:  111:	{
 10319980:  112:	  if (kingdomCards[j] == i)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
   413701:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
        -:  116:		{
    82146:  117:		  if (numPlayers == 2){ 
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
    10340:  118:		    state->supplyCount[i] = 8; 
        -:  119:		  }
    30733:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
   372628:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
   413701:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
  9906279:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
   258691:  140:  for (i = 0; i < numPlayers; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  141:    {
   197770:  142:      state->deckCount[i] = 0;
   791080:  143:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  144:	{
   593310:  145:	  state->deck[i][j] = estate;
   593310:  146:	  state->deckCount[i]++;
        -:  147:	}
  1582160:  148:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  149:	{
  1384390:  150:	  state->deck[i][j] = copper;
  1384390:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
   258691:  156:  for (i = 0; i < numPlayers; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  157:    {
   197770:  158:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
   258691:  165:  for (i = 0; i < numPlayers; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
   197770:  168:      state->handCount[i] = 0;
   197770:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
  1705788:  178:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  179:    {
  1644867:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
    60921:  184:  state->outpostPlayed = 0;
    60921:  185:  state->phase = 0;
    60921:  186:  state->numActions = 1;
    60921:  187:  state->numBuys = 1;
    60921:  188:  state->playedCardCount = 0;
    60921:  189:  state->whoseTurn = 0;
    60921:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
   365526:  194:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
   304605:  195:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  196:  }
        -:  197:
    60921:  198:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  199:
    60921:  200:  return 0;
        -:  201:}
        -:  202:
function shuffle called 199842 returned 100% blocks executed 100%
   199842:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
   199842:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
   199842:  211:  if (state->deckCount[player] < 1)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
     1048:  212:    return -1;
   198794:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
  2625636:  216:  while (state->deckCount[player] > 0) {
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
  2228048:  217:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
  2228048:  218:    newDeck[newDeckPos] = state->deck[player][card];
  2228048:  219:    newDeckPos++;
 28050424:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
 25822376:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
  2228048:  223:    state->deckCount[player]--;
        -:  224:  }
  2426842:  225:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
  2228048:  226:    state->deck[player][i] = newDeck[i];
  2228048:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
   198794:  230:  return 0;
        -:  231:}
        -:  232:
function playCard called 0 returned 0% blocks executed 0%
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
call    0 never executed
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  270:	
    #####:  271:  return 0;
        -:  272:}
        -:  273:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  315:}
        -:  316:
function handCard called 0 returned 0% blocks executed 0%
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  322:int supplyCount(int card, struct gameState *state) {
    #####:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
function fullDeckCount called 8121530 returned 100% blocks executed 100%
  8121530:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
  8121530:  328:  int count = 0;
        -:  329:
1856389980:  330:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  331:    {
1848268450:  332:      if (state->deck[player][i] == card) count++;
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:  333:    }
        -:  334:
2429018463:  335:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  336:    {
2420896933:  337:      if (state->hand[player][i] == card) count++;
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:  338:    }
        -:  339:
1261061308:  340:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  341:    {
1252939778:  342:      if (state->discard[player][i] == card) count++;
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:  343:    }
        -:  344:
  8121530:  345:  return count;
        -:  346:}
        -:  347:
function whoseTurn called 600192 returned 100% blocks executed 100%
   600192:  348:int whoseTurn(struct gameState *state) {
   600192:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
    #####:  397:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  398:    {
    #####:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
    #####:  403:  j = 0;
    #####:  404:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  405:    {
    #####:  406:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  407:	{
    #####:  408:	  j++;
        -:  409:	}
        -:  410:    }
    #####:  411:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
    #####:  416:  return 0;
        -:  417:}
        -:  418:
function scoreFor called 600956 returned 100% blocks executed 100%
   600956:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
   600956:  422:  int score = 0;
        -:  423:  //score from hand
151633173:  424:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  425:    {
151032217:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
151032217:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
151032217:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
151032217:  429:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
151032217:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
151032217:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
call    2 returned 100%
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
 72598934:  435:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  436:    {
 71997978:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
 71997978:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
 71997978:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
 71997978:  440:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
 71997978:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
 71997978:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
call    2 returned 100%
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
 72598934:  446:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  447:    {
 71997978:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
 71997978:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
 71997978:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
 71997978:  451:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
 71997978:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
 71997978:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
call    2 returned 100%
        -:  454:    }
        -:  455:
   600956:  456:  return score;
        -:  457:}
        -:  458:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  470:	{
    #####:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  515:	{
    #####:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
function drawCard called 6502484 returned 100% blocks executed 100%
  6502484:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
  6502484:  530:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
   251386:  535:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   250348:  536:      state->deck[player][i] = state->discard[player][i];
   250348:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
     1038:  540:    state->deckCount[player] = state->discardCount[player];
     1038:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
     1038:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
     1038:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
     1038:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
     1038:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
     1038:  561:    if (deckCounter == 0)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       14:  562:      return -1;
        -:  563:
     1024:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     1024:  565:    state->deckCount[player]--;
     1024:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
  6501446:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
  6501446:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
  6501446:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  6501446:  578:    state->deckCount[player]--;
  6501446:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
  6502470:  582:  return 0;
        -:  583:}
        -:  584:
function getCost called 31 returned 100% blocks executed 100%
       31:  585:int getCost(int cardNumber)
        -:  586:{
       31:  587:  switch( cardNumber ) 
branch  0 taken 3%
branch  1 taken 3%
branch  2 taken 3%
branch  3 taken 3%
branch  4 taken 3%
branch  5 taken 3%
branch  6 taken 3%
branch  7 taken 3%
branch  8 taken 3%
branch  9 taken 3%
branch 10 taken 3%
branch 11 taken 3%
branch 12 taken 3%
branch 13 taken 10%
branch 14 taken 3%
branch 15 taken 3%
branch 16 taken 3%
branch 17 taken 3%
branch 18 taken 3%
branch 19 taken 3%
branch 20 taken 3%
branch 21 taken 3%
branch 22 taken 3%
branch 23 taken 3%
branch 24 taken 3%
branch 25 taken 3%
branch 26 taken 3%
branch 27 taken 6%
        -:  588:    {
        -:  589:    case curse:
        1:  590:      return 0;
        -:  591:    case estate:
        1:  592:      return 2;
        -:  593:    case duchy:
        1:  594:      return 5;
        -:  595:    case province:
        1:  596:      return 8;
        -:  597:    case copper:
        1:  598:      return 0;
        -:  599:    case silver:
        1:  600:      return 3;
        -:  601:    case gold:
        1:  602:      return 6;
        -:  603:    case adventurer:
        1:  604:      return 6;
        -:  605:    case council_room:
        1:  606:      return 5;
        -:  607:    case feast:
        1:  608:      return 4;
        -:  609:    case gardens:
        1:  610:      return 4;
        -:  611:    case mine:
        1:  612:      return 5;
        -:  613:    case remodel:
        1:  614:      return 4;
        -:  615:    case smithy:
        3:  616:      return 4;
        -:  617:    case village:
        1:  618:      return 3;
        -:  619:    case baron:
        1:  620:      return 4;
        -:  621:    case great_hall:
        1:  622:      return 3;
        -:  623:    case minion:
        1:  624:      return 5;
        -:  625:    case steward:
        1:  626:      return 3;
        -:  627:    case tribute:
        1:  628:      return 5;
        -:  629:    case ambassador:
        1:  630:      return 3;
        -:  631:    case cutpurse:
        1:  632:      return 4;
        -:  633:    case embargo: 
        1:  634:      return 2;
        -:  635:    case outpost:
        1:  636:      return 5;
        -:  637:    case salvager:
        1:  638:      return 4;
        -:  639:    case sea_hag:
        1:  640:      return 4;
        -:  641:    case treasure_map:
        1:  642:      return 4;
        -:  643:    }
        -:  644:	
        2:  645:  return -1;
        -:  646:}
        -:  647:/*********************************************************************************************************************
        -:  648:**********************************************************************************************************************
        -:  649:**CARD EFFECT FUNCTION
        -:  650:**********************************************************************************************************************
        -:  651:**********************************************************************************************************************/
function cardEffect called 600192 returned 100% blocks executed 7%
   600192:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:  int i;
        -:  655:  int j;
        -:  656:  int k;
        -:  657:  int x;
        -:  658:  int index;
   600192:  659:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
   600192:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
   600192:  662:  int tributeRevealedCards[2] = {-1, -1};
        -:  663:  int temphand[MAX_HAND];// moved above the if statement
   600192:  664:  int drawntreasure=0;
        -:  665:  int cardDrawn;
   600192:  666:  int z = 0;// this is the counter for the temp hand
   600192:  667:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
   200089:  668:    nextPlayer = 0;
        -:  669:  }
        -:  670:  
        -:  671:	
        -:  672:  //uses switch to select card and perform actions
   600192:  673:  switch( card ) 
branch  0 taken 50%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 50%
branch  7 taken 1%
branch  8 taken 0%
branch  9 taken 1%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  674:    {
        -:  675:		
        -:  676:	/*********************************************************************************************************************	
        -:  677:	**MY_ADVENTURER FUNCTION	
        -:  678:	**********************************************************************************************************************/	
        -:  679:    case adventurer:
   300012:  680:      return myAdventurer(state, currentPlayer );
call    0 returned 100%
        -:  681:			
        -:  682:    case council_room:
        -:  683:      //+4 Cards
    #####:  684:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  685:	{
    #####:  686:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  687:	}
        -:  688:			
        -:  689:      //+1 Buy
    #####:  690:      state->numBuys++;
        -:  691:			
        -:  692:      //Each other player draws a card
    #####:  693:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  694:	{
    #####:  695:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  696:	    {
    #####:  697:	      drawCard(i, state);
call    0 never executed
        -:  698:	    }
        -:  699:	}
        -:  700:			
        -:  701:      //put played card in played card pile
    #####:  702:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  703:			
    #####:  704:      return 0;
        -:  705:	/*********************************************************************************************************************	
        -:  706:	**MY_FEAST FUNCTION	
        -:  707:	**********************************************************************************************************************/			
        -:  708:    case feast:
    #####:  709:      return myFeast(state, currentPlayer, choice1);
call    0 never executed
        -:  710:	  
        -:  711:    case gardens:
    #####:  712:      return -1;
        -:  713:			
        -:  714:    case mine:
    #####:  715:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  716:
    #####:  717:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  718:	{
    #####:  719:	  return -1;
        -:  720:	}
        -:  721:		
    #####:  722:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:
    #####:  727:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  728:	{
    #####:  729:	  return -1;
        -:  730:	}
        -:  731:
    #####:  732:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  733:
        -:  734:      //discard card from hand
    #####:  735:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  736:
        -:  737:      //discard trashed card
    #####:  738:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  739:	{
    #####:  740:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  741:	    {
    #####:  742:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  743:	      break;
        -:  744:	    }
        -:  745:	}
        -:  746:			
    #####:  747:      return 0;
        -:  748:		
        -:  749:	/*********************************************************************************************************************	
        -:  750:	**MY_REMODEL FUNCTION	
        -:  751:	**********************************************************************************************************************/		
        -:  752:    case remodel:
    #####:  753:      return myRemodel(state, currentPlayer, choice1, choice2, handPos);
call    0 never executed
        -:  754:	
        -:  755:	/*********************************************************************************************************************	
        -:  756:	**MY_SMITHY FUNCTION	
        -:  757:	**********************************************************************************************************************/		
        -:  758:    case smithy:
   300090:  759:      return mySmithy(state, currentPlayer, handPos);
call    0 returned 100%
        -:  760:		
        -:  761:    case village:
        -:  762:      //+1 Card
       45:  763:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  764:			
        -:  765:      //+2 Actions
       45:  766:      state->numActions = state->numActions + 2;
        -:  767:			
        -:  768:      //discard played card from hand
       45:  769:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
       45:  770:      return 0;
        -:  771:		
        -:  772:    case baron:
    #####:  773:      state->numBuys++;//Increase buys by 1!
    #####:  774:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  775:	int p = 0;//Iterator for hand!
    #####:  776:	int card_not_discarded = 1;//Flag for discard set!
    #####:  777:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  778:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  779:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  780:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  781:	    state->discardCount[currentPlayer]++;
    #####:  782:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  783:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  784:	    }
    #####:  785:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  786:	    state->handCount[currentPlayer]--;
    #####:  787:	    card_not_discarded = 0;//Exit the loop
        -:  788:	  }
    #####:  789:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  790:	    if(DEBUG) {
        -:  791:	      printf("No estate cards in your hand, invalid choice\n");
        -:  792:	      printf("Must gain an estate if there are any\n");
        -:  793:	    }
    #####:  794:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  795:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  796:	      state->supplyCount[estate]--;//Decrement estates
    #####:  797:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  798:		isGameOver(state);
call    0 never executed
        -:  799:	      }
        -:  800:	    }
    #####:  801:	    card_not_discarded = 0;//Exit the loop
        -:  802:	  }
        -:  803:			    
        -:  804:	  else{
    #####:  805:	    p++;//Next card
        -:  806:	  }
        -:  807:	}
        -:  808:      }
        -:  809:			    
        -:  810:      else{
    #####:  811:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  812:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  813:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  814:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  815:	    isGameOver(state);
call    0 never executed
        -:  816:	  }
        -:  817:	}
        -:  818:      }
        -:  819:	    
        -:  820:      
    #####:  821:      return 0;
        -:  822:		
        -:  823:    case great_hall:
        -:  824:      //+1 Card
       45:  825:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  826:			
        -:  827:      //+1 Actions
       45:  828:      state->numActions++;
        -:  829:			
        -:  830:      //discard card from hand
       45:  831:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
       45:  832:      return 0;
        -:  833:		
        -:  834:    case minion:
        -:  835:      //+1 action
    #####:  836:      state->numActions++;
        -:  837:			
        -:  838:      //discard card from hand
    #####:  839:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  840:			
    #####:  841:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  842:	{
    #####:  843:	  state->coins = state->coins + 2;
        -:  844:	}
        -:  845:			
    #####:  846:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  847:	{
        -:  848:	  //discard hand
    #####:  849:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  850:	    {
    #####:  851:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  852:	    }
        -:  853:				
        -:  854:	  //draw 4
    #####:  855:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  856:	    {
    #####:  857:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  858:	    }
        -:  859:				
        -:  860:	  //other players discard hand and redraw if hand size > 4
    #####:  861:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  862:	    {
    #####:  863:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  864:		{
    #####:  865:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  866:		    {
        -:  867:		      //discard hand
    #####:  868:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  869:			{
    #####:  870:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  871:			}
        -:  872:							
        -:  873:		      //draw 4
    #####:  874:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  875:			{
    #####:  876:			  drawCard(i, state);
call    0 never executed
        -:  877:			}
        -:  878:		    }
        -:  879:		}
        -:  880:	    }
        -:  881:				
        -:  882:	}
    #####:  883:      return 0;
        -:  884:		
        -:  885:    case steward:
    #####:  886:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  887:	{
        -:  888:	  //+2 cards
    #####:  889:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  890:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  891:	}
    #####:  892:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  893:	{
        -:  894:	  //+2 coins
    #####:  895:	  state->coins = state->coins + 2;
        -:  896:	}
        -:  897:      else
        -:  898:	{
        -:  899:	  //trash 2 cards in hand
    #####:  900:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  901:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  902:	}
        -:  903:			
        -:  904:      //discard card from hand
    #####:  905:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  906:      return 0;
        -:  907:
        -:  908:	/*********************************************************************************************************************	
        -:  909:	**MY_TRIBUTE FUNCTION	
        -:  910:	**********************************************************************************************************************/	  
        -:  911:    case tribute:
    #####:  912:		return myTribute(state, currentPlayer);
call    0 never executed
        -:  913:		
        -:  914:    case ambassador:
    #####:  915:      j = 0;		//used to check if player has enough cards to discard
        -:  916:
    #####:  917:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  918:	{
    #####:  919:	  return -1;				
        -:  920:	}
        -:  921:
    #####:  922:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  923:	{
    #####:  924:	  return -1;
        -:  925:	}
        -:  926:
    #####:  927:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  928:	{
    #####:  929:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  930:	    {
    #####:  931:	      j++;
        -:  932:	    }
        -:  933:	}
    #####:  934:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  935:	{
    #####:  936:	  return -1;				
        -:  937:	}
        -:  938:
        -:  939:      if (DEBUG) 
        -:  940:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  941:
        -:  942:      //increase supply count for choosen card by amount being discarded
    #####:  943:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  944:			
        -:  945:      //each other player gains a copy of revealed card
    #####:  946:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  947:	{
    #####:  948:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  949:	    {
    #####:  950:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  951:	    }
        -:  952:	}
        -:  953:
        -:  954:      //discard played card from hand
    #####:  955:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  956:
        -:  957:      //trash copies of cards returned to supply
    #####:  958:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  959:	{
    #####:  960:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  961:	    {
    #####:  962:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  963:		{
    #####:  964:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  965:		  break;
        -:  966:		}
        -:  967:	    }
        -:  968:	}			
        -:  969:
    #####:  970:      return 0;
        -:  971:		
        -:  972:    case cutpurse:
        -:  973:
    #####:  974:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  975:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  976:	{
    #####:  977:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  978:	    {
    #####:  979:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  980:		{
    #####:  981:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  982:		    {
    #####:  983:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  984:		      break;
        -:  985:		    }
    #####:  986:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  987:		    {
    #####:  988:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  989:			{
        -:  990:			  if (DEBUG)
        -:  991:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  992:			}	
    #####:  993:		      break;
        -:  994:		    }		
        -:  995:		}
        -:  996:					
        -:  997:	    }
        -:  998:				
        -:  999:	}				
        -: 1000:
        -: 1001:      //discard played card from hand
    #####: 1002:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1003:
    #####: 1004:      return 0;
        -: 1005:
        -: 1006:		
        -: 1007:    case embargo: 
        -: 1008:      //+2 Coins
    #####: 1009:      state->coins = state->coins + 2;
        -: 1010:			
        -: 1011:      //see if selected pile is in play
    #####: 1012:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1013:	{
    #####: 1014:	  return -1;
        -: 1015:	}
        -: 1016:			
        -: 1017:      //add embargo token to selected supply pile
    #####: 1018:      state->embargoTokens[choice1]++;
        -: 1019:			
        -: 1020:      //trash card
    #####: 1021:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1022:      return 0;
        -: 1023:		
        -: 1024:    case outpost:
        -: 1025:      //set outpost flag
    #####: 1026:      state->outpostPlayed++;
        -: 1027:			
        -: 1028:      //discard card
    #####: 1029:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1030:      return 0;
        -: 1031:		
        -: 1032:    case salvager:
        -: 1033:      //+1 buy
    #####: 1034:      state->numBuys++;
        -: 1035:			
    #####: 1036:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1037:	{
        -: 1038:	  //gain coins equal to trashed card
    #####: 1039:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1040:	  //trash card
    #####: 1041:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1042:	}
        -: 1043:			
        -: 1044:      //discard card
    #####: 1045:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1046:      return 0;
        -: 1047:		
        -: 1048:    case sea_hag:
    #####: 1049:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1050:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1051:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1052:	  state->discardCount[i]++;
    #####: 1053:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1054:	}
        -: 1055:      }
    #####: 1056:      return 0;
        -: 1057:		
        -: 1058:    case treasure_map:
        -: 1059:      //search hand for another treasure_map
    #####: 1060:      index = -1;
    #####: 1061:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1062:	{
    #####: 1063:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1064:	    {
    #####: 1065:	      index = i;
    #####: 1066:	      break;
        -: 1067:	    }
        -: 1068:	}
    #####: 1069:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1070:	{
        -: 1071:	  //trash both treasure cards
    #####: 1072:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1073:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1074:
        -: 1075:	  //gain 4 Gold cards
    #####: 1076:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1077:	    {
    #####: 1078:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1079:	    }
        -: 1080:				
        -: 1081:	  //return success
    #####: 1082:	  return 1;
        -: 1083:	}
        -: 1084:			
        -: 1085:      //no second treasure_map found in hand
    #####: 1086:      return -1;
        -: 1087:    }
        -: 1088:	
    #####: 1089:  return -1;
        -: 1090:}
        -: 1091:
function discardCard called 900400 returned 100% blocks executed 89%
   900400: 1092:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1093:{
        -: 1094:	
        -: 1095:  //if card is not trashed, added to Played pile 
   900400: 1096:  if (trashFlag < 1)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -: 1097:    {
        -: 1098:      //add card to played pile
   900290: 1099:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
   900290: 1100:      state->playedCardCount++;
        -: 1101:    }
        -: 1102:	
        -: 1103:  //set played card to -1
   900400: 1104:  state->hand[currentPlayer][handPos] = -1;
        -: 1105:	
        -: 1106:  //remove card from player's hand
   900400: 1107:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1108:    {
        -: 1109:      //reduce number of cards in hand
     1837: 1110:      state->handCount[currentPlayer]--;
        -: 1111:    }
   898563: 1112:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1113:    {
        -: 1114:      //reduce number of cards in hand
    #####: 1115:      state->handCount[currentPlayer]--;
        -: 1116:    }
        -: 1117:  else 	
        -: 1118:    {
        -: 1119:      //replace discarded card with last card in hand
   898563: 1120:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1121:      //set last card to -1
   898563: 1122:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1123:      //reduce number of cards in hand
   898563: 1124:      state->handCount[currentPlayer]--;
        -: 1125:    }
        -: 1126:	
   900400: 1127:  return 0;
        -: 1128:}
        -: 1129:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1130:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1131:{
        -: 1132:  //Note: supplyPos is enum of choosen card
        -: 1133:	
        -: 1134:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1135:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1136:    {
    #####: 1137:      return -1;
        -: 1138:    }
        -: 1139:	
        -: 1140:  //added card for [whoseTurn] current player:
        -: 1141:  // toFlag = 0 : add to discard
        -: 1142:  // toFlag = 1 : add to deck
        -: 1143:  // toFlag = 2 : add to hand
        -: 1144:
    #####: 1145:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1146:    {
    #####: 1147:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1148:      state->deckCount[player]++;
        -: 1149:    }
    #####: 1150:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1151:    {
    #####: 1152:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1153:      state->handCount[player]++;
        -: 1154:    }
        -: 1155:  else
        -: 1156:    {
    #####: 1157:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1158:      state->discardCount[player]++;
        -: 1159:    }
        -: 1160:	
        -: 1161:  //decrease number in supply pile
    #####: 1162:  state->supplyCount[supplyPos]--;
        -: 1163:	 
    #####: 1164:  return 0;
        -: 1165:}
        -: 1166:
function updateCoins called 61009 returned 100% blocks executed 100%
    61009: 1167:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1168:{
        -: 1169:  int i;
        -: 1170:	
        -: 1171:  //reset coin count
    61009: 1172:  state->coins = 0;
        -: 1173:
        -: 1174:  //add coins for each Treasure card in player's hand
   376900: 1175:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -: 1176:    {
   315891: 1177:      if (state->hand[player][i] == copper)
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
        -: 1178:	{
   243692: 1179:	  state->coins += 1;
        -: 1180:	}
    72199: 1181:      else if (state->hand[player][i] == silver)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1182:	{
       22: 1183:	  state->coins += 2;
        -: 1184:	}
    72177: 1185:      else if (state->hand[player][i] == gold)
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
        -: 1186:	{
    11022: 1187:	  state->coins += 3;
        -: 1188:	}	
        -: 1189:    }	
        -: 1190:
        -: 1191:  //add bonus
    61009: 1192:  state->coins += bonus;
        -: 1193:
    61009: 1194:  return 0;
        -: 1195:}
        -: 1196:
        -: 1197:/**********************************************************************************
        -: 1198:*My refactored code
        -: 1199:***********************************************************************************/
function myAdventurer called 300012 returned 100% blocks executed 100%
   300012: 1200:int myAdventurer(struct gameState *state, int currentPlayer ){
        -: 1201:      
   300012: 1202:  int z = 0;// this is the counter for the temp hand
        -: 1203:  int temphand[MAX_HAND];// moved above the if statement
   300012: 1204:  int drawntreasure=0;
   300012: 1205:  int cardDrawn = 0;
   300012: 1206:  int reshuffle = 0;
        -: 1207:
        -: 1208:  //FIX SO DECK WITH NO TREASURE CARDS EXITS
  2798553: 1209:	while(drawntreasure < 2 && reshuffle < 2){
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
branch  2 taken 99%
branch  3 taken 1% (fallthrough)
  2198529: 1210:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      519: 1211:		  shuffle(currentPlayer, state);
call    0 returned 100%
      519: 1212:          reshuffle++;
        -: 1213:		}
  2198529: 1214:		drawCard(currentPlayer, state);
call    0 returned 100%
  2198529: 1215:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1216:		
        -: 1217:		//ADDED A LOGIC BUG HERE WHERE CARD DRAWN IS ASSIGNED TO GOLD
        -: 1218:        //FIXED LOGIC ERROR
  2198529: 1219:		if (cardDrawn == copper || cardDrawn == silver || (cardDrawn == gold))
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
branch  2 taken 90% (fallthrough)
branch  3 taken 10%
branch  4 taken 11% (fallthrough)
branch  5 taken 89%
   600022: 1220:		  drawntreasure++;
        -: 1221:		else{
  1598507: 1222:		  temphand[z]=cardDrawn;
  1598507: 1223:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
  1598507: 1224:		  z++;
        -: 1225:		}
        -: 1226:    }
  2198531: 1227:    while(z-1>=0){
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
  1598507: 1228:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
  1598507: 1229:		z=z-1;
        -: 1230:    }
   300012: 1231:      return 0;
        -: 1232:}
        -: 1233:
function myFeast called 0 returned 0% blocks executed 0%
    #####: 1234:int myFeast(struct gameState *state, int currentPlayer, int choice1){
        -: 1235:	
        -: 1236:	int i;
        -: 1237:	int x;
        -: 1238:	int temphand[MAX_HAND];// moved above the if statement
        -: 1239:	
        -: 1240:	//gain card with cost up to 5
        -: 1241:	//Backup hand
    #####: 1242:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1243:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1244:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1245:	}
        -: 1246:	//Backup hand
        -: 1247:	//Update Coins for Buy
        -: 1248:	//ADDED BUG WHERE CURRENT PLAYER + 1 HAS THEIR COINS INCREMENTED
        -: 1249:    //FIXED BUG
    #####: 1250:	updateCoins(currentPlayer, state, 5);
call    0 never executed
        -: 1251:	
    #####: 1252:	x = 1;//Condition to loop on
    #####: 1253:	while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1254:		if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1255:			if (DEBUG){
        -: 1256:				printf("None of that card left, sorry!\n");
        -: 1257:			}
        -: 1258:
        -: 1259:			if (DEBUG){
        -: 1260:				printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1261:			}
        -: 1262:		}
    #####: 1263:		else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1264:			printf("That card is too expensive!\n");
call    0 never executed
        -: 1265:
        -: 1266:			if (DEBUG){
        -: 1267:				printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1268:			}
        -: 1269:		} else {
        -: 1270:			if (DEBUG){
        -: 1271:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1272:			}
        -: 1273:
    #####: 1274:			gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1275:			x = 0;//No more buying cards
        -: 1276:
        -: 1277:			if (DEBUG){
        -: 1278:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1279:			}
        -: 1280:		}
        -: 1281:	}     
        -: 1282:
        -: 1283:	//Reset Hand
    #####: 1284:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1285:		state->hand[currentPlayer][i] = temphand[i];
    #####: 1286:		temphand[i] = -1;
        -: 1287:	}
        -: 1288:	//Reset Hand
        -: 1289:			
    #####: 1290:	return 0;	
        -: 1291:}
        -: 1292:
function myRemodel called 0 returned 0% blocks executed 0%
    #####: 1293:int myRemodel(struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos){
        -: 1294:	
        -: 1295:	int i;	
    #####: 1296:	int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1297:
    #####: 1298:	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1299:	{
    #####: 1300:		return -1;
        -: 1301:	}
        -: 1302:
    #####: 1303:	gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1304:
        -: 1305:	//discard card from hand
    #####: 1306:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1307:
        -: 1308:	//discard trashed card
    #####: 1309:	for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1310:	{
        -: 1311:		//ADDED LOGIC BUG WHERE CARD DOESN'T GET DISCARDED PROPERLY
        -: 1312:        //FIXED LOGIC BUG
    #####: 1313:		if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1314:		{
    #####: 1315:			discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####: 1316:			break;
        -: 1317:		}
        -: 1318:	}
        -: 1319:
    #####: 1320:	return 0;
        -: 1321:}
        -: 1322:
function mySmithy called 300090 returned 100% blocks executed 100%
   300090: 1323:int mySmithy(struct gameState *state, int currentPlayer, int handPos){
        -: 1324:	//+3 Cards
        -: 1325:	int i;
  1200360: 1326:	for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -: 1327:	{
   900270: 1328:		drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1329:	}
        -: 1330:		
        -: 1331:	//discard card from hand
        -: 1332:	//ADDED LOGIC ERROR SET TRASH FLAG TO 1
        -: 1333:    //FIXED lOGIC BUG
   300090: 1334:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
   300090: 1335:	return 0;
        -: 1336:}
        -: 1337:
function myTribute called 0 returned 0% blocks executed 0%
    #####: 1338:int myTribute(struct gameState *state, int currentPlayer ){
        -: 1339:	
        -: 1340:	int i;	
        -: 1341:	
        -: 1342:	//ADDED A LOGIC BUG WHERE NEXT PLAYER IS SET TO CURRENT PLAYER
        -: 1343:    //FIXED LOGIC BUG
    #####: 1344:	int nextPlayer = currentPlayer + 1;
        -: 1345:
    #####: 1346:    if(nextPlayer > (state->numPlayers-1)){
branch  0 never executed
branch  1 never executed
    #####: 1347:        nextPlayer = 0;
        -: 1348:    }
        -: 1349:
    #####: 1350:	int tributeRevealedCards[2] = {-1, -1};
        -: 1351:	
    #####: 1352:	int z = 0;// this is the counter for the temp hand
    #####: 1353:	if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####: 1354:		nextPlayer = 0;
        -: 1355:	}
        -: 1356:	
    #####: 1357:	if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1358:		if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1359:			tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1360:			state->deckCount[nextPlayer]--;
    #####: 1361:		} else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1362:			tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1363:			state->discardCount[nextPlayer]--;
        -: 1364:		} else{
        -: 1365:			//No Card to Reveal
        -: 1366:			if (DEBUG){
        -: 1367:				printf("No cards to reveal\n");
        -: 1368:			}
        -: 1369:		}
        -: 1370:	} else{
    #####: 1371:		if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1372:			for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1373:				state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1374:				state->deckCount[nextPlayer]++;
    #####: 1375:				state->discard[nextPlayer][i] = -1;
    #####: 1376:				state->discardCount[nextPlayer]--;
        -: 1377:			}
        -: 1378:					
    #####: 1379:			shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1380:		} 
    #####: 1381:		tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1382:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1383:		state->deckCount[nextPlayer]--;
    #####: 1384:		tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1385:		state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1386:		state->deckCount[nextPlayer]--;
        -: 1387:	}    
        -: 1388:		   
    #####: 1389:	if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1390:		state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1391:		state->playedCardCount++;
    #####: 1392:		tributeRevealedCards[1] = -1;
        -: 1393:	}
        -: 1394:
    #####: 1395:	for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1396:		if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1397:			state->coins += 2;
        -: 1398:		}
        -: 1399:			
    #####: 1400:		else if (	tributeRevealedCards[i] == estate ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1401:					tributeRevealedCards[i] == duchy ||
branch  0 never executed
branch  1 never executed
    #####: 1402:					tributeRevealedCards[i] == province ||
branch  0 never executed
branch  1 never executed
    #####: 1403:					tributeRevealedCards[i] == gardens ||
branch  0 never executed
branch  1 never executed
    #####: 1404:					tributeRevealedCards[i] == great_hall ){//Victory Card Found
    #####: 1405:			drawCard(currentPlayer, state);
call    0 never executed
    #####: 1406:			drawCard(currentPlayer, state);
call    0 never executed
        -: 1407:		}
        -: 1408:		else{//Action Card
    #####: 1409:			state->numActions = state->numActions + 2;
        -: 1410:		}
        -: 1411:	}
        -: 1412:
    #####: 1413:	return 0;
        -: 1414:}
        -: 1415:
        -: 1416:/**********************************************************************************
        -: 1417:*End of my refactored code
        -: 1418:***********************************************************************************/
        -: 1419:
        -: 1420:
        -: 1421://end of dominion.c
        -: 1422:
