        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Ben Fisher
        -:    3: * fisheben@oregonstate.edu
        -:    4: * file: unittest2.c
        -:    5: * Description: Skeleton taken from CS362 week4 module.
        -:    6: * Demonstration of how to write unit tests for dominion-base
        -:    7: * File tests the drawCard in the dominion_helpers.h interface
        -:    8: * implementation is in the dominion.c file
        -:    9: *
        -:   10: * Include the following lines in your makefile:
        -:   11: *
        -:   12: * unittest2: unittest2.c dominion.o rngs.o
        -:   13: *      gcc -o unittest2 -g  unittest2.c dominion.o rngs.o $(CFLAGS)
        -:   14: * -----------------------------------------------------------------------
        -:   15: */
        -:   16: 
        -:   17: /*
        -:   18: * DRAW CARD FUNCTION
        -:   19: * No documentation in the implementation or the interface
        -:   20: * Description: Function drawCard will draw a card from the players deck and add it to
        -:   21: * their hand.
        -:   22: * Preconditions: player and state are valid states of the game
        -:   23: * Postconditions: A card has been removed from the players deck and a card has been added to
        -:   24: * the players hand.
        -:   25: * Testing Requirements: 
        -:   26: * Only a single card should be removed from the deck and added to the players hand.
        -:   27: * If the deck is empty then the function will add the discard pile to the deck
        -:   28: * The discard deck will then be empty after it's added to the deck.
        -:   29: * No other changes to the game state should occur.
        -:   30: * The players hand count should increase by one if deck is not empty
        -:   31: * The players deck count should decrease by one if deck is not empty
        -:   32: * Player should be a number between 2 and MAX_PLAYERS
        -:   33: * If player has no cards in deck and no cards in discard pile then no changes should be made
        -:   34: * 
        -:   35: int drawCard(int player, struct gameState *state)
        -:   36:{	int count;
        -:   37:  int deckCounter;
        -:   38:  if (state->deckCount[player] <= 0){//Deck is empty
        -:   39:    
        -:   40:    //Step 1 Shuffle the discard pile back into a deck
        -:   41:    int i;
        -:   42:    //Move discard to deck
        -:   43:    for (i = 0; i < state->discardCount[player];i++){
        -:   44:      state->deck[player][i] = state->discard[player][i];
        -:   45:      state->discard[player][i] = -1;
        -:   46:    }
        -:   47:
        -:   48:    state->deckCount[player] = state->discardCount[player];
        -:   49:    state->discardCount[player] = 0;//Reset discard
        -:   50:
        -:   51:    //Shufffle the deck
        -:   52:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:   53:   
        -:   54:    if (DEBUG){//Debug statements
        -:   55:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:   56:    }
        -:   57:    
        -:   58:    state->discardCount[player] = 0;
        -:   59:
        -:   60:    //Step 2 Draw Card
        -:   61:    count = state->handCount[player];//Get current player's hand count
        -:   62:    
        -:   63:    if (DEBUG){//Debug statements
        -:   64:      printf("Current hand count: %d\n", count);
        -:   65:    }
        -:   66:    
        -:   67:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:   68:
        -:   69:    if (deckCounter == 0)
        -:   70:      return -1;
        -:   71:
        -:   72:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        -:   73:    state->deckCount[player]--;
        -:   74:    state->handCount[player]++;//Increment hand count
        -:   75:  }
        -:   76:
        -:   77:  else{
        -:   78:    int count = state->handCount[player];//Get current hand count for player
        -:   79:    int deckCounter;
        -:   80:    if (DEBUG){//Debug statements
        -:   81:      printf("Current hand count: %d\n", count);
        -:   82:    }
        -:   83:
        -:   84:    deckCounter = state->deckCount[player];//Create holder for the deck count
        -:   85:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        -:   86:    state->deckCount[player]--;
        -:   87:    state->handCount[player]++;//Increment hand count
        -:   88:  }
        -:   89:
        -:   90:  return 0;
        -:   91:}
        -:   92: */
        -:   93:
        -:   94:#include "dominion.h"
        -:   95:#include "dominion_helpers.h"
        -:   96:#include <string.h>
        -:   97:#include <stdio.h>
        -:   98:#include <assert.h>
        -:   99:#include "rngs.h" //random number generator multiple streams
        -:  100:
        -:  101:
        -:  102:#define TEST "DRAW_CARD"
        -:  103:#define TEST_EMPTY 0
        -:  104:#define TEST_NO_CARDS_IN_DECK 1
        -:  105:#define TEST_CARDS_IN_DECK 2
        -:  106:
        -:  107://Function will initialize the gameState struct
        -:  108:int initializeMyGame(struct gameState *G, int actionCards[], int seed, int numPlayer);
        -:  109://Function will print the state of the test variable if error is found
        -:  110:void printState(struct gameState *G, int hand[], int testDiscardDeckCount, int testHandCount, 
        -:  111:        int testDeckCount, int player, int test);
        -:  112:		
        -:  113:int noPlayerStateChanges(struct gameState *preCall, struct gameState *postCall, int p);
        -:  114:int noVictoryCardChanges(struct gameState *preCall, struct gameState *postCall, int p);
        -:  115:int noDominionCardChanges(struct gameState *preCall, struct gameState *postCall, int p, int deckSize);
        -:  116:
function main called 1 returned 100% blocks executed 62%
        1:  117:int main() {
        -:  118:    int k; //counter
        1:  119:    int seed = 1000; //used in rngs
        1:  120:    int numPlayer = 2;
        -:  121:	
        1:  122:	int errorFlag1 = 0, errorFlag2 = 0, errorFlag3 = 0, errorFlag4 = 0, errorFlag5 = 0, errorFlag6 = 0, errorFlag7 = 0, errorFlag8 = 0;
        1:  123:	int errorFlagP = 0, errorFlagV = 0, errorFlagD = 0;
        1:  124:	int bonus = 0;
        -:  125:    int p;   //used to keep track of player
        1:  126:	const int ACTION_CARD_TOTAL = 20;
        1:  127:    int actionCards[20] = { 
        -:  128:        adventurer, council_room, feast, gardens, mine, remodel, smithy, 
        -:  129:        village, baron, great_hall, minion, steward, tribute, ambassador, 
        -:  130:        cutpurse, embargo, outpost, salvager, sea_hag, treasure_map};   
        -:  131:            
        -:  132:    struct gameState preCall;
        -:  133:    struct gameState postCall;   
        -:  134:	
        -:  135:	
        -:  136:	//used to test a hand with no cards in deck and no cards in discard deck
        1:  137:	const int TEST_ZERO_HAND_COUNT = 0;	
        -:  138:	
        1:  139:	const int ALL_CARDS_COUNT = 27;//all possible cards
        -:  140:	
        -:  141:	// represents a deck with each of the possible cards
        1:  142:    int testAllCardsDeck[ALL_CARDS_COUNT];   	
        -:  143:		
        -:  144:	//represents a discard-deck with each of the possible cards
        1:  145:    int testAllCardsDiscardDeck[ALL_CARDS_COUNT];  
        -:  146:	   
        -:  147:	
        -:  148:	/*
        -:  149:	* Initialize the test hands
        -:  150:	*/			
        -:  151:	//add action cards to no treasure test hand
       21:  152:	for(k = 0; k < ACTION_CARD_TOTAL; ++k){
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
       20:  153:	  testAllCardsDeck[k] = actionCards[k]; 
       20:  154:	  testAllCardsDiscardDeck[k] = actionCards[k]; 
        -:  155:	}
        -:  156:
        -:  157:	//add other cards
        1:  158:	testAllCardsDeck[k] = estate;
        1:  159:	testAllCardsDiscardDeck[k] = estate;
        1:  160:	testAllCardsDeck[k+1] = duchy;
        1:  161:	testAllCardsDiscardDeck[k] = duchy;
        1:  162:	testAllCardsDeck[k+2] = province;
        1:  163:	testAllCardsDiscardDeck[k] = province;	
        1:  164:	testAllCardsDeck[k+3] = curse; 
        1:  165:	testAllCardsDiscardDeck[k] = curse;	 
        1:  166:	testAllCardsDeck[k+4] = gold;
        1:  167:	testAllCardsDiscardDeck[k] = gold;
        1:  168:	testAllCardsDeck[k+5] = silver;			
        1:  169:	testAllCardsDiscardDeck[k] = silver;			
        1:  170:	testAllCardsDeck[k+6] = copper;	
        1:  171:	testAllCardsDiscardDeck[k] = copper;	
        -:  172:
        -:  173:
        1:  174:    printf ("Starting unittest2\nTESTING drawCard():\n");
call    0 returned 100%
        -:  175:	
        -:  176:	//test both players
        3:  177:    for (p = 0; p < numPlayer; p++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  178:		
        2:  179:		initializeMyGame(&preCall, actionCards, seed++, numPlayer);           
call    0 returned 100%
        -:  180:		
        -:  181:		//****************test EMPTY (case 0) where player has no cards************************************			         
        2:  182:		preCall.deckCount[p] = TEST_ZERO_HAND_COUNT; // set deck size to 0  
        2:  183:		preCall.discardCount[p] = TEST_ZERO_HAND_COUNT; // set discard deck size to 0 
        2:  184:		preCall.whoseTurn = p; //set turn
        2:  185:		memcpy(&postCall, &preCall, sizeof(struct gameState));//save game state before calling updateCoins
        2:  186:		drawCard(p, &postCall);
call    0 returned 100%
        -:  187:		
        2:  188:		if((p == 0) && !errorFlagP){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        2:  189:			if(noPlayerStateChanges(&preCall, &postCall, 1) < 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  190:				printState(&postCall, 0, 0, TEST_ZERO_HAND_COUNT, bonus, p, TEST_EMPTY); 
call    0 never executed
    #####:  191:				errorFlagP = 1;
        -:  192:			}
        1:  193:		}else if(!errorFlagP){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  194:			if(noPlayerStateChanges(&preCall, &postCall, 0) < 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  195:				printState(&postCall, 0, 0, TEST_ZERO_HAND_COUNT, bonus, p, TEST_EMPTY); 
call    0 never executed
    #####:  196:				errorFlagP = 1;
        -:  197:			}
        -:  198:		}
        -:  199:		
        2:  200:		if(!errorFlagV && (noVictoryCardChanges(&preCall, &postCall, p) < 0) ){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  201:			printState(&postCall, 0, 0, TEST_ZERO_HAND_COUNT, bonus, p, TEST_EMPTY); 
call    0 never executed
    #####:  202:			errorFlagV = 1;
        -:  203:		}		
        -:  204:		
        -:  205:		
        4:  206:		if(((postCall.deckCount[p] != 0 || postCall.discardCount[p] != 0) || 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        2:  207:				(preCall.handCount[p] != postCall.handCount[p])) && !errorFlag1){ 
branch  0 never executed
branch  1 never executed
    #####:  208:			printState(&postCall, 0, preCall.discardCount[p], preCall.handCount[p], preCall.deckCount[p], p, TEST_EMPTY); 
call    0 never executed
    #####:  209:			errorFlag1 = 1;
        -:  210:		}
        -:  211:		//make sure counts are correct and game state hasn't changed
        -:  212:		//assert(postCall.handCount[p] == preCall.handCount[p]);
        -:  213:		//assert(postCall.deckCount[p] == preCall.deckCount[p]);
        -:  214:		//assert(postCall.discardCount[p] == preCall.discardCount[p]);
        -:  215:		
        2:  216:		if(memcmp(&preCall, &postCall, sizeof(struct gameState)) != 0 && !errorFlag2){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  217:			printState(&postCall, 0, preCall.discardCount[p], preCall.handCount[p], preCall.deckCount[p], p, TEST_EMPTY); 
call    0 never executed
    #####:  218:			errorFlag2 = 1;
        -:  219:		}
        -:  220:		//assert(memcmp(&preCall, &postCall, sizeof(struct gameState)) == 0);
        -:  221:		
        2:  222:		initializeMyGame(&preCall, actionCards, seed++, numPlayer);
call    0 returned 100%
        -:  223:		
        -:  224:		//*******************test TEST_NO_CARDS_IN_DECK BUT CARDS IN DISCARD DECK (case 1)***************
        2:  225:		memcpy(preCall.discard[p], testAllCardsDiscardDeck, sizeof(int) * ALL_CARDS_COUNT);			
        2:  226:		preCall.deckCount[p] = TEST_ZERO_HAND_COUNT; // set deck size to 0  
        2:  227:		preCall.discardCount[p] = ALL_CARDS_COUNT;  
        -:  228:		
        2:  229:		memcpy(&postCall, &preCall, sizeof(struct gameState));//save game state before calling updateCoins
        2:  230:		drawCard(p, &postCall);
call    0 returned 100%
        -:  231:		
        4:  232:		if(((postCall.deckCount[p] != (ALL_CARDS_COUNT - 1)) || (postCall.discardCount[p] != 0) ||
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        2:  233:				((preCall.handCount[p] + 1) != postCall.handCount[p])) && !errorFlag3){ 
branch  0 never executed
branch  1 never executed
    #####:  234:			printState(&postCall, preCall.hand[p], preCall.discardCount[p], preCall.handCount[p], 
call    0 never executed
        -:  235:                    preCall.deckCount[p], p, TEST_NO_CARDS_IN_DECK); 
    #####:  236:			errorFlag3 = 1;		
        -:  237:		}
        -:  238:		//make sure counts are correct and game state hasn't changed
        -:  239:		//assert(postCall.handCount[p] == (preCall.handCount[p] + 1));
        -:  240:		//assert(postCall.deckCount[p] == (ALL_CARDS_COUNT - 1));
        -:  241:		//assert(postCall.discardCount[p] == 0);
        -:  242:		
        2:  243:		if(postCall.hand[p][postCall.handCount[p]-1] != postCall.deck[p][postCall.deckCount[p]] && !errorFlag4){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  244:			printState(&postCall, 0, preCall.discardCount[p], preCall.handCount[p], preCall.deckCount[p], p, TEST_NO_CARDS_IN_DECK); 
call    0 never executed
    #####:  245:			errorFlag4 = 1;
        -:  246:		}
        -:  247:		//ensure correct card has been added	
        -:  248:		//assert(postCall.hand[p][postCall.handCount[p]-1] == postCall.deck[p][postCall.deckCount[p]]);	
        -:  249:	   
        -:  250:		//make expected changes to preCall so structs are equal
        2:  251:		preCall.handCount[p] += 1;
        2:  252:		preCall.deckCount[p] = (ALL_CARDS_COUNT - 1);
        2:  253:		preCall.discardCount[p] = 0;
        2:  254:		preCall.hand[p][postCall.handCount[p]-1] = postCall.deck[p][postCall.deckCount[p] ];
        2:  255:		memcpy(preCall.deck[p], postCall.deck[p], sizeof(int) * ALL_CARDS_COUNT);//assign deck
        2:  256:		memcpy(preCall.discard[p], postCall.discard[p], sizeof(int) * ALL_CARDS_COUNT);
        -:  257:
        2:  258:		if(memcmp(&preCall, &postCall, sizeof(struct gameState)) != 0 && !errorFlag5){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  259:			printState(&postCall, preCall.hand[p], preCall.discardCount[p], preCall.handCount[p], 
call    0 never executed
        -:  260:                    preCall.deckCount[p], p, TEST_NO_CARDS_IN_DECK);
    #####:  261:			errorFlag5 = 1;		
        -:  262:		}
        2:  263:		assert(memcmp(&preCall, &postCall, sizeof(struct gameState)) == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  264:
        2:  265:		initializeMyGame(&preCall, actionCards, seed++, numPlayer);			
call    0 returned 100%
        -:  266:		//*********************test TEST_CARDS_IN_DECK (case 2) where player has cards in deck and discard deck***			
        2:  267:		memcpy(preCall.deck[p], testAllCardsDeck, sizeof(int) * ALL_CARDS_COUNT);
        2:  268:		preCall.deckCount[p] = ALL_CARDS_COUNT; // set deck size to 17  
        -:  269:				
        2:  270:		memcpy(&postCall, &preCall, sizeof(struct gameState));//save game state before calling updateCoins
        2:  271:		drawCard(p, &postCall);
call    0 returned 100%
        -:  272:		
        -:  273:		//test no changes in deck
        2:  274:		if (!errorFlagD && (noDominionCardChanges(&preCall, &postCall, p, ALL_CARDS_COUNT - 1) < 0) ){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
call    2 returned 100%
branch  3 taken 0% (fallthrough)
branch  4 taken 100%
    #####:  275:			printState(&postCall, 0, 0, TEST_ZERO_HAND_COUNT, bonus, p, TEST_EMPTY); 
call    0 never executed
    #####:  276:			errorFlagD = 1;
        -:  277:		}
        -:  278:		
        2:  279:		if(((postCall.deckCount[p] != (ALL_CARDS_COUNT - 1)) || ((preCall.handCount[p] + 1) != postCall.handCount[p])) && !errorFlag6){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
branch  4 never executed
branch  5 never executed
    #####:  280:			printState(&postCall, preCall.hand[p], preCall.discardCount[p], preCall.handCount[p], 
call    0 never executed
        -:  281:                    preCall.deckCount[p], p, TEST_CARDS_IN_DECK); 
    #####:  282:			errorFlag6 = 1;		
        -:  283:		}
        -:  284:		//make sure counts are correct and game state hasn't changed
        -:  285:		//assert(postCall.handCount[p] == (preCall.handCount[p] + 1));
        -:  286:		//assert(postCall.deckCount[p] == (ALL_CARDS_COUNT - 1));
        -:  287:		//assert(postCall.discardCount[p] == 0);
        -:  288:		
        2:  289:		if(postCall.hand[p][postCall.handCount[p]-1] != preCall.deck[p][preCall.deckCount[p] - 1] && !errorFlag7){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  290:			printState(&postCall, 0, preCall.discardCount[p], preCall.handCount[p], preCall.deckCount[p], p, TEST_CARDS_IN_DECK); 
call    0 never executed
    #####:  291:			errorFlag7 = 1;
        -:  292:		}
        -:  293:		//ensure correct card has been added	
        -:  294:		//assert(postCall.hand[p][postCall.handCount[p]-1] == preCall.deck[p][preCall.deckCount[p] - 1]);	
        -:  295:		
        -:  296:		//make expected changes to preCall so structs are equal
        2:  297:		preCall.handCount[p] += 1;
        2:  298:		preCall.deckCount[p] = (ALL_CARDS_COUNT - 1);            
        2:  299:		preCall.hand[p][postCall.handCount[p]-1] = preCall.deck[p][preCall.deckCount[p]];
        -:  300:
        2:  301:		if(memcmp(&preCall, &postCall, sizeof(struct gameState)) != 0 && !errorFlag8){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:  302:			printState(&postCall, preCall.hand[p], preCall.discardCount[p], preCall.handCount[p], 
call    0 never executed
        -:  303:                    preCall.deckCount[p], p, TEST_CARDS_IN_DECK);
    #####:  304:			errorFlag8 = 1;		
        -:  305:		}
        -:  306:		//assert(memcmp(&preCall, &postCall, sizeof(struct gameState)) == 0);
        -:  307:      
        -:  308:    }
        -:  309:
        1:  310:    if(!errorFlag1 && !errorFlag2 && !errorFlag3 && !errorFlag4 && !errorFlag5 && !errorFlag6 && !errorFlag7 && !errorFlag8 &&
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
branch  8 taken 100% (fallthrough)
branch  9 taken 0%
branch 10 taken 100% (fallthrough)
branch 11 taken 0%
branch 12 taken 100% (fallthrough)
branch 13 taken 0%
branch 14 taken 100% (fallthrough)
branch 15 taken 0%
branch 16 taken 100% (fallthrough)
branch 17 taken 0%
        1:  311:		!errorFlagP && ! errorFlagV && ! errorFlagD ){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:  312:		printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TEST);
call    0 returned 100%
        -:  313:	}else{
    #####:  314:		printf("\n >>>>> FAILURES DETECTED: Examine test cases %s <<<<<\n\n", TEST);
call    0 never executed
        -:  315:	}  
        -:  316:
        1:  317:    return 0;
        -:  318:}
        -:  319:
function initializeMyGame called 6 returned 100% blocks executed 100%
        6:  320:int initializeMyGame(struct gameState *G, int actionCards[], int seed, int numPlayer){
        -:  321:	
        6:  322:		memset(G, 23, sizeof(struct gameState));   // clear the game state
        6:  323:        return initializeGame(numPlayer, actionCards, seed, G); // initialize a new game
call    0 returned 100%
        -:  324:}
        -:  325:
function printState called 0 returned 0% blocks executed 0%
    #####:  326:void printState(struct gameState *G, int hand[], int testDiscardDeckCount, int testHandCount, 
        -:  327:        int testDeckCount, int player, int test){
        -:  328:	
    #####:  329:	printf("Error found in %s, %d\n", TEST, test );
call    0 never executed
    #####:  330:	printf("\tpost G->handCount = %d  testHandCount = %d\n", G->handCount[player], testHandCount);
call    0 never executed
    #####:  331:	printf("\tpost G->deckCount = %d  testDeckCount = %d\n", G->deckCount[player], testDeckCount);
call    0 never executed
    #####:  332:	printf("\tpost G->discardCount = %d testDiscardDeckCount = %d\n\n", G->discardCount[player], testDiscardDeckCount);	
call    0 never executed
    #####:  333:}
        -:  334:
function noPlayerStateChanges called 2 returned 100% blocks executed 40%
        2:  335:int noPlayerStateChanges(struct gameState *preCall, struct gameState *postCall, int p){
        -:  336:    //int i = 0;	
        -:  337:	//test no other changes occured to game state	
        2:  338:	if(preCall->deckCount[p] != postCall->deckCount[p]){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  339:		printf("ERROR noPlayerStateChanges DECKCOUNT's off\n");
call    0 never executed
    #####:  340:		return -1;
        -:  341:	}
        2:  342:	if(preCall->discardCount[p] != postCall->discardCount[p]){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  343:		printf("ERROR noPlayerStateChanges DISCARDCOUNT's off\n");
call    0 never executed
    #####:  344:		return -1;
        -:  345:	}
        2:  346:	if(preCall->handCount[p] != postCall->handCount[p]){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  347:		printf("ERROR noPlayerStateChanges HANDCOUNT's off\n");
call    0 never executed
    #####:  348:		return -1;
        -:  349:	}
        2:  350:	if(memcmp(&preCall->deck[p], &postCall->deck[p], MAX_DECK) != 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  351:		printf("ERROR noPlayerStateChanges DECK is off\n");
call    0 never executed
        -:  352:
        -:  353:		//for testing
        -:  354:        //for(i=0; i < MAX_DECK ; ++i){
        -:  355:        //    printf("\tpreCall-deck[%d][%d] = %d, postCall-deck[%d][%d] = %d\n",p, i, preCall->deck[p][i], p, i, postCall->deck[p][i]);
        -:  356:        //}
        -:  357:
    #####:  358:		return -1;
        -:  359:	}
        2:  360:	if(memcmp(&preCall->discard[p], &postCall->discard[p], MAX_DECK) != 0){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  361:		printf("ERROR noPlayerStateChanges DISCARD DECK is off\n");
call    0 never executed
    #####:  362:		return -1;
        -:  363:	}
        2:  364:	if(memcmp(&preCall->hand[p], &postCall->hand[p], MAX_HAND) != 0){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  365:		printf("ERROR noPlayerStateChanges HAND is off\n");
call    0 never executed
    #####:  366:		return -1;
        -:  367:	}
        2:  368:	return 0;
        -:  369:}
        -:  370:
function noVictoryCardChanges called 2 returned 100% blocks executed 71%
        2:  371:int noVictoryCardChanges(struct gameState *preCall, struct gameState *postCall, int p){
        2:  372:	if(scoreFor(p, preCall) != scoreFor(p, postCall)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  373:		printf("ERROR noVictoryCardChanges\n");
call    0 never executed
    #####:  374:		return -1;
        -:  375:	}
        2:  376:	return 0;
        -:  377:}
        -:  378:
function noDominionCardChanges called 2 returned 100% blocks executed 60%
        2:  379:int noDominionCardChanges(struct gameState *preCall, struct gameState *postCall, int p, int deckSize){
        2:  380:	if(memcmp(&preCall->deck[p], &postCall->deck[p], sizeof(int) *  deckSize) != 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  381:		printf("ERROR noDominionCardChanges\n");
call    0 never executed
    #####:  382:		return -1;
        -:  383:	}
        2:  384:	return 0;
        -:  385:}
