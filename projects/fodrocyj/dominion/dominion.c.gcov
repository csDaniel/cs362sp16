        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:432
        -:    0:Programs:217
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 77192410 returned 100% blocks executed 83%
 77192410:    8://Created functions
 77192410:    9:
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:int salvagerEffect(int choice1, struct gameState *state, int currentPlayer, int handPos){
 77192410:   11:	//+1 buy
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
 20583956:   12:	state->numBuys++;
 56608454:   13:			
        -:   14:	if (!choice1)
        -:   15:	{
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:		//gain coins equal to trashed card
    #####:   17:		state->coins = state->coins + getCost( handCard(choice1, state) );
    #####:   18:		//trash card
        -:   19:		discardCard(choice1, currentPlayer, state, 1);	
        -:   20:	}
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:			
        -:   22:	//discard card
    #####:   23:	discardCard(handPos, currentPlayer, state, 0);
    #####:   24:	return 0;
    #####:   25:}
    #####:   26:
    #####:   27:int embargoEffect(int choice1, struct gameState *state, int currentPlayer, int handPos){
    #####:   28:	//+2 Coins
    #####:   29:	state->coins = state->coins + 3;
    #####:   30:			
    #####:   31:	//see if selected pile is in play
    #####:   32:	if ( state->supplyCount[choice1] == -1 )
    #####:   33:	{
    #####:   34:	  return -1;
        -:   35:	}
        -:   36:			
function initializeGame called 1715035 returned 100% blocks executed 95%
  1715035:   37:	//add embargo token to selected supply pile
        -:   38:	state->embargoTokens[choice1]++;
        -:   39:			
        -:   40:	//trash card
        -:   41:	discardCard(handPos, currentPlayer, state, 1);		
        -:   42:	return 0;
        -:   43:}
  1715035:   44:
call    0 returned 100%
  1715035:   45:int stewardEffect(int choice1, int choice2, int choice3, struct gameState *state, int currentPlayer, int handPos){
call    0 returned 100%
        -:   46:	if (choice1 == 1)
        -:   47:	{
  1715035:   48:		//+2 cards
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:		drawCard(currentPlayer, state);
    #####:   50:	}
        -:   51:	else if (choice1 == 2)
        -:   52:	{
        -:   53:		//+2 coins
  1715035:   54:		state->coins = state->coins + 2;
        -:   55:	}
        -:   56:	else
 18865385:   57:	{
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:		//trash 2 cards in hand
188653850:   59:		discardCard(choice2, currentPlayer, state, 1);
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:		discardCard(choice3, currentPlayer, state, 1);
171503500:   61:	}
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:			
    #####:   63:	//discard card from hand
        -:   64:	discardCard(handPos, currentPlayer, state, 0);
        -:   65:	return 0;
        -:   66:}
        -:   67:
        -:   68:int adventurerEffect(struct gameState *state, int currentPlayer, int handPos){
        -:   69:  int temphand[MAX_HAND];// moved above the if statement
        -:   70:  int drawntreasure=0;
        -:   71:  int cardDrawn;
        -:   72:  int z = 0;// this is the counter for the temp hand
  1715035:   73:	
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   74:	while(drawntreasure<=2){
   571569:   75:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:   76:			shuffle(currentPlayer, state);
  1143466:   77:		}
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   78:		drawCard(currentPlayer, state);
   571013:   79:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:   80:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:   81:			drawntreasure++;
        -:   82:		else{
   572453:   83:			temphand[z]=cardDrawn;
        -:   84:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:   85:			z++;
        -:   86:		}
  1715035:   87:	}
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   88:	while(z-1>=0){
   571569:   89:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
   571569:   90:		z=z-1;
   571569:   91:	}
        -:   92:	return 0;
        -:   93:			
        -:   94:}
  1143466:   95:
  1143466:   96:int smithyEffect(struct gameState *state, int currentPlayer, int handPos){
  1143466:   97:	int i;
        -:   98:	
        -:   99:	//+3 Cards
        -:  100:	for (i = 0; i < 3; i++)
  1715035:  101:	{
  1715035:  102:		drawCard(currentPlayer, state);
  1715035:  103:		drawCard(currentPlayer, state);
        -:  104:	}
        -:  105:			
 36015735:  106:	//discard card from hand
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:	discardCard(handPos, currentPlayer, state, 0);
282980775:  108:	return 0;
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:}
265830425:  110:
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:int compare(const void* a, const void* b) {
        -:  112:  if (*(int*)a > *(int*)b)
 17150350:  113:    return 1;
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
branch  2 taken 5% (fallthrough)
branch  3 taken 95%
        -:  114:  if (*(int*)a < *(int*)b)
  3431916:  115:    return -1;
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
   571509:  116:  return 0;
        -:  117:}
  1144449:  118:
        -:  119:struct gameState* newGame() {
        -:  120:  struct gameState* g = malloc(sizeof(struct gameState));
        -:  121:  return g;
 15434392:  122:}
        -:  123:
 17150350:  124:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  125:		  int k8, int k9, int k10) {
        -:  126:  int* k = malloc(10 * sizeof(int));
        -:  127:  k[0] = k1;
248680075:  128:  k[1] = k2;
        -:  129:  k[2] = k3;
        -:  130:  k[3] = k4;
        -:  131:  k[4] = k5;
        -:  132:  k[5] = k6;
        -:  133:  k[6] = k7;
        -:  134:  k[7] = k8;
        -:  135:  k[8] = k9;
        -:  136:  k[9] = k10;
        -:  137:  return k;
  6861024:  138:}
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:
  5145989:  140:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
 20583956:  141:		   struct gameState *state) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:
 15437967:  143:  int i;
 15437967:  144:  int j;
        -:  145:  int it;			
 41167912:  146:  //set up random number generator
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:  SelectStream(1);
 36021923:  148:  PutSeed((long)randomSeed);
 36021923:  149:  
        -:  150:  //check number of players
        -:  151:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  152:    {
        -:  153:      return -1;
  6861024:  154:    }
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  155:
  5145989:  156:  //set number of players
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:  state->numPlayers = numPlayers;
    #####:  158:
        -:  159:  //check selected kingdom cards are different
        -:  160:  for (i = 0; i < 10; i++)
        -:  161:    {
        -:  162:      for (j = 0; j < 10; j++)
  6861024:  163:        {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  164:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  165:	    {
  5145989:  166:	      return -1;
  5145989:  167:	    }
        -:  168:        }
        -:  169:    }
        -:  170:
        -:  171:
        -:  172:  //initialize supply
        -:  173:  ///////////////////////////////
        -:  174:
        -:  175:  //set number of Curse cards
 48020980:  176:  if (numPlayers == 2)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
 46305945:  178:      state->supplyCount[curse] = 10;
        -:  179:    }
        -:  180:  else if (numPlayers == 3)
        -:  181:    {
  1715035:  182:      state->supplyCount[curse] = 20;
  1715035:  183:    }
  1715035:  184:  else
  1715035:  185:    {
  1715035:  186:      state->supplyCount[curse] = 30;
  1715035:  187:    }
  1715035:  188:
        -:  189:  //set number of Victory cards
        -:  190:  if (numPlayers == 2)
        -:  191:    {
 10290210:  192:      state->supplyCount[estate] = 8;
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
  8575175:  193:      state->supplyCount[duchy] = 8;
call    0 returned 100%
        -:  194:      state->supplyCount[province] = 8;
        -:  195:    }
  1715035:  196:  else
call    0 returned 100%
        -:  197:    {
  1715035:  198:      state->supplyCount[estate] = 12;
        -:  199:      state->supplyCount[duchy] = 12;
        -:  200:      state->supplyCount[province] = 12;
function shuffle called 5146169 returned 100% blocks executed 100%
  5146169:  201:    }
        -:  202:
        -:  203:  //set number of Treasure cards
        -:  204:  state->supplyCount[copper] = 60 - (7 * numPlayers);
  5146169:  205:  state->supplyCount[silver] = 40;
        -:  206:  state->supplyCount[gold] = 30;
        -:  207:
        -:  208:  //set number of Kingdom cards
  5146169:  209:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      135:  210:    {
  5146034:  211:      for (j = 0; j < 10; j++)           		//loop chosen cards
call    0 returned 100%
        -:  212:	{
        -:  213:	  if (kingdomCards[j] == i)
 61753075:  214:	    {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
 51461007:  215:	      //check if card is a 'Victory' Kingdom card
call    0 returned 100%
 51461007:  216:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
 51461007:  217:		{
179546214:  218:		  if (numPlayers == 2){ 
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
128085207:  219:		    state->supplyCount[i] = 8; 
        -:  220:		  }
 51461007:  221:		  else{ state->supplyCount[i] = 12; }
        -:  222:		}
 56607041:  223:	      else
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
 51461007:  224:		{
 51461007:  225:		  state->supplyCount[i] = 10;
        -:  226:		}
        -:  227:	      break;
  5146034:  228:	    }
        -:  229:	  else    //card is not in the set choosen for the game
        -:  230:	    {
function playCard called 1715035 returned 100% blocks executed 73%
  1715035:  231:	      state->supplyCount[i] = -1;
        -:  232:	    }
        -:  233:	}
  1715035:  234:
        -:  235:    }
        -:  236:
  1715035:  237:  ////////////////////////
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:  //supply intilization complete
    #####:  239:
        -:  240:  //set player decks
        -:  241:  for (i = 0; i < numPlayers; i++)
        -:  242:    {
  1715035:  243:      state->deckCount[i] = 0;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  244:      for (j = 0; j < 3; j++)
    #####:  245:	{
        -:  246:	  state->deck[i][j] = estate;
        -:  247:	  state->deckCount[i]++;
        -:  248:	}
  1715035:  249:      for (j = 3; j < 10; j++)
call    0 returned 100%
        -:  250:	{
        -:  251:	  state->deck[i][j] = copper;
  1715035:  252:	  state->deckCount[i]++;		
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:	}
    #####:  254:    }
        -:  255:
        -:  256:  //shuffle player decks
        -:  257:  for (i = 0; i < numPlayers; i++)
  1715035:  258:    {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:      if ( shuffle(i, state) < 0 )
    #####:  260:	{
        -:  261:	  return -1;
        -:  262:	}
        -:  263:    }
  1715035:  264:
        -:  265:  //draw player hands
        -:  266:  for (i = 0; i < numPlayers; i++)
  1715035:  267:    {  
call    0 returned 100%
        -:  268:      //initialize hand size to zero
  1715035:  269:      state->handCount[i] = 0;
        -:  270:      state->discardCount[i] = 0;
        -:  271:      //draw 5 cards
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:      // for (j = 0; j < 5; j++)
        -:  273:      //	{
        -:  274:      //	  drawCard(i, state);
        -:  275:      //	}
        -:  276:    }
        -:  277:  
        -:  278:  //set embargo tokens to 0 for all supply piles
        -:  279:  for (i = 0; i <= treasure_map; i++)
    #####:  280:    {
        -:  281:      state->embargoTokens[i] = 0;
    #####:  282:    }
branch  0 never executed
branch  1 never executed
        -:  283:
        -:  284:  //initialize first player's turn
    #####:  285:  state->outpostPlayed = 0;
    #####:  286:  state->phase = 0;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:  state->numActions = 1;
        -:  288:  state->numBuys = 1;
    #####:  289:  state->playedCardCount = 0;
    #####:  290:  state->whoseTurn = 0;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:  state->handCount[state->whoseTurn] = 0;
        -:  292:  //int it; move to top
    #####:  293:
        -:  294:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  295:  for (it = 0; it < 5; it++){
        -:  296:    drawCard(state->whoseTurn, state);
    #####:  297:  }
call    0 never executed
        -:  298:
    #####:  299:  updateCoins(state->whoseTurn, state, 0);
call    0 never executed
    #####:  300:
        -:  301:  return 0;
        -:  302:}
        -:  303:
        -:  304:int shuffle(int player, struct gameState *state) {
        -:  305: 
        -:  306:
        -:  307:  int newDeck[MAX_DECK];
    #####:  308:  int newDeckPos = 0;
        -:  309:  int card;
        -:  310:  int i;
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:
    #####:  312:  if (state->deckCount[player] < 1)
call    0 never executed
        -:  313:    return -1;
        -:  314:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
function handCard called 1715035 returned 100% blocks executed 100%
  1715035:  315:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
  1715035:  316:
call    0 returned 100%
  1715035:  317:  while (state->deckCount[player] > 0) {
        -:  318:    card = floor(Random() * state->deckCount[player]);
        -:  319:    newDeck[newDeckPos] = state->deck[player][card];
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:    newDeckPos++;
    #####:  321:    for (i = card; i < state->deckCount[player]-1; i++) {
        -:  322:      state->deck[player][i] = state->deck[player][i+1];
        -:  323:    }
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:    state->deckCount[player]--;
        -:  325:  }
    #####:  326:  for (i = 0; i < newDeckPos; i++) {
        -:  327:    state->deck[player][i] = newDeck[i];
    #####:  328:    state->deckCount[player]++;
branch  0 never executed
branch  1 never executed
        -:  329:  }
    #####:  330:
branch  0 never executed
branch  1 never executed
        -:  331:  return 0;
        -:  332:}
    #####:  333:
branch  0 never executed
branch  1 never executed
        -:  334:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
    #####:  335:{	
branch  0 never executed
branch  1 never executed
        -:  336:  int card;
        -:  337:  int coin_bonus = 0; 		//tracks coins gain from actions
    #####:  338:
branch  0 never executed
branch  1 never executed
        -:  339:  //check if it is the right phase
    #####:  340:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  341:    {
        -:  342:      return -1;
    #####:  343:    }
        -:  344:	
        -:  345:  //check if player has enough actions
function whoseTurn called 3430070 returned 100% blocks executed 100%
  3430070:  346:  if ( state->numActions < 1 )
  3430070:  347:    {
        -:  348:      return -1;
        -:  349:    }
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:	
        -:  351:  //get card played
        -:  352:  card = handCard(handPos, state);
    #####:  353:	
call    0 never executed
        -:  354:  //check if selected card is an action
        -:  355:  if ( card < adventurer || card > treasure_map )
    #####:  356:    {
branch  0 never executed
branch  1 never executed
    #####:  357:      return -1;
    #####:  358:    }
        -:  359:	
    #####:  360:  //play card
        -:  361:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  362:    {
    #####:  363:      return -1;
branch  0 never executed
branch  1 never executed
    #####:  364:    }
        -:  365:	
        -:  366:  //reduce number of actions
    #####:  367:  state->numActions--;
        -:  368:
        -:  369:  //update coins (Treasure cards may be added with card draws)
    #####:  370:  updateCoins(state->whoseTurn, state, coin_bonus);
    #####:  371:	
    #####:  372:  return 0;
    #####:  373:}
    #####:  374:
    #####:  375:int buyCard(int supplyPos, struct gameState *state) {
    #####:  376:  int who;
        -:  377:  if (DEBUG){
        -:  378:    printf("Entering buyCard...\n");
        -:  379:  }
    #####:  380:
branch  0 never executed
branch  1 never executed
    #####:  381:  // I don't know what to do about the phase thing.
call    0 never executed
        -:  382:
        -:  383:  who = state->whoseTurn;
        -:  384:
    #####:  385:  if (state->numBuys < 1){
call    0 never executed
        -:  386:    if (DEBUG)
    #####:  387:      printf("You do not have any buys left\n");
        -:  388:    return -1;
        -:  389:  } else if (supplyCount(supplyPos, state) <1){
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:    if (DEBUG)
        -:  391:      printf("There are not any of that type of card left\n");
        -:  392:    return -1;
        -:  393:  } else if (state->coins < getCost(supplyPos)){
        -:  394:    if (DEBUG) 
    #####:  395:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
branch  0 never executed
branch  1 never executed
        -:  396:    return -1;
    #####:  397:  } else {
        -:  398:    state->phase=1;
        -:  399:    //state->supplyCount[supplyPos]--;
        -:  400:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
    #####:  401:  
    #####:  402:    state->coins = (state->coins) - (getCost(supplyPos));
branch  0 never executed
branch  1 never executed
        -:  403:    state->numBuys--;
    #####:  404:    if (DEBUG)
branch  0 never executed
branch  1 never executed
        -:  405:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
    #####:  406:  }
        -:  407:
        -:  408:  //state->discard[who][state->discardCount[who]] = supplyPos;
    #####:  409:  //state->discardCount[who]++;
branch  0 never executed
branch  1 never executed
        -:  410:    
    #####:  411:  return 0;
        -:  412:}
        -:  413:
    #####:  414:int numHandCards(struct gameState *state) {
        -:  415:  return state->handCount[ whoseTurn(state) ];
        -:  416:}
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:
        -:  418:int handCard(int handPos, struct gameState *state) {
        -:  419:  int currentPlayer = whoseTurn(state);
    #####:  420:  return state->hand[currentPlayer][handPos];
        -:  421:}
    #####:  422:
branch  0 never executed
branch  1 never executed
        -:  423:int supplyCount(int card, struct gameState *state) {
    #####:  424:  return state->supplyCount[card];
branch  0 never executed
branch  1 never executed
    #####:  425:}
branch  0 never executed
branch  1 never executed
    #####:  426:
branch  0 never executed
branch  1 never executed
    #####:  427:int fullDeckCount(int player, int card, struct gameState *state) {
branch  0 never executed
branch  1 never executed
    #####:  428:  int i;
branch  0 never executed
branch  1 never executed
    #####:  429:  int count = 0;
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:
        -:  431:  for (i = 0; i < state->deckCount[player]; i++)
        -:  432:    {
    #####:  433:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  434:    }
    #####:  435:
branch  0 never executed
branch  1 never executed
    #####:  436:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
    #####:  437:    {
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  439:    }
branch  0 never executed
branch  1 never executed
    #####:  440:
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:  for (i = 0; i < state->discardCount[player]; i++)
        -:  442:    {
        -:  443:      if (state->discard[player][i] == card) count++;
    #####:  444:    }
branch  0 never executed
branch  1 never executed
        -:  445:
    #####:  446:  return count;
branch  0 never executed
branch  1 never executed
    #####:  447:}
branch  0 never executed
branch  1 never executed
    #####:  448:
branch  0 never executed
branch  1 never executed
    #####:  449:int whoseTurn(struct gameState *state) {
branch  0 never executed
branch  1 never executed
    #####:  450:  return state->whoseTurn;
branch  0 never executed
branch  1 never executed
    #####:  451:}
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:
        -:  453:int endTurn(struct gameState *state) {
    #####:  454:  int k;
        -:  455:  int i;
        -:  456:  int currentPlayer = whoseTurn(state);
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:  
        -:  458:  //Discard hand
        -:  459:  for (i = 0; i < state->handCount[currentPlayer]; i++){
        -:  460:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
        -:  461:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  462:  }
        -:  463:  state->handCount[currentPlayer] = 0;//Reset hand count
    #####:  464:    
branch  0 never executed
branch  1 never executed
        -:  465:  //Code for determining the player
        -:  466:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  467:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
branch  0 never executed
branch  1 never executed
        -:  468:  }
    #####:  469:  else{
        -:  470:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  471:  }
        -:  472:
    #####:  473:  state->outpostPlayed = 0;
call    0 never executed
        -:  474:  state->phase = 0;
        -:  475:  state->numActions = 1;
        -:  476:  state->coins = 0;
        -:  477:  state->numBuys = 1;
    #####:  478:  state->playedCardCount = 0;
    #####:  479:  state->handCount[state->whoseTurn] = 0;
branch  0 never executed
branch  1 never executed
        -:  480:
    #####:  481:  //int k; move to top
branch  0 never executed
branch  1 never executed
        -:  482:  //Next player draws hand
    #####:  483:  for (k = 0; k < 5; k++){
        -:  484:    drawCard(state->whoseTurn, state);//Draw a card
        -:  485:  }
    #####:  486:
        -:  487:  //Update money
        -:  488:  updateCoins(state->whoseTurn, state , 0);
    #####:  489:
call    0 never executed
    #####:  490:  return 0;
branch  0 never executed
branch  1 never executed
        -:  491:}
    #####:  492:
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:int isGameOver(struct gameState *state) {
    #####:  494:  int i;
        -:  495:  int j;
        -:  496:	
        -:  497:  //if stack of Province cards is empty, the game ends
        -:  498:  if (state->supplyCount[province] == 0)
    #####:  499:    {
    #####:  500:      return 1;
branch  0 never executed
branch  1 never executed
        -:  501:    }
    #####:  502:
branch  0 never executed
branch  1 never executed
        -:  503:  //if three supply pile are at 0, the game ends
    #####:  504:  j = 0;
        -:  505:  for (i = 0; i < 25; i++)
        -:  506:    {
    #####:  507:      if (state->supplyCount[i] == 0)
        -:  508:	{
        -:  509:	  j++;
    #####:  510:	}
branch  0 never executed
branch  1 never executed
        -:  511:    }
    #####:  512:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  513:    {
    #####:  514:      return 1;
        -:  515:    }
        -:  516:
        -:  517:  return 0;
    #####:  518:}
        -:  519:
        -:  520:int scoreFor (int player, struct gameState *state) {
        -:  521:
    #####:  522:  int i;
        -:  523:  int score = 0;
        -:  524:  //score from hand
function drawCard called 83168339 returned 100% blocks executed 100%
 83168339:  525:  for (i = 0; i < state->handCount[player]; i++)
        -:  526:    {
        -:  527:      if (state->hand[player][i] == curse) { score = score - 1; };
 83168339:  528:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  529:      if (state->hand[player][i] == duchy) { score = score + 3; };
        -:  530:      if (state->hand[player][i] == province) { score = score + 6; };
        -:  531:      if (state->hand[player][i] == great_hall) { score = score + 1; };
        -:  532:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
     1207:  533:    }
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
     1117:  534:
     1117:  535:  //score from discard
        -:  536:  for (i = 0; i < state->discardCount[player]; i++)
        -:  537:    {
       90:  538:      if (state->discard[player][i] == curse) { score = score - 1; };
       90:  539:      if (state->discard[player][i] == estate) { score = score + 1; };
        -:  540:      if (state->discard[player][i] == duchy) { score = score + 3; };
        -:  541:      if (state->discard[player][i] == province) { score = score + 6; };
       90:  542:      if (state->discard[player][i] == great_hall) { score = score + 1; };
call    0 returned 100%
        -:  543:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  544:    }
        -:  545:
        -:  546:  //score from deck
        -:  547:  for (i = 0; i < state->discardCount[player]; i++)
       90:  548:    {
        -:  549:      if (state->deck[player][i] == curse) { score = score - 1; };
        -:  550:      if (state->deck[player][i] == estate) { score = score + 1; };
       90:  551:      if (state->deck[player][i] == duchy) { score = score + 3; };
        -:  552:      if (state->deck[player][i] == province) { score = score + 6; };
        -:  553:      if (state->deck[player][i] == great_hall) { score = score + 1; };
        -:  554:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  555:    }
        -:  556:
       90:  557:  return score;
        -:  558:}
       90:  559:
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
       45:  560:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  561:  int i;	
       45:  562:  int j;
       45:  563:  int highScore;
       45:  564:  int currentPlayer;
        -:  565:
        -:  566:  //get score for each player
        -:  567:  for (i = 0; i < MAX_PLAYERS; i++)
 83168249:  568:    {
        -:  569:      //set unused player scores to -9999
        -:  570:      if (i >= state->numPlayers)
        -:  571:	{
        -:  572:	  players[i] = -9999;
        -:  573:	}
 83168249:  574:      else
 83168249:  575:	{
 83168249:  576:	  players[i] = scoreFor (i, state);
 83168249:  577:	}
        -:  578:    }
        -:  579:
 83168294:  580:  //find highest score
        -:  581:  j = 0;
        -:  582:  for (i = 0; i < MAX_PLAYERS; i++)
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:    {
        -:  584:      if (players[i] > players[j])
    #####:  585:	{
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:	  j = i;
        -:  587:	}
    #####:  588:    }
        -:  589:  highScore = players[j];
    #####:  590:
        -:  591:  //add 1 to players who had less turns
    #####:  592:  currentPlayer = whoseTurn(state);
        -:  593:  for (i = 0; i < MAX_PLAYERS; i++)
    #####:  594:    {
        -:  595:      if ( players[i] == highScore && i > currentPlayer )
    #####:  596:	{
        -:  597:	  players[i]++;
    #####:  598:	}
        -:  599:    }
    #####:  600:
        -:  601:  //find new highest score
    #####:  602:  j = 0;
        -:  603:  for (i = 0; i < MAX_PLAYERS; i++)
    #####:  604:    {
        -:  605:      if ( players[i] > players[j] )
    #####:  606:	{
        -:  607:	  j = i;
    #####:  608:	}
        -:  609:    }
    #####:  610:  highScore = players[j];
        -:  611:
    #####:  612:  //set winners in array to 1 and rest to 0
        -:  613:  for (i = 0; i < MAX_PLAYERS; i++)
    #####:  614:    {
        -:  615:      if ( players[i] == highScore )
    #####:  616:	{
        -:  617:	  players[i] = 1;
    #####:  618:	}
        -:  619:      else
    #####:  620:	{
        -:  621:	  players[i] = 0;
    #####:  622:	}
        -:  623:    }
    #####:  624:
        -:  625:  return 0;
    #####:  626:}
        -:  627:
    #####:  628:int drawCard(int player, struct gameState *state)
        -:  629:{	int count;
    #####:  630:  int deckCounter;
        -:  631:  if (state->deckCount[player] <= 0){//Deck is empty
    #####:  632:    
        -:  633:    //Step 1 Shuffle the discard pile back into a deck
    #####:  634:    int i;
        -:  635:    //Move discard to deck
    #####:  636:    for (i = 0; i < state->discardCount[player];i++){
        -:  637:      state->deck[player][i] = state->discard[player][i];
    #####:  638:      state->discard[player][i] = -1;
        -:  639:    }
    #####:  640:
        -:  641:    state->deckCount[player] = state->discardCount[player];
        -:  642:    state->discardCount[player] = 0;//Reset discard
    #####:  643:
        -:  644:    //Shufffle the deck
        -:  645:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
function cardEffect called 1715035 returned 100% blocks executed 12%
  1715035:  646:   
        -:  647:    if (DEBUG){//Debug statements
        -:  648:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  649:    }
        -:  650:    
        -:  651:    state->discardCount[player] = 0;
        -:  652:
  1715035:  653:    //Step 2 Draw Card
call    0 returned 100%
  1715035:  654:    count = state->handCount[player];//Get current player's hand count
        -:  655:    
  1715035:  656:    if (DEBUG){//Debug statements
        -:  657:      printf("Current hand count: %d\n", count);
  1715035:  658:    }
        -:  659:    
  1715035:  660:    deckCounter = state->deckCount[player];//Create a holder for the deck count
  1715035:  661:
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
   617974:  662:    if (deckCounter == 0)
        -:  663:      return -1;
        -:  664:
        -:  665:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        -:  666:    state->deckCount[player]--;
  1715035:  667:    state->handCount[player]++;//Increment hand count
branch  0 taken 17%
branch  1 taken 83%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:  }
        -:  669:
 66582669:  670:  else{
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
 66012599:  671:    int count = state->handCount[player];//Get current hand count for player
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       90:  672:    int deckCounter;
call    0 returned 100%
        -:  673:    if (DEBUG){//Debug statements
 66012599:  674:      printf("Current hand count: %d\n", count);
call    0 returned 100%
 66012599:  675:    }
 66012599:  676:
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
   570070:  677:    deckCounter = state->deckCount[player];//Create holder for the deck count
        -:  678:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
 65442529:  679:    state->deckCount[player]--;
 65442529:  680:    state->handCount[player]++;//Increment hand count
 65442529:  681:  }
        -:  682:
        -:  683:  return 0;
 66012599:  684:}
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
 65442529:  685:
 65442529:  686:int getCost(int cardNumber)
        -:  687:{
   285035:  688:  switch( cardNumber ) 
        -:  689:    {
        -:  690:    case curse:
        -:  691:      return 0;
  7150000:  692:    case estate:
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  693:      return 2;
  5720000:  694:    case duchy:
call    0 returned 100%
        -:  695:      return 5;
        -:  696:    case province:
        -:  697:      return 8;
  1430000:  698:    case copper:
        -:  699:      return 0;
        -:  700:    case silver:
  5720565:  701:      return 3;
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  702:    case gold:
  4290565:  703:      return 6;
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  704:    case adventurer:
  2860565:  705:      return 6;
call    0 returned 100%
        -:  706:    case council_room:
        -:  707:      return 5;
        -:  708:    case feast:
        -:  709:      return 4;
  1430000:  710:    case gardens:
call    0 returned 100%
        -:  711:      return 4;
  1430000:  712:    case mine:
        -:  713:      return 5;
        -:  714:    case remodel:
        -:  715:      return 4;
        -:  716:    case smithy:
    #####:  717:      return 4;
branch  0 never executed
branch  1 never executed
    #####:  718:    case village:
    #####:  719:      return 3;
        -:  720:    case baron:
        -:  721:      return 4;
        -:  722:    case great_hall:
        -:  723:      return 3;
    #####:  724:    case minion:
call    0 never executed
    #####:  725:      return 5;
    #####:  726:    case steward:
branch  0 never executed
branch  1 never executed
    #####:  727:      return 3;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  728:    case tribute:
        -:  729:      return 5;
        -:  730:    case ambassador:
        -:  731:      return 3;
        -:  732:    case cutpurse:
        -:  733:      return 4;
        -:  734:    case embargo: 
    #####:  735:      return 2;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  736:    case outpost:
call    0 never executed
        -:  737:      return 5;
        -:  738:    case salvager:
        -:  739:      return 4;
        -:  740:    case sea_hag:
        -:  741:      return 4;
        -:  742:    case treasure_map:
        -:  743:      return 4;
        -:  744:    }
        -:  745:	
        -:  746:  return -1;
        -:  747:}
    #####:  748:
call    0 never executed
    #####:  749:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  750:{
        -:  751:  int i;
        -:  752:  int j;
        -:  753:  int k;
        -:  754:  int x;
        -:  755:  int index;
        -:  756:  int currentPlayer = whoseTurn(state);
        -:  757:  int nextPlayer = currentPlayer + 1;
        -:  758:
    #####:  759:  int tributeRevealedCards[2] = {-1, -1};
branch  0 never executed
branch  1 never executed
    #####:  760:  int temphand[MAX_HAND];// moved above the if statement
    #####:  761:  int drawntreasure=0;
        -:  762:  int cardDrawn;
        -:  763:  int z = 0;// this is the counter for the temp hand
        -:  764:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  765:    nextPlayer = 0;
        -:  766:  }
        -:  767:  
    #####:  768:	
        -:  769:  //uses switch to select card and perform actions
        -:  770:  switch( card ) 
    #####:  771:    {
        -:  772:			
    #####:  773:		//*************************************************************************
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  774:		//*************************************************************************
    #####:  775:		//ADVENTURER
        -:  776:		//*************************************************************************
        -:  777:    case adventurer:
    #####:  778:			return adventurerEffect(state, currentPlayer, handPos);
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  779:			
    #####:  780:    case council_room:
        -:  781:      //+4 Cards
        -:  782:      for (i = 0; i < 4; i++)
    #####:  783:	{
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  784:	  drawCard(currentPlayer, state);
    #####:  785:	}
        -:  786:			
        -:  787:      //+1 Buy
    #####:  788:      state->numBuys++;
call    0 never executed
        -:  789:			
        -:  790:      //Each other player draws a card
    #####:  791:      for (i = 0; i < state->numPlayers; i++)
call    0 never executed
        -:  792:	{
        -:  793:	  if ( i != currentPlayer )
    #####:  794:	    {
branch  0 never executed
branch  1 never executed
        -:  795:	      drawCard(i, state);
    #####:  796:	    }
branch  0 never executed
branch  1 never executed
        -:  797:	}
    #####:  798:			
call    0 never executed
    #####:  799:      //put played card in played card pile
        -:  800:      discardCard(handPos, currentPlayer, state, 0);
        -:  801:			
        -:  802:      return 0;
    #####:  803:			
        -:  804:    case feast:
        -:  805:      //gain card with cost up to 5
    #####:  806:      //Backup hand
        -:  807:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  808:	temphand[i] = state->hand[currentPlayer][i];//Backup card
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  809:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  810:      }
        -:  811:      //Backup hand
        -:  812:
    #####:  813:      //Update Coins for Buy
call    0 never executed
        -:  814:      updateCoins(currentPlayer, state, 5);
        -:  815:      x = 1;//Condition to loop on
    #####:  816:      while( x == 1) {//Buy one card
call    0 never executed
        -:  817:	if (supplyCount(choice1, state) <= 0){
        -:  818:	  if (DEBUG)
    #####:  819:	    printf("None of that card left, sorry!\n");
branch  0 never executed
branch  1 never executed
        -:  820:
    #####:  821:	  if (DEBUG){
branch  0 never executed
branch  1 never executed
        -:  822:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
    #####:  823:	  }
call    0 never executed
    #####:  824:	}
        -:  825:	else if (state->coins < getCost(choice1)){
        -:  826:	  printf("That card is too expensive!\n");
        -:  827:
        -:  828:	  if (DEBUG){
    #####:  829:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  830:	  }
        -:  831:	}
        -:  832:	else{
    #####:  833:
branch  0 never executed
branch  1 never executed
        -:  834:	  if (DEBUG){
    #####:  835:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
call    0 never executed
        -:  836:	  }
        -:  837:
        -:  838:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  839:	  x = 0;//No more buying cards
call    0 never executed
    #####:  840:
        -:  841:	  if (DEBUG){
        -:  842:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  843:	  }
    #####:  844:
call    0 never executed
        -:  845:	}
        -:  846:      }     
    #####:  847:
        -:  848:      //Reset Hand
        -:  849:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  850:	state->hand[currentPlayer][i] = temphand[i];
call    0 never executed
    #####:  851:	temphand[i] = -1;
        -:  852:      }
        -:  853:      //Reset Hand
    #####:  854:      			
    #####:  855:      return 0;
branch  0 never executed
branch  1 never executed
    #####:  856:			
    #####:  857:    case gardens:
    #####:  858:      return -1;
branch  0 never executed
branch  1 never executed
    #####:  859:			
branch  0 never executed
branch  1 never executed
    #####:  860:    case mine:
    #####:  861:      j = state->hand[currentPlayer][choice1];  //store card we will trash
    #####:  862:
    #####:  863:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
    #####:  864:	{
        -:  865:	  return -1;
    #####:  866:	}
    #####:  867:		
    #####:  868:      if (choice2 > treasure_map || choice2 < curse)
        -:  869:	{
    #####:  870:	  return -1;
branch  0 never executed
branch  1 never executed
        -:  871:	}
        -:  872:
        -:  873:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  874:	{
    #####:  875:	  return -1;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  876:	}
call    0 never executed
    #####:  877:
    #####:  878:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  879:
call    0 never executed
        -:  880:      //discard card from hand
        -:  881:      discardCard(handPos, currentPlayer, state, 0);
    #####:  882:
        -:  883:      //discard trashed card
        -:  884:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  885:	{
    #####:  886:	  if (state->hand[currentPlayer][i] == j)
        -:  887:	    {
        -:  888:	      discardCard(i, currentPlayer, state, 0);			
        -:  889:	      break;
        -:  890:	    }
        -:  891:	}
    #####:  892:			
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  893:      return 0;
call    0 never executed
    #####:  894:			
    #####:  895:    case remodel:
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  896:      j = state->hand[currentPlayer][choice1];  //store card we will trash
call    0 never executed
        -:  897:
        -:  898:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  899:	{
        -:  900:	  return -1;
        -:  901:	}
    #####:  902:
        -:  903:      gainCard(choice2, state, 0, currentPlayer);
        -:  904:
        -:  905:      //discard card from hand
    #####:  906:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  907:
        -:  908:      //discard trashed card
    #####:  909:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  910:	{
        -:  911:	  if (state->hand[currentPlayer][i] == j)
    #####:  912:	    {
call    0 never executed
    #####:  913:	      discardCard(i, currentPlayer, state, 0);			
        -:  914:	      break;
        -:  915:	    }
        -:  916:	}
    #####:  917:
        -:  918:
        -:  919:      return 0;
    #####:  920:
call    0 never executed
        -:  921:		//*************************************************************************
    #####:  922:		//*************************************************************************
branch  0 never executed
branch  1 never executed
        -:  923:		//SMITHY
    #####:  924:		//*************************************************************************
        -:  925:    case smithy:
        -:  926:			return smithyEffect(state, currentPlayer, handPos);
    #####:  927:		
branch  0 never executed
branch  1 never executed
        -:  928:    case village:
        -:  929:		
    #####:  930:      //+1 Card
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  931:      drawCard(currentPlayer, state);
    #####:  932:			
call    0 never executed
        -:  933:      //+2 Actions
        -:  934:      state->numActions = state->numActions + 2;
        -:  935:			
    #####:  936:      //discard played card from hand
branch  0 never executed
branch  1 never executed
        -:  937:      discardCard(handPos, currentPlayer, state, 0);
    #####:  938:      return 0;
call    0 never executed
        -:  939:		
        -:  940:    case baron:
        -:  941:      state->numBuys++;//Increase buys by 1!
    #####:  942:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
        -:  943:	int p = 0;//Iterator for hand!
    #####:  944:	int card_not_discarded = 1;//Flag for discard set!
branch  0 never executed
branch  1 never executed
        -:  945:	while(card_not_discarded){
    #####:  946:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
        -:  947:	    state->coins += 4;//Add 4 coins to the amount of coins
        -:  948:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  949:	    state->discardCount[currentPlayer]++;
branch  0 never executed
branch  1 never executed
        -:  950:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  951:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
call    0 never executed
        -:  952:	    }
        -:  953:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        -:  954:	    state->handCount[currentPlayer]--;
    #####:  955:	    card_not_discarded = 0;//Exit the loop
branch  0 never executed
branch  1 never executed
        -:  956:	  }
    #####:  957:	  else if (p > state->handCount[currentPlayer]){
call    0 never executed
        -:  958:	    if(DEBUG) {
        -:  959:	      printf("No estate cards in your hand, invalid choice\n");
        -:  960:	      printf("Must gain an estate if there are any\n");
        -:  961:	    }
        -:  962:	    if (supplyCount(estate, state) > 0){
        -:  963:	      gainCard(estate, state, 0, currentPlayer);
    #####:  964:	      state->supplyCount[estate]--;//Decrement estates
        -:  965:	      if (supplyCount(estate, state) == 0){
        -:  966:		isGameOver(state);
    #####:  967:	      }
branch  0 never executed
branch  1 never executed
        -:  968:	    }
        -:  969:	    card_not_discarded = 0;//Exit the loop
    #####:  970:	  }
call    0 never executed
    #####:  971:			    
call    0 never executed
        -:  972:	  else{
    #####:  973:	    p++;//Next card
branch  0 never executed
branch  1 never executed
        -:  974:	  }
        -:  975:	}
    #####:  976:      }
        -:  977:			    
        -:  978:      else{
        -:  979:	if (supplyCount(estate, state) > 0){
        -:  980:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  981:	  state->supplyCount[estate]--;//Decrement Estates
call    0 never executed
    #####:  982:	  if (supplyCount(estate, state) == 0){
call    0 never executed
        -:  983:	    isGameOver(state);
        -:  984:	  }
        -:  985:	}
    #####:  986:      }
call    0 never executed
    #####:  987:	    
        -:  988:      
        -:  989:      return 0;
    #####:  990:		
branch  0 never executed
branch  1 never executed
    #####:  991:    case great_hall:
branch  0 never executed
branch  1 never executed
    #####:  992:      //+1 Card
    #####:  993:      drawCard(currentPlayer, state);
        -:  994:			
    #####:  995:      //+1 Actions
branch  0 never executed
branch  1 never executed
    #####:  996:      state->numActions++;
    #####:  997:			
        -:  998:      //discard card from hand
        -:  999:      discardCard(handPos, currentPlayer, state, 0);
        -: 1000:      return 0;
        -: 1001:		
        -: 1002:    case minion:
        -: 1003:      //+1 action
        -: 1004:      state->numActions++;
        -: 1005:			
        -: 1006:      //discard card from hand
        -: 1007:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1008:			
branch  0 never executed
branch  1 never executed
    #####: 1009:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
    #####: 1010:	{
    #####: 1011:	  state->coins = state->coins + 2;
    #####: 1012:	}
    #####: 1013:			
        -: 1014:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1015:	{
    #####: 1016:	  //discard hand
call    0 never executed
        -: 1017:	  while(numHandCards(state) > 0)
    #####: 1018:	    {
    #####: 1019:	      discardCard(handPos, currentPlayer, state, 0);
    #####: 1020:	    }
    #####: 1021:				
    #####: 1022:	  //draw 4
    #####: 1023:	  for (i = 0; i < 4; i++)
        -: 1024:	    {
        -: 1025:	      drawCard(currentPlayer, state);
    #####: 1026:	    }
branch  0 never executed
branch  1 never executed
    #####: 1027:				
    #####: 1028:	  //other players discard hand and redraw if hand size > 4
    #####: 1029:	  for (i = 0; i < state->numPlayers; i++)
        -: 1030:	    {
        -: 1031:	      if (i != currentPlayer)
    #####: 1032:		{
branch  0 never executed
branch  1 never executed
    #####: 1033:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1034:		    {
        -: 1035:		      //discard hand
        -: 1036:		      while( state->handCount[i] > 0 )
    #####: 1037:			{
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1038:			  discardCard(handPos, i, state, 0);
call    0 never executed
    #####: 1039:			}
call    0 never executed
        -: 1040:							
        -: 1041:		      //draw 4
    #####: 1042:		      for (j = 0; j < 4; j++)
        -: 1043:			{
        -: 1044:			  drawCard(i, state);
        -: 1045:			}
    #####: 1046:		    }
        -: 1047:		}
        -: 1048:	    }
    #####: 1049:				
        -: 1050:	}
    #####: 1051:      return 0;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1052:		
    #####: 1053:		//*******************************************************************************
        -: 1054:		//*******************************************************************************
        -: 1055:		//STEWARD
    #####: 1056:		//*******************************************************************************
branch  0 never executed
branch  1 never executed
        -: 1057:    case steward:
    #####: 1058:			return stewardEffect(choice1, choice2, choice3, state, currentPlayer, handPos);
        -: 1059:			
        -: 1060:    case tribute:
    #####: 1061:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
        -: 1062:	if (state->deckCount[nextPlayer] > 0){
    #####: 1063:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1064:	  state->deckCount[nextPlayer]--;
    #####: 1065:	}
        -: 1066:	else if (state->discardCount[nextPlayer] > 0){
        -: 1067:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1068:	  state->discardCount[nextPlayer]--;
branch  0 never executed
branch  1 never executed
        -: 1069:	}
    #####: 1070:	else{
        -: 1071:	  //No Card to Reveal
        -: 1072:	  if (DEBUG){
        -: 1073:	    printf("No cards to reveal\n");
        -: 1074:	  }
        -: 1075:	}
        -: 1076:      }
    #####: 1077:	    
        -: 1078:      else{
        -: 1079:	if (state->deckCount[nextPlayer] == 0){
    #####: 1080:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
        -: 1081:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1082:	    state->deckCount[nextPlayer]++;
branch  0 never executed
branch  1 never executed
        -: 1083:	    state->discard[nextPlayer][i] = -1;
    #####: 1084:	    state->discardCount[nextPlayer]--;
call    0 never executed
        -: 1085:	  }
        -: 1086:			    
        -: 1087:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1088:	} 
    #####: 1089:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
call    0 never executed
        -: 1090:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -: 1091:	state->deckCount[nextPlayer]--;
    #####: 1092:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
branch  0 never executed
branch  1 never executed
        -: 1093:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1094:	state->deckCount[nextPlayer]--;
branch  0 never executed
branch  1 never executed
        -: 1095:      }    
    #####: 1096:		       
branch  0 never executed
branch  1 never executed
        -: 1097:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1098:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
call    0 never executed
    #####: 1099:	state->playedCardCount++;
        -: 1100:	tributeRevealedCards[1] = -1;
        -: 1101:      }
        -: 1102:
        -: 1103:      for (i = 0; i <= 2; i ++){
    #####: 1104:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
        -: 1105:	  state->coins += 2;
        -: 1106:	}
        -: 1107:		    
    #####: 1108:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
call    0 never executed
    #####: 1109:	  drawCard(currentPlayer, state);
branch  0 never executed
branch  1 never executed
        -: 1110:	  drawCard(currentPlayer, state);
    #####: 1111:	}
branch  0 never executed
branch  1 never executed
        -: 1112:	else{//Action Card
    #####: 1113:	  state->numActions = state->numActions + 2;
branch  0 never executed
branch  1 never executed
        -: 1114:	}
    #####: 1115:      }
branch  0 never executed
branch  1 never executed
        -: 1116:	    
    #####: 1117:      return 0;
call    0 never executed
    #####: 1118:		
        -: 1119:    case ambassador:
    #####: 1120:      j = 0;		//used to check if player has enough cards to discard
branch  0 never executed
branch  1 never executed
        -: 1121:
    #####: 1122:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
        -: 1123:	{
        -: 1124:	  return -1;				
        -: 1125:	}
        -: 1126:
    #####: 1127:      if (choice1 == handPos)
        -: 1128:	{
        -: 1129:	  return -1;
        -: 1130:	}
        -: 1131:
        -: 1132:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1133:	{
        -: 1134:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1135:	    {
    #####: 1136:	      j++;
call    0 never executed
        -: 1137:	    }
    #####: 1138:	}
        -: 1139:      if (j < choice2)
        -: 1140:	{
        -: 1141:	  return -1;				
        -: 1142:	}
    #####: 1143:
        -: 1144:      if (DEBUG) 
        -: 1145:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
    #####: 1146:
branch  0 never executed
branch  1 never executed
        -: 1147:      //increase supply count for choosen card by amount being discarded
    #####: 1148:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1149:			
        -: 1150:      //each other player gains a copy of revealed card
        -: 1151:      for (i = 0; i < state->numPlayers; i++)
    #####: 1152:	{
        -: 1153:	  if (i != currentPlayer)
        -: 1154:	    {
    #####: 1155:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
    #####: 1156:	    }
        -: 1157:	}
        -: 1158:
        -: 1159:      //discard played card from hand
    #####: 1160:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1161:
        -: 1162:      //trash copies of cards returned to supply
    #####: 1163:      for (j = 0; j < choice2; j++)
call    0 never executed
    #####: 1164:	{
        -: 1165:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1166:	    {
        -: 1167:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    #####: 1168:		{
        -: 1169:		  discardCard(i, currentPlayer, state, 1);
    #####: 1170:		  break;
branch  0 never executed
branch  1 never executed
        -: 1171:		}
        -: 1172:	    }
    #####: 1173:	}			
call    0 never executed
call    1 never executed
        -: 1174:
    #####: 1175:      return 0;
call    0 never executed
        -: 1176:		
        -: 1177:    case cutpurse:
        -: 1178:
    #####: 1179:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1180:      for (i = 0; i < state->numPlayers; i++)
        -: 1181:	{
        -: 1182:	  if (i != currentPlayer)
    #####: 1183:	    {
branch  0 never executed
branch  1 never executed
    #####: 1184:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
    #####: 1185:		{
    #####: 1186:		  if (state->hand[i][j] == copper)
    #####: 1187:		    {
        -: 1188:		      discardCard(j, i, state, 0);
        -: 1189:		      break;
    #####: 1190:		    }
        -: 1191:		  if (j == state->handCount[i])
        -: 1192:		    {
        -: 1193:		      for (k = 0; k < state->handCount[i]; k++)
    #####: 1194:			{
    #####: 1195:			  if (DEBUG)
branch  0 never executed
branch  1 never executed
        -: 1196:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1197:			}	
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1198:		      break;
    #####: 1199:		    }		
    #####: 1200:		}
        -: 1201:					
        -: 1202:	    }
    #####: 1203:				
branch  0 never executed
branch  1 never executed
        -: 1204:	}				
        -: 1205:
    #####: 1206:      //discard played card from hand
call    0 never executed
    #####: 1207:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1208:
        -: 1209:      return 0;
    #####: 1210:
branch  0 never executed
branch  1 never executed
        -: 1211:		//***********************************************************************
    #####: 1212:		//***********************************************************************
call    0 never executed
        -: 1213:		//EMBARGO
        -: 1214:		//***********************************************************************
        -: 1215:    case embargo:
    #####: 1216:		
        -: 1217:			return embargoEffect(choice1, state, currentPlayer, handPos);
        -: 1218:		
        -: 1219:    case outpost:
    #####: 1220:      //set outpost flag
        -: 1221:      state->outpostPlayed++;
        -: 1222:			
    #####: 1223:      //discard card
        -: 1224:      discardCard(handPos, currentPlayer, state, 0);
        -: 1225:      return 0;
function discardCard called 1430000 returned 100% blocks executed 78%
  1430000: 1226:
        -: 1227:		//***********************************************************************
        -: 1228:		//***********************************************************************
        -: 1229:		//SALVAGER
  1430000: 1230:		//***********************************************************************
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1231:    case salvager:
        -: 1232:			return salvagerEffect(choice1, state, currentPlayer, handPos);
  1430000: 1233:			
  1430000: 1234:    case sea_hag:
        -: 1235:      for (i = 0; i < state->numPlayers; i++){
        -: 1236:	if (i != currentPlayer){
        -: 1237:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
  1430000: 1238:	  state->discardCount[i]++;
        -: 1239:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1240:	}
  1430000: 1241:      }
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1242:      return 0;
        -: 1243:		
    #####: 1244:    case treasure_map:
        -: 1245:      //search hand for another treasure_map
  1430000: 1246:      index = -1;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1247:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1248:	{
    #####: 1249:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1250:	    {
        -: 1251:	      index = i;
        -: 1252:	      break;
        -: 1253:	    }
  1430000: 1254:	}
        -: 1255:      if (index > -1)
  1430000: 1256:	{
        -: 1257:	  //trash both treasure cards
  1430000: 1258:	  discardCard(handPos, currentPlayer, state, 1);
        -: 1259:	  discardCard(index, currentPlayer, state, 1);
        -: 1260:
  1430000: 1261:	  //gain 4 Gold cards
        -: 1262:	  for (i = 0; i < 4; i++)
        -: 1263:	    {
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1264:	      gainCard(gold, state, 1, currentPlayer);
        -: 1265:	    }
        -: 1266:				
        -: 1267:	  //return success
        -: 1268:	  return 1;
    #####: 1269:	}
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1270:			
    #####: 1271:      //no second treasure_map found in hand
        -: 1272:      return -1;
        -: 1273:    }
        -: 1274:	
        -: 1275:  return -1;
        -: 1276:}
        -: 1277:
        -: 1278:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
    #####: 1279:{
branch  0 never executed
branch  1 never executed
        -: 1280:	
    #####: 1281:  //if card is not trashed, added to Played pile 
    #####: 1282:  if (trashFlag < 1)
        -: 1283:    {
    #####: 1284:      //add card to played pile
branch  0 never executed
branch  1 never executed
        -: 1285:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1286:      state->playedCardCount++;
    #####: 1287:    }
        -: 1288:	
        -: 1289:  //set played card to -1
        -: 1290:  state->hand[currentPlayer][handPos] = -1;
    #####: 1291:	
    #####: 1292:  //remove card from player's hand
        -: 1293:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1294:    {
        -: 1295:      //reduce number of cards in hand
    #####: 1296:      state->handCount[currentPlayer]--;
        -: 1297:    }
    #####: 1298:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1299:    {
        -: 1300:      //reduce number of cards in hand
function updateCoins called 3430070 returned 100% blocks executed 91%
  3430070: 1301:      state->handCount[currentPlayer]--;
        -: 1302:    }
        -: 1303:  else 	
        -: 1304:    {
        -: 1305:      //replace discarded card with last card in hand
  3430070: 1306:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1307:      //set last card to -1
        -: 1308:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
442169696: 1309:      //reduce number of cards in hand
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 1310:      state->handCount[currentPlayer]--;
438739626: 1311:    }
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -: 1312:	
 12619726: 1313:  return 0;
        -: 1314:}
426119900: 1315:
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1316:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
       20: 1317:{
        -: 1318:  //Note: supplyPos is enum of choosen card
426119880: 1319:	
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1320:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1321:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1322:    {
        -: 1323:      return -1;
        -: 1324:    }
        -: 1325:	
  3430070: 1326:  //added card for [whoseTurn] current player:
        -: 1327:  // toFlag = 0 : add to discard
  3430070: 1328:  // toFlag = 1 : add to deck
        -: 1329:  // toFlag = 2 : add to hand
        -: 1330:
        -: 1331:  if (toFlag == 1)
        -: 1332:    {
        -: 1333:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        -: 1334:      state->deckCount[player]++;
        -: 1335:    }
        -: 1336:  else if (toFlag == 2)
        -: 1337:    {
        -: 1338:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        -: 1339:      state->handCount[player]++;
        -: 1340:    }
        -: 1341:  else
        -: 1342:    {
        -: 1343:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        -: 1344:      state->discardCount[player]++;
        -: 1345:    }
        -: 1346:	
        -: 1347:  //decrease number in supply pile
        -: 1348:  state->supplyCount[supplyPos]--;
        -: 1349:	 
        -: 1350:  return 0;
        -: 1351:}
        -: 1352:
        -: 1353:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1354:{
        -: 1355:  int i;
        -: 1356:	
        -: 1357:  //reset coin count
        -: 1358:  state->coins = 0;
        -: 1359:
        -: 1360:  //add coins for each Treasure card in player's hand
        -: 1361:  for (i = 0; i < state->handCount[player]; i++)
        -: 1362:    {
        -: 1363:      if (state->hand[player][i] == copper)
        -: 1364:	{
        -: 1365:	  state->coins += 1;
        -: 1366:	}
        -: 1367:      else if (state->hand[player][i] == silver)
        -: 1368:	{
        -: 1369:	  state->coins += 2;
        -: 1370:	}
        -: 1371:      else if (state->hand[player][i] == gold)
        -: 1372:	{
        -: 1373:	  state->coins += 3;
        -: 1374:	}	
        -: 1375:    }	
        -: 1376:
        -: 1377:  //add bonus
        -: 1378:  state->coins += bonus;
        -: 1379:
        -: 1380:  return 0;
        -: 1381:}
        -: 1382:
        -: 1383:
        -: 1384://end of dominion.c
        -: 1385:
