unittest1.c testing updateCoins():
coppers no bonus
Test player 0 with 1 treasure card(s) and 0 bonus.
state.coins = 1, expected = 1: PASSED
Test player 0 with 500 treasure card(s) and 0 bonus.
state.coins = 500, expected = 500: PASSED
coppers with bonus
Test player 0 with 1 treasure card(s) and 10 bonus.
state.coins = 11, expected = 11: PASSED
Test player 0 with 500 treasure card(s) and 10 bonus.
state.coins = 510, expected = 510: PASSED
silvers no bonus
Test player 0 with 1 treasure card(s) and 0 bonus.
state.coins = 2, expected = 2: PASSED
Test player 0 with 500 treasure card(s) and 0 bonus.
state.coins = 1000, expected = 1000: PASSED
silvers with bonus
Test player 0 with 1 treasure card(s) and 10 bonus.
state.coins = 12, expected = 12: PASSED
Test player 0 with 500 treasure card(s) and 10 bonus.
state.coins = 1010, expected = 1010: PASSED
gold no bonus
Test player 0 with 1 treasure card(s) and 0 bonus.
state.coins = 3, expected = 3: PASSED
Test player 0 with 500 treasure card(s) and 0 bonus.
state.coins = 1500, expected = 1500: PASSED
gold with bonus
Test player 0 with 1 treasure card(s) and 10 bonus.
state.coins = 13, expected = 13: PASSED
Test player 0 with 500 treasure card(s) and 10 bonus.
state.coins = 1510, expected = 1510: PASSED
no coins & no bonus
Test player 0 with 0 treasure card(s) and 0 bonus.
state.coins = 0, expected = 0: PASSED
Test player 0 with 0 treasure card(s) and 0 bonus.
state.coins = 0, expected = 0: PASSED
Test player 0 with 0 treasure card(s) and 0 bonus.
state.coins = 0, expected = 0: PASSED
no coins with bonus
Test player 0 with 0 treasure card(s) and 10 bonus.
state.coins = 10, expected = 10: PASSED
Test player 0 with 0 treasure card(s) and 10 bonus.
state.coins = 10, expected = 10: PASSED
Test player 0 with 0 treasure card(s) and 10 bonus.
state.coins = 10, expected = 10: PASSED
coppers no bonus
Test player 1 with 1 treasure card(s) and 0 bonus.
state.coins = 1, expected = 1: PASSED
Test player 1 with 500 treasure card(s) and 0 bonus.
state.coins = 500, expected = 500: PASSED
coppers with bonus
Test player 1 with 1 treasure card(s) and 10 bonus.
state.coins = 11, expected = 11: PASSED
Test player 1 with 500 treasure card(s) and 10 bonus.
state.coins = 510, expected = 510: PASSED
silvers no bonus
Test player 1 with 1 treasure card(s) and 0 bonus.
state.coins = 2, expected = 2: PASSED
Test player 1 with 500 treasure card(s) and 0 bonus.
state.coins = 1000, expected = 1000: PASSED
silvers with bonus
Test player 1 with 1 treasure card(s) and 10 bonus.
state.coins = 12, expected = 12: PASSED
Test player 1 with 500 treasure card(s) and 10 bonus.
state.coins = 1010, expected = 1010: PASSED
gold no bonus
Test player 1 with 1 treasure card(s) and 0 bonus.
state.coins = 3, expected = 3: PASSED
Test player 1 with 500 treasure card(s) and 0 bonus.
state.coins = 1500, expected = 1500: PASSED
gold with bonus
Test player 1 with 1 treasure card(s) and 10 bonus.
state.coins = 13, expected = 13: PASSED
Test player 1 with 500 treasure card(s) and 10 bonus.
state.coins = 1510, expected = 1510: PASSED
no coins & no bonus
Test player 1 with 0 treasure card(s) and 0 bonus.
state.coins = 0, expected = 0: PASSED
Test player 1 with 0 treasure card(s) and 0 bonus.
state.coins = 0, expected = 0: PASSED
Test player 1 with 0 treasure card(s) and 0 bonus.
state.coins = 0, expected = 0: PASSED
no coins with bonus
Test player 1 with 0 treasure card(s) and 10 bonus.
state.coins = 10, expected = 10: PASSED
Test player 1 with 0 treasure card(s) and 10 bonus.
state.coins = 10, expected = 10: PASSED
Test player 1 with 0 treasure card(s) and 10 bonus.
state.coins = 10, expected = 10: PASSED
coppers no bonus
Test player 2 with 1 treasure card(s) and 0 bonus.
state.coins = 1, expected = 1: PASSED
Test player 2 with 500 treasure card(s) and 0 bonus.
state.coins = 500, expected = 500: PASSED
coppers with bonus
Test player 2 with 1 treasure card(s) and 10 bonus.
state.coins = 11, expected = 11: PASSED
Test player 2 with 500 treasure card(s) and 10 bonus.
state.coins = 510, expected = 510: PASSED
silvers no bonus
Test player 2 with 1 treasure card(s) and 0 bonus.
state.coins = 2, expected = 2: PASSED
Test player 2 with 500 treasure card(s) and 0 bonus.
state.coins = 1000, expected = 1000: PASSED
silvers with bonus
Test player 2 with 1 treasure card(s) and 10 bonus.
state.coins = 12, expected = 12: PASSED
Test player 2 with 500 treasure card(s) and 10 bonus.
state.coins = 1010, expected = 1010: PASSED
gold no bonus
Test player 2 with 1 treasure card(s) and 0 bonus.
state.coins = 3, expected = 3: PASSED
Test player 2 with 500 treasure card(s) and 0 bonus.
state.coins = 1500, expected = 1500: PASSED
gold with bonus
Test player 2 with 1 treasure card(s) and 10 bonus.
state.coins = 13, expected = 13: PASSED
Test player 2 with 500 treasure card(s) and 10 bonus.
state.coins = 1510, expected = 1510: PASSED
no coins & no bonus
Test player 2 with 0 treasure card(s) and 0 bonus.
state.coins = 0, expected = 0: PASSED
Test player 2 with 0 treasure card(s) and 0 bonus.
state.coins = 0, expected = 0: PASSED
Test player 2 with 0 treasure card(s) and 0 bonus.
state.coins = 0, expected = 0: PASSED
no coins with bonus
Test player 2 with 0 treasure card(s) and 10 bonus.
state.coins = 10, expected = 10: PASSED
Test player 2 with 0 treasure card(s) and 10 bonus.
state.coins = 10, expected = 10: PASSED
Test player 2 with 0 treasure card(s) and 10 bonus.
state.coins = 10, expected = 10: PASSED
coppers no bonus
Test player 3 with 1 treasure card(s) and 0 bonus.
state.coins = 1, expected = 1: PASSED
Test player 3 with 500 treasure card(s) and 0 bonus.
state.coins = 500, expected = 500: PASSED
coppers with bonus
Test player 3 with 1 treasure card(s) and 10 bonus.
state.coins = 11, expected = 11: PASSED
Test player 3 with 500 treasure card(s) and 10 bonus.
state.coins = 510, expected = 510: PASSED
silvers no bonus
Test player 3 with 1 treasure card(s) and 0 bonus.
state.coins = 2, expected = 2: PASSED
Test player 3 with 500 treasure card(s) and 0 bonus.
state.coins = 1000, expected = 1000: PASSED
silvers with bonus
Test player 3 with 1 treasure card(s) and 10 bonus.
state.coins = 12, expected = 12: PASSED
Test player 3 with 500 treasure card(s) and 10 bonus.
state.coins = 1010, expected = 1010: PASSED
gold no bonus
Test player 3 with 1 treasure card(s) and 0 bonus.
state.coins = 3, expected = 3: PASSED
Test player 3 with 500 treasure card(s) and 0 bonus.
state.coins = 1500, expected = 1500: PASSED
gold with bonus
Test player 3 with 1 treasure card(s) and 10 bonus.
state.coins = 13, expected = 13: PASSED
Test player 3 with 500 treasure card(s) and 10 bonus.
state.coins = 1510, expected = 1510: PASSED
no coins & no bonus
Test player 3 with 0 treasure card(s) and 0 bonus.
state.coins = 0, expected = 0: PASSED
Test player 3 with 0 treasure card(s) and 0 bonus.
state.coins = 0, expected = 0: PASSED
Test player 3 with 0 treasure card(s) and 0 bonus.
state.coins = 0, expected = 0: PASSED
no coins with bonus
Test player 3 with 0 treasure card(s) and 10 bonus.
state.coins = 10, expected = 10: PASSED
Test player 3 with 0 treasure card(s) and 10 bonus.
state.coins = 10, expected = 10: PASSED
Test player 3 with 0 treasure card(s) and 10 bonus.
state.coins = 10, expected = 10: PASSED
Function 'updateCoins'
Lines executed:100.00% of 11

Function 'gainCard'
Lines executed:100.00% of 13

Function 'discardCard'
Lines executed:92.31% of 13

Function 'cardEffect'
Lines executed:12.29% of 236

Function 'getCost'
Lines executed:100.00% of 30

Function 'drawCard'
Lines executed:36.36% of 22

Function 'getWinners'
Lines executed:100.00% of 24

Function 'scoreFor'
Lines executed:50.00% of 24

Function 'isGameOver'
Lines executed:0.00% of 10

Function 'endTurn'
Lines executed:0.00% of 20

Function 'whoseTurn'
Lines executed:100.00% of 2

Function 'fullDeckCount'
Lines executed:0.00% of 9

Function 'supplyCount'
Lines executed:100.00% of 2

Function 'handCard'
Lines executed:0.00% of 3

Function 'numHandCards'
Lines executed:0.00% of 2

Function 'buyCard'
Lines executed:0.00% of 13

Function 'playCard'
Lines executed:0.00% of 14

Function 'shuffle'
Lines executed:93.75% of 16

Function 'initializeGame'
Lines executed:95.16% of 62

Function 'kingdomCards'
Lines executed:0.00% of 13

Function 'newGame'
Lines executed:0.00% of 3

Function 'compare'
Lines executed:83.33% of 6

File 'dominion.c'
Lines executed:40.51% of 548
Creating 'dominion.c.gcov'

unittest2.c: testing getCoins():
Test card 'curse': Cost returned:0 and expected:0 PASSED
Test card 'estate': Cost returned:2 and expected:2 PASSED
Test card 'duchy': Cost returned:5 and expected:5 PASSED
Test card 'province': Cost returned:8 and expected:8 PASSED
Test card 'copper': Cost returned:0 and expected:0 PASSED
Test card 'silver': Cost returned:3 and expected:3 PASSED
Test card 'gold': Cost returned:6 and expected:6 PASSED
Test card 'adventurer': Cost returned:6 and expected:6 PASSED
Test card 'council_room': Cost returned:5 and expected:5 PASSED
Test card 'feast': Cost returned:4 and expected:4 PASSED
Test card 'gardens': Cost returned:4 and expected:4 PASSED
Test card 'mine': Cost returned:5 and expected:5 PASSED
Test card 'remodel': Cost returned:4 and expected:4 PASSED
Test card 'smithy': Cost returned:4 and expected:4 PASSED
Test card 'village': Cost returned:3 and expected:3 PASSED
Test card 'baron': Cost returned:4 and expected:4 PASSED
Test card 'great_hall': Cost returned:3 and expected:3 PASSED
Test card 'minion': Cost returned:5 and expected:5 PASSED
Test card 'steward': Cost returned:3 and expected:3 PASSED
Test card 'tribute': Cost returned:5 and expected:5 PASSED
Test card 'ambassador': Cost returned:3 and expected:3 PASSED
Test card 'cutpurse': Cost returned:4 and expected:4 PASSED
Test card 'embargo': Cost returned:2 and expected:2 PASSED
Test card 'outpost': Cost returned:5 and expected:5 PASSED
Test card 'salvager': Cost returned:4 and expected:4 PASSED
Test card 'sea_hag': Cost returned:4 and expected:4 PASSED
Test card 'treasure_map': Cost returned:4 and expected:4 PASSED
Test invalid input -10: Cost returned:-1 and expected:-1 PASSED
Test invalid input 28: Cost returned:-1 and expected:-1 PASSED
Function 'updateCoins'
Lines executed:100.00% of 11

Function 'gainCard'
Lines executed:100.00% of 13

Function 'discardCard'
Lines executed:92.31% of 13

Function 'cardEffect'
Lines executed:12.29% of 236

Function 'getCost'
Lines executed:100.00% of 30

Function 'drawCard'
Lines executed:36.36% of 22

Function 'getWinners'
Lines executed:100.00% of 24

Function 'scoreFor'
Lines executed:50.00% of 24

Function 'isGameOver'
Lines executed:0.00% of 10

Function 'endTurn'
Lines executed:0.00% of 20

Function 'whoseTurn'
Lines executed:100.00% of 2

Function 'fullDeckCount'
Lines executed:0.00% of 9

Function 'supplyCount'
Lines executed:100.00% of 2

Function 'handCard'
Lines executed:0.00% of 3

Function 'numHandCards'
Lines executed:0.00% of 2

Function 'buyCard'
Lines executed:0.00% of 13

Function 'playCard'
Lines executed:0.00% of 14

Function 'shuffle'
Lines executed:93.75% of 16

Function 'initializeGame'
Lines executed:95.16% of 62

Function 'kingdomCards'
Lines executed:0.00% of 13

Function 'newGame'
Lines executed:0.00% of 3

Function 'compare'
Lines executed:83.33% of 6

File 'dominion.c'
Lines executed:40.51% of 548
Creating 'dominion.c.gcov'

unittest3.c: testing gainCard():

Runing gainCard() to add 'curse' to deck...
player 0 starting deckcount=5; ending deckcount=6 PASSED
cardDrawn = curse PASSED
Starting Supply Count for curse = 10; Ending Supply Count = 9 PASSED

Runing gainCard() to add 'estate' to deck...
player 0 starting deckcount=6; ending deckcount=7 PASSED
cardDrawn = estate PASSED
Starting Supply Count for estate = 8; Ending Supply Count = 7 PASSED

Runing gainCard() to add 'duchy' to deck...
player 0 starting deckcount=7; ending deckcount=8 PASSED
cardDrawn = duchy PASSED
Starting Supply Count for duchy = 8; Ending Supply Count = 7 PASSED

Runing gainCard() to add 'province' to deck...
player 0 starting deckcount=8; ending deckcount=9 PASSED
cardDrawn = province PASSED
Starting Supply Count for province = 8; Ending Supply Count = 7 PASSED

Runing gainCard() to add 'copper' to deck...
player 0 starting deckcount=9; ending deckcount=10 PASSED
cardDrawn = copper PASSED
Starting Supply Count for copper = 46; Ending Supply Count = 45 PASSED

Runing gainCard() to add 'silver' to deck...
player 0 starting deckcount=10; ending deckcount=11 PASSED
cardDrawn = silver PASSED
Starting Supply Count for silver = 40; Ending Supply Count = 39 PASSED

Runing gainCard() to add 'gold' to deck...
player 0 starting deckcount=11; ending deckcount=12 PASSED
cardDrawn = gold PASSED
Starting Supply Count for gold = 30; Ending Supply Count = 29 PASSED

Runing gainCard() to add 'adventurer' to deck...
player 0 starting deckcount=12; ending deckcount=13 PASSED
cardDrawn = adventurer PASSED
Starting Supply Count for adventurer = 10; Ending Supply Count = 9 PASSED

Runing gainCard() to add 'council_room' to deck...
player 0 starting deckcount=13; ending deckcount=14 PASSED
cardDrawn = council_room PASSED
Starting Supply Count for council_room = 10; Ending Supply Count = 9 PASSED

Runing gainCard() to add 'feast' to deck...
player 0 starting deckcount=14; ending deckcount=15 PASSED
cardDrawn = feast PASSED
Starting Supply Count for feast = 10; Ending Supply Count = 9 PASSED

Runing gainCard() to add 'gardens' to deck...
player 0 starting deckcount=15; ending deckcount=16 PASSED
cardDrawn = gardens PASSED
Starting Supply Count for gardens = 8; Ending Supply Count = 7 PASSED

Runing gainCard() to add 'mine' to deck...
player 0 starting deckcount=16; ending deckcount=17 PASSED
cardDrawn = mine PASSED
Starting Supply Count for mine = 10; Ending Supply Count = 9 PASSED

Runing gainCard() to add 'remodel' to deck...
player 0 starting deckcount=17; ending deckcount=18 PASSED
cardDrawn = remodel PASSED
Starting Supply Count for remodel = 10; Ending Supply Count = 9 PASSED

Runing gainCard() to add 'smithy' to deck...
player 0 starting deckcount=18; ending deckcount=19 PASSED
cardDrawn = smithy PASSED
Starting Supply Count for smithy = 10; Ending Supply Count = 9 PASSED

Runing gainCard() to add 'village' to deck...
player 0 starting deckcount=19; ending deckcount=20 PASSED
cardDrawn = village PASSED
Starting Supply Count for village = 10; Ending Supply Count = 9 PASSED

Runing gainCard() to add 'baron' to deck...
player 0 starting deckcount=20; ending deckcount=21 PASSED
cardDrawn = baron PASSED
Starting Supply Count for baron = 10; Ending Supply Count = 9 PASSED

Runing gainCard() to add 'great_hall' to deck...
player 0 starting deckcount=21; ending deckcount=22 PASSED
cardDrawn = great_hall PASSED
Starting Supply Count for great_hall = 8; Ending Supply Count = 7 PASSED

Runing gainCard() to add 'minion' to deck...
minion is not in the supply. Skipping.

Runing gainCard() to add 'steward' to deck...
steward is not in the supply. Skipping.

Runing gainCard() to add 'tribute' to deck...
tribute is not in the supply. Skipping.

Runing gainCard() to add 'ambassador' to deck...
ambassador is not in the supply. Skipping.

Runing gainCard() to add 'cutpurse' to deck...
cutpurse is not in the supply. Skipping.

Runing gainCard() to add 'embargo' to deck...
embargo is not in the supply. Skipping.

Runing gainCard() to add 'outpost' to deck...
outpost is not in the supply. Skipping.

Runing gainCard() to add 'salvager' to deck...
salvager is not in the supply. Skipping.

Runing gainCard() to add 'sea_hag' to deck...
sea_hag is not in the supply. Skipping.

Runing gainCard() to add 'treasure_map' to deck...
treasure_map is not in the supply. Skipping.

Runing gainCard() to add 'curse' to hand...
player 1 starting handcount=0; ending handcount=1 PASSED
cardDrawn = curse PASSED
Starting Supply Count for curse = 9; Ending Supply Count = 8 PASSED

Runing gainCard() to add 'estate' to hand...
player 1 starting handcount=1; ending handcount=2 PASSED
cardDrawn = estate PASSED
Starting Supply Count for estate = 7; Ending Supply Count = 6 PASSED

Runing gainCard() to add 'duchy' to hand...
player 1 starting handcount=2; ending handcount=3 PASSED
cardDrawn = duchy PASSED
Starting Supply Count for duchy = 7; Ending Supply Count = 6 PASSED

Runing gainCard() to add 'province' to hand...
player 1 starting handcount=3; ending handcount=4 PASSED
cardDrawn = province PASSED
Starting Supply Count for province = 7; Ending Supply Count = 6 PASSED

Runing gainCard() to add 'copper' to hand...
player 1 starting handcount=4; ending handcount=5 PASSED
cardDrawn = copper PASSED
Starting Supply Count for copper = 45; Ending Supply Count = 44 PASSED

Runing gainCard() to add 'silver' to hand...
player 1 starting handcount=5; ending handcount=6 PASSED
cardDrawn = silver PASSED
Starting Supply Count for silver = 39; Ending Supply Count = 38 PASSED

Runing gainCard() to add 'gold' to hand...
player 1 starting handcount=6; ending handcount=7 PASSED
cardDrawn = gold PASSED
Starting Supply Count for gold = 29; Ending Supply Count = 28 PASSED

Runing gainCard() to add 'adventurer' to hand...
player 1 starting handcount=7; ending handcount=8 PASSED
cardDrawn = adventurer PASSED
Starting Supply Count for adventurer = 9; Ending Supply Count = 8 PASSED

Runing gainCard() to add 'council_room' to hand...
player 1 starting handcount=8; ending handcount=9 PASSED
cardDrawn = council_room PASSED
Starting Supply Count for council_room = 9; Ending Supply Count = 8 PASSED

Runing gainCard() to add 'feast' to hand...
player 1 starting handcount=9; ending handcount=10 PASSED
cardDrawn = feast PASSED
Starting Supply Count for feast = 9; Ending Supply Count = 8 PASSED

Runing gainCard() to add 'gardens' to hand...
player 1 starting handcount=10; ending handcount=11 PASSED
cardDrawn = gardens PASSED
Starting Supply Count for gardens = 7; Ending Supply Count = 6 PASSED

Runing gainCard() to add 'mine' to hand...
player 1 starting handcount=11; ending handcount=12 PASSED
cardDrawn = mine PASSED
Starting Supply Count for mine = 9; Ending Supply Count = 8 PASSED

Runing gainCard() to add 'remodel' to hand...
player 1 starting handcount=12; ending handcount=13 PASSED
cardDrawn = remodel PASSED
Starting Supply Count for remodel = 9; Ending Supply Count = 8 PASSED

Runing gainCard() to add 'smithy' to hand...
player 1 starting handcount=13; ending handcount=14 PASSED
cardDrawn = smithy PASSED
Starting Supply Count for smithy = 9; Ending Supply Count = 8 PASSED

Runing gainCard() to add 'village' to hand...
player 1 starting handcount=14; ending handcount=15 PASSED
cardDrawn = village PASSED
Starting Supply Count for village = 9; Ending Supply Count = 8 PASSED

Runing gainCard() to add 'baron' to hand...
player 1 starting handcount=15; ending handcount=16 PASSED
cardDrawn = baron PASSED
Starting Supply Count for baron = 9; Ending Supply Count = 8 PASSED

Runing gainCard() to add 'great_hall' to hand...
player 1 starting handcount=16; ending handcount=17 PASSED
cardDrawn = great_hall PASSED
Starting Supply Count for great_hall = 7; Ending Supply Count = 6 PASSED

Runing gainCard() to add 'minion' to hand...
minion is not in the supply. Skipping.

Runing gainCard() to add 'steward' to hand...
steward is not in the supply. Skipping.

Runing gainCard() to add 'tribute' to hand...
tribute is not in the supply. Skipping.

Runing gainCard() to add 'ambassador' to hand...
ambassador is not in the supply. Skipping.

Runing gainCard() to add 'cutpurse' to hand...
cutpurse is not in the supply. Skipping.

Runing gainCard() to add 'embargo' to hand...
embargo is not in the supply. Skipping.

Runing gainCard() to add 'outpost' to hand...
outpost is not in the supply. Skipping.

Runing gainCard() to add 'salvager' to hand...
salvager is not in the supply. Skipping.

Runing gainCard() to add 'sea_hag' to hand...
sea_hag is not in the supply. Skipping.

Runing gainCard() to add 'treasure_map' to hand...
treasure_map is not in the supply. Skipping.

Runing gainCard() to add 'curse' to discard...
player 1 starting discardCount=0; ending discardCount=1 PASSED
cardDrawn = curse PASSED
Starting Supply Count for curse = 8; Ending Supply Count = 7 PASSED

Runing gainCard() to add 'estate' to discard...
player 1 starting discardCount=1; ending discardCount=2 PASSED
cardDrawn = estate PASSED
Starting Supply Count for estate = 6; Ending Supply Count = 5 PASSED

Runing gainCard() to add 'duchy' to discard...
player 1 starting discardCount=2; ending discardCount=3 PASSED
cardDrawn = duchy PASSED
Starting Supply Count for duchy = 6; Ending Supply Count = 5 PASSED

Runing gainCard() to add 'province' to discard...
player 1 starting discardCount=3; ending discardCount=4 PASSED
cardDrawn = province PASSED
Starting Supply Count for province = 6; Ending Supply Count = 5 PASSED

Runing gainCard() to add 'copper' to discard...
player 1 starting discardCount=4; ending discardCount=5 PASSED
cardDrawn = copper PASSED
Starting Supply Count for copper = 44; Ending Supply Count = 43 PASSED

Runing gainCard() to add 'silver' to discard...
player 1 starting discardCount=5; ending discardCount=6 PASSED
cardDrawn = silver PASSED
Starting Supply Count for silver = 38; Ending Supply Count = 37 PASSED

Runing gainCard() to add 'gold' to discard...
player 1 starting discardCount=6; ending discardCount=7 PASSED
cardDrawn = gold PASSED
Starting Supply Count for gold = 28; Ending Supply Count = 27 PASSED

Runing gainCard() to add 'adventurer' to discard...
player 1 starting discardCount=7; ending discardCount=8 PASSED
cardDrawn = adventurer PASSED
Starting Supply Count for adventurer = 8; Ending Supply Count = 7 PASSED

Runing gainCard() to add 'council_room' to discard...
player 1 starting discardCount=8; ending discardCount=9 PASSED
cardDrawn = council_room PASSED
Starting Supply Count for council_room = 8; Ending Supply Count = 7 PASSED

Runing gainCard() to add 'feast' to discard...
player 1 starting discardCount=9; ending discardCount=10 PASSED
cardDrawn = feast PASSED
Starting Supply Count for feast = 8; Ending Supply Count = 7 PASSED

Runing gainCard() to add 'gardens' to discard...
player 1 starting discardCount=10; ending discardCount=11 PASSED
cardDrawn = gardens PASSED
Starting Supply Count for gardens = 6; Ending Supply Count = 5 PASSED

Runing gainCard() to add 'mine' to discard...
player 1 starting discardCount=11; ending discardCount=12 PASSED
cardDrawn = mine PASSED
Starting Supply Count for mine = 8; Ending Supply Count = 7 PASSED

Runing gainCard() to add 'remodel' to discard...
player 1 starting discardCount=12; ending discardCount=13 PASSED
cardDrawn = remodel PASSED
Starting Supply Count for remodel = 8; Ending Supply Count = 7 PASSED

Runing gainCard() to add 'smithy' to discard...
player 1 starting discardCount=13; ending discardCount=14 PASSED
cardDrawn = smithy PASSED
Starting Supply Count for smithy = 8; Ending Supply Count = 7 PASSED

Runing gainCard() to add 'village' to discard...
player 1 starting discardCount=14; ending discardCount=15 PASSED
cardDrawn = village PASSED
Starting Supply Count for village = 8; Ending Supply Count = 7 PASSED

Runing gainCard() to add 'baron' to discard...
player 1 starting discardCount=15; ending discardCount=16 PASSED
cardDrawn = baron PASSED
Starting Supply Count for baron = 8; Ending Supply Count = 7 PASSED

Runing gainCard() to add 'great_hall' to discard...
player 1 starting discardCount=16; ending discardCount=17 PASSED
cardDrawn = great_hall PASSED
Starting Supply Count for great_hall = 6; Ending Supply Count = 5 PASSED

Runing gainCard() to add 'minion' to discard...
minion is not in the supply. Skipping.

Runing gainCard() to add 'steward' to discard...
steward is not in the supply. Skipping.

Runing gainCard() to add 'tribute' to discard...
tribute is not in the supply. Skipping.

Runing gainCard() to add 'ambassador' to discard...
ambassador is not in the supply. Skipping.

Runing gainCard() to add 'cutpurse' to discard...
cutpurse is not in the supply. Skipping.

Runing gainCard() to add 'embargo' to discard...
embargo is not in the supply. Skipping.

Runing gainCard() to add 'outpost' to discard...
outpost is not in the supply. Skipping.

Runing gainCard() to add 'salvager' to discard...
salvager is not in the supply. Skipping.

Runing gainCard() to add 'sea_hag' to discard...
sea_hag is not in the supply. Skipping.

Runing gainCard() to add 'treasure_map' to discard...
treasure_map is not in the supply. Skipping.

test complete.
Function 'updateCoins'
Lines executed:100.00% of 11

Function 'gainCard'
Lines executed:100.00% of 13

Function 'discardCard'
Lines executed:92.31% of 13

Function 'cardEffect'
Lines executed:12.29% of 236

Function 'getCost'
Lines executed:100.00% of 30

Function 'drawCard'
Lines executed:36.36% of 22

Function 'getWinners'
Lines executed:100.00% of 24

Function 'scoreFor'
Lines executed:50.00% of 24

Function 'isGameOver'
Lines executed:0.00% of 10

Function 'endTurn'
Lines executed:0.00% of 20

Function 'whoseTurn'
Lines executed:100.00% of 2

Function 'fullDeckCount'
Lines executed:0.00% of 9

Function 'supplyCount'
Lines executed:100.00% of 2

Function 'handCard'
Lines executed:0.00% of 3

Function 'numHandCards'
Lines executed:0.00% of 2

Function 'buyCard'
Lines executed:0.00% of 13

Function 'playCard'
Lines executed:0.00% of 14

Function 'shuffle'
Lines executed:93.75% of 16

Function 'initializeGame'
Lines executed:95.16% of 62

Function 'kingdomCards'
Lines executed:0.00% of 13

Function 'newGame'
Lines executed:0.00% of 3

Function 'compare'
Lines executed:83.33% of 6

File 'dominion.c'
Lines executed:40.51% of 548
Creating 'dominion.c.gcov'

unittest4.c: testing getWinners():
Number of players: 2
players[0] = 1; Winner Found: PASSED
players[1] = 0; Non-winner found: PASSED
players[2] = 0; Non-winner found: PASSED
players[3] = 0; Non-winner found: PASSED
Number of players: 2
players[0] = 0; Non-winner found: PASSED
players[1] = 1; Winner Found: PASSED
players[2] = 0; Non-winner found: PASSED
players[3] = 0; Non-winner found: PASSED
Number of players: 3
players[0] = 0; Non-winner found: PASSED
players[1] = 0; Non-winner found: PASSED
players[2] = 1; Winner Found: PASSED
players[3] = 0; Non-winner found: PASSED
Number of players: 4
players[0] = 0; Non-winner found: PASSED
players[1] = 0; Non-winner found: PASSED
players[2] = 0; Non-winner found: PASSED
players[3] = 1; Winner Found: PASSED
Number of players: 2
Score for player: 0 = 19players[0] = 0; Non-winner found: PASSED
Score for player: 1 = 19players[1] = 1; FAIL

test complete.
Function 'updateCoins'
Lines executed:100.00% of 11

Function 'gainCard'
Lines executed:100.00% of 13

Function 'discardCard'
Lines executed:92.31% of 13

Function 'cardEffect'
Lines executed:12.29% of 236

Function 'getCost'
Lines executed:100.00% of 30

Function 'drawCard'
Lines executed:36.36% of 22

Function 'getWinners'
Lines executed:100.00% of 24

Function 'scoreFor'
Lines executed:50.00% of 24

Function 'isGameOver'
Lines executed:0.00% of 10

Function 'endTurn'
Lines executed:0.00% of 20

Function 'whoseTurn'
Lines executed:100.00% of 2

Function 'fullDeckCount'
Lines executed:0.00% of 9

Function 'supplyCount'
Lines executed:100.00% of 2

Function 'handCard'
Lines executed:0.00% of 3

Function 'numHandCards'
Lines executed:0.00% of 2

Function 'buyCard'
Lines executed:0.00% of 13

Function 'playCard'
Lines executed:0.00% of 14

Function 'shuffle'
Lines executed:93.75% of 16

Function 'initializeGame'
Lines executed:95.16% of 62

Function 'kingdomCards'
Lines executed:0.00% of 13

Function 'newGame'
Lines executed:0.00% of 3

Function 'compare'
Lines executed:83.33% of 6

File 'dominion.c'
Lines executed:40.51% of 548
Creating 'dominion.c.gcov'

cardtest1.c: testing smithy:
----------------- Testing Card: smithy ----------------
TEST: +3 cards
hand count = 7, expected = 7
hand count before=5; hand count after=7; expected=7 PASSED
discard count before=0; discard count after=0; expected = 1 FAILED
deck count before=5; deck count after=2; expected = 3 FAILED
Function 'updateCoins'
Lines executed:100.00% of 11

Function 'gainCard'
Lines executed:100.00% of 13

Function 'discardCard'
Lines executed:92.31% of 13

Function 'cardEffect'
Lines executed:12.29% of 236

Function 'getCost'
Lines executed:100.00% of 30

Function 'drawCard'
Lines executed:36.36% of 22

Function 'getWinners'
Lines executed:100.00% of 24

Function 'scoreFor'
Lines executed:50.00% of 24

Function 'isGameOver'
Lines executed:0.00% of 10

Function 'endTurn'
Lines executed:0.00% of 20

Function 'whoseTurn'
Lines executed:100.00% of 2

Function 'fullDeckCount'
Lines executed:0.00% of 9

Function 'supplyCount'
Lines executed:100.00% of 2

Function 'handCard'
Lines executed:0.00% of 3

Function 'numHandCards'
Lines executed:0.00% of 2

Function 'buyCard'
Lines executed:0.00% of 13

Function 'playCard'
Lines executed:0.00% of 14

Function 'shuffle'
Lines executed:93.75% of 16

Function 'initializeGame'
Lines executed:95.16% of 62

Function 'kingdomCards'
Lines executed:0.00% of 13

Function 'newGame'
Lines executed:0.00% of 3

Function 'compare'
Lines executed:83.33% of 6

File 'dominion.c'
Lines executed:40.51% of 548
Creating 'dominion.c.gcov'

cardtest2.c: testing adventurer:
----------------- Testing Card: adventurer ----------------
TEST: +3 cards

Before:card=4; card=4; card=1; card=4; card=4; 
After:card=4; card=4; card=1; card=4; card=4; card=4; card=4; 
hand count before=5; hand count after=7; expected=7 PASSED
treaure card count before =4; treaure card count after=6; expected=6 PASSED
Function 'updateCoins'
Lines executed:100.00% of 11

Function 'gainCard'
Lines executed:100.00% of 13

Function 'discardCard'
Lines executed:92.31% of 13

Function 'cardEffect'
Lines executed:12.29% of 236

Function 'getCost'
Lines executed:100.00% of 30

Function 'drawCard'
Lines executed:36.36% of 22

Function 'getWinners'
Lines executed:100.00% of 24

Function 'scoreFor'
Lines executed:50.00% of 24

Function 'isGameOver'
Lines executed:0.00% of 10

Function 'endTurn'
Lines executed:0.00% of 20

Function 'whoseTurn'
Lines executed:100.00% of 2

Function 'fullDeckCount'
Lines executed:0.00% of 9

Function 'supplyCount'
Lines executed:100.00% of 2

Function 'handCard'
Lines executed:0.00% of 3

Function 'numHandCards'
Lines executed:0.00% of 2

Function 'buyCard'
Lines executed:0.00% of 13

Function 'playCard'
Lines executed:0.00% of 14

Function 'shuffle'
Lines executed:93.75% of 16

Function 'initializeGame'
Lines executed:95.16% of 62

Function 'kingdomCards'
Lines executed:0.00% of 13

Function 'newGame'
Lines executed:0.00% of 3

Function 'compare'
Lines executed:83.33% of 6

File 'dominion.c'
Lines executed:40.51% of 548
Creating 'dominion.c.gcov'

cardtest3.c: testing great_hall:
----------------- Testing Card: great_hall ----------------
TEST: +1 cards
TEST: +1 actions

Before:[card=4; card=4; card=1; card=4; card=4; ]
After:[card=4; card=4; card=1; card=4; card=4; ]

action count before=1; action count after=2; expected=2 PASSED
hand count before=5; hand count after=5; expected=5 PASSED
discount count before=0; discount count after=0; expected=1 FAILED
Discarded:[]
treaure card count before =4; treaure card count after=4; expected=4 PASSED

Testing complete.
Function 'updateCoins'
Lines executed:100.00% of 11

Function 'gainCard'
Lines executed:100.00% of 13

Function 'discardCard'
Lines executed:92.31% of 13

Function 'cardEffect'
Lines executed:12.29% of 236

Function 'getCost'
Lines executed:100.00% of 30

Function 'drawCard'
Lines executed:36.36% of 22

Function 'getWinners'
Lines executed:100.00% of 24

Function 'scoreFor'
Lines executed:50.00% of 24

Function 'isGameOver'
Lines executed:0.00% of 10

Function 'endTurn'
Lines executed:0.00% of 20

Function 'whoseTurn'
Lines executed:100.00% of 2

Function 'fullDeckCount'
Lines executed:0.00% of 9

Function 'supplyCount'
Lines executed:100.00% of 2

Function 'handCard'
Lines executed:0.00% of 3

Function 'numHandCards'
Lines executed:0.00% of 2

Function 'buyCard'
Lines executed:0.00% of 13

Function 'playCard'
Lines executed:0.00% of 14

Function 'shuffle'
Lines executed:93.75% of 16

Function 'initializeGame'
Lines executed:95.16% of 62

Function 'kingdomCards'
Lines executed:0.00% of 13

Function 'newGame'
Lines executed:0.00% of 3

Function 'compare'
Lines executed:83.33% of 6

File 'dominion.c'
Lines executed:40.51% of 548
Creating 'dominion.c.gcov'

cardtest4.c: testing embargo:
----------------- Testing Card: embargo ----------------
TEST: +2 coins
TEST: +1 embargo tokens

Before:[card=4; card=4; card=1; card=4; card=4; card=22; ]
After:[card=4; card=4; card=1; card=4; card=4; ]

action count before=1; action count after=1; expected=1 PASSED
hand count before=6; hand count after=5; expected=5 PASSED
coin count before=4; coin count after=6; expected=6 PASSED
embargo tokens count before=0; embargo tokens count after=1; expected=1 PASSED
discount count before=0; discount count after=0; expected=1 FAILED
Discarded:[]
treaure card count before =4; treaure card count after=4; expected=4 PASSED

Testing complete.
final coverage test by line:
File 'dominion.c'
Lines executed:40.51% of 548
Creating 'dominion.c.gcov'

final coverage test by function:
Function 'updateCoins'
Lines executed:100.00% of 11

Function 'gainCard'
Lines executed:100.00% of 13

Function 'discardCard'
Lines executed:92.31% of 13

Function 'cardEffect'
Lines executed:12.29% of 236

Function 'getCost'
Lines executed:100.00% of 30

Function 'drawCard'
Lines executed:36.36% of 22

Function 'getWinners'
Lines executed:100.00% of 24

Function 'scoreFor'
Lines executed:50.00% of 24

Function 'isGameOver'
Lines executed:0.00% of 10

Function 'endTurn'
Lines executed:0.00% of 20

Function 'whoseTurn'
Lines executed:100.00% of 2

Function 'fullDeckCount'
Lines executed:0.00% of 9

Function 'supplyCount'
Lines executed:100.00% of 2

Function 'handCard'
Lines executed:0.00% of 3

Function 'numHandCards'
Lines executed:0.00% of 2

Function 'buyCard'
Lines executed:0.00% of 13

Function 'playCard'
Lines executed:0.00% of 14

Function 'shuffle'
Lines executed:93.75% of 16

Function 'initializeGame'
Lines executed:95.16% of 62

Function 'kingdomCards'
Lines executed:0.00% of 13

Function 'newGame'
Lines executed:0.00% of 3

Function 'compare'
Lines executed:83.33% of 6

File 'dominion.c'
Lines executed:40.51% of 548
Creating 'dominion.c.gcov'

final coverage test by branch:
File 'dominion.c'
Lines executed:40.51% of 548
Branches executed:43.88% of 417
Taken at least once:35.25% of 417
Calls executed:18.89% of 90
Creating 'dominion.c.gcov'

