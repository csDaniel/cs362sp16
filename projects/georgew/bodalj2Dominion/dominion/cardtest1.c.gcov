        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://cardtest1.c -- refactored for bodalj
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <assert.h>
        -:    7:#include "rngs.h"
        -:    8:#include <stdlib.h>
        -:    9:#include "interface.h"
        -:   10:
        -:   11:#define TESTCARD "smithy"
        -:   12:
        1:   13:int main() {	// copy the game state to a test case 
        1:   14:  	int seed = 1000;
        1:   15:	int numPlayers = 2;
        1:   16:	int thisPlayer = 0;
        1:   17:	int handPos = 0;
        -:   18:	int currDeckCount, currHandCount, currDiscardCount;
        -:   19:	//int choice1 = 0;
        -:   20:	//int choice2 = 0;
        -:   21:	//int choice3 = 0;
        -:   22:	struct gameState G, testG;
        -:   23:	int currCard;
        1:   24:	int k[10] = {adventurer, great_hall, village, minion, mine, cutpurse,
        -:   25:			sea_hag, tribute, smithy, council_room};
        -:   26:
        -:   27:	// initialize a game state and player cards
        1:   28:	initializeGame(numPlayers, k, seed, &G);
        -:   29:	//set initial game state
        1:   30:	printf("Testing for: ");
        1:   31:	printf("1. 3 Cards Taken From Deck");
        1:   32:	printf("2. 3 Cards Added To Hand");
        1:   33:	printf("3. 1 Card Discarded From Hand");
        1:   34:	printf("4. 1 Cards Added To Discarded Pile");
        -:   35:
        1:   36:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   37:	printf("\n\n\n\n----------------- Testing Card: %s ----------------\n", TESTCARD);
        1:   38:	printf("---------------TEST 1: CHECKING DRAW CARD FUNCTION\n-----------");
        -:   39:	//get starting game state
        1:   40:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   41:	currDeckCount = testG.deckCount[thisPlayer];
        1:   42:	currHandCount = testG.handCount[thisPlayer];
        1:   43:	currDiscardCount = testG.discardCount[thisPlayer];
        -:   44:	//currCard = testG.deck[player][currDeckCount - 1];
        1:   45:	printf("Deck Count Before: %d\n", testG.deckCount[thisPlayer]);
        1:   46:	printf("Current Hand Before: %d\n", testG.handCount[thisPlayer]);
        1:   47:	printf("Discard Count Before: %d\n", testG.discardCount[thisPlayer]);
        -:   48:	//run function
        1:   49:	printHand(thisPlayer ,&testG);
        1:   50:	printDiscard(thisPlayer, &testG);
        1:   51:	printPlayed(thisPlayer, &testG);
        1:   52:	playSmithy(handPos, thisPlayer, &testG);
        1:   53:	printHand(thisPlayer, &testG);
        1:   54:	printPlayed(thisPlayer, &testG);
        1:   55:	printDiscard(thisPlayer, &testG);
        -:   56:	//check deck count
        1:   57:	printf("Deck Count After: %d\n", testG.deckCount[thisPlayer]);
        1:   58:	if ((currDeckCount - 3) == testG.deckCount[thisPlayer]){
        1:   59:		printf("DECK COUNT DECREASED BY 3: SUCCESS\n");
        -:   60:	}
    #####:   61:	else if (currDeckCount == testG.deckCount[thisPlayer])
        -:   62:	{
    #####:   63:		printf("DECK COUNT STAYED THE SAME: FAILURE\n");
        -:   64:	}
        -:   65:	else
    #####:   66:		printf("DECK COUNT CHANGED INCORRECTLY: FAILURE\n");
        -:   67:	//check hand count
        1:   68:	printf("Current Hand After: %d\n", testG.handCount[thisPlayer]);
        1:   69:	if ((currHandCount + 2) == testG.handCount[thisPlayer]){
        1:   70:		printf("HAND COUNT INCREASED BY 3: SUCCESS\n");
        -:   71:	}
    #####:   72:	else if (currHandCount == testG.handCount[thisPlayer])
        -:   73:	{
    #####:   74:		printf("HAND COUNT DIDN'T CHANGE: FAILURE\n");
        -:   75:	}
        -:   76:	else
    #####:   77:		printf("HAND COUNT CHANGE INCORRECT: FAILURE\n");
        -:   78:	//check discard count
        1:   79:	printf("Discard Count After: %d\n", testG.discardCount[thisPlayer]);
        1:   80:	if ((currDiscardCount + 1) == testG.discardCount[thisPlayer]){
    #####:   81:		printf("DISCARD COUNT INCREASED BY 1: SUCCESS\n");	
        -:   82:	}
        -:   83:	else
        1:   84:		printf("DISCARD COUNT INCORRECT: FAILURE\n");
        -:   85:	// if (state->hand[thisPlayer][currHandCount] == currCard)
        -:   86:	// 	printf("CARD ADDED TO HAND: SUCCESS\n");
        -:   87:	// else
        -:   88:	// 	printf("CARD NOT ADDED TO HAND: FAILURE\n");
        1:   89:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n\n\n", TESTCARD);
        1:   90:return 0;
        -:   91:}
