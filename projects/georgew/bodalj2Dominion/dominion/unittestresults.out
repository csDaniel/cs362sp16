Result for running unit tests:
unittest1.c:




----------------- Testing Function: gainCard ----------------

-------------Saving Starting Game State----------------
#   Card          Cost   Copies
0   Curse         0      10   
1   Estate        2      8    
2   Duchy         5      8    
3   Province      8      8    
4   Copper        0      46   
5   Silver        3      40   
6   Gold          6      30   
7   Adventurer    6      10   
8   Council Room  5      10   
12  Remodel       4      10   
13  Smithy        4      10   
14  Village       3      10   
18  Steward       3      10   
19  Tribute       5      10   


------------TEST 1: Testing if Card isn't in game-------------

-------------TEST 2: Testing when toFlag == 1...................
Current deck count: 5
Current hand count: 5
Current discard count: 1
Current Supply Count: 8
Final deck count: 6
Final hand count: 5
Final discard count: 1
Final Supply Count: 7
DECK
Card Added to Deck: SUCCESS
HAND
No Cards Added to Hand: SUCCESS
DISCARD
Too Many or Too Few Cards Added: FAILURE
SUPPLY
Card Taken From Supply: SUCCESS

-------------Testing when toFlag == 2...................
Current deck count: 6
Current hand count: 5
Current discard count: 1
Current Supply Count: 7
Final deck count: 6
Final hand count: 6
Final discard count: 1
Final Supply Count: 6
DECK
Card Not Added to Deck: SUCCESS
HAND
Card Added to Hand: SUCCESS
DISCARD
Card Not Added to Discard: SUCCESS
SUPPLY
Card Taken From Supply: SUCCESS

-------------Testing when toFlag == 0...................
Current deck count: 6
Current hand count: 6
Current discard count: 1
Current Supply Count: 6
Final deck count: 6
Final hand count: 6
Final discard count: 2
Final Supply Count: 5
DECK
Card Not Added to Deck: SUCCESS
HAND
No Cards Added to Hand: SUCCESS
DISCARD
Card Added to Discard: SUCCESS
SUPPLY
Card Taken From Supply: SUCCESS

 >>>>> SUCCESS: Testing complete gainCard <<<<<



File 'unittest1.c'
Lines executed:80.62% of 129
Creating 'unittest1.c.gcov'

unittest2.c:
----------------- Testing Function: shuffle ----------------
-------------Saving Current Game State----------------
--------------------Checking valid deckCount
------------No Cards to Count: SUCCESS
----------------------------Checking Each Player----------------------

Player Number: 0
Player 0: Current Discard Count: 0
Player 0: Starting Deck Count: 5
Player 0: Ending Deck Count: 5
Deck Count Start: 5 Deck Count Finish: 5

Before Shuffle Function Card at Position 0: 1
After Shuffle Function Card at Position 0: 1
Before Shuffle Function Card at Position 1: 1
After Shuffle Function Card at Position 1: 1
Before Shuffle Function Card at Position 2: 4
After Shuffle Function Card at Position 2: 4
Before Shuffle Function Card at Position 3: 4
After Shuffle Function Card at Position 3: 4
Before Shuffle Function Card at Position 4: 4
After Shuffle Function Card at Position 4: 4
Cards were not suffled: FAIL
Player 0: Current Discard Count: 0

Player Number: 1
Player 1: Current Discard Count: 0
Player 1: Starting Deck Count: 10
Player 1: Ending Deck Count: 10
Deck Count Start: 10 Deck Count Finish: 10

Before Shuffle Function Card at Position 0: 4
After Shuffle Function Card at Position 0: 4
Before Shuffle Function Card at Position 1: 4
After Shuffle Function Card at Position 1: 4
Before Shuffle Function Card at Position 2: 1
After Shuffle Function Card at Position 2: 4
Before Shuffle Function Card at Position 3: 4
After Shuffle Function Card at Position 3: 4
Before Shuffle Function Card at Position 4: 4
After Shuffle Function Card at Position 4: 1
Before Shuffle Function Card at Position 5: 4
After Shuffle Function Card at Position 5: 1
Before Shuffle Function Card at Position 6: 4
After Shuffle Function Card at Position 6: 4
Before Shuffle Function Card at Position 7: 1
After Shuffle Function Card at Position 7: 4
Before Shuffle Function Card at Position 8: 1
After Shuffle Function Card at Position 8: 4
Before Shuffle Function Card at Position 9: 4
After Shuffle Function Card at Position 9: 1
Cards Shuffled: SUCCESS
Player 1: Current Discard Count: 0

 >>>>> SUCCESS: Testing complete shuffle <<<<<

File 'unittest2.c'
Lines executed:94.23% of 52
Creating 'unittest2.c.gcov'

unittest3.c:

---------------------Zero Bonus TEST---------------------

---------------------Counting Coins---------------------
Player 4
 Coins: -1820448240Copper: 0 Silver: 0 Gold: 0 Bonus Added : 0

-----------------Counting Coins After Update---------------------
Player 4
 Coins: -1820448240Copper: 0 Silver: 0 Gold: 0 
-------------------Positive Bonus TEST-------------------

---------------------Counting Coins---------------------
Player 4
 Coins: -1820448240Copper: 0 Silver: 0 Gold: 0 Bonus Added : 10

-----------------Counting Coins After Update---------------------
Player 14
 Coins: -1820448240Copper: 0 Silver: 0 Gold: 0 
---------------------Negative Bonus TEST---------------------

---------------------Counting Coins---------------------
Player 14
 Coins: -1820448240Copper: 0 Silver: 0 Gold: 0 Bonus Added : -10

-----------------Counting Coins After Update---------------------
Player -6
 Coins: -1820448240Copper: 0 Silver: 0 Gold: 0 



----------------- Testing Function: updateCoins ----------------

 >>>>> SUCCESS: Testing complete updateCoins <<<<<



File 'unittest3.c'
Lines executed:81.05% of 95
Creating 'unittest3.c.gcov'

unittest4.c:




----------------- Testing Function: discardCard ----------------

--------------------TEST 1: TRASH FLAG TEST------------------------
TrashFlag not set, Card Added to played pile: SUCCESS

--------------------TEST 2: TEST HAND COUNT------------------------
Current Hand Count: 4
NEW Current Hand Count: 3
Hand Count Decreased: SUCCESS

------------TEST 3: Checking Behavor if Not Last Card-----------
Current Hand Count: 3
Running Function
NEW Current Hand Count: 2
Hand Count Decreased: SUCCESS
Current Card Replaced with Last Card: SUCCESS
-------------------TEST 4: CHECK BEHAVIOR IF LAST CARD IN HAND-----------------
Current Hand Count: 2
Running Function
Current Hand Count: 1
Hand Count Decreased: SUCCESS
--------------------TEST 5: CHECK BEHAVIOR IF ONLY ONE CARD LEFT-----------------
Current Hand Count: 1
Running Function
Current Hand Count: 0
Hand Count Decreased: SUCCESS

 >>>>> SUCCESS: Testing complete discardCard <<<<<

File 'unittest4.c'
Lines executed:83.13% of 83
Creating 'unittest4.c.gcov'

cardtest1.c:
Testing for: 1. 3 Cards Taken From Deck2. 3 Cards Added To Hand3. 1 Card Discarded From Hand4. 1 Cards Added To Discarded Pile



----------------- Testing Card: smithy ----------------
---------------TEST 1: CHECKING DRAW CARD FUNCTION
-----------Deck Count Before: 5
Current Hand Before: 5
Discard Count Before: 0
Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Estate       
3  Copper       
4  Copper       

Player 0's discard: 

Player 0's played cards: 

Player 0's hand:
#  Card
0  Copper       
1  Copper       
2  Estate       
3  Copper       
4  Copper       
5  Copper       
6  Copper       

Player 0's played cards: 
#  Card
0  Estate        

Player 0's discard: 

Deck Count After: 2
DECK COUNT DECREASED BY 3: SUCCESS
Current Hand After: 7
HAND COUNT INCREASED BY 3: SUCCESS
Discard Count After: 0
DISCARD COUNT INCORRECT: FAILURE

 >>>>> SUCCESS: Testing complete smithy <<<<<



File 'cardtest1.c'
Lines executed:85.11% of 47
Creating 'cardtest1.c.gcov'

cardtest2.c:
Testing for: 1. 2 Cards Added To Hand2. 2 Cards Added Are Treasure Cards3. All Cards that are either added to Hand or Taken from deck are Accounted For4. If At End of Pile Add Discarded Back and Shuffle



----------------- Testing Card: adventurer ----------------
-------TEST 1: CHECKING IF TWO CARDS WERE ADDED TO HAND--------
Current Hand Before: 5
Current Hand After: 6
HAND COUNT CHANGE INCORRECT: FAILURE
--------TEST 2: CHECK IF ADDED CARDS ARE TREASURE CARDS---------
Treasure Before Function: 0
Treasure After Function: 0
ADDED INCORRECT TREASURE CARDS: FAILURE
--------TEST 3: CHECK IF ALL CARDS ACCOUNTED FOR---------
Deck Count Before: 3
Current Hand Before: 7
Discard Count Before: 0
Deck Count After: 2
Current Hand After: 8
Discard Count After: 0
All Cards Accounted For: SUCCESS
--------------TEST 4: CHECK IF SHUFFLE OCCURS-----------------
Deck Count: 2
Deck Count: 0

 >>>>> SUCCESS: Testing complete adventurer <<<<<



File 'cardtest2.c'
Lines executed:82.19% of 73
Creating 'cardtest2.c.gcov'

cardtest3.c:




----------------- Testing Card: village ----------------
---------------TEST 1: CHECKING DRAW CARD FUNCTION
-----------Deck Count Before: 5
Current Hand Before: 5
Discard Count Before: 0
Deck Count After: 4
DECK COUNT DECREASED BY 1: SUCCESS
Current Hand After: 5
HAND COUNT DIDN'T CHANGE: FAILURE
Discard Count After: 0
DISCARD COUNT INCORRECT: FAILURE
---------------TEST 2: CHECKING ACTIONS FUNCTION
-----------Current Actions Before: 3
Current Actions After: 5
ACTION COUNT INCREASED BY 2: SUCCESS

 >>>>> SUCCESS: Testing complete village <<<<<



File 'cardtest3.c'
Lines executed:82.35% of 51
Creating 'cardtest3.c.gcov'

cardtest4.c:




----------------- Testing Card: great_hall ----------------
---------------TEST 1: CHECKING DRAW CARD FUNCTION
-----------Deck Count Before: 5
Current Hand Before: 5
Discard Count Before: 0
Deck Count After: 4
DECK COUNT DECREASED BY 1: SUCCESS
Current Hand After: 5
HAND COUNT DIDN'T CHANGE: FAILURE
Discard Count After: 0
DISCARD COUNT INCORRECT: FAILURE
---------------TEST 2: CHECKING ACTIONS TOTAL
-----------Current Actions Before: 2
Current Actions After: 3
ACTION COUNT INCREASED BY 1: SUCCESS

 >>>>> SUCCESS: Testing complete great_hall <<<<<



File 'cardtest4.c'
Lines executed:80.85% of 47
Creating 'cardtest4.c.gcov'

File 'dominion.c'
Lines executed:28.09% of 566
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:20
        -:    0:Programs:20
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      675:    8:int compare(const void* a, const void* b) {
      675:    9:  if (*(int*)a > *(int*)b)
       15:   10:    return 1;
      660:   11:  if (*(int*)a < *(int*)b)
      172:   12:    return -1;
      488:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       20:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       20:   44:  SelectStream(1);
       20:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       20:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       20:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      220:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     2200:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     2000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       20:   73:  if (numPlayers == 2)
        -:   74:    {
       20:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       20:   87:  if (numPlayers == 2)
        -:   88:    {
       20:   89:      state->supplyCount[estate] = 8;
       20:   90:      state->supplyCount[duchy] = 8;
       20:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       20:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       20:  102:  state->supplyCount[silver] = 40;
       20:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      420:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     3576:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     3340:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      164:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       16:  115:		  if (numPlayers == 2){ 
        8:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      156:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      164:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     3176:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       60:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       40:  140:      state->deckCount[i] = 0;
      160:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      120:  143:	  state->deck[i][j] = estate;
      120:  144:	  state->deckCount[i]++;
        -:  145:	}
      320:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      280:  148:	  state->deck[i][j] = copper;
      280:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       60:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       40:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       60:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       40:  166:      state->handCount[i] = 0;
       40:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      560:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      540:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       20:  182:  state->outpostPlayed = 0;
       20:  183:  state->phase = 0;
       20:  184:  state->numActions = 1;
       20:  185:  state->numBuys = 1;
       20:  186:  state->playedCardCount = 0;
       20:  187:  state->whoseTurn = 0;
       20:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      120:  192:  for (it = 0; it < 5; it++){
      100:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       20:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       20:  198:  return 0;
        -:  199:}
        -:  200:
       53:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       53:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       53:  209:  if (state->deckCount[player] < 1)
        7:  210:    return -1;
       46:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      537:  214:  while (state->deckCount[player] > 0) {
      445:  215:    card = floor(Random() * state->deckCount[player]);
      445:  216:    newDeck[newDeckPos] = state->deck[player][card];
      445:  217:    newDeckPos++;
     1520:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
     1075:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      445:  221:    state->deckCount[player]--;
        -:  222:  }
      491:  223:  for (i = 0; i < newDeckPos; i++) {
      445:  224:    state->deck[player][i] = newDeck[i];
      445:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       46:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
       12:  320:int supplyCount(int card, struct gameState *state) {
       12:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
      126:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      126:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        2:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        2:  538:    state->deckCount[player] = state->discardCount[player];
        2:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        2:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        2:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        2:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        2:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        2:  559:    if (deckCounter == 0)
        2:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      124:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      124:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      124:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      124:  576:    state->deckCount[player]--;
      124:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      124:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
    #####:  647:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonusa) {
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    #####:  660:  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch(card) {
        -:  668:    case adventurer:
    #####:  669:      return playAdventurer(currentPlayer, state);
        -:  670:			
        -:  671:    case council_room:
    #####:  672:      return playCouncilRoom(currentPlayer, handPos, state);
        -:  673:			
        -:  674:    case feast:
    #####:  675:      return playFeast(currentPlayer, choice1, state);
        -:  676:			
        -:  677:    case gardens:
    #####:  678:      return -1;
        -:  679:			
        -:  680:    case mine:
    #####:  681:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  682:
    #####:  683:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  684:	{
    #####:  685:	  return -1;
        -:  686:	}
        -:  687:		
    #####:  688:      if (choice2 > treasure_map || choice2 < curse)
        -:  689:	{
    #####:  690:	  return -1;
        -:  691:	}
        -:  692:
    #####:  693:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  694:	{
    #####:  695:	  return -1;
        -:  696:	}
        -:  697:
    #####:  698:      gainCard(choice2, state, 2, currentPlayer);
        -:  699:
        -:  700:      //discard card from hand
    #####:  701:      discardCard(handPos, currentPlayer, state, 0);
        -:  702:
        -:  703:      //discard trashed card
    #####:  704:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  705:	{
    #####:  706:	  if (state->hand[currentPlayer][i] == j)
        -:  707:	    {
    #####:  708:	      discardCard(i, currentPlayer, state, 0);			
    #####:  709:	      break;
        -:  710:	    }
        -:  711:	}
        -:  712:			
    #####:  713:      return 0;
        -:  714:			
        -:  715:    case remodel:
    #####:  716:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  717:
    #####:  718:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  719:	{
    #####:  720:	  return -1;
        -:  721:	}
        -:  722:
    #####:  723:      gainCard(choice2, state, 0, currentPlayer);
        -:  724:
        -:  725:      //discard card from hand
    #####:  726:      discardCard(handPos, currentPlayer, state, 0);
        -:  727:
        -:  728:      //discard trashed card
    #####:  729:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  730:	{
    #####:  731:	  if (state->hand[currentPlayer][i] == j)
        -:  732:	    {
    #####:  733:	      discardCard(i, currentPlayer, state, 0);			
    #####:  734:	      break;
        -:  735:	    }
        -:  736:	}
        -:  737:
        -:  738:
    #####:  739:      return 0;
        -:  740:		
        -:  741:    case smithy:
    #####:  742:      return playSmithy(currentPlayer, handPos, state);
        -:  743:		
        -:  744:    case village:
    #####:  745:        return playVillage(currentPlayer, handPos, state);
        -:  746:		
        -:  747:    case baron:
    #####:  748:      return playBaron(currentPlayer, choice1, state);
        -:  749:		
        -:  750:    case great_hall:
    #####:  751:        return playGreatHall(currentPlayer, handPos, state);
        -:  752:		
        -:  753:    case minion:
        -:  754:      //+1 action
    #####:  755:      state->numActions++;
        -:  756:			
        -:  757:      //discard card from hand
    #####:  758:      discardCard(handPos, currentPlayer, state, 0);
        -:  759:			
    #####:  760:      if (choice1)		//+2 coins
        -:  761:	{
    #####:  762:	  state->coins = state->coins + 2;
        -:  763:	}
        -:  764:			
    #####:  765:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  766:	{
        -:  767:	  //discard hand
    #####:  768:	  while(numHandCards(state) > 0)
        -:  769:	    {
    #####:  770:	      discardCard(handPos, currentPlayer, state, 0);
        -:  771:	    }
        -:  772:				
        -:  773:	  //draw 4
    #####:  774:	  for (i = 0; i < 4; i++)
        -:  775:	    {
    #####:  776:	      drawCard(currentPlayer, state);
        -:  777:	    }
        -:  778:				
        -:  779:	  //other players discard hand and redraw if hand size > 4
    #####:  780:	  for (i = 0; i < state->numPlayers; i++)
        -:  781:	    {
    #####:  782:	      if (i != currentPlayer)
        -:  783:		{
    #####:  784:		  if ( state->handCount[i] > 4 )
        -:  785:		    {
        -:  786:		      //discard hand
    #####:  787:		      while( state->handCount[i] > 0 )
        -:  788:			{
    #####:  789:			  discardCard(handPos, i, state, 0);
        -:  790:			}
        -:  791:							
        -:  792:		      //draw 4
    #####:  793:		      for (j = 0; j < 4; j++)
        -:  794:			{
    #####:  795:			  drawCard(i, state);
        -:  796:			}
        -:  797:		    }
        -:  798:		}
        -:  799:	    }
        -:  800:				
        -:  801:	}
    #####:  802:      return 0;
        -:  803:		
        -:  804:    case steward:
    #####:  805:      if (choice1 == 1)
        -:  806:	{
        -:  807:	  //+2 cards
    #####:  808:	  drawCard(currentPlayer, state);
    #####:  809:	  drawCard(currentPlayer, state);
        -:  810:	}
    #####:  811:      else if (choice1 == 2)
        -:  812:	{
        -:  813:	  //+2 coins
    #####:  814:	  state->coins = state->coins + 2;
        -:  815:	}
        -:  816:      else
        -:  817:	{
        -:  818:	  //trash 2 cards in hand
    #####:  819:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  820:	  discardCard(choice3, currentPlayer, state, 1);
        -:  821:	}
        -:  822:			
        -:  823:      //discard card from hand
    #####:  824:      discardCard(handPos, currentPlayer, state, 0);
    #####:  825:      return 0;
        -:  826:		
        -:  827:    case tribute:
    #####:  828:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  829:	if (state->deckCount[nextPlayer] > 0){
    #####:  830:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  831:	  state->deckCount[nextPlayer]--;
        -:  832:	}
    #####:  833:	else if (state->discardCount[nextPlayer] > 0){
    #####:  834:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  835:	  state->discardCount[nextPlayer]--;
        -:  836:	}
        -:  837:	else{
        -:  838:	  //No Card to Reveal
        -:  839:	  if (DEBUG){
        -:  840:	    printf("No cards to reveal\n");
        -:  841:	  }
        -:  842:	}
        -:  843:      }
        -:  844:	    
        -:  845:      else{
    #####:  846:	if (state->deckCount[nextPlayer] == 0){
    #####:  847:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  848:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  849:	    state->deckCount[nextPlayer]++;
    #####:  850:	    state->discard[nextPlayer][i] = -1;
    #####:  851:	    state->discardCount[nextPlayer]--;
        -:  852:	  }
        -:  853:			    
    #####:  854:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  855:	} 
    #####:  856:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  857:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  858:	state->deckCount[nextPlayer]--;
    #####:  859:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  860:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  861:	state->deckCount[nextPlayer]--;
        -:  862:      }    
        -:  863:		       
    #####:  864:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  865:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  866:	state->playedCardCount++;
    #####:  867:	tributeRevealedCards[1] = -1;
        -:  868:      }
        -:  869:
    #####:  870:      for (i = 0; i <= 2; i ++){
    #####:  871:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  872:	  state->coins += 2;
        -:  873:	}
        -:  874:		    
    #####:  875:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  876:	  drawCard(currentPlayer, state);
    #####:  877:	  drawCard(currentPlayer, state);
        -:  878:	}
        -:  879:	else{//Action Card
    #####:  880:	  state->numActions = state->numActions + 2;
        -:  881:	}
        -:  882:      }
        -:  883:	    
    #####:  884:      return 0;
        -:  885:		
        -:  886:    case ambassador:
    #####:  887:      j = 0;		//used to check if player has enough cards to discard
        -:  888:
    #####:  889:      if (choice2 > 2 || choice2 < 0)
        -:  890:	{
    #####:  891:	  return -1;				
        -:  892:	}
        -:  893:
    #####:  894:      if (choice1 == handPos)
        -:  895:	{
    #####:  896:	  return -1;
        -:  897:	}
        -:  898:
    #####:  899:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  900:	{
    #####:  901:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  902:	    {
    #####:  903:	      j++;
        -:  904:	    }
        -:  905:	}
    #####:  906:      if (j < choice2)
        -:  907:	{
    #####:  908:	  return -1;				
        -:  909:	}
        -:  910:
        -:  911:      if (DEBUG) 
        -:  912:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  913:
        -:  914:      //increase supply count for choosen card by amount being discarded
    #####:  915:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  916:			
        -:  917:      //each other player gains a copy of revealed card
    #####:  918:      for (i = 0; i < state->numPlayers; i++)
        -:  919:	{
    #####:  920:	  if (i != currentPlayer)
        -:  921:	    {
    #####:  922:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  923:	    }
        -:  924:	}
        -:  925:
        -:  926:      //discard played card from hand
    #####:  927:      discardCard(handPos, currentPlayer, state, 0);			
        -:  928:
        -:  929:      //trash copies of cards returned to supply
    #####:  930:      for (j = 0; j < choice2; j++)
        -:  931:	{
    #####:  932:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  933:	    {
    #####:  934:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  935:		{
    #####:  936:		  discardCard(i, currentPlayer, state, 1);
    #####:  937:		  break;
        -:  938:		}
        -:  939:	    }
        -:  940:	}			
        -:  941:
    #####:  942:      return 0;
        -:  943:		
        -:  944:    case cutpurse:
        -:  945:
    #####:  946:      updateCoins(currentPlayer, state, 2);
    #####:  947:      for (i = 0; i < state->numPlayers; i++)
        -:  948:	{
    #####:  949:	  if (i != currentPlayer)
        -:  950:	    {
    #####:  951:	      for (j = 0; j < state->handCount[i]; j++)
        -:  952:		{
    #####:  953:		  if (state->hand[i][j] == copper)
        -:  954:		    {
    #####:  955:		      discardCard(j, i, state, 0);
    #####:  956:		      break;
        -:  957:		    }
    #####:  958:		  if (j == state->handCount[i])
        -:  959:		    {
    #####:  960:		      for (k = 0; k < state->handCount[i]; k++)
        -:  961:			{
        -:  962:			  if (DEBUG)
        -:  963:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  964:			}	
    #####:  965:		      break;
        -:  966:		    }		
        -:  967:		}
        -:  968:					
        -:  969:	    }
        -:  970:				
        -:  971:	}				
        -:  972:
        -:  973:      //discard played card from hand
    #####:  974:      discardCard(handPos, currentPlayer, state, 0);			
        -:  975:
    #####:  976:      return 0;
        -:  977:
        -:  978:		
        -:  979:    case embargo: 
        -:  980:      //+2 Coins
    #####:  981:      state->coins = state->coins + 2;
        -:  982:			
        -:  983:      //see if selected pile is in play
    #####:  984:      if ( state->supplyCount[choice1] == -1 )
        -:  985:	{
    #####:  986:	  return -1;
        -:  987:	}
        -:  988:			
        -:  989:      //add embargo token to selected supply pile
    #####:  990:      state->embargoTokens[choice1]++;
        -:  991:			
        -:  992:      //trash card
    #####:  993:      discardCard(handPos, currentPlayer, state, 1);		
    #####:  994:      return 0;
        -:  995:		
        -:  996:    case outpost:
        -:  997:      //set outpost flag
    #####:  998:      state->outpostPlayed++;
        -:  999:			
        -: 1000:      //discard card
    #####: 1001:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1002:      return 0;
        -: 1003:		
        -: 1004:    case salvager:
        -: 1005:      //+1 buy
    #####: 1006:      state->numBuys++;
        -: 1007:			
    #####: 1008:      if (choice1)
        -: 1009:	{
        -: 1010:	  //gain coins equal to trashed card
    #####: 1011:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1012:	  //trash card
    #####: 1013:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1014:	}
        -: 1015:			
        -: 1016:      //discard card
    #####: 1017:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1018:      return 0;
        -: 1019:		
        -: 1020:    case sea_hag:
    #####: 1021:      for (i = 0; i < state->numPlayers; i++){
    #####: 1022:	if (i != currentPlayer){
    #####: 1023:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1024:	  state->discardCount[i]++;
    #####: 1025:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1026:	}
        -: 1027:      }
    #####: 1028:      return 0;
        -: 1029:		
        -: 1030:    case treasure_map:
        -: 1031:      //search hand for another treasure_map
    #####: 1032:      index = -1;
    #####: 1033:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1034:	{
    #####: 1035:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1036:	    {
    #####: 1037:	      index = i;
    #####: 1038:	      break;
        -: 1039:	    }
        -: 1040:	}
    #####: 1041:      if (index > -1)
        -: 1042:	{
        -: 1043:	  //trash both treasure cards
    #####: 1044:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1045:	  discardCard(index, currentPlayer, state, 1);
        -: 1046:
        -: 1047:	  //gain 4 Gold cards
    #####: 1048:	  for (i = 0; i < 4; i++)
        -: 1049:	    {
    #####: 1050:	      gainCard(gold, state, 1, currentPlayer);
        -: 1051:	    }
        -: 1052:				
        -: 1053:	  //return success
    #####: 1054:	  return 1;
        -: 1055:	}
        -: 1056:			
        -: 1057:      //no second treasure_map found in hand
    #####: 1058:      return -1;
        -: 1059:    }
        -: 1060:	
    #####: 1061:  return -1;
        -: 1062:}
        -: 1063:
        -: 1064:// ## Effect: +1 Card +2 Action ## //
        4: 1065:int playVillage(int currentPlayer, int handPos, struct gameState *state) {
        -: 1066:  //+1 Card
        4: 1067:  drawCard(currentPlayer, state);
        -: 1068:                    
        -: 1069:  //+2 Actions
        4: 1070:  state->numActions = state->numActions + 2;
        -: 1071:                    
        -: 1072:  //discard played card from hand
        4: 1073:  discardCard(handPos, currentPlayer, state, 0);
        -: 1074:
        4: 1075:  return 0;
        -: 1076:}
        -: 1077:
        -: 1078:// ## Effect: +1 Card +1 Action ## //
        4: 1079:int playGreatHall(int currentPlayer, int handPos, struct gameState *state) {
        -: 1080:  //+1 Card
        4: 1081:  drawCard(currentPlayer, state);
        -: 1082:                    
        -: 1083:  //+1 Actions
        4: 1084:  state->numActions++;
        -: 1085:                    
        -: 1086:  //discard card from hand
        4: 1087:  discardCard(handPos, currentPlayer, state, 0);
        4: 1088:  return 0;
        -: 1089:}
        -: 1090:
        -: 1091:// ## Effect: Draw cards until 2 treasure cards drawn into hand; discard non-treasure cards ## //
        8: 1092:int playAdventurer(int currentPlayer, struct gameState *state) {
        8: 1093:    int TREASURES_TO_DRAW = 3;  // number of cards this card draws
        -: 1094:    int tempHand[MAX_HAND];     // non-treasure cards are stored here to be discarded afterwards
        8: 1095:    int drawnTreasure = 0;      // count of treasure cards drawn
        -: 1096:    int cardDrawn;              // holder for last card drawn
        8: 1097:    int z = 0;                  // counter for the temp hand
        -: 1098:    
       28: 1099:    while(drawnTreasure < 1) {
        -: 1100:        //if the deck is empty we need to shuffle discard and add to deck
       12: 1101:	if (state->deckCount[currentPlayer] < 1) {
        2: 1102:            shuffle(currentPlayer, state);
        -: 1103:	}
        -: 1104:
       12: 1105:        drawCard(currentPlayer, state);
        -: 1106:        //top card of hand is most recently drawn card.
       12: 1107:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];	
        -: 1108:        
       12: 1109:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
        8: 1110:            drawnTreasure++;
        -: 1111:        }
        -: 1112:	else{
        4: 1113:            tempHand[z] = cardDrawn;
        -: 1114:            //this should just remove the top card (the most recently drawn one).
        4: 1115:            state->handCount[currentPlayer]--;
        4: 1116:            z++;
        -: 1117:	}
        -: 1118:    }
        -: 1119:      
       20: 1120:    while(z-1 >= 0) {
        -: 1121:        // discard all cards in play that have been drawn
        4: 1122:	state->discard[currentPlayer][state->discardCount[currentPlayer]++] = tempHand[z-1]; 	
        4: 1123:        z--;
        -: 1124:    }
        -: 1125:    
        8: 1126:    return 0;
        -: 1127:}
        -: 1128:
        -: 1129:// ## Effect: +1 Buy, Can discard an estate card which provides +4 treasure, otherwise gain estate card ## //
    #####: 1130:int playBaron(int currentPlayer, int choice1, struct gameState *state) {
        -: 1131:    int p;                  // Iterator for hand!
        -: 1132:    int card_not_discarded; // Flag for discard set!
        -: 1133:    
        -: 1134:    //Increase buys by 1!
    #####: 1135:    state->numBuys++;
        -: 1136:   
        -: 1137:    // If choice1 is true we discard an estate card and draw 4 treasure, otherwise gain an estate
    #####: 1138:    if (choice1 > 0) {	
    #####: 1139:	card_not_discarded = 1;
        -: 1140:
    #####: 1141:        while(card_not_discarded) {
        -: 1142:            // Found an estate card!
    #####: 1143:            if (state->hand[currentPlayer][p] == estate) {
        -: 1144:                // Add 4 coins to the amount of coins
    #####: 1145:                state->coins += 40;
    #####: 1146:                state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1147:                state->discardCount[currentPlayer]++;
        -: 1148:
    #####: 1149:                for (p = 0; p < state->handCount[currentPlayer]; p++) {
    #####: 1150:                    state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1151:                }
        -: 1152:
    #####: 1153:                state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1154:                state->handCount[currentPlayer]--;
        -: 1155:                // Exit the loop
    #####: 1156:                card_not_discarded = 0;
        -: 1157:            }
    #####: 1158:            else if (p > state->handCount[currentPlayer]) {
        -: 1159:                if(DEBUG) {
        -: 1160:                    printf("No estate cards in your hand, invalid choice\n");
        -: 1161:                    printf("Must gain an estate if there are any\n");
        -: 1162:                }
        -: 1163:                
    #####: 1164:                if (supplyCount(estate, state) > 0) {
    #####: 1165:                    gainCard(estate, state, 0, currentPlayer);
        -: 1166:                    // Decrement estates
    #####: 1167:                    state->supplyCount[estate]--;
        -: 1168:
    #####: 1169:                    if (supplyCount(estate, state) == 0) {
    #####: 1170:                        isGameOver(state);
        -: 1171:                    }
        -: 1172:                }
        -: 1173:
        -: 1174:                // Exit loop
    #####: 1175:                card_not_discarded = 0;
        -: 1176:            }
        -: 1177:
        -: 1178:            else {
        -: 1179:                // Next card
    #####: 1180:                p++;
        -: 1181:            }
        -: 1182:	}
        -: 1183:      }
        -: 1184:			    
        -: 1185:      else {
    #####: 1186:          if (supplyCount(estate, state) > 0) {
        -: 1187:              // Gain an estate
    #####: 1188:              gainCard(estate, state, 0, currentPlayer);
        -: 1189:              // Decrement Estates
    #####: 1190:              state->supplyCount[estate]--;
        -: 1191:
    #####: 1192:              if (supplyCount(estate, state) == 0) {
    #####: 1193:                  isGameOver(state);
        -: 1194:              }
        -: 1195:          }
        -: 1196:      }
        -: 1197:      
    #####: 1198:      return 0;
        -: 1199:}
        -: 1200:
        -: 1201:// ## Effect: +4 Cards, +1 Buy, Each other player draws a card ## //
    #####: 1202:int playCouncilRoom(int currentPlayer, int handPos, struct gameState *state) {
        -: 1203:    int i;  // drawCard counter
        -: 1204:    int j;
    #####: 1205:    int NUM_CARDS_TO_DRAW = 4;
        -: 1206:
        -: 1207:    // +4 Cards
    #####: 1208:    for (i = 0; i < 4; i++) {
    #####: 1209:      drawCard(currentPlayer, state);
        -: 1210:    }
        -: 1211:                    
        -: 1212:    // +1 Buy
    #####: 1213:    state->numBuys++;
        -: 1214:                    
        -: 1215:    // Each other player draws a card
    #####: 1216:    for (i = 0; i < state->numPlayers; i++) {
    #####: 1217:        for (j = 0; j <= NUM_CARDS_TO_DRAW; j++) {
    #####: 1218:            if (i != currentPlayer) {
    #####: 1219:                drawCard(i, state);
        -: 1220:            }
        -: 1221:        }
        -: 1222:    }
        -: 1223:                    
        -: 1224:    // Put played card in played card pile
    #####: 1225:    discardCard(handPos, currentPlayer, state, 0);
        -: 1226:                    
    #####: 1227:    return 0;
        -: 1228:}
        -: 1229:
        -: 1230:// ## Effect: Trash Feast and gain a card with cost up to 5 ## //
    #####: 1231:int playFeast(int currentPlayer, int choice1, struct gameState *state) {
        -: 1232:    int i;                  // drawCard, resetHand counter
        -: 1233:    int buying;             // for while loop while buying a card
        -: 1234:    int tempHand[MAX_HAND]; // temporary hold cards while we buy a new one 
        -: 1235:
        -: 1236:    // Backup hand
    #####: 1237:    for (i = 0; i <= state->handCount[currentPlayer]; i++) {
        -: 1238:        // Backup cards
    #####: 1239:        tempHand[i] = state->hand[currentPlayer][i];
        -: 1240:        // Set to nothing
    #####: 1241:        state->hand[currentPlayer][i] = -1;
        -: 1242:    }
        -: 1243:
        -: 1244:    // Update Coins for Buy
    #####: 1245:    updateCoins(currentPlayer, state, 5);
        -: 1246:
        -: 1247:    // Condition to loop on, buying one card
    #####: 1248:    buying = 1;
    #####: 1249:    while(buying == 1) {
    #####: 1250:        if (supplyCount(choice1, state) <= 0) {
        -: 1251:            if (DEBUG) {
        -: 1252:                printf("None of that card left, sorry!\n");
        -: 1253:            }
        -: 1254:
        -: 1255:            if (DEBUG) {
        -: 1256:                printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1257:            }
        -: 1258:        }
    #####: 1259:        else if (state->coins < getCost(choice1)) {
    #####: 1260:            printf("That card is too expensive!\n");
        -: 1261:
        -: 1262:            if (DEBUG) {
        -: 1263:                printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1264:            }
        -: 1265:        }
        -: 1266:        else {
        -: 1267:            if (DEBUG) {
        -: 1268:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1269:            }
        -: 1270:
        -: 1271:            // Gain the card
    #####: 1272:            gainCard(choice1, state, 0, currentPlayer);
        -: 1273:            // Quit loop as we've bought a card
    #####: 1274:            buying = 0;
        -: 1275:
        -: 1276:            if (DEBUG) {
        -: 1277:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1278:            }
        -: 1279:
        -: 1280:        }
        -: 1281:    }     
        -: 1282:
        -: 1283:    //Reset Hand
    #####: 1284:    for (i = 0; i <= state->handCount[currentPlayer]; i++) {
    #####: 1285:        state->hand[currentPlayer][i] = tempHand[i];
    #####: 1286:        tempHand[i] = -1;
        -: 1287:    }
        -: 1288:
    #####: 1289:    return 0;
        -: 1290:}
        -: 1291:
        -: 1292:// ## Effect: +3 cards ## //
        2: 1293:int playSmithy(int currentPlayer, int handPos, struct gameState *state) {
        -: 1294:    int i;  // drawCard counter 
        -: 1295:
        -: 1296:    // +3 cards
        8: 1297:    for (i = 0; i < 3; i++) {
        6: 1298:        drawCard(currentPlayer, state);
        -: 1299:    }
        -: 1300:                    
        -: 1301:    //discard card from hand
        2: 1302:    discardCard(handPos-1, currentPlayer, state, 0);
        2: 1303:    return 0;
        -: 1304:}
        -: 1305:
       39: 1306:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag) {
        -: 1307:	
        -: 1308:  //if card is not trashed, added to Played pile 
       39: 1309:  if (trashFlag < 1)
        -: 1310:    {
        -: 1311:      //add card to played pile
       13: 1312:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       13: 1313:      state->playedCardCount++;
        -: 1314:    }
        -: 1315:	
        -: 1316:  //set played card to -1
       39: 1317:  state->hand[currentPlayer][handPos] = -1;
        -: 1318:	
        -: 1319:  //remove card from player's hand
       39: 1320:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1321:    {
        -: 1322:      //reduce number of cards in hand
        6: 1323:      state->handCount[currentPlayer]--;
        -: 1324:    }
       33: 1325:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1326:    {
        -: 1327:      //reduce number of cards in hand
    #####: 1328:      state->handCount[currentPlayer]--;
        -: 1329:    }
        -: 1330:  else 	
        -: 1331:    {
        -: 1332:      //replace discarded card with last card in hand
       33: 1333:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1334:      //set last card to -1
       33: 1335:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1336:      //reduce number of cards in hand
       33: 1337:      state->handCount[currentPlayer]--;
        -: 1338:    }
        -: 1339:	
       39: 1340:  return 0;
        -: 1341:}
        -: 1342:
       12: 1343:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1344:{
        -: 1345:  //Note: supplyPos is enum of choosen card
        -: 1346:	
        -: 1347:  //check if supply pile is empty (0) or card is not used in game (-1)
       12: 1348:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1349:    {
    #####: 1350:      return -1;
        -: 1351:    }
        -: 1352:	
        -: 1353:  //added card for [whoseTurn] current player:
        -: 1354:  // toFlag = 0 : add to discard
        -: 1355:  // toFlag = 1 : add to deck
        -: 1356:  // toFlag = 2 : add to hand
        -: 1357:
       12: 1358:  if (toFlag == 1)
        -: 1359:    {
        3: 1360:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        3: 1361:      state->deckCount[player]++;
        -: 1362:    }
        9: 1363:  else if (toFlag == 2)
        -: 1364:    {
        3: 1365:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        3: 1366:      state->handCount[player]++;
        -: 1367:    }
        -: 1368:  else
        -: 1369:    {
        6: 1370:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        6: 1371:      state->discardCount[player]++;
        -: 1372:    }
        -: 1373:	
        -: 1374:  //decrease number in supply pile
       12: 1375:  state->supplyCount[supplyPos]--;
        -: 1376:	 
       12: 1377:  return 0;
        -: 1378:}
        -: 1379:
       29: 1380:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1381:{
        -: 1382:  int i;
        -: 1383:	
        -: 1384:  //reset coin count
       29: 1385:  state->coins = 0;
        -: 1386:
        -: 1387:  //add coins for each Treasure card in player's hand
      174: 1388:  for (i = 0; i < state->handCount[player]; i++)
        -: 1389:    {
      145: 1390:      if (state->hand[player][i] == copper)
        -: 1391:	{
      116: 1392:	  state->coins += 1;
        -: 1393:	}
       29: 1394:      else if (state->hand[player][i] == silver)
        -: 1395:	{
    #####: 1396:	  state->coins += 2;
        -: 1397:	}
       29: 1398:      else if (state->hand[player][i] == gold)
        -: 1399:	{
    #####: 1400:	  state->coins += 3;
        -: 1401:	}	
        -: 1402:    }	
        -: 1403:
        -: 1404:  //add bonus
       29: 1405:  state->coins += bonus;
        -: 1406:
       29: 1407:  return 0;
        -: 1408:}
        -: 1409:
        -: 1410:
        -: 1411://end of dominion.c
        -: 1412:
