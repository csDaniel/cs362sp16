        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://cardtest3.c
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <assert.h>
        -:    7:#include "rngs.h"
        -:    8:#include <stdlib.h>
        -:    9:
        -:   10:#define TESTCARD "village"
        -:   11:
        1:   12:int main() {
        1:   13:  	int seed = 1000;
        1:   14:	int numPlayers = 2;
        1:   15:   	int thisPlayer = 0;
        -:   16:    int currActions;
        1:   17:    int handPos = 0;
        1:   18:    int bonus = 0;
        1:   19:    int choice1 = 0;
        1:   20:	int choice2 = 0;
        1:   21:	int choice3 = 0;
        -:   22:    int currDeckCount, currHandCount, currDiscardCount;
        -:   23:	struct gameState G, testG;
        1:   24:	int k[10] = {adventurer, great_hall, village, minion, mine, cutpurse,
        -:   25:			sea_hag, tribute, smithy, council_room};
        -:   26:
        -:   27:	// initialize a game state and player cards
        1:   28:	initializeGame(numPlayers, k, seed, &G);
        -:   29:
        1:   30:	printf("\n\n\n\n----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   31:	// copy the game state to a test case
        1:   32:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   33:	printf("---------------TEST 1: CHECKING DRAW CARD FUNCTION\n-----------");
        -:   34:	//revert to starting game state
        1:   35:	memcpy(&G, &testG, sizeof(struct gameState));
        1:   36:	currDeckCount = testG.deckCount[thisPlayer];
        1:   37:	currHandCount = testG.handCount[thisPlayer];
        1:   38:	currDiscardCount = testG.discardCount[thisPlayer];
        -:   39:	//currCard = testG.deck[player][currDeckCount - 1];
        1:   40:	printf("Deck Count Before: %d\n", testG.deckCount[thisPlayer]);
        1:   41:	printf("Current Hand Before: %d\n", testG.handCount[thisPlayer]);
        1:   42:	printf("Discard Count Before: %d\n", testG.discardCount[thisPlayer]);
        -:   43:	//run function
        1:   44:	cardEffect(village, choice1, choice2, choice3, &testG, handPos, &bonus);
        -:   45:	//check deck count
        1:   46:	printf("Deck Count After: %d\n", testG.deckCount[thisPlayer]);
        1:   47:	if ((currDeckCount - 1) == testG.deckCount[thisPlayer]){
        1:   48:		printf("DECK COUNT DECREASED BY 1: SUCCESS\n");
        -:   49:	}
    #####:   50:	else if (currDeckCount == testG.deckCount[thisPlayer])
        -:   51:	{
    #####:   52:		printf("DECK COUNT STAYED THE SAME: FAILURE\n");
        -:   53:	}
        -:   54:	else
    #####:   55:		printf("DECK COUNT CHANGED INCORRECTLY: FAILURE\n");
        -:   56:	//check hand count
        1:   57:	printf("Current Hand After: %d\n", testG.handCount[thisPlayer]);
        1:   58:	if ((currHandCount + 1) == testG.handCount[thisPlayer]){
    #####:   59:		printf("HAND COUNT INCREASED BY 1: SUCCESS\n");
        -:   60:	}
        1:   61:	else if (currHandCount == testG.handCount[thisPlayer])
        -:   62:	{
        1:   63:		printf("HAND COUNT DIDN'T CHANGE: FAILURE\n");
        -:   64:	}
        -:   65:	else
    #####:   66:		printf("HAND COUNT CHANGE INCORRECT: FAILURE\n");
        -:   67:	//check discard count
        1:   68:	printf("Discard Count After: %d\n", testG.discardCount[thisPlayer]);
        1:   69:	if ((currDiscardCount + 1) == testG.discardCount[thisPlayer]){
    #####:   70:		printf("DISCARD COUNT INCREASED BY 1: SUCCESS\n");	
        -:   71:	}
        -:   72:	else
        1:   73:		printf("DISCARD COUNT INCORRECT: FAILURE\n");
        -:   74:	
        1:   75:	printf("---------------TEST 2: CHECKING ACTIONS FUNCTION\n-----------");
        -:   76:	//revert to starting game state
        1:   77:	memcpy(&G, &testG, sizeof(struct gameState));
        -:   78:	//save num actions
        1:   79:	currActions = testG.numActions;
        1:   80:	printf("Current Actions Before: %d\n", testG.numActions);
        1:   81:	cardEffect(village, choice1, choice2, choice3, &testG, handPos, &bonus);
        1:   82:	printf("Current Actions After: %d\n", testG.numActions);	
        1:   83:	if ((currActions + 2) == testG.numActions){
        1:   84:		printf("ACTION COUNT INCREASED BY 2: SUCCESS\n");
        -:   85:	}
    #####:   86:	else if (currActions == testG.numActions)
        -:   87:	{
    #####:   88:		printf("ACTION COUNT STAYED THE SAME: FAILURE\n");
        -:   89:	}
        -:   90:	else
    #####:   91:		printf("ACTION COUNT CHANGED INCORRECTLY: FAILURE\n");
        1:   92:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n\n\n", TESTCARD);
        1:   93:return 0;
        -:   94:}
