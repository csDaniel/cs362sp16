        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:13
        -:    0:Programs:13
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
      442:   10:int compare(const void* a, const void* b) {
      442:   11:  if (*(int*)a > *(int*)b)
       10:   12:    return 1;
      432:   13:  if (*(int*)a < *(int*)b)
      112:   14:    return -1;
      320:   15:  return 0;
        -:   16:}
        -:   17:
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
       13:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
       13:   46:  SelectStream(1);
       13:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
       13:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
       13:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
      143:   59:  for (i = 0; i < 10; i++)
        -:   60:    {
     1430:   61:      for (j = 0; j < 10; j++)
        -:   62:        {
     1300:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
       13:   75:  if (numPlayers == 2)
        -:   76:    {
       13:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
    #####:   79:  else if (numPlayers == 3)
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
       13:   89:  if (numPlayers == 2)
        -:   90:    {
       13:   91:      state->supplyCount[estate] = 8;
       13:   92:      state->supplyCount[duchy] = 8;
       13:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
       13:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       13:  104:  state->supplyCount[silver] = 40;
       13:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
      273:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  109:    {
     2329:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  111:	{
     2175:  112:	  if (kingdomCards[j] == i)
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
      106:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:		{
       10:  117:		  if (numPlayers == 2){ 
        5:  118:		    state->supplyCount[i] = 8; 
        -:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
      101:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
      106:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
     2069:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
       39:  140:  for (i = 0; i < numPlayers; i++)
        -:  141:    {
       26:  142:      state->deckCount[i] = 0;
      104:  143:      for (j = 0; j < 3; j++)
        -:  144:	{
       78:  145:	  state->deck[i][j] = estate;
       78:  146:	  state->deckCount[i]++;
        -:  147:	}
      208:  148:      for (j = 3; j < 10; j++)
        -:  149:	{
      182:  150:	  state->deck[i][j] = copper;
      182:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
       39:  156:  for (i = 0; i < numPlayers; i++)
        -:  157:    {
       26:  158:      if ( shuffle(i, state) < 0 )
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
       39:  165:  for (i = 0; i < numPlayers; i++)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
       26:  168:      state->handCount[i] = 0;
       26:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
      364:  178:  for (i = 0; i <= treasure_map; i++)
        -:  179:    {
      351:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
       13:  184:  state->outpostPlayed = 0;
       13:  185:  state->phase = 0;
       13:  186:  state->numActions = 1;
       13:  187:  state->numBuys = 1;
       13:  188:  state->playedCardCount = 0;
       13:  189:  state->whoseTurn = 0;
       13:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
       78:  194:  for (it = 0; it < 5; it++){
       65:  195:    drawCard(state->whoseTurn, state);
        -:  196:  }
        -:  197:
       13:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
       13:  200:  return 0;
        -:  201:}
        -:  202:
       46:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
       46:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
       46:  211:  if (state->deckCount[player] < 1)
       14:  212:    return -1;
       32:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
      358:  216:  while (state->deckCount[player] > 0) {
      294:  217:    card = floor(Random() * state->deckCount[player]);
      294:  218:    newDeck[newDeckPos] = state->deck[player][card];
      294:  219:    newDeckPos++;
      996:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
      702:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
      294:  223:    state->deckCount[player]--;
        -:  224:  }
      326:  225:  for (i = 0; i < newDeckPos; i++) {
      294:  226:    state->deck[player][i] = newDeck[i];
      294:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
       32:  230:  return 0;
        -:  231:}
        -:  232:
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
        -:  272:}
        -:  273:
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
        8:  322:int supplyCount(int card, struct gameState *state) {
        8:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
        -:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
        -:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
        2:  348:int whoseTurn(struct gameState *state) {
        2:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
    #####:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
    #####:  397:  if (state->supplyCount[province] == 0)
        -:  398:    {
    #####:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
    #####:  403:  j = 0;
    #####:  404:  for (i = 0; i < 25; i++)
        -:  405:    {
    #####:  406:      if (state->supplyCount[i] == 0)
        -:  407:	{
    #####:  408:	  j++;
        -:  409:	}
        -:  410:    }
    #####:  411:  if ( j >= 3)
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
    #####:  416:  return 0;
        -:  417:}
        -:  418:
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
    #####:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
        -:  470:	{
    #####:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
        -:  515:	{
    #####:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
       89:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
       89:  530:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
       11:  535:    for (i = 0; i < state->discardCount[player];i++){
        4:  536:      state->deck[player][i] = state->discard[player][i];
        4:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
        7:  540:    state->deckCount[player] = state->discardCount[player];
        7:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
        7:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
        7:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
        7:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
        7:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
        7:  561:    if (deckCounter == 0)
        5:  562:      return -1;
        -:  563:
        2:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  565:    state->deckCount[player]--;
        2:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
       82:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
       82:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
       82:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       82:  578:    state->deckCount[player]--;
       82:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
       84:  582:  return 0;
        -:  583:}
        -:  584:
    #####:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
    #####:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
        -:  646:}
        -:  647:
        2:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int k;
        -:  653:  int x;
        -:  654:  int index;
        2:  655:  int currentPlayer = whoseTurn(state);
        2:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:
        2:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
        -:  660:  //int drawntreasure=0;
        -:  661:  //int cardDrawn;
        -:  662:  //int z = 0;// this is the counter for the temp hand
        2:  663:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  664:    nextPlayer = 0;
        -:  665:  }
        -:  666:  
        -:  667:	
        -:  668:  //uses switch to select card and perform actions
        2:  669:  switch( card ) 
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:        return adventurerCard(currentPlayer, state, temphand); 
        -:  673:     /*
        -:  674:      while(drawntreasure<2){
        -:  675:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  676:	  shuffle(currentPlayer, state);
        -:  677:	}
        -:  678:	drawCard(currentPlayer, state);
        -:  679:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  680:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  681:	  drawntreasure++;
        -:  682:	else{
        -:  683:	  temphand[z]=cardDrawn;
        -:  684:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  685:	  z++;
        -:  686:	}
        -:  687:      }
        -:  688:      while(z-1>=0){
        -:  689:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  690:	z=z-1;
        -:  691:      }
        -:  692:      return 0;
        -:  693:	*/		
        -:  694:    case council_room:
    #####:  695:      return councilRoomCard(handPos, currentPlayer, state);
        -:  696:      /*
        -:  697:      //+4 Cards
        -:  698:      for (i = 0; i < 4; i++)
        -:  699:	{
        -:  700:	  drawCard(currentPlayer, state);
        -:  701:	}
        -:  702:			
        -:  703:      //+1 Buy
        -:  704:      state->numBuys++;
        -:  705:			
        -:  706:      //Each other player draws a card
        -:  707:      for (i = 0; i < state->numPlayers; i++)
        -:  708:	{
        -:  709:	  if ( i != currentPlayer )
        -:  710:	    {
        -:  711:	      drawCard(i, state);
        -:  712:	    }
        -:  713:	}
        -:  714:			
        -:  715:      //put played card in played card pile
        -:  716:      discardCard(handPos, currentPlayer, state, 0);
        -:  717:			
        -:  718:      return 0;
        -:  719:      */			
        -:  720:    case feast:
        -:  721:      //gain card with cost up to 5
        -:  722:      //Backup hand
    #####:  723:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  724:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  725:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  726:      }
        -:  727:      //Backup hand
        -:  728:
        -:  729:      //Update Coins for Buy
    #####:  730:      updateCoins(currentPlayer, state, 5);
    #####:  731:      x = 1;//Condition to loop on
    #####:  732:      while( x == 1) {//Buy one card
    #####:  733:	if (supplyCount(choice1, state) <= 0){
        -:  734:	  if (DEBUG)
        -:  735:	    printf("None of that card left, sorry!\n");
        -:  736:
        -:  737:	  if (DEBUG){
        -:  738:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  739:	  }
        -:  740:	}
    #####:  741:	else if (state->coins < getCost(choice1)){
    #####:  742:	  printf("That card is too expensive!\n");
        -:  743:
        -:  744:	  if (DEBUG){
        -:  745:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  746:	  }
        -:  747:	}
        -:  748:	else{
        -:  749:
        -:  750:	  if (DEBUG){
        -:  751:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  752:	  }
        -:  753:
    #####:  754:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  755:	  x = 0;//No more buying cards
        -:  756:
        -:  757:	  if (DEBUG){
        -:  758:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  759:	  }
        -:  760:
        -:  761:	}
        -:  762:      }     
        -:  763:
        -:  764:      //Reset Hand
    #####:  765:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  766:	state->hand[currentPlayer][i] = temphand[i];
    #####:  767:	temphand[i] = -1;
        -:  768:      }
        -:  769:      //Reset Hand
        -:  770:      			
    #####:  771:      return 0;
        -:  772:			
        -:  773:    case gardens:
    #####:  774:      return -1;
        -:  775:			
        -:  776:    case mine:
    #####:  777:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  778:
    #####:  779:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  780:	{
    #####:  781:	  return -1;
        -:  782:	}
        -:  783:		
    #####:  784:      if (choice2 > treasure_map || choice2 < curse)
        -:  785:	{
    #####:  786:	  return -1;
        -:  787:	}
        -:  788:
    #####:  789:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  790:	{
    #####:  791:	  return -1;
        -:  792:	}
        -:  793:
    #####:  794:      gainCard(choice2, state, 2, currentPlayer);
        -:  795:
        -:  796:      //discard card from hand
    #####:  797:      discardCard(handPos, currentPlayer, state, 0);
        -:  798:
        -:  799:      //discard trashed card
    #####:  800:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  801:	{
    #####:  802:	  if (state->hand[currentPlayer][i] == j)
        -:  803:	    {
    #####:  804:	      discardCard(i, currentPlayer, state, 0);			
    #####:  805:	      break;
        -:  806:	    }
        -:  807:	}
        -:  808:			
    #####:  809:      return 0;
        -:  810:			
        -:  811:    case remodel:
    #####:  812:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  813:
    #####:  814:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  815:	{
    #####:  816:	  return -1;
        -:  817:	}
        -:  818:
    #####:  819:      gainCard(choice2, state, 0, currentPlayer);
        -:  820:
        -:  821:      //discard card from hand
    #####:  822:      discardCard(handPos, currentPlayer, state, 0);
        -:  823:
        -:  824:      //discard trashed card
    #####:  825:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  826:	{
    #####:  827:	  if (state->hand[currentPlayer][i] == j)
        -:  828:	    {
    #####:  829:	      discardCard(i, currentPlayer, state, 0);			
    #####:  830:	      break;
        -:  831:	    }
        -:  832:	}
        -:  833:
        -:  834:
    #####:  835:      return 0;
        -:  836:		
        -:  837:    case smithy:
    #####:  838:        return smithyCard(handPos, currentPlayer, state);  
        -:  839:      /*
        -:  840:      //+3 Cards
        -:  841:      for (i = 0; i < 3; i++)
        -:  842:	{
        -:  843:	  drawCard(currentPlayer, state);
        -:  844:	}
        -:  845:			
        -:  846:      //discard card from hand
        -:  847:      discardCard(handPos, currentPlayer, state, 0);
        -:  848:      return 0;
        -:  849:      */		
        -:  850:    case village:
        -:  851:      //+1 Card
        2:  852:      drawCard(currentPlayer, state);
        -:  853:			
        -:  854:      //+2 Actions
        2:  855:      state->numActions = state->numActions + 2;
        -:  856:			
        -:  857:      //discard played card from hand
        2:  858:      discardCard(handPos, currentPlayer, state, 0);
        2:  859:      return 0;
        -:  860:		
        -:  861:    case baron:
    #####:  862:      state->numBuys++;//Increase buys by 1!
    #####:  863:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  864:	int p = 0;//Iterator for hand!
    #####:  865:	int card_not_discarded = 1;//Flag for discard set!
    #####:  866:	while(card_not_discarded){
    #####:  867:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  868:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  869:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  870:	    state->discardCount[currentPlayer]++;
    #####:  871:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  872:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  873:	    }
    #####:  874:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  875:	    state->handCount[currentPlayer]--;
    #####:  876:	    card_not_discarded = 0;//Exit the loop
        -:  877:	  }
    #####:  878:	  else if (p > state->handCount[currentPlayer]){
        -:  879:	    if(DEBUG) {
        -:  880:	      printf("No estate cards in your hand, invalid choice\n");
        -:  881:	      printf("Must gain an estate if there are any\n");
        -:  882:	    }
    #####:  883:	    if (supplyCount(estate, state) > 0){
    #####:  884:	      gainCard(estate, state, 0, currentPlayer);
    #####:  885:	      state->supplyCount[estate]--;//Decrement estates
    #####:  886:	      if (supplyCount(estate, state) == 0){
    #####:  887:		isGameOver(state);
        -:  888:	      }
        -:  889:	    }
    #####:  890:	    card_not_discarded = 0;//Exit the loop
        -:  891:	  }
        -:  892:			    
        -:  893:	  else{
    #####:  894:	    p++;//Next card
        -:  895:	  }
        -:  896:	}
        -:  897:      }
        -:  898:			    
        -:  899:      else{
    #####:  900:	if (supplyCount(estate, state) > 0){
    #####:  901:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  902:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  903:	  if (supplyCount(estate, state) == 0){
    #####:  904:	    isGameOver(state);
        -:  905:	  }
        -:  906:	}
        -:  907:      }
        -:  908:	    
        -:  909:      
    #####:  910:      return 0;
        -:  911:		
        -:  912:    case great_hall:
    #####:  913:        return greatHallCard(handPos, currentPlayer, state);  
        -:  914:    /*//+1 Card
        -:  915:      drawCard(currentPlayer, state);
        -:  916:			
        -:  917:      //+1 Actions
        -:  918:      state->numActions++;
        -:  919:			
        -:  920:      //discard card from hand
        -:  921:      discardCard(handPos, currentPlayer, state, 0);
        -:  922:      return 0;
        -:  923:	*/		
        -:  924:    case minion:
        -:  925:      //+1 action
    #####:  926:      state->numActions++;
        -:  927:			
        -:  928:      //discard card from hand
    #####:  929:      discardCard(handPos, currentPlayer, state, 0);
        -:  930:			
    #####:  931:      if (choice1)		//+2 coins
        -:  932:	{
    #####:  933:	  state->coins = state->coins + 2;
        -:  934:	}
        -:  935:			
    #####:  936:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  937:	{
        -:  938:	  //discard hand
    #####:  939:	  while(numHandCards(state) > 0)
        -:  940:	    {
    #####:  941:	      discardCard(handPos, currentPlayer, state, 0);
        -:  942:	    }
        -:  943:				
        -:  944:	  //draw 4
    #####:  945:	  for (i = 0; i < 4; i++)
        -:  946:	    {
    #####:  947:	      drawCard(currentPlayer, state);
        -:  948:	    }
        -:  949:				
        -:  950:	  //other players discard hand and redraw if hand size > 4
    #####:  951:	  for (i = 0; i < state->numPlayers; i++)
        -:  952:	    {
    #####:  953:	      if (i != currentPlayer)
        -:  954:		{
    #####:  955:		  if ( state->handCount[i] > 4 )
        -:  956:		    {
        -:  957:		      //discard hand
    #####:  958:		      while( state->handCount[i] > 0 )
        -:  959:			{
    #####:  960:			  discardCard(handPos, i, state, 0);
        -:  961:			}
        -:  962:							
        -:  963:		      //draw 4
    #####:  964:		      for (j = 0; j < 4; j++)
        -:  965:			{
    #####:  966:			  drawCard(i, state);
        -:  967:			}
        -:  968:		    }
        -:  969:		}
        -:  970:	    }
        -:  971:				
        -:  972:	}
    #####:  973:      return 0;
        -:  974:		
        -:  975:    case steward:
    #####:  976:        return stewardCard (handPos, choice1, choice2, choice3, currentPlayer, state);
        -:  977:        /*if (choice1 == 1)
        -:  978:	{
        -:  979:	  //+2 cards
        -:  980:	  drawCard(currentPlayer, state);
        -:  981:	  drawCard(currentPlayer, state);
        -:  982:	}
        -:  983:      else if (choice1 == 2)
        -:  984:	{
        -:  985:	  //+2 coins
        -:  986:	  state->coins = state->coins + 2;
        -:  987:	}
        -:  988:      else
        -:  989:	{
        -:  990:	  //trash 2 cards in hand
        -:  991:	  discardCard(choice2, currentPlayer, state, 1);
        -:  992:	  discardCard(choice3, currentPlayer, state, 1);
        -:  993:	}
        -:  994:			
        -:  995:      //discard card from hand
        -:  996:      discardCard(handPos, currentPlayer, state, 0);
        -:  997:      return 0;
        -:  998:	*/	
        -:  999:    case tribute:
    #####: 1000:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1001:	if (state->deckCount[nextPlayer] > 0){
    #####: 1002:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1003:	  state->deckCount[nextPlayer]--;
        -: 1004:	}
    #####: 1005:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1006:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1007:	  state->discardCount[nextPlayer]--;
        -: 1008:	}
        -: 1009:	else{
        -: 1010:	  //No Card to Reveal
        -: 1011:	  if (DEBUG){
        -: 1012:	    printf("No cards to reveal\n");
        -: 1013:	  }
        -: 1014:	}
        -: 1015:      }
        -: 1016:	    
        -: 1017:      else{
    #####: 1018:	if (state->deckCount[nextPlayer] == 0){
    #####: 1019:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1020:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1021:	    state->deckCount[nextPlayer]++;
    #####: 1022:	    state->discard[nextPlayer][i] = -1;
    #####: 1023:	    state->discardCount[nextPlayer]--;
        -: 1024:	  }
        -: 1025:			    
    #####: 1026:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1027:	} 
    #####: 1028:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1029:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1030:	state->deckCount[nextPlayer]--;
    #####: 1031:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1032:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1033:	state->deckCount[nextPlayer]--;
        -: 1034:      }    
        -: 1035:		       
    #####: 1036:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1037:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1038:	state->playedCardCount++;
    #####: 1039:	tributeRevealedCards[1] = -1;
        -: 1040:      }
        -: 1041:
    #####: 1042:      for (i = 0; i <= 2; i ++){
    #####: 1043:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1044:	  state->coins += 2;
        -: 1045:	}
        -: 1046:		    
    #####: 1047:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1048:	  drawCard(currentPlayer, state);
    #####: 1049:	  drawCard(currentPlayer, state);
        -: 1050:	}
        -: 1051:	else{//Action Card
    #####: 1052:	  state->numActions = state->numActions + 2;
        -: 1053:	}
        -: 1054:      }
        -: 1055:	    
    #####: 1056:      return 0;
        -: 1057:		
        -: 1058:    case ambassador:
    #####: 1059:      j = 0;		//used to check if player has enough cards to discard
        -: 1060:
    #####: 1061:      if (choice2 > 2 || choice2 < 0)
        -: 1062:	{
    #####: 1063:	  return -1;				
        -: 1064:	}
        -: 1065:
    #####: 1066:      if (choice1 == handPos)
        -: 1067:	{
    #####: 1068:	  return -1;
        -: 1069:	}
        -: 1070:
    #####: 1071:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1072:	{
    #####: 1073:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1074:	    {
    #####: 1075:	      j++;
        -: 1076:	    }
        -: 1077:	}
    #####: 1078:      if (j < choice2)
        -: 1079:	{
    #####: 1080:	  return -1;				
        -: 1081:	}
        -: 1082:
        -: 1083:      if (DEBUG) 
        -: 1084:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1085:
        -: 1086:      //increase supply count for choosen card by amount being discarded
    #####: 1087:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1088:			
        -: 1089:      //each other player gains a copy of revealed card
    #####: 1090:      for (i = 0; i < state->numPlayers; i++)
        -: 1091:	{
    #####: 1092:	  if (i != currentPlayer)
        -: 1093:	    {
    #####: 1094:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1095:	    }
        -: 1096:	}
        -: 1097:
        -: 1098:      //discard played card from hand
    #####: 1099:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1100:
        -: 1101:      //trash copies of cards returned to supply
    #####: 1102:      for (j = 0; j < choice2; j++)
        -: 1103:	{
    #####: 1104:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1105:	    {
    #####: 1106:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1107:		{
    #####: 1108:		  discardCard(i, currentPlayer, state, 1);
    #####: 1109:		  break;
        -: 1110:		}
        -: 1111:	    }
        -: 1112:	}			
        -: 1113:
    #####: 1114:      return 0;
        -: 1115:		
        -: 1116:    case cutpurse:
        -: 1117:
    #####: 1118:      updateCoins(currentPlayer, state, 2);
    #####: 1119:      for (i = 0; i < state->numPlayers; i++)
        -: 1120:	{
    #####: 1121:	  if (i != currentPlayer)
        -: 1122:	    {
    #####: 1123:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1124:		{
    #####: 1125:		  if (state->hand[i][j] == copper)
        -: 1126:		    {
    #####: 1127:		      discardCard(j, i, state, 0);
    #####: 1128:		      break;
        -: 1129:		    }
    #####: 1130:		  if (j == state->handCount[i])
        -: 1131:		    {
    #####: 1132:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1133:			{
        -: 1134:			  if (DEBUG)
        -: 1135:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1136:			}	
    #####: 1137:		      break;
        -: 1138:		    }		
        -: 1139:		}
        -: 1140:					
        -: 1141:	    }
        -: 1142:				
        -: 1143:	}				
        -: 1144:
        -: 1145:      //discard played card from hand
    #####: 1146:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1147:
    #####: 1148:      return 0;
        -: 1149:
        -: 1150:		
        -: 1151:    case embargo: 
        -: 1152:      //+2 Coins
    #####: 1153:      state->coins = state->coins + 2;
        -: 1154:			
        -: 1155:      //see if selected pile is in play
    #####: 1156:      if ( state->supplyCount[choice1] == -1 )
        -: 1157:	{
    #####: 1158:	  return -1;
        -: 1159:	}
        -: 1160:			
        -: 1161:      //add embargo token to selected supply pile
    #####: 1162:      state->embargoTokens[choice1]++;
        -: 1163:			
        -: 1164:      //trash card
    #####: 1165:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1166:      return 0;
        -: 1167:		
        -: 1168:    case outpost:
        -: 1169:      //set outpost flag
    #####: 1170:      state->outpostPlayed++;
        -: 1171:			
        -: 1172:      //discard card
    #####: 1173:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1174:      return 0;
        -: 1175:		
        -: 1176:    case salvager:
        -: 1177:      //+1 buy
    #####: 1178:      state->numBuys++;
        -: 1179:			
    #####: 1180:      if (choice1)
        -: 1181:	{
        -: 1182:	  //gain coins equal to trashed card
    #####: 1183:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1184:	  //trash card
    #####: 1185:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1186:	}
        -: 1187:			
        -: 1188:      //discard card
    #####: 1189:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1190:      return 0;
        -: 1191:		
        -: 1192:    case sea_hag:
    #####: 1193:      for (i = 0; i < state->numPlayers; i++){
    #####: 1194:	if (i != currentPlayer){
    #####: 1195:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1196:	  state->discardCount[i]++;
    #####: 1197:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1198:	}
        -: 1199:      }
    #####: 1200:      return 0;
        -: 1201:		
        -: 1202:    case treasure_map:
        -: 1203:      //search hand for another treasure_map
    #####: 1204:      index = -1;
    #####: 1205:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1206:	{
    #####: 1207:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1208:	    {
    #####: 1209:	      index = i;
    #####: 1210:	      break;
        -: 1211:	    }
        -: 1212:	}
    #####: 1213:      if (index > -1)
        -: 1214:	{
        -: 1215:	  //trash both treasure cards
    #####: 1216:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1217:	  discardCard(index, currentPlayer, state, 1);
        -: 1218:
        -: 1219:	  //gain 4 Gold cards
    #####: 1220:	  for (i = 0; i < 4; i++)
        -: 1221:	    {
    #####: 1222:	      gainCard(gold, state, 1, currentPlayer);
        -: 1223:	    }
        -: 1224:				
        -: 1225:	  //return success
    #####: 1226:	  return 1;
        -: 1227:	}
        -: 1228:			
        -: 1229:      //no second treasure_map found in hand
    #####: 1230:      return -1;
        -: 1231:    }
        -: 1232:	
    #####: 1233:  return -1;
        -: 1234:}
        -: 1235:
       23: 1236:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1237:{
        -: 1238:	
        -: 1239:  //if card is not trashed, added to Played pile 
       23: 1240:  if (trashFlag < 1)
        -: 1241:  {
        -: 1242:      //add card to played pile
        8: 1243:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        8: 1244:      state->playedCardCount++;
        -: 1245:  }
        -: 1246:	
        -: 1247:  //set played card to -1
       23: 1248:  state->hand[currentPlayer][handPos] = -1;
        -: 1249:	
        -: 1250:  //remove card from player's hand
       23: 1251:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1252:  {
        -: 1253:      //reduce number of cards in hand
        4: 1254:      state->handCount[currentPlayer]--;
        -: 1255:  }
       19: 1256:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1257:  {
        -: 1258:      //reduce number of cards in hand
    #####: 1259:      state->handCount[currentPlayer]--;
        -: 1260:  }
        -: 1261:  else 	
        -: 1262:  {
        -: 1263:      //replace discarded card with last card in hand
       19: 1264:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1265:      //set last card to -1
       19: 1266:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1267:      //reduce number of cards in hand
       19: 1268:      state->handCount[currentPlayer]--;
        -: 1269:  }
        -: 1270:	
       23: 1271:  return 0;
        -: 1272:}
        -: 1273:
        8: 1274:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1275:{
        -: 1276:  //Note: supplyPos is enum of choosen card
        -: 1277:	
        -: 1278:  //check if supply pile is empty (0) or card is not used in game (-1)
        8: 1279:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1280:    {
    #####: 1281:      return -1;
        -: 1282:    }
        -: 1283:	
        -: 1284:  //added card for [whoseTurn] current player:
        -: 1285:  // toFlag = 0 : add to discard
        -: 1286:  // toFlag = 1 : add to deck
        -: 1287:  // toFlag = 2 : add to hand
        -: 1288:
        8: 1289:  if (toFlag == 1)
        -: 1290:    {
        2: 1291:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        2: 1292:      state->deckCount[player]++;
        -: 1293:    }
        6: 1294:  else if (toFlag == 2)
        -: 1295:    {
        2: 1296:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        2: 1297:      state->handCount[player]++;
        -: 1298:    }
        -: 1299:  else
        -: 1300:    {
        4: 1301:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1302:      state->discardCount[player]++;
        -: 1303:    }
        -: 1304:	
        -: 1305:  //decrease number in supply pile
        8: 1306:  state->supplyCount[supplyPos]--;
        -: 1307:	 
        8: 1308:  return 0;
        -: 1309:}
        -: 1310:
       19: 1311:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1312:{
        -: 1313:  int i;
        -: 1314:	
        -: 1315:  //reset coin count
       19: 1316:  state->coins = 0;
        -: 1317:
        -: 1318:  //add coins for each Treasure card in player's hand
      114: 1319:  for (i = 0; i < state->handCount[player]; i++)
        -: 1320:    {
       95: 1321:      if (state->hand[player][i] == copper)
        -: 1322:	{
       76: 1323:	  state->coins += 1;
        -: 1324:	}
       19: 1325:      else if (state->hand[player][i] == silver)
        -: 1326:	{
    #####: 1327:	  state->coins += 2;
        -: 1328:	}
       19: 1329:      else if (state->hand[player][i] == gold)
        -: 1330:	{
    #####: 1331:	  state->coins += 3;
        -: 1332:	}	
        -: 1333:    }	
        -: 1334:
        -: 1335:  //add bonus
       19: 1336:  state->coins += bonus;
        -: 1337:
       19: 1338:  return 0;
        -: 1339:}
        -: 1340:
        -: 1341:
        -: 1342://draw smithy
        2: 1343:int smithyCard(int handPos, int currentPlayer, struct gameState *state){	
        -: 1344:    
        -: 1345:    int i;   
        -: 1346:    //+3 Cards
        8: 1347:    for (i = 0; i < 3; i++){
        6: 1348:        drawCard(currentPlayer, state);
        -: 1349:    }
        -: 1350:			
        -: 1351:    //discard card from hand
        2: 1352:    discardCard(handPos, currentPlayer, state, 0);
        2: 1353:    return 0;	
        -: 1354:}
        -: 1355:
        -: 1356://draw adventurer
        4: 1357:int adventurerCard(int currentPlayer, struct gameState *state, int temphand[MAX_HAND]){
        -: 1358:    int cardDrawn;
        4: 1359:    int drawntreasure = 0;
        4: 1360:    int z = 0; 
       22: 1361:    while(drawntreasure<2){
       14: 1362:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        7: 1363:	    shuffle(currentPlayer, state);
        -: 1364:	}
       14: 1365:        drawCard(currentPlayer, state);
       14: 1366:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       14: 1367:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        8: 1368:            drawntreasure++;
        -: 1369:        else{
        6: 1370:            temphand[z]=cardDrawn;
        6: 1371:	    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        6: 1372:	    z++;
        -: 1373:        }
        -: 1374:    }
       14: 1375:    while(z-1>=0){
        6: 1376:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        6: 1377:	z=z-1;
        -: 1378:    }
        4: 1379:    return 0;	
        -: 1380:}
        -: 1381:
        -: 1382://draw greatHall
        2: 1383:int greatHallCard(int handPos, int currentPlayer, struct gameState *state){
        -: 1384:		
        -: 1385:    //+1 Card
        2: 1386:    drawCard(currentPlayer, state);
        -: 1387:			
        -: 1388:    //+1 Actions
        2: 1389:    state->numActions++;
        -: 1390:			
        -: 1391:    //discard card from hand
        2: 1392:    discardCard(handPos, currentPlayer, state, 0);
        2: 1393:    return 0;
        -: 1394:}
        -: 1395:
        -: 1396://draw steward card
    #####: 1397:int stewardCard(int handPos, int choice1, int choice2, int choice3, int currentPlayer, struct gameState *state){
        -: 1398:		
    #####: 1399:    if (choice1 == 1)
        -: 1400:    {
        -: 1401:        //+2 cards
    #####: 1402:        drawCard(currentPlayer, state);
    #####: 1403:	drawCard(handPos, state);
        -: 1404:    }
    #####: 1405:    else if (choice1 == 2)
        -: 1406:    {
        -: 1407:        //+2 coins
    #####: 1408:	state->coins = state->coins + 2;
        -: 1409:    }
        -: 1410:    else
        -: 1411:    {
        -: 1412:        //trash 2 cards in hand
    #####: 1413:	discardCard(choice2, currentPlayer, state, 1);
    #####: 1414:	discardCard(choice3, currentPlayer, state, 1);
        -: 1415:    }			
        -: 1416:    //discard card from hand
    #####: 1417:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1418:    return 0;
        -: 1419:}
        -: 1420:
        -: 1421://draw councilRoom 
    #####: 1422:int councilRoomCard(int handPos, int currentPlayer, struct gameState *state){			    
        -: 1423:    int i;
        -: 1424:    //+4 Cards
    #####: 1425:    for (i = 0; i < 4; i++)
        -: 1426:    {
    #####: 1427:        drawCard(currentPlayer, state);
        -: 1428:    }
        -: 1429:			
        -: 1430:    //+1 Buy
    #####: 1431:    state->numBuys++;
        -: 1432:			
        -: 1433:    //Each other player draws a card
    #####: 1434:    for (i = 0; i < state->numPlayers; i++)
        -: 1435:    {
    #####: 1436:        if ( i != currentPlayer )
        -: 1437:	{
    #####: 1438:	     drawCard(i, state);
        -: 1439:	}
        -: 1440:    }
        -: 1441:			
        -: 1442:    //put played card in played card pile
    #####: 1443:    discardCard(handPos, currentPlayer, state, 0);
        -: 1444:			
    #####: 1445:    return 0;
        -: 1446:}
        -: 1447://end of dominion.c
        -: 1448:
