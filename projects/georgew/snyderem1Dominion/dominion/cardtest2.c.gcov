        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://cardtest2.c -- refactored code adventurer for snyderem
        -:    2:#include "dominion.h"
        -:    3:#include "dominion_helpers.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <assert.h>
        -:    7:#include "rngs.h"
        -:    8:#include <stdlib.h>
        -:    9:#include "interface.h"
        -:   10:
        -:   11:#define TESTCARD "adventurer"
        -:   12:
        1:   13:int main() {
        1:   14:  	int seed = 1000;
        1:   15:    int numPlayers = 2;
        1:   16:    int thisPlayer = 0;
        -:   17:	struct gameState G, testG;
        -:   18:	int currCard;
        1:   19:	int handPos = 0;
        -:   20:	int currDeckCount, currHandCount, currDiscardCount;
        -:   21:	int deckChange, handChange, discardChange;
        -:   22:	int tempHand[MAX_HAND];
        -:   23:	int treasureBefore, treasureAfter;
        -:   24:	int z;
        1:   25:	int choice1 = 0;
        1:   26:	int choice2 = 0;
        1:   27:	int choice3 = 0;
        1:   28:	int bonus = 0;	
        1:   29:	int k[10] = {adventurer, great_hall, village, minion, mine, cutpurse,
        -:   30:			sea_hag, tribute, smithy, council_room};
        -:   31:
        -:   32:	// initialize a game state and player cards
        1:   33:	initializeGame(numPlayers, k, seed, &G);
        1:   34:	printf("Testing for: ");
        1:   35:	printf("1. 2 Cards Added To Hand");
        1:   36:	printf("2. 2 Cards Added Are Treasure Cards");
        1:   37:	printf("3. All Cards that are either added to Hand or Taken from deck are Accounted For");
        1:   38:	printf("4. If At End of Pile Add Discarded Back and Shuffle");
        -:   39:	// copy the game state to a test case
        1:   40:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   41:	printf("\n\n\n\n----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   42:	
        1:   43:	printf("-------TEST 1: CHECKING IF TWO CARDS WERE ADDED TO HAND--------\n");
        -:   44:	//copy starting game state
        1:   45:	memcpy(&G, &testG, sizeof(struct gameState));
        -:   46:	//check hand count at start
        1:   47:	currHandCount = testG.handCount[thisPlayer];
        1:   48:	printf("Current Hand Before: %d\n", testG.handCount[thisPlayer]);
        -:   49:	//run function
        -:   50:	
        1:   51:	cardEffect(adventurer, choice1, choice2, choice3, &testG, handPos, &bonus);
        -:   52:	//adventurerCard(thisPlayer, &testG, tempHand);	
        -:   53:	//check hand count
        1:   54:	printf("Current Hand After: %d\n", testG.handCount[thisPlayer]);
        1:   55:	if ((currHandCount + 2) == testG.handCount[thisPlayer]){
        1:   56:		printf("HAND COUNT INCREASED BY 1: SUCCESS\n");
        -:   57:	}
    #####:   58:	else if (currHandCount == testG.handCount[thisPlayer])
        -:   59:	{
    #####:   60:		printf("HAND COUNT DIDN'T CHANGE: FAILURE\n");
        -:   61:	}
        -:   62:	else
    #####:   63:		printf("HAND COUNT CHANGE INCORRECT: FAILURE\n");
        1:   64:	printf("--------TEST 2: CHECK IF ADDED CARDS ARE TREASURE CARDS---------\n");
        -:   65:	//revert to starting game state
        1:   66:	memcpy(&G, &testG, sizeof(struct gameState));
        1:   67:	currHandCount = testG.handCount[thisPlayer];
        -:   68:	//print hand
        -:   69:	//printHand(thisPlayer, &testG);
        -:   70:	//count treasure cards
        2:   71:	while(z < currHandCount){
    #####:   72:		currCard = testG.hand[thisPlayer][z];
    #####:   73:		if (currCard == copper || currCard == silver || currCard == gold)
    #####:   74:	       		treasureBefore++;    
    #####:   75:		z++;
        -:   76:	}
        1:   77:	printf("Treasure Before Function: %d\n", treasureBefore);
        -:   78:	//run function
        -:   79:	//adventurerCard(thisPlayer, &testG, tempHand);
        1:   80:	cardEffect(adventurer, choice1, choice2, choice3, &testG, handPos, &bonus);
        -:   81:	//printHand
        -:   82:	//printHand(thisPlayer, &testG);
        1:   83:	z = 0;
        1:   84:	if (testG.handCount[thisPlayer] == (currHandCount + 2)) {
       11:   85:		while(z != testG.handCount[thisPlayer]) {
        9:   86:			currCard = testG.hand[thisPlayer][z];
        9:   87:			if (currCard == copper || currCard == silver || currCard == gold)
        7:   88:		       treasureAfter++;   
        9:   89:			z++;
        -:   90:		}
        -:   91:	}
        1:   92:	printf("Treasure After Function: %d\n", treasureAfter);
        1:   93:	if ((treasureBefore + 2) == treasureAfter)
    #####:   94:		printf("ADDED TWO TREASURE CARDS: SUCCESS\n");
        -:   95:	else
        1:   96:		printf("ADDED INCORRECT TREASURE CARDS: FAILURE\n");
        1:   97:	printf("--------TEST 3: CHECK IF ALL CARDS ACCOUNTED FOR---------\n");
        -:   98:	//revert to starting game state
        1:   99:	memcpy(&G, &testG, sizeof(struct gameState));
        -:  100:	//count cards in each deck
        1:  101:	currHandCount = testG.handCount[thisPlayer];
        1:  102:	currDiscardCount = testG.discardCount[thisPlayer];
        1:  103:	currDeckCount = testG.deckCount[thisPlayer];
        1:  104:	printf("Deck Count Before: %d\n", testG.deckCount[thisPlayer]);
        1:  105:	printf("Current Hand Before: %d\n", testG.handCount[thisPlayer]);
        1:  106:	printf("Discard Count Before: %d\n", testG.discardCount[thisPlayer]);
        -:  107:	//run fxn
        -:  108:	//adventurerCard(thisPlayer, &testG, tempHand);
        1:  109:	cardEffect(adventurer, choice1, choice2, choice3, &testG, handPos, &bonus);
        -:  110:	//get count after run
        1:  111:	printf("Deck Count After: %d\n", testG.deckCount[thisPlayer]);
        1:  112:	printf("Current Hand After: %d\n", testG.handCount[thisPlayer]);
        1:  113:	printf("Discard Count After: %d\n", testG.discardCount[thisPlayer]);
        1:  114:	handChange = (testG.handCount[thisPlayer]) - currHandCount;
        1:  115:	deckChange =  currDeckCount - (testG.deckCount[thisPlayer]);
        1:  116:	discardChange = (testG.discardCount[thisPlayer]) - currDiscardCount;
        -:  117:	//check if all cards are accounted for
        1:  118:	if(deckChange == (handChange + discardChange))
        1:  119:		printf("All Cards Accounted For: SUCCESS\n");
        -:  120:	else
    #####:  121:		printf("All Cards not Accounted For: FAILURE\n");
        1:  122:	printf("--------------TEST 4: CHECK IF SHUFFLE OCCURS-----------------\n");
        -:  123:	//revert to starting game state
        1:  124:	memcpy(&G, &testG, sizeof(struct gameState));
        -:  125:	//empty deck out
       10:  126:	while(testG.handCount[thisPlayer] > 1)
        -:  127:	{
        8:  128:		discardCard(handPos, thisPlayer, &testG, 1);
        -:  129:	}
        1:  130:	printf("Deck Count: %d\n", testG.deckCount[thisPlayer]);
        -:  131:	//run function
        -:  132:	//adventurerCard(thisPlayer, &testG, tempHand);
        1:  133:	cardEffect(adventurer, choice1, choice2, choice3, &testG, handPos, &bonus);
        1:  134:	printf("Deck Count: %d\n", testG.deckCount[thisPlayer]);
        1:  135:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n\n\n", TESTCARD);
        1:  136:return 0;
        -:  137:}
