        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://discardCard function
        -:    2://unittest4.c
        -:    3:#include "dominion.h"
        -:    4:#include "dominion_helpers.h"
        -:    5:#include <string.h>
        -:    6:#include <stdio.h>
        -:    7:#include <assert.h>
        -:    8:#include "rngs.h"
        -:    9:#include <stdlib.h>
        -:   10:
        -:   11:#define FUNCTION "discardCard"
        -:   12:
        -:   13:void runDiscard(int handPos, int thisPlayer, struct gameState *state, int trashFlag);
        -:   14:
        1:   15:int main() {
        1:   16:	int trashFlag = 0;
        1:   17:	int handPos = 0;
        -:   18:	int currCard, lastCard;
        -:   19:	int currHandCount;
        -:   20:	int numPlayedBefore, numPlayedAfter;
        1:   21:	int seed = 1000;
        1:   22:	int numPlayers = 2;
        1:   23:	int thisPlayer = 0;
        1:   24:	int k[10] = {curse, estate, village, remodel, 
        -:   25:		council_room, adventurer, province, smithy, steward, tribute};
        -:   26:	struct gameState G, testG;
        -:   27:	//printf("--------------------Start Game----------------------------\n");
        1:   28:	initializeGame(numPlayers, k, seed, &G);
        1:   29:	printf("\n\n\n\n----------------- Testing Function: %s ----------------\n", FUNCTION);
        1:   30:	memcpy(&testG, &G, sizeof(struct gameState));
        1:   31:	printf("\n--------------------TEST 1: TRASH FLAG TEST------------------------\n");
        -:   32:	//check if card is in played cards?
        -:   33:	//revert to saved game state
        1:   34:	memcpy(&G, &testG, sizeof(struct gameState));
        1:   35:	currCard = testG.hand[thisPlayer][handPos];
        1:   36:	numPlayedBefore = testG.playedCardCount;
        1:   37:	trashFlag = 0;
        1:   38:	handPos = 0;
        -:   39:	//run function
        1:   40:	discardCard(handPos, thisPlayer, &testG, trashFlag);
        -:   41:	//check if played card count has increased by 1
        1:   42:	if (testG.playedCardCount == (numPlayedBefore + 1))
        1:   43:		printf("TrashFlag not set, Card Added to played pile: SUCCESS\n");
        -:   44:	else
    #####:   45:		printf("Card not added to played pile: FAILURE\n");
        1:   46:	printf("\n--------------------TEST 2: TEST HAND COUNT------------------------\n");
        -:   47:	//revert to saved game state
        1:   48:	memcpy(&G, &testG, sizeof(struct gameState));
        1:   49:	trashFlag = 1;
        1:   50:	handPos = 0;
        1:   51:	currHandCount = testG.handCount[thisPlayer];
        1:   52:	printf("Current Hand Count: %d\n", testG.handCount[thisPlayer]);
        1:   53:	currCard = testG.hand[thisPlayer][handPos];
        -:   54:	//run function
        1:   55:	discardCard(handPos, thisPlayer, &testG, trashFlag);
        -:   56:	//get new hand count
        1:   57:	printf("NEW Current Hand Count: %d\n", testG.handCount[thisPlayer]);
        1:   58:	if (testG.handCount[thisPlayer] == (currHandCount - 1))
        1:   59:		printf("Hand Count Decreased: SUCCESS\n");
    #####:   60:	else if (testG.handCount[thisPlayer] == currHandCount)
    #####:   61:		printf("Hand Count Not Decreased: FAILURE\n");
        -:   62:	else 
    #####:   63:		printf("Hand Count Changed but not correct: FAILURE\n");
        1:   64:	printf("\n------------TEST 3: Checking Behavor if Not Last Card-----------\n");
        -:   65:	//revert to saved game state
        1:   66:	memcpy(&G, &testG, sizeof(struct gameState));
        -:   67:	//set trashflag
        1:   68:	trashFlag = 1;
        1:   69:	handPos = 0;
        -:   70:	//save current hand count
        1:   71:	currHandCount = testG.handCount[thisPlayer];
        1:   72:	lastCard = testG.hand[thisPlayer][(testG.handCount[thisPlayer] - 1)];
        1:   73:	currCard = testG.hand[thisPlayer][handPos];
        1:   74:	printf("Current Hand Count: %d\n", testG.handCount[thisPlayer]);
        1:   75:	printf("Running Function\n");
        -:   76:	//run function
        1:   77:	discardCard(handPos, thisPlayer, &testG, trashFlag);
        1:   78:	printf("NEW Current Hand Count: %d\n", testG.handCount[thisPlayer]);
        -:   79:	//check if hand count is correct
        1:   80:	if (testG.handCount[thisPlayer] == (currHandCount - 1))
        1:   81:		printf("Hand Count Decreased: SUCCESS\n");
    #####:   82:	else if (testG.handCount[thisPlayer] == currHandCount)
    #####:   83:		printf("Hand Count Not Decreased: FAILURE\n");
        -:   84:	else 
    #####:   85:		printf("Hand Count Changed but not correct: FAILURE\n");
        -:   86:	//check if card swap occured
        1:   87:	if (testG.hand[thisPlayer][handPos] == lastCard)
        1:   88:		printf("Current Card Replaced with Last Card: SUCCESS\n");
    #####:   89:	else if (testG.hand[thisPlayer][handPos] == currCard)
    #####:   90:		printf("Current Card not Replaced: FAILURE\n");
        -:   91:	else
    #####:   92:		printf("Current Card Replaced with wrong card: FAILURE");
        1:   93:	printf("-------------------TEST 4: CHECK BEHAVIOR IF LAST CARD IN HAND-----------------\n");
        -:   94:	//revert to saved game state
        1:   95:	memcpy(&G, &testG, sizeof(struct gameState));
        -:   96:	//set trashflag
        1:   97:	trashFlag = 1;
        -:   98:	//set handPos
        1:   99:	handPos = (testG.handCount[thisPlayer] - 1); 
        -:  100:	//run function and output result
        1:  101:	runDiscard(handPos, thisPlayer, &testG, trashFlag);
        1:  102:	printf("--------------------TEST 5: CHECK BEHAVIOR IF ONLY ONE CARD LEFT-----------------\n");
        -:  103:	//revert to saved game state
        1:  104:	memcpy(&G, &testG, sizeof(struct gameState));
        1:  105:	handPos = 0;
        1:  106:	trashFlag = 1;
        -:  107:	//run until last card left
        2:  108:	while(testG.handCount[thisPlayer] > 1)
        -:  109:	{
    #####:  110:		discardCard(handPos, thisPlayer, &testG, trashFlag);
        -:  111:	}
        -:  112:	//run final function and output result
        1:  113:	runDiscard(handPos, thisPlayer, &testG, trashFlag);
        1:  114:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", FUNCTION);
        1:  115:	return 0;
        -:  116:}
        -:  117:
        2:  118:void runDiscard(int handPos, int thisPlayer, struct gameState *testG, int trashFlag){
        2:  119:	int currHandCount = testG->handCount[thisPlayer];
        2:  120:	int lastCard = testG->hand[thisPlayer][(testG->handCount[thisPlayer] - 1)];
        2:  121:	int currCard = testG->hand[thisPlayer][handPos];
        2:  122:	printf("Current Hand Count: %d\n", testG->handCount[thisPlayer]);
        2:  123:	printf("Running Function\n");
        -:  124:	//run function
        2:  125:	discardCard(handPos, thisPlayer, testG, trashFlag);
        -:  126:	//output results
        2:  127:	printf("Current Hand Count: %d\n", testG->handCount[thisPlayer]);
        -:  128:	//check if hand count is correct
        2:  129:	if (testG->handCount[thisPlayer] == (currHandCount - 1))
        2:  130:		printf("Hand Count Decreased: SUCCESS\n");
    #####:  131:	else if (testG->handCount[thisPlayer] == currHandCount)
    #####:  132:		printf("Hand Count Not Decreased: FAILURE\n");
        -:  133:	else 
    #####:  134:		printf("Hand Count Changed but not correct: FAILURE\n");
        2:  135:}
