        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:22
        -:    0:Programs:22
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
2076259605:    8:int compare(const void* a, const void* b) {
2076259605:    9:  if (*(int*)a > *(int*)b)
       15:   10:    return 1;
2076259590:   11:  if (*(int*)a < *(int*)b)
553669220:   12:    return -1;
1522590370:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:      int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
 61518486:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:       struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;      
        -:   43:  //set up random number generator
 61518486:   44:  SelectStream(1);
 61518486:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
 61518486:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
 15378046:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
 46140440:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
507544840:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
5075448400:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
4614044000:   61:    if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:      {
    #####:   63:        return -1;
        -:   64:      }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
 46140440:   73:  if (numPlayers == 2)
        -:   74:    {
 15381285:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
 30759155:   77:  else if (numPlayers == 3)
        -:   78:    {
 15381888:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
 15377267:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
 46140440:   87:  if (numPlayers == 2)
        -:   88:    {
 15381285:   89:      state->supplyCount[estate] = 8;
 15381285:   90:      state->supplyCount[duchy] = 8;
 15381285:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
 30759155:   95:      state->supplyCount[estate] = 12;
 30759155:   96:      state->supplyCount[duchy] = 12;
 30759155:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
 46140440:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
 46140440:  102:  state->supplyCount[silver] = 40;
 46140440:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
968949240:  106:  for (i = adventurer; i <= treasure_map; i++)         //loop all cards
        -:  107:    {
7613172876:  108:      for (j = 0; j < 10; j++)               //loop chosen cards
        -:  109:  {
7151768440:  110:    if (kingdomCards[j] == i)
        -:  111:      {
        -:  112:        //check if card is a 'Victory' Kingdom card
461404364:  113:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:    {
 92280856:  115:      if (numPlayers == 2){ 
 15381273:  116:        state->supplyCount[i] = 8; 
        -:  117:      }
 30759155:  118:      else{ state->supplyCount[i] = 12; }
        -:  119:    }
        -:  120:        else
        -:  121:    {
415263936:  122:      state->supplyCount[i] = 10;
        -:  123:    }
461404364:  124:        break;
        -:  125:      }
        -:  126:    else    //card is not in the set choosen for the game
        -:  127:      {
6690364076:  128:        state->supplyCount[i] = -1;
        -:  129:      }
        -:  130:  }
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
184557742:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
138417302:  140:      state->deckCount[i] = 0;
553669208:  141:      for (j = 0; j < 3; j++)
        -:  142:  {
415251906:  143:    state->deck[i][j] = estate;
415251906:  144:    state->deckCount[i]++;
        -:  145:  }
1107338416:  146:      for (j = 3; j < 10; j++)
        -:  147:  {
968921114:  148:    state->deck[i][j] = copper;
968921114:  149:    state->deckCount[i]++;    
        -:  150:  }
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
184557742:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
138417302:  156:      if ( shuffle(i, state) < 0 )
        -:  157:  {
    #####:  158:    return -1;
        -:  159:  }
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
184557742:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
138417302:  166:      state->handCount[i] = 0;
138417302:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //  {
        -:  171:      //    drawCard(i, state);
        -:  172:      //  }
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
1291932320:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
1245791880:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
 46140440:  182:  state->outpostPlayed = 0;
 46140440:  183:  state->phase = 0;
 46140440:  184:  state->numActions = 1;
 46140440:  185:  state->numBuys = 1;
 46140440:  186:  state->playedCardCount = 0;
 46140440:  187:  state->whoseTurn = 0;
 46140440:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
276842640:  192:  for (it = 0; it < 5; it++){
230702200:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
 46140440:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
 46140440:  198:  return 0;
        -:  199:}
        -:  200:
9996927503:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
9996927503:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
9996927503:  209:  if (state->deckCount[player] < 1)
9858510193:  210:    return -1;
138417310:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
1661007687:  214:  while (state->deckCount[player] > 0) {
1384173067:  215:    card = floor(Random() * state->deckCount[player]);
1384173067:  216:    newDeck[newDeckPos] = state->deck[player][card];
1384173067:  217:    newDeckPos++;
4829228425:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
3445055358:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
1384173067:  221:    state->deckCount[player]--;
        -:  222:  }
1522590377:  223:  for (i = 0; i < newDeckPos; i++) {
1384173067:  224:    state->deck[player][i] = newDeck[i];
1384173067:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
138417310:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{  
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0;     //tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:  
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:  
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:  
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:  
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:  
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:  
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
 37280053:  311:int numHandCards(struct gameState *state) {
 37280053:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
       12:  320:int supplyCount(int card, struct gameState *state) {
       12:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
 98798536:  346:int whoseTurn(struct gameState *state) {
 98798536:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:  
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:  {
    #####:  406:    j++;
        -:  407:  }
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;  
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:  {
    #####:  469:    players[i] = -9999;
        -:  470:  }
        -:  471:      else
        -:  472:  {
    #####:  473:    players[i] = scoreFor (i, state);
        -:  474:  }
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:  {
    #####:  483:    j = i;
        -:  484:  }
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:  {
    #####:  494:    players[i]++;
        -:  495:  }
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:  {
    #####:  504:    j = i;
        -:  505:  }
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:  {
    #####:  514:    players[i] = 1;
        -:  515:  }
        -:  516:      else
        -:  517:  {
    #####:  518:    players[i] = 0;
        -:  519:  }
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
8539748360:  525:int drawCard(int player, struct gameState *state)
        -:  526:{  int count;
        -:  527:  int deckCounter;
8539748360:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
4929255098:  533:    for (i = 0; i < state->discardCount[player];i++){
        2:  534:      state->deck[player][i] = state->discard[player][i];
        2:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
4929255096:  538:    state->deckCount[player] = state->discardCount[player];
4929255096:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
4929255096:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
4929255096:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
4929255096:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
4929255096:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
4929255096:  559:    if (deckCounter == 0)
4929255094:  560:      return -1;
        -:  561:
        2:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        2:  563:    state->deckCount[player]--;
        2:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
3610493264:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
3610493264:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
3610493264:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
3610493264:  576:    state->deckCount[player]--;
3610493264:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
3610493266:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:  
    #####:  643:  return -1;
        -:  644:}
        -:  645:
 61518483:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
 61518483:  653:  int currentPlayer = whoseTurn(state);
 61518483:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        -:  656:  int temphand[MAX_HAND];// moved above the if statement
        -:  657:
 61518483:  658:  if (nextPlayer > (state->numPlayers - 1)){
 16636546:  659:    nextPlayer = 0;
        -:  660:  }
        -:  661:  
        -:  662:  
        -:  663:  //uses switch to select card and perform actions
 61518483:  664:  switch( card ) 
        -:  665:    {
        -:  666:    case adventurer:
 13213733:  667:     adventurerEffect(currentPlayer, state);
 13213733:  668:     return 0;
        -:  669:      
        -:  670:    case council_room:
        -:  671:      //+4 Cards
    #####:  672:      for (i = 0; i < 4; i++)
        -:  673:      {
    #####:  674:        drawCard(currentPlayer, state);
        -:  675:      }
        -:  676:      
        -:  677:      //+1 Buy
    #####:  678:      state->numBuys++;
        -:  679:      
        -:  680:      //Each other player draws a card
    #####:  681:      for (i = 0; i < state->numPlayers; i++)
        -:  682:      {
    #####:  683:        if ( i != currentPlayer )
        -:  684:          {
    #####:  685:            drawCard(i, state);
        -:  686:          }
        -:  687:      }
        -:  688:      
        -:  689:      //put played card in played card pile
    #####:  690:      discardCard(handPos, currentPlayer, state, 0);
        -:  691:      
    #####:  692:      return 0;
        -:  693:      
        -:  694:    case feast:
        -:  695:      //gain card with cost up to 5
        -:  696:      //Backup hand
    #####:  697:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  698:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  699:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  700:      }
        -:  701:      //Backup hand
        -:  702:
        -:  703:      //Update Coins for Buy
    #####:  704:      updateCoins(currentPlayer, state, 5);
    #####:  705:      x = 1;//Condition to loop on
    #####:  706:      while( x == 1) {//Buy one card
    #####:  707:        if (supplyCount(choice1, state) <= 0){
        -:  708:          if (DEBUG)
        -:  709:            printf("None of that card left, sorry!\n");
        -:  710:
        -:  711:          if (DEBUG){
        -:  712:            printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  713:          }
        -:  714:        }
    #####:  715:        else if (state->coins < getCost(choice1)){
    #####:  716:          printf("That card is too expensive!\n");
        -:  717:
        -:  718:          if (DEBUG){
        -:  719:            printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  720:          }
        -:  721:        }
        -:  722:        else{
        -:  723:
        -:  724:          if (DEBUG){
        -:  725:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  726:          }
        -:  727:
    #####:  728:          gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  729:          x = 0;//No more buying cards
        -:  730:
        -:  731:          if (DEBUG){
        -:  732:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  733:          }
        -:  734:
        -:  735:        }
        -:  736:      }     
        -:  737:
        -:  738:      //Reset Hand
    #####:  739:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  740:        state->hand[currentPlayer][i] = temphand[i];
    #####:  741:        temphand[i] = -1;
        -:  742:      }
        -:  743:      //Reset Hand
        -:  744:            
    #####:  745:      return 0;
        -:  746:      
        -:  747:    case gardens:
    #####:  748:      return -1;
        -:  749:      
        -:  750:    case mine:
    #####:  751:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  752:
    #####:  753:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  754:      {
    #####:  755:        return -1;
        -:  756:      }
        -:  757:        
    #####:  758:          if (choice2 > treasure_map || choice2 < curse)
        -:  759:      {
    #####:  760:        return -1;
        -:  761:      }
        -:  762:
    #####:  763:          if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  764:      {
    #####:  765:        return -1;
        -:  766:      }
        -:  767:
    #####:  768:      gainCard(choice2, state, 2, currentPlayer);
        -:  769:
        -:  770:      //discard card from hand
    #####:  771:      discardCard(handPos, currentPlayer, state, 0);
        -:  772:
        -:  773:      //discard trashed card
    #####:  774:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  775:      {
    #####:  776:        if (state->hand[currentPlayer][i] == j)
        -:  777:          {
    #####:  778:            discardCard(i, currentPlayer, state, 0);      
    #####:  779:            break;
        -:  780:          }
        -:  781:      }
        -:  782:      
    #####:  783:      return 0;
        -:  784:      
        -:  785:    case remodel:
    #####:  786:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  787:
    #####:  788:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  789:      {
    #####:  790:        return -1;
        -:  791:      }
        -:  792:
    #####:  793:      gainCard(choice2, state, 0, currentPlayer);
        -:  794:
        -:  795:      //discard card from hand
    #####:  796:      discardCard(handPos, currentPlayer, state, 0);
        -:  797:
        -:  798:      //discard trashed card
    #####:  799:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  800:      {
    #####:  801:        if (state->hand[currentPlayer][i] == j)
        -:  802:          {
    #####:  803:            discardCard(i, currentPlayer, state, 0);      
    #####:  804:            break;
        -:  805:          }
        -:  806:      }
        -:  807:
    #####:  808:      return 0;
        -:  809:    
        -:  810:    case smithy:
        3:  811:      smithyEffect(currentPlayer, state, handPos);
        3:  812:      return 0;
        -:  813:    
        -:  814:    case village:
        -:  815:      //+1 Card
        4:  816:      drawCard(currentPlayer, state);
        -:  817:      
        -:  818:      //+2 Actions
        4:  819:      state->numActions = state->numActions + 2;
        -:  820:      
        -:  821:      //discard played card from hand
        4:  822:      discardCard(handPos, currentPlayer, state, 0);
        4:  823:      return 0;
        -:  824:    
        -:  825:    case baron:
    #####:  826:      baronEffect(currentPlayer, state, choice1);
    #####:  827:      return 0;
        -:  828:    
        -:  829:    case great_hall:
        -:  830:      //+1 Card
        2:  831:      drawCard(currentPlayer, state);
        -:  832:      
        -:  833:      //+1 Actions
        2:  834:      state->numActions++;
        -:  835:      
        -:  836:      //discard card from hand
        2:  837:      discardCard(handPos, currentPlayer, state, 0);
        2:  838:      return 0;
        -:  839:    
        -:  840:    case minion:
 48304741:  841:      minionEffect(currentPlayer, state, choice1, choice2, handPos);
 48304741:  842:      return 0;
        -:  843:    
        -:  844:    case steward:
    #####:  845:      if (choice1 == 1)
        -:  846:      {
        -:  847:        //+2 cards
    #####:  848:        drawCard(currentPlayer, state);
    #####:  849:        drawCard(currentPlayer, state);
        -:  850:      }
    #####:  851:      else if (choice1 == 2)
        -:  852:      {
        -:  853:        //+2 coins
    #####:  854:        state->coins = state->coins + 2;
        -:  855:      }
        -:  856:      else
        -:  857:      {
        -:  858:        //trash 2 cards in hand
    #####:  859:        discardCard(choice2, currentPlayer, state, 1);
    #####:  860:        discardCard(choice3, currentPlayer, state, 1);
        -:  861:      }
        -:  862:      
        -:  863:      //discard card from hand
    #####:  864:      discardCard(handPos, currentPlayer, state, 0);
    #####:  865:      return 0;
        -:  866:    
        -:  867:    case tribute:
    #####:  868:      tributeEffect(currentPlayer, nextPlayer, state);
    #####:  869:      return 0;
        -:  870:    
        -:  871:    case ambassador:
    #####:  872:      j = 0;    //used to check if player has enough cards to discard
        -:  873:
    #####:  874:      if (choice2 > 2 || choice2 < 0)
        -:  875:      {
    #####:  876:        return -1;        
        -:  877:      }
        -:  878:
    #####:  879:      if (choice1 == handPos)
        -:  880:      {
    #####:  881:        return -1;
        -:  882:      }
        -:  883:
    #####:  884:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  885:      {
    #####:  886:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  887:          {
    #####:  888:            j++;
        -:  889:          }
        -:  890:      }
    #####:  891:      if (j < choice2)
        -:  892:      {
    #####:  893:        return -1;        
        -:  894:      }
        -:  895:
        -:  896:      if (DEBUG) 
        -:  897:        printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  898:
        -:  899:      //increase supply count for choosen card by amount being discarded
    #####:  900:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  901:      
        -:  902:      //each other player gains a copy of revealed card
    #####:  903:      for (i = 0; i < state->numPlayers; i++)
        -:  904:      {
    #####:  905:        if (i != currentPlayer)
        -:  906:          {
    #####:  907:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  908:          }
        -:  909:      }
        -:  910:
        -:  911:      //discard played card from hand
    #####:  912:      discardCard(handPos, currentPlayer, state, 0);      
        -:  913:
        -:  914:      //trash copies of cards returned to supply
    #####:  915:      for (j = 0; j < choice2; j++)
        -:  916:      {
    #####:  917:        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  918:        {
    #####:  919:          if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  920:          {
    #####:  921:            discardCard(i, currentPlayer, state, 1);
    #####:  922:            break;
        -:  923:          }
        -:  924:         }
        -:  925:      }      
        -:  926:
    #####:  927:      return 0;
        -:  928:    
        -:  929:    case cutpurse:
        -:  930:
    #####:  931:      updateCoins(currentPlayer, state, 2);
    #####:  932:      for (i = 0; i < state->numPlayers; i++)
        -:  933:      {
    #####:  934:        if (i != currentPlayer)
        -:  935:        {
    #####:  936:          for (j = 0; j < state->handCount[i]; j++)
        -:  937:          {
    #####:  938:            if (state->hand[i][j] == copper)
        -:  939:            {
    #####:  940:              discardCard(j, i, state, 0);
    #####:  941:              break;
        -:  942:            }
    #####:  943:            if (j == state->handCount[i])
        -:  944:            {
    #####:  945:              for (k = 0; k < state->handCount[i]; k++)
        -:  946:              {
        -:  947:                if (DEBUG)
        -:  948:                  printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  949:              }  
    #####:  950:              break;
        -:  951:            }    
        -:  952:          }
        -:  953:        }
        -:  954:      }        
        -:  955:
        -:  956:      //discard played card from hand
    #####:  957:      discardCard(handPos, currentPlayer, state, 0);      
        -:  958:
    #####:  959:      return 0;
        -:  960:
        -:  961:    
        -:  962:    case embargo: 
        -:  963:      //+2 Coins
    #####:  964:      state->coins = state->coins + 2;
        -:  965:      
        -:  966:      //see if selected pile is in play
    #####:  967:      if ( state->supplyCount[choice1] == -1 )
        -:  968:      {
    #####:  969:        return -1;
        -:  970:      }
        -:  971:      
        -:  972:      //add embargo token to selected supply pile
    #####:  973:      state->embargoTokens[choice1]++;
        -:  974:      
        -:  975:      //trash card
    #####:  976:      discardCard(handPos, currentPlayer, state, 1);    
    #####:  977:      return 0;
        -:  978:    
        -:  979:    case outpost:
        -:  980:      //set outpost flag
    #####:  981:      state->outpostPlayed++;
        -:  982:      
        -:  983:      //discard card
    #####:  984:      discardCard(handPos, currentPlayer, state, 0);
    #####:  985:      return 0;
        -:  986:    
        -:  987:    case salvager:
        -:  988:      //+1 buy
    #####:  989:      state->numBuys++;
        -:  990:      
    #####:  991:      if (choice1)
        -:  992:      {
        -:  993:        //gain coins equal to trashed card
    #####:  994:        state->coins = state->coins + getCost( handCard(choice1, state) );
        -:  995:        //trash card
    #####:  996:        discardCard(choice1, currentPlayer, state, 1);  
        -:  997:      }
        -:  998:      
        -:  999:      //discard card
    #####: 1000:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1001:      return 0;
        -: 1002:    
        -: 1003:    case sea_hag:
    #####: 1004:      for (i = 0; i < state->numPlayers; i++){
    #####: 1005:        if (i != currentPlayer){
    #####: 1006:          state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];          state->deckCount[i]--;
    #####: 1007:          state->discardCount[i]++;
    #####: 1008:          state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1009:        }
        -: 1010:      }
    #####: 1011:      return 0;
        -: 1012:    
        -: 1013:    case treasure_map:
        -: 1014:      //search hand for another treasure_map
    #####: 1015:      index = -1;
    #####: 1016:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1017:      {
    #####: 1018:        if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1019:          {
    #####: 1020:            index = i;
    #####: 1021:            break;
        -: 1022:          }
        -: 1023:      }
    #####: 1024:      if (index > -1)
        -: 1025:      {
        -: 1026:        //trash both treasure cards
    #####: 1027:        discardCard(handPos, currentPlayer, state, 1);
    #####: 1028:        discardCard(index, currentPlayer, state, 1);
        -: 1029:
        -: 1030:        //gain 4 Gold cards
    #####: 1031:        for (i = 0; i < 4; i++)
        -: 1032:        {
    #####: 1033:          gainCard(gold, state, 1, currentPlayer);
        -: 1034:        }
        -: 1035:            
        -: 1036:        //return success
    #####: 1037:        return 1;
        -: 1038:      }
        -: 1039:      
        -: 1040:      //no second treasure_map found in hand
    #####: 1041:      return -1;
        -: 1042:    }
        -: 1043:  
    #####: 1044:  return -1;
        -: 1045:}
        -: 1046:
102463909: 1047:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1048:{
        -: 1049:  
        -: 1050:  //if card is not trashed, added to Played pile 
102463909: 1051:  if (trashFlag < 1)
        -: 1052:    {
        -: 1053:      //add card to played pile
102463878: 1054:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
102463878: 1055:      state->playedCardCount++;
        -: 1056:    }
        -: 1057:  
        -: 1058:  //set played card to -1
102463909: 1059:  state->hand[currentPlayer][handPos] = -1;
        -: 1060:  
        -: 1061:  //remove card from player's hand
102463909: 1062:  if ( handPos == (state->handCount[currentPlayer] - 1) )   //last card in hand array is played
        -: 1063:    {
        -: 1064:      //reduce number of cards in hand
   158331: 1065:      state->handCount[currentPlayer]--;
        -: 1066:    }
102305578: 1067:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1068:    {
        -: 1069:      //reduce number of cards in hand
 12066991: 1070:      state->handCount[currentPlayer]--;
        -: 1071:    }
        -: 1072:  else   
        -: 1073:    {
        -: 1074:      //replace discarded card with last card in hand
 90238587: 1075:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1076:      //set last card to -1
 90238587: 1077:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1078:      //reduce number of cards in hand
 90238587: 1079:      state->handCount[currentPlayer]--;
        -: 1080:    }
        -: 1081:  
102463909: 1082:  return 0;
        -: 1083:}
        -: 1084:
       12: 1085:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1086:{
        -: 1087:  //Note: supplyPos is enum of choosen card
        -: 1088:  
        -: 1089:  //check if supply pile is empty (0) or card is not used in game (-1)
       12: 1090:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1091:    {
    #####: 1092:      return -1;
        -: 1093:    }
        -: 1094:  
        -: 1095:  //added card for [whoseTurn] current player:
        -: 1096:  // toFlag = 0 : add to discard
        -: 1097:  // toFlag = 1 : add to deck
        -: 1098:  // toFlag = 2 : add to hand
        -: 1099:
       12: 1100:  if (toFlag == 1)
        -: 1101:    {
        3: 1102:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        3: 1103:      state->deckCount[player]++;
        -: 1104:    }
        9: 1105:  else if (toFlag == 2)
        -: 1106:    {
        3: 1107:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        3: 1108:      state->handCount[player]++;
        -: 1109:    }
        -: 1110:  else
        -: 1111:    {
        6: 1112:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        6: 1113:      state->discardCount[player]++;
        -: 1114:    }
        -: 1115:  
        -: 1116:  //decrease number in supply pile
       12: 1117:  state->supplyCount[supplyPos]--;
        -: 1118:   
       12: 1119:  return 0;
        -: 1120:}
        -: 1121:
 46140449: 1122:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1123:{
        -: 1124:  int i;
        -: 1125:  
        -: 1126:  //reset coin count
 46140449: 1127:  state->coins = 0;
        -: 1128:
        -: 1129:  //add coins for each Treasure card in player's hand
276842694: 1130:  for (i = 0; i < state->handCount[player]; i++)
        -: 1131:    {
230702245: 1132:      if (state->hand[player][i] == copper)
        -: 1133:  {
184561796: 1134:    state->coins += 1;
        -: 1135:  }
 46140449: 1136:      else if (state->hand[player][i] == silver)
        -: 1137:  {
    #####: 1138:    state->coins += 2;
        -: 1139:  }
 46140449: 1140:      else if (state->hand[player][i] == gold)
        -: 1141:  {
    #####: 1142:    state->coins += 3;
        -: 1143:  }  
        -: 1144:    }  
        -: 1145:
        -: 1146:  //add bonus
 46140449: 1147:  state->coins += bonus;
        -: 1148:
 46140449: 1149:  return 0;
        -: 1150:}
        -: 1151:
        -: 1152:
 13213733: 1153:int adventurerEffect (
        -: 1154:  int               currentPlayer, 
        -: 1155:  struct gameState  *state ) 
        -: 1156:{
        -: 1157:  
 13213733: 1158:  int drawntreasure = 0;
        -: 1159:  int cardDrawn;
        -: 1160:  int temphand[MAX_HAND];
 13213733: 1161:  int z = 0;
        -: 1162: 
8251841017: 1163:  while(drawntreasure < 2) {
        -: 1164:    //if the deck is empty we need to shuffle discard and add to deck
8225413551: 1165:    if (state->deckCount[currentPlayer] < 1) {          
4929255096: 1166:      shuffle(currentPlayer, state);
        -: 1167:    }
8225413551: 1168:    drawCard(currentPlayer, state);
        -: 1169:    //top card of hand is most recently drawn card.
8225413551: 1170:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 2];
8225413551: 1171:    if (cardDrawn == copper || cardDrawn == silver) {
 26427466: 1172:      drawntreasure++;
        -: 1173:    }
        -: 1174:    else {
8198986085: 1175:      temphand[z] = cardDrawn;
        -: 1176:      //this should just remove the top card (the most recently drawn one).
8198986085: 1177:      state->handCount[currentPlayer]--; 
8198986085: 1178:      z++;
        -: 1179:    }
        -: 1180:  }
        -: 1181:
3321903655: 1182:  while(z - 1 >= 0) {
        -: 1183:    // discard all cards in play that have been drawn
3295476189: 1184:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z-1]; 
3295476189: 1185:    z--;
        -: 1186:  }
        -: 1187: 
 13213733: 1188:  return 0;
        -: 1189:}
        -: 1190:
        3: 1191:int smithyEffect (
        -: 1192:  int                currentPlayer, 
        -: 1193:  struct gameState  *state, 
        -: 1194:  int               handPos ) 
        -: 1195:{
        -: 1196:
        -: 1197:  int i;
        -: 1198:  //+3 Cards
        9: 1199:  for (i = 1; i < 3; i++) {
        6: 1200:    drawCard(currentPlayer, state);
        -: 1201:  }
        -: 1202:  
        -: 1203:  //discard card from hand
        3: 1204:  discardCard(handPos, currentPlayer, state, 1);
        -: 1205:
        3: 1206:  return 0;
        -: 1207:}
        -: 1208:
    #####: 1209:int baronEffect (
        -: 1210:  int               currentPlayer, 
        -: 1211:  struct gameState  *state, 
        -: 1212:  int               discard ) 
        -: 1213:{
        -: 1214:  //Increase buys by 1!
    #####: 1215:  state->numBuys++;
        -: 1216:
        -: 1217:  //Boolean true or going to discard an estate
    #####: 1218:  if (discard > 0) {
        -: 1219:    // Iterator for hand!
    #####: 1220:    int p = 2;
        -: 1221:    //Flag for discard set!
    #####: 1222:    int card_not_discarded = 1;
    #####: 1223:    while(card_not_discarded){
        -: 1224:      //Found an estate card!
    #####: 1225:      if (state->hand[currentPlayer][p] == estate) {
        -: 1226:        //Add 4 coins to the amount of coins
    #####: 1227:        state->coins += 4;
    #####: 1228:        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1229:        state->discardCount[currentPlayer]++;
    #####: 1230:        for (;p < state->handCount[currentPlayer]; p++) {
    #####: 1231:          state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1232:        }
    #####: 1233:        state->hand[currentPlayer][state->handCount[currentPlayer]] = 1;
    #####: 1234:        state->handCount[currentPlayer]--;
    #####: 1235:        card_not_discarded = 0;  //Exit the loop
        -: 1236:      }
    #####: 1237:      else if (p > state->handCount[currentPlayer]) {
        -: 1238:        if(DEBUG) {
        -: 1239:          printf("No estate cards in your hand, invalid choice\n");
        -: 1240:          printf("Must gain an estate if there are any\n");
        -: 1241:        }
    #####: 1242:        if (supplyCount(estate, state) > 0) {
    #####: 1243:          gainCard(currentPlayer, state, 0, estate);
        -: 1244:          //Decrement estates
    #####: 1245:          state->supplyCount[estate]--;
    #####: 1246:          if (supplyCount(estate, state) == 0) {
    #####: 1247:            isGameOver(state);
        -: 1248:          }
        -: 1249:        }
    #####: 1250:        card_not_discarded = 0;  //Exit the loop
        -: 1251:      }
        -: 1252:      else {
    #####: 1253:        p++;  //Next card
        -: 1254:      }
        -: 1255:    }
        -: 1256:  }
        -: 1257:  else{
    #####: 1258:    if (supplyCount(estate, state) > 0) {
    #####: 1259:      gainCard(estate, state, 0, currentPlayer); //Gain an estate
    #####: 1260:      state->supplyCount[estate]--; //Decrement Estates
    #####: 1261:      if (supplyCount(estate, state) == 0) {
    #####: 1262:        isGameOver(state);
        -: 1263:      }
        -: 1264:    }
        -: 1265:  }
    #####: 1266:  return 0;
        -: 1267:}
        -: 1268:
 48304741: 1269:int minionEffect (
        -: 1270:  int               currentPlayer, 
        -: 1271:  struct gameState   *state, 
        -: 1272:  int               choice1, 
        -: 1273:  int               choice2, 
        -: 1274:  int               handPos ) 
        -: 1275:{
        -: 1276:
        -: 1277:  int i;
        -: 1278:  int j;
        -: 1279:  //+1 action
 48304741: 1280:  state->numActions++;
        -: 1281:  
        -: 1282:  //discard card from hand
 48304741: 1283:  discardCard(handPos, currentPlayer, state, 0);
        -: 1284:  
        -: 1285:  //+2 coins
 48304741: 1286:  if (choice2) {
 24121545: 1287:    state->coins = state->coins + 2;
        -: 1288:  }
        -: 1289:  //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
 24183196: 1290:  else if (choice1) {
        -: 1291:    //discard hand
 49371318: 1292:    while(numHandCards(state) > 0) {
 25188788: 1293:      discardCard(handPos, currentPlayer, state, 0);
        -: 1294:    }
        -: 1295:        
        -: 1296:    //draw 4
 72547590: 1297:    for (i = 0; i <= 4; i++) {
 60456325: 1298:      drawCard(currentPlayer, state);
        -: 1299:    }
        -: 1300:        
        -: 1301:    //other players discard hand and redraw if hand size > 4
 48386344: 1302:    for (i = 0; i < state->numPlayers; i++) {
 36295079: 1303:      if (i != currentPlayer) {
 24203814: 1304:        if ( state->handCount[i] > 4 ) {
        -: 1305:          //discard hand
 40558476: 1306:          while( state->handCount[i] > 0 ) {
 28970340: 1307:            discardCard(handPos, i, state, 0);
        -: 1308:          }
        -: 1309:          //draw 4
 28970340: 1310:          for (j = 0; j < 4; j++) {
 23176272: 1311:            drawCard(i, state);
        -: 1312:          }
        -: 1313:        }
        -: 1314:      }
        -: 1315:    }
        -: 1316:  }
 48304741: 1317:  return 0;
        -: 1318:}
        -: 1319:
    #####: 1320:int tributeEffect (
        -: 1321:  int               currentPlayer, 
        -: 1322:  int               nextPlayer, 
        -: 1323:  struct gameState  *state )
        -: 1324:{
        -: 1325:
        -: 1326:  int i; 
    #####: 1327:  int tributeRevealedCards[2] = {-1, -1};
        -: 1328:
    #####: 1329:  if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
    #####: 1330:    if (state->deckCount[nextPlayer] > 0) {
    #####: 1331:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1332:      state->deckCount[nextPlayer]--;
        -: 1333:    }
    #####: 1334:    else if (state->discardCount[nextPlayer] > 0) {
    #####: 1335:      tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1336:      state->discardCount[nextPlayer]--;
        -: 1337:    }
        -: 1338:    else {
        -: 1339:      //No Card to Reveal
        -: 1340:      if (DEBUG) {
        -: 1341:        printf("No cards to reveal\n");
        -: 1342:      }
        -: 1343:    }
        -: 1344:  }
        -: 1345:  else{
    #####: 1346:    if (state->deckCount[nextPlayer] == 0){
    #####: 1347:      for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1348:        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1349:        state->deckCount[nextPlayer]++;
    #####: 1350:        state->discard[nextPlayer][i] = -1;
    #####: 1351:        state->discardCount[nextPlayer]--;
        -: 1352:      }
    #####: 1353:      shuffle(nextPlayer,state);//Shuffle the deck
        -: 1354:    } 
    #####: 1355:    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1356:    state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1357:    state->deckCount[nextPlayer]--;
    #####: 1358:    tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1359:    state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1360:    state->deckCount[nextPlayer]--;
        -: 1361:  }    
        -: 1362:           
        -: 1363:  //If we have a duplicate card, just drop one 
    #####: 1364:  if (tributeRevealedCards[0] == tributeRevealedCards[1]) {
    #####: 1365:    state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1366:    state->playedCardCount++;
    #####: 1367:    tributeRevealedCards[1] = -1;
        -: 1368:   }
        -: 1369:
    #####: 1370:  for (i = 0; i <= 2; i ++) {
        -: 1371:    //Treasure cards
    #####: 1372:    if (tributeRevealedCards[i] == copper || 
    #####: 1373:        tributeRevealedCards[i] == silver || 
    #####: 1374:        tributeRevealedCards[i] == gold ) {
    #####: 1375:      state->coins += 2;
        -: 1376:    }
        -: 1377:    //Victory Card Found
    #####: 1378:    else if (tributeRevealedCards[i] == estate || 
    #####: 1379:             tributeRevealedCards[i] == duchy || 
    #####: 1380:             tributeRevealedCards[i] == province || 
    #####: 1381:             tributeRevealedCards[i] == gardens || 
    #####: 1382:             tributeRevealedCards[i] == great_hall ) {
    #####: 1383:      drawCard(currentPlayer, state);
    #####: 1384:      drawCard(currentPlayer, state);
        -: 1385:    }
        -: 1386:    //Action Card
        -: 1387:    else{
    #####: 1388:      state->numActions = state->numActions + 2;
        -: 1389:    }
        -: 1390:  }
    #####: 1391: return 0;
        -: 1392:}
        -: 1393://end of dominion.c
        -: 1394:
