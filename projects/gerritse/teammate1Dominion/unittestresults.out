-----------------Unit Test 1-1 ----------------------
--------------- updateCoins() ----------------------
TEST 1: Copper coins equal to 1
Number of Copper Cards: 3
Copper coin total: 3
Test 1 passed.
-----------------Unit Test 1-2 ----------------------
--------------- updateCoins() ----------------------
TEST 2: Silver coins equal to 2
Number of Silver Cards: 3
Silver coin total: 6
Test 2 passed.
-----------------Unit Test 1-3 ----------------------
--------------- updateCoins() ----------------------
TEST 3: Gold coins equal to 3
Number of Gold Cards: 3
Gold coin total: 9
Test 3 passed.
-----------------Unit Test 1-4 ----------------------
--------------- updateCoins() ----------------------
TEST 4: Set copper to 5, silver to 10, gold to 15
Total number cards: 3
All coin total: 30
Test 4 passed.
File 'unittest1.c'
Lines executed:86.32% of 95
Creating 'unittest1.c.gcov'

File 'unittest1.c'
Lines executed:86.32% of 95
Branches executed:86.96% of 46
Taken at least once:63.04% of 46
Calls executed:85.71% of 28
Creating 'unittest1.c.gcov'

-----------------Unit Test 2-1 ----------------------
----------------- scoreFor() ----------------------
Test 1: Score From Hand with 10 estate cards
SCORE: 10
Calculated Score: 10
Test 1: Passed.
-----------------Unit Test 2-2 ----------------------
----------------- scoreFor() ----------------------
Test 2: Score From Discard with 10 province cards
Test SCORE: 60
Calculated Score: 60
Test 2: Passed.
-----------------Unit Test 2-3 ----------------------
----------------- scoreFor() ----------------------
Test 3: Score From Deck with 10 Great Hall cards
Test SCORE: 10
Calculated Score: 10
Test 3: Passed.
File 'unittest2.c'
Lines executed:95.45% of 66
Creating 'unittest2.c.gcov'

File 'unittest2.c'
Lines executed:95.45% of 66
Branches executed:100.00% of 54
Taken at least once:61.11% of 54
Calls executed:75.00% of 24
Creating 'unittest2.c.gcov'

-----------------Unit Test 3-1 ----------------------
--------------- discardCard() ----------------------
Test 1: Set players hand count to 10 cards and remove one
Current player hand count: 10
Remove 1 card.
Current player hand count: 9
Test 1: Passed.
-----------------Unit Test 3-2 ----------------------
--------------- discardCard() ----------------------
Test 2: Set players hand count to 1 cards and remove one
Current player hand count: 1
Remove last card.
Current player hand count: 0
Test 2: Passed.
File 'unittest3.c'
Lines executed:76.79% of 56
Creating 'unittest3.c.gcov'

File 'unittest3.c'
Lines executed:76.79% of 56
Branches executed:87.50% of 16
Taken at least once:43.75% of 16
Calls executed:80.00% of 20
Creating 'unittest3.c.gcov'

-----------------Unit Test 4-1 ----------------------
--------------- fullDeckCount() ----------------------
Test 1: Set deck count equal to 10.
COUNT: 10
Test 1: Passed.
-----------------Unit Test 4-2 ----------------------
--------------- fullDeckCount() ----------------------
Test 2: Set hand count equal to 6.
COUNT: 6
Test 2: Passed.
-----------------Unit Test 4-3 ----------------------
--------------- fullDeckCount() ----------------------
Test 3: Set discard count equal to 12.
COUNT: 12
Test 3: Passed.
File 'unittest4.c'
Lines executed:94.34% of 53
Creating 'unittest4.c.gcov'

File 'unittest4.c'
Lines executed:94.34% of 53
Branches executed:100.00% of 24
Taken at least once:75.00% of 24
Calls executed:83.33% of 18
Creating 'unittest4.c.gcov'

-------------------ADVENTURE CARD TEST ---------------------
TESTING TOP CARD OF HAND
Current top card: 5
Current new top card: -1
Test Failed: Card Drawn is not top card.
File 'cardtest1.c'
Lines executed:72.09% of 43
Creating 'cardtest1.c.gcov'

File 'cardtest1.c'
Lines executed:72.09% of 43
Branches executed:57.14% of 14
Taken at least once:28.57% of 14
Calls executed:66.67% of 12
Creating 'cardtest1.c.gcov'

-------------------SMITHY CARD TEST---------------------
Drawing card: 1
Drawing card: 2
Drawing card: 3
Drawing card: 4
Test Failed: LoopCount = 4  |   Draw total should be: 3
File 'cardtest2.c'
Lines executed:95.45% of 22
Creating 'cardtest2.c.gcov'

File 'cardtest2.c'
Lines executed:95.45% of 22
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
Calls executed:85.71% of 7
Creating 'cardtest2.c.gcov'

-------------------COUNCIL ROOM CARD TEST---------------------
CHECKING CARD DRAW AMOUNT.
Drawing card: 1
Drawing card: 2
Drawing card: 3
Drawing card: 4
Drawing card: 5
Test Failed: LoopCount = 5  |   Draw total should be: 4
CHECK BUY AMOUNT:
Number of buys before: 1
Number of buys after: 1
Test Failed: Buy amount did not increased by 1
CHECKING DISCARD.
Current player hand count: 5
Current player hand count: 4
Test Passed: Player discarded.
File 'cardtest3.c'
Lines executed:93.62% of 47
Creating 'cardtest3.c.gcov'

File 'cardtest3.c'
Lines executed:93.62% of 47
Branches executed:100.00% of 12
Taken at least once:75.00% of 12
Calls executed:84.21% of 19
Creating 'cardtest3.c.gcov'

-------------------MINION CARD TEST---------------------
CHECKING INCREASE IN ACTIONS.
Previous number of Actions 1
Increased number of Actions 1
Test failed: Number of actions did not increase by one.
CHECKING DISCARD.
Current player hand count: 4
Current player hand count: 3
Test Passed: Player discarded.
I TOTAL: 0
CHECKING COIN INCREASE
Current coin count 4.
New coin count 6.
Test Passed: Player coin increased by two.
I TOTAL: 1
CHECKING DISCARD.
Current player hand : 3
Test passed: Card count = 0.
CHECKING ADD 4 CARDS
Number of cards added: 0
Number of cards added: 1
Number of cards added: 2
Number of cards added: 3
Number of cards added: 4
Test failed: Incorrect number of cards added.
CHECKING OTHER PLAYERS ADDED CARDS
Number of cards added: 0
Number of cards added: 1
Number of cards added: 2
Number of cards added: 3
Number of cards added: 4
Test failed: Incorrect number of cards added.
File 'cardtest4.c'
Lines executed:92.86% of 84
Creating 'cardtest4.c.gcov'

File 'cardtest4.c'
Lines executed:92.86% of 84
Branches executed:100.00% of 34
Taken at least once:76.47% of 34
Calls executed:84.21% of 38
Creating 'cardtest4.c.gcov'

File 'dominion.c'
Lines executed:18.20% of 566
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
       30:   10:int compare(const void* a, const void* b) {
       30:   11:  if (*(int*)a > *(int*)b)
    #####:   12:    return 1;
       30:   13:  if (*(int*)a < *(int*)b)
        8:   14:    return -1;
       22:   15:  return 0;
        -:   16:}
        -:   17:
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
        1:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
        1:   46:  SelectStream(1);
        1:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
        1:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
        1:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
       11:   59:  for (i = 0; i < 10; i++)
        -:   60:    {
      110:   61:      for (j = 0; j < 10; j++)
        -:   62:        {
      100:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
        1:   75:  if (numPlayers == 2)
        -:   76:    {
        1:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
    #####:   79:  else if (numPlayers == 3)
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
        1:   89:  if (numPlayers == 2)
        -:   90:    {
        1:   91:      state->supplyCount[estate] = 8;
        1:   92:      state->supplyCount[duchy] = 8;
        1:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
    #####:   97:      state->supplyCount[estate] = 12;
    #####:   98:      state->supplyCount[duchy] = 12;
    #####:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
        1:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  104:  state->supplyCount[silver] = 40;
        1:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
       21:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  109:    {
      165:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  111:	{
      155:  112:	  if (kingdomCards[j] == i)
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
       10:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:		{
    #####:  117:		  if (numPlayers == 2){ 
    #####:  118:		    state->supplyCount[i] = 8; 
        -:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
       10:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
       10:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
      145:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
        3:  140:  for (i = 0; i < numPlayers; i++)
        -:  141:    {
        2:  142:      state->deckCount[i] = 0;
        8:  143:      for (j = 0; j < 3; j++)
        -:  144:	{
        6:  145:	  state->deck[i][j] = estate;
        6:  146:	  state->deckCount[i]++;
        -:  147:	}
       16:  148:      for (j = 3; j < 10; j++)
        -:  149:	{
       14:  150:	  state->deck[i][j] = copper;
       14:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
        3:  156:  for (i = 0; i < numPlayers; i++)
        -:  157:    {
        2:  158:      if ( shuffle(i, state) < 0 )
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
        3:  165:  for (i = 0; i < numPlayers; i++)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
        2:  168:      state->handCount[i] = 0;
        2:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
       28:  178:  for (i = 0; i <= treasure_map; i++)
        -:  179:    {
       27:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
        1:  184:  state->outpostPlayed = 0;
        1:  185:  state->phase = 0;
        1:  186:  state->numActions = 1;
        1:  187:  state->numBuys = 1;
        1:  188:  state->playedCardCount = 0;
        1:  189:  state->whoseTurn = 0;
        1:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
        6:  194:  for (it = 0; it < 5; it++){
        5:  195:    drawCard(state->whoseTurn, state);
        -:  196:  }
        -:  197:
        1:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
        1:  200:  return 0;
        -:  201:}
        -:  202:
        2:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
        2:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
        2:  211:  if (state->deckCount[player] < 1)
    #####:  212:    return -1;
        2:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
       24:  216:  while (state->deckCount[player] > 0) {
       20:  217:    card = floor(Random() * state->deckCount[player]);
       20:  218:    newDeck[newDeckPos] = state->deck[player][card];
       20:  219:    newDeckPos++;
       72:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
       52:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
       20:  223:    state->deckCount[player]--;
        -:  224:  }
       22:  225:  for (i = 0; i < newDeckPos; i++) {
       20:  226:    state->deck[player][i] = newDeck[i];
       20:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
        2:  230:  return 0;
        -:  231:}
        -:  232:
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
        -:  272:}
        -:  273:
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
      510:  313:int numHandCards(struct gameState *state) {
      510:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
    #####:  322:int supplyCount(int card, struct gameState *state) {
    #####:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
        -:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
        -:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
      510:  348:int whoseTurn(struct gameState *state) {
      510:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
    #####:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
    #####:  397:  if (state->supplyCount[province] == 0)
        -:  398:    {
    #####:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
    #####:  403:  j = 0;
    #####:  404:  for (i = 0; i < 25; i++)
        -:  405:    {
    #####:  406:      if (state->supplyCount[i] == 0)
        -:  407:	{
    #####:  408:	  j++;
        -:  409:	}
        -:  410:    }
    #####:  411:  if ( j >= 3)
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
    #####:  416:  return 0;
        -:  417:}
        -:  418:
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
    #####:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
        -:  470:	{
    #####:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
        -:  515:	{
    #####:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
       19:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
       19:  530:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
    #####:  535:    for (i = 0; i < state->discardCount[player];i++){
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
    #####:  540:    state->deckCount[player] = state->discardCount[player];
    #####:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
    #####:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
    #####:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
    #####:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
    #####:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
    #####:  561:    if (deckCounter == 0)
    #####:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
       19:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
       19:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
       19:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       19:  578:    state->deckCount[player]--;
       19:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
       19:  582:  return 0;
        -:  583:}
        -:  584:
    #####:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
    #####:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
        -:  646:}
        -:  647:
    #####:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int k;
        -:  653:  int x;
        -:  654:  int index;
    #####:  655:  int currentPlayer = whoseTurn(state);
    #####:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:
    #####:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
    #####:  660:  int drawntreasure=0;
        -:  661:  int cardDrawn;
    #####:  662:  int z = 0;// this is the counter for the temp hand
    #####:  663:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  664:    nextPlayer = 0;
        -:  665:  }
        -:  666:  
        -:  667:	
        -:  668:  //uses switch to select card and perform actions
    #####:  669:  switch( card ) 
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:		return adventureCard(handPos, currentPlayer, state);
        -:  673:		
        -:  674:			
        -:  675:    case council_room:
    #####:  676:		return councilRoomCard(handPos, currentPlayer, state);
        -:  677: 		
        -:  678:   	
        -:  679:    case feast:
        -:  680:      //gain card with cost up to 5
        -:  681:      //Backup hand
    #####:  682:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  683:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  684:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  685:      }
        -:  686:      //Backup hand
        -:  687:
        -:  688:      //Update Coins for Buy
    #####:  689:      updateCoins(currentPlayer, state, 5);
    #####:  690:      x = 1;//Condition to loop on
    #####:  691:      while( x == 1) {//Buy one card
    #####:  692:	if (supplyCount(choice1, state) <= 0){
        -:  693:	  if (DEBUG)
        -:  694:	    printf("None of that card left, sorry!\n");
        -:  695:
        -:  696:	  if (DEBUG){
        -:  697:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  698:	  }
        -:  699:	}
    #####:  700:	else if (state->coins < getCost(choice1)){
    #####:  701:	  printf("That card is too expensive!\n");
        -:  702:
        -:  703:	  if (DEBUG){
        -:  704:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  705:	  }
        -:  706:	}
        -:  707:	else{
        -:  708:
        -:  709:	  if (DEBUG){
        -:  710:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  711:	  }
        -:  712:
    #####:  713:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  714:	  x = 0;//No more buying cards
        -:  715:
        -:  716:	  if (DEBUG){
        -:  717:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  718:	  }
        -:  719:
        -:  720:	}
        -:  721:      }     
        -:  722:
        -:  723:      //Reset Hand
    #####:  724:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  725:	state->hand[currentPlayer][i] = temphand[i];
    #####:  726:	temphand[i] = -1;
        -:  727:      }
        -:  728:      //Reset Hand
        -:  729:      			
    #####:  730:      return 0;
        -:  731:			
        -:  732:    case gardens:
    #####:  733:      return -1;
        -:  734:			
        -:  735:    case mine:
    #####:  736:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  737:
    #####:  738:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  739:	{
    #####:  740:	  return -1;
        -:  741:	}
        -:  742:		
    #####:  743:      if (choice2 > treasure_map || choice2 < curse)
        -:  744:	{
    #####:  745:	  return -1;
        -:  746:	}
        -:  747:
    #####:  748:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  749:	{
    #####:  750:	  return -1;
        -:  751:	}
        -:  752:
    #####:  753:      gainCard(choice2, state, 2, currentPlayer);
        -:  754:
        -:  755:      //discard card from hand
    #####:  756:      discardCard(handPos, currentPlayer, state, 0);
        -:  757:
        -:  758:      //discard trashed card
    #####:  759:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  760:	{
    #####:  761:	  if (state->hand[currentPlayer][i] == j)
        -:  762:	    {
    #####:  763:	      discardCard(i, currentPlayer, state, 0);			
    #####:  764:	      break;
        -:  765:	    }
        -:  766:	}
        -:  767:			
    #####:  768:      return 0;
        -:  769:			
        -:  770:    case remodel:
    #####:  771:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  772:
    #####:  773:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  774:	{
    #####:  775:	  return -1;
        -:  776:	}
        -:  777:
    #####:  778:      gainCard(choice2, state, 0, currentPlayer);
        -:  779:
        -:  780:      //discard card from hand
    #####:  781:      discardCard(handPos, currentPlayer, state, 0);
        -:  782:
        -:  783:      //discard trashed card
    #####:  784:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  785:	{
    #####:  786:	  if (state->hand[currentPlayer][i] == j)
        -:  787:	    {
    #####:  788:	      discardCard(i, currentPlayer, state, 0);			
    #####:  789:	      break;
        -:  790:	    }
        -:  791:	}
        -:  792:
        -:  793:
    #####:  794:      return 0;
        -:  795:		
        -:  796:    case smithy:
    #####:  797:      smithyCard(handPos, currentPlayer, state);
    #####:  798:	  return 0;
        -:  799:		
        -:  800:    case village:
        -:  801:      //+1 Card
    #####:  802:      drawCard(currentPlayer, state);
        -:  803:			
        -:  804:      //+2 Actions
    #####:  805:      state->numActions = state->numActions + 2;
        -:  806:			
        -:  807:      //discard played card from hand
    #####:  808:      discardCard(handPos, currentPlayer, state, 0);
    #####:  809:      return 0;
        -:  810:		
        -:  811:    case baron:
    #####:  812:      state->numBuys++;//Increase buys by 1!
    #####:  813:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  814:	int p = 0;//Iterator for hand!
    #####:  815:	int card_not_discarded = 1;//Flag for discard set!
    #####:  816:	while(card_not_discarded){
    #####:  817:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  818:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  819:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  820:	    state->discardCount[currentPlayer]++;
    #####:  821:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  822:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  823:	    }
    #####:  824:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  825:	    state->handCount[currentPlayer]--;
    #####:  826:	    card_not_discarded = 0;//Exit the loop
        -:  827:	  }
    #####:  828:	  else if (p > state->handCount[currentPlayer]){
        -:  829:	    if(DEBUG) {
        -:  830:	      printf("No estate cards in your hand, invalid choice\n");
        -:  831:	      printf("Must gain an estate if there are any\n");
        -:  832:	    }
    #####:  833:	    if (supplyCount(estate, state) > 0){
    #####:  834:	      gainCard(estate, state, 0, currentPlayer);
    #####:  835:	      state->supplyCount[estate]--;//Decrement estates
    #####:  836:	      if (supplyCount(estate, state) == 0){
    #####:  837:		isGameOver(state);
        -:  838:	      }
        -:  839:	    }
    #####:  840:	    card_not_discarded = 0;//Exit the loop
        -:  841:	  }
        -:  842:			    
        -:  843:	  else{
    #####:  844:	    p++;//Next card
        -:  845:	  }
        -:  846:	}
        -:  847:      }
        -:  848:			    
        -:  849:      else{
    #####:  850:	if (supplyCount(estate, state) > 0){
    #####:  851:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  852:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  853:	  if (supplyCount(estate, state) == 0){
    #####:  854:	    isGameOver(state);
        -:  855:	  }
        -:  856:	}
        -:  857:      }
        -:  858:	    
        -:  859:      
    #####:  860:      return 0;
        -:  861:		
        -:  862:    case great_hall:
    #####:  863:      return greatHallCard(handPos, currentPlayer, state);
        -:  864:	  
        -:  865:		
        -:  866:    case minion:
    #####:  867:     return  minionCard(handPos, currentPlayer, state);
        -:  868:	  
        -:  869:	  
        -:  870:		
        -:  871:    case steward:
    #####:  872:      if (choice1 == 1)
        -:  873:	{
        -:  874:	  //+2 cards
    #####:  875:	  drawCard(currentPlayer, state);
    #####:  876:	  drawCard(currentPlayer, state);
        -:  877:	}
    #####:  878:      else if (choice1 == 2)
        -:  879:	{
        -:  880:	  //+2 coins
    #####:  881:	  state->coins = state->coins + 2;
        -:  882:	}
        -:  883:      else
        -:  884:	{
        -:  885:	  //trash 2 cards in hand
    #####:  886:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  887:	  discardCard(choice3, currentPlayer, state, 1);
        -:  888:	}
        -:  889:			
        -:  890:      //discard card from hand
    #####:  891:      discardCard(handPos, currentPlayer, state, 0);
    #####:  892:      return 0;
        -:  893:		
        -:  894:    case tribute:
    #####:  895:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  896:	if (state->deckCount[nextPlayer] > 0){
    #####:  897:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  898:	  state->deckCount[nextPlayer]--;
        -:  899:	}
    #####:  900:	else if (state->discardCount[nextPlayer] > 0){
    #####:  901:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  902:	  state->discardCount[nextPlayer]--;
        -:  903:	}
        -:  904:	else{
        -:  905:	  //No Card to Reveal
        -:  906:	  if (DEBUG){
        -:  907:	    printf("No cards to reveal\n");
        -:  908:	  }
        -:  909:	}
        -:  910:      }
        -:  911:	    
        -:  912:      else{
    #####:  913:	if (state->deckCount[nextPlayer] == 0){
    #####:  914:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  915:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  916:	    state->deckCount[nextPlayer]++;
    #####:  917:	    state->discard[nextPlayer][i] = -1;
    #####:  918:	    state->discardCount[nextPlayer]--;
        -:  919:	  }
        -:  920:			    
    #####:  921:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  922:	} 
    #####:  923:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  924:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  925:	state->deckCount[nextPlayer]--;
    #####:  926:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  927:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  928:	state->deckCount[nextPlayer]--;
        -:  929:      }    
        -:  930:		       
    #####:  931:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  932:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  933:	state->playedCardCount++;
    #####:  934:	tributeRevealedCards[1] = -1;
        -:  935:      }
        -:  936:
    #####:  937:      for (i = 0; i <= 2; i ++){
    #####:  938:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  939:	  state->coins += 2;
        -:  940:	}
        -:  941:		    
    #####:  942:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  943:	  drawCard(currentPlayer, state);
    #####:  944:	  drawCard(currentPlayer, state);
        -:  945:	}
        -:  946:	else{//Action Card
    #####:  947:	  state->numActions = state->numActions + 2;
        -:  948:	}
        -:  949:      }
        -:  950:	    
    #####:  951:      return 0;
        -:  952:		
        -:  953:    case ambassador:
    #####:  954:      j = 0;		//used to check if player has enough cards to discard
        -:  955:
    #####:  956:      if (choice2 > 2 || choice2 < 0)
        -:  957:	{
    #####:  958:	  return -1;				
        -:  959:	}
        -:  960:
    #####:  961:      if (choice1 == handPos)
        -:  962:	{
    #####:  963:	  return -1;
        -:  964:	}
        -:  965:
    #####:  966:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  967:	{
    #####:  968:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  969:	    {
    #####:  970:	      j++;
        -:  971:	    }
        -:  972:	}
    #####:  973:      if (j < choice2)
        -:  974:	{
    #####:  975:	  return -1;				
        -:  976:	}
        -:  977:
        -:  978:      if (DEBUG) 
        -:  979:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  980:
        -:  981:      //increase supply count for choosen card by amount being discarded
    #####:  982:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  983:			
        -:  984:      //each other player gains a copy of revealed card
    #####:  985:      for (i = 0; i < state->numPlayers; i++)
        -:  986:	{
    #####:  987:	  if (i != currentPlayer)
        -:  988:	    {
    #####:  989:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  990:	    }
        -:  991:	}
        -:  992:
        -:  993:      //discard played card from hand
    #####:  994:      discardCard(handPos, currentPlayer, state, 0);			
        -:  995:
        -:  996:      //trash copies of cards returned to supply
    #####:  997:      for (j = 0; j < choice2; j++)
        -:  998:	{
    #####:  999:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1000:	    {
    #####: 1001:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1002:		{
    #####: 1003:		  discardCard(i, currentPlayer, state, 1);
    #####: 1004:		  break;
        -: 1005:		}
        -: 1006:	    }
        -: 1007:	}			
        -: 1008:
    #####: 1009:      return 0;
        -: 1010:		
        -: 1011:    case cutpurse:
        -: 1012:
    #####: 1013:      updateCoins(currentPlayer, state, 2);
    #####: 1014:      for (i = 0; i < state->numPlayers; i++)
        -: 1015:	{
    #####: 1016:	  if (i != currentPlayer)
        -: 1017:	    {
    #####: 1018:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1019:		{
    #####: 1020:		  if (state->hand[i][j] == copper)
        -: 1021:		    {
    #####: 1022:		      discardCard(j, i, state, 0);
    #####: 1023:		      break;
        -: 1024:		    }
    #####: 1025:		  if (j == state->handCount[i])
        -: 1026:		    {
    #####: 1027:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1028:			{
        -: 1029:			  if (DEBUG)
        -: 1030:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1031:			}	
    #####: 1032:		      break;
        -: 1033:		    }		
        -: 1034:		}
        -: 1035:					
        -: 1036:	    }
        -: 1037:				
        -: 1038:	}				
        -: 1039:
        -: 1040:      //discard played card from hand
    #####: 1041:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1042:
    #####: 1043:      return 0;
        -: 1044:
        -: 1045:		
        -: 1046:    case embargo: 
        -: 1047:      //+2 Coins
    #####: 1048:      state->coins = state->coins + 2;
        -: 1049:			
        -: 1050:      //see if selected pile is in play
    #####: 1051:      if ( state->supplyCount[choice1] == -1 )
        -: 1052:	{
    #####: 1053:	  return -1;
        -: 1054:	}
        -: 1055:			
        -: 1056:      //add embargo token to selected supply pile
    #####: 1057:      state->embargoTokens[choice1]++;
        -: 1058:			
        -: 1059:      //trash card
    #####: 1060:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1061:      return 0;
        -: 1062:		
        -: 1063:    case outpost:
        -: 1064:      //set outpost flag
    #####: 1065:      state->outpostPlayed++;
        -: 1066:			
        -: 1067:      //discard card
    #####: 1068:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1069:      return 0;
        -: 1070:		
        -: 1071:    case salvager:
        -: 1072:      //+1 buy
    #####: 1073:      state->numBuys++;
        -: 1074:			
    #####: 1075:      if (choice1)
        -: 1076:	{
        -: 1077:	  //gain coins equal to trashed card
    #####: 1078:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1079:	  //trash card
    #####: 1080:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1081:	}
        -: 1082:			
        -: 1083:      //discard card
    #####: 1084:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1085:      return 0;
        -: 1086:		
        -: 1087:    case sea_hag:
    #####: 1088:      for (i = 0; i < state->numPlayers; i++){
    #####: 1089:	if (i != currentPlayer){
    #####: 1090:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1091:	  state->discardCount[i]++;
    #####: 1092:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1093:	}
        -: 1094:      }
    #####: 1095:      return 0;
        -: 1096:		
        -: 1097:    case treasure_map:
        -: 1098:      //search hand for another treasure_map
    #####: 1099:      index = -1;
    #####: 1100:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1101:	{
    #####: 1102:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1103:	    {
    #####: 1104:	      index = i;
    #####: 1105:	      break;
        -: 1106:	    }
        -: 1107:	}
    #####: 1108:      if (index > -1)
        -: 1109:	{
        -: 1110:	  //trash both treasure cards
    #####: 1111:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1112:	  discardCard(index, currentPlayer, state, 1);
        -: 1113:
        -: 1114:	  //gain 4 Gold cards
    #####: 1115:	  for (i = 0; i < 4; i++)
        -: 1116:	    {
    #####: 1117:	      gainCard(gold, state, 1, currentPlayer);
        -: 1118:	    }
        -: 1119:				
        -: 1120:	  //return success
    #####: 1121:	  return 1;
        -: 1122:	}
        -: 1123:			
        -: 1124:      //no second treasure_map found in hand
    #####: 1125:      return -1;
        -: 1126:    }
        -: 1127:	
    #####: 1128:  return -1;
        -: 1129:}
        -: 1130:
      514: 1131:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1132:{
        -: 1133:	
        -: 1134:  //if card is not trashed, added to Played pile 
      514: 1135:  if (trashFlag < 1)
        -: 1136:    {
        -: 1137:      //add card to played pile
      514: 1138:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      514: 1139:      state->playedCardCount++;
        -: 1140:    }
        -: 1141:	
        -: 1142:  //set played card to -1
      514: 1143:  state->hand[currentPlayer][handPos] = -1;
        -: 1144:	
        -: 1145:  //remove card from player's hand
      514: 1146:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1147:    {
        -: 1148:      //reduce number of cards in hand
        2: 1149:      state->handCount[currentPlayer]--;
        -: 1150:    }
      512: 1151:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1152:    {
        -: 1153:      //reduce number of cards in hand
    #####: 1154:      state->handCount[currentPlayer]--;
        -: 1155:    }
        -: 1156:  else 	
        -: 1157:    {
        -: 1158:      //replace discarded card with last card in hand
      512: 1159:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1160:      //set last card to -1
      512: 1161:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1162:      //reduce number of cards in hand
      512: 1163:      state->handCount[currentPlayer]--;
        -: 1164:    }
        -: 1165:	
      514: 1166:  return 0;
        -: 1167:}
        -: 1168:
    #####: 1169:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1170:{
        -: 1171:  //Note: supplyPos is enum of choosen card
        -: 1172:	
        -: 1173:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1174:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1175:    {
    #####: 1176:      return -1;
        -: 1177:    }
        -: 1178:	
        -: 1179:  //added card for [whoseTurn] current player:
        -: 1180:  // toFlag = 0 : add to discard
        -: 1181:  // toFlag = 1 : add to deck
        -: 1182:  // toFlag = 2 : add to hand
        -: 1183:
    #####: 1184:  if (toFlag == 1)
        -: 1185:    {
    #####: 1186:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1187:      state->deckCount[player]++;
        -: 1188:    }
    #####: 1189:  else if (toFlag == 2)
        -: 1190:    {
    #####: 1191:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1192:      state->handCount[player]++;
        -: 1193:    }
        -: 1194:  else
        -: 1195:    {
    #####: 1196:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1197:      state->discardCount[player]++;
        -: 1198:    }
        -: 1199:	
        -: 1200:  //decrease number in supply pile
    #####: 1201:  state->supplyCount[supplyPos]--;
        -: 1202:	 
    #####: 1203:  return 0;
        -: 1204:}
        -: 1205:
        1: 1206:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1207:{
        -: 1208:  int i;
        -: 1209:	
        -: 1210:  //reset coin count
        1: 1211:  state->coins = 0;
        -: 1212:
        -: 1213:  //add coins for each Treasure card in player's hand
        6: 1214:  for (i = 0; i < state->handCount[player]; i++)
        -: 1215:    {
        5: 1216:      if (state->hand[player][i] == copper)
        -: 1217:	{
        4: 1218:	  state->coins += 1;
        -: 1219:	}
        1: 1220:      else if (state->hand[player][i] == silver)
        -: 1221:	{
    #####: 1222:	  state->coins += 2;
        -: 1223:	}
        1: 1224:      else if (state->hand[player][i] == gold)
        -: 1225:	{
    #####: 1226:	  state->coins += 3;
        -: 1227:	}	
        -: 1228:    }	
        -: 1229:
        -: 1230:  //add bonus
        1: 1231:  state->coins += bonus;
        -: 1232:
        1: 1233:  return 0;
        -: 1234:}
        -: 1235:
    #####: 1236:int smithyCard(int handPos, int currentPlayer, struct gameState *state)
        -: 1237:{
    #####: 1238:	int i = 0;
        -: 1239:      //+3 Cards
    #####: 1240:      for (i = 0; i <= 3; i++) //Use i <= 3
        -: 1241:	{
    #####: 1242:	  drawCard(currentPlayer, state);
        -: 1243:	}
        -: 1244:			
        -: 1245:      //discard card from hand
    #####: 1246:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1247:      return 0;
        -: 1248:		
        -: 1249:}
        -: 1250:
    #####: 1251:int adventureCard(int handPos, int currentPlayer, struct gameState *state)
        -: 1252:{
    #####: 1253:    int cardDrawn = 0;
        -: 1254:	int temphand[MAX_HAND];
    #####: 1255:	int drawntreasure = 0;
    #####: 1256:	int z = 0;
        -: 1257:	
    #####: 1258:	while(drawntreasure<2){
    #####: 1259:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1260:	  shuffle(currentPlayer, state);
        -: 1261:	}
    #####: 1262:	drawCard(currentPlayer, state);
    #####: 1263:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]]-1;//top card of hand is most recently drawn card.
        -: 1264:
        -: 1265:	
    #####: 1266:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1267:	  drawntreasure++;
        -: 1268:	else{
    #####: 1269:	  temphand[z]=cardDrawn;
    #####: 1270:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1271:	  z++;
        -: 1272:	}
        -: 1273:      }
    #####: 1274:      while(z-1>=0){
    #####: 1275:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1276:	z=z-1;
        -: 1277:      }
    #####: 1278:      return 0;
        -: 1279:}
        -: 1280:
    #####: 1281:int greatHallCard(int handPos, int currentPlayer, struct gameState *state)
        -: 1282:{
        -: 1283:	 //+1 Card
    #####: 1284:	  drawCard(currentPlayer, state);
        -: 1285:	
    #####: 1286:      state->numActions+=2;
        -: 1287:			
        -: 1288:      //discard card from hand
    #####: 1289:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1290:	  return 0;
        -: 1291:}
    #####: 1292:int councilRoomCard(int handPos, int currentPlayer, struct gameState *state)
        -: 1293:{
    #####: 1294:	int i = 0;
        -: 1295:	     //+4 Cards
    #####: 1296:      for (i = 0; i <= 4; i++)
        -: 1297:	{
    #####: 1298:	  drawCard(currentPlayer, state);
        -: 1299:	}
        -: 1300:			
        -: 1301:      //+1 Buy
    #####: 1302:      state->numActions++;
        -: 1303:			
        -: 1304:      //Each other player draws a card
    #####: 1305:      for (i = 0; i < state->numPlayers; i++)
        -: 1306:	{
    #####: 1307:	  if ( i != currentPlayer )
        -: 1308:	    {
    #####: 1309:	      drawCard(i, state);
        -: 1310:	    }
        -: 1311:	}
        -: 1312:			
        -: 1313:      //put played card in played card pile
    #####: 1314:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1315:	  return 0;
        -: 1316:}
        -: 1317:
    #####: 1318:minionCard(int choice1, int choice2, int choice3, int handPos, int currentPlayer, struct gameState *state)
        -: 1319:{
        -: 1320://+1 action
    #####: 1321:	 int i = 0;
    #####: 1322:	 int j = 0;
    #####: 1323:	 state->numBuys++;
        -: 1324:			
        -: 1325:      //discard card from hand
    #####: 1326:      discardCard(handPos, currentPlayer, state, 0);
        -: 1327:			
    #####: 1328:      if (choice1)		//+2 coins
        -: 1329:	{
    #####: 1330:	  state->coins = state->coins + 2;
        -: 1331:	}
        -: 1332:			
    #####: 1333:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1334:	{
        -: 1335:	  //discard hand
    #####: 1336:	  while(numHandCards(state) > 0)
        -: 1337:	    {
    #####: 1338:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1339:	    }
        -: 1340:				
        -: 1341:	  //draw 4
    #####: 1342:	  for (i = 0; i <= 4; i++)
        -: 1343:	    {
    #####: 1344:	      drawCard(currentPlayer, state);
        -: 1345:	    }
        -: 1346:				
        -: 1347:	  //other players discard hand and redraw if hand size > 4
    #####: 1348:	  for (i = 0; i < state->numPlayers; i++)
        -: 1349:	    {
    #####: 1350:	      if (i != currentPlayer)
        -: 1351:		{
    #####: 1352:		  if ( state->handCount[i] > 4 )
        -: 1353:		    {
        -: 1354:		      //discard hand
    #####: 1355:		      while( state->handCount[i] > 0 )
        -: 1356:			{
    #####: 1357:			  discardCard(handPos, i, state, 0);
        -: 1358:			}
        -: 1359:							
        -: 1360:		      //draw 4
    #####: 1361:		      for (j = 0; j <= 4; j++)
        -: 1362:			{
    #####: 1363:			  drawCard(i, state);
        -: 1364:			}
        -: 1365:		    }
        -: 1366:		}
        -: 1367:	    }
        -: 1368:				
        -: 1369:	}
    #####: 1370:     return 0;
        -: 1371:}
        -: 1372://end of dominion.c
        -: 1373:
