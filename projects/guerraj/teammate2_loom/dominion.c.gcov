        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:11
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 31769 returned 100% blocks executed 100%
    31769:    8:int compare(const void* a, const void* b) {
    31769:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      143:   10:    return 1;
    31626:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
    11353:   12:    return -1;
    20273:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1012 returned 100% blocks executed 97%
     1012:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     1012:   44:  SelectStream(1);
call    0 returned 100%
     1012:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     1012:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 26% (fallthrough)
branch  3 taken 74%
        -:   49:    {
      261:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      751:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     8261:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
    82610:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
    75100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      751:   73:  if (numPlayers == 2)
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        -:   74:    {
      260:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      491:   77:  else if (numPlayers == 3)
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
        -:   78:    {
      252:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      239:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      751:   87:  if (numPlayers == 2)
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        -:   88:    {
      260:   89:      state->supplyCount[estate] = 8;
      260:   90:      state->supplyCount[duchy] = 8;
      260:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      491:   95:      state->supplyCount[estate] = 12;
      491:   96:      state->supplyCount[duchy] = 12;
      491:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      751:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      751:  102:  state->supplyCount[silver] = 40;
      751:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    15771:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   123915:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   116405:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     7510:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
     3002:  115:		  if (numPlayers == 2){ 
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
      519:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      982:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     6009:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     7510:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   108895:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     2983:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:    {
     2232:  140:      state->deckCount[i] = 0;
     8928:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
     6696:  143:	  state->deck[i][j] = estate;
     6696:  144:	  state->deckCount[i]++;
        -:  145:	}
    17856:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    15624:  148:	  state->deck[i][j] = copper;
    15624:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     2983:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  155:    {
     2232:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     2983:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     2232:  166:      state->handCount[i] = 0;
     2232:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    21028:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
    20277:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      751:  182:  state->outpostPlayed = 0;
      751:  183:  state->phase = 0;
      751:  184:  state->numActions = 1;
      751:  185:  state->numBuys = 1;
      751:  186:  state->playedCardCount = 0;
      751:  187:  state->whoseTurn = 0;
      751:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     4506:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     3755:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
      751:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
      751:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 3387 returned 100% blocks executed 100%
     3387:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     3387:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     3387:  209:  if (state->deckCount[player] < 1)
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
     1141:  210:    return -1;
     2246:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    27033:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    22541:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    22541:  216:    newDeck[newDeckPos] = state->deck[player][card];
    22541:  217:    newDeckPos++;
    75886:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
    53345:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    22541:  221:    state->deckCount[player]--;
        -:  222:  }
    24787:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    22541:  224:    state->deck[player][i] = newDeck[i];
    22541:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     2246:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 30 returned 100% blocks executed 80%
       30:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       30:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       30:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       30:  243:  if ( state->numActions < 1 )
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -:  244:    {
       24:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
        6:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
        6:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        6:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        6:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        6:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
        6:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 80 returned 100% blocks executed 100%
       80:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       80:  280:  who = state->whoseTurn;
        -:  281:
       80:  282:  if (state->numBuys < 1){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
       79:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 3% (fallthrough)
branch  2 taken 97%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        2:  289:    return -1;
       77:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  293:    return -1;
        -:  294:  } else {
       76:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       76:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  298:  
       76:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
       76:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       76:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 282 returned 100% blocks executed 100%
      282:  311:int numHandCards(struct gameState *state) {
      282:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 556 returned 100% blocks executed 100%
      556:  315:int handCard(int handPos, struct gameState *state) {
      556:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
      556:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 187 returned 100% blocks executed 100%
      187:  320:int supplyCount(int card, struct gameState *state) {
      187:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 2968 returned 100% blocks executed 100%
     2968:  346:int whoseTurn(struct gameState *state) {
     2968:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 40 returned 100% blocks executed 100%
       40:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       40:  353:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  354:  
        -:  355:  //Discard hand
      246:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
      206:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      206:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
       40:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       40:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
       20:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
       20:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       40:  370:  state->outpostPlayed = 0;
       40:  371:  state->phase = 0;
       40:  372:  state->numActions = 1;
       40:  373:  state->coins = 0;
       40:  374:  state->numBuys = 1;
       40:  375:  state->playedCardCount = 0;
       40:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      240:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      200:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  382:  }
        -:  383:
        -:  384:  //Update money
       40:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  386:
       40:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 50 returned 100% blocks executed 100%
       50:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       50:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  396:    {
        3:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       47:  401:  j = 0;
     1222:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
     1175:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  405:	{
        7:  406:	  j++;
        -:  407:	}
        -:  408:    }
       47:  409:  if ( j >= 3)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
       46:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 2 returned 100% blocks executed 68%
        2:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
        2:  420:  int score = 0;
        -:  421:  //score from hand
        7:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  423:    {
        5:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        5:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       32:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  434:    {
       30:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       30:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
       30:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       30:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
       30:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       30:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       32:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  445:    {
       30:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       30:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
       30:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       30:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
       30:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       30:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  452:    }
        -:  453:
        2:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 9476 returned 100% blocks executed 100%
     9476:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     9476:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     1375:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 16%
branch  1 taken 84% (fallthrough)
      221:  534:      state->deck[player][i] = state->discard[player][i];
      221:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     1154:  538:    state->deckCount[player] = state->discardCount[player];
     1154:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     1154:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     1154:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     1154:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     1154:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     1154:  559:    if (deckCounter == 0)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     1140:  560:      return -1;
        -:  561:
       14:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       14:  563:    state->deckCount[player]--;
       14:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     8322:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     8322:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     8322:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     8322:  576:    state->deckCount[player]--;
     8322:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     8336:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 153 returned 100% blocks executed 100%
      153:  583:int getCost(int cardNumber)
        -:  584:{
      153:  585:  switch( cardNumber ) 
branch  0 taken 1%
branch  1 taken 1%
branch  2 taken 1%
branch  3 taken 12%
branch  4 taken 1%
branch  5 taken 18%
branch  6 taken 21%
branch  7 taken 4%
branch  8 taken 1%
branch  9 taken 1%
branch 10 taken 1%
branch 11 taken 1%
branch 12 taken 1%
branch 13 taken 4%
branch 14 taken 11%
branch 15 taken 1%
branch 16 taken 1%
branch 17 taken 1%
branch 18 taken 1%
branch 19 taken 1%
branch 20 taken 1%
branch 21 taken 1%
branch 22 taken 1%
branch 23 taken 1%
branch 24 taken 1%
branch 25 taken 1%
branch 26 taken 1%
branch 27 taken 3%
        -:  586:    {
        -:  587:    case curse:
        2:  588:      return 0;
        -:  589:    case estate:
        2:  590:      return 2;
        -:  591:    case duchy:
        2:  592:      return 5;
        -:  593:    case province:
       18:  594:      return 8;
        -:  595:    case copper:
        2:  596:      return 0;
        -:  597:    case silver:
       28:  598:      return 3;
        -:  599:    case gold:
       32:  600:      return 6;
        -:  601:    case adventurer:
        6:  602:      return 6;
        -:  603:    case council_room:
        2:  604:      return 5;
        -:  605:    case feast:
        2:  606:      return 4;
        -:  607:    case gardens:
        2:  608:      return 4;
        -:  609:    case mine:
        2:  610:      return 5;
        -:  611:    case remodel:
        2:  612:      return 4;
        -:  613:    case smithy:
        6:  614:      return 4;
        -:  615:    case village:
       17:  616:      return 3;
        -:  617:    case baron:
        2:  618:      return 4;
        -:  619:    case great_hall:
        2:  620:      return 3;
        -:  621:    case minion:
        2:  622:      return 5;
        -:  623:    case steward:
        2:  624:      return 3;
        -:  625:    case tribute:
        2:  626:      return 5;
        -:  627:    case ambassador:
        2:  628:      return 3;
        -:  629:    case cutpurse:
        2:  630:      return 4;
        -:  631:    case embargo: 
        2:  632:      return 2;
        -:  633:    case outpost:
        2:  634:      return 5;
        -:  635:    case salvager:
        2:  636:      return 4;
        -:  637:    case sea_hag:
        2:  638:      return 4;
        -:  639:    case treasure_map:
        2:  640:      return 4;
        -:  641:    }
        -:  642:	
        4:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 1025 returned 100% blocks executed 6%
     1025:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
     1025:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     1025:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
     1025:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
     1025:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
     1025:  660:  int z = 0;// this is the counter for the temp hand
     1025:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
      522:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
     1025:  667:  switch( card ) 
branch  0 taken 1%
branch  1 taken 98%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 1%
branch  7 taken 1%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:    {
        -:  669:    case adventurer:
        -:  670:
        9:  671:      playAdventurer(state);
call    0 returned 100%
        9:  672:      return 0;
        -:  673:			
        -:  674:    case council_room:
        -:  675:
     1004:  676:      playCouncil_Room(state, handPos);
call    0 returned 100%
     1004:  677:      return 0;
        -:  678:			
        -:  679:    case feast:
    #####:  680:      playFeast(state, handPos);
call    0 never executed
        -:  681:      			
    #####:  682:      return 0;
        -:  683:			
        -:  684:    case gardens:
    #####:  685:      return -1;
        -:  686:			
        -:  687:    case mine:
    #####:  688:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  689:
    #####:  690:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  691:	{
    #####:  692:	  return -1;
        -:  693:	}
        -:  694:		
    #####:  695:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  696:	{
    #####:  697:	  return -1;
        -:  698:	}
        -:  699:
    #####:  700:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  701:	{
    #####:  702:	  return -1;
        -:  703:	}
        -:  704:
    #####:  705:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  706:
        -:  707:      //discard card from hand
    #####:  708:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  709:
        -:  710:      //discard trashed card
    #####:  711:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  712:	{
    #####:  713:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  714:	    {
    #####:  715:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  716:	      break;
        -:  717:	    }
        -:  718:	}
        -:  719:			
    #####:  720:      return 0;
        -:  721:			
        -:  722:    case remodel:
    #####:  723:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  724:
    #####:  725:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  726:	{
    #####:  727:	  return -1;
        -:  728:	}
        -:  729:
    #####:  730:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  731:
        -:  732:      //discard card from hand
    #####:  733:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  734:
        -:  735:      //discard trashed card
    #####:  736:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  737:	{
    #####:  738:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  739:	    {
    #####:  740:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  741:	      break;
        -:  742:	    }
        -:  743:	}
        -:  744:
        -:  745:
    #####:  746:      return 0;
        -:  747:		
        -:  748:    case smithy:
        -:  749:      //+3 Cards
        7:  750:      playSmithy(state, handPos);
call    0 returned 100%
        7:  751:      return 0;
        -:  752:		
        -:  753:    case village:
        5:  754:      playVillage(state, handPos);
call    0 returned 100%
        5:  755:      return 0;
        -:  756:		
        -:  757:    case baron:
    #####:  758:      state->numBuys++;//Increase buys by 1!
    #####:  759:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  760:	int p = 0;//Iterator for hand!
    #####:  761:	int card_not_discarded = 1;//Flag for discard set!
    #####:  762:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  763:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  764:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  765:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  766:	    state->discardCount[currentPlayer]++;
    #####:  767:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  768:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  769:	    }
    #####:  770:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  771:	    state->handCount[currentPlayer]--;
    #####:  772:	    card_not_discarded = 0;//Exit the loop
        -:  773:	  }
    #####:  774:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  775:	    if(DEBUG) {
        -:  776:	      printf("No estate cards in your hand, invalid choice\n");
        -:  777:	      printf("Must gain an estate if there are any\n");
        -:  778:	    }
    #####:  779:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  780:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  781:	      state->supplyCount[estate]--;//Decrement estates
    #####:  782:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  783:		isGameOver(state);
call    0 never executed
        -:  784:	      }
        -:  785:	    }
    #####:  786:	    card_not_discarded = 0;//Exit the loop
        -:  787:	  }
        -:  788:			    
        -:  789:	  else{
    #####:  790:	    p++;//Next card
        -:  791:	  }
        -:  792:	}
        -:  793:      }
        -:  794:			    
        -:  795:      else{
    #####:  796:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  797:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  798:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  799:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  800:	    isGameOver(state);
call    0 never executed
        -:  801:	  }
        -:  802:	}
        -:  803:      }
        -:  804:	    
        -:  805:      
    #####:  806:      return 0;
        -:  807:		
        -:  808:    case great_hall:
        -:  809:      //+1 Card
    #####:  810:      drawCard(currentPlayer, state);
call    0 never executed
        -:  811:			
        -:  812:      //+1 Actions
    #####:  813:      state->numActions++;
        -:  814:			
        -:  815:      //discard card from hand
    #####:  816:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  817:      return 0;
        -:  818:		
        -:  819:    case minion:
        -:  820:      //+1 action
    #####:  821:      state->numActions++;
        -:  822:			
        -:  823:      //discard card from hand
    #####:  824:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  825:			
    #####:  826:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  827:	{
    #####:  828:	  state->coins = state->coins + 2;
        -:  829:	}
        -:  830:			
    #####:  831:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  832:	{
        -:  833:	  //discard hand
    #####:  834:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  835:	    {
    #####:  836:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  837:	    }
        -:  838:				
        -:  839:	  //draw 4
    #####:  840:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  841:	    {
    #####:  842:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  843:	    }
        -:  844:				
        -:  845:	  //other players discard hand and redraw if hand size > 4
    #####:  846:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  847:	    {
    #####:  848:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  849:		{
    #####:  850:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  851:		    {
        -:  852:		      //discard hand
    #####:  853:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  854:			{
    #####:  855:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  856:			}
        -:  857:							
        -:  858:		      //draw 4
    #####:  859:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  860:			{
    #####:  861:			  drawCard(i, state);
call    0 never executed
        -:  862:			}
        -:  863:		    }
        -:  864:		}
        -:  865:	    }
        -:  866:				
        -:  867:	}
    #####:  868:      return 0;
        -:  869:		
        -:  870:    case steward:
    #####:  871:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  872:	{
        -:  873:	  //+2 cards
    #####:  874:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  875:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  876:	}
    #####:  877:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  878:	{
        -:  879:	  //+2 coins
    #####:  880:	  state->coins = state->coins + 2;
        -:  881:	}
        -:  882:      else
        -:  883:	{
        -:  884:	  //trash 2 cards in hand
    #####:  885:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  886:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  887:	}
        -:  888:			
        -:  889:      //discard card from hand
    #####:  890:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  891:      return 0;
        -:  892:		
        -:  893:    case tribute:
    #####:  894:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  895:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  896:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  897:	  state->deckCount[nextPlayer]--;
        -:  898:	}
    #####:  899:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  900:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  901:	  state->discardCount[nextPlayer]--;
        -:  902:	}
        -:  903:	else{
        -:  904:	  //No Card to Reveal
        -:  905:	  if (DEBUG){
        -:  906:	    printf("No cards to reveal\n");
        -:  907:	  }
        -:  908:	}
        -:  909:      }
        -:  910:	    
        -:  911:      else{
    #####:  912:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  913:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  914:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  915:	    state->deckCount[nextPlayer]++;
    #####:  916:	    state->discard[nextPlayer][i] = -1;
    #####:  917:	    state->discardCount[nextPlayer]--;
        -:  918:	  }
        -:  919:			    
    #####:  920:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  921:	} 
    #####:  922:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  923:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  924:	state->deckCount[nextPlayer]--;
    #####:  925:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  926:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  927:	state->deckCount[nextPlayer]--;
        -:  928:      }    
        -:  929:		       
    #####:  930:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  931:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  932:	state->playedCardCount++;
    #####:  933:	tributeRevealedCards[1] = -1;
        -:  934:      }
        -:  935:
    #####:  936:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  937:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  938:	  state->coins += 2;
        -:  939:	}
        -:  940:		    
    #####:  941:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  942:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  943:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  944:	}
        -:  945:	else{//Action Card
    #####:  946:	  state->numActions = state->numActions + 2;
        -:  947:	}
        -:  948:      }
        -:  949:	    
    #####:  950:      return 0;
        -:  951:		
        -:  952:    case ambassador:
    #####:  953:      j = 0;		//used to check if player has enough cards to discard
        -:  954:
    #####:  955:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  956:	{
    #####:  957:	  return -1;				
        -:  958:	}
        -:  959:
    #####:  960:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  961:	{
    #####:  962:	  return -1;
        -:  963:	}
        -:  964:
    #####:  965:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  966:	{
    #####:  967:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  968:	    {
    #####:  969:	      j++;
        -:  970:	    }
        -:  971:	}
    #####:  972:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  973:	{
    #####:  974:	  return -1;				
        -:  975:	}
        -:  976:
        -:  977:      if (DEBUG) 
        -:  978:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  979:
        -:  980:      //increase supply count for choosen card by amount being discarded
    #####:  981:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  982:			
        -:  983:      //each other player gains a copy of revealed card
    #####:  984:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  985:	{
    #####:  986:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  987:	    {
    #####:  988:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  989:	    }
        -:  990:	}
        -:  991:
        -:  992:      //discard played card from hand
    #####:  993:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  994:
        -:  995:      //trash copies of cards returned to supply
    #####:  996:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  997:	{
    #####:  998:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  999:	    {
    #####: 1000:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1001:		{
    #####: 1002:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1003:		  break;
        -: 1004:		}
        -: 1005:	    }
        -: 1006:	}			
        -: 1007:
    #####: 1008:      return 0;
        -: 1009:		
        -: 1010:    case cutpurse:
        -: 1011:
    #####: 1012:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1013:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1014:	{
    #####: 1015:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1016:	    {
    #####: 1017:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1018:		{
    #####: 1019:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1020:		    {
    #####: 1021:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1022:		      break;
        -: 1023:		    }
    #####: 1024:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1025:		    {
    #####: 1026:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1027:			{
        -: 1028:			  if (DEBUG)
        -: 1029:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1030:			}	
    #####: 1031:		      break;
        -: 1032:		    }		
        -: 1033:		}
        -: 1034:					
        -: 1035:	    }
        -: 1036:				
        -: 1037:	}				
        -: 1038:
        -: 1039:      //discard played card from hand
    #####: 1040:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1041:
    #####: 1042:      return 0;
        -: 1043:
        -: 1044:		
        -: 1045:    case embargo: 
        -: 1046:      //+2 Coins
    #####: 1047:      state->coins = state->coins + 2;
        -: 1048:			
        -: 1049:      //see if selected pile is in play
    #####: 1050:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1051:	{
    #####: 1052:	  return -1;
        -: 1053:	}
        -: 1054:			
        -: 1055:      //add embargo token to selected supply pile
    #####: 1056:      state->embargoTokens[choice1]++;
        -: 1057:			
        -: 1058:      //trash card
    #####: 1059:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1060:      return 0;
        -: 1061:		
        -: 1062:    case outpost:
        -: 1063:      //set outpost flag
    #####: 1064:      state->outpostPlayed++;
        -: 1065:			
        -: 1066:      //discard card
    #####: 1067:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1068:      return 0;
        -: 1069:		
        -: 1070:    case salvager:
        -: 1071:      //+1 buy
    #####: 1072:      state->numBuys++;
        -: 1073:			
    #####: 1074:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1075:	{
        -: 1076:	  //gain coins equal to trashed card
    #####: 1077:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1078:	  //trash card
    #####: 1079:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1080:	}
        -: 1081:			
        -: 1082:      //discard card
    #####: 1083:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1084:      return 0;
        -: 1085:		
        -: 1086:    case sea_hag:
    #####: 1087:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1088:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1089:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1090:	  state->discardCount[i]++;
    #####: 1091:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1092:	}
        -: 1093:      }
    #####: 1094:      return 0;
        -: 1095:		
        -: 1096:    case treasure_map:
        -: 1097:      //search hand for another treasure_map
    #####: 1098:      index = -1;
    #####: 1099:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1100:	{
    #####: 1101:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1102:	    {
    #####: 1103:	      index = i;
    #####: 1104:	      break;
        -: 1105:	    }
        -: 1106:	}
    #####: 1107:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1108:	{
        -: 1109:	  //trash both treasure cards
    #####: 1110:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1111:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1112:
        -: 1113:	  //gain 4 Gold cards
    #####: 1114:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1115:	    {
    #####: 1116:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1117:	    }
        -: 1118:				
        -: 1119:	  //return success
    #####: 1120:	  return 1;
        -: 1121:	}
        -: 1122:			
        -: 1123:      //no second treasure_map found in hand
    #####: 1124:      return -1;
        -: 1125:    }
        -: 1126:	
    #####: 1127:  return -1;
        -: 1128:}
        -: 1129:
function discardCard called 1016 returned 100% blocks executed 100%
     1016: 1130:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1131:{
        -: 1132:	
        -: 1133:  //if card is not trashed, added to Played pile 
     1016: 1134:  if (trashFlag < 1)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -: 1135:    {
        -: 1136:      //add card to played pile
     1004: 1137:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     1004: 1138:      state->playedCardCount++;
        -: 1139:    }
        -: 1140:	
        -: 1141:  //set played card to -1
     1016: 1142:  state->hand[currentPlayer][handPos] = -1;
        -: 1143:	
        -: 1144:  //remove card from player's hand
     1016: 1145:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -: 1146:    {
        -: 1147:      //reduce number of cards in hand
       38: 1148:      state->handCount[currentPlayer]--;
        -: 1149:    }
      978: 1150:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1151:    {
        -: 1152:      //reduce number of cards in hand
        1: 1153:      state->handCount[currentPlayer]--;
        -: 1154:    }
        -: 1155:  else 	
        -: 1156:    {
        -: 1157:      //replace discarded card with last card in hand
      977: 1158:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1159:      //set last card to -1
      977: 1160:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1161:      //reduce number of cards in hand
      977: 1162:      state->handCount[currentPlayer]--;
        -: 1163:    }
        -: 1164:	
     1016: 1165:  return 0;
        -: 1166:}
        -: 1167:
function gainCard called 108 returned 100% blocks executed 100%
      108: 1168:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1169:{
        -: 1170:  //Note: supplyPos is enum of choosen card
        -: 1171:	
        -: 1172:  //check if supply pile is empty (0) or card is not used in game (-1)
      108: 1173:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
        -: 1174:    {
        5: 1175:      return -1;
        -: 1176:    }
        -: 1177:	
        -: 1178:  //added card for [whoseTurn] current player:
        -: 1179:  // toFlag = 0 : add to discard
        -: 1180:  // toFlag = 1 : add to deck
        -: 1181:  // toFlag = 2 : add to hand
        -: 1182:
      103: 1183:  if (toFlag == 1)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        -: 1184:    {
       12: 1185:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       12: 1186:      state->deckCount[player]++;
        -: 1187:    }
       91: 1188:  else if (toFlag == 2)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -: 1189:    {
        5: 1190:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        5: 1191:      state->handCount[player]++;
        -: 1192:    }
        -: 1193:  else
        -: 1194:    {
       86: 1195:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       86: 1196:      state->discardCount[player]++;
        -: 1197:    }
        -: 1198:	
        -: 1199:  //decrease number in supply pile
      103: 1200:  state->supplyCount[supplyPos]--;
        -: 1201:	 
      103: 1202:  return 0;
        -: 1203:}
        -: 1204:
function updateCoins called 805 returned 100% blocks executed 100%
      805: 1205:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1206:{
        -: 1207:  int i;
        -: 1208:	
        -: 1209:  //reset coin count
      805: 1210:  state->coins = 0;
        -: 1211:
        -: 1212:  //add coins for each Treasure card in player's hand
     4931: 1213:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -: 1214:    {
     4126: 1215:      if (state->hand[player][i] == copper)
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
        -: 1216:	{
     3210: 1217:	  state->coins += 1;
        -: 1218:	}
      916: 1219:      else if (state->hand[player][i] == silver)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -: 1220:	{
       55: 1221:	  state->coins += 2;
        -: 1222:	}
      861: 1223:      else if (state->hand[player][i] == gold)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -: 1224:	{
       42: 1225:	  state->coins += 3;
        -: 1226:	}	
        -: 1227:    }	
        -: 1228:
        -: 1229:  //add bonus
      805: 1230:  state->coins += bonus;
        -: 1231:
      805: 1232:  return 0;
        -: 1233:}
        -: 1234:
function playAdventurer called 9 returned 100% blocks executed 100%
        9: 1235:int playAdventurer(struct gameState *state) {
        -: 1236:
        -: 1237:
        9: 1238:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1239:    int temphand[MAX_HAND];// moved above the if statement
        9: 1240:    int drawntreasure=0;
        -: 1241:    int cardDrawn;
        9: 1242:    int z = 0;// this is the counter for the temp hand
       32: 1243:    while(drawntreasure<1){
branch  0 taken 61%
branch  1 taken 39% (fallthrough)
       14: 1244:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        1: 1245:            shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1246:        }
       14: 1247:        drawCard(currentPlayer, state);
call    0 returned 100%
       14: 1248:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       14: 1249:        if (cardDrawn == copper || cardDrawn == gold) {
branch  0 taken 43% (fallthrough)
branch  1 taken 57%
branch  2 taken 17% (fallthrough)
branch  3 taken 83%
        9: 1250:            drawntreasure += 2;
        -: 1251:        }
        -: 1252:        else{
        5: 1253:            temphand[z]=cardDrawn;
        5: 1254:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        5: 1255:            z++;
        -: 1256:        }
        -: 1257:    }
       23: 1258:    while(z-1>=0){
branch  0 taken 36%
branch  1 taken 64% (fallthrough)
        5: 1259:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        5: 1260:        z=z-1;
        -: 1261:    }
        9: 1262:    return 0;
        -: 1263:
        -: 1264:}
        -: 1265:
function playSmithy called 7 returned 100% blocks executed 100%
        7: 1266:int playSmithy(struct gameState *state, int handPos){
        -: 1267:
        -: 1268:  int i;
        7: 1269:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1270:
       21: 1271:  for (i = 0; i < 2; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -: 1272:  {
       14: 1273:    drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1274:  }
        -: 1275:
        -: 1276:  //discard card from hand
        7: 1277:  discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
        -: 1278:
        7: 1279:  return 0;
        -: 1280:}
        -: 1281:
function playVillage called 5 returned 100% blocks executed 100%
        5: 1282:int playVillage(struct gameState *state, int handPos){
        -: 1283:
        5: 1284:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1285:  //+1 Card
        5: 1286:  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1287:
        -: 1288:  //+2 Actions
        5: 1289:  state->numActions = state->numActions;
        -: 1290:
        -: 1291:  //discard played card from hand
        5: 1292:  discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
        5: 1293:  return 0;
        -: 1294:
        -: 1295:}
function playFeast called 0 returned 0% blocks executed 0%
    #####: 1296:int playFeast(struct gameState *state, int choice1){
        -: 1297:
        -: 1298:  int i, x;
        -: 1299:  int temphand[MAX_HAND];// moved above the if statement
    #####: 1300:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1301:
    #####: 1302:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1303:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1304:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1305:  }
        -: 1306:  //Backup hand
        -: 1307:
        -: 1308:  //Update Coins for Buy
    #####: 1309:  updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1310:  x = 1;//Condition to loop on
    #####: 1311:  while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1312:    if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1313:      if (DEBUG)
        -: 1314:        printf("None of that card left, sorry!\n");
        -: 1315:
        -: 1316:      if (DEBUG){
        -: 1317:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1318:      }
        -: 1319:    }
    #####: 1320:    else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1321:      printf("That card is too expensive!\n");
call    0 never executed
        -: 1322:
        -: 1323:      if (DEBUG){
        -: 1324:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1325:      }
        -: 1326:    }
        -: 1327:    else{
        -: 1328:
        -: 1329:      if (DEBUG){
        -: 1330:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1331:      }
        -: 1332:
    #####: 1333:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1334:      x = 0;//No more buying cards
        -: 1335:
        -: 1336:      if (DEBUG){
        -: 1337:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1338:      }
        -: 1339:
        -: 1340:    }
        -: 1341:  }
        -: 1342:
        -: 1343:  //Reset Hand
    #####: 1344:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1345:    state->hand[currentPlayer][i] = temphand[i];
    #####: 1346:    temphand[i] = -1;
        -: 1347:  }
        -: 1348:  //Reset Hand
        -: 1349:
    #####: 1350:  return 0;
        -: 1351:}
function playCouncil_Room called 1004 returned 100% blocks executed 100%
     1004: 1352:int playCouncil_Room(struct gameState *state, int handPos){
        -: 1353:  int i;
     1004: 1354:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     5020: 1355:  for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1356:  {
     4016: 1357:    drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1358:  }
        -: 1359:
        -: 1360:  //+1 Buy
     1004: 1361:  state->numBuys++;
        -: 1362:
        -: 1363:  //Each other player draws a card
     3219: 1364:  for (i = 0; i < state->numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -: 1365:  {
     2215: 1366:    if ( i != currentPlayer )
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
        -: 1367:    {
     1472: 1368:      drawCard(i, state);
call    0 returned 100%
        -: 1369:    }
        -: 1370:  }
        -: 1371:
        -: 1372:  //put played card in played card pile
     1004: 1373:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1374:
     1004: 1375:  return 0;
        -: 1376:}
        -: 1377:
        -: 1378://end of dominion.c
        -: 1379:
