        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:
function main called 1 returned 100% blocks executed 89%
        1:    9:int main() {
        -:   10:    int i;
        1:   11:    int seed = 1000;
        1:   12:    int numPlayer = 2;
        1:   13:	int player1 = 0;
        1:   14:	int player2 = 1;
        1:   15:	int handPos = 0;
        -:   16:	int gameOver;
        -:   17:	int tempCard;
        -:   18:	int bonus;
        1:   19:	int c1, c2, c3 = 0;
        -:   20:	int blah;
        1:   21:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   22:               , remodel, smithy, village, baron, great_hall};
        -:   23:    struct gameState G, RESET;
        -:   24:	
        1:   25:	initializeGame(numPlayer, k, seed, &RESET);
call    0 returned 100%
        1:   26:	RESET.hand[player1][handPos] = smithy;
        1:   27:	memcpy(&G, &RESET, sizeof(struct gameState));	
        -:   28:	
        -:   29:	//Test villageCard function
        1:   30:	printf("~~~Testing villageCard Function~~~\n");
call    0 returned 100%
        -:   31:	
        1:   32:	printf("--------------------------------------------\n");
call    0 returned 100%
        1:   33:	printf("Test if player 1 deck count decrease by 1\n\n");
call    0 returned 100%
        1:   34:	printf("Before G.deckCount = %d\n",G.deckCount[player1]);
call    0 returned 100%
        1:   35:	cardEffect(village, c1, c2, c3, &G, handPos, &bonus);
call    0 returned 100%
        1:   36:	printf("After G.deckCount = %d, expected = 4\n", G.deckCount[player1]);
call    0 returned 100%
        1:   37:	if (G.deckCount[player1] == 4){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   38:		printf("PASSED.\n");
call    0 returned 100%
        -:   39:	}
        -:   40:	else{
    #####:   41:		printf("FAILED.\n");
call    0 never executed
        -:   42:	}
        1:   43:	printf("--------------------------------------------\n");
call    0 returned 100%
        -:   44:	
        1:   45:	memcpy(&G, &RESET, sizeof(struct gameState)); // reset game state
        -:   46:	
        1:   47:	printf("Test if player 1 hand count stays the same (+1 cards -1 played card)\n\n");
call    0 returned 100%
        1:   48:	printf("Before G.handCount = %d\n",G.handCount[player1]);
call    0 returned 100%
        1:   49:	cardEffect(village, c1, c2, c3, &G, handPos, &bonus);
call    0 returned 100%
        1:   50:	printf("After G.handCount = %d, expected = 5\n", G.handCount[player1]);
call    0 returned 100%
        1:   51:	if (G.handCount[player1] == 5){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   52:		printf("PASSED.\n");
call    0 returned 100%
        -:   53:	}
        -:   54:	else{
    #####:   55:		printf("FAILED.\n");
call    0 never executed
        -:   56:	}
        1:   57:	printf("--------------------------------------------\n");
call    0 returned 100%
        -:   58:	
        1:   59:	memcpy(&G, &RESET, sizeof(struct gameState)); // reset game state
        -:   60:	
        1:   61:	printf("Test if player 1 numBuy stays the same\n\n");
call    0 returned 100%
        1:   62:	printf("Before G.numBuys = %d\n",G.numBuys);
call    0 returned 100%
        1:   63:	cardEffect(village, c1, c2, c3, &G, handPos, &bonus);
call    0 returned 100%
        1:   64:	printf("After G.numBuys = %d, expected = 1\n", G.numBuys);
call    0 returned 100%
        1:   65:	if (G.numBuys == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   66:		printf("PASSED.\n");
call    0 returned 100%
        -:   67:	}
        -:   68:	else{
    #####:   69:		printf("FAILED.\n");
call    0 never executed
        -:   70:	}
        1:   71:	printf("--------------------------------------------\n");
call    0 returned 100%
        -:   72:	
        1:   73:	memcpy(&G, &RESET, sizeof(struct gameState)); // reset game state
        -:   74:	
        1:   75:	printf("Test if player 1 numActions increase by 2\n\n");
call    0 returned 100%
        1:   76:	printf("Before G.numActions = %d\n",G.numActions);
call    0 returned 100%
        1:   77:	cardEffect(village, c1, c2, c3, &G, handPos, &bonus);
call    0 returned 100%
        1:   78:	printf("After G.numActions = %d, expected = 3\n", G.numActions);
call    0 returned 100%
        1:   79:	if (G.numActions == 3){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   80:		printf("PASSED.\n");
call    0 returned 100%
        -:   81:	}
        -:   82:	else{
    #####:   83:		printf("FAILED.\n");
call    0 never executed
        -:   84:	}
        1:   85:	printf("--------------------------------------------\n");
call    0 returned 100%
        -:   86:	
        1:   87:	memcpy(&G, &RESET, sizeof(struct gameState)); // reset game state
        -:   88:	
        1:   89:	printf("Test if player 1 numActions increase by 2 when numAction initial value is 2\n\n");
call    0 returned 100%
        1:   90:	printf("Before G.numActions = %d\n",G.numActions);
call    0 returned 100%
        1:   91:	G.numActions = 2;
        1:   92:	cardEffect(village, c1, c2, c3, &G, handPos, &bonus);
call    0 returned 100%
        1:   93:	printf("After G.numActions = %d, expected = 4\n", G.numActions);
call    0 returned 100%
        1:   94:	if (G.numActions == 4){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   95:		printf("PASSED.\n");
call    0 never executed
        -:   96:	}
        -:   97:	else{
        1:   98:		printf("FAILED.\n");
call    0 returned 100%
        -:   99:	}
        1:  100:	printf("--------------------------------------------\n");
call    0 returned 100%
        -:  101:	
        1:  102:	memcpy(&G, &RESET, sizeof(struct gameState)); // reset game state
        -:  103:	
        1:  104:	printf("Test if player 1 played pile increase by 1\n\n");
call    0 returned 100%
        1:  105:	printf("Before G.playedCardCount = %d\n",G.playedCardCount);
call    0 returned 100%
        1:  106:	cardEffect(village, c1, c2, c3, &G, handPos, &bonus);
call    0 returned 100%
        1:  107:	printf("After G.playedCardCount = %d, expected = 1\n", G.playedCardCount);
call    0 returned 100%
        1:  108:	if (G.playedCardCount == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  109:		printf("PASSED.\n");
call    0 returned 100%
        -:  110:	}
        -:  111:	else{
    #####:  112:		printf("FAILED.\n");
call    0 never executed
        -:  113:	}
        1:  114:	printf("--------------------------------------------\n");
call    0 returned 100%
        -:  115:	
        1:  116:	memcpy(&G, &RESET, sizeof(struct gameState)); // reset game state
        -:  117:
        1:  118:	printf("Test if player 1 discard pile stayed the same\n\n");
call    0 returned 100%
        1:  119:	printf("Before G.discardCount = %d\n",G.discardCount[player1]);
call    0 returned 100%
        1:  120:	cardEffect(village, c1, c2, c3, &G, handPos, &bonus);
call    0 returned 100%
        1:  121:	printf("After G.discardCount = %d, expected = 0\n", G.discardCount[player1]);
call    0 returned 100%
        1:  122:	if (G.discardCount[player1] == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  123:		printf("PASSED.\n");
call    0 returned 100%
        -:  124:	}
        -:  125:	else{
    #####:  126:		printf("FAILED.\n");
call    0 never executed
        -:  127:	}
        1:  128:	printf("--------------------------------------------\n");
call    0 returned 100%
        -:  129:	
        1:  130:	memcpy(&G, &RESET, sizeof(struct gameState)); // reset game state
        -:  131:	
        1:  132:	printf("Test if player 2 discard pile stayed the same\n\n");
call    0 returned 100%
        1:  133:	printf("Before G.discardCount = %d\n",G.discardCount[player2]);
call    0 returned 100%
        1:  134:	cardEffect(village, c1, c2, c3, &G, handPos, &bonus);
call    0 returned 100%
        1:  135:	printf("After G.discardCount = %d, expected = 0\n", G.discardCount[player2]);
call    0 returned 100%
        1:  136:	if (G.discardCount[player2] == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  137:		printf("PASSED.\n");
call    0 returned 100%
        -:  138:	}
        -:  139:	else{
    #####:  140:		printf("FAILED.\n");
call    0 never executed
        -:  141:	}
        1:  142:	printf("--------------------------------------------\n");
call    0 returned 100%
        -:  143:	
        1:  144:	memcpy(&G, &RESET, sizeof(struct gameState)); // reset game state
        -:  145:	
        1:  146:	printf("Test if player 2 hand count stayed the same\n\n");
call    0 returned 100%
        1:  147:	printf("Before G.handCount = %d\n",G.handCount[player2]);
call    0 returned 100%
        1:  148:	cardEffect(village, c1, c2, c3, &G, handPos, &bonus);
call    0 returned 100%
        1:  149:	printf("After G.handCount = %d, expected = 0\n", G.handCount[player2]);
call    0 returned 100%
        1:  150:	if (G.handCount[player2] == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  151:		printf("PASSED.\n");
call    0 returned 100%
        -:  152:	}
        -:  153:	else{
    #####:  154:		printf("FAILED.\n");
call    0 never executed
        -:  155:	}
        1:  156:	printf("--------------------------------------------\n");
call    0 returned 100%
        -:  157:	
        1:  158:	memcpy(&G, &RESET, sizeof(struct gameState)); // reset game state
        -:  159:	
        1:  160:	printf("Test if player 2 deck count stayed the same\n\n");
call    0 returned 100%
        1:  161:	printf("Before G.deckCount = %d\n",G.deckCount[player2]);
call    0 returned 100%
        1:  162:	cardEffect(village, c1, c2, c3, &G, handPos, &bonus);
call    0 returned 100%
        1:  163:	printf("After G.deckCount = %d, expected = 10\n", G.deckCount[player2]);
call    0 returned 100%
        1:  164:	if (G.deckCount[player2] == 10 ){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  165:		printf("PASSED.\n");
call    0 returned 100%
        -:  166:	}
        -:  167:	else{
    #####:  168:		printf("FAILED.\n");
call    0 never executed
        -:  169:	}
        1:  170:	printf("--------------------------------------------\n");
call    0 returned 100%
        -:  171:	
        1:  172:	memcpy(&G, &RESET, sizeof(struct gameState)); // reset game state
        -:  173:	
       28:  174:		for (i = 0; i < sizeof(G.supplyCount)/sizeof(int); i++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       27:  175:		memcpy(&G, &RESET, sizeof(struct gameState)); // reset game state
        -:  176:		
       27:  177:		printf("Test if supplyPile[%d] stayed the same\n\n", i);
call    0 returned 100%
       27:  178:		printf("Before G.supplyCount[%d] = %d\n", i, G.supplyCount[0]);
call    0 returned 100%
       27:  179:		cardEffect(smithy, c1, c2, c3, &G, handPos, &bonus);
call    0 returned 100%
       27:  180:		printf("After G.supplyCount = %d, expected = 10\n", G.supplyCount[0]);
call    0 returned 100%
       27:  181:		if (G.supplyCount[0] == 10){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       27:  182:			printf("PASSED.\n");
call    0 returned 100%
        -:  183:		}
        -:  184:		else{
    #####:  185:			printf("FAILED.\n");
call    0 never executed
        -:  186:		}
       27:  187:		printf("--------------------------------------------\n");
call    0 returned 100%
        -:  188:	}
        -:  189:	
        1:  190:	memcpy(&G, &RESET, sizeof(struct gameState)); // reset game state
        -:  191:	
        1:  192:	return 0;
        -:  193:}
