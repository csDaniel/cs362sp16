        -:    0:Source:randomtestcard.c
        -:    0:Graph:randomtestcard.gcno
        -:    0:Data:randomtestcard.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <stdlib.h>
        -:    4:#include <time.h> 
        -:    5:#include <string.h>
        -:    6:#include <stdio.h>
        -:    7:#include <assert.h>
        -:    8:#include "rngs.h"
        -:    9:
        -:   10:#define MAX_TESTS 10
        -:   11:
        -:   12:
        -:   13:// Random Testing for smithyCard 
        -:   14:// +3 Cards
        -:   15:
function main called 1 returned 100% blocks executed 95%
        1:   16:int main() {
        -:   17:    int i;
        -:   18:	int player, card, handPosition, returnValue;
        -:   19:	struct gameState G, RESET;
        -:   20:	int randPlayer, randSeed, handBefore, handAfter, deckBefore, deckAfter, playedCardCountBefore, playedCardCountAfter;
        1:   21:	int handPass = 0, handFail = 0, deckPass = 0, deckFail = 0, playedPass = 0, playedFail = 0, returnPass = 0, returnFail = 0;
        -:   22:	int choice1, choice2, choice3;
        1:   23:	const char *cardNames[] = {"adventurer", "council_room", "feast", "gardens", "mine"
        -:   24:               , "remodel", "smithy", "village", "baron", "great_hall", "copper", "silver", "gold"};
        1:   25:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   26:               , remodel, smithy, village, baron, great_hall};
        -:   27:			   
        1:   28:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:   29:	
        1:   30:	printf("~~~Random Testing Smithy Card~~~\n\n");
call    0 returned 100%
        -:   31:			   
        -:   32: //   struct gameState G, RESET;
        -:   33:	
        -:   34://	initializeGame(numPlayer, k, seed, &RESET);
        1:   35:	memcpy(&G, &RESET, sizeof(struct gameState));
        -:   36:	
       11:   37:	for (i = 0; i < MAX_TESTS; i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:   38:		printf("Test #%d\n\n", i+1);
call    0 returned 100%
       10:   39:		memcpy(&G, &RESET, sizeof(struct gameState));
       10:   40:		randPlayer = (rand() % 3) + 2;
call    0 returned 100%
       10:   41:		randSeed = (rand() % 1000) + 1;
call    0 returned 100%
       10:   42:		printf("Number of Players = %d, Seed Number = %d\n", randPlayer, randSeed);
call    0 returned 100%
       10:   43:		initializeGame(randPlayer, k, randSeed, &G);
call    0 returned 100%
        -:   44:		
       38:   45:		for (player = 0; player < randPlayer; player++){
branch  0 taken 74%
branch  1 taken 26% (fallthrough)
        -:   46:			handBefore, handAfter, deckBefore, deckAfter, playedCardCountBefore, playedCardCountAfter;
        -:   47:				
        -:   48:			// set deck 
       28:   49:			G.deckCount[player] = rand () % MAX_DECK;
call    0 returned 100%
       28:   50:			printf("Player %d deck size = %d\n", player+1, G.deckCount[player]);
call    0 returned 100%
     7208:   51:			for (card = 0; card < G.deckCount[player]; card++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     7180:   52:				G.deck[player][card] = rand() % 13;
call    0 returned 100%
     7180:   53:				printf(" %s , ", cardNames[G.deck[player][card]]);
call    0 returned 100%
       28:   54:			}printf("\n");
call    0 returned 100%
        -:   55:			
        -:   56:			// set discard pile 
       28:   57:			G.discardCount[player] = rand() % MAX_DECK;
call    0 returned 100%
       28:   58:			printf("Player %d discard size = %d\n", player+1, G.discardCount[player]);
call    0 returned 100%
     7143:   59:			for (card = 0; card < G.discardCount[player]; card++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     7115:   60:				G.discard[player][card] = rand() % 13;
call    0 returned 100%
     7115:   61:				printf(" %s , ", cardNames[G.discard[player][card]]);
call    0 returned 100%
       28:   62:			}printf("\n");
call    0 returned 100%
        -:   63:			
        -:   64:			// set hand
       28:   65:			G.handCount[player] = rand() % MAX_HAND;
call    0 returned 100%
       28:   66:			printf("Player %d hand size = %d\n", player+1, G.handCount[player]);
call    0 returned 100%
     6208:   67:			for (card = 0; card < G.handCount[player]; card++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     6180:   68:				G.hand[player][card] = rand() % 13;
call    0 returned 100%
     6180:   69:				printf(" %s ,", cardNames[G.hand[player][card]]);
call    0 returned 100%
       28:   70:			}printf("\n");
call    0 returned 100%
        -:   71:			
       28:   72:			handBefore = G.handCount[player];
       28:   73:			deckBefore = G.deckCount[player];
       28:   74:			playedCardCountBefore = G.playedCardCount;
       28:   75:			printf("Hand Count Before = %d\n", handBefore);
call    0 returned 100%
       28:   76:			printf("Deck Count Before = %d\n", deckBefore);
call    0 returned 100%
       28:   77:			printf("Played Card Count Before = %d\n", playedCardCountBefore);
call    0 returned 100%
        -:   78:			
       28:   79:			choice1 = rand() % 2;
call    0 returned 100%
       28:   80:			choice2 = rand() % 2;
call    0 returned 100%
       28:   81:			choice3 = rand() % 2;
call    0 returned 100%
       28:   82:			handPosition = rand() % G.handCount[player];
call    0 returned 100%
       28:   83:			G.hand[player][handPosition] = smithy;
       28:   84:			printf("Choice1 = %d, Choice2 = %d, Choice3 = %d, handPosition = %d\n", choice1, choice2, choice3, handPosition);
call    0 returned 100%
        -:   85:			
       28:   86:			G.whoseTurn = player;
       28:   87:			returnValue = cardEffect(smithy, choice1, choice2, choice3, &G, handPosition, 0);
call    0 returned 100%
        -:   88:			
       28:   89:			handAfter = G.handCount[player]; //should increase by 2 (+3 card -1 card)
       28:   90:			deckAfter = G.deckCount[player]; //should decrease by 3
       28:   91:			playedCardCountAfter = G.playedCardCount; //should increase by 1`
       28:   92:			printf("Hand Count After = %d\n", handAfter);
call    0 returned 100%
       28:   93:			printf("Deck Count After = %d\n", deckAfter);
call    0 returned 100%
       28:   94:			printf("Played Card Count After = %d\n", playedCardCountAfter);
call    0 returned 100%
        -:   95:			
       28:   96:			if (handAfter == handBefore + 2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       28:   97:				handPass++;
       28:   98:				printf("Hand Count Passed\n");
call    0 returned 100%
        -:   99:			}
        -:  100:			else{
    #####:  101:				handFail++;
    #####:  102:				printf("Hand Count Failed\n");
call    0 never executed
        -:  103:			}
        -:  104:			
       28:  105:			if (deckAfter == deckBefore - 3){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       28:  106:				deckPass++;
       28:  107:				printf("Deck Count Passed\n");
call    0 returned 100%
        -:  108:			}
        -:  109:			else{
    #####:  110:				deckFail++;
    #####:  111:				printf("Deck Count Failed\n");
call    0 never executed
        -:  112:			}
        -:  113:			
       28:  114:			if (playedCardCountAfter == playedCardCountBefore + 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  115:				playedPass++;
    #####:  116:				printf("Played Card Count Passed\n");
call    0 never executed
        -:  117:			}
        -:  118:			else{
       28:  119:				playedFail++;
       28:  120:				printf("Played Card Count Failed\n");
call    0 returned 100%
        -:  121:			}
        -:  122:			
       28:  123:			if (returnValue == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       28:  124:				returnPass++;
       28:  125:				printf("Return Value Passed\n");
call    0 returned 100%
        -:  126:			}
        -:  127:			else{
    #####:  128:				returnFail++;
    #####:  129:				printf("Return Value Failed\n");
call    0 never executed
        -:  130:			}
        -:  131:		}
        -:  132:		
        -:  133:	}
        -:  134:
        1:  135:	printf("\n\n");
call    0 returned 100%
        1:  136:	printf("Hand Card Count Pass: %d\n", handPass);
call    0 returned 100%
        1:  137:	printf("Hand Card Count Fail: %d\n", handFail);
call    0 returned 100%
        1:  138:	printf("Deck Card Count Pass: %d\n", deckPass);
call    0 returned 100%
        1:  139:	printf("Deck Card Count Fail: %d\n", deckFail);
call    0 returned 100%
        1:  140:	printf("Played Card Count Pass: %d\n", playedPass);
call    0 returned 100%
        1:  141:	printf("Played Card Count Fail: %d\n", playedFail);
call    0 returned 100%
        1:  142:	printf("Return Value Pass: %d\n", returnPass);
call    0 returned 100%
        1:  143:	printf("Return Value Fail: %d\n", returnFail);
call    0 returned 100%
        -:  144:	
        1:  145:	return 0;
        -:  146:	
        -:  147:}
