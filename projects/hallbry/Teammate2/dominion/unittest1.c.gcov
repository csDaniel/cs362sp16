        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:
function main called 1 returned 100% blocks executed 86%
        1:    9:int main() {
        -:   10:    int i;
        1:   11:    int numPlayer = 2;
        1:   12:	int player1 = 0;
        1:   13:	int player2 = 1;
        -:   14:    struct gameState G;
        -:   15:
        -:   16:	//Test Shuffle function
        1:   17:	printf("~~~Testing Shuffle Function~~~\n\n");
call    0 returned 100%
        -:   18:	
        -:   19:	//set player1 and player2 hand/deck/discard pile
        3:   20:	for (i = 0; i < numPlayer; i++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:   21:		G.hand[i][0] = feast;			// add 3 card to player1 hand
        2:   22:		G.hand[i][1] = gardens;
        2:   23:		G.hand[i][2] = smithy; 
        -:   24:
        2:   25:		G.deck[i][0] = remodel;		// add 4 card to player1 deck
        2:   26:		G.deck[i][1] = gardens;
        2:   27:		G.deck[i][2] = baron;
        2:   28:		G.deck[i][3] = village;
        -:   29:		
        2:   30:		G.discard[i][0] = council_room;		// add 3 card to player1 discard
        2:   31:		G.discard[i][1] = village;
        2:   32:		G.discard[i][2] = feast;
        -:   33:	}
        -:   34:	
        1:   35:	printf("Shuffled Player 1 Deck.............\n");
call    0 returned 100%
        1:   36:	printf("The numbers are the enum Card\n\n");
call    0 returned 100%
        -:   37:	
        -:   38:	
        -:   39:	
        1:   40:	printf("--------------------------------------------\n");
call    0 returned 100%
        1:   41:	printf("Test if player 1 deck pile is in different order:\n\n");
call    0 returned 100%
        1:   42:	G.deckCount[player1] = 4;
        1:   43:	shuffle(player1, &G);
call    0 returned 100%
        -:   44:	
        1:   45:	printf("G.deck[player] = %d, %d, %d, %d | expected != %d, %d, %d, %d\n", G.deck[player1][0], G.deck[player1][1], G.deck[player1][2], 
call    0 returned 100%
        -:   46:		G.deck[player1][3], remodel, gardens, baron, village);
        -:   47:
        1:   48:	if (G.deck[player1][0] == remodel && G.deck[player1][1] == gardens && G.deck[player1][2] == baron && G.deck[player1][3] == village){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
    #####:   49:		printf("FAILED.\n");
call    0 never executed
        -:   50:	}
        -:   51:	else{
        1:   52:		printf("PASSED.\n");
call    0 returned 100%
        -:   53:	}
        1:   54:	printf("--------------------------------------------\n");
call    0 returned 100%
        1:   55:	printf("Test if player 1 hand is still the same:\n\n");
call    0 returned 100%
        -:   56:	
        1:   57:	printf("G.hand[player1][0] = %d, expected = %d\n", G.hand[player1][0], feast);
call    0 returned 100%
        1:   58:	printf("G.hand[player1][1] = %d, expected = %d\n", G.hand[player1][1], gardens);
call    0 returned 100%
        1:   59:	printf("G.hand[player1][2] = %d, expected = %d\n", G.hand[player1][2], smithy);
call    0 returned 100%
        1:   60:	if (G.hand[player1][0] == feast && G.hand[player1][1] == gardens && G.hand[player1][2] == smithy){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        1:   61:		printf("PASSED.\n");
call    0 returned 100%
        -:   62:	}
        -:   63:	else{
    #####:   64:		printf("FAILED.\n");
call    0 never executed
        -:   65:	}
        1:   66:	printf("--------------------------------------------\n");
call    0 returned 100%
        1:   67:	printf("Test if player 1 discard pile is still the same:\n\n");
call    0 returned 100%
        -:   68:	
        1:   69:	printf("G.discard[player1][0] = %d, expected = %d\n", G.discard[player1][0], council_room);
call    0 returned 100%
        1:   70:	printf("G.discard[player1][1] = %d, expected = %d\n", G.discard[player1][1], village);
call    0 returned 100%
        1:   71:	printf("G.discard[player1][2] = %d, expected = %d\n", G.discard[player1][2], feast);
call    0 returned 100%
        1:   72:	if (G.discard[player1][0] == council_room && G.discard[player1][1] == village && G.discard[player1][2] == feast){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        1:   73:		printf("PASSED.\n");
call    0 returned 100%
        -:   74:	}
        -:   75:	else{
    #####:   76:		printf("FAILED.\n");
call    0 never executed
        -:   77:	}
        1:   78:	printf("--------------------------------------------\n");
call    0 returned 100%
        1:   79:	printf("Test if player 1 deckCount is still the same:\n\n");
call    0 returned 100%
        -:   80:	
        1:   81:	printf("G.deckcount[player1] = %d, expected = 4\n", G.deckCount[player1]);
call    0 returned 100%
        1:   82:	if (G.deckCount[player1] == 4){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   83:		printf("PASSED.\n");
call    0 returned 100%
        -:   84:	}
        -:   85:	else{
    #####:   86:		printf("FAILED.\n");
call    0 never executed
        -:   87:	}
        -:   88:	
        1:   89:	printf("--------------------------------------------\n");
call    0 returned 100%
        1:   90:	printf("Test if player 2's deck got shuffled:\n\n");
call    0 returned 100%
        1:   91:	G.deckCount[player2] = 4;
        -:   92:	
        1:   93:	printf("G.deck[player] = %d, %d, %d, %d | expected = %d, %d, %d, %d\n", G.deck[player2][0], G.deck[player2][1], G.deck[player2][2], 
call    0 returned 100%
        -:   94:		G.deck[player2][3], remodel, gardens, baron, village);
        -:   95:
        1:   96:	if (G.deck[player2][0] == remodel && G.deck[player2][1] == gardens && G.deck[player2][2] == baron && G.deck[player2][3] == village){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
branch  6 taken 100% (fallthrough)
branch  7 taken 0%
        1:   97:		printf("PASSED.\n");
call    0 returned 100%
        -:   98:	}
        -:   99:	else{
    #####:  100:		printf("FAILED.\n");
call    0 never executed
        -:  101:	}
        1:  102:	printf("--------------------------------------------\n");
call    0 returned 100%
        1:  103:	printf("Test if player 2 hand is still the same:\n\n");
call    0 returned 100%
        -:  104:	
        1:  105:	printf("G.hand[player2][0] = %d, expected = %d\n", G.hand[player2][0], feast);
call    0 returned 100%
        1:  106:	printf("G.hand[player2][1] = %d, expected = %d\n", G.hand[player2][1], gardens);
call    0 returned 100%
        1:  107:	printf("G.hand[player2][2] = %d, expected = %d\n", G.hand[player2][2], smithy);
call    0 returned 100%
        1:  108:	if (G.hand[player2][0] == feast && G.hand[player2][1] == gardens && G.hand[player2][2] == smithy){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        1:  109:		printf("PASSED.\n");
call    0 returned 100%
        -:  110:	}
        -:  111:	else{
    #####:  112:		printf("FAILED.\n");
call    0 never executed
        -:  113:	}
        1:  114:	printf("--------------------------------------------\n");
call    0 returned 100%
        1:  115:	printf("Test if player 2 discard pile is still the same:\n\n");
call    0 returned 100%
        -:  116:	
        1:  117:	printf("G.discard[player2][0] = %d, expected = %d\n", G.discard[player2][0], council_room);
call    0 returned 100%
        1:  118:	printf("G.discard[player2][1] = %d, expected = %d\n", G.discard[player2][1], village);
call    0 returned 100%
        1:  119:	printf("G.discard[player2][2] = %d, expected = %d\n", G.discard[player2][2], feast);
call    0 returned 100%
        1:  120:	if (G.discard[player2][0] == council_room && G.discard[player2][1] == village && G.discard[player2][2] == feast){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        1:  121:		printf("PASSED.\n");
call    0 returned 100%
        -:  122:	}
        -:  123:	else{
    #####:  124:		printf("FAILED.\n");
call    0 never executed
        -:  125:	}
        -:  126:	
        1:  127:	printf("--------------------------------------------\n");
call    0 returned 100%
        1:  128:	printf("Test if player 2 deckCount is still the same:\n\n");
call    0 returned 100%
        -:  129:	
        1:  130:	printf("G.deckcount[player2] = %d, expected = 4\n", G.deckCount[player2]);
call    0 returned 100%
        1:  131:	if (G.deckCount[player2] == 4){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  132:		printf("PASSED.\n");
call    0 returned 100%
        -:  133:	}
        -:  134:	else{
    #####:  135:		printf("FAILED.\n");
call    0 never executed
        -:  136:	}
        -:  137:
        -:  138:
        1:  139:    return 0;
        -:  140:}
