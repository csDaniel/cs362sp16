        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:
function main called 1 returned 100% blocks executed 89%
        1:    9:int main() {
        -:   10:    int i;
        1:   11:    int seed = 1000;
        1:   12:    int numPlayer = 2;
        1:   13:	int player1 = 0;
        1:   14:	int player2 = 1;
        -:   15:	int gameOver;
        -:   16:	int tempCard;
        -:   17:	int blah;
        1:   18:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   19:               , remodel, smithy, village, baron, great_hall};
        -:   20:    struct gameState G, RESET;
        -:   21:	
        1:   22:	initializeGame(numPlayer, k, seed, &RESET);
call    0 returned 100%
        1:   23:	memcpy(&G, &RESET, sizeof(struct gameState));	
        -:   24:	
        -:   25:	//Test drawCard function
        1:   26:	printf("~~~Testing drawCard Function~~~\n");
call    0 returned 100%
        -:   27:	
        1:   28:	printf("--------------------------------------------\n");
call    0 returned 100%
        1:   29:	printf("Test if player 1 hand count increase by 1\n\n");
call    0 returned 100%
        1:   30:	printf("Before G.handCount = %d\n",G.handCount[player1]);
call    0 returned 100%
        1:   31:	drawCard(player1, &G);
call    0 returned 100%
        1:   32:	printf("After G.handCount = %d, expected = 6\n", G.handCount[player1]);
call    0 returned 100%
        1:   33:	if (G.handCount[player1] == 6){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   34:		printf("PASSED.\n");
call    0 returned 100%
        -:   35:	}
        -:   36:	else{
    #####:   37:		printf("FAILED.\n");
call    0 never executed
        -:   38:	}
        1:   39:	printf("--------------------------------------------\n");
call    0 returned 100%
        -:   40:
        1:   41:	memcpy(&G, &RESET, sizeof(struct gameState)); // reset game state
        -:   42:	
        1:   43:	printf("Test if player 1 deck decrease by 1\n\n");
call    0 returned 100%
        1:   44:	printf("Before G.deckCount = %d\n", G.deckCount[player1]);
call    0 returned 100%
        1:   45:	drawCard(player1, &G);
call    0 returned 100%
        1:   46:	printf("After G.deckCount = %d, expected = 4\n", G.deckCount[player1]);
call    0 returned 100%
        1:   47:	if (G.deckCount[player1] == 4){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   48:		printf("PASSED.\n");
call    0 returned 100%
        -:   49:	}
        -:   50:	else{
    #####:   51:		printf("FAILED.\n");
call    0 never executed
        -:   52:	}
        1:   53:	printf("--------------------------------------------\n");
call    0 returned 100%
        -:   54:	
        1:   55:	memcpy(&G, &RESET, sizeof(struct gameState)); // reset game state
        -:   56:	
        1:   57:	printf("Test if player 1 discard pile stayed the same\n\n");
call    0 returned 100%
        1:   58:	printf("Before G.discardCount = %d\n", G.discardCount[player1]);
call    0 returned 100%
        1:   59:	drawCard(player1, &G);
call    0 returned 100%
        1:   60:	printf("After G.discardCount = %d, expected = 4\n", G.discardCount[player1]);
call    0 returned 100%
        1:   61:	if (G.discardCount[player1] == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   62:		printf("PASSED.\n");
call    0 returned 100%
        -:   63:	}
        -:   64:	else{
    #####:   65:		printf("FAILED.\n");
call    0 never executed
        -:   66:	}
        1:   67:	printf("--------------------------------------------\n");
call    0 returned 100%
        -:   68:	
        1:   69:	memcpy(&G, &RESET, sizeof(struct gameState)); // reset game state
        -:   70:	
        1:   71:	printf("Test if player 2 hand count stayed the same\n\n");
call    0 returned 100%
        1:   72:	printf("Before G.handCount = %d\n", G.handCount[player2]);
call    0 returned 100%
        1:   73:	drawCard(player1, &G);
call    0 returned 100%
        1:   74:	printf("After G.handCount = %d, expected = 0\n", G.handCount[player2]);
call    0 returned 100%
        1:   75:	if (G.handCount[player2] == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   76:		printf("PASSED.\n");
call    0 returned 100%
        -:   77:	}
        -:   78:	else{
    #####:   79:		printf("FAILED.\n");
call    0 never executed
        -:   80:	}
        1:   81:	printf("--------------------------------------------\n");
call    0 returned 100%
        -:   82:	
        1:   83:	memcpy(&G, &RESET, sizeof(struct gameState)); // reset game state
        -:   84:
        1:   85:	printf("Test if player 2 deck stayed the same\n\n");
call    0 returned 100%
        1:   86:	printf("Before G.deckCount = %d\n", G.deckCount[player2]);
call    0 returned 100%
        1:   87:	drawCard(player1, &G);
call    0 returned 100%
        1:   88:	printf("After G.deckCount = %d, expected = 10\n", G.deckCount[player2]);
call    0 returned 100%
        1:   89:	if (G.deckCount[player2] == 10){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   90:		printf("PASSED.\n");
call    0 returned 100%
        -:   91:	}
        -:   92:	else{
    #####:   93:		printf("FAILED.\n");
call    0 never executed
        -:   94:	}
        1:   95:	printf("--------------------------------------------\n");
call    0 returned 100%
        -:   96:	
        1:   97:	memcpy(&G, &RESET, sizeof(struct gameState)); // reset game state
        -:   98:	
        1:   99:	printf("Test if player 2 discard pile stayed the same\n\n");
call    0 returned 100%
        1:  100:	printf("Before G.discardCount = %d\n", G.discardCount[player2]);
call    0 returned 100%
        1:  101:	drawCard(player1, &G);
call    0 returned 100%
        1:  102:	printf("After G.discardCount = %d, expected = 0\n", G.discardCount[player2]);
call    0 returned 100%
        1:  103:	if (G.discardCount[player2] == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  104:		printf("PASSED.\n");
call    0 returned 100%
        -:  105:	}
        -:  106:	else{
    #####:  107:		printf("FAILED.\n");
call    0 never executed
        -:  108:	}
        1:  109:	printf("--------------------------------------------\n");
call    0 returned 100%
        -:  110:	
       28:  111:	for (i = 0; i < sizeof(G.supplyCount)/sizeof(int); i++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       27:  112:		memcpy(&G, &RESET, sizeof(struct gameState)); // reset game state
        -:  113:		
       27:  114:		printf("Test if supplyPile[%d] stayed the same\n\n", i);
call    0 returned 100%
       27:  115:		printf("Before G.supplyCount[%d] = %d\n", i, G.supplyCount[0]);
call    0 returned 100%
       27:  116:		drawCard(player1, &G);
call    0 returned 100%
       27:  117:		printf("After G.supplyCount = %d, expected = 10\n", G.supplyCount[0]);
call    0 returned 100%
       27:  118:		if (G.supplyCount[0] == 10){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       27:  119:			printf("PASSED.\n");
call    0 returned 100%
        -:  120:		}
        -:  121:		else{
    #####:  122:			printf("FAILED.\n");
call    0 never executed
        -:  123:		}
       27:  124:		printf("--------------------------------------------\n");
call    0 returned 100%
        -:  125:	}
        -:  126:	
        1:  127:	memcpy(&G, &RESET, sizeof(struct gameState)); // reset game state
        -:  128:	
        1:  129:	printf("Test if player 1 drawn card is in hand\n\n");
call    0 returned 100%
        1:  130:	printf("Top Deck Card = %d\n", G.deck[player1][G.deckCount[player1] - 1]);
call    0 returned 100%
        1:  131:	drawCard(player1, &G);
call    0 returned 100%
        1:  132:	printf("Last Card Drawn = %d, expected = %d\n", G.hand[player1][G.handCount[player1] - 1], G.deck[player1][G.deckCount[player1] - 1]);
call    0 returned 100%
        1:  133:	if (G.deckCount[player2] == 10){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  134:		printf("PASSED.\n");
call    0 returned 100%
        -:  135:	}
        -:  136:	else{
    #####:  137:		printf("FAILED.\n");
call    0 never executed
        -:  138:	}
        1:  139:	printf("--------------------------------------------\n");
call    0 returned 100%
        -:  140:	
        1:  141:	memcpy(&G, &RESET, sizeof(struct gameState)); // reset game state
        -:  142:	
        -:  143:	
        1:  144:	return 0;
        -:  145:}
