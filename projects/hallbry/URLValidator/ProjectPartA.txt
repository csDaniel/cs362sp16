PART A
Team Members:
Tiffany Chiou (chiout)
Bryant Hall  (hallbry)
Derek Jun (wongder) 



Explain testIsValid Function of UrlValidator test code. It is available under aburasali/UrlValidator folder.

The testIsValid function works by building up example URLs in a do-while loop. The UrlValidatorTest class defines several instance 
variable ResultPair arrays which pair a string value, which is a part of a URL, with a boolean value representing its validity.
Each ResultPair array represents a different part of a URL. In each do-while loop iteration,  a for loop runs and concatenates
strings from 5 different ResultPair arrays until a URL has been constructed. As each string is paired with a boolean value, an
expected boolean value is generated for the final, pieced together URL by comparing each URL fragment’s value with the expected
variable’s value, which is initialized as true. If all the string fragments are valid, then they all have a boolean value of true
and the final URL’s expected boolean value is true. On the other hand, if any of the fragments are not valid, then the expected boolean
value of the final URL is false.

The function now goes on and feeds this URL into the url.isValid() function and records the boolean result. If the result is true,
the URL is printed to console. It then compares the result with the expected boolean value in an assert statement. At the end of 
each do-while iteration, the incrementTestPartsIndex function is called. This function works by changing the values of the testPartsIndex
array, which governs which ResultPair value in each ResultPair array is used. Every time incrementTestPartsIndex is run, it starts at the last
index and decrements to 0, identifying which value in testPartsIndex should be incremented. Only one value in the testPartsIndex array is
incremented in each function call of incrementTestPartsIndex, in a way which ensures that every time the do-while loop function runs in the 
testIsValid function, a new, not yet tested, URL is being tested. The do-while loop runs until all the different combinations of fragments
in all 5 ResultPair arrays have been tested via the isValid() function.


Give how many total number of urls it is testing.
The total number of URLs is 31920.
 
Also, explain how it is building all the urls.
The class has several instance variable arrays that store data and others that keep track of the current index in the data arrays. 
First off, the class has several different arrays of ResultPair which consists of a String url fragment and and a boolean value
representing if it is valid.  An array of objects, testUrlParts, is an array of the 5 ResultPair array references, and the int array,
testPartsIndex, keeps track of the current indices in each of the 5 ResultPair arrays in testUrlParts.

Constructing the URL is done by going through a for loop to build up the url. The for loop iterates through the testPartsIndex array,
which as mentioned previously, keeps track of our relative location in each of the ResultPair data arrays. It iterates through this
array using testPartsIndexIndex integer, which is incremented via the for loop. The value at testPartsIndex[testPartsIndexIndex]
is stored in a integer called index. The ResultPair array represented in the testUrlParts array at testPartsIndexIndex is then set
to a local variable, part. The ResultPairt object pulled from part[index] contains a string value which is a URL fragment that can
be appended to testBuffer. testBuffer is a StringBuffer object in which we store our URL string as we continuously append string
fragments to it in every for loop iteration. The expected boolean value is continuously updated by comparing its existing value to
the boolean values associated with each URL fragment. 

After this for loop, we construct a URL and have its expected boolean result. We are able to run the unit test at this point.
The last part is the incrementTestPartsIndex method which is used increments one value in the testPartIndex array so we evaluate
new urls in every do-while iteration.  This method will iterate through the testPartsIndex array (from the last index to 0) and
increment (by 1) the first value in testPartsIndex array which is less than the length of its corresponding array in testUrlParts,
minus 1. From this we will evaluate all combinations of the 5 ResultPair arrays.
 
Give an example of valid url being tested and an invalid url being tested by testIsValid() method.
                
                         Valid:                                 Invalid: 
testUrlScheme            http://                                3ht://
testUrlAuthority         go.com                                 go.a
testUrlPort              :80                                    :-1
testPath                 /test1                                 /..




UrlValidator code is a direct copy paste of apache commons url validator code. The test file/code is also direct copy paste of apache commons test code. Do you think that a real world test (URL Validator's testIsValid() test in this case) is very different than the unit tests and card tests that we wrote (in terms of concepts & complexity)? Explain in few lines.


I think the concepts are similar, but the execution is different. In both we are devising testing regiments, running the tests then having a oracle determine 
if it is acceptable.  In both situations we know the expected result and can compare it to the generated result to see if they match. 
This particular unit test in the testIsValid function tests a lot of URLs - 31,920 URLs to be exact - which is a lot more input combinations that were tested
in our non-random unit and card tests in this class.
