CS 362 Project Part A
Team Members: Justin Pareno,  "Pareno, Justin James" <parenoj@oregonstate.edu>
              Sam Jones,      "Jones, Samuel" <jonesamu@oregonstate.edu>
	      Jerry Hayes,    "Hayes, Jerry" <hayesje@oregonstate.edu>


//--------------------------------------------------------//
//                   Part A Task Summary                 //
//--------------------------------------------------------//
How many total URLs are tested by the testIsValid function?   There are 2 URL tested at the beginning of the 
function, followed by 31920 URL permutations for a total of  31922 URL tests..  See Section 3 for details
 on URL permutations.
 
Explain the testIsValid function.  See Section 1 below.
 
Explain how it is building the URLs.  See Section 2 below


Give and example of a valid URL.   http://www.google.com:80/test1?action=view.  This example is explained 
in more detail in Section 2.
           
Give and example of an invalid URL.   http://www.google.com:-1/test1?action=view.  This example is
explained in more detail in Section 2.


Do you think that this real world test is very different from the unit tests and card tests?  Although this
real world testing explored a much higher percentage of the invalid input space than was  used with the unit 
tests we developed, the general idea is the same.  The first task is an attempt to limit the input space so 
that the generated test cases are “reasonable” representations of the type of inputs, including typical typos, 
that might be used as a URL. The The second task is to create the oracle that determines what the 
system (device under test) response should be given these inputs, while the third task is to compare the 
oracle with the actual system response.  The example given of real world testing and our toy world testing 
have same basic tasks and characteristics.




//------------------------------------------------------------
//         Section 1 (testIsValid FUNCTION)
//------------------------------------------------------------  
The testIsValid function is used to construct known valid and invalid URLs and check if the UrlValidator correctly
identifies which type they are.  The general flow of the testIsValid function can be described using the 
pseudo-code below. In step 1 a new instance of the UrlValidator is created that will be our DUT. Steps 2-7 forms
a do loop that is repeated for each URL tested. In step 3 a URL is constructed from a set of valid and invalid
URL parts. Section 2 describes how this is done. Step 4 is used to determine if the URL is valid(true) or 
invalid(false) as described in Section 2.  This is the answer we expect to get back from the UrlValidator in step 5. 
If the expected answer from step 4 is different from the actual test result in step 5, then an assertion is triggered
in step 6.  This process repeats for all URLs tested as described in Section 3.    

testIsValid Pseudo-Code
   1. urlVal <-- create a new instance of UrlValidator
   2. do
   3.    url <-- construct a URL for test (See Section 2)
   4.    expected <-- determine if URL is valid (See Section 2)
   5.    testResult <-- urlVal.isValid(url)
   6.    assert expected == testResult
   7. while more URL permutations (See Section 3)


//---------------------------------------------------------------
//          Section 2 (URL CONSTRUCTION)
//---------------------------------------------------------------       
The anatomy of a URL is represented by 5 basic parts such that when concatenated together they form a complete URL.
              
          URL = Protocol + Domain + Port + Path + Query


Each of the 5 parts are represented by a "ResultPair" that defines i) a text string
that represents a test case for the part and ii) a Boolean variable indicating whether 
the text string is a valid (true) or an invalid (false) format. For example, the 5 ResultPairs 
shown below that were obtained from Section 4 can be used to construct a valid URL since each 
part is a valid (true) representation.


    Protocol  = "http://", true           
    Domain   = "www.google.com", true
    Port         = ":80", true
    Path         = "/test1", true
    Query      = "?action=view", true
                           
    URL       = http://www.google.com:80/test1?action=view
    expected  = true && true && true && true && true = true


If  one or more of the parts used to construct the URL is invalid (false), then 
the overall URL is invalid. For example, the 5 ResultPairs below result in an
invalid URL since the port representation is invalid.
   
    Protocol  = "http://", true           
    Domain   = "www.google.com", true
    Port         = ":-1", false
    Path        = "/test1", true
    Query      = "?action=view", true
                           
    URL         = http://www.google.com:-1/test1?action=view
    expected  = true && true && false && true && true = false
 //--------------------------------------------------------------
//             Section 3 (URL PERMUTATIONS)
//--------------------------------------------------------------
ResultPairs used in each part of the URL are stored in an array as shown below


// Part              Array           Total      Valid    InValid
Protocol     testUrlScheme             8          3         5
Domain      testUrlAuthority          19          7        12
Port            testUrlPort            7          5         2
Path           testPath               10          6         4          
Query        testUrlQuery              3          3         0
 
The total number of tested URLs is calculated by taking the product of the total ResultPairs for each array.
         
    Total number of URLs tested = 8 * 19 * 7 * 10 * 3 = 31920


The total number of valid URLs that are tested is calculated by taking the product of the valid ResultPairs for
each array.         
               
    Total number of valid URLs tested = 3 * 7 * 5 * 6 * 3 = 1890
         
The total number of invalid URLs that are tested is calculated by subtracting the valid URLs from the total tested.
         
    Total number of invalid URLs tested = 31920 - 1890 = 30030


 
//------------------------------------------------------------
//       Section 4 (TESTED RESULT PAIRS)
//------------------------------------------------------------        
  
testUrlScheme = (9 ResultPairs:         3-true, 5-false)
                "http://", true
                 "ftp://", true
                 "h3t://", true
                 "3ht://", false
                 "http:/", false
                  "http:", false
                  "http/", false
                    "://", false
                       "", true     // This one is not tested
                                   
 
testUrlAuthority  (19 ResultPairs:   7-true 12-false)
         "www.google.com",  true
                 "go.com",  true
                  "go.au",  true
                "0.0.0.0",  true           
        "255.255.255.255",  true
        "256.256.256.256", false
                "255.com",  true
              "1.2.3.4.5", false
               "1.2.3.4.", false  
                  "1.2.3", false
               ".1.2.3.4", false
                   "go.a", false
                 "go.a1a", false
                  "go.cc", true
                 "go.1aa", false
                   "aaa.", false
                   ".aaa", false
                    "aaa", false
                       "", false
  
testUrlPort (7 ResultPairs:   5-true 2-false)
                    ":80", true
                 ":65535", true
                     ":0", true
                       "", true
                    ":-1", false
                 ":65636", true
                   ":65a", false
  
testPath (10 ResultPairs:  6-true 4-false)
                 "/test1", true
                  "/t123", true
                   "/$23", true
                    "/..", false
                   "/../", false
                "/test1/", true
                       "", true
            "/test1/file", true
              "/..//file", false
           "/test1//file", false


testUrlQuery (3 ResultPairs   3-true 0-false)
           "?action=view", true
    ?action=edit&mode=up", true
                       "", true


