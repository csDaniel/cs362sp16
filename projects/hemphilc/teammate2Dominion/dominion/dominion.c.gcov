        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
       90:   10:int compare(const void* a, const void* b) {
       90:   11:  if (*(int*)a > *(int*)b)
    #####:   12:    return 1;
       90:   13:  if (*(int*)a < *(int*)b)
       24:   14:    return -1;
       66:   15:  return 0;
        -:   16:}
        -:   17:
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
        2:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) 
        -:   41:{
        -:   42:
        -:   43:  int i;
        -:   44:  int j;
        -:   45:  int it;			
        -:   46:  //set up random number generator
        2:   47:  SelectStream(1);
        2:   48:  PutSeed((long)randomSeed);
        -:   49:  
        -:   50:  //check number of players
        2:   51:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   52:    {
    #####:   53:      return -1;
        -:   54:    }
        -:   55:
        -:   56:  //set number of players
        2:   57:  state->numPlayers = numPlayers;
        -:   58:
        -:   59:  //check selected kingdom cards are different
       22:   60:  for (i = 0; i < 10; i++)
        -:   61:    {
      220:   62:      for (j = 0; j < 10; j++)
        -:   63:        {
      200:   64:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   65:	    {
    #####:   66:	      return -1;
        -:   67:	    }
        -:   68:        }
        -:   69:    }
        -:   70:
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
        2:   76:  if (numPlayers == 2)
        -:   77:    {
        1:   78:      state->supplyCount[curse] = 10;
        -:   79:    }
        1:   80:  else if (numPlayers == 3)
        -:   81:    {
    #####:   82:      state->supplyCount[curse] = 20;
        -:   83:    }
        -:   84:  else
        -:   85:    {
        1:   86:      state->supplyCount[curse] = 30;
        -:   87:    }
        -:   88:
        -:   89:  //set number of Victory cards
        2:   90:  if (numPlayers == 2)
        -:   91:    {
        1:   92:      state->supplyCount[estate] = 8;
        1:   93:      state->supplyCount[duchy] = 8;
        1:   94:      state->supplyCount[province] = 8;
        -:   95:    }
        -:   96:  else
        -:   97:    {
        1:   98:      state->supplyCount[estate] = 12;
        1:   99:      state->supplyCount[duchy] = 12;
        1:  100:      state->supplyCount[province] = 12;
        -:  101:    }
        -:  102:
        -:  103:  //set number of Treasure cards
        2:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        2:  105:  state->supplyCount[silver] = 40;
        2:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
       42:  109:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  110:    {
      330:  111:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  112:	    {
      310:  113:	      if (kingdomCards[j] == i)
        -:  114:	      {
        -:  115:  	      //check if card is a 'Victory' Kingdom card
       20:  116:  	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  117:  		    {
    #####:  118:      		  if (numPlayers == 2){ 
    #####:  119:      		    state->supplyCount[i] = 8; 
        -:  120:      		  }
    #####:  121:      		  else{ state->supplyCount[i] = 12; }
        -:  122:    		  }
        -:  123:  	      else
        -:  124:      		{
       20:  125:      		  state->supplyCount[i] = 10;
        -:  126:      		}
       20:  127:      	  break;
        -:  128:	      }
        -:  129:	      else    //card is not in the set choosen for the game
        -:  130:  	    {
      290:  131:  	      state->supplyCount[i] = -1;
        -:  132:  	    }
        -:  133:	    }
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
        8:  140:  for (i = 0; i < numPlayers; i++)
        -:  141:    {
        6:  142:      state->deckCount[i] = 0;
       24:  143:      for (j = 0; j < 3; j++)
        -:  144:	{
       18:  145:	  state->deck[i][j] = estate;
       18:  146:	  state->deckCount[i]++;
        -:  147:	}
       48:  148:      for (j = 3; j < 10; j++)
        -:  149:	{
       42:  150:	  state->deck[i][j] = copper;
       42:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
        8:  156:  for (i = 0; i < numPlayers; i++)
        -:  157:    {
        6:  158:      if ( shuffle(i, state) < 0 )
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
        8:  165:  for (i = 0; i < numPlayers; i++)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
        6:  168:      state->handCount[i] = 0;
        6:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
       56:  178:  for (i = 0; i <= treasure_map; i++)
        -:  179:    {
       54:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
        2:  184:  state->outpostPlayed = 0;
        2:  185:  state->phase = 0;
        2:  186:  state->numActions = 1;
        2:  187:  state->numBuys = 1;
        2:  188:  state->playedCardCount = 0;
        2:  189:  state->whoseTurn = 0;
        2:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
       12:  194:  for (it = 0; it < 5; it++){
       10:  195:    drawCard(state->whoseTurn, state);
        -:  196:  }
        -:  197:
        2:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
        2:  200:  return 0;
        -:  201:}
        -:  202:
        6:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
        6:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
        6:  211:  if (state->deckCount[player] < 1)
    #####:  212:    return -1;
        6:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
       72:  216:  while (state->deckCount[player] > 0) {
       60:  217:    card = floor(Random() * state->deckCount[player]);
       60:  218:    newDeck[newDeckPos] = state->deck[player][card];
       60:  219:    newDeckPos++;
      209:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
      149:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
       60:  223:    state->deckCount[player]--;
        -:  224:  }
       66:  225:  for (i = 0; i < newDeckPos; i++) {
       60:  226:    state->deck[player][i] = newDeck[i];
       60:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
        6:  230:  return 0;
        -:  231:}
        -:  232:
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
        -:  272:}
        -:  273:
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
    #####:  322:int supplyCount(int card, struct gameState *state) {
    #####:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
        -:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
        -:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
        6:  348:int whoseTurn(struct gameState *state) {
        6:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
    #####:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
    #####:  397:  if (state->supplyCount[province] == 0)
        -:  398:    {
    #####:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
    #####:  403:  j = 0;
    #####:  404:  for (i = 0; i < 25; i++)
        -:  405:    {
    #####:  406:      if (state->supplyCount[i] == 0)
        -:  407:	{
    #####:  408:	  j++;
        -:  409:	}
        -:  410:    }
    #####:  411:  if ( j >= 3)
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
    #####:  416:  return 0;
        -:  417:}
        -:  418:
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
    #####:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
        -:  470:	{
    #####:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
        -:  515:	{
    #####:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
       48:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
       48:  530:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
    #####:  535:    for (i = 0; i < state->discardCount[player];i++){
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
    #####:  540:    state->deckCount[player] = state->discardCount[player];
    #####:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
    #####:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
    #####:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
    #####:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
    #####:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
    #####:  561:    if (deckCounter == 0)
    #####:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
       48:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
       48:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
       48:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       48:  578:    state->deckCount[player]--;
       48:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
       48:  582:  return 0;
        -:  583:}
        -:  584:
    #####:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
    #####:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
        -:  646:}
        -:  647:
        6:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int k;
        -:  653:  int x;
        -:  654:  int index;
        6:  655:  int currentPlayer = whoseTurn(state);
        6:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:
        6:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
        6:  660:  int z = 0;// this is the counter for the temp hand
        6:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
        6:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:		adventurer_effect(currentPlayer, state);
    #####:  671:		return 0;
        -:  672:			
        -:  673:    case council_room:
        6:  674:		council_room_effect(currentPlayer, state, handPos);
        6:  675:		return 0;
        -:  676:			
        -:  677:    case feast:
        -:  678:      //gain card with cost up to 5
        -:  679:      //Backup hand
    #####:  680:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  681:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  682:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  683:      }
        -:  684:      //Backup hand
        -:  685:
        -:  686:      //Update Coins for Buy
    #####:  687:      updateCoins(currentPlayer, state, 5);
    #####:  688:      x = 1;//Condition to loop on
    #####:  689:      while( x == 1) {//Buy one card
    #####:  690:	if (supplyCount(choice1, state) <= 0){
        -:  691:	  if (DEBUG)
        -:  692:	    printf("None of that card left, sorry!\n");
        -:  693:
        -:  694:	  if (DEBUG){
        -:  695:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  696:	  }
        -:  697:	}
    #####:  698:	else if (state->coins < getCost(choice1)){
    #####:  699:	  printf("That card is too expensive!\n");
        -:  700:
        -:  701:	  if (DEBUG){
        -:  702:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  703:	  }
        -:  704:	}
        -:  705:	else{
        -:  706:
        -:  707:	  if (DEBUG){
        -:  708:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  709:	  }
        -:  710:
    #####:  711:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  712:	  x = 0;//No more buying cards
        -:  713:
        -:  714:	  if (DEBUG){
        -:  715:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  716:	  }
        -:  717:
        -:  718:	}
        -:  719:      }     
        -:  720:
        -:  721:      //Reset Hand
    #####:  722:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  723:	state->hand[currentPlayer][i] = temphand[i];
    #####:  724:	temphand[i] = -1;
        -:  725:      }
        -:  726:      //Reset Hand
        -:  727:      			
    #####:  728:      return 0;
        -:  729:			
        -:  730:    case gardens:
    #####:  731:      return -1;
        -:  732:			
        -:  733:    case mine:
    #####:  734:		mine_effect(choice1, choice2, currentPlayer, state, handPos);
    #####:  735:		return 0;
        -:  736:			
        -:  737:    case remodel:
    #####:  738:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  739:
    #####:  740:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  741:	{
    #####:  742:	  return -1;
        -:  743:	}
        -:  744:
    #####:  745:      gainCard(choice2, state, 0, currentPlayer);
        -:  746:
        -:  747:      //discard card from hand
    #####:  748:      discardCard(handPos, currentPlayer, state, 0);
        -:  749:
        -:  750:      //discard trashed card
    #####:  751:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  752:	{
    #####:  753:	  if (state->hand[currentPlayer][i] == j)
        -:  754:	    {
    #####:  755:	      discardCard(i, currentPlayer, state, 0);			
    #####:  756:	      break;
        -:  757:	    }
        -:  758:	}
        -:  759:
        -:  760:
    #####:  761:      return 0;
        -:  762:		
        -:  763:    case smithy:
    #####:  764:		smithy_effect(currentPlayer, state, handPos);
    #####:  765:		return 0;
        -:  766:		
        -:  767:	case village:
    #####:  768:		village_effect(currentPlayer, state, handPos);
    #####:  769:		return 0;
        -:  770:		
        -:  771:    case baron:
    #####:  772:      state->numBuys++;//Increase buys by 1!
    #####:  773:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  774:	int p = 0;//Iterator for hand!
    #####:  775:	int card_not_discarded = 1;//Flag for discard set!
    #####:  776:	while(card_not_discarded){
    #####:  777:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  778:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  779:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  780:	    state->discardCount[currentPlayer]++;
    #####:  781:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  782:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  783:	    }
    #####:  784:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  785:	    state->handCount[currentPlayer]--;
    #####:  786:	    card_not_discarded = 0;//Exit the loop
        -:  787:	  }
    #####:  788:	  else if (p > state->handCount[currentPlayer]){
        -:  789:	    if(DEBUG) {
        -:  790:	      printf("No estate cards in your hand, invalid choice\n");
        -:  791:	      printf("Must gain an estate if there are any\n");
        -:  792:	    }
    #####:  793:	    if (supplyCount(estate, state) > 0){
    #####:  794:	      gainCard(estate, state, 0, currentPlayer);
    #####:  795:	      state->supplyCount[estate]--;//Decrement estates
    #####:  796:	      if (supplyCount(estate, state) == 0){
    #####:  797:		isGameOver(state);
        -:  798:	      }
        -:  799:	    }
    #####:  800:	    card_not_discarded = 0;//Exit the loop
        -:  801:	  }
        -:  802:			    
        -:  803:	  else{
    #####:  804:	    p++;//Next card
        -:  805:	  }
        -:  806:	}
        -:  807:      }
        -:  808:			    
        -:  809:      else{
    #####:  810:	if (supplyCount(estate, state) > 0){
    #####:  811:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  812:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  813:	  if (supplyCount(estate, state) == 0){
    #####:  814:	    isGameOver(state);
        -:  815:	  }
        -:  816:	}
        -:  817:      }
        -:  818:	    
        -:  819:      
    #####:  820:      return 0;
        -:  821:		
        -:  822:    case great_hall:
        -:  823:      //+1 Card
    #####:  824:      drawCard(currentPlayer, state);
        -:  825:			
        -:  826:      //+1 Actions
    #####:  827:      state->numActions++;
        -:  828:			
        -:  829:      //discard card from hand
    #####:  830:      discardCard(handPos, currentPlayer, state, 0);
    #####:  831:      return 0;
        -:  832:		
        -:  833:    case minion:
        -:  834:      //+1 action
    #####:  835:      state->numActions++;
        -:  836:			
        -:  837:      //discard card from hand
    #####:  838:      discardCard(handPos, currentPlayer, state, 0);
        -:  839:			
    #####:  840:      if (choice1)		//+2 coins
        -:  841:	{
    #####:  842:	  state->coins = state->coins + 2;
        -:  843:	}
        -:  844:			
    #####:  845:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  846:	{
        -:  847:	  //discard hand
    #####:  848:	  while(numHandCards(state) > 0)
        -:  849:	    {
    #####:  850:	      discardCard(handPos, currentPlayer, state, 0);
        -:  851:	    }
        -:  852:				
        -:  853:	  //draw 4
    #####:  854:	  for (i = 0; i < 4; i++)
        -:  855:	    {
    #####:  856:	      drawCard(currentPlayer, state);
        -:  857:	    }
        -:  858:				
        -:  859:	  //other players discard hand and redraw if hand size > 4
    #####:  860:	  for (i = 0; i < state->numPlayers; i++)
        -:  861:	    {
    #####:  862:	      if (i != currentPlayer)
        -:  863:		{
    #####:  864:		  if ( state->handCount[i] > 4 )
        -:  865:		    {
        -:  866:		      //discard hand
    #####:  867:		      while( state->handCount[i] > 0 )
        -:  868:			{
    #####:  869:			  discardCard(handPos, i, state, 0);
        -:  870:			}
        -:  871:							
        -:  872:		      //draw 4
    #####:  873:		      for (j = 0; j < 4; j++)
        -:  874:			{
    #####:  875:			  drawCard(i, state);
        -:  876:			}
        -:  877:		    }
        -:  878:		}
        -:  879:	    }
        -:  880:				
        -:  881:	}
    #####:  882:      return 0;
        -:  883:		
        -:  884:    case steward:
    #####:  885:      if (choice1 == 1)
        -:  886:	{
        -:  887:	  //+2 cards
    #####:  888:	  drawCard(currentPlayer, state);
    #####:  889:	  drawCard(currentPlayer, state);
        -:  890:	}
    #####:  891:      else if (choice1 == 2)
        -:  892:	{
        -:  893:	  //+2 coins
    #####:  894:	  state->coins = state->coins + 2;
        -:  895:	}
        -:  896:      else
        -:  897:	{
        -:  898:	  //trash 2 cards in hand
    #####:  899:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  900:	  discardCard(choice3, currentPlayer, state, 1);
        -:  901:	}
        -:  902:			
        -:  903:      //discard card from hand
    #####:  904:      discardCard(handPos, currentPlayer, state, 0);
    #####:  905:      return 0;
        -:  906:		
        -:  907:    case tribute:
    #####:  908:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  909:	if (state->deckCount[nextPlayer] > 0){
    #####:  910:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  911:	  state->deckCount[nextPlayer]--;
        -:  912:	}
    #####:  913:	else if (state->discardCount[nextPlayer] > 0){
    #####:  914:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  915:	  state->discardCount[nextPlayer]--;
        -:  916:	}
        -:  917:	else{
        -:  918:	  //No Card to Reveal
        -:  919:	  if (DEBUG){
        -:  920:	    printf("No cards to reveal\n");
        -:  921:	  }
        -:  922:	}
        -:  923:      }
        -:  924:	    
        -:  925:      else{
    #####:  926:	if (state->deckCount[nextPlayer] == 0){
    #####:  927:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  928:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  929:	    state->deckCount[nextPlayer]++;
    #####:  930:	    state->discard[nextPlayer][i] = -1;
    #####:  931:	    state->discardCount[nextPlayer]--;
        -:  932:	  }
        -:  933:			    
    #####:  934:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  935:	} 
    #####:  936:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  937:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  938:	state->deckCount[nextPlayer]--;
    #####:  939:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  940:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  941:	state->deckCount[nextPlayer]--;
        -:  942:      }    
        -:  943:		       
    #####:  944:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  945:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  946:	state->playedCardCount++;
    #####:  947:	tributeRevealedCards[1] = -1;
        -:  948:      }
        -:  949:
    #####:  950:      for (i = 0; i <= 2; i ++){
    #####:  951:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  952:	  state->coins += 2;
        -:  953:	}
        -:  954:		    
    #####:  955:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  956:	  drawCard(currentPlayer, state);
    #####:  957:	  drawCard(currentPlayer, state);
        -:  958:	}
        -:  959:	else{//Action Card
    #####:  960:	  state->numActions = state->numActions + 2;
        -:  961:	}
        -:  962:      }
        -:  963:	    
    #####:  964:      return 0;
        -:  965:		
        -:  966:    case ambassador:
    #####:  967:      j = 0;		//used to check if player has enough cards to discard
        -:  968:
    #####:  969:      if (choice2 > 2 || choice2 < 0)
        -:  970:	{
    #####:  971:	  return -1;				
        -:  972:	}
        -:  973:
    #####:  974:      if (choice1 == handPos)
        -:  975:	{
    #####:  976:	  return -1;
        -:  977:	}
        -:  978:
    #####:  979:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  980:	{
    #####:  981:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  982:	    {
    #####:  983:	      j++;
        -:  984:	    }
        -:  985:	}
    #####:  986:      if (j < choice2)
        -:  987:	{
    #####:  988:	  return -1;				
        -:  989:	}
        -:  990:
        -:  991:      if (DEBUG) 
        -:  992:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  993:
        -:  994:      //increase supply count for choosen card by amount being discarded
    #####:  995:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  996:			
        -:  997:      //each other player gains a copy of revealed card
    #####:  998:      for (i = 0; i < state->numPlayers; i++)
        -:  999:	{
    #####: 1000:	  if (i != currentPlayer)
        -: 1001:	    {
    #####: 1002:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1003:	    }
        -: 1004:	}
        -: 1005:
        -: 1006:      //discard played card from hand
    #####: 1007:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1008:
        -: 1009:      //trash copies of cards returned to supply
    #####: 1010:      for (j = 0; j < choice2; j++)
        -: 1011:	{
    #####: 1012:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1013:	    {
    #####: 1014:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1015:		{
    #####: 1016:		  discardCard(i, currentPlayer, state, 1);
    #####: 1017:		  break;
        -: 1018:		}
        -: 1019:	    }
        -: 1020:	}			
        -: 1021:
    #####: 1022:      return 0;
        -: 1023:		
        -: 1024:    case cutpurse:
        -: 1025:
    #####: 1026:      updateCoins(currentPlayer, state, 2);
    #####: 1027:      for (i = 0; i < state->numPlayers; i++)
        -: 1028:	{
    #####: 1029:	  if (i != currentPlayer)
        -: 1030:	    {
    #####: 1031:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1032:		{
    #####: 1033:		  if (state->hand[i][j] == copper)
        -: 1034:		    {
    #####: 1035:		      discardCard(j, i, state, 0);
    #####: 1036:		      break;
        -: 1037:		    }
    #####: 1038:		  if (j == state->handCount[i])
        -: 1039:		    {
    #####: 1040:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1041:			{
        -: 1042:			  if (DEBUG)
        -: 1043:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1044:			}	
    #####: 1045:		      break;
        -: 1046:		    }		
        -: 1047:		}
        -: 1048:					
        -: 1049:	    }
        -: 1050:				
        -: 1051:	}				
        -: 1052:
        -: 1053:      //discard played card from hand
    #####: 1054:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1055:
    #####: 1056:      return 0;
        -: 1057:
        -: 1058:		
        -: 1059:    case embargo: 
        -: 1060:      //+2 Coins
    #####: 1061:      state->coins = state->coins + 2;
        -: 1062:			
        -: 1063:      //see if selected pile is in play
    #####: 1064:      if ( state->supplyCount[choice1] == -1 )
        -: 1065:	{
    #####: 1066:	  return -1;
        -: 1067:	}
        -: 1068:			
        -: 1069:      //add embargo token to selected supply pile
    #####: 1070:      state->embargoTokens[choice1]++;
        -: 1071:			
        -: 1072:      //trash card
    #####: 1073:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1074:      return 0;
        -: 1075:		
        -: 1076:    case outpost:
        -: 1077:      //set outpost flag
    #####: 1078:      state->outpostPlayed++;
        -: 1079:			
        -: 1080:      //discard card
    #####: 1081:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1082:      return 0;
        -: 1083:		
        -: 1084:    case salvager:
        -: 1085:      //+1 buy
    #####: 1086:      state->numBuys++;
        -: 1087:			
    #####: 1088:      if (choice1)
        -: 1089:	{
        -: 1090:	  //gain coins equal to trashed card
    #####: 1091:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1092:	  //trash card
    #####: 1093:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1094:	}
        -: 1095:			
        -: 1096:      //discard card
    #####: 1097:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1098:      return 0;
        -: 1099:		
        -: 1100:    case sea_hag:
    #####: 1101:      for (i = 0; i < state->numPlayers; i++){
    #####: 1102:	if (i != currentPlayer){
    #####: 1103:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1104:	  state->discardCount[i]++;
    #####: 1105:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1106:	}
        -: 1107:      }
    #####: 1108:      return 0;
        -: 1109:		
        -: 1110:    case treasure_map:
        -: 1111:      //search hand for another treasure_map
    #####: 1112:      index = -1;
    #####: 1113:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1114:	{
    #####: 1115:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1116:	    {
    #####: 1117:	      index = i;
    #####: 1118:	      break;
        -: 1119:	    }
        -: 1120:	}
    #####: 1121:      if (index > -1)
        -: 1122:	{
        -: 1123:	  //trash both treasure cards
    #####: 1124:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1125:	  discardCard(index, currentPlayer, state, 1);
        -: 1126:
        -: 1127:	  //gain 4 Gold cards
    #####: 1128:	  for (i = 0; i < 4; i++)
        -: 1129:	    {
    #####: 1130:	      gainCard(gold, state, 1, currentPlayer);
        -: 1131:	    }
        -: 1132:				
        -: 1133:	  //return success
    #####: 1134:	  return 1;
        -: 1135:	}
        -: 1136:			
        -: 1137:      //no second treasure_map found in hand
    #####: 1138:      return -1;
        -: 1139:    }
        -: 1140:	
    #####: 1141:  return -1;
        -: 1142:}
        -: 1143:
    #####: 1144:int adventurer_effect(int currentPlayer, struct gameState *state)
        -: 1145:{
        -: 1146:	int temphand[MAX_HAND];// moved above the if statement
    #####: 1147:	int z = 0;// this is the counter for the temp hand
    #####: 1148:	int drawntreasure=0;	
        -: 1149:	int cardDrawn;
        -: 1150:	  
        -: 1151:	//case adventurer:
    #####: 1152:	while(drawntreasure<=2)
        -: 1153:	{
    #####: 1154:		if (state->deckCount[currentPlayer] <1)
        -: 1155:		//if the deck is empty we need to shuffle discard and add to deck
    #####: 1156:			shuffle(currentPlayer, state);
        -: 1157:
    #####: 1158:		drawCard(currentPlayer, state);
    #####: 1159:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1160:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1161:			drawntreasure++;
        -: 1162:		else
        -: 1163:		{
    #####: 1164:			temphand[z]=cardDrawn;
    #####: 1165:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1166:			z++;
        -: 1167:		}
        -: 1168:	}
        -: 1169:	
    #####: 1170:	while(z-1>=0)
        -: 1171:	{
    #####: 1172:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1173:		z=z-1;
        -: 1174:	}
    #####: 1175:	return 0;
        -: 1176:}
        -: 1177:
    #####: 1178:int smithy_effect(int currentPlayer, struct gameState *state, int handPos)
        -: 1179:{
        -: 1180:	int i;
        -: 1181:	  //+3 Cards
    #####: 1182:	for (i = 0; i <= 3; i++)
        -: 1183:	{
    #####: 1184:	  drawCard(currentPlayer, state);
        -: 1185:	}
        -: 1186:			
        -: 1187:	  //discard card from hand
    #####: 1188:	 discardCard(handPos, currentPlayer, state, 0);
    #####: 1189:	 return 0;
        -: 1190:}
        -: 1191:
    #####: 1192:int village_effect(int currentPlayer, struct gameState *state, int handPos)
        -: 1193:{
        -: 1194:	  //+1 Card
    #####: 1195:	 drawCard(currentPlayer, state);
        -: 1196:			
        -: 1197:	  //+2 Actions
    #####: 1198:	 state->numActions = state->numActions + 2;
        -: 1199:			
        -: 1200:	  //discard played card from hand
    #####: 1201:	 discardCard(handPos, currentPlayer, state, 1);
    #####: 1202:	 return 0;
        -: 1203:}
        -: 1204:
        6: 1205:int council_room_effect(int currentPlayer, struct gameState *state, int handPos)
        -: 1206:{
        -: 1207:	int i;
        -: 1208:	//+4 Cards
       30: 1209:	for (i = 0; i < 4; i++)
        -: 1210:	{
       24: 1211:	  drawCard(currentPlayer, state);
        -: 1212:	}
        -: 1213:				
        -: 1214:	//+1 Buy
        6: 1215:	state->numBuys++;
        -: 1216:			
        -: 1217:	  //Each other player draws a card
       26: 1218:	for (i = 0; i < state->numPlayers; i++)
        -: 1219:	{
       20: 1220:	  if ( i != currentPlayer )
        -: 1221:		{
       14: 1222:		  drawCard(i, state);
        -: 1223:		}
        -: 1224:	}
        -: 1225:			
        -: 1226:      //put played card in played card pile
        6: 1227:     discardCard(handPos, currentPlayer, state, 0);
        6: 1228:	 return 0;
        -: 1229:}
        -: 1230:
    #####: 1231:int mine_effect(int choice1, int choice2, int currentPlayer, struct gameState *state, int handPos)
        -: 1232:{
        -: 1233:	int i, j;
    #####: 1234:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1235:
    #####: 1236:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -: 1237:	{
    #####: 1238:	  return -1;
        -: 1239:	}
        -: 1240:		
    #####: 1241:    if (choice2 > treasure_map || choice2 < curse)
        -: 1242:	{
    #####: 1243:	  return -1;
        -: 1244:	}
        -: 1245:
    #####: 1246:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -: 1247:	{
    #####: 1248:	  return -1;
        -: 1249:	}
        -: 1250:
    #####: 1251:    gainCard(choice2, state, 2, currentPlayer);
        -: 1252:
        -: 1253:      //discard card from hand
    #####: 1254:    discardCard(handPos, currentPlayer, state, 0);
        -: 1255:
        -: 1256:      //discard trashed card
    #####: 1257:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1258:	{
    #####: 1259:	  if (state->hand[currentPlayer][i] == j)
        -: 1260:	    {
    #####: 1261:	      discardCard(i, currentPlayer, state, 1);			
    #####: 1262:	      break;
        -: 1263:	    }
        -: 1264:	}	
    #####: 1265:	return 0;
        -: 1266:}
        -: 1267:			
        6: 1268:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1269:{
        -: 1270:	
        -: 1271:  //if card is not trashed, added to Played pile 
        6: 1272:  if (trashFlag < 1)
        -: 1273:    {
        -: 1274:      //add card to played pile
        6: 1275:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        6: 1276:      state->playedCardCount++;
        -: 1277:    }
        -: 1278:	
        -: 1279:  //set played card to -1
        6: 1280:  state->hand[currentPlayer][handPos] = -1;
        -: 1281:	
        -: 1282:  //remove card from player's hand
        6: 1283:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1284:    {
        -: 1285:      //reduce number of cards in hand
    #####: 1286:      state->handCount[currentPlayer]--;
        -: 1287:    }
        6: 1288:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1289:    {
        -: 1290:      //reduce number of cards in hand
    #####: 1291:      state->handCount[currentPlayer]--;
        -: 1292:    }
        -: 1293:  else 	
        -: 1294:    {
        -: 1295:      //replace discarded card with last card in hand
        6: 1296:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1297:      //set last card to -1
        6: 1298:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1299:      //reduce number of cards in hand
        6: 1300:      state->handCount[currentPlayer]--;
        -: 1301:    }
        -: 1302:	
        6: 1303:  return 0;
        -: 1304:}
        -: 1305:
    #####: 1306:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1307:{
        -: 1308:  //Note: supplyPos is enum of choosen card
        -: 1309:	
        -: 1310:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1311:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1312:    {
    #####: 1313:      return -1;
        -: 1314:    }
        -: 1315:	
        -: 1316:  //added card for [whoseTurn] current player:
        -: 1317:  // toFlag = 0 : add to discard
        -: 1318:  // toFlag = 1 : add to deck
        -: 1319:  // toFlag = 2 : add to hand
        -: 1320:
    #####: 1321:  if (toFlag == 1)
        -: 1322:    {
    #####: 1323:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1324:      state->deckCount[player]++;
        -: 1325:    }
    #####: 1326:  else if (toFlag == 2)
        -: 1327:    {
    #####: 1328:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1329:      state->handCount[player]++;
        -: 1330:    }
        -: 1331:  else
        -: 1332:    {
    #####: 1333:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1334:      state->discardCount[player]++;
        -: 1335:    }
        -: 1336:	
        -: 1337:  //decrease number in supply pile
    #####: 1338:  state->supplyCount[supplyPos]--;
        -: 1339:	 
    #####: 1340:  return 0;
        -: 1341:}
        -: 1342:
        2: 1343:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1344:{
        -: 1345:  int i;
        -: 1346:	
        -: 1347:  //reset coin count
        2: 1348:  state->coins = 0;
        -: 1349:
        -: 1350:  //add coins for each Treasure card in player's hand
       12: 1351:  for (i = 0; i < state->handCount[player]; i++)
        -: 1352:    {
       10: 1353:      if (state->hand[player][i] == copper)
        -: 1354:	{
        8: 1355:	  state->coins += 1;
        -: 1356:	}
        2: 1357:      else if (state->hand[player][i] == silver)
        -: 1358:	{
    #####: 1359:	  state->coins += 2;
        -: 1360:	}
        2: 1361:      else if (state->hand[player][i] == gold)
        -: 1362:	{
    #####: 1363:	  state->coins += 3;
        -: 1364:	}	
        -: 1365:    }	
        -: 1366:
        -: 1367:  //add bonus
        2: 1368:  state->coins += bonus;
        -: 1369:
        2: 1370:  return 0;
        -: 1371:}
        -: 1372:
        -: 1373:
        -: 1374://end of dominion.c
        -: 1375:
