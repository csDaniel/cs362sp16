Task: Final Project Part A
File: ProjectPartA.txt
Team: Jordan White
	   Hong Lin
	   Patrick Ho

Q & A
Explain testIsValid() Function of UrlValidator test code.

The function builds urls from four arrays that contain various parts of a URL and validates them using the UrlValidator object.

	The four parts are: 1.) Scheme (http, ftp, h3t, 3ht, or “no prefix”) 
	2.) Authority (akin to domain), 3.) Port number (identifies the process), and
	4.) Resource paths (paths to resources on the server). All permutations from 
	these four parts are built and tested using a UrlValidator object. Moreover, 
	these url parts are composed by a ResultPair class. Each ResultPair contains 
	a string of the url part and a boolean of whether this url part is valid. For
	example, the result pair for the scheme “3ht” would have a boolean value 
	“false” in the ResultPair object because “3ht” is not a valid part to the 
	url. Because the URL is built with four parts, each part’s ResultPair boolean
	is short circuited to determine the final permutation’s validity. This 
	boolean value is then used to assert that the UrlValidator works as expected.

Give how many total number of urls it is testing. 

	There are 31920 urls being tested by testIsValid()

Explain how it is building all the urls. 

	There are multiple arrays of “ResultPair” objects that match example values 
	with true or false depending on whether or not the value is valid. These 
	arrays represent different parts of a URL and include testUrlScheme, 
	testUrlAuthority, testUrlPort, testPath, testUrlQuery, and 
	testUrlPathOptions. Two examples from testUrlScheme  are ("http://", true) 
	and ("http/", false). TestObjects are created that contain these 
	“ResultPair” arrays. The testIsValid() has a loop to create and test all the 
	permutations of the different url parts. It uses a testPartsIndex array and 
	the incrementTestPartsIndex() function to help with this. 


Give an example of valid url being tested and an invalid url being tested by 
testIsValid() method.  

	Valid URL - http://www.google.com:80/test1?action=view
	Invalid URL - http://www.google.com:80/..?action=view

UrlValidator code is a direct copy paste of apache commons url validator code. 
The test file/code is also direct copy paste of apache commons test code. Do yo 
think that a real world test (URL Validator's testIsValid() test in this case) 
is very different than the unit tests and card tests that we wrote (in terms of 
concepts & complexity)? Explain in few lines. 

	The real world test of the URL Validator's testIsValid() is similar to card 
	tests and unit tests we are attempting to write in class in terms of 
	complexity and concepts. The testIsValid() test case creates an instance of 
	an object that it wants to test and identify what needs to be tested and 
	perform the steps we set to make sure all the possible cases are being 
	covered. In the card tests and unit tests for dominion we also create 
	preconditions by generating the game state and then copy it, and then we give
	it a specific set of inputs within the range of possible inputs that could be
	encountered during execution to prove that we get the expected outcome.


