        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <assert.h>
        -:    3:#include <string.h>
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include "rngs.h"
        -:    7:
function main called 1 returned 100% blocks executed 62%
        -:    8:int main(){
        -:    9:
        -:   10:   struct gameState state, saveState;
        1:   11:   int numPlayers = 2, i;
        1:   12:   int handPos = 0, choice1 = 0, choice2 = 0, choice3 = 0;
        1:   13:   int *bonus = NULL;
        1:   14:   int newCards = 0, discard = 0, addActions = 0;
        1:   15:   int kingdom[10] = {council_room, adventurer, gardens, mine, ambassador,  
        -:   16:                     remodel, great_hall, embargo, sea_hag, outpost};
        1:   17:   int seed = 1020;
        -:   18:
        1:   19:   initializeGame(numPlayers, kingdom, seed, &state);
        1:   20:   int currentPlayer = state.whoseTurn;
        -:   21:   // Save the state as-is
        1:   22:   memcpy(&saveState, &state, sizeof(struct gameState));
        -:   23:   /* business requirements
        -:   24:      
        -:   25:      description: testing village card, 
        -:   26:
        -:   27:      1. Hand should have 1 extra card minus this one that's played. There
        -:   28:         should also be two additional actions allowed.
        -:   29:      2. Number of buys or coins should not change.
        -:   30:      3. No state change should occur for other players.
        -:   31:      4. No state change should occur to the victory and kingdom card piles.
        -:   32:
        -:   33:      end requirements*/
        1:   34:   printf("<----------BEGIN cardtest4-village card---------->\n\n");
        1:   35:   printf("Initial deck count: %i\n",state.deckCount[currentPlayer]);
        1:   36:   printf("Initial hand count: %i\n", state.handCount[currentPlayer]);
        -:   37:
        -:   38:// ----------------- TEST 1 ---------------------------------------------------
        1:   39:   printf("\n");
        1:   40:   printf(" TEST 1: Hand should have +1 card minus this card. Current\n");
        1:   41:   printf("         player should also have +2 actions.\n");
        1:   42:   newCards = 1;
        1:   43:   discard = 1;
        1:   44:   addActions = 2;
        1:   45:   cardEffect(village, choice1, choice2, choice3, &state, handPos, bonus);  
        1:   46:   printf("    hand count = %i, expected = %i\n", state.handCount[currentPlayer], saveState.handCount[currentPlayer] + newCards - discard);  
        1:   47:   printf("    deck count = %i, expected = %i\n", state.deckCount[currentPlayer], saveState.deckCount[currentPlayer] - newCards);
        1:   48:   printf("    action count = %i, expected = %i\n", state.numActions, saveState.numActions + addActions);
        2:   49:   assert(state.handCount[currentPlayer] == saveState.handCount[currentPlayer] + newCards - discard);
branch  0 taken 0%
branch  1 taken 100%
        2:   50:   assert(state.deckCount[currentPlayer] == saveState.deckCount[currentPlayer] - newCards);
branch  0 taken 0%
branch  1 taken 100%
        1:   51:   if (!(state.numActions == saveState.numActions + addActions))
branch  0 taken 100%
branch  1 taken 0%
        1:   52:		printf("		assertion fails!\n");
        -:   53:
        -:   54:// ----------------- TEST 2 ---------------------------------------------------
        1:   55:   printf("\n");
        1:   56:   printf(" TEST 2: Number of buys or coins should not change\n");
        1:   57:   printf("    buy count = %i, expected = %i\n", state.numBuys, saveState.numBuys);
        1:   58:   printf("    coin count = %i, expected = %i\n", state.coins, saveState.coins);
        2:   59:   assert(state.numBuys == saveState.numBuys);
branch  0 taken 0%
branch  1 taken 100%
        2:   60:   assert(state.coins == saveState.coins);
branch  0 taken 0%
branch  1 taken 100%
        -:   61:
        -:   62:// ----------------- TEST 3 ---------------------------------------------------
        1:   63:   printf("\n");
        1:   64:   printf(" TEST 3: No state change should occur for other players.\n");
        1:   65:   printf("    deck count = %i, expected = %i\n", state.deckCount[!currentPlayer], saveState.deckCount[!currentPlayer]);
        1:   66:   printf("    discard pile count = %i, expected %i\n", state.discardCount[!currentPlayer], saveState.discardCount[!currentPlayer]);
        2:   67:   assert(saveState.deckCount[!currentPlayer] == state.deckCount[!currentPlayer]);
branch  0 taken 0%
branch  1 taken 100%
        -:   68:
        -:   69:// ----------------- TEST 4 ---------------------------------------------------
        1:   70:   printf("\n");
        1:   71:   printf(" TEST 4: No state change should occur to victory and kingdom cards piles.\n");
        1:   72:   printf("    estate count = %i, expected = %i\n", state.supplyCount[estate], saveState.supplyCount[estate]);
        1:   73:   printf("    duchy count = %i, expected = %i\n", state.supplyCount[duchy], saveState.supplyCount[duchy]);
        1:   74:   printf("    province count = %i, expected = %i\n", state.supplyCount[province], saveState.supplyCount[province]);
        -:   75:   
       42:   76:   for( i = adventurer; i <= treasure_map; ++i){
branch  0 taken 95%
branch  1 taken 5%
       20:   77:      printf("    kingdomCard '%i' count = %i, expected = %i\n", i, state.supplyCount[i], saveState.supplyCount[i]);
       20:   78:   }
        -:   79:
        2:   80:   assert(saveState.supplyCount[estate] == state.supplyCount[estate]);
branch  0 taken 0%
branch  1 taken 100%
        2:   81:   assert(saveState.supplyCount[duchy] == state.supplyCount[duchy]);
branch  0 taken 0%
branch  1 taken 100%
        2:   82:   assert(saveState.supplyCount[province] == state.supplyCount[province]);
branch  0 taken 0%
branch  1 taken 100%
       42:   83:   for( i = adventurer; i <= treasure_map; ++i){
branch  0 taken 95%
branch  1 taken 5%
       40:   84:      assert(saveState.supplyCount[i] == state.supplyCount[i]);
branch  0 taken 0%
branch  1 taken 100%
       20:   85:   }
        1:   86:   printf("\n");
        1:   87:   printf("<----------END cardtest4-village card---------->\n\n");
        -:   88:
        1:   89:   return 0;
        -:   90:}
        -:   91:
