        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 168 returned 100% blocks executed 85%
        -:    8:int compare(const void* a, const void* b) {
      168:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   10:    return 1;
      168:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
       60:   12:    return -1;
      108:   13:  return 0;
      168:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 6 returned 100% blocks executed 87%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        6:   44:  SelectStream(1);
        6:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       12:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        6:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      132:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
     1320:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
     1140:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
      600:   65:        }
       60:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        6:   73:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   74:    {
        6:   75:      state->supplyCount[curse] = 10;
        6:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        6:   87:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   88:    {
        6:   89:      state->supplyCount[estate] = 8;
        6:   90:      state->supplyCount[duchy] = 8;
        6:   91:      state->supplyCount[province] = 8;
        6:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        6:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        6:  102:  state->supplyCount[silver] = 40;
        6:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      252:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:    {
     1980:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	{
      930:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      117:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 95%
branch  1 taken 5%
branch  2 taken 11%
branch  3 taken 89%
        -:  114:		{
        9:  115:		  if (numPlayers == 2){ 
branch  0 taken 100%
branch  1 taken 0%
        9:  116:		    state->supplyCount[i] = 8; 
        9:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        9:  119:		}
        -:  120:	      else
        -:  121:		{
       51:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       60:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      870:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
      870:  130:	}
        -:  131:
      120:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       36:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  139:    {
       12:  140:      state->deckCount[i] = 0;
       96:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  142:	{
       36:  143:	  state->deck[i][j] = estate;
       36:  144:	  state->deckCount[i]++;
       36:  145:	}
      192:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  147:	{
       84:  148:	  state->deck[i][j] = copper;
       84:  149:	  state->deckCount[i]++;		
       84:  150:	}
       12:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       36:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  155:    {
       12:  156:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
       12:  160:    }
        -:  161:
        -:  162:  //draw player hands
       36:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       12:  166:      state->handCount[i] = 0;
       12:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
       12:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      336:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  177:    {
      162:  178:      state->embargoTokens[i] = 0;
      162:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        6:  182:  state->outpostPlayed = 0;
        6:  183:  state->phase = 0;
        6:  184:  state->numActions = 1;
        6:  185:  state->numBuys = 1;
        6:  186:  state->playedCardCount = 0;
        6:  187:  state->whoseTurn = 0;
        6:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       72:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
       30:  193:    drawCard(state->whoseTurn, state);
       30:  194:  }
        -:  195:
        6:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        6:  198:  return 0;
        6:  199:}
        -:  200:
function shuffle called 13 returned 100% blocks executed 100%
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       13:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       13:  209:  if (state->deckCount[player] < 1)
branch  0 taken 8%
branch  1 taken 92%
        1:  210:    return -1;
       12:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      264:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
      120:  215:    card = floor(Random() * state->deckCount[player]);
      120:  216:    newDeck[newDeckPos] = state->deck[player][card];
      120:  217:    newDeckPos++;
      812:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30%
      286:  219:      state->deck[player][i] = state->deck[player][i+1];
      286:  220:    }
      120:  221:    state->deckCount[player]--;
        -:  222:  }
      264:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
      120:  224:    state->deck[player][i] = newDeck[i];
      120:  225:    state->deckCount[player]++;
      120:  226:  }
        -:  227:
       12:  228:  return 0;
       13:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
function buyCard called 4 returned 100% blocks executed 91%
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        4:  280:  who = state->whoseTurn;
        -:  281:
        4:  282:  if (state->numBuys < 1){
branch  0 taken 0%
branch  1 taken 100%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
        4:  286:  } else if (supplyCount(supplyPos, state) <1){
branch  0 taken 25%
branch  1 taken 75%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        1:  289:    return -1;
        3:  290:  } else if (state->coins < getCost(supplyPos)){
branch  0 taken 33%
branch  1 taken 67%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  293:    return -1;
        -:  294:  } else {
        2:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        2:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
        2:  299:    state->coins = (state->coins) - (getCost(supplyPos));
        2:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        2:  308:  return 0;
        4:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
function handCard called 10 returned 100% blocks executed 100%
        -:  315:int handCard(int handPos, struct gameState *state) {
       10:  316:  int currentPlayer = whoseTurn(state);
       10:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 6 returned 100% blocks executed 100%
        -:  320:int supplyCount(int card, struct gameState *state) {
        6:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 16 returned 100% blocks executed 100%
        -:  346:int whoseTurn(struct gameState *state) {
       16:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
    #####:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
    #####:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 43 returned 100% blocks executed 75%
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       43:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 2%
branch  1 taken 98%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        2:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100%
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
        1:  538:    state->deckCount[player] = state->discardCount[player];
        1:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        1:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        1:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        1:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        1:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        1:  559:    if (deckCounter == 0)
branch  0 taken 100%
branch  1 taken 0%
        1:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
       42:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       42:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       42:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       42:  576:    state->deckCount[player]--;
       42:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       42:  580:  return 0;
       43:  581:}
        -:  582:
function getCost called 5 returned 100% blocks executed 19%
        -:  583:int getCost(int cardNumber)
        -:  584:{
        5:  585:  switch( cardNumber ) 
branch  0 taken 40%
branch  1 taken 20%
branch  2 taken 0%
branch  3 taken 40%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
        2:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
        2:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        5:  644:}
        -:  645:
function runSmithy called 1 returned 100% blocks executed 100%
        -:  646:void runSmithy(int handPos, struct gameState *state){
        -:  647:    int i;
        1:  648:    int currentPlayer = whoseTurn(state);
        -:  649:    //+3 Cards
        6:  650:    for (i = 0; i < 2; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  651:    {
        2:  652:        drawCard(currentPlayer, state);
        2:  653:    }
        -:  654:    
        -:  655:    //discard card from hand
        1:  656:    discardCard(handPos, currentPlayer, state, 0);
        -:  657:    
        1:  658:}
        -:  659:
        -:  660:
function runVillage called 0 returned 0% blocks executed 0%
        -:  661:void runVillage(int handPos, struct gameState *state){
        -:  662:    int i;
    #####:  663:    int currentPlayer = whoseTurn(state);
        -:  664:    //+1 Card
    #####:  665:    drawCard(currentPlayer, state);
        -:  666:    
        -:  667:    //+2 Actions
    #####:  668:    state->numActions = state->numActions - 2;
        -:  669:    
        -:  670:    //discard played card from hand
    #####:  671:    discardCard(handPos, currentPlayer, state, 0);
        -:  672:    
    #####:  673:}
        -:  674:
function runAdventurer called 1 returned 100% blocks executed 40%
        -:  675:void runAdventurer(struct gameState *state){
        -:  676:    
        1:  677:        int currentPlayer = whoseTurn(state);
        -:  678:        int temphand[MAX_HAND];// moved above the if statement
        1:  679:        int drawntreasure=0;
        -:  680:        int cardDrawn;
        1:  681:        int z = 0;// this is the counter for the temp hand
        -:  682:    
        2:  683:        while(drawntreasure>=2){
branch  0 taken 0%
branch  1 taken 100%
    #####:  684:            if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  685:                shuffle(currentPlayer, state);
    #####:  686:            }
    #####:  687:            drawCard(currentPlayer, state);
    #####:  688:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  689:            if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  690:                drawntreasure++;
        -:  691:            else{
    #####:  692:                temphand[z]=cardDrawn;
    #####:  693:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  694:                z++;
        -:  695:            }
        -:  696:        }
        2:  697:        while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100%
    #####:  698:            state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  699:            z=z-1;
        -:  700:        }
        -:  701:
        1:  702:}
        -:  703:
        -:  704:
function runCouncil_room called 1 returned 100% blocks executed 100%
        -:  705:void runCouncil_room(int handPos, struct gameState *state){
        -:  706:    int i;
        1:  707:    int currentPlayer = whoseTurn(state);
        -:  708:    //+4 Cards
       12:  709:    for (i = 0; i < 5; i++)
branch  0 taken 83%
branch  1 taken 17%
        -:  710:    {
        5:  711:        drawCard(currentPlayer, state);
        5:  712:    }
        -:  713:    
        -:  714:    
        -:  715:    //Each other player draws a card
        6:  716:    for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  717:    {
        2:  718:        if ( i == currentPlayer )
branch  0 taken 50%
branch  1 taken 50%
        -:  719:        {
        1:  720:            drawCard(i, state);
        1:  721:        }
        2:  722:    }
        -:  723:    
        -:  724:    //put played card in played card pile
        1:  725:    discardCard(handPos, currentPlayer, state, 0);
        -:  726:
        1:  727:}
        -:  728:
        -:  729:
        -:  730:
        -:  731:
function runMine called 0 returned 0% blocks executed 0%
        -:  732:int runMine(int handPos, struct gameState *state, int choice1, int choice2, int choice3){
        -:  733:    int i, j;
    #####:  734:    int currentPlayer = whoseTurn(state);
    #####:  735:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  736:    
    #####:  737:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  738:    {
    #####:  739:        return -1;
        -:  740:    }
        -:  741:    
    #####:  742:    if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  743:    {
    #####:  744:        return -1;
        -:  745:    }
        -:  746:    
    #####:  747:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  748:    {
    #####:  749:        return -1;
        -:  750:    }
        -:  751:    
    #####:  752:    gainCard(choice2, state, 2, currentPlayer);
        -:  753:    
        -:  754:    //discard card from hand
    #####:  755:    discardCard(handPos, currentPlayer, state, 0);
        -:  756:    
        -:  757:    //discard trashed card
    #####:  758:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  759:    {
    #####:  760:        if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  761:        {
    #####:  762:            discardCard(i, currentPlayer, state, 0);
    #####:  763:            break;
        -:  764:        }
    #####:  765:    }
        -:  766:    
    #####:  767:    return 0;
    #####:  768:}
        -:  769:
        -:  770:
        -:  771:
        -:  772:
function cardEffect called 3 returned 100% blocks executed 3%
        -:  773:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  774:{
        -:  775:  int i;
        -:  776:  int j;
        -:  777:  int k;
        -:  778:  int x;
        -:  779:  int index;
        3:  780:  int currentPlayer = whoseTurn(state);
        3:  781:  int nextPlayer = currentPlayer + 1;
        -:  782:
        3:  783:  int tributeRevealedCards[2] = {-1, -1};
        -:  784:  int temphand[MAX_HAND];// moved above the if statement
        3:  785:  int drawntreasure=0;
        -:  786:  int cardDrawn;
        3:  787:  int z = 0;// this is the counter for the temp hand
        3:  788:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0%
branch  1 taken 100%
    #####:  789:    nextPlayer = 0;
    #####:  790:  }
        -:  791:  int returnVal;
        -:  792:  
        -:  793:	
        -:  794:  //uses switch to select card and perform actions
        3:  795:  switch( card ) 
branch  0 taken 33%
branch  1 taken 33%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 33%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  796:    {
        -:  797:    case adventurer:
        -:  798://      while(drawntreasure<2){
        -:  799://	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  800://	  shuffle(currentPlayer, state);
        -:  801://	}
        -:  802://	drawCard(currentPlayer, state);
        -:  803://	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  804://	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  805://	  drawntreasure++;
        -:  806://	else{
        -:  807://	  temphand[z]=cardDrawn;
        -:  808://	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  809://	  z++;
        -:  810://	}
        -:  811://      }
        -:  812://      while(z-1>=0){
        -:  813://	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  814://	z=z-1;
        -:  815://      }
        -:  816:            
        1:  817:      runAdventurer(state);
        1:  818:      return 0;
        -:  819:			
        -:  820:    case council_room:
        -:  821://      //+4 Cards
        -:  822://      for (i = 0; i < 4; i++)
        -:  823://      {
        -:  824://          drawCard(currentPlayer, state);
        -:  825://      }
        -:  826://      
        -:  827://      //+1 Buy
        -:  828://      state->numBuys++;
        -:  829://      
        -:  830://      //Each other player draws a card
        -:  831://      for (i = 0; i < state->numPlayers; i++)
        -:  832://      {
        -:  833://          if ( i != currentPlayer )
        -:  834://          {
        -:  835://              drawCard(i, state);
        -:  836://          }
        -:  837://      }
        -:  838://      
        -:  839://      //put played card in played card pile
        -:  840://      discardCard(handPos, currentPlayer, state, 0);
        -:  841:			
        1:  842:      runCouncil_room(handPos, state);
        1:  843:      return 0;
        -:  844:			
        -:  845:    case feast:
        -:  846:      //gain card with cost up to 5
        -:  847:      //Backup hand
    #####:  848:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  849:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  850:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  851:      }
        -:  852:      //Backup hand
        -:  853:
        -:  854:      //Update Coins for Buy
    #####:  855:      updateCoins(currentPlayer, state, 5);
    #####:  856:      x = 1;//Condition to loop on
    #####:  857:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  858:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  859:	  if (DEBUG)
        -:  860:	    printf("None of that card left, sorry!\n");
        -:  861:
        -:  862:	  if (DEBUG){
        -:  863:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  864:	  }
    #####:  865:	}
    #####:  866:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  867:	  printf("That card is too expensive!\n");
        -:  868:
        -:  869:	  if (DEBUG){
        -:  870:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  871:	  }
    #####:  872:	}
        -:  873:	else{
        -:  874:
        -:  875:	  if (DEBUG){
        -:  876:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  877:	  }
        -:  878:
    #####:  879:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  880:	  x = 0;//No more buying cards
        -:  881:
        -:  882:	  if (DEBUG){
        -:  883:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  884:	  }
        -:  885:
        -:  886:	}
        -:  887:      }     
        -:  888:
        -:  889:      //Reset Hand
    #####:  890:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  891:	state->hand[currentPlayer][i] = temphand[i];
    #####:  892:	temphand[i] = -1;
    #####:  893:      }
        -:  894:      //Reset Hand
        -:  895:      			
    #####:  896:      return 0;
        -:  897:			
        -:  898:    case gardens:
    #####:  899:      return -1;
        -:  900:			
        -:  901:    case mine:
        -:  902://      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  903://
        -:  904://      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  905://	{
        -:  906://	  return -1;
        -:  907://	}
        -:  908://		
        -:  909://      if (choice2 > treasure_map || choice2 < curse)
        -:  910://	{
        -:  911://	  return -1;
        -:  912://	}
        -:  913://
        -:  914://      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  915://	{
        -:  916://	  return -1;
        -:  917://	}
        -:  918://
        -:  919://      gainCard(choice2, state, 2, currentPlayer);
        -:  920://
        -:  921://      //discard card from hand
        -:  922://      discardCard(handPos, currentPlayer, state, 0);
        -:  923://
        -:  924://      //discard trashed card
        -:  925://      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  926://	{
        -:  927://	  if (state->hand[currentPlayer][i] == j)
        -:  928://	    {
        -:  929://	      discardCard(i, currentPlayer, state, 0);			
        -:  930://	      break;
        -:  931://	    }
        -:  932://	}
        -:  933:      
    #####:  934:      returnVal = runMine(handPos, state, choice1, choice2, choice3);
        -:  935:			
    #####:  936:      if (returnVal == 0){
branch  0 never executed
branch  1 never executed
    #####:  937:          return 0;
        -:  938:      }
    #####:  939:      else if(returnVal == -1){
branch  0 never executed
branch  1 never executed
    #####:  940:          return -1;
        -:  941:      }
        -:  942:			
        -:  943:    case remodel:
    #####:  944:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  945:
    #####:  946:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  947:	{
    #####:  948:	  return -1;
        -:  949:	}
        -:  950:
    #####:  951:      gainCard(choice2, state, 0, currentPlayer);
        -:  952:
        -:  953:      //discard card from hand
    #####:  954:      discardCard(handPos, currentPlayer, state, 0);
        -:  955:
        -:  956:      //discard trashed card
    #####:  957:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  958:	{
    #####:  959:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  960:	    {
    #####:  961:	      discardCard(i, currentPlayer, state, 0);			
    #####:  962:	      break;
        -:  963:	    }
    #####:  964:	}
        -:  965:
        -:  966:
    #####:  967:      return 0;
        -:  968:		
        -:  969:    case smithy:
        -:  970://      //+3 Cards
        -:  971://      for (i = 0; i < 3; i++)
        -:  972://      {
        -:  973://          drawCard(currentPlayer, state);
        -:  974://      }
        -:  975://      
        -:  976://      //discard card from hand
        -:  977://      discardCard(handPos, currentPlayer, state, 0);
        -:  978:            
        1:  979:      runSmithy(handPos, state);
        -:  980:            
        1:  981:      return 0;
        -:  982:		
        -:  983:    case village:
        -:  984://      //+1 Card
        -:  985://      drawCard(currentPlayer, state);
        -:  986://      
        -:  987://      //+2 Actions
        -:  988://      state->numActions = state->numActions + 2;
        -:  989://      
        -:  990://      //discard played card from hand
        -:  991://      discardCard(handPos, currentPlayer, state, 0);
        -:  992:      
    #####:  993:      runVillage(handPos, state);
    #####:  994:      return 0;
        -:  995:		
        -:  996:    case baron:
    #####:  997:      state->numBuys++;//Increase buys by 1!
    #####:  998:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  999:	int p = 0;//Iterator for hand!
    #####: 1000:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1001:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####: 1002:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####: 1003:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1004:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1005:	    state->discardCount[currentPlayer]++;
    #####: 1006:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####: 1007:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####: 1008:	    }
    #####: 1009:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1010:	    state->handCount[currentPlayer]--;
    #####: 1011:	    card_not_discarded = 0;//Exit the loop
    #####: 1012:	  }
    #####: 1013:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -: 1014:	    if(DEBUG) {
        -: 1015:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1016:	      printf("Must gain an estate if there are any\n");
        -: 1017:	    }
    #####: 1018:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####: 1019:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1020:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1021:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####: 1022:		isGameOver(state);
    #####: 1023:	      }
    #####: 1024:	    }
    #####: 1025:	    card_not_discarded = 0;//Exit the loop
    #####: 1026:	  }
        -: 1027:			    
        -: 1028:	  else{
    #####: 1029:	    p++;//Next card
        -: 1030:	  }
        -: 1031:	}
    #####: 1032:      }
        -: 1033:			    
        -: 1034:      else{
    #####: 1035:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####: 1036:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1037:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1038:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####: 1039:	    isGameOver(state);
    #####: 1040:	  }
    #####: 1041:	}
        -: 1042:      }
        -: 1043:	    
        -: 1044:      
    #####: 1045:      return 0;
        -: 1046:		
        -: 1047:    case great_hall:
        -: 1048:      //+1 Card
    #####: 1049:      drawCard(currentPlayer, state);
        -: 1050:			
        -: 1051:      //+1 Actions
    #####: 1052:      state->numActions++;
        -: 1053:			
        -: 1054:      //discard card from hand
    #####: 1055:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1056:      return 0;
        -: 1057:		
        -: 1058:    case minion:
        -: 1059:      //+1 action
    #####: 1060:      state->numActions++;
        -: 1061:			
        -: 1062:      //discard card from hand
    #####: 1063:      discardCard(handPos, currentPlayer, state, 0);
        -: 1064:			
    #####: 1065:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1066:	{
    #####: 1067:	  state->coins = state->coins + 2;
    #####: 1068:	}
        -: 1069:			
    #####: 1070:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1071:	{
        -: 1072:	  //discard hand
    #####: 1073:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -: 1074:	    {
    #####: 1075:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1076:	    }
        -: 1077:				
        -: 1078:	  //draw 4
    #####: 1079:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1080:	    {
    #####: 1081:	      drawCard(currentPlayer, state);
    #####: 1082:	    }
        -: 1083:				
        -: 1084:	  //other players discard hand and redraw if hand size > 4
    #####: 1085:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1086:	    {
    #####: 1087:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1088:		{
    #####: 1089:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1090:		    {
        -: 1091:		      //discard hand
    #####: 1092:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1093:			{
    #####: 1094:			  discardCard(handPos, i, state, 0);
        -: 1095:			}
        -: 1096:							
        -: 1097:		      //draw 4
    #####: 1098:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1099:			{
    #####: 1100:			  drawCard(i, state);
    #####: 1101:			}
    #####: 1102:		    }
    #####: 1103:		}
    #####: 1104:	    }
        -: 1105:				
    #####: 1106:	}
    #####: 1107:      return 0;
        -: 1108:		
        -: 1109:    case steward:
    #####: 1110:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1111:	{
        -: 1112:	  //+2 cards
    #####: 1113:	  drawCard(currentPlayer, state);
    #####: 1114:	  drawCard(currentPlayer, state);
    #####: 1115:	}
    #####: 1116:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1117:	{
        -: 1118:	  //+2 coins
    #####: 1119:	  state->coins = state->coins + 2;
    #####: 1120:	}
        -: 1121:      else
        -: 1122:	{
        -: 1123:	  //trash 2 cards in hand
    #####: 1124:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1125:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1126:	}
        -: 1127:			
        -: 1128:      //discard card from hand
    #####: 1129:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1130:      return 0;
        -: 1131:		
        -: 1132:    case tribute:
    #####: 1133:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1134:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1135:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1136:	  state->deckCount[nextPlayer]--;
    #####: 1137:	}
    #####: 1138:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1139:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1140:	  state->discardCount[nextPlayer]--;
    #####: 1141:	}
        -: 1142:	else{
        -: 1143:	  //No Card to Reveal
        -: 1144:	  if (DEBUG){
        -: 1145:	    printf("No cards to reveal\n");
        -: 1146:	  }
        -: 1147:	}
    #####: 1148:      }
        -: 1149:	    
        -: 1150:      else{
    #####: 1151:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1152:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1153:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1154:	    state->deckCount[nextPlayer]++;
    #####: 1155:	    state->discard[nextPlayer][i] = -1;
    #####: 1156:	    state->discardCount[nextPlayer]--;
    #####: 1157:	  }
        -: 1158:			    
    #####: 1159:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1160:	} 
    #####: 1161:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1162:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1163:	state->deckCount[nextPlayer]--;
    #####: 1164:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1165:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1166:	state->deckCount[nextPlayer]--;
        -: 1167:      }    
        -: 1168:		       
    #####: 1169:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1170:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1171:	state->playedCardCount++;
    #####: 1172:	tributeRevealedCards[1] = -1;
    #####: 1173:      }
        -: 1174:
    #####: 1175:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1176:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1177:	  state->coins += 2;
    #####: 1178:	}
        -: 1179:		    
    #####: 1180:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1181:	  drawCard(currentPlayer, state);
    #####: 1182:	  drawCard(currentPlayer, state);
    #####: 1183:	}
        -: 1184:	else{//Action Card
    #####: 1185:	  state->numActions = state->numActions + 2;
        -: 1186:	}
    #####: 1187:      }
        -: 1188:	    
    #####: 1189:      return 0;
        -: 1190:		
        -: 1191:    case ambassador:
    #####: 1192:      j = 0;		//used to check if player has enough cards to discard
        -: 1193:
    #####: 1194:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1195:	{
    #####: 1196:	  return -1;				
        -: 1197:	}
        -: 1198:
    #####: 1199:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1200:	{
    #####: 1201:	  return -1;
        -: 1202:	}
        -: 1203:
    #####: 1204:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1205:	{
    #####: 1206:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1207:	    {
    #####: 1208:	      j++;
    #####: 1209:	    }
    #####: 1210:	}
    #####: 1211:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1212:	{
    #####: 1213:	  return -1;				
        -: 1214:	}
        -: 1215:
        -: 1216:      if (DEBUG) 
        -: 1217:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1218:
        -: 1219:      //increase supply count for choosen card by amount being discarded
    #####: 1220:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1221:			
        -: 1222:      //each other player gains a copy of revealed card
    #####: 1223:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1224:	{
    #####: 1225:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1226:	    {
    #####: 1227:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1228:	    }
    #####: 1229:	}
        -: 1230:
        -: 1231:      //discard played card from hand
    #####: 1232:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1233:
        -: 1234:      //trash copies of cards returned to supply
    #####: 1235:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1236:	{
    #####: 1237:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1238:	    {
    #####: 1239:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1240:		{
    #####: 1241:		  discardCard(i, currentPlayer, state, 1);
    #####: 1242:		  break;
        -: 1243:		}
    #####: 1244:	    }
    #####: 1245:	}			
        -: 1246:
    #####: 1247:      return 0;
        -: 1248:		
        -: 1249:    case cutpurse:
        -: 1250:
    #####: 1251:      updateCoins(currentPlayer, state, 2);
    #####: 1252:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1253:	{
    #####: 1254:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1255:	    {
    #####: 1256:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1257:		{
    #####: 1258:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1259:		    {
    #####: 1260:		      discardCard(j, i, state, 0);
    #####: 1261:		      break;
        -: 1262:		    }
    #####: 1263:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1264:		    {
    #####: 1265:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1266:			{
        -: 1267:			  if (DEBUG)
        -: 1268:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1269:			}	
    #####: 1270:		      break;
        -: 1271:		    }		
    #####: 1272:		}
        -: 1273:					
    #####: 1274:	    }
        -: 1275:				
    #####: 1276:	}				
        -: 1277:
        -: 1278:      //discard played card from hand
    #####: 1279:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1280:
    #####: 1281:      return 0;
        -: 1282:
        -: 1283:		
        -: 1284:    case embargo: 
        -: 1285:      //+2 Coins
    #####: 1286:      state->coins = state->coins + 2;
        -: 1287:			
        -: 1288:      //see if selected pile is in play
    #####: 1289:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1290:	{
    #####: 1291:	  return -1;
        -: 1292:	}
        -: 1293:			
        -: 1294:      //add embargo token to selected supply pile
    #####: 1295:      state->embargoTokens[choice1]++;
        -: 1296:			
        -: 1297:      //trash card
    #####: 1298:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1299:      return 0;
        -: 1300:		
        -: 1301:    case outpost:
        -: 1302:      //set outpost flag
    #####: 1303:      state->outpostPlayed++;
        -: 1304:			
        -: 1305:      //discard card
    #####: 1306:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1307:      return 0;
        -: 1308:		
        -: 1309:    case salvager:
        -: 1310:      //+1 buy
    #####: 1311:      state->numBuys++;
        -: 1312:			
    #####: 1313:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1314:	{
        -: 1315:	  //gain coins equal to trashed card
    #####: 1316:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1317:	  //trash card
    #####: 1318:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1319:	}
        -: 1320:			
        -: 1321:      //discard card
    #####: 1322:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1323:      return 0;
        -: 1324:		
        -: 1325:    case sea_hag:
    #####: 1326:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1327:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1328:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1329:	  state->discardCount[i]++;
    #####: 1330:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1331:	}
    #####: 1332:      }
    #####: 1333:      return 0;
        -: 1334:		
        -: 1335:    case treasure_map:
        -: 1336:      //search hand for another treasure_map
    #####: 1337:      index = -1;
    #####: 1338:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1339:	{
    #####: 1340:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1341:	    {
    #####: 1342:	      index = i;
    #####: 1343:	      break;
        -: 1344:	    }
    #####: 1345:	}
    #####: 1346:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1347:	{
        -: 1348:	  //trash both treasure cards
    #####: 1349:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1350:	  discardCard(index, currentPlayer, state, 1);
        -: 1351:
        -: 1352:	  //gain 4 Gold cards
    #####: 1353:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1354:	    {
    #####: 1355:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1356:	    }
        -: 1357:				
        -: 1358:	  //return success
    #####: 1359:	  return 1;
        -: 1360:	}
        -: 1361:			
        -: 1362:      //no second treasure_map found in hand
    #####: 1363:      return -1;
        -: 1364:    }
        -: 1365:	
    #####: 1366:  return -1;
        3: 1367:}
        -: 1368:
function discardCard called 7 returned 100% blocks executed 100%
        -: 1369:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1370:{
        -: 1371:	
        -: 1372:  //if card is not trashed, added to Played pile 
        7: 1373:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1374:    {
        -: 1375:      //add card to played pile
        7: 1376:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        7: 1377:      state->playedCardCount++;
        7: 1378:    }
        -: 1379:	
        -: 1380:  //set played card to -1
        7: 1381:  state->hand[currentPlayer][handPos] = -1;
        -: 1382:	
        -: 1383:  //remove card from player's hand
        7: 1384:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 14%
branch  1 taken 86%
        -: 1385:    {
        -: 1386:      //reduce number of cards in hand
        1: 1387:      state->handCount[currentPlayer]--;
        1: 1388:    }
        6: 1389:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 17%
branch  1 taken 83%
        -: 1390:    {
        -: 1391:      //reduce number of cards in hand
        1: 1392:      state->handCount[currentPlayer]--;
        1: 1393:    }
        -: 1394:  else 	
        -: 1395:    {
        -: 1396:      //replace discarded card with last card in hand
        5: 1397:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1398:      //set last card to -1
        5: 1399:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1400:      //reduce number of cards in hand
        5: 1401:      state->handCount[currentPlayer]--;
        -: 1402:    }
        -: 1403:	
        7: 1404:  return 0;
        -: 1405:}
        -: 1406:
function gainCard called 2 returned 100% blocks executed 72%
        -: 1407:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1408:{
        -: 1409:  //Note: supplyPos is enum of choosen card
        -: 1410:	
        -: 1411:  //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1412:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -: 1413:    {
    #####: 1414:      return -1;
        -: 1415:    }
        -: 1416:	
        -: 1417:  //added card for [whoseTurn] current player:
        -: 1418:  // toFlag = 0 : add to discard
        -: 1419:  // toFlag = 1 : add to deck
        -: 1420:  // toFlag = 2 : add to hand
        -: 1421:
        2: 1422:  if (toFlag == 1)
branch  0 taken 0%
branch  1 taken 100%
        -: 1423:    {
    #####: 1424:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1425:      state->deckCount[player]++;
    #####: 1426:    }
        2: 1427:  else if (toFlag == 2)
branch  0 taken 0%
branch  1 taken 100%
        -: 1428:    {
    #####: 1429:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1430:      state->handCount[player]++;
    #####: 1431:    }
        -: 1432:  else
        -: 1433:    {
        2: 1434:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1435:      state->discardCount[player]++;
        -: 1436:    }
        -: 1437:	
        -: 1438:  //decrease number in supply pile
        2: 1439:  state->supplyCount[supplyPos]--;
        -: 1440:	 
        2: 1441:  return 0;
        2: 1442:}
        -: 1443:
function updateCoins called 7 returned 100% blocks executed 100%
        -: 1444:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1445:{
        -: 1446:  int i;
        -: 1447:	
        -: 1448:  //reset coin count
        7: 1449:  state->coins = 0;
        -: 1450:
        -: 1451:  //add coins for each Treasure card in player's hand
       84: 1452:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1453:    {
       35: 1454:      if (state->hand[player][i] == copper)
branch  0 taken 69%
branch  1 taken 31%
        -: 1455:	{
       24: 1456:	  state->coins += 1;
       24: 1457:	}
       11: 1458:      else if (state->hand[player][i] == silver)
branch  0 taken 18%
branch  1 taken 82%
        -: 1459:	{
        2: 1460:	  state->coins += 2;
        2: 1461:	}
        9: 1462:      else if (state->hand[player][i] == gold)
branch  0 taken 11%
branch  1 taken 89%
        -: 1463:	{
        1: 1464:	  state->coins += 3;
        1: 1465:	}	
       35: 1466:    }	
        -: 1467:
        -: 1468:  //add bonus
        7: 1469:  state->coins += bonus;
        -: 1470:
        7: 1471:  return 0;
        -: 1472:}
        -: 1473:
        -: 1474:
        -: 1475:
        -: 1476:
        -: 1477:
        -: 1478:
        -: 1479://end of dominion.c
        -: 1480:
