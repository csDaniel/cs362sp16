        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <assert.h>
        -:    3:#include <string.h>
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include "rngs.h"
        -:    7:
function main called 1 returned 100% blocks executed 74%
        -:    8:int main(){
        -:    9:
        -:   10:   struct gameState state, saveState;
        1:   11:   int numPlayers = 2, i;
        1:   12:   int handPos = 0, choice1 = 0, choice2 = 0, choice3 = 0;
        1:   13:   int *bonus = NULL;
        1:   14:   int newCards = 0, discard = 0;
        1:   15:   int kingdom[10] = {council_room, adventurer, gardens, mine, ambassador,  
        -:   16:                     remodel, great_hall, minion, sea_hag, outpost};
        1:   17:   int seed = 1000;
        -:   18:
        1:   19:   initializeGame(numPlayers, kingdom, seed, &state);
        1:   20:   int currentPlayer = state.whoseTurn;
        -:   21:   // Save the state as-is
        1:   22:   memcpy(&saveState, &state, sizeof(struct gameState));
        -:   23:   /* business requirements
        -:   24:      
        -:   25:      description: testing adventurer card, 
        -:   26:
        -:   27:      1. If available in the deck, current player should receive exactly 2 
        -:   28:         treasure cards. If not available, hand should only contain the number
        -:   29:         of tresasure cards available [0 to 2].
        -:   30:      2. Up to 2 treasure cards should come from own pile.
        -:   31:      3. No state change should occur for other players.
        -:   32:      4. No state change should occur to the victory and kingdom card piles.
        -:   33:
        -:   34:      end requirements*/
        1:   35:   printf("<----------BEGIN cardtest2-adventurer card---------->\n\n");
        1:   36:   printf("Initial deck count: %i\n",state.deckCount[currentPlayer]);
        1:   37:   printf("Initial hand count: %i\n", state.handCount[currentPlayer]);
        -:   38:
        -:   39:// ----------------- TEST 1 ---------------------------------------------------
        1:   40:   printf(" TEST 1: Current player should receive 2 treasure cards, if available.\n");
        1:   41:   printf("\n");
        1:   42:   cardEffect(adventurer, choice1, choice2, choice3, &state, handPos, bonus);  
        1:   43:   newCards = 2;
        1:   44:   discard = 1;
        1:   45:   printf("    hand count = %i, %i <= expected <= %i\n", state.handCount[currentPlayer], saveState.handCount[currentPlayer], saveState.handCount[currentPlayer] + newCards - discard);  
        2:   46:   if(!(state.handCount[currentPlayer] >= saveState.handCount[currentPlayer] && state.handCount[currentPlayer] <= saveState.handCount[currentPlayer] + newCards - discard))
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 100%
branch  3 taken 0%
        1:   47:		printf("		assertion failed.\n");
        -:   48:
        -:   49:// ----------------- TEST 2 ---------------------------------------------------
        1:   50:   printf("\n");
        1:   51:   printf(" TEST 2: Up to 2 Cards should come from own pile.\n");
        1:   52:   printf("    deck count = %i, %i <= expected <= %i\n", state.deckCount[currentPlayer], saveState.deckCount[currentPlayer] - newCards, saveState.deckCount[currentPlayer]);
        -:   53:   //assert(state.deckCount[currentPlayer] <= saveState.deckCount[currentPlayer] && state.deckCount[currentPlayer] >= saveState.deckCount[currentPlayer] - newCards);
        1:   54:   printf("    ASSERTION FAILS.\n");
        -:   55:
        -:   56:// ----------------- TEST 3 ---------------------------------------------------
        1:   57:   printf("\n");
        1:   58:   printf(" TEST 3: No state change should occur for other players.\n");
        1:   59:   printf("    deck count = %i, expected = %i\n", state.deckCount[!currentPlayer], saveState.deckCount[!currentPlayer]);
        1:   60:   printf("    discard pile count = %i, expected %i\n", state.discardCount[!currentPlayer], saveState.discardCount[!currentPlayer]);
        1:   61:   if(!(saveState.deckCount[!currentPlayer] == state.deckCount[!currentPlayer]))
branch  0 taken 100%
branch  1 taken 0%
        1:   62:		printf("		assertion failed.\n");
        -:   63:
        -:   64:// ----------------- TEST 4 ---------------------------------------------------
        1:   65:   printf("\n");
        1:   66:   printf(" TEST 4: No state change should occur to victory and kingdom cards piles.\n");
        1:   67:   printf("    estate count = %i, expected = %i\n", state.supplyCount[estate], saveState.supplyCount[estate]);
        1:   68:   printf("    duchy count = %i, expected = %i\n", state.supplyCount[duchy], saveState.supplyCount[duchy]);
        1:   69:   printf("    province count = %i, expected = %i\n", state.supplyCount[province], saveState.supplyCount[province]);
        -:   70:   
       42:   71:   for( i = adventurer; i <= treasure_map; ++i){
branch  0 taken 95%
branch  1 taken 5%
       20:   72:      printf("    kingdomCard '%i' count = %i, expected = %i\n", i, state.supplyCount[i], saveState.supplyCount[i]);
       20:   73:   }
        -:   74:
        2:   75:   assert(saveState.supplyCount[estate] == state.supplyCount[estate]);
branch  0 taken 0%
branch  1 taken 100%
        2:   76:   assert(saveState.supplyCount[duchy] == state.supplyCount[duchy]);
branch  0 taken 0%
branch  1 taken 100%
        2:   77:   assert(saveState.supplyCount[province] == state.supplyCount[province]);
branch  0 taken 0%
branch  1 taken 100%
       42:   78:   for( i = adventurer; i <= treasure_map; ++i){
branch  0 taken 95%
branch  1 taken 5%
       40:   79:      assert(saveState.supplyCount[i] == state.supplyCount[i]);
branch  0 taken 0%
branch  1 taken 100%
       20:   80:   }
        1:   81:   printf("\n");
        1:   82:   printf("<----------END cardtest2-adventurer card---------->\n\n");
        -:   83:
        1:   84:   return 0;
        -:   85:}
        -:   86:
