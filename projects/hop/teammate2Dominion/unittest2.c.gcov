        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <assert.h>
        -:    3:#include <string.h>
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include "rngs.h"
        -:    7:
function main called 1 returned 100% blocks executed 64%
        -:    8:int main(){
        -:    9:
        -:   10:   struct gameState state, saveState;
        1:   11:   int numPlayers = 2, j = 0;
        1:   12:   int kingdom[10] = {adventurer, mine, gardens, feast, village, tribute, 
        -:   13:                     steward, baron, sea_hag, treasure_map};
        1:   14:   int seed = 88;
        -:   15:
        1:   16:   initializeGame(numPlayers, kingdom, seed, &state);
        1:   17:   state.whoseTurn = 1;
        -:   18:   // Manually provide cards for player 2
        1:   19:   state.hand[1][0] = silver;
        1:   20:   state.hand[1][1] = silver;
        1:   21:   state.hand[1][2] = gold;
        1:   22:   state.hand[1][3] = adventurer;
        1:   23:   state.hand[1][4] = tribute;
        1:   24:   state.handCount[1] = 5;
        1:   25:   memcpy(&saveState, &state, sizeof(struct gameState));
        -:   26:   
        -:   27:   /* business requirements
        -:   28:      
        -:   29:      description: testing updateCoins(int player, struct gameState *state, 
        -:   30:      int bonus) which updates the state->coins to the value of the card held.
        -:   31:         
        -:   32:      1. Manual initialization of cards in hand. Function should convert 
        -:   33:         treasure cards to coins.
        -:   34:      2. No state changes should occur for the other player.  
        -:   35:      3. No state change should occur to victory and kingdom card piles.
        -:   36:
        -:   37:      end requirements*/
        1:   38:   printf("<----------BEGIN unittest2-updateCoins()---------->\n\n");
        -:   39:
        -:   40:// ----------------- TEST 1 ---------------------------------------------------
        1:   41:   printf(" TEST 1: Verify coin count is calculated correctly.\n");
        1:   42:   updateCoins(state.whoseTurn, &state, 0);
        1:   43:   printf("    coins: %i, expected: 7\n", state.coins);
        2:   44:   assert(state.coins == 7);
branch  0 taken 0%
branch  1 taken 100%
        -:   45:
        -:   46:// ----------------- TEST 2 ---------------------------------------------------
        1:   47:   printf("\n");
        1:   48:   printf(" TEST 2: No state changes should occur for the other player.\n");
        1:   49:   printf("    deck count = %i, expected = %i\n", state.deckCount[!state.whoseTurn], saveState.deckCount[!state.whoseTurn]);
        1:   50:   printf("    discard pile count = %i, expected %i\n", state.discardCount[!state.whoseTurn], saveState.discardCount[!state.whoseTurn]);
        2:   51:   assert(saveState.deckCount[!state.whoseTurn] == state.deckCount[!state.whoseTurn]);
branch  0 taken 0%
branch  1 taken 100%
        -:   52:
        -:   53:// ----------------- TEST 3 ---------------------------------------------------
        1:   54:   printf("\n");
        1:   55:   printf(" TEST 3: No state changes should occur to victory and kingdom card piles\n");
        1:   56:   printf("    estate count = %i, expected = %i\n", state.supplyCount[estate], saveState.supplyCount[estate]);
        1:   57:   printf("    duchy count = %i, expected = %i\n", state.supplyCount[duchy], saveState.supplyCount[duchy]);
        1:   58:   printf("    province count = %i, expected = %i\n", state.supplyCount[province], saveState.supplyCount[province]);
        -:   59:   
       42:   60:   for( j = adventurer; j <= treasure_map; ++j){
branch  0 taken 95%
branch  1 taken 5%
       20:   61:      printf("    kingdomCard '%i' count = %i, expected = %i\n", j, state.supplyCount[j], saveState.supplyCount[j]);
       20:   62:   }
        -:   63:
        2:   64:   assert(saveState.supplyCount[estate] == state.supplyCount[estate]);
branch  0 taken 0%
branch  1 taken 100%
        2:   65:   assert(saveState.supplyCount[duchy] == state.supplyCount[duchy]);
branch  0 taken 0%
branch  1 taken 100%
        2:   66:   assert(saveState.supplyCount[province] == state.supplyCount[province]);
branch  0 taken 0%
branch  1 taken 100%
       42:   67:   for( j = adventurer; j <= treasure_map; ++j){
branch  0 taken 95%
branch  1 taken 5%
       40:   68:      assert(saveState.supplyCount[j] == state.supplyCount[j]);
branch  0 taken 0%
branch  1 taken 100%
       20:   69:   }
        1:   70:   printf("\n");
        1:   71:   printf("<----------END unittest2-updateCoins()---------->\n\n");
        -:   72:
        1:   73:   return 0;
        -:   74:}
