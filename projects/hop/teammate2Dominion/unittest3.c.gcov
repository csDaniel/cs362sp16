        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdio.h>
        -:    2:#include <assert.h>
        -:    3:#include <string.h>
        -:    4:#include "dominion.h"
        -:    5:#include "dominion_helpers.h"
        -:    6:#include "rngs.h"
        -:    7:
function main called 1 returned 100% blocks executed 69%
        -:    8:int main(){
        -:    9:
        -:   10:   struct gameState state, saveState;
        1:   11:   int numCardsToDraw = 5;
        1:   12:   int numPlayers = 2, j = 0;
        1:   13:   int kingdom[10] = {council_room, mine, gardens, feast, ambassador, tribute, 
        -:   14:                     steward, minion, sea_hag, treasure_map};
        1:   15:   int seed = 788;
        -:   16:
        1:   17:   initializeGame(numPlayers, kingdom, seed, &state);
        1:   18:   int currentPlayer = state.whoseTurn;
        -:   19:   // Remove cards drawn from player
       12:   20:   for (j = 0 ; j < 5 ; ++j){
branch  0 taken 83%
branch  1 taken 17%
        5:   21:      discardCard(j, currentPlayer, &state,0);
        5:   22:   }
        -:   23:   // Save the state as-is
        1:   24:   memcpy(&saveState, &state, sizeof(struct gameState));
        -:   25:   
        -:   26:   /* business requirements
        -:   27:      
        -:   28:      description: testing drawCard(int player, struct gameState *state), which
        -:   29:      places a card in player's hand.
        -:   30:
        -:   31:      1. Draw 5 cards. Current player should receive exactly 5 cards.
        -:   32:      2. Cards should have been drawn from player's pile.
        -:   33:      3. No state changes should occur for the other player.  
        -:   34:
        -:   35:      end requirements*/
        1:   36:   printf("<----------BEGIN unittest3-drawCard()---------->\n\n");
        1:   37:   printf(" Initial deck count: %i\n", state.deckCount[currentPlayer]);
        -:   38:
        -:   39:// ----------------- TEST 1 ---------------------------------------------------
        1:   40:   printf(" TEST 1: Verify cards are drawn and placed into player's hand.\n");
        -:   41:   // Draw 5 cards.
       12:   42:   for (j = 0 ; j < numCardsToDraw ; ++j){
branch  0 taken 83%
branch  1 taken 17%
        5:   43:      drawCard(currentPlayer, &state);
        5:   44:      printf("    card %i is of type: %i, expected: type != -1\n", j, state.hand[currentPlayer][j]);
       10:   45:      assert(state.hand[currentPlayer][j] != -1);
branch  0 taken 0%
branch  1 taken 100%
        5:   46:   }
        -:   47:
        1:   48:   printf("    Number of cards in hand: %i, expected: %i\n", state.handCount[currentPlayer], numCardsToDraw);
        2:   49:   assert(state.handCount[currentPlayer] == numCardsToDraw);
branch  0 taken 0%
branch  1 taken 100%
        -:   50:
        -:   51:// ----------------- TEST 2 ---------------------------------------------------
        1:   52:   printf("\n");
        1:   53:   printf(" TEST 2: Cards should have been drawn from player's deck.\n");
        1:   54:   printf("   deck count = %i, expected = %i\n", state.deckCount[currentPlayer], saveState.deckCount[currentPlayer] - numCardsToDraw);
        2:   55:   assert( state.deckCount[currentPlayer] == saveState.deckCount[currentPlayer] - numCardsToDraw ); 
branch  0 taken 0%
branch  1 taken 100%
        -:   56:
        -:   57:// ----------------- TEST 3 ---------------------------------------------------
        1:   58:   printf("\n");
        1:   59:   printf(" TEST 3: No state changes should occur to other player.\n");
        1:   60:   printf("    deck count = %i, expected = %i\n", state.deckCount[!currentPlayer], saveState.deckCount[!currentPlayer]);
        2:   61:   assert( saveState.deckCount[!currentPlayer] == state.deckCount[!currentPlayer] );
branch  0 taken 0%
branch  1 taken 100%
        1:   62:   printf("\n<----------END unittest3-drawCard()---------->\n\n");
        -:   63:
        1:   64:   return 0;
        -:   65:}
