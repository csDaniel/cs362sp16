
******* FUNCTION UNDER TEST: getCost() *******

------- UNIT TEST 1 STARTING -------

 PASSED: curse == 0.

 PASSED: estate == 2.

 PASSED: duchy == 5.

 PASSED: province == 8.

 PASSED: copper == 0.

 PASSED: silver == 3.

 PASSED: gold == 6.

 PASSED: adventurer == 6.

 PASSED: council_room == 5.

 PASSED: feast == 4.

 PASSED: gardens == 4.

 PASSED: mine == 5.

 PASSED: remodel == 4.

 PASSED: smithy == 4.

 PASSED: village == 3.

 PASSED: baron == 4.

 PASSED: great_hall == 3.

 PASSED: minion == 5.

 PASSED: steward == 3.

 PASSED: tribute == 5.

 PASSED: ambassador == 3.

 PASSED: cutpurse == 4.

 PASSED: embargo == 2.

 PASSED: outpost == 5.

 PASSED: salvager == 4.

 PASSED: sea_hag == 4.

 PASSED: treasure_map == 4.

------- UNIT TEST 1 COMPLETE -------
  All assertions passed!

File 'dominion.c'
Lines executed:5.02% of 578
Branches executed:6.48% of 432
Taken at least once:6.25% of 432
Calls executed:0.00% of 95
Creating 'dominion.c.gcov'


******* FUNCTION UNDER TEST: isGameOver() *******

------- UNIT TEST 2 STARTING -------

 PASSED: Fresh Game State == 0.

 PASSED: Province Cards Empty == 1.

 PASSED: Put 6 Province Cards Back == 0.

 PASSED: First 3 supply piles are empty == 1.

 PASSED: First 3 supply piles made non-empty == 0.

 PASSED: Feast, Remodel, Baron are empty == 1.

 PASSED: Feast, Remodel, Baron made non-empty == 0.

------- UNIT TEST 2 COMPLETE -------
  All assertions passed!

File 'dominion.c'
Lines executed:22.15% of 578
Branches executed:23.61% of 432
Taken at least once:20.60% of 432
Calls executed:7.37% of 95
Creating 'dominion.c.gcov'


******* FUNCTION UNDER TEST: numHandCards() *******

------- UNIT TEST 3 STARTING -------

 PASSED: Fresh game: Player 1 starts turn with 5 cards == 5.

 PASSED: Player 1 gains 7 cards to have 12 == 12.

 PASSED: Player 2 starts turn with 5 cards == 5.

 PASSED: Player 2 gains 7 cards to have 12 == 12.

------- UNIT TEST 3 COMPLETE -------
  All assertions passed!

File 'dominion.c'
Lines executed:26.12% of 578
Branches executed:25.00% of 432
Taken at least once:21.76% of 432
Calls executed:11.58% of 95
Creating 'dominion.c.gcov'


******* FUNCTION UNDER TEST: gainCard() *******

------- UNIT TEST 4 STARTING -------

 PASSED: Add to discard a card not in the current game == -1.

 PASSED: Add to deck a card not in the current game == -1.

 PASSED: Draw a card not in the current game == -1.

 PASSED: Add to discard a card with zero supplyCount == -1.

 PASSED: Add to deck a card with zero supplyCount == -1.

 PASSED: Draw a card not with zero supplyCount == -1.

 PASSED: Player 1 gains a feast successfully == 0.

 PASSED: Player 1 now has a feast (9) == 9.

 PASSED: Player 1 handCount incremented to 6 == 6.

 PASSED: supplyCount of feast now decremented to 9 == 9.

 PASSED: Player 1 gains a discarded village successfully == 0.

 PASSED: Player 1 discard pile now has a discarded village (14) == 14.

 PASSED: Player 1 discardCount incremented to 1 == 1.

 PASSED: supplyCount of village now decremented to 9 == 9.

 PASSED: Player 1 deck gains a smithy successfully == 0.

 PASSED: Player 1 deck now has a smithy (13) in 6th position == 13.

 PASSED: Player 1 deckCount incremented to 6 == 6.

 PASSED: supplyCount of smithy now decremented to 9 == 9.

------- UNIT TEST 4 COMPLETE -------
  All assertions passed!

File 'dominion.c'
Lines executed:28.72% of 578
Branches executed:26.39% of 432
Taken at least once:23.15% of 432
Calls executed:12.63% of 95
Creating 'dominion.c.gcov'


******* FUNCTION UNDER TEST: adventurerFunction() *******

------- CARD TEST 1 STARTING -------

 PASSED: Player 1 has adventurer card (7) in 6th slot == 7.

 PASSED: Adventurer card executes and returns 0 == 0.

 ! ASSERTION FAILED: EXPECTED Player 1 should now have 8 cards == 8, NOT 6. 

 ! ASSERTION FAILED: EXPECTED Player 1's 7th card should be treasure == 1, NOT 0. 

 ! ASSERTION FAILED: EXPECTED Player 1's 8th card should be treasure == 1, NOT 0. 

 PASSED: Player 2's hand should be 0 == 0.

 PASSED: Player 2's deck should be unchanged at 10 == 10.

 PASSED: Player 2's discard pile should be 0 == 0.

 PASSED: Estate supplyCount unchanged (8) == 8.

 PASSED: Duchy supplyCount unchanged (8) == 8.

 PASSED: Province supplyCount unchanged (8) == 8.

 PASSED: Player 1 has no treasure in deck and should have discarded at least 1 card == 1.

 ! ASSERTION FAILED: EXPECTED Player 1 deck should be empty == 0, NOT 5. 

 ! ASSERTION FAILED: EXPECTED Player 1 hand should have 5 still == 5, NOT 6. 

 ! ASSERTION FAILED: EXPECTED Player 1 should shuffle in gold from discard pile == 1, NOT 0. 

 ! ASSERTION FAILED: EXPECTED Player 1 should now have 8 cards == 8, NOT 6. 

------- CARD TEST 1 COMPLETE -------
  FAILURES: 7 

File 'dominion.c'
Lines executed:29.76% of 578
Branches executed:27.31% of 432
Taken at least once:23.84% of 432
Calls executed:12.63% of 95
Creating 'dominion.c.gcov'


******* FUNCTION UNDER TEST: smithyFunction() *******

------- CARD TEST 2 STARTING -------

 PASSED: Player 1 has smithy card (13) in 6th slot == 13.

 PASSED: Smithy card executes and returns 0 == 0.

 PASSED: Player 1 should draw 3 cards and discard smithy to have 8 total == 8.

 PASSED: Player 1 should have 3 cards subtracted from deck (5 - 3 = 2) == 2.

 PASSED: Player 2's hand should be 0 == 0.

 PASSED: Player 2's deck should be unchanged at 10 == 10.

 PASSED: Player 2's discard pile should be 0 == 0.

 PASSED: Estate supplyCount unchanged (8) == 8.

 PASSED: Duchy supplyCount unchanged (8) == 8.

 PASSED: Province supplyCount unchanged (8) == 8.

 PASSED: Player 1 should have discarded all 8 cards == 8.

 PASSED: Player 1 now should not be able to draw 3 cards but discard smithy to have 5 total == 5.

 PASSED: Player 1, with empty deck, now should draw 3 cards from shuffled discard pile to have 8 total == 8.

------- CARD TEST 2 COMPLETE -------
  All assertions passed!

File 'dominion.c'
Lines executed:34.95% of 578
Branches executed:30.09% of 432
Taken at least once:26.62% of 432
Calls executed:15.79% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:6
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 272 returned 100% blocks executed 83%
      272:    8:int compare(const void* a, const void* b) {
      272:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      272:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
       72:   12:    return -1;
      200:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 9 returned 100% blocks executed 88%
        9:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        9:   44:  SelectStream(1);
call    0 returned 100%
        9:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:  //check number of players
        9:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        9:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       99:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      990:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        9:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        9:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        9:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        9:   89:      state->supplyCount[estate] = 8;
        9:   90:      state->supplyCount[duchy] = 8;
        9:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        9:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        9:  102:  state->supplyCount[silver] = 40;
        9:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      189:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1485:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1395:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       90:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       36:  115:		  if (numPlayers == 2){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       18:  116:		    state->supplyCount[i] = 8;
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       72:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       90:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1305:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       27:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       18:  140:      state->deckCount[i] = 0;
       72:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       54:  143:	  state->deck[i][j] = estate;
       54:  144:	  state->deckCount[i]++;
        -:  145:	}
      144:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      126:  148:	  state->deck[i][j] = copper;
      126:  149:	  state->deckCount[i]++;
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       27:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       18:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       27:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {
        -:  165:      //initialize hand size to zero
       18:  166:      state->handCount[i] = 0;
       18:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      252:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      243:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        9:  182:  state->outpostPlayed = 0;
        9:  183:  state->phase = 0;
        9:  184:  state->numActions = 1;
        9:  185:  state->numBuys = 1;
        9:  186:  state->playedCardCount = 0;
        9:  187:  state->whoseTurn = 0;
        9:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       54:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       45:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        9:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        9:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 22 returned 100% blocks executed 100%
       22:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       22:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       22:  209:  if (state->deckCount[player] < 1)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        3:  210:    return -1;
       19:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      221:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      183:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      183:  216:    newDeck[newDeckPos] = state->deck[player][card];
      183:  217:    newDeckPos++;
      517:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 65%
branch  1 taken 35% (fallthrough)
      334:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      183:  221:    state->deckCount[player]--;
        -:  222:  }
      202:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      183:  224:    state->deck[player][i] = newDeck[i];
      183:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       19:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 4 returned 100% blocks executed 100%
        4:  311:int numHandCards(struct gameState *state) {
        4:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 9 returned 100% blocks executed 100%
        9:  320:int supplyCount(int card, struct gameState *state) {
        9:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 6 returned 100% blocks executed 100%
        6:  346:int whoseTurn(struct gameState *state) {
        6:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 2 returned 100% blocks executed 93%
        2:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        2:  353:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  354:
        -:  355:  //Discard hand
       22:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       20:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       20:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
        2:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
        2:  363:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        2:  370:  state->outpostPlayed = 0;
        2:  371:  state->phase = 0;
        2:  372:  state->numActions = 1;
        2:  373:  state->coins = 0;
        2:  374:  state->numBuys = 1;
        2:  375:  state->playedCardCount = 0;
        2:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       12:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       10:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  382:  }
        -:  383:
        -:  384:  //Update money
        2:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  386:
        2:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 7 returned 100% blocks executed 100%
        7:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
        7:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        6:  401:  j = 0;
      156:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      150:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  405:	{
        6:  406:	  j++;
        -:  407:	}
        -:  408:    }
        6:  409:  if ( j >= 3)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  410:    {
        2:  411:      return 1;
        -:  412:    }
        -:  413:
        4:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 64 returned 100% blocks executed 100%
       64:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       64:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        7:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 43%
branch  1 taken 57% (fallthrough)
        3:  534:      state->deck[player][i] = state->discard[player][i];
        3:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        4:  538:    state->deckCount[player] = state->discardCount[player];
        4:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        4:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
        4:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        4:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
        4:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        4:  559:    if (deckCounter == 0)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        3:  560:      return -1;
        -:  561:
        1:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  563:    state->deckCount[player]--;
        1:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       60:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       60:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       60:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       60:  576:    state->deckCount[player]--;
       60:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       61:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 27 returned 100% blocks executed 97%
       27:  583:int getCost(int cardNumber)
        -:  584:{
       27:  585:  switch( cardNumber )
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo:
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        -:  658:  //int drawntreasure=0;
        -:  659:  //int cardDrawn;
        -:  660:  //int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:
        -:  665:
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
        -:  668:    {
        -:  669:
        -:  670:    case feast:
        -:  671:      //gain card with cost up to 5
        -:  672:      //Backup hand
    #####:  673:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  674:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  675:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  676:      }
        -:  677:      //Backup hand
        -:  678:
        -:  679:      //Update Coins for Buy
    #####:  680:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  681:      x = 1;//Condition to loop on
    #####:  682:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  683:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  684:	  if (DEBUG)
        -:  685:	    printf("None of that card left, sorry!\n");
        -:  686:
        -:  687:	  if (DEBUG){
        -:  688:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  689:	  }
        -:  690:	}
    #####:  691:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  692:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  693:
        -:  694:	  if (DEBUG){
        -:  695:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  696:	  }
        -:  697:	}
        -:  698:	else{
        -:  699:
        -:  700:	  if (DEBUG){
        -:  701:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  702:	  }
        -:  703:
    #####:  704:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  705:	  x = 0;//No more buying cards
        -:  706:
        -:  707:	  if (DEBUG){
        -:  708:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  709:	  }
        -:  710:
        -:  711:	}
        -:  712:      }
        -:  713:
        -:  714:      //Reset Hand
    #####:  715:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  716:	state->hand[currentPlayer][i] = temphand[i];
    #####:  717:	temphand[i] = -1;
        -:  718:      }
        -:  719:      //Reset Hand
        -:  720:
    #####:  721:      return 0;
        -:  722:
        -:  723:    case gardens:
    #####:  724:      return -1;
        -:  725:
        -:  726:    case mine:
    #####:  727:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  728:
    #####:  729:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  730:	{
    #####:  731:	  return -1;
        -:  732:	}
        -:  733:
    #####:  734:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  735:	{
    #####:  736:	  return -1;
        -:  737:	}
        -:  738:
    #####:  739:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:
    #####:  744:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  745:
        -:  746:      //discard card from hand
    #####:  747:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  748:
        -:  749:      //discard trashed card
    #####:  750:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  751:	{
    #####:  752:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  753:	    {
    #####:  754:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  755:	      break;
        -:  756:	    }
        -:  757:	}
        -:  758:
    #####:  759:      return 0;
        -:  760:
        -:  761:    case remodel:
    #####:  762:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  763:
    #####:  764:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  765:	{
    #####:  766:	  return -1;
        -:  767:	}
        -:  768:
    #####:  769:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  770:
        -:  771:      //discard card from hand
    #####:  772:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  773:
        -:  774:      //discard trashed card
    #####:  775:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  776:	{
    #####:  777:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  778:	    {
    #####:  779:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  780:	      break;
        -:  781:	    }
        -:  782:	}
        -:  783:
        -:  784:
    #####:  785:      return 0;
        -:  786:
        -:  787:    /*case smithy:
        -:  788:      //+3 Cards
        -:  789:      for (i = 0; i < 3; i++)
        -:  790:	{
        -:  791:	  drawCard(currentPlayer, state);
        -:  792:	}
        -:  793:
        -:  794:      //discard card from hand
        -:  795:      discardCard(handPos, currentPlayer, state, 0);
        -:  796:      return 0;
        -:  797:	*/
        -:  798:
        -:  799:    case baron:
    #####:  800:      state->numBuys++;//Increase buys by 1!
    #####:  801:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  802:	int p = 0;//Iterator for hand!
    #####:  803:	int card_not_discarded = 1;//Flag for discard set!
    #####:  804:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  805:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  806:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  807:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  808:	    state->discardCount[currentPlayer]++;
    #####:  809:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  810:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  811:	    }
    #####:  812:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  813:	    state->handCount[currentPlayer]--;
    #####:  814:	    card_not_discarded = 0;//Exit the loop
        -:  815:	  }
    #####:  816:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  817:	    if(DEBUG) {
        -:  818:	      printf("No estate cards in your hand, invalid choice\n");
        -:  819:	      printf("Must gain an estate if there are any\n");
        -:  820:	    }
    #####:  821:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  822:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  823:	      state->supplyCount[estate]--;//Decrement estates
    #####:  824:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  825:		isGameOver(state);
call    0 never executed
        -:  826:	      }
        -:  827:	    }
    #####:  828:	    card_not_discarded = 0;//Exit the loop
        -:  829:	  }
        -:  830:
        -:  831:	  else{
    #####:  832:	    p++;//Next card
        -:  833:	  }
        -:  834:	}
        -:  835:      }
        -:  836:
        -:  837:      else{
    #####:  838:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  839:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  840:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  841:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  842:	    isGameOver(state);
call    0 never executed
        -:  843:	  }
        -:  844:	}
        -:  845:      }
        -:  846:
        -:  847:
    #####:  848:      return 0;
        -:  849:
        -:  850:    case great_hall:
        -:  851:      //+1 Card
    #####:  852:      drawCard(currentPlayer, state);
call    0 never executed
        -:  853:
        -:  854:      //+1 Actions
    #####:  855:      state->numActions++;
        -:  856:
        -:  857:      //discard card from hand
    #####:  858:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  859:      return 0;
        -:  860:
        -:  861:    case minion:
        -:  862:      //+1 action
    #####:  863:      state->numActions++;
        -:  864:
        -:  865:      //discard card from hand
    #####:  866:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  867:
    #####:  868:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  869:	{
    #####:  870:	  state->coins = state->coins + 2;
        -:  871:	}
        -:  872:
    #####:  873:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  874:	{
        -:  875:	  //discard hand
    #####:  876:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  877:	    {
    #####:  878:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  879:	    }
        -:  880:
        -:  881:	  //draw 4
    #####:  882:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  883:	    {
    #####:  884:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  885:	    }
        -:  886:
        -:  887:	  //other players discard hand and redraw if hand size > 4
    #####:  888:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  889:	    {
    #####:  890:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  891:		{
    #####:  892:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  893:		    {
        -:  894:		      //discard hand
    #####:  895:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  896:			{
    #####:  897:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  898:			}
        -:  899:
        -:  900:		      //draw 4
    #####:  901:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  902:			{
    #####:  903:			  drawCard(i, state);
call    0 never executed
        -:  904:			}
        -:  905:		    }
        -:  906:		}
        -:  907:	    }
        -:  908:
        -:  909:	}
    #####:  910:      return 0;
        -:  911:
        -:  912:    case steward:
    #####:  913:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  914:	{
        -:  915:	  //+2 cards
    #####:  916:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  917:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  918:	}
    #####:  919:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  920:	{
        -:  921:	  //+2 coins
    #####:  922:	  state->coins = state->coins + 2;
        -:  923:	}
        -:  924:      else
        -:  925:	{
        -:  926:	  //trash 2 cards in hand
    #####:  927:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  928:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  929:	}
        -:  930:
        -:  931:      //discard card from hand
    #####:  932:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  933:      return 0;
        -:  934:
        -:  935:    case tribute:
    #####:  936:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  937:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  938:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  939:	  state->deckCount[nextPlayer]--;
        -:  940:	}
    #####:  941:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  942:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  943:	  state->discardCount[nextPlayer]--;
        -:  944:	}
        -:  945:	else{
        -:  946:	  //No Card to Reveal
        -:  947:	  if (DEBUG){
        -:  948:	    printf("No cards to reveal\n");
        -:  949:	  }
        -:  950:	}
        -:  951:      }
        -:  952:
        -:  953:      else{
    #####:  954:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  955:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  956:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  957:	    state->deckCount[nextPlayer]++;
    #####:  958:	    state->discard[nextPlayer][i] = -1;
    #####:  959:	    state->discardCount[nextPlayer]--;
        -:  960:	  }
        -:  961:
    #####:  962:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  963:	}
    #####:  964:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  965:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  966:	state->deckCount[nextPlayer]--;
    #####:  967:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  968:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  969:	state->deckCount[nextPlayer]--;
        -:  970:      }
        -:  971:
    #####:  972:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####:  973:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  974:	state->playedCardCount++;
    #####:  975:	tributeRevealedCards[1] = -1;
        -:  976:      }
        -:  977:
    #####:  978:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  979:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  980:	  state->coins += 2;
        -:  981:	}
        -:  982:
    #####:  983:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  984:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  985:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  986:	}
        -:  987:	else{//Action Card
    #####:  988:	  state->numActions = state->numActions + 2;
        -:  989:	}
        -:  990:      }
        -:  991:
    #####:  992:      return 0;
        -:  993:
        -:  994:    case ambassador:
    #####:  995:      j = 0;		//used to check if player has enough cards to discard
        -:  996:
    #####:  997:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  998:	{
    #####:  999:	  return -1;
        -: 1000:	}
        -: 1001:
    #####: 1002:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1003:	{
    #####: 1004:	  return -1;
        -: 1005:	}
        -: 1006:
    #####: 1007:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1008:	{
    #####: 1009:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1010:	    {
    #####: 1011:	      j++;
        -: 1012:	    }
        -: 1013:	}
    #####: 1014:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1015:	{
    #####: 1016:	  return -1;
        -: 1017:	}
        -: 1018:
        -: 1019:      if (DEBUG)
        -: 1020:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1021:
        -: 1022:      //increase supply count for choosen card by amount being discarded
    #####: 1023:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1024:
        -: 1025:      //each other player gains a copy of revealed card
    #####: 1026:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1027:	{
    #####: 1028:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1029:	    {
    #####: 1030:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1031:	    }
        -: 1032:	}
        -: 1033:
        -: 1034:      //discard played card from hand
    #####: 1035:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1036:
        -: 1037:      //trash copies of cards returned to supply
    #####: 1038:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1039:	{
    #####: 1040:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1041:	    {
    #####: 1042:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1043:		{
    #####: 1044:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1045:		  break;
        -: 1046:		}
        -: 1047:	    }
        -: 1048:	}
        -: 1049:
    #####: 1050:      return 0;
        -: 1051:
        -: 1052:    case cutpurse:
        -: 1053:
    #####: 1054:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1055:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1056:	{
    #####: 1057:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1058:	    {
    #####: 1059:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1060:		{
    #####: 1061:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1062:		    {
    #####: 1063:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1064:		      break;
        -: 1065:		    }
    #####: 1066:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1067:		    {
    #####: 1068:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1069:			{
        -: 1070:			  if (DEBUG)
        -: 1071:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1072:			}
    #####: 1073:		      break;
        -: 1074:		    }
        -: 1075:		}
        -: 1076:
        -: 1077:	    }
        -: 1078:
        -: 1079:	}
        -: 1080:
        -: 1081:      //discard played card from hand
    #####: 1082:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1083:
    #####: 1084:      return 0;
        -: 1085:
        -: 1086:
        -: 1087:    case embargo:
        -: 1088:      //+2 Coins
    #####: 1089:      state->coins = state->coins + 2;
        -: 1090:
        -: 1091:      //see if selected pile is in play
    #####: 1092:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1093:	{
    #####: 1094:	  return -1;
        -: 1095:	}
        -: 1096:
        -: 1097:      //add embargo token to selected supply pile
    #####: 1098:      state->embargoTokens[choice1]++;
        -: 1099:
        -: 1100:      //trash card
    #####: 1101:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1102:      return 0;
        -: 1103:
        -: 1104:    case salvager:
        -: 1105:      //+1 buy
    #####: 1106:      state->numBuys++;
        -: 1107:
    #####: 1108:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1109:	{
        -: 1110:	  //gain coins equal to trashed card
    #####: 1111:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1112:	  //trash card
    #####: 1113:	  discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1114:	}
        -: 1115:
        -: 1116:      //discard card
    #####: 1117:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1118:      return 0;
        -: 1119:
        -: 1120:    case sea_hag:
    #####: 1121:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1122:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1123:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1124:	  state->discardCount[i]++;
    #####: 1125:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1126:	}
        -: 1127:      }
    #####: 1128:      return 0;
        -: 1129:
        -: 1130:    case treasure_map:
        -: 1131:      //search hand for another treasure_map
    #####: 1132:      index = -1;
    #####: 1133:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1134:	{
    #####: 1135:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1136:	    {
    #####: 1137:	      index = i;
    #####: 1138:	      break;
        -: 1139:	    }
        -: 1140:	}
    #####: 1141:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1142:	{
        -: 1143:	  //trash both treasure cards
    #####: 1144:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1145:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1146:
        -: 1147:	  //gain 4 Gold cards
    #####: 1148:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1149:	    {
    #####: 1150:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1151:	    }
        -: 1152:
        -: 1153:	  //return success
    #####: 1154:	  return 1;
        -: 1155:	}
        -: 1156:
        -: 1157:      //no second treasure_map found in hand
    #####: 1158:      return -1;
        -: 1159:    }
        -: 1160:
        -: 1161:    //Add refactored functions for selected card enums
    #####: 1162:    if(card == smithy)
branch  0 never executed
branch  1 never executed
        -: 1163:    {
    #####: 1164:    	int result = cardSmithy(currentPlayer, state, handPos);
call    0 never executed
    #####: 1165:    	if ((result == 0))
branch  0 never executed
branch  1 never executed
        -: 1166:    	{
    #####: 1167:    		return 0;
        -: 1168:    	} else
        -: 1169:    		{
    #####: 1170:    			return -1;
        -: 1171:    		}
        -: 1172:    }
        -: 1173:
    #####: 1174:    if(card == adventurer)
branch  0 never executed
branch  1 never executed
        -: 1175:    {
    #####: 1176:    	int result = cardAdventurer(currentPlayer, state);
call    0 never executed
    #####: 1177:    	if ((result == 0))
branch  0 never executed
branch  1 never executed
        -: 1178:    	{
    #####: 1179:    		return 0;
        -: 1180:    	} else
        -: 1181:    		{
    #####: 1182:    			return -1;
        -: 1183:    		}
        -: 1184:    }
        -: 1185:
    #####: 1186:	if(card == village)
branch  0 never executed
branch  1 never executed
        -: 1187:    {
    #####: 1188:    	int result = cardVillage(currentPlayer, state, handPos);
call    0 never executed
    #####: 1189:    	if ((result == 0))
branch  0 never executed
branch  1 never executed
        -: 1190:    	{
    #####: 1191:    		return 0;
        -: 1192:    	} else
        -: 1193:    		{
    #####: 1194:    			return -1;
        -: 1195:    		}
        -: 1196:    }
        -: 1197:
    #####: 1198:	if(card == council_room)
branch  0 never executed
branch  1 never executed
        -: 1199:    {
    #####: 1200:    	int result = cardCouncil_room(currentPlayer, state, handPos);
call    0 never executed
    #####: 1201:    	if ((result == 0))
branch  0 never executed
branch  1 never executed
        -: 1202:    	{
    #####: 1203:    		return 0;
        -: 1204:    	} else
        -: 1205:    		{
    #####: 1206:    			return -1;
        -: 1207:    		}
        -: 1208:    }
        -: 1209:
    #####: 1210:    if(card == outpost)
branch  0 never executed
branch  1 never executed
        -: 1211:    {
    #####: 1212:    	int result = cardOutpost(currentPlayer, state, handPos);
call    0 never executed
    #####: 1213:    	if ((result == 0))
branch  0 never executed
branch  1 never executed
        -: 1214:    	{
    #####: 1215:    		return 0;
        -: 1216:    	} else
        -: 1217:    		{
    #####: 1218:    			return -1;
        -: 1219:    		}
        -: 1220:    }
        -: 1221:
    #####: 1222:  return -1;
        -: 1223:}
        -: 1224:
function discardCard called 3 returned 100% blocks executed 78%
        3: 1225:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1226:{
        -: 1227:
        -: 1228:  //if card is not trashed, added to Played pile
        3: 1229:  if (trashFlag < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1230:    {
        -: 1231:      //add card to played pile
    #####: 1232:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    #####: 1233:      state->playedCardCount++;
        -: 1234:    }
        -: 1235:
        -: 1236:  //set played card to -1
        3: 1237:  state->hand[currentPlayer][handPos] = -1;
        -: 1238:
        -: 1239:  //remove card from player's hand
        3: 1240:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1241:    {
        -: 1242:      //reduce number of cards in hand
        1: 1243:      state->handCount[currentPlayer]--;
        -: 1244:    }
        2: 1245:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1246:    {
        -: 1247:      //reduce number of cards in hand
    #####: 1248:      state->handCount[currentPlayer]--;
        -: 1249:    }
        -: 1250:  else
        -: 1251:    {
        -: 1252:      //replace discarded card with last card in hand
        2: 1253:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1254:      //set last card to -1
        2: 1255:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1256:      //reduce number of cards in hand
        2: 1257:      state->handCount[currentPlayer]--;
        -: 1258:    }
        -: 1259:
        3: 1260:  return 0;
        -: 1261:}
        -: 1262:
function gainCard called 9 returned 100% blocks executed 100%
        9: 1263:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1264:{
        -: 1265:  //Note: supplyPos is enum of choosen card
        -: 1266:
        -: 1267:  //check if supply pile is empty (0) or card is not used in game (-1)
        9: 1268:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 67% (fallthrough)
branch  2 taken 33%
        -: 1269:    {
        6: 1270:      return -1;
        -: 1271:    }
        -: 1272:
        -: 1273:  //added card for [whoseTurn] current player:
        -: 1274:  // toFlag = 0 : add to discard
        -: 1275:  // toFlag = 1 : add to deck
        -: 1276:  // toFlag = 2 : add to hand
        -: 1277:
        3: 1278:  if (toFlag == 1)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1279:    {
        1: 1280:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1281:      state->deckCount[player]++;
        -: 1282:    }
        2: 1283:  else if (toFlag == 2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1284:    {
        1: 1285:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1286:      state->handCount[player]++;
        -: 1287:    }
        -: 1288:  else
        -: 1289:    {
        1: 1290:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1291:      state->discardCount[player]++;
        -: 1292:    }
        -: 1293:
        -: 1294:  //decrease number in supply pile
        3: 1295:  state->supplyCount[supplyPos]--;
        -: 1296:
        3: 1297:  return 0;
        -: 1298:}
        -: 1299:
function updateCoins called 11 returned 100% blocks executed 82%
       11: 1300:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1301:{
        -: 1302:  int i;
        -: 1303:
        -: 1304:  //reset coin count
       11: 1305:  state->coins = 0;
        -: 1306:
        -: 1307:  //add coins for each Treasure card in player's hand
       66: 1308:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1309:    {
       55: 1310:      if (state->hand[player][i] == copper)
branch  0 taken 76% (fallthrough)
branch  1 taken 24%
        -: 1311:	{
       42: 1312:	  state->coins += 1;
        -: 1313:	}
       13: 1314:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1315:	{
    #####: 1316:	  state->coins += 2;
        -: 1317:	}
       13: 1318:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1319:	{
    #####: 1320:	  state->coins += 3;
        -: 1321:	}
        -: 1322:    }
        -: 1323:
        -: 1324:  //add bonus
       11: 1325:  state->coins += bonus;
        -: 1326:
       11: 1327:  return 0;
        -: 1328:}
        -: 1329:
function cardSmithy called 3 returned 100% blocks executed 100%
        3: 1330:int cardSmithy(int currentPlayer, struct gameState *state, int handPos)
        -: 1331:{
        -: 1332:	//+3 Cards in hand
        -: 1333:	int i;
       12: 1334:	for(i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -: 1335:	{
        9: 1336:		drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1337:	}
        -: 1338:
        3: 1339:	discardCard(handPos, currentPlayer, state, i);
call    0 returned 100%
        3: 1340:	return 0;
        -: 1341:}
        -: 1342:
function cardAdventurer called 3 returned 100% blocks executed 50%
        3: 1343:int cardAdventurer(int currentPlayer, struct gameState *state)
        -: 1344:{
        -: 1345:	int drawntreasure;
        -: 1346:	int cardDrawn;
        -: 1347:	int z;
        -: 1348:	int temphand[MAX_HAND];
        -: 1349:
        6: 1350:	while(drawntreasure<2)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -: 1351:	{
    #####: 1352:		if(state->deckCount[currentPlayer] < 1)
branch  0 never executed
branch  1 never executed
        -: 1353:			{
    #####: 1354:				shuffle(currentPlayer, state);
call    0 never executed
        -: 1355:			}
        -: 1356:
    #####: 1357:		drawCard(currentPlayer, state);
call    0 never executed
    #####: 1358:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
    #####: 1359:		if (cardDrawn == silver ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1360:			cardDrawn == copper)
        -: 1361:			{
    #####: 1362:				drawntreasure ++;
        -: 1363:			}
        -: 1364:		else{
    #####: 1365:			temphand[z] = cardDrawn;
    #####: 1366:			state->handCount[currentPlayer]--;
    #####: 1367:			z++;
        -: 1368:		}
        -: 1369:	}
        -: 1370:
       33: 1371:	while(z-1>=0){
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
       27: 1372:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1];
       27: 1373:		z=z-1;
        -: 1374:	}
        3: 1375:	return 0;
        -: 1376:}
        -: 1377:
function cardVillage called 0 returned 0% blocks executed 0%
    #####: 1378:int cardVillage(int currentPlayer, struct gameState *state, int handPos)
        -: 1379:{
        -: 1380:	//Draw one card
    #####: 1381:	drawCard(currentPlayer, state);
call    0 never executed
        -: 1382:
        -: 1383:	//Gain two actions
    #####: 1384:	state->numActions = state->numPlayers + 2;
        -: 1385:
        -: 1386:	//discard the played card from that hand
    #####: 1387:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1388:
    #####: 1389:	return 0;
        -: 1390:}
        -: 1391:
function cardCouncil_room called 0 returned 0% blocks executed 0%
    #####: 1392:int cardCouncil_room(int currentPlayer, struct gameState *state, int handPos)
        -: 1393:{
        -: 1394:	int i;
        -: 1395:	int p;
        -: 1396:
        -: 1397:	//Draw 4 cards
    #####: 1398:	for(i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1399:	{
    #####: 1400:		drawCard(currentPlayer, state);
call    0 never executed
        -: 1401:	}
        -: 1402:
        -: 1403:	//+1 buy
    #####: 1404:	state->numBuys++;
        -: 1405:
        -: 1406:	//Each other player draws a card
    #####: 1407:	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1408:	{
    #####: 1409:		if(p != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1410:		{
    #####: 1411:			drawCard(i, state);
call    0 never executed
        -: 1412:		}
        -: 1413:	}
        -: 1414:
        -: 1415:	//put played card in discard pile
    #####: 1416:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1417:
    #####: 1418:	return 0;
        -: 1419:}
        -: 1420:
function cardOutpost called 0 returned 0% blocks executed 0%
    #####: 1421:int cardOutpost(int currentPlayer, struct gameState *state, int handPos)
        -: 1422:{
        -: 1423:
    #####: 1424:  int i = 0;
        -: 1425:
    #####: 1426:  if(i)
branch  0 never executed
branch  1 never executed
        -: 1427:  	{
    #####: 1428:      state->outpostPlayed++;
        -: 1429:    }
        -: 1430:	//discard card
    #####: 1431:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1432:	return 0;
        -: 1433:}
        -: 1434:
        -: 1435:
        -: 1436://end of dominion.c
