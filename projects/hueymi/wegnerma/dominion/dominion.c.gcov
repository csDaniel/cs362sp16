        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 330 returned 100% blocks executed 83%
      330:    8:int compare(const void* a, const void* b) {
      330:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      330:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       88:   12:    return -1;
      242:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 8 returned 100% blocks executed 88%
        8:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        8:   44:  SelectStream(1);
call    0 returned 100%
        8:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        8:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        8:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       88:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      880:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      800:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        8:   73:  if (numPlayers == 2)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:   74:    {
        2:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        6:   77:  else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:    {
        6:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        8:   87:  if (numPlayers == 2)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:   88:    {
        2:   89:      state->supplyCount[estate] = 8;
        2:   90:      state->supplyCount[duchy] = 8;
        2:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        6:   95:      state->supplyCount[estate] = 12;
        6:   96:      state->supplyCount[duchy] = 12;
        6:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        8:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  102:  state->supplyCount[silver] = 40;
        8:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      168:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1320:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1240:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       80:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       80:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       80:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1160:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       30:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
        -:  139:    {
       22:  140:      state->deckCount[i] = 0;
       88:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       66:  143:	  state->deck[i][j] = estate;
       66:  144:	  state->deckCount[i]++;
        -:  145:	}
      176:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      154:  148:	  state->deck[i][j] = copper;
      154:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       30:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
        -:  155:    {
       22:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       30:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       22:  166:      state->handCount[i] = 0;
       22:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      224:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      216:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        8:  182:  state->outpostPlayed = 0;
        8:  183:  state->phase = 0;
        8:  184:  state->numActions = 1;
        8:  185:  state->numBuys = 1;
        8:  186:  state->playedCardCount = 0;
        8:  187:  state->whoseTurn = 0;
        8:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       48:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       40:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        8:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        8:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 22 returned 100% blocks executed 94%
       22:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       22:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       22:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
       22:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      264:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      220:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      220:  216:    newDeck[newDeckPos] = state->deck[player][card];
      220:  217:    newDeckPos++;
      770:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      550:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      220:  221:    state->deckCount[player]--;
        -:  222:  }
      242:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      220:  224:    state->deck[player][i] = newDeck[i];
      220:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       22:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 2 returned 100% blocks executed 79%
        2:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        2:  280:  who = state->whoseTurn;
        -:  281:
        2:  282:  if (state->numBuys < 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
        2:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
        2:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
        2:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        2:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  298:  
        2:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
        2:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        2:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 6 returned 100% blocks executed 100%
        6:  320:int supplyCount(int card, struct gameState *state) {
        6:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 25 returned 100% blocks executed 100%
       25:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
       25:  326:  int count = 0;
        -:  327:
      150:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  329:    {
      125:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
        -:  331:    }
        -:  332:
      150:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  334:    {
      125:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
        -:  336:    }
        -:  337:
       33:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 24%
branch  1 taken 76% (fallthrough)
        -:  339:    {
        8:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  341:    }
        -:  342:
       25:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 45 returned 100% blocks executed 100%
       45:  346:int whoseTurn(struct gameState *state) {
       45:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 7 returned 100% blocks executed 100%
        7:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        7:  353:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  354:  
        -:  355:  //Discard hand
       32:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
       25:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       25:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
        7:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
        7:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
        6:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
        1:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        7:  370:  state->outpostPlayed = 0;
        7:  371:  state->phase = 0;
        7:  372:  state->numActions = 1;
        7:  373:  state->coins = 0;
        7:  374:  state->numBuys = 1;
        7:  375:  state->playedCardCount = 0;
        7:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       42:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       35:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  382:  }
        -:  383:
        -:  384:  //Update money
        7:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  386:
        7:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 46 returned 100% blocks executed 100%
       46:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       46:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       44:  401:  j = 0;
     1144:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
     1100:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  405:	{
       16:  406:	  j++;
        -:  407:	}
        -:  408:    }
       44:  409:  if ( j >= 3)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:  410:    {
        2:  411:      return 1;
        -:  412:    }
        -:  413:
       42:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 95 returned 100% blocks executed 38%
       95:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       95:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       95:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       95:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       95:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       95:  576:    state->deckCount[player]--;
       95:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       95:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 15 returned 100% blocks executed 27%
       15:  583:int getCost(int cardNumber)
        -:  584:{
       15:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 47%
branch  2 taken 0%
branch  3 taken 7%
branch  4 taken 20%
branch  5 taken 13%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 7%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 7%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
        7:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        3:  596:      return 0;
        -:  597:    case silver:
        2:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:/******************************************CARD FUNCTIONS*************************************************/
function playAdventurer called 6 returned 100% blocks executed 53%
        6:  647:int playAdventurer(struct gameState *state, int handPos) {
        6:  648:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  649:	int cardDrawn;
        6:  650:	int drawntreasure=0;
        -:  651:	int temphand[MAX_HAND];
        6:  652:	int z = 0;
        -:  653:	int i;
        -:  654:
       12:  655:	while(drawntreasure>2){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  656:	drawCard(currentPlayer, state);
call    0 never executed
    #####:  657:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  658:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  659:	  drawntreasure++;
        -:  660:	else{
    #####:  661:	  temphand[z]=cardDrawn;
    #####:  662:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  663:	  z++;
        -:  664:	}
        -:  665:      }
       12:  666:      while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  667:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  668:	z=z-1;
        -:  669:      }
        -:  670:
        -:  671:	  //put played card in played card pile
        6:  672:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  673:
        6:  674:	return 0;
        -:  675:}
        -:  676:
function playSmithy called 5 returned 100% blocks executed 100%
        5:  677:int playSmithy(struct gameState *state, int handPos) {
        5:  678:	  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        5:  679:	  int i = 0;
        -:  680:
        -:  681:	 //+3 Cards
       25:  682:     for (i = 0; i <= 3; i++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
       20:  683:	   drawCard(currentPlayer, state);
call    0 returned 100%
        -:  684:	 }
        -:  685:			
        -:  686:     //discard card from hand
        5:  687:     discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  688:	
        5:  689:	 return 0;
        -:  690:}
        -:  691:
function playVillage called 0 returned 0% blocks executed 0%
    #####:  692:int playVillage(struct gameState *state, int handPos) {
    #####:  693:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  694:			
        -:  695:    //+2 Actions
    #####:  696:    state->numActions = state->numActions + 2;
        -:  697:			
        -:  698:    //discard played card from hand
    #####:  699:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  700:
    #####:  701:	return 0;
        -:  702:}
        -:  703:
function playGreatHall called 0 returned 0% blocks executed 0%
    #####:  704:int playGreatHall(struct gameState *state, int handPos){
    #####:  705:	  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  706:
        -:  707:	  //+1 Card
    #####:  708:      drawCard(currentPlayer, state);
call    0 never executed
        -:  709:			
        -:  710:      //+1 Actions
    #####:  711:      state->numActions++;
        -:  712:
    #####:  713:	  return 0;
        -:  714:}
        -:  715:
function playCutpurse called 0 returned 0% blocks executed 0%
    #####:  716:int playCutpurse(struct gameState *state, int handPos) {
    #####:  717:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  718:	int i;
        -:  719:	int j;
        -:  720:	int k;
        -:  721:	
    #####:  722:	updateCoins(currentPlayer, state, 2);
call    0 never executed
        -:  723:      
    #####:  724:	for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  725:	  if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  726:	     for (j = 0; j < state->handCount[i]; j++) {
branch  0 never executed
branch  1 never executed
    #####:  727:			if (state->hand[i][j] == copper) {
branch  0 never executed
branch  1 never executed
    #####:  728:			  discardCard(j, i, state, 0);
call    0 never executed
    #####:  729:		      break;
        -:  730:		     }
    #####:  731:		     if (j == state->handCount[i]) {
branch  0 never executed
branch  1 never executed
    #####:  732:		       for (k = 0; k < state->handCount[i]; k++){
branch  0 never executed
branch  1 never executed
        -:  733:				 if (DEBUG)
        -:  734:					printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  735:			   }
        -:  736:
    #####:  737:		       break;
        -:  738:		     }		
        -:  739:	     }
        -:  740:					
        -:  741:	  }
        -:  742:				
        -:  743:   }				
        -:  744:
        -:  745:   //discard played card from hand
    #####:  746:   discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  747:
    #####:  748:   return 0;
        -:  749:}
        -:  750:/******************************************END CARD FUNCTIONS*************************************************/
        -:  751:
function cardEffect called 19 returned 100% blocks executed 11%
       19:  752:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  753:{
        -:  754:  int i;
        -:  755:  int j;
        -:  756:  int x;
        -:  757:  int index;
       19:  758:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       19:  759:  int nextPlayer = currentPlayer + 1;
        -:  760:
       19:  761:  int tributeRevealedCards[2] = {-1, -1};
        -:  762:  int temphand[MAX_HAND];// moved above the if statement
       19:  763:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  764:    nextPlayer = 0;
        -:  765:  }
        -:  766:  
        -:  767:	
        -:  768:  //uses switch to select card and perform actions
       19:  769:  switch( card ) 
branch  0 taken 32%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 21%
branch  6 taken 26%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 21%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  770:    {
        -:  771:    case adventurer:
        6:  772:	  return playAdventurer(state, handPos);
call    0 returned 100%
        -:  773:			
        -:  774:    case council_room:
        -:  775:      //+4 Cards
    #####:  776:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  777:	{
    #####:  778:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  779:	}
        -:  780:			
        -:  781:      //+1 Buy
    #####:  782:      state->numBuys++;
        -:  783:			
        -:  784:      //Each other player draws a card
    #####:  785:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  786:	{
    #####:  787:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  788:	    {
    #####:  789:	      drawCard(i, state);
call    0 never executed
        -:  790:	    }
        -:  791:	}
        -:  792:			
        -:  793:      //put played card in played card pile
    #####:  794:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  795:			
    #####:  796:      return 0;
        -:  797:			
        -:  798:    case feast:
        -:  799:      //gain card with cost up to 5
        -:  800:      //Backup hand
    #####:  801:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  802:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  803:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  804:      }
        -:  805:      //Backup hand
        -:  806:
        -:  807:      //Update Coins for Buy
    #####:  808:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  809:      x = 1;//Condition to loop on
    #####:  810:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  811:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  812:	  if (DEBUG)
        -:  813:	    printf("None of that card left, sorry!\n");
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  817:	  }
        -:  818:	}
    #####:  819:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  820:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  824:	  }
        -:  825:	}
        -:  826:	else{
        -:  827:
        -:  828:	  if (DEBUG){
        -:  829:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  830:	  }
        -:  831:
    #####:  832:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  833:	  x = 0;//No more buying cards
        -:  834:
        -:  835:	  if (DEBUG){
        -:  836:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  837:	  }
        -:  838:
        -:  839:	}
        -:  840:      }     
        -:  841:
        -:  842:      //Reset Hand
    #####:  843:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  844:	state->hand[currentPlayer][i] = temphand[i];
    #####:  845:	temphand[i] = -1;
        -:  846:      }
        -:  847:      //Reset Hand
        -:  848:      			
    #####:  849:      return 0;
        -:  850:			
        -:  851:    case gardens:
    #####:  852:      return -1;
        -:  853:			
        -:  854:    case mine:
    #####:  855:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  856:
    #####:  857:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  858:	{
    #####:  859:	  return -1;
        -:  860:	}
        -:  861:		
    #####:  862:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  863:	{
    #####:  864:	  return -1;
        -:  865:	}
        -:  866:
    #####:  867:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  868:	{
    #####:  869:	  return -1;
        -:  870:	}
        -:  871:
    #####:  872:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  873:
        -:  874:      //discard card from hand
    #####:  875:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  876:
        -:  877:      //discard trashed card
    #####:  878:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  879:	{
    #####:  880:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  881:	    {
    #####:  882:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  883:	      break;
        -:  884:	    }
        -:  885:	}
        -:  886:			
    #####:  887:      return 0;
        -:  888:			
        -:  889:    case remodel:
        4:  890:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  891:
        4:  892:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        -:  893:	{
        2:  894:	  return -1;
        -:  895:	}
        -:  896:
        2:  897:      gainCard(choice2, state, 0, currentPlayer);
call    0 returned 100%
        -:  898:
        -:  899:      //discard card from hand
        2:  900:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  901:
        -:  902:      //discard trashed card
        8:  903:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  904:	{
        8:  905:	  if (state->hand[currentPlayer][i] == j)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  906:	    {
        2:  907:	      discardCard(i, currentPlayer, state, 0);			
call    0 returned 100%
        2:  908:	      break;
        -:  909:	    }
        -:  910:	}
        -:  911:
        -:  912:
        2:  913:      return 0;
        -:  914:		
        -:  915:    case smithy:
        5:  916:      return playSmithy(state, handPos);
call    0 returned 100%
        -:  917:		
        -:  918:    case village:
    #####:  919:      return playVillage(state, handPos);
call    0 never executed
        -:  920:		
        -:  921:    case baron:
    #####:  922:      state->numBuys++;//Increase buys by 1!
    #####:  923:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  924:	int p = 0;//Iterator for hand!
    #####:  925:	int card_not_discarded = 1;//Flag for discard set!
    #####:  926:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  927:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  928:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  929:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  930:	    state->discardCount[currentPlayer]++;
    #####:  931:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  932:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  933:	    }
    #####:  934:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  935:	    state->handCount[currentPlayer]--;
    #####:  936:	    card_not_discarded = 0;//Exit the loop
        -:  937:	  }
    #####:  938:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  939:	    if(DEBUG) {
        -:  940:	      printf("No estate cards in your hand, invalid choice\n");
        -:  941:	      printf("Must gain an estate if there are any\n");
        -:  942:	    }
    #####:  943:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  944:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  945:	      state->supplyCount[estate]--;//Decrement estates
    #####:  946:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  947:		isGameOver(state);
call    0 never executed
        -:  948:	      }
        -:  949:	    }
    #####:  950:	    card_not_discarded = 0;//Exit the loop
        -:  951:	  }
        -:  952:			    
        -:  953:	  else{
    #####:  954:	    p++;//Next card
        -:  955:	  }
        -:  956:	}
        -:  957:      }
        -:  958:			    
        -:  959:      else{
    #####:  960:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  961:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  962:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  963:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  964:	    isGameOver(state);
call    0 never executed
        -:  965:	  }
        -:  966:	}
        -:  967:      }
        -:  968:	    
        -:  969:      
    #####:  970:      return 0;
        -:  971:		
        -:  972:    case great_hall:
    #####:  973:      return playGreatHall(state, handPos);
call    0 never executed
        -:  974:		
        -:  975:    case minion:
        -:  976:      //+1 action
    #####:  977:      state->numActions++;
        -:  978:			
        -:  979:      //discard card from hand
    #####:  980:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  981:			
    #####:  982:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  983:	{
    #####:  984:	  state->coins = state->coins + 2;
        -:  985:	}
        -:  986:			
    #####:  987:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  988:	{
        -:  989:	  //discard hand
    #####:  990:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  991:	    {
    #####:  992:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  993:	    }
        -:  994:				
        -:  995:	  //draw 4
    #####:  996:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  997:	    {
    #####:  998:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  999:	    }
        -: 1000:				
        -: 1001:	  //other players discard hand and redraw if hand size > 4
    #####: 1002:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1003:	    {
    #####: 1004:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1005:		{
    #####: 1006:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1007:		    {
        -: 1008:		      //discard hand
    #####: 1009:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1010:			{
    #####: 1011:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1012:			}
        -: 1013:							
        -: 1014:		      //draw 4
    #####: 1015:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1016:			{
    #####: 1017:			  drawCard(i, state);
call    0 never executed
        -: 1018:			}
        -: 1019:		    }
        -: 1020:		}
        -: 1021:	    }
        -: 1022:				
        -: 1023:	}
    #####: 1024:      return 0;
        -: 1025:		
        -: 1026:    case steward:
    #####: 1027:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1028:	{
        -: 1029:	  //+2 cards
    #####: 1030:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1031:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1032:	}
    #####: 1033:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1034:	{
        -: 1035:	  //+2 coins
    #####: 1036:	  state->coins = state->coins + 2;
        -: 1037:	}
        -: 1038:      else
        -: 1039:	{
        -: 1040:	  //trash 2 cards in hand
    #####: 1041:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1042:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1043:	}
        -: 1044:			
        -: 1045:      //discard card from hand
    #####: 1046:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1047:      return 0;
        -: 1048:		
        -: 1049:    case tribute:
    #####: 1050:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1051:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1052:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1053:	  state->deckCount[nextPlayer]--;
        -: 1054:	}
    #####: 1055:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1056:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1057:	  state->discardCount[nextPlayer]--;
        -: 1058:	}
        -: 1059:	else{
        -: 1060:	  //No Card to Reveal
        -: 1061:	  if (DEBUG){
        -: 1062:	    printf("No cards to reveal\n");
        -: 1063:	  }
        -: 1064:	}
        -: 1065:      }
        -: 1066:	    
        -: 1067:      else{
    #####: 1068:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1069:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1070:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1071:	    state->deckCount[nextPlayer]++;
    #####: 1072:	    state->discard[nextPlayer][i] = -1;
    #####: 1073:	    state->discardCount[nextPlayer]--;
        -: 1074:	  }
        -: 1075:			    
    #####: 1076:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1077:	} 
    #####: 1078:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1079:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1080:	state->deckCount[nextPlayer]--;
    #####: 1081:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1082:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1083:	state->deckCount[nextPlayer]--;
        -: 1084:      }    
        -: 1085:		       
    #####: 1086:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1087:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1088:	state->playedCardCount++;
    #####: 1089:	tributeRevealedCards[1] = -1;
        -: 1090:      }
        -: 1091:
    #####: 1092:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1093:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1094:	  state->coins += 2;
        -: 1095:	}
        -: 1096:		    
    #####: 1097:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1098:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1099:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1100:	}
        -: 1101:	else{//Action Card
    #####: 1102:	  state->numActions = state->numActions + 2;
        -: 1103:	}
        -: 1104:      }
        -: 1105:	    
    #####: 1106:      return 0;
        -: 1107:		
        -: 1108:    case ambassador:
    #####: 1109:      j = 0;		//used to check if player has enough cards to discard
        -: 1110:
    #####: 1111:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1112:	{
    #####: 1113:	  return -1;				
        -: 1114:	}
        -: 1115:
    #####: 1116:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1117:	{
    #####: 1118:	  return -1;
        -: 1119:	}
        -: 1120:
    #####: 1121:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1122:	{
    #####: 1123:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1124:	    {
    #####: 1125:	      j++;
        -: 1126:	    }
        -: 1127:	}
    #####: 1128:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1129:	{
    #####: 1130:	  return -1;				
        -: 1131:	}
        -: 1132:
        -: 1133:      if (DEBUG) 
        -: 1134:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1135:
        -: 1136:      //increase supply count for choosen card by amount being discarded
    #####: 1137:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1138:			
        -: 1139:      //each other player gains a copy of revealed card
    #####: 1140:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1141:	{
    #####: 1142:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1143:	    {
    #####: 1144:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1145:	    }
        -: 1146:	}
        -: 1147:
        -: 1148:      //discard played card from hand
    #####: 1149:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1150:
        -: 1151:      //trash copies of cards returned to supply
    #####: 1152:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1153:	{
    #####: 1154:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1155:	    {
    #####: 1156:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1157:		{
    #####: 1158:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1159:		  break;
        -: 1160:		}
        -: 1161:	    }
        -: 1162:	}			
        -: 1163:
    #####: 1164:      return 0;
        -: 1165:		
        -: 1166:    case cutpurse:			
    #####: 1167:      return playCutpurse(state, handPos);
call    0 never executed
        -: 1168:
        -: 1169:		
        -: 1170:    case embargo: 
        -: 1171:      //+2 Coins
        4: 1172:      state->coins = state->coins + 2;
        -: 1173:			
        -: 1174:      //see if selected pile is in play
        4: 1175:      if ( state->supplyCount[choice1] == -1 )
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -: 1176:	{
        1: 1177:	  return -1;
        -: 1178:	}
        -: 1179:			
        -: 1180:      //add embargo token to selected supply pile
        3: 1181:      state->embargoTokens[choice1]++;
        -: 1182:			
        -: 1183:      //trash card
        3: 1184:      discardCard(handPos, currentPlayer, state, 1);		
call    0 returned 100%
        3: 1185:      return 0;
        -: 1186:		
        -: 1187:    case outpost:
        -: 1188:      //set outpost flag
    #####: 1189:      state->outpostPlayed++;
        -: 1190:			
        -: 1191:      //discard card
    #####: 1192:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1193:      return 0;
        -: 1194:		
        -: 1195:    case salvager:
        -: 1196:      //+1 buy
    #####: 1197:      state->numBuys++;
        -: 1198:			
    #####: 1199:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1200:	{
        -: 1201:	  //gain coins equal to trashed card
    #####: 1202:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1203:	  //trash card
    #####: 1204:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1205:	}
        -: 1206:			
        -: 1207:      //discard card
    #####: 1208:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1209:      return 0;
        -: 1210:		
        -: 1211:    case sea_hag:
    #####: 1212:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1213:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1214:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1215:	  state->discardCount[i]++;
    #####: 1216:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1217:	}
        -: 1218:      }
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case treasure_map:
        -: 1222:      //search hand for another treasure_map
    #####: 1223:      index = -1;
    #####: 1224:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1225:	{
    #####: 1226:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1227:	    {
    #####: 1228:	      index = i;
    #####: 1229:	      break;
        -: 1230:	    }
        -: 1231:	}
    #####: 1232:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1233:	{
        -: 1234:	  //trash both treasure cards
    #####: 1235:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1236:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1237:
        -: 1238:	  //gain 4 Gold cards
    #####: 1239:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1240:	    {
    #####: 1241:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1242:	    }
        -: 1243:				
        -: 1244:	  //return success
    #####: 1245:	  return 1;
        -: 1246:	}
        -: 1247:			
        -: 1248:      //no second treasure_map found in hand
    #####: 1249:      return -1;
        -: 1250:    }
        -: 1251:	
    #####: 1252:  return -1;
        -: 1253:}
        -: 1254:
function discardCard called 18 returned 100% blocks executed 89%
       18: 1255:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1256:{
        -: 1257:	
        -: 1258:  //if card is not trashed, added to Played pile 
       18: 1259:  if (trashFlag < 1)
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
        -: 1260:    {
        -: 1261:      //add card to played pile
       15: 1262:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       15: 1263:      state->playedCardCount++;
        -: 1264:    }
        -: 1265:	
        -: 1266:  //set played card to -1
       18: 1267:  state->hand[currentPlayer][handPos] = -1;
        -: 1268:	
        -: 1269:  //remove card from player's hand
       18: 1270:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -: 1271:    {
        -: 1272:      //reduce number of cards in hand
        2: 1273:      state->handCount[currentPlayer]--;
        -: 1274:    }
       16: 1275:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
    #####: 1278:      state->handCount[currentPlayer]--;
        -: 1279:    }
        -: 1280:  else 	
        -: 1281:    {
        -: 1282:      //replace discarded card with last card in hand
       16: 1283:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1284:      //set last card to -1
       16: 1285:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1286:      //reduce number of cards in hand
       16: 1287:      state->handCount[currentPlayer]--;
        -: 1288:    }
        -: 1289:	
       18: 1290:  return 0;
        -: 1291:}
        -: 1292:
function gainCard called 4 returned 100% blocks executed 70%
        4: 1293:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1294:{
        -: 1295:  //Note: supplyPos is enum of choosen card
        -: 1296:	
        -: 1297:  //check if supply pile is empty (0) or card is not used in game (-1)
        4: 1298:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1299:    {
    #####: 1300:      return -1;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //added card for [whoseTurn] current player:
        -: 1304:  // toFlag = 0 : add to discard
        -: 1305:  // toFlag = 1 : add to deck
        -: 1306:  // toFlag = 2 : add to hand
        -: 1307:
        4: 1308:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1309:    {
    #####: 1310:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1311:      state->deckCount[player]++;
        -: 1312:    }
        4: 1313:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1314:    {
    #####: 1315:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1316:      state->handCount[player]++;
        -: 1317:    }
        -: 1318:  else
        -: 1319:    {
        4: 1320:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1321:      state->discardCount[player]++;
        -: 1322:    }
        -: 1323:	
        -: 1324:  //decrease number in supply pile
        4: 1325:  state->supplyCount[supplyPos]--;
        -: 1326:	 
        4: 1327:  return 0;
        -: 1328:}
        -: 1329:
function updateCoins called 25 returned 100% blocks executed 100%
       25: 1330:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1331:{
        -: 1332:  int i;
        -: 1333:	
        -: 1334:  //reset coin count
       25: 1335:  state->coins = 0;
        -: 1336:
        -: 1337:  //add coins for each Treasure card in player's hand
      150: 1338:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1339:    {
      125: 1340:      if (state->hand[player][i] == copper)
branch  0 taken 47% (fallthrough)
branch  1 taken 53%
        -: 1341:	{
       59: 1342:	  state->coins += 1;
        -: 1343:	}
       66: 1344:      else if (state->hand[player][i] == silver)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -: 1345:	{
        4: 1346:	  state->coins += 2;
        -: 1347:	}
       62: 1348:      else if (state->hand[player][i] == gold)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -: 1349:	{
        4: 1350:	  state->coins += 3;
        -: 1351:	}	
        -: 1352:    }	
        -: 1353:
        -: 1354:  //add bonus
       25: 1355:  state->coins += bonus;
        -: 1356:
       25: 1357:  return 0;
        -: 1358:}
        -: 1359:
        -: 1360:
        -: 1361://end of dominion.c
        -: 1362:
