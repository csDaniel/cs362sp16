
----------------- Testing Card: smithy ----------------


*****TEST 1: Current Player Recieves 3 Cards*****
hand count = 8, expected = 7
deck count = 2, expected = 2
discard count = 0, expected = 1

---Test 1 Failed: Player handcount different than expected

---Test 1 Failed: Player discard count different than expected


*****TEST 2: Player 2 state doesn't change when Player 1 plays Smithy*****
hand count = 0, expected = 0
deck count = 10, expected = 10
Test 2 Passed


TEST 3: Smithy is successfully discarded, Other Cards are kept

Cards in Hand Before Playing Smithy: (13)(4)(2)(1)(9)
 ending cards: (13)(4)(2)(1)(9)(4)(4)(4), expected cards: (Last drawn card)(4)(2)(1)(9)(drawn Card),(drawn Card)

--Test 3 Failed: Smithy remained in same position in hand for iteration # 1, where Smith was in starting position: 0.
Cards in Hand Before Playing Smithy: (9)(13)(4)(2)(1)
 ending cards: (9)(13)(4)(2)(1)(4)(4)(4), expected cards: (9)(Last drawn card)(4)(2)(1)(drawn Card),(drawn Card)

--Test 3 Failed: Smithy remained in same position in hand for iteration # 2, where Smith was in starting position: 1.
Cards in Hand Before Playing Smithy: (1)(9)(13)(4)(2)
 ending cards: (1)(9)(13)(4)(2)(4)(4)(4), expected cards: (1)(9)(Last drawn card)(4)(2)(drawn Card),(drawn Card)

--Test 3 Failed: Smithy remained in same position in hand for iteration # 3, where Smith was in starting position: 2.
Cards in Hand Before Playing Smithy: (2)(1)(9)(13)(4)
 ending cards: (2)(1)(9)(13)(4)(4)(4)(4), expected cards: (2)(1)(9)(Last drawn card)(4)(drawn Card),(drawn Card)

--Test 3 Failed: Smithy remained in same position in hand for iteration # 4, where Smith was in starting position: 3.
Cards in Hand Before Playing Smithy: (4)(2)(1)(9)(13)
 ending cards: (4)(2)(1)(9)(13)(4)(4)(4), expected cards: (4)(2)(1)(9)(Last drawn card)(drawn Card),(drawn Card)

--Test 3 Failed: Smithy remained in same position in hand for iteration # 5, where Smith was in starting position: 4.


*****TEST 4: Coin, Action, Buy, Kingdom, Victory states don't change****

coins = 4, expected = 4
actions = 1, expected = 0
numBuys = 1, expected = 1
Estate cards = 8, expected = 8
Duchy cards = 8, expected = 8
Province cards = 8, expected = 8
Player turn = 0, expected = 0
Kingdom cards = Post
(Card in test:13, Count= 10)Post
(Card in test:22, Count= 8)Post
(Card in test:14, Count= 8)Post
(Card in test:17, Count= 8)Post
(Card in test:11, Count= 46)Post
(Card in test:21, Count= 40)Post
(Card in test:25, Count= 30)Post
(Card in test:19, Count= 10)Post
(Card in test:7, Count= 10)Post
(Card in test:8, Count= -1), expected = (Expected card: 13, count to equal: 10)(Expected card: 22, count to equal: 8)(Expected card: 14, count to equal: 8)(Expected card: 17, count to equal: 8)(Expected card: 11, count to equal: 46)(Expected card: 21, count to equal: 40)(Expected card: 25, count to equal: 30)(Expected card: 19, count to equal: 10)(Expected card: 7, count to equal: 10)(Expected card: 8, count to equal: -1)--Test 4 Failed: Player action count different than expected

 >>>>> SUCCESS: Testing complete smithy, 3 tests failed, 1 tests passed. <<<<<




----------------- Testing Card: adventurer ----------------


*********TEST 1: Hand Count = 6, Deck Count = Expected, Discard Count = Expected****** 
hand count = 7, expected = 6
deck count = 3, expected = 3
discard count = 0, expected = 1

---Test 1 Failed: Player handcount different than expected

---Test 1 Failed: Player discard count different than expected


************TEST 2: Player 2 state doesn't change when Player 1 plays Adventurer******
hand count = 0, expected = 0
deck count = 10, expected = 10
discard count = 0, expected = 0
Test 2 Passed


*********TEST 3: Adventurer is successfully discarded, Other Cards are kept*******
Cards in Hand Before Playing Adventurer: (7)(4)(2)(1)(9)
 
ending cards: (7)(4)(2)(1)(9)(4)(4), expected cards: (Last drawn card)(4)(2)(1)(9)
(drawn Card),(drawn Card)

----Test 3 Failed: Adventurer remained in same position in hand for iteration # 1, where Adventurer was in starting position: 0.
Cards in Hand Before Playing Adventurer: (9)(7)(4)(2)(1)
 
ending cards: (9)(7)(4)(2)(1)(4)(4), expected cards: (9)(Last drawn card)(4)(2)(1)
(drawn Card),(drawn Card)

----Test 3 Failed: Adventurer remained in same position in hand for iteration # 2, where Adventurer was in starting position: 1.
Cards in Hand Before Playing Adventurer: (1)(9)(7)(4)(2)
 
ending cards: (1)(9)(7)(4)(2)(4)(4), expected cards: (1)(9)(Last drawn card)(4)(2)
(drawn Card),(drawn Card)

----Test 3 Failed: Adventurer remained in same position in hand for iteration # 3, where Adventurer was in starting position: 2.
Cards in Hand Before Playing Adventurer: (2)(1)(9)(7)(4)
 
ending cards: (2)(1)(9)(7)(4)(4)(4), expected cards: (2)(1)(9)(Last drawn card)(4)
(drawn Card),(drawn Card)

----Test 3 Failed: Adventurer remained in same position in hand for iteration # 4, where Adventurer was in starting position: 3.
Cards in Hand Before Playing Adventurer: (4)(2)(1)(9)(7)
 
ending cards: (4)(2)(1)(9)(7)(4)(4), expected cards: (4)(2)(1)(9)(Last drawn card)
(drawn Card),(drawn Card)

----Test 3 Failed: Adventurer remained in same position in hand for iteration # 5, where Adventurer was in starting position: 4.


TEST 4: Coin, Action, Buy, Kingdom, Victory states don't change
coins = 4, expected = 4
actions = 1, expected = 0
numBuys = 1, expected = 1
Estate cards = 8, expected = 8
Duchy cards = 8, expected = 8
Province cards = 8, expected = 8
Player turn = 0, expected = 0
Kingdom cards = (Card: 7, Count = 10)(Card: 22, Count = 8)(Card: 14, Count = 8)(Card: 17, Count = 8)(Card: 11, Count = 46)(Card: 21, Count = 40)(Card: 25, Count = 30)(Card: 19, Count = 10)(Card: 13, Count = 10)(Card: 8, Count = -1), expected = (Card: 7, Count = 10)(Card: 22, Count = 8)(Card: 14, Count = 8)(Card: 17, Count = 8)(Card: 11, Count = 46)(Card: 21, Count = 40)(Card: 25, Count = 30)(Card: 19, Count = 10)(Card: 13, Count = 10)(Card: 8, Count = -1)
---Test 4 Failed: Player action count different than expected

*****TEST 5: 2 Treasure Cards are drawn. Case 1: No reshuffling needed, no discarding of drawn cards needed.**** 
treasure cards in hand: 1, expected = 3

---Test 5 Failed: Player treasure cards different than expected


*****TEST 5: 2 Treasure Cards are drawn. Case 2: No Reshuffling needed, Discarding of drawn cards needed.***** 
treasure cards in hand: 2, expected = 3

---Test 6 Failed: Player treasure cards different than expected


******TEST 7: 2 Treasure Cards are drawn. Case 3: Reshuffling needed, no discarding of drawn cards needed.**** 
treasure cards in hand: 3, expected = 3

Test 7 Passed

******TEST 8: 2 Treasure Cards are drawn. Case 3: Reshuffling needed,  discarding of drawn cards needed.***** 
treasure cards in hand: 4, expected = 3

---Test 7 Failed: Player treasure cards different than expected

 >>>>> SUCCESS: Testing complete adventurer, 2 tests failed, 2 tests passed. <<<<<


 >>>>> SUCCESS: Testing complete adventurer, 2 tests failed, 2 tests passed. <<<<<


----------------- Testing Card: village ----------------

TEST 1: Hand Count = 5 From new card, Action Count=2, Deck Count = Expected, Discard Count = Expected 
hand count = 5, expected = 5
actions = 3, expected = 2
deck count = 4, expected = 4
discard count = 0, expected = 1
Test 1 Failed: Player action count different than expected
Test 1 Failed: Player discard count different than expected
TEST 2: Player 2 state doesn't change when Player 1 plays Adventurer
hand count = 0, expected = 0
deck count = 10, expected = 10
discard count = 0, expected = 0
Test 2 Failed: Player deckcount different than expected
TEST 3: Village is successfully discarded, Other Cards are kept
Cards in Hand Before Playing Village: (14)(4)(2)(1)(9)
 ending cards: (4)(4)(2)(1)(9), expected cards: (Last drawn card)(4)(2)(1)(9)(drawn Card),(drawn Card)
Test 3 PassedCards in Hand Before Playing Village: (9)(14)(4)(2)(1)
 ending cards: (9)(4)(4)(2)(1), expected cards: (9)(Last drawn card)(4)(2)(1)(drawn Card),(drawn Card)
Test 3 PassedCards in Hand Before Playing Village: (1)(9)(14)(4)(2)
 ending cards: (1)(9)(4)(4)(2), expected cards: (1)(9)(Last drawn card)(4)(2)(drawn Card),(drawn Card)
Test 3 PassedCards in Hand Before Playing Village: (2)(1)(9)(14)(4)
 ending cards: (2)(1)(9)(4)(4), expected cards: (2)(1)(9)(Last drawn card)(4)(drawn Card),(drawn Card)
Test 3 PassedCards in Hand Before Playing Village: (4)(2)(1)(9)(14)
 ending cards: (4)(2)(1)(9)(4), expected cards: (4)(2)(1)(9)(Last drawn card)(drawn Card),(drawn Card)
Test 3 PassedTEST 4: Coin, Buy, Kingdom, Victory states don't change
coins = 4, expected = 4
numBuys = 1, expected = 1
Estate cards = 8, expected = 8
Duchy cards = 8, expected = 8
Province cards = 8, expected = 8
Player turn = 0, expected = 0
Kingdom cards = (Card: 14, Count = 10)(Card: 22, Count = 8)(Card: 7, Count = 8)(Card: 17, Count = 8)(Card: 11, Count = 46)(Card: 21, Count = 40)(Card: 25, Count = 30)(Card: 19, Count = 10)(Card: 13, Count = 10)(Card: 8, Count = -1), expected = (Card: 14, count = 10)(Card: 22, count = 8)(Card: 7, count = 8)(Card: 17, count = 8)(Card: 11, count = 46)(Card: 21, count = 40)(Card: 25, count = 30)(Card: 19, count = 10)(Card: 13, count = 10)(Card: 8, count = -1)Test 4 Passed
 >>>>> SUCCESS: Testing complete village, -2 tests failed, 6 tests passed. <<<<<

----------------- Testing Card: council_room ----------------
TEST 1: Hand Count = 8 From 4 new cards, Buys +1, Deck Count = Expected, Discard Count = Expected 
hand count = 8, expected = 5
numBuys = 2, expected = 2
actions = 1, expected = 0
deck count = 1, expected = 4
discard count = 0, expected = 1
Test 1 Failed: Player handcount different than expected
Test 1 Failed: Player buy count different than expected
Test 1 Failed: Player action count different than expected
Test 1 Failed: Player deckcount different than expected
Test 1 Failed: Player discard count different than expected
TEST 2: Player 2 gets to draw a card, but no other states change when Player 1 plays council_room
hand count = 1, expected = 1
deck count = 9, expected = 9
discard count = 0, expected = 0
Test 2 Failed: Player handcount different than expected
Test 2 Failed: Player deckcount different than expected
TEST 3: Council_room is successfully discarded, Other Cards are kept
Cards in Hand Before Playing council_room: (8)(4)(2)(1)(9)
 ending cards: (1)(4)(2)(1)(9)(4)(4)(4), expected cards: (Last drawn card)(4)(2)(1)(9)(drawn Card),(drawn Card)
Test 3 PassedCards in Hand Before Playing council_room: (9)(8)(4)(2)(1)
 ending cards: (9)(1)(4)(2)(1)(4)(4)(4), expected cards: (9)(Last drawn card)(4)(2)(1)(drawn Card),(drawn Card)
Test 3 PassedCards in Hand Before Playing council_room: (1)(9)(8)(4)(2)
 ending cards: (1)(9)(1)(4)(2)(4)(4)(4), expected cards: (1)(9)(Last drawn card)(4)(2)(drawn Card),(drawn Card)
Test 3 PassedCards in Hand Before Playing council_room: (2)(1)(9)(8)(4)
 ending cards: (2)(1)(9)(1)(4)(4)(4)(4), expected cards: (2)(1)(9)(Last drawn card)(4)(drawn Card),(drawn Card)
Test 3 PassedCards in Hand Before Playing council_room: (4)(2)(1)(9)(8)
 ending cards: (4)(2)(1)(9)(1)(4)(4)(4), expected cards: (4)(2)(1)(9)(Last drawn card)(drawn Card),(drawn Card)
Test 3 PassedTEST 4: Coin, Kingdom, Victory states don't change
coins = 4, expected = 4
Estate cards = 8, expected = 8
Duchy cards = 8, expected = 8
Province cards = 8, expected = 8
Player turn = 0, expected = 0
Kingdom cards = ( 8 Count = 10)( 22 Count = 8)( 7 Count = 8)( 17 Count = 8)( 11 Count = 46)( 21 Count = 40)( 25 Count = 30)( 19 Count = 10)( 13 Count = 10)( 14 Count = -1), expected = (Enum 8 = Count 10)(Enum 22 = Count 8)(Enum 7 = Count 8)(Enum 17 = Count 8)(Enum 11 = Count 46)(Enum 21 = Count 40)(Enum 25 = Count 30)(Enum 19 = Count 10)(Enum 13 = Count 10)(Enum 14 = Count -1)Test 4 Passed
 >>>>> SUCCESS: Testing complete council_room, -2 tests failed, 6 tests passed. <<<<<

TESTING updateCoins():
***TEST 1: Hand Contains All Copper Cards & No Bonus***
Coins = 5, expected = 5
TEST 1 Passed: G.coins = 5 = handCount * bronze + bonus
***TEST 2: Hand Contains All Silver Cards & No Bonus***
Coins = 0, expected = 10
TEST 2 Failed: G.coins != handCount * silver + bonus
TEST 2 Failed: G.coins != 10
***TEST 3: Hand Contains All Gold Cards & No Bonus***
Coins = 0, expected = 15
TEST 3 Failed: G.coins != handCount * gold + bonus
TEST 3 Failed: G.coins != 15
***TEST 2: Hand Contains All Silver Cards & No Bonus***
Coins = 0, expected = 0
TEST 4 Passed: G.coins = 0 = handCount * 0 * bonus
***TEST 5: Hand Contains Mix of all coins: 3-Bronze, 2-Silver, 1-Gold Cards & No Bonus***
Coins = 0, expected = 10
TEST 5 Failed: G.coins != gold + 2*silver + 2*bronze + bonus
TEST 5 Failed: G.coins != 10
***TEST 5: Hand Contains Mix of all coins: 3-Bronze, 2-Silver, 1-Gold Cards & No Bonus***
Coins = 2, expected = 12
TEST 6 Failed: G.coins != gold + 2*silver + 2*bronze + bonus
TEST 6 Failed: G.coins != 12
***TEST 7: Hand Contains Mix of all coins and 1 non coin cards: 2-Bronze, 1-Silver, 1-Gold Cards & No Bonus***
Coins = 0, expected = 7
TEST 7 Failed: G.coins != gold + silver + 2*bronze + bonus
TEST 7 Failed: G.coins != 7
***TEST 8: Hand Contains Mix of all coins and 1 non coin cards: 2-Bronze, 1-Silver, 1-Gold Cards & 2 Bonus***
Coins = 2, expected = 9
TEST 9 Failed: G.coins != gold + silver + 2*bronze + bonus
TEST 9 Failed: G.coins != 9
***TEST 9: No Coins, 4 Bonus, Expected value = 4
P1 Coins = 4, expected = 4TEST 9 Passed: G.coins = 4 =  bonus
***TEST 10: whoseTurn Game States Shouldn't Change. No Coins, 0 Bonus, Expected value = 0
Whose Turn = 1, expected = 1TEST 10 Passed: G.whoseTurn = 1
***TEST 11: numActions game state should equal 1. No Coins, 0 Bonus, Expected value = 0
numActions = 1, expected = 1TEST 11 Passed: G.whoseTurn = 1
***TEST 12: numBuys game state should equal 1. No Coins, 0 Bonus, Expected value = 0
numBuys = 1, expected = 1TEST 12 Passed: G.numBuys = 1
***TEST 13: playedCardCount game state should equal 0. No Coins, 0 Bonus, Expected value = 0
playedCardCount = 0, expected = 0TEST 13 Passed: G.playedCardCount = 0
7 tests passed -- 2 tests failed
TESTING updateCoins():
***TEST 1: All Cards, If Supply Pile is Empty or Card Isn't Used: Return -1. Supply, deck, hand, and discard count don't change***
currentCard Return value = -1, expected = -1
TEST 1 Passed: currentCard Returned -1, supply, deck, hand, and discard didn't change
currentCard Return value = -1, expected = -1
TEST 1 Passed: currentCard Returned -1, supply, deck, hand, and discard didn't change
currentCard Return value = -1, expected = -1
TEST 1 Passed: currentCard Returned -1, supply, deck, hand, and discard didn't change
currentCard Return value = -1, expected = -1
TEST 1 Passed: currentCard Returned -1, supply, deck, hand, and discard didn't change
currentCard Return value = -1, expected = -1
TEST 1 Passed: currentCard Returned -1, supply, deck, hand, and discard didn't change
currentCard Return value = -1, expected = -1
TEST 1 Passed: currentCard Returned -1, supply, deck, hand, and discard didn't change
currentCard Return value = -1, expected = -1
TEST 1 Passed: currentCard Returned -1, supply, deck, hand, and discard didn't change
currentCard Return value = -1, expected = -1
TEST 1 Passed: currentCard Returned -1, supply, deck, hand, and discard didn't change
currentCard Return value = -1, expected = -1
TEST 1 Passed: currentCard Returned -1, supply, deck, hand, and discard didn't change
currentCard Return value = -1, expected = -1
TEST 1 Passed: currentCard Returned -1, supply, deck, hand, and discard didn't change
currentCard Return value = -1, expected = -1
TEST 1 Passed: currentCard Returned -1, supply, deck, hand, and discard didn't change
currentCard Return value = -1, expected = -1
TEST 1 Passed: currentCard Returned -1, supply, deck, hand, and discard didn't change
currentCard Return value = -1, expected = -1
TEST 1 Passed: currentCard Returned -1, supply, deck, hand, and discard didn't change
currentCard Return value = -1, expected = -1
TEST 1 Passed: currentCard Returned -1, supply, deck, hand, and discard didn't change
currentCard Return value = -1, expected = -1
TEST 1 Passed: currentCard Returned -1, supply, deck, hand, and discard didn't change
currentCard Return value = -1, expected = -1
TEST 1 Passed: currentCard Returned -1, supply, deck, hand, and discard didn't change
currentCard Return value = -1, expected = -1
TEST 1 Passed: currentCard Returned -1, supply, deck, hand, and discard didn't change
currentCard Return value = -1, expected = -1
TEST 1 Passed: currentCard Returned -1, supply, deck, hand, and discard didn't change
currentCard Return value = -1, expected = -1
TEST 1 Passed: currentCard Returned -1, supply, deck, hand, and discard didn't change
currentCard Return value = -1, expected = -1
TEST 1 Passed: currentCard Returned -1, supply, deck, hand, and discard didn't change
currentCard Return value = -1, expected = -1
TEST 1 Passed: currentCard Returned -1, supply, deck, hand, and discard didn't change
currentCard Return value = -1, expected = -1
TEST 1 Passed: currentCard Returned -1, supply, deck, hand, and discard didn't change
currentCard Return value = -1, expected = -1
TEST 1 Passed: currentCard Returned -1, supply, deck, hand, and discard didn't change
currentCard Return value = -1, expected = -1
TEST 1 Passed: currentCard Returned -1, supply, deck, hand, and discard didn't change
currentCard Return value = -1, expected = -1
TEST 1 Passed: currentCard Returned -1, supply, deck, hand, and discard didn't change
currentCard Return value = -1, expected = -1
TEST 1 Passed: currentCard Returned -1, supply, deck, hand, and discard didn't change
currentCard Return value = -1, expected = -1
TEST 1 Passed: currentCard Returned -1, supply, deck, hand, and discard didn't change
***TEST 2: All Cards. Card is Sent to Discard, Deck, or Hand. Only the place it is sent should increment. Supply Count Should Decrement. Card should be in appropriate place.***
 *** Destinations: Discard = 0, Deck = 1, Hand = 2***/ncurrentCard Dest: 0 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 1, expected = 0
TEST 2 Failed: currentCard discardCount = 1, expected = 1
currentCard Dest: 1 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 1, expected = 2
TEST 2 Failed: currentCard deckCount = 6, expected = 6
TEST 2 Failed: 0 enum expected != 4 found in deck 
currentCard Dest: 2 Return value = -1, expected = 0
TEST 2 Failed: 0 not returned
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 1, expected = 2
currentCard Dest: 0 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 1, expected = 0
TEST 2 Failed: 1 enum expected != 0 found in discard 
currentCard Dest: 1 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 2, expected = 3
TEST 2 Failed: currentCard deckCount = 7, expected = 7
TEST 2 Failed: 1 enum expected != 4 found in deck 
currentCard Dest: 2 Return value = -1, expected = 0
TEST 2 Failed: 0 not returned
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 2, expected = 3
TEST 2 Failed: 1 enum expected != 0 found in hand 
currentCard Dest: 0 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 1, expected = 0
TEST 2 Failed: 2 enum expected != 0 found in discard 
currentCard Dest: 1 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 3, expected = 4
TEST 2 Failed: currentCard deckCount = 8, expected = 8
TEST 2 Failed: 2 enum expected != 4 found in deck 
currentCard Dest: 2 Return value = -1, expected = 0
TEST 2 Failed: 0 not returned
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 3, expected = 4
TEST 2 Failed: 2 enum expected != 0 found in hand 
currentCard Dest: 0 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 1, expected = 0
TEST 2 Failed: 3 enum expected != 0 found in discard 
currentCard Dest: 1 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 4, expected = 5
TEST 2 Failed: currentCard deckCount = 9, expected = 9
TEST 2 Failed: 3 enum expected != 4 found in deck 
currentCard Dest: 2 Return value = -1, expected = 0
TEST 2 Failed: 0 not returned
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 4, expected = 5
TEST 2 Failed: 3 enum expected != 0 found in hand 
currentCard Dest: 0 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 1, expected = 0
TEST 2 Failed: 4 enum expected != 0 found in discard 
currentCard Dest: 1 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 5, expected = 6
TEST 2 Failed: currentCard deckCount = 10, expected = 10
TEST 2 Failed: 4 enum expected != 0 found in deck 
currentCard Dest: 2 Return value = -1, expected = 0
TEST 2 Failed: 0 not returned
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 5, expected = 6
TEST 2 Failed: 4 enum expected != 0 found in hand 
currentCard Dest: 0 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 1, expected = 0
TEST 2 Failed: 5 enum expected != 0 found in discard 
currentCard Dest: 1 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 6, expected = 7
TEST 2 Failed: currentCard deckCount = 11, expected = 11
TEST 2 Failed: 5 enum expected != 0 found in deck 
currentCard Dest: 2 Return value = -1, expected = 0
TEST 2 Failed: 0 not returned
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 6, expected = 7
TEST 2 Failed: 5 enum expected != 0 found in hand 
currentCard Dest: 0 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 1, expected = 0
TEST 2 Failed: 6 enum expected != 0 found in discard 
currentCard Dest: 1 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 7, expected = 8
TEST 2 Failed: currentCard deckCount = 12, expected = 12
TEST 2 Failed: 6 enum expected != 0 found in deck 
currentCard Dest: 2 Return value = -1, expected = 0
TEST 2 Failed: 0 not returned
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 7, expected = 8
TEST 2 Failed: 6 enum expected != 0 found in hand 
currentCard Dest: 0 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 1, expected = 0
TEST 2 Failed: 7 enum expected != 0 found in discard 
currentCard Dest: 1 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 8, expected = 9
TEST 2 Failed: currentCard deckCount = 13, expected = 13
TEST 2 Failed: 7 enum expected != 0 found in deck 
currentCard Dest: 2 Return value = -1, expected = 0
TEST 2 Failed: 0 not returned
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 8, expected = 9
TEST 2 Failed: 7 enum expected != 0 found in hand 
currentCard Dest: 0 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 1, expected = 0
TEST 2 Failed: 8 enum expected != 0 found in discard 
currentCard Dest: 1 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 9, expected = 10
TEST 2 Failed: currentCard deckCount = 14, expected = 14
TEST 2 Failed: 8 enum expected != 0 found in deck 
currentCard Dest: 2 Return value = -1, expected = 0
TEST 2 Failed: 0 not returned
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 9, expected = 10
TEST 2 Failed: 8 enum expected != 0 found in hand 
currentCard Dest: 0 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 1, expected = 0
TEST 2 Failed: 9 enum expected != 0 found in discard 
currentCard Dest: 1 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 10, expected = 11
TEST 2 Failed: currentCard deckCount = 15, expected = 15
TEST 2 Failed: 9 enum expected != 0 found in deck 
currentCard Dest: 2 Return value = -1, expected = 0
TEST 2 Failed: 0 not returned
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 10, expected = 11
TEST 2 Failed: 9 enum expected != 0 found in hand 
currentCard Dest: 0 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 1, expected = 0
TEST 2 Failed: 10 enum expected != 0 found in discard 
currentCard Dest: 1 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 11, expected = 12
TEST 2 Failed: currentCard deckCount = 16, expected = 16
TEST 2 Failed: 10 enum expected != 0 found in deck 
currentCard Dest: 2 Return value = -1, expected = 0
TEST 2 Failed: 0 not returned
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 11, expected = 12
TEST 2 Failed: 10 enum expected != 0 found in hand 
currentCard Dest: 0 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 1, expected = 0
TEST 2 Failed: 11 enum expected != 0 found in discard 
currentCard Dest: 1 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 12, expected = 13
TEST 2 Failed: currentCard deckCount = 17, expected = 17
TEST 2 Failed: 11 enum expected != 0 found in deck 
currentCard Dest: 2 Return value = -1, expected = 0
TEST 2 Failed: 0 not returned
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 12, expected = 13
TEST 2 Failed: 11 enum expected != 0 found in hand 
currentCard Dest: 0 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 1, expected = 0
TEST 2 Failed: 12 enum expected != 0 found in discard 
currentCard Dest: 1 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 13, expected = 14
TEST 2 Failed: currentCard deckCount = 18, expected = 18
TEST 2 Failed: 12 enum expected != 0 found in deck 
currentCard Dest: 2 Return value = -1, expected = 0
TEST 2 Failed: 0 not returned
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 13, expected = 14
TEST 2 Failed: 12 enum expected != 0 found in hand 
currentCard Dest: 0 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 1, expected = 0
TEST 2 Failed: 13 enum expected != 0 found in discard 
currentCard Dest: 1 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 14, expected = 15
TEST 2 Failed: currentCard deckCount = 19, expected = 19
TEST 2 Failed: 13 enum expected != 0 found in deck 
currentCard Dest: 2 Return value = -1, expected = 0
TEST 2 Failed: 0 not returned
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 14, expected = 15
TEST 2 Failed: 13 enum expected != 0 found in hand 
currentCard Dest: 0 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 1, expected = 0
TEST 2 Failed: 14 enum expected != 0 found in discard 
currentCard Dest: 1 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 15, expected = 16
TEST 2 Failed: currentCard deckCount = 20, expected = 20
TEST 2 Failed: 14 enum expected != 0 found in deck 
currentCard Dest: 2 Return value = -1, expected = 0
TEST 2 Failed: 0 not returned
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 15, expected = 16
TEST 2 Failed: 14 enum expected != 0 found in hand 
currentCard Dest: 0 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 1, expected = 0
TEST 2 Failed: 15 enum expected != 0 found in discard 
currentCard Dest: 1 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 16, expected = 17
TEST 2 Failed: currentCard deckCount = 21, expected = 21
TEST 2 Failed: 15 enum expected != 0 found in deck 
currentCard Dest: 2 Return value = -1, expected = 0
TEST 2 Failed: 0 not returned
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 16, expected = 17
TEST 2 Failed: 15 enum expected != 0 found in hand 
currentCard Dest: 0 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 1, expected = 0
TEST 2 Failed: 16 enum expected != 0 found in discard 
currentCard Dest: 1 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 17, expected = 18
TEST 2 Failed: currentCard deckCount = 22, expected = 22
TEST 2 Failed: 16 enum expected != 0 found in deck 
currentCard Dest: 2 Return value = -1, expected = 0
TEST 2 Failed: 0 not returned
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 17, expected = 18
TEST 2 Failed: 16 enum expected != 0 found in hand 
currentCard Dest: 0 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 1, expected = 0
TEST 2 Failed: 17 enum expected != 0 found in discard 
currentCard Dest: 1 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 18, expected = 19
TEST 2 Failed: currentCard deckCount = 23, expected = 23
TEST 2 Failed: 17 enum expected != 0 found in deck 
currentCard Dest: 2 Return value = -1, expected = 0
TEST 2 Failed: 0 not returned
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 18, expected = 19
TEST 2 Failed: 17 enum expected != 0 found in hand 
currentCard Dest: 0 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 1, expected = 0
TEST 2 Failed: 18 enum expected != 0 found in discard 
currentCard Dest: 1 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 19, expected = 20
TEST 2 Failed: currentCard deckCount = 24, expected = 24
TEST 2 Failed: 18 enum expected != 0 found in deck 
currentCard Dest: 2 Return value = -1, expected = 0
TEST 2 Failed: 0 not returned
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 19, expected = 20
TEST 2 Failed: 18 enum expected != 0 found in hand 
currentCard Dest: 0 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 1, expected = 0
TEST 2 Failed: 19 enum expected != 0 found in discard 
currentCard Dest: 1 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 20, expected = 21
TEST 2 Failed: currentCard deckCount = 25, expected = 25
TEST 2 Failed: 19 enum expected != 0 found in deck 
currentCard Dest: 2 Return value = -1, expected = 0
TEST 2 Failed: 0 not returned
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 20, expected = 21
TEST 2 Failed: 19 enum expected != 0 found in hand 
currentCard Dest: 0 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 1, expected = 0
TEST 2 Failed: 20 enum expected != 0 found in discard 
currentCard Dest: 1 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 21, expected = 22
TEST 2 Failed: currentCard deckCount = 26, expected = 26
TEST 2 Failed: 20 enum expected != 0 found in deck 
currentCard Dest: 2 Return value = -1, expected = 0
TEST 2 Failed: 0 not returned
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 21, expected = 22
TEST 2 Failed: 20 enum expected != 0 found in hand 
currentCard Dest: 0 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 1, expected = 0
TEST 2 Failed: 21 enum expected != 0 found in discard 
currentCard Dest: 1 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 22, expected = 23
TEST 2 Failed: currentCard deckCount = 27, expected = 27
TEST 2 Failed: 21 enum expected != 0 found in deck 
currentCard Dest: 2 Return value = -1, expected = 0
TEST 2 Failed: 0 not returned
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 22, expected = 23
TEST 2 Failed: 21 enum expected != 0 found in hand 
currentCard Dest: 0 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 1, expected = 0
TEST 2 Failed: 22 enum expected != 0 found in discard 
currentCard Dest: 1 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 23, expected = 24
TEST 2 Failed: currentCard deckCount = 28, expected = 28
TEST 2 Failed: 22 enum expected != 0 found in deck 
currentCard Dest: 2 Return value = -1, expected = 0
TEST 2 Failed: 0 not returned
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 23, expected = 24
TEST 2 Failed: 22 enum expected != 0 found in hand 
currentCard Dest: 0 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 1, expected = 0
TEST 2 Failed: 23 enum expected != 0 found in discard 
currentCard Dest: 1 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 24, expected = 25
TEST 2 Failed: currentCard deckCount = 29, expected = 29
TEST 2 Failed: 23 enum expected != 0 found in deck 
currentCard Dest: 2 Return value = -1, expected = 0
TEST 2 Failed: 0 not returned
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 24, expected = 25
TEST 2 Failed: 23 enum expected != 0 found in hand 
currentCard Dest: 0 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 1, expected = 0
TEST 2 Failed: 24 enum expected != 0 found in discard 
currentCard Dest: 1 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 25, expected = 26
TEST 2 Failed: currentCard deckCount = 30, expected = 30
TEST 2 Failed: 24 enum expected != 0 found in deck 
currentCard Dest: 2 Return value = -1, expected = 0
TEST 2 Failed: 0 not returned
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 25, expected = 26
TEST 2 Failed: 24 enum expected != 0 found in hand 
currentCard Dest: 0 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 1, expected = 0
TEST 2 Failed: 25 enum expected != 0 found in discard 
currentCard Dest: 1 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 26, expected = 27
TEST 2 Failed: currentCard deckCount = 31, expected = 31
TEST 2 Failed: 25 enum expected != 0 found in deck 
currentCard Dest: 2 Return value = -1, expected = 0
TEST 2 Failed: 0 not returned
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 26, expected = 27
TEST 2 Failed: 25 enum expected != 0 found in hand 
currentCard Dest: 0 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 1, expected = 0
TEST 2 Failed: 26 enum expected != 0 found in discard 
currentCard Dest: 1 Return value = 0, expected = 0
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 27, expected = 28
TEST 2 Failed: currentCard deckCount = 32, expected = 32
TEST 2 Failed: 26 enum expected != 0 found in deck 
currentCard Dest: 2 Return value = -1, expected = 0
TEST 2 Failed: 0 not returned
TEST 2 Failed: currentCard supplyCount = 0, expected = -1
TEST 2 Failed: currentCard discardCount = 27, expected = 28
TEST 2 Failed: 26 enum expected != 0 found in hand 
27 tests passed -- 81 tests failed
***TEST 1. Player count shouldn't change./nTEST 1 PASSED. Player count = 2 Expected = 2/nTEST 2. Supply Count Shouldn't Change./nTEST 2 PASSED. Supply Count = 10; expected = 10./nTEST 2 PASSED. Supply Count = 8; expected = 8./nTEST 2 PASSED. Supply Count = 8; expected = 8./nTEST 2 PASSED. Supply Count = 8; expected = 8./nTEST 2 PASSED. Supply Count = 46; expected = 46./nTEST 2 PASSED. Supply Count = 40; expected = 40./nTEST 2 PASSED. Supply Count = 30; expected = 30./nTEST 2 PASSED. Supply Count = 10; expected = 10./nTEST 2 PASSED. Supply Count = 10; expected = 10./nTEST 2 PASSED. Supply Count = 10; expected = 10./nTEST 3. Embargo Count Shouldn't Change./nTEST 3 PASSED. Embargo Count for card 0 = 0, expected = 0./nTEST 3 PASSED. Embargo Count for card 1 = 0, expected = 0./nTEST 3 PASSED. Embargo Count for card 2 = 0, expected = 0./nTEST 3 PASSED. Embargo Count for card 3 = 0, expected = 0./nTEST 3 PASSED. Embargo Count for card 4 = 0, expected = 0./nTEST 3 PASSED. Embargo Count for card 5 = 0, expected = 0./nTEST 3 PASSED. Embargo Count for card 6 = 0, expected = 0./nTEST 3 PASSED. Embargo Count for card 7 = 0, expected = 0./nTEST 3 PASSED. Embargo Count for card 8 = 0, expected = 0./nTEST 3 PASSED. Embargo Count for card 9 = 0, expected = 0./nTEST 3 PASSED. Embargo Count for card 10 = 0, expected = 0./nTEST 3 PASSED. Embargo Count for card 11 = 0, expected = 0./nTEST 3 PASSED. Embargo Count for card 12 = 0, expected = 0./nTEST 3 PASSED. Embargo Count for card 13 = 0, expected = 0./nTEST 3 PASSED. Embargo Count for card 14 = 0, expected = 0./nTEST 3 PASSED. Embargo Count for card 15 = 0, expected = 0./nTEST 3 PASSED. Embargo Count for card 16 = 0, expected = 0./nTEST 3 PASSED. Embargo Count for card 17 = 0, expected = 0./nTEST 3 PASSED. Embargo Count for card 18 = 0, expected = 0./nTEST 3 PASSED. Embargo Count for card 19 = 0, expected = 0./nTEST 3 PASSED. Embargo Count for card 20 = 0, expected = 0./nTEST 3 PASSED. Embargo Count for card 21 = 0, expected = 0./nTEST 3 PASSED. Embargo Count for card 22 = 0, expected = 0./nTEST 3 PASSED. Embargo Count for card 23 = 0, expected = 0./nTEST 3 PASSED. Embargo Count for card 24 = 0, expected = 0./nTEST 3 PASSED. Embargo Count for card 25 = 0, expected = 0./nTEST 3 PASSED. Embargo Count for card 26 = 0, expected = 0./nTEST 4. State reset: Outpost Shouldn't Be Played ./nTEST 4 PASSED. Outpost played = 0, expected = 0./nTEST 5. State reset: It shouldn't be an Outpost turn ./nTEST 5 PASSED. Outpost turn = 0, expected = 0./nTEST 6. Whose turn changes to next player ./nTEST 6 PASSED. Player turn = 1, expected = 0./nTEST 7. Phase should reset to 0 ./nTEST 7 PASSED. Phase = 0, expected = 0./nTEST 8: numActions should reset to 1 ./nTEST 8 PASSED. numActions = 1, expected = 1./nTEST 9: Player whose turn ended should have an empty hand ./nTEST 9 PASSED. handcount = 0, expected = 0./nTEST 10: numBuys resets to 1 ./nTEST 10 Passed. numBuys = 1, expected = 1./nTEST 11: Player whose turn ended should have an empty hand ./nTEST 11: Passed. handCount = 0, expected = 0./nTEST 12: New Player whose turn is starting should have 5 cards in hand ./nTEST 11: Passed. handCount = 5, expected = 0./nTEST 13: Player whose turn is ending should have 5 less cards in deck because they are in the discard pile ./nTEST 13 FAILED. DeckCount = 5, expected = 0./nTEST 14: New player should have 5 less cards in deck because they drew 5 ./nTEST 14 Passed. DeckCount = 5, expected = 5./nTEST 15: Player whose turn ended should have 5 cards in discard deck ./nTEST 15 PASSED. discardCount = 5, expected = 5./nTEST 16: New Player should have 0 cards in discard deck because they haven't had a turn ./nTEST 16 PASSED. discardCount = 0, expected = 0./nTEST 17: Played Card Count is Reset to 0 ./nTEST 17 PASSED. playedCardCount = 0, expected = 0./n****DONE TESTING**** Results: 
51 tests passed -- 1 tests failed
FAILED TESTS: 
	13 FAILED
TESTING isGameOver():
***TEST 1: If No Province Cards Remain, isGameOver returns 1***
GameOver Returns = 1, expected = 1
TEST 1 Passed: isGameOver returns 1
***TEST 2: 3 Supply Piles are at 0, isGameOver returns 1***
GameOver Returns = 1, expected = 1
TEST 2 Passed: isGameOver returns 1
***TEST 2: Province is greater than 0, and No Supply Piles are at 0, isGameOver returns 0***
GameOver Returns = 0, expected = 0
TEST 3 Passed: isGameOver returns 0
***TEST 4: Province is greater than 0, and 1 Supply Piles are at 0, isGameOver returns 0***
GameOver Returns = 0, expected = 0
TEST 4 Passed: isGameOver returns 0
***TEST 5: Province is greater than 0, and 1 Supply Piles are at 0, isGameOver returns 0***
GameOver Returns = 0, expected = 0
TEST 5 Passed: isGameOver returns 0
All tests passed!
File 'dominion.c'
Lines executed:36.68% of 567
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      240:    8:int compare(const void* a, const void* b) {
      240:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      240:   11:  if (*(int*)a < *(int*)b)
       64:   12:    return -1;
      176:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        8:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        8:   44:  SelectStream(1);
        8:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        8:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        8:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       88:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      880:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      800:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        8:   73:  if (numPlayers == 2)
        -:   74:    {
        8:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        8:   87:  if (numPlayers == 2)
        -:   88:    {
        8:   89:      state->supplyCount[estate] = 8;
        8:   90:      state->supplyCount[duchy] = 8;
        8:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        8:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  102:  state->supplyCount[silver] = 40;
        8:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      168:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     1320:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     1240:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       80:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       16:  115:		  if (numPlayers == 2){ 
        8:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       72:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       80:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1160:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       24:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       16:  140:      state->deckCount[i] = 0;
       64:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       48:  143:	  state->deck[i][j] = estate;
       48:  144:	  state->deckCount[i]++;
        -:  145:	}
      128:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      112:  148:	  state->deck[i][j] = copper;
      112:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       24:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       16:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       24:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       16:  166:      state->handCount[i] = 0;
       16:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      224:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      216:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        8:  182:  state->outpostPlayed = 0;
        8:  183:  state->phase = 0;
        8:  184:  state->numActions = 1;
        8:  185:  state->numBuys = 1;
        8:  186:  state->playedCardCount = 0;
        8:  187:  state->whoseTurn = 0;
        8:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       48:  192:  for (it = 0; it < 5; it++){
       40:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        8:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        8:  198:  return 0;
        -:  199:}
        -:  200:
       28:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       28:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       28:  209:  if (state->deckCount[player] < 1)
       12:  210:    return -1;
       16:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      192:  214:  while (state->deckCount[player] > 0) {
      160:  215:    card = floor(Random() * state->deckCount[player]);
      160:  216:    newDeck[newDeckPos] = state->deck[player][card];
      160:  217:    newDeckPos++;
      612:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      452:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      160:  221:    state->deckCount[player]--;
        -:  222:  }
      176:  223:  for (i = 0; i < newDeckPos; i++) {
      160:  224:    state->deck[player][i] = newDeck[i];
      160:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       16:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
      108:  320:int supplyCount(int card, struct gameState *state) {
      108:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
       73:  346:int whoseTurn(struct gameState *state) {
       73:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        1:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        1:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
        6:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
        5:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
        5:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
        1:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
        1:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
        1:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        1:  370:  state->outpostPlayed = 0;
        1:  371:  state->phase = 0;
        1:  372:  state->numActions = 1;
        1:  373:  state->coins = 0;
        1:  374:  state->numBuys = 1;
        1:  375:  state->playedCardCount = 0;
        1:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
        6:  380:  for (k = 0; k < 5; k++){
        5:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
        1:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
        1:  387:  return 0;
        -:  388:}
        -:  389:
        5:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        5:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        1:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
        6:  406:	  j++;
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
        3:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
      149:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      149:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       12:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       12:  538:    state->deckCount[player] = state->discardCount[player];
       12:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       12:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       12:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       12:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       12:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       12:  559:    if (deckCounter == 0)
       12:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      137:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      137:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      137:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      137:  576:    state->deckCount[player]--;
      137:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      137:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646://Start of new card functions:
       12:  647:int playAdventurer( struct gameState* state ){
       12:  648:	int drawntreasure = 0;
       12:  649:	int currentPlayer = whoseTurn(state);
        -:  650:	int cardDrawn;
        -:  651:	int temphand[MAX_HAND];
       12:  652:	int z = 0;
        -:  653:
       56:  654:	while(drawntreasure<2){
       32:  655:		drawCard(currentPlayer, state);
       32:  656:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       32:  657:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
       24:  658:		  drawntreasure++;
        -:  659:		} else {
        8:  660:		  temphand[z]=cardDrawn;
        8:  661:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        8:  662:		  z++;
        -:  663:		}
        -:  664:  }
        -:  665:  
       32:  666:	while(z-1>=0){
        8:  667:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        8:  668:		z=z-1;
        -:  669:  }
        -:  670:  
       12:  671:	return 0;
        -:  672:}
        -:  673:
        8:  674:int playSmithy(struct gameState* state) {
        -:  675:	
        8:  676:  int currentPlayer = whoseTurn(state);
        -:  677:	//+3 Cards
       32:  678:  for ( int i = 0; i < 3; i++)
        -:  679:	{
       24:  680:		drawCard( currentPlayer, state );
        -:  681:	}
        -:  682:			
        8:  683:	return 0;
        -:  684:}
        -:  685:
        8:  686:int playVillage( struct gameState* state, int handPos ){
        -:  687:    
        8:  688:		int currentPlayer = whoseTurn(state);
        -:  689:    //+1 Card
        8:  690:    drawCard(currentPlayer, state);
        -:  691:			
        -:  692:    //+2 Actions
        8:  693:    state->numActions = state->numActions + 2;
        -:  694:			
        -:  695:    //discard played card from hand
        8:  696:    discardCard(handPos, currentPlayer, state, 0);
        8:  697:    return 0;
        -:  698:}
        -:  699:
        8:  700:int playCouncil_room(struct gameState* state, int handPos){
        8:  701:  int currentPlayer = whoseTurn(state);
        -:  702:  //+4 Cards
       40:  703:  for (int i = 0; i < 4; i++)
        -:  704:	{
       32:  705:	  drawCard(currentPlayer, state);
        -:  706:	}
        -:  707:			
        -:  708:  //+1 Buy
        8:  709:  state->numBuys++;
        -:  710:			
        -:  711:  //Each other player draws a card
       24:  712:  for (int i = 0; i < state->numPlayers; i++)
        -:  713:	{
       16:  714:	  if ( i != currentPlayer )
        -:  715:	    {
        8:  716:	      drawCard(i, state);
        -:  717:	    }
        -:  718:	}
        -:  719:			
        -:  720:  //put played card in played card pile
        8:  721:  discardCard(handPos, currentPlayer, state, 0);
        -:  722:			
        8:  723:  return 0;
        -:  724:}
        -:  725:
        -:  726:
    #####:  727:int playFeast(  struct gameState* state, int choice1) {
        -:  728:	int temphand[MAX_HAND];
    #####:  729:  int currentPlayer = whoseTurn(state);
        -:  730:  //gain card with cost up to 5
        -:  731:  //Backup hand
    #####:  732:  for (int i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  733:		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  734:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  735:  }
        -:  736:  //Backup hand
        -:  737:
        -:  738:  //Update Coins for Buy
    #####:  739:  updateCoins(currentPlayer, state, 5);
    #####:  740:  int x = 1;//Condition to loop on
    #####:  741:  while( x == 1) {//Buy one card
    #####:  742:		if (supplyCount(choice1, state) <= 0){
        -:  743:			if (DEBUG)
        -:  744:				printf("None of that card left, sorry!\n");
        -:  745:
        -:  746:			if (DEBUG){
        -:  747:				printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  748:			}
        -:  749:		} 
    #####:  750:		else if (state->coins <= getCost(choice1)){
    #####:  751:			printf("That card is too expensive!\n");
        -:  752:
        -:  753:			if (DEBUG){
        -:  754:				printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  755:			}
        -:  756:		}
        -:  757:		else{
        -:  758:			if (DEBUG){
        -:  759:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  760:			}
    #####:  761:			gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  762:			x = 0;//No more buying cards
        -:  763:
        -:  764:			if (DEBUG){
        -:  765:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  766:			}
        -:  767:		}
        -:  768:  }     
        -:  769:
        -:  770:  //Reset Hand
    #####:  771:  for (int i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  772:		state->hand[currentPlayer][i] = temphand[i];
    #####:  773:		temphand[i] = -1;
        -:  774:  }
        -:  775:  //Reset Hand
        -:  776:      			
    #####:  777:  return 0;
        -:  778:}
        -:  779:			
        -:  780:
       36:  781:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  782:{
        -:  783:  int i;
        -:  784:  int j;
        -:  785:  int k;
        -:  786:  int x;
        -:  787:  int index;
       36:  788:  int currentPlayer = whoseTurn(state);
       36:  789:  int nextPlayer = currentPlayer + 1;
        -:  790:
       36:  791:  int tributeRevealedCards[2] = {-1, -1};
        -:  792:  int temphand[MAX_HAND];// moved above the if statement
       36:  793:  int drawntreasure=0;
        -:  794:  int cardDrawn;
       36:  795:  int z = 0;// this is the counter for the temp hand
       36:  796:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  797:    nextPlayer = 0;
        -:  798:  }
        -:  799:  
        -:  800:	
        -:  801:  //uses switch to select card and perform actions
       36:  802:  switch( card ) {
        -:  803:    case adventurer:
       12:  804:			playAdventurer(state);	
       12:  805:			break;	
        -:  806:	
        -:  807:    case council_room:
        8:  808:			playCouncil_room(state, handPos);   
        8:  809:			break;   
        -:  810:			
        -:  811:    case feast:
    #####:  812:			playFeast(  state, choice1);
    #####:  813:			break;	
        -:  814:
        -:  815:    case gardens:
    #####:  816:      return -1;
        -:  817:			
        -:  818:    case mine:
    #####:  819:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  820:
    #####:  821:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  822:	{
    #####:  823:	  return -1;
        -:  824:	}
        -:  825:		
    #####:  826:      if (choice2 > treasure_map || choice2 < curse)
        -:  827:	{
    #####:  828:	  return -1;
        -:  829:	}
        -:  830:
    #####:  831:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  832:	{
    #####:  833:	  return -1;
        -:  834:	}
        -:  835:
    #####:  836:      gainCard(choice2, state, 2, currentPlayer);
        -:  837:
        -:  838:      //discard card from hand
    #####:  839:      discardCard(handPos, currentPlayer, state, 0);
        -:  840:
        -:  841:      //discard trashed card
    #####:  842:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  843:	{
    #####:  844:	  if (state->hand[currentPlayer][i] == j)
        -:  845:	    {
    #####:  846:	      discardCard(i, currentPlayer, state, 0);			
    #####:  847:	      break;
        -:  848:	    }
        -:  849:	}
        -:  850:			
    #####:  851:      return 0;
        -:  852:			
        -:  853:    case remodel:
    #####:  854:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  855:
    #####:  856:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  857:	{
    #####:  858:	  return -1;
        -:  859:	}
        -:  860:
    #####:  861:      gainCard(choice2, state, 0, currentPlayer);
        -:  862:
        -:  863:      //discard card from hand
    #####:  864:      discardCard(handPos, currentPlayer, state, 0);
        -:  865:
        -:  866:      //discard trashed card
    #####:  867:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  868:	{
    #####:  869:	  if (state->hand[currentPlayer][i] == j)
        -:  870:	    {
    #####:  871:	      discardCard(i, currentPlayer, state, 0);			
    #####:  872:	      break;
        -:  873:	    }
        -:  874:	}
        -:  875:
        -:  876:
    #####:  877:      return 0;
        -:  878:		
        -:  879:    case smithy:
        8:  880:			playSmithy(state);
        8:  881:			break;	
        -:  882:	
        -:  883:    case village:
        8:  884:			playVillage(state, handPos);
        8:  885:			break;	
        -:  886:	
        -:  887:    case baron:
    #####:  888:      state->numBuys++;//Increase buys by 1!
    #####:  889:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  890:	int p = 0;//Iterator for hand!
    #####:  891:	int card_not_discarded = 1;//Flag for discard set!
    #####:  892:	while(card_not_discarded){
    #####:  893:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  894:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  895:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  896:	    state->discardCount[currentPlayer]++;
    #####:  897:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  898:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  899:	    }
    #####:  900:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  901:	    state->handCount[currentPlayer]--;
    #####:  902:	    card_not_discarded = 0;//Exit the loop
        -:  903:	  }
    #####:  904:	  else if (p > state->handCount[currentPlayer]){
        -:  905:	    if(DEBUG) {
        -:  906:	      printf("No estate cards in your hand, invalid choice\n");
        -:  907:	      printf("Must gain an estate if there are any\n");
        -:  908:	    }
    #####:  909:	    if (supplyCount(estate, state) > 0){
    #####:  910:	      gainCard(estate, state, 0, currentPlayer);
    #####:  911:	      state->supplyCount[estate]--;//Decrement estates
    #####:  912:	      if (supplyCount(estate, state) == 0){
    #####:  913:		isGameOver(state);
        -:  914:	      }
        -:  915:	    }
    #####:  916:	    card_not_discarded = 0;//Exit the loop
        -:  917:	  }
        -:  918:			    
        -:  919:	  else{
    #####:  920:	    p++;//Next card
        -:  921:	  }
        -:  922:	}
        -:  923:      }
        -:  924:			    
        -:  925:      else{
    #####:  926:	if (supplyCount(estate, state) > 0){
    #####:  927:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  928:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  929:	  if (supplyCount(estate, state) == 0){
    #####:  930:	    isGameOver(state);
        -:  931:	  }
        -:  932:	}
        -:  933:      }
        -:  934:	    
        -:  935:      
    #####:  936:      return 0;
        -:  937:		
        -:  938:    case great_hall:
        -:  939:      //+1 Card
    #####:  940:      drawCard(currentPlayer, state);
        -:  941:			
        -:  942:      //+1 Actions
    #####:  943:      state->numActions++;
        -:  944:			
        -:  945:      //discard card from hand
    #####:  946:      discardCard(handPos, currentPlayer, state, 0);
    #####:  947:      return 0;
        -:  948:		
        -:  949:    case minion:
        -:  950:      //+1 action
    #####:  951:      state->numActions++;
        -:  952:			
        -:  953:      //discard card from hand
    #####:  954:      discardCard(handPos, currentPlayer, state, 0);
        -:  955:			
    #####:  956:      if (choice1)		//+2 coins
        -:  957:	{
    #####:  958:	  state->coins = state->coins + 2;
        -:  959:	}
        -:  960:			
    #####:  961:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  962:	{
        -:  963:	  //discard hand
    #####:  964:	  while(numHandCards(state) > 0)
        -:  965:	    {
    #####:  966:	      discardCard(handPos, currentPlayer, state, 0);
        -:  967:	    }
        -:  968:				
        -:  969:	  //draw 4
    #####:  970:	  for (i = 0; i < 4; i++)
        -:  971:	    {
    #####:  972:	      drawCard(currentPlayer, state);
        -:  973:	    }
        -:  974:				
        -:  975:	  //other players discard hand and redraw if hand size > 4
    #####:  976:	  for (i = 0; i < state->numPlayers; i++)
        -:  977:	    {
    #####:  978:	      if (i != currentPlayer)
        -:  979:		{
    #####:  980:		  if ( state->handCount[i] > 4 )
        -:  981:		    {
        -:  982:		      //discard hand
    #####:  983:		      while( state->handCount[i] > 0 )
        -:  984:			{
    #####:  985:			  discardCard(handPos, i, state, 0);
        -:  986:			}
        -:  987:							
        -:  988:		      //draw 4
    #####:  989:		      for (j = 0; j < 4; j++)
        -:  990:			{
    #####:  991:			  drawCard(i, state);
        -:  992:			}
        -:  993:		    }
        -:  994:		}
        -:  995:	    }
        -:  996:				
        -:  997:	}
    #####:  998:      return 0;
        -:  999:		
        -: 1000:    case steward:
    #####: 1001:      if (choice1 == 1)
        -: 1002:	{
        -: 1003:	  //+2 cards
    #####: 1004:	  drawCard(currentPlayer, state);
    #####: 1005:	  drawCard(currentPlayer, state);
        -: 1006:	}
    #####: 1007:      else if (choice1 == 2)
        -: 1008:	{
        -: 1009:	  //+2 coins
    #####: 1010:	  state->coins = state->coins + 2;
        -: 1011:	}
        -: 1012:      else
        -: 1013:	{
        -: 1014:	  //trash 2 cards in hand
    #####: 1015:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1016:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1017:	}
        -: 1018:			
        -: 1019:      //discard card from hand
    #####: 1020:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1021:      return 0;
        -: 1022:		
        -: 1023:    case tribute:
    #####: 1024:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1025:	if (state->deckCount[nextPlayer] > 0){
    #####: 1026:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1027:	  state->deckCount[nextPlayer]--;
        -: 1028:	}
    #####: 1029:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1030:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1031:	  state->discardCount[nextPlayer]--;
        -: 1032:	}
        -: 1033:	else{
        -: 1034:	  //No Card to Reveal
        -: 1035:	  if (DEBUG){
        -: 1036:	    printf("No cards to reveal\n");
        -: 1037:	  }
        -: 1038:	}
        -: 1039:      }
        -: 1040:	    
        -: 1041:      else{
    #####: 1042:	if (state->deckCount[nextPlayer] == 0){
    #####: 1043:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1044:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1045:	    state->deckCount[nextPlayer]++;
    #####: 1046:	    state->discard[nextPlayer][i] = -1;
    #####: 1047:	    state->discardCount[nextPlayer]--;
        -: 1048:	  }
        -: 1049:			    
    #####: 1050:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1051:	} 
    #####: 1052:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1053:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1054:	state->deckCount[nextPlayer]--;
    #####: 1055:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1056:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1057:	state->deckCount[nextPlayer]--;
        -: 1058:      }    
        -: 1059:		       
    #####: 1060:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1061:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1062:	state->playedCardCount++;
    #####: 1063:	tributeRevealedCards[1] = -1;
        -: 1064:      }
        -: 1065:
    #####: 1066:      for (i = 0; i <= 2; i ++){
    #####: 1067:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1068:	  state->coins += 2;
        -: 1069:	}
        -: 1070:		    
    #####: 1071:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1072:	  drawCard(currentPlayer, state);
    #####: 1073:	  drawCard(currentPlayer, state);
        -: 1074:	}
        -: 1075:	else{//Action Card
    #####: 1076:	  state->numActions = state->numActions + 2;
        -: 1077:	}
        -: 1078:      }
        -: 1079:	    
    #####: 1080:      return 0;
        -: 1081:		
        -: 1082:    case ambassador:
    #####: 1083:      j = 0;		//used to check if player has enough cards to discard
        -: 1084:
    #####: 1085:      if (choice2 > 2 || choice2 < 0)
        -: 1086:	{
    #####: 1087:	  return -1;				
        -: 1088:	}
        -: 1089:
    #####: 1090:      if (choice1 == handPos)
        -: 1091:	{
    #####: 1092:	  return -1;
        -: 1093:	}
        -: 1094:
    #####: 1095:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1096:	{
    #####: 1097:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1098:	    {
    #####: 1099:	      j++;
        -: 1100:	    }
        -: 1101:	}
    #####: 1102:      if (j < choice2)
        -: 1103:	{
    #####: 1104:	  return -1;				
        -: 1105:	}
        -: 1106:
        -: 1107:      if (DEBUG) 
        -: 1108:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1109:
        -: 1110:      //increase supply count for choosen card by amount being discarded
    #####: 1111:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1112:			
        -: 1113:      //each other player gains a copy of revealed card
    #####: 1114:      for (i = 0; i < state->numPlayers; i++)
        -: 1115:	{
    #####: 1116:	  if (i != currentPlayer)
        -: 1117:	    {
    #####: 1118:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1119:	    }
        -: 1120:	}
        -: 1121:
        -: 1122:      //discard played card from hand
    #####: 1123:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1124:
        -: 1125:      //trash copies of cards returned to supply
    #####: 1126:      for (j = 0; j < choice2; j++)
        -: 1127:	{
    #####: 1128:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1129:	    {
    #####: 1130:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1131:		{
    #####: 1132:		  discardCard(i, currentPlayer, state, 1);
    #####: 1133:		  break;
        -: 1134:		}
        -: 1135:	    }
        -: 1136:	}			
        -: 1137:
    #####: 1138:      return 0;
        -: 1139:		
        -: 1140:    case cutpurse:
        -: 1141:
    #####: 1142:      updateCoins(currentPlayer, state, 2);
    #####: 1143:      for (i = 0; i < state->numPlayers; i++)
        -: 1144:	{
    #####: 1145:	  if (i != currentPlayer)
        -: 1146:	    {
    #####: 1147:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1148:		{
    #####: 1149:		  if (state->hand[i][j] == copper)
        -: 1150:		    {
    #####: 1151:		      discardCard(j, i, state, 0);
    #####: 1152:		      break;
        -: 1153:		    }
    #####: 1154:		  if (j == state->handCount[i])
        -: 1155:		    {
    #####: 1156:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1157:			{
        -: 1158:			  if (DEBUG)
        -: 1159:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1160:			}	
    #####: 1161:		      break;
        -: 1162:		    }		
        -: 1163:		}
        -: 1164:					
        -: 1165:	    }
        -: 1166:				
        -: 1167:	}				
        -: 1168:
        -: 1169:      //discard played card from hand
    #####: 1170:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1171:
    #####: 1172:      return 0;
        -: 1173:
        -: 1174:		
        -: 1175:    case embargo: 
        -: 1176:      //+2 Coins
    #####: 1177:      state->coins = state->coins + 2;
        -: 1178:			
        -: 1179:      //see if selected pile is in play
    #####: 1180:      if ( state->supplyCount[choice1] == -1 )
        -: 1181:	{
    #####: 1182:	  return -1;
        -: 1183:	}
        -: 1184:			
        -: 1185:      //add embargo token to selected supply pile
    #####: 1186:      state->embargoTokens[choice1]++;
        -: 1187:			
        -: 1188:      //trash card
    #####: 1189:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1190:      return 0;
        -: 1191:		
        -: 1192:    case outpost:
        -: 1193:      //set outpost flag
    #####: 1194:      state->outpostPlayed++;
        -: 1195:			
        -: 1196:      //discard card
    #####: 1197:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1198:      return 0;
        -: 1199:		
        -: 1200:    case salvager:
        -: 1201:      //+1 buy
    #####: 1202:      state->numBuys++;
        -: 1203:			
    #####: 1204:      if (choice1)
        -: 1205:	{
        -: 1206:	  //gain coins equal to trashed card
    #####: 1207:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1208:	  //trash card
    #####: 1209:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1210:	}
        -: 1211:			
        -: 1212:      //discard card
    #####: 1213:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1214:      return 0;
        -: 1215:		
        -: 1216:    case sea_hag:
    #####: 1217:      for (i = 0; i < state->numPlayers; i++){
    #####: 1218:	if (i != currentPlayer){
    #####: 1219:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1220:	  state->discardCount[i]++;
    #####: 1221:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1222:	}
        -: 1223:      }
    #####: 1224:      return 0;
        -: 1225:		
        -: 1226:    case treasure_map:
        -: 1227:      //search hand for another treasure_map
    #####: 1228:      index = -1;
    #####: 1229:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1230:	{
    #####: 1231:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1232:	    {
    #####: 1233:	      index = i;
    #####: 1234:	      break;
        -: 1235:	    }
        -: 1236:	}
    #####: 1237:      if (index > -1)
        -: 1238:	{
        -: 1239:	  //trash both treasure cards
    #####: 1240:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1241:	  discardCard(index, currentPlayer, state, 1);
        -: 1242:
        -: 1243:	  //gain 4 Gold cards
    #####: 1244:	  for (i = 0; i < 4; i++)
        -: 1245:	    {
    #####: 1246:	      gainCard(gold, state, 1, currentPlayer);
        -: 1247:	    }
        -: 1248:				
        -: 1249:	  //return success
    #####: 1250:	  return 1;
        -: 1251:	}
        -: 1252:			
        -: 1253:      //no second treasure_map found in hand
    #####: 1254:      return -1;
        -: 1255:    }
        -: 1256:	
       36: 1257:  return -1;
        -: 1258:}
        -: 1259:
       16: 1260:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1261:{
        -: 1262:	
        -: 1263:  //if card is not trashed, added to Played pile 
       16: 1264:  if (trashFlag < 1)
        -: 1265:    {
        -: 1266:      //add card to played pile
       16: 1267:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       16: 1268:      state->playedCardCount++;
        -: 1269:    }
        -: 1270:	
        -: 1271:  //set played card to -1
       16: 1272:  state->hand[currentPlayer][handPos] = -1;
        -: 1273:	
        -: 1274:  //remove card from player's hand
       16: 1275:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
    #####: 1278:      state->handCount[currentPlayer]--;
        -: 1279:    }
       16: 1280:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1281:    {
        -: 1282:      //reduce number of cards in hand
    #####: 1283:      state->handCount[currentPlayer]--;
        -: 1284:    }
        -: 1285:  else 	
        -: 1286:    {
        -: 1287:      //replace discarded card with last card in hand
       16: 1288:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1289:      //set last card to -1
       16: 1290:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1291:      //reduce number of cards in hand
       16: 1292:      state->handCount[currentPlayer]--;
        -: 1293:    }
        -: 1294:	
       16: 1295:  return 0;
        -: 1296:}
        -: 1297:
      108: 1298:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1299:{
        -: 1300:  //Note: supplyPos is enum of choosen card
        -: 1301:	
        -: 1302:  //check if supply pile is empty (0) or card is not used in game (-1)
      108: 1303:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1304:    {
       54: 1305:      return -1;
        -: 1306:    }
        -: 1307:	
        -: 1308:  //added card for [whoseTurn] current player:
        -: 1309:  // toFlag = 0 : add to discard
        -: 1310:  // toFlag = 1 : add to deck
        -: 1311:  // toFlag = 2 : add to hand
        -: 1312:
       54: 1313:  if (toFlag == 1)
        -: 1314:    {
       27: 1315:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       27: 1316:      state->deckCount[player]++;
        -: 1317:    }
       27: 1318:  else if (toFlag == 2)
        -: 1319:    {
    #####: 1320:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1321:      state->handCount[player]++;
        -: 1322:    }
        -: 1323:  else
        -: 1324:    {
       27: 1325:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       27: 1326:      state->discardCount[player]++;
        -: 1327:    }
        -: 1328:	
        -: 1329:  //decrease number in supply pile
       54: 1330:  state->supplyCount[supplyPos]--;
        -: 1331:	 
       54: 1332:  return 0;
        -: 1333:}
        -: 1334:
       22: 1335:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1336:{
        -: 1337:  int i;
        -: 1338:	
        -: 1339:  //reset coin count
       22: 1340:  state->coins = 0;
        -: 1341:
        -: 1342:  //add coins for each Treasure card in player's hand
      132: 1343:  for (i = 0; i < state->handCount[player]; i++)
        -: 1344:    {
      110: 1345:      if (state->hand[player][i] == copper)
        -: 1346:	{
       44: 1347:	  state->coins += 1;
        -: 1348:	}
       66: 1349:      else if (state->hand[player][i] == silver)
        -: 1350:	{
    #####: 1351:	  state->coins += 2;
        -: 1352:	}
       66: 1353:      else if (state->hand[player][i] == gold)
        -: 1354:	{
    #####: 1355:	  state->coins += 3;
        -: 1356:	}	
        -: 1357:    }	
        -: 1358:
        -: 1359:  //add bonus
       22: 1360:  state->coins += bonus;
        -: 1361:
       22: 1362:  return 0;
        -: 1363:}
        -: 1364:
        -: 1365:
        -: 1366://end of dominion.c
        -: 1367:
