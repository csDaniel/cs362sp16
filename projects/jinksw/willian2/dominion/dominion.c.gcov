        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:24
        -:    0:Programs:10
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      720:    8:int compare(const void* a, const void* b) {
      720:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      720:   11:  if (*(int*)a < *(int*)b)
      192:   12:    return -1;
      528:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       24:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       24:   44:  SelectStream(1);
       24:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       24:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       24:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      264:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     2640:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     2400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       24:   73:  if (numPlayers == 2)
        -:   74:    {
       24:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       24:   87:  if (numPlayers == 2)
        -:   88:    {
       24:   89:      state->supplyCount[estate] = 8;
       24:   90:      state->supplyCount[duchy] = 8;
       24:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       24:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       24:  102:  state->supplyCount[silver] = 40;
       24:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      504:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     3960:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     3720:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      240:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       48:  115:		  if (numPlayers == 2){ 
       24:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      216:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      240:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     3480:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       72:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       48:  140:      state->deckCount[i] = 0;
      192:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      144:  143:	  state->deck[i][j] = estate;
      144:  144:	  state->deckCount[i]++;
        -:  145:	}
      384:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      336:  148:	  state->deck[i][j] = copper;
      336:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       72:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       48:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       72:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       48:  166:      state->handCount[i] = 0;
       48:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      672:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      648:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       24:  182:  state->outpostPlayed = 0;
       24:  183:  state->phase = 0;
       24:  184:  state->numActions = 1;
       24:  185:  state->numBuys = 1;
       24:  186:  state->playedCardCount = 0;
       24:  187:  state->whoseTurn = 0;
       24:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      144:  192:  for (it = 0; it < 5; it++){
      120:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       24:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       24:  198:  return 0;
        -:  199:}
        -:  200:
       84:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       84:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       84:  209:  if (state->deckCount[player] < 1)
       36:  210:    return -1;
       48:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      576:  214:  while (state->deckCount[player] > 0) {
      480:  215:    card = floor(Random() * state->deckCount[player]);
      480:  216:    newDeck[newDeckPos] = state->deck[player][card];
      480:  217:    newDeckPos++;
     1836:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
     1356:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      480:  221:    state->deckCount[player]--;
        -:  222:  }
      528:  223:  for (i = 0; i < newDeckPos; i++) {
      480:  224:    state->deck[player][i] = newDeck[i];
      480:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       48:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
      324:  320:int supplyCount(int card, struct gameState *state) {
      324:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
      111:  346:int whoseTurn(struct gameState *state) {
      111:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        3:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        3:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
       18:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
       15:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       15:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
        3:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
        3:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
        3:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        3:  370:  state->outpostPlayed = 0;
        3:  371:  state->phase = 0;
        3:  372:  state->numActions = 1;
        3:  373:  state->coins = 0;
        3:  374:  state->numBuys = 1;
        3:  375:  state->playedCardCount = 0;
        3:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       18:  380:  for (k = 0; k < 5; k++){
       15:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
        3:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
        3:  387:  return 0;
        -:  388:}
        -:  389:
       15:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       15:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        3:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       12:  401:  j = 0;
      312:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      300:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
       18:  406:	  j++;
        -:  407:	}
        -:  408:    }
       12:  409:  if ( j >= 3)
        -:  410:    {
        3:  411:      return 1;
        -:  412:    }
        -:  413:
        9:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
      471:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      471:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       36:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       36:  538:    state->deckCount[player] = state->discardCount[player];
       36:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       36:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       36:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       36:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       36:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       36:  559:    if (deckCounter == 0)
       36:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      435:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      435:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      435:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      435:  576:    state->deckCount[player]--;
      435:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      435:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
      108:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
      108:  653:  int currentPlayer = whoseTurn(state);
      108:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
      108:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
      108:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
      108:  660:  int z = 0;// this is the counter for the temp hand
      108:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
      108:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
        -:  670:	   //refactored version, playAdventurer() will still return 0 when completed
       36:  671:       return playAdventurer(state, currentPlayer, handPos);
        -:  672:			
        -:  673:    case council_room:
        -:  674:	   //refactored version, playCouncilRoom() will still return 0 when completed
       24:  675:       return playCouncilRoom(state, currentPlayer, handPos);
        -:  676:			
        -:  677:    case feast:
        -:  678:      //gain card with cost up to 5
        -:  679:      //Backup hand
    #####:  680:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  681:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  682:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  683:      }
        -:  684:      //Backup hand
        -:  685:
        -:  686:      //Update Coins for Buy
    #####:  687:      updateCoins(currentPlayer, state, 5);
    #####:  688:      x = 1;//Condition to loop on
    #####:  689:      while( x == 1) {//Buy one card
    #####:  690:	if (supplyCount(choice1, state) <= 0){
        -:  691:	  if (DEBUG)
        -:  692:	    printf("None of that card left, sorry!\n");
        -:  693:
        -:  694:	  if (DEBUG){
        -:  695:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  696:	  }
        -:  697:	}
    #####:  698:	else if (state->coins < getCost(choice1)){
    #####:  699:	  printf("That card is too expensive!\n");
        -:  700:
        -:  701:	  if (DEBUG){
        -:  702:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  703:	  }
        -:  704:	}
        -:  705:	else{
        -:  706:
        -:  707:	  if (DEBUG){
        -:  708:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  709:	  }
        -:  710:
    #####:  711:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  712:	  x = 0;//No more buying cards
        -:  713:
        -:  714:	  if (DEBUG){
        -:  715:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  716:	  }
        -:  717:
        -:  718:	}
        -:  719:      }     
        -:  720:
        -:  721:      //Reset Hand
    #####:  722:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  723:	state->hand[currentPlayer][i] = temphand[i];
    #####:  724:	temphand[i] = -1;
        -:  725:      }
        -:  726:      //Reset Hand
        -:  727:      			
    #####:  728:      return 0;
        -:  729:			
        -:  730:    case gardens:
    #####:  731:      return -1;
        -:  732:			
        -:  733:    case mine:
    #####:  734:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  735:
    #####:  736:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  737:	{
    #####:  738:	  return -1;
        -:  739:	}
        -:  740:		
    #####:  741:      if (choice2 > treasure_map || choice2 < curse)
        -:  742:	{
    #####:  743:	  return -1;
        -:  744:	}
        -:  745:
    #####:  746:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  747:	{
    #####:  748:	  return -1;
        -:  749:	}
        -:  750:
    #####:  751:      gainCard(choice2, state, 2, currentPlayer);
        -:  752:
        -:  753:      //discard card from hand
    #####:  754:      discardCard(handPos, currentPlayer, state, 0);
        -:  755:
        -:  756:      //discard trashed card
    #####:  757:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  758:	{
    #####:  759:	  if (state->hand[currentPlayer][i] == j)
        -:  760:	    {
    #####:  761:	      discardCard(i, currentPlayer, state, 0);			
    #####:  762:	      break;
        -:  763:	    }
        -:  764:	}
        -:  765:			
    #####:  766:      return 0;
        -:  767:			
        -:  768:    case remodel:
    #####:  769:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  770:
    #####:  771:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  772:	{
    #####:  773:	  return -1;
        -:  774:	}
        -:  775:
    #####:  776:      gainCard(choice2, state, 0, currentPlayer);
        -:  777:
        -:  778:      //discard card from hand
    #####:  779:      discardCard(handPos, currentPlayer, state, 0);
        -:  780:
        -:  781:      //discard trashed card
    #####:  782:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  783:	{
    #####:  784:	  if (state->hand[currentPlayer][i] == j)
        -:  785:	    {
    #####:  786:	      discardCard(i, currentPlayer, state, 0);			
    #####:  787:	      break;
        -:  788:	    }
        -:  789:	}
        -:  790:
        -:  791:
    #####:  792:      return 0;
        -:  793:		
        -:  794:    case smithy:
        -:  795:	  //refactored version, playSmithy will return 0 when completed
       24:  796:	  return playSmithy(state, currentPlayer, handPos);
        -:  797:		
        -:  798:    case village:
        -:  799:      //+1 Card
       24:  800:      drawCard(currentPlayer, state);
        -:  801:			
        -:  802:      //+2 Actions
       24:  803:      state->numActions = state->numActions + 2;
        -:  804:			
        -:  805:      //discard played card from hand
       24:  806:      discardCard(handPos, currentPlayer, state, 0);
       24:  807:      return 0;
        -:  808:		
        -:  809:    case baron:
    #####:  810:      state->numBuys++;//Increase buys by 1!
    #####:  811:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  812:	int p = 0;//Iterator for hand!
    #####:  813:	int card_not_discarded = 1;//Flag for discard set!
    #####:  814:	while(card_not_discarded){
    #####:  815:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  816:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  817:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  818:	    state->discardCount[currentPlayer]++;
    #####:  819:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  820:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  821:	    }
    #####:  822:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  823:	    state->handCount[currentPlayer]--;
    #####:  824:	    card_not_discarded = 0;//Exit the loop
        -:  825:	  }
    #####:  826:	  else if (p > state->handCount[currentPlayer]){
        -:  827:	    if(DEBUG) {
        -:  828:	      printf("No estate cards in your hand, invalid choice\n");
        -:  829:	      printf("Must gain an estate if there are any\n");
        -:  830:	    }
    #####:  831:	    if (supplyCount(estate, state) > 0){
    #####:  832:	      gainCard(estate, state, 0, currentPlayer);
    #####:  833:	      state->supplyCount[estate]--;//Decrement estates
    #####:  834:	      if (supplyCount(estate, state) == 0){
    #####:  835:		isGameOver(state);
        -:  836:	      }
        -:  837:	    }
    #####:  838:	    card_not_discarded = 0;//Exit the loop
        -:  839:	  }
        -:  840:			    
        -:  841:	  else{
    #####:  842:	    p++;//Next card
        -:  843:	  }
        -:  844:	}
        -:  845:      }
        -:  846:			    
        -:  847:      else{
    #####:  848:	if (supplyCount(estate, state) > 0){
    #####:  849:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  850:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  851:	  if (supplyCount(estate, state) == 0){
    #####:  852:	    isGameOver(state);
        -:  853:	  }
        -:  854:	}
        -:  855:      }
        -:  856:	    
        -:  857:      
    #####:  858:      return 0;
        -:  859:		
        -:  860:    case great_hall:
        -:  861:      //+1 Card
    #####:  862:      drawCard(currentPlayer, state);
        -:  863:			
        -:  864:      //+1 Actions
    #####:  865:      state->numActions++;
        -:  866:			
        -:  867:      //discard card from hand
    #####:  868:      discardCard(handPos, currentPlayer, state, 0);
    #####:  869:      return 0;
        -:  870:		
        -:  871:    case minion:
        -:  872:      //refactored version, playMinion() will still return 0 on completion
    #####:  873:	  return playMinion(state, currentPlayer, handPos, choice1, choice2);
        -:  874:		
        -:  875:    case steward:
    #####:  876:      if (choice1 == 1)
        -:  877:	{
        -:  878:	  //+2 cards
    #####:  879:	  drawCard(currentPlayer, state);
    #####:  880:	  drawCard(currentPlayer, state);
        -:  881:	}
    #####:  882:      else if (choice1 == 2)
        -:  883:	{
        -:  884:	  //+2 coins
    #####:  885:	  state->coins = state->coins + 2;
        -:  886:	}
        -:  887:      else
        -:  888:	{
        -:  889:	  //trash 2 cards in hand
    #####:  890:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  891:	  discardCard(choice3, currentPlayer, state, 1);
        -:  892:	}
        -:  893:			
        -:  894:      //discard card from hand
    #####:  895:      discardCard(handPos, currentPlayer, state, 0);
    #####:  896:      return 0;
        -:  897:		
        -:  898:    case tribute:
    #####:  899:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  900:	if (state->deckCount[nextPlayer] > 0){
    #####:  901:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  902:	  state->deckCount[nextPlayer]--;
        -:  903:	}
    #####:  904:	else if (state->discardCount[nextPlayer] > 0){
    #####:  905:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  906:	  state->discardCount[nextPlayer]--;
        -:  907:	}
        -:  908:	else{
        -:  909:	  //No Card to Reveal
        -:  910:	  if (DEBUG){
        -:  911:	    printf("No cards to reveal\n");
        -:  912:	  }
        -:  913:	}
        -:  914:      }
        -:  915:	    
        -:  916:      else{
    #####:  917:	if (state->deckCount[nextPlayer] == 0){
    #####:  918:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  919:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  920:	    state->deckCount[nextPlayer]++;
    #####:  921:	    state->discard[nextPlayer][i] = -1;
    #####:  922:	    state->discardCount[nextPlayer]--;
        -:  923:	  }
        -:  924:			    
    #####:  925:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  926:	} 
    #####:  927:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  928:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  929:	state->deckCount[nextPlayer]--;
    #####:  930:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  931:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  932:	state->deckCount[nextPlayer]--;
        -:  933:      }    
        -:  934:		       
    #####:  935:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  936:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  937:	state->playedCardCount++;
    #####:  938:	tributeRevealedCards[1] = -1;
        -:  939:      }
        -:  940:
    #####:  941:      for (i = 0; i <= 2; i ++){
    #####:  942:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  943:	  state->coins += 2;
        -:  944:	}
        -:  945:		    
    #####:  946:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  947:	  drawCard(currentPlayer, state);
    #####:  948:	  drawCard(currentPlayer, state);
        -:  949:	}
        -:  950:	else{//Action Card
    #####:  951:	  state->numActions = state->numActions + 2;
        -:  952:	}
        -:  953:      }
        -:  954:	    
    #####:  955:      return 0;
        -:  956:		
        -:  957:    case ambassador:
    #####:  958:      j = 0;		//used to check if player has enough cards to discard
        -:  959:
    #####:  960:      if (choice2 > 2 || choice2 < 0)
        -:  961:	{
    #####:  962:	  return -1;				
        -:  963:	}
        -:  964:
    #####:  965:      if (choice1 == handPos)
        -:  966:	{
    #####:  967:	  return -1;
        -:  968:	}
        -:  969:
    #####:  970:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  971:	{
    #####:  972:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  973:	    {
    #####:  974:	      j++;
        -:  975:	    }
        -:  976:	}
    #####:  977:      if (j < choice2)
        -:  978:	{
    #####:  979:	  return -1;				
        -:  980:	}
        -:  981:
        -:  982:      if (DEBUG) 
        -:  983:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  984:
        -:  985:      //increase supply count for choosen card by amount being discarded
    #####:  986:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  987:			
        -:  988:      //each other player gains a copy of revealed card
    #####:  989:      for (i = 0; i < state->numPlayers; i++)
        -:  990:	{
    #####:  991:	  if (i != currentPlayer)
        -:  992:	    {
    #####:  993:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  994:	    }
        -:  995:	}
        -:  996:
        -:  997:      //discard played card from hand
    #####:  998:      discardCard(handPos, currentPlayer, state, 0);			
        -:  999:
        -: 1000:      //trash copies of cards returned to supply
    #####: 1001:      for (j = 0; j < choice2; j++)
        -: 1002:	{
    #####: 1003:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1004:	    {
    #####: 1005:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1006:		{
    #####: 1007:		  discardCard(i, currentPlayer, state, 1);
    #####: 1008:		  break;
        -: 1009:		}
        -: 1010:	    }
        -: 1011:	}			
        -: 1012:
    #####: 1013:      return 0;
        -: 1014:		
        -: 1015:    case cutpurse:
        -: 1016:
    #####: 1017:      updateCoins(currentPlayer, state, 2);
    #####: 1018:      for (i = 0; i < state->numPlayers; i++)
        -: 1019:	{
    #####: 1020:	  if (i != currentPlayer)
        -: 1021:	    {
    #####: 1022:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1023:		{
    #####: 1024:		  if (state->hand[i][j] == copper)
        -: 1025:		    {
    #####: 1026:		      discardCard(j, i, state, 0);
    #####: 1027:		      break;
        -: 1028:		    }
    #####: 1029:		  if (j == state->handCount[i])
        -: 1030:		    {
    #####: 1031:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1032:			{
        -: 1033:			  if (DEBUG)
        -: 1034:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1035:			}	
    #####: 1036:		      break;
        -: 1037:		    }		
        -: 1038:		}
        -: 1039:					
        -: 1040:	    }
        -: 1041:				
        -: 1042:	}				
        -: 1043:
        -: 1044:      //discard played card from hand
    #####: 1045:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1046:
    #####: 1047:      return 0;
        -: 1048:
        -: 1049:		
        -: 1050:    case embargo: 
        -: 1051:      //+2 Coins
    #####: 1052:      state->coins = state->coins + 2;
        -: 1053:			
        -: 1054:      //see if selected pile is in play
    #####: 1055:      if ( state->supplyCount[choice1] == -1 )
        -: 1056:	{
    #####: 1057:	  return -1;
        -: 1058:	}
        -: 1059:			
        -: 1060:      //add embargo token to selected supply pile
    #####: 1061:      state->embargoTokens[choice1]++;
        -: 1062:			
        -: 1063:      //trash card
    #####: 1064:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1065:      return 0;
        -: 1066:		
        -: 1067:    case outpost:
        -: 1068:      //set outpost flag
    #####: 1069:      state->outpostPlayed++;
        -: 1070:			
        -: 1071:      //discard card
    #####: 1072:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1073:      return 0;
        -: 1074:		
        -: 1075:    case salvager:
        -: 1076:	  //refactored version, playSalvager will return 0 when completed
    #####: 1077:	  return playSalvager(state, currentPlayer, handPos, choice1);
        -: 1078:		
        -: 1079:    case sea_hag:
    #####: 1080:      for (i = 0; i < state->numPlayers; i++){
    #####: 1081:	if (i != currentPlayer){
    #####: 1082:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1083:	  state->discardCount[i]++;
    #####: 1084:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1085:	}
        -: 1086:      }
    #####: 1087:      return 0;
        -: 1088:		
        -: 1089:    case treasure_map:
        -: 1090:      //search hand for another treasure_map
    #####: 1091:      index = -1;
    #####: 1092:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1093:	{
    #####: 1094:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1095:	    {
    #####: 1096:	      index = i;
    #####: 1097:	      break;
        -: 1098:	    }
        -: 1099:	}
    #####: 1100:      if (index > -1)
        -: 1101:	{
        -: 1102:	  //trash both treasure cards
    #####: 1103:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1104:	  discardCard(index, currentPlayer, state, 1);
        -: 1105:
        -: 1106:	  //gain 4 Gold cards
    #####: 1107:	  for (i = 0; i < 4; i++)
        -: 1108:	    {
    #####: 1109:	      gainCard(gold, state, 1, currentPlayer);
        -: 1110:	    }
        -: 1111:				
        -: 1112:	  //return success
    #####: 1113:	  return 1;
        -: 1114:	}
        -: 1115:			
        -: 1116:      //no second treasure_map found in hand
    #####: 1117:      return -1;
        -: 1118:    }
        -: 1119:	
    #####: 1120:  return -1;
        -: 1121:}
        -: 1122:
        -: 1123:/******************************************************************************
        -: 1124:* REFACTORED CODE FOR CARDS
        -: 1125:******************************************************************************/
       36: 1126:int playAdventurer(struct gameState *state, int currentPlayer, int handPos)
        -: 1127:{
        -: 1128:   int temphand[MAX_HAND]; //MAX_HAND defined in dominion.h
       36: 1129:   int drawntreasure = 0; //always start with having drawn no treasure yet
        -: 1130:   int cardDrawn; //stores top card of hand
       36: 1131:   int z = 0; //counter for temp hand
        -: 1132:   
      168: 1133:   while (drawntreasure < 2) 
        -: 1134:   {
        -: 1135:
       96: 1136:      drawCard(currentPlayer, state);
        -: 1137:      //top card of hand is most recently drawn card...
       96: 1138:      cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];
       96: 1139:      if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -: 1140:      {
       72: 1141:	      drawntreasure++;
        -: 1142:      }
        -: 1143:      else
        -: 1144:      {
       24: 1145:	      temphand[z] = cardDrawn;
       24: 1146:	      state->handCount[currentPlayer]--; //this should just remove the top card,
        -: 1147:	      //aka the most recently drawn one
       24: 1148:	      z++;
        -: 1149:      }
        -: 1150:   }
       96: 1151:   while (z - 1 >= 0)
        -: 1152:   {
       24: 1153:	   state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z-1];
        -: 1154:	   //discard all cards in play that have been drawn
       24: 1155:	   z = z-1;
        -: 1156:   }
       36: 1157:   return 0;
        -: 1158:}
        -: 1159:
        -: 1160:
       24: 1161:int playCouncilRoom(struct gameState *state, int currentPlayer, int handPos)
        -: 1162:{
        -: 1163:   int i;
      120: 1164:   for (i = 0; i < 4; i++)
        -: 1165:   {
       96: 1166:	   drawCard(currentPlayer, state);
        -: 1167:   }
        -: 1168:   
        -: 1169:   //+1 buy
       24: 1170:   state->numBuys++;
        -: 1171:   
        -: 1172:   //each other player draws a card
       72: 1173:   for (i = 0; i < state->numPlayers; i++)
        -: 1174:   {
       48: 1175:	   if (i != currentPlayer)
        -: 1176:	   {
       24: 1177:		   drawCard(i, state);
        -: 1178:	   }
        -: 1179:   }
        -: 1180:   
        -: 1181:   //put played card in played card pile
       24: 1182:   discardCard(handPos, currentPlayer, state, 0);
       24: 1183:   return 0;
        -: 1184:}
        -: 1185:
        -: 1186:
    #####: 1187:int playMinion(struct gameState *state, int currentPlayer, int handPos, int choice1, int choice2)
        -: 1188:{
        -: 1189:   int i;
        -: 1190:   int j;
        -: 1191:   //+1 actions
    #####: 1192:   state->numActions++;
        -: 1193:
        -: 1194:   //discard card from hand
    #####: 1195:   discardCard(handPos, currentPlayer, state, 0);
        -: 1196:   
    #####: 1197:   if (choice1) //discard hand, redraw 4, other players with 5+ cards
        -: 1198:   //discard hand and draw 40
        -: 1199:   {
        -: 1200:	   //discard hand
    #####: 1201:	   while (numHandCards(state) > 0)
        -: 1202:	   {
    #####: 1203:		   discardCard(handPos, currentPlayer, state, 0);
        -: 1204:	   }
        -: 1205:	   //draw 4
    #####: 1206:	   for (i = 0; i < 4; i++)
        -: 1207:	   {
    #####: 1208:		   drawCard(currentPlayer, state);
        -: 1209:	   }
        -: 1210:	   
        -: 1211:	   //other players discard hand and redraw if hand size > 40
    #####: 1212:	   for (i = 0; i < state->numPlayers; i++)
        -: 1213:	   {
    #####: 1214:		   if (i != currentPlayer)
        -: 1215:		   {
    #####: 1216:			   if (state->handCount[i] > 4)
        -: 1217:			   {
        -: 1218:				   //discard hand
    #####: 1219:				   while (state->handCount[i] > 0)
        -: 1220:				   {
    #####: 1221:					   discardCard(handPos, i, state, 0);
        -: 1222:				   }
        -: 1223:				   
        -: 1224:				   //draw 4
    #####: 1225:				   for (j = 0; j < 4; j++)
        -: 1226:				   {
    #####: 1227:					   drawCard(i, state);
        -: 1228:				   }
        -: 1229:			   }
        -: 1230:		   }
        -: 1231:	   }
        -: 1232:   }
        -: 1233:   
    #####: 1234:   else if (choice2) //+2 coins
        -: 1235:   {
    #####: 1236:	   state->coins = state->coins + 2;
        -: 1237:   }
        -: 1238:   
    #####: 1239:   return 0;
        -: 1240:}
        -: 1241:
        -: 1242:
    #####: 1243:int playSalvager(struct gameState *state, int currentPlayer, int handPos, int choice)
        -: 1244:{
        -: 1245:   //+1 buy
    #####: 1246:   state->numBuys++;
    #####: 1247:   if (choice)
        -: 1248:   {
        -: 1249:	   //gain coins equal to trashed card
    #####: 1250:	   state->coins = state->coins + getCost(handCard(choice, state));
        -: 1251:	   //trash the card
    #####: 1252:	   discardCard(choice, currentPlayer, state, 1);
        -: 1253:   }
    #####: 1254:   discardCard(handPos, currentPlayer, state, 0);
    #####: 1255:   return 0;
        -: 1256:}
        -: 1257:
        -: 1258:
       24: 1259:int playSmithy(struct gameState *state, int currentPlayer, int handPos)
        -: 1260:{
        -: 1261:   //+3 cards
        -: 1262:   int i;
      120: 1263:   for (i = 0; i <= 3; i++)
        -: 1264:   {
       96: 1265:      drawCard(currentPlayer, state);
        -: 1266:   }
        -: 1267:
        -: 1268:   //discard card from hand
       24: 1269:   discardCard(handPos, currentPlayer, state, 0);
       24: 1270:   return 0;
        -: 1271:}
        -: 1272:
        -: 1273:
        -: 1274:
        -: 1275:
        -: 1276:
        -: 1277:
       72: 1278:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1279:{
        -: 1280:	
        -: 1281:  //if card is not trashed, added to Played pile 
       72: 1282:  if (trashFlag < 1)
        -: 1283:    {
        -: 1284:      //add card to played pile
       72: 1285:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       72: 1286:      state->playedCardCount++;
        -: 1287:    }
        -: 1288:	
        -: 1289:  //set played card to -1
       72: 1290:  state->hand[currentPlayer][handPos] = -1;
        -: 1291:	
        -: 1292:  //remove card from player's hand
       72: 1293:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1294:    {
        -: 1295:      //reduce number of cards in hand
    #####: 1296:      state->handCount[currentPlayer]--;
        -: 1297:    }
       72: 1298:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1299:    {
        -: 1300:      //reduce number of cards in hand
    #####: 1301:      state->handCount[currentPlayer]--;
        -: 1302:    }
        -: 1303:  else 	
        -: 1304:    {
        -: 1305:      //replace discarded card with last card in hand
       72: 1306:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1307:      //set last card to -1
       72: 1308:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1309:      //reduce number of cards in hand
       72: 1310:      state->handCount[currentPlayer]--;
        -: 1311:    }
        -: 1312:	
       72: 1313:  return 0;
        -: 1314:}
        -: 1315:
      324: 1316:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1317:{
        -: 1318:  //Note: supplyPos is enum of choosen card
        -: 1319:	
        -: 1320:  //check if supply pile is empty (0) or card is not used in game (-1)
      324: 1321:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1322:    {
      162: 1323:      return -1;
        -: 1324:    }
        -: 1325:	
        -: 1326:  //added card for [whoseTurn] current player:
        -: 1327:  // toFlag = 0 : add to discard
        -: 1328:  // toFlag = 1 : add to deck
        -: 1329:  // toFlag = 2 : add to hand
        -: 1330:
      162: 1331:  if (toFlag == 1)
        -: 1332:    {
       81: 1333:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       81: 1334:      state->deckCount[player]++;
        -: 1335:    }
       81: 1336:  else if (toFlag == 2)
        -: 1337:    {
    #####: 1338:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1339:      state->handCount[player]++;
        -: 1340:    }
        -: 1341:  else
        -: 1342:    {
       81: 1343:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       81: 1344:      state->discardCount[player]++;
        -: 1345:    }
        -: 1346:	
        -: 1347:  //decrease number in supply pile
      162: 1348:  state->supplyCount[supplyPos]--;
        -: 1349:	 
      162: 1350:  return 0;
        -: 1351:}
        -: 1352:
       66: 1353:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1354:{
        -: 1355:  int i;
        -: 1356:	
        -: 1357:  //reset coin count
       66: 1358:  state->coins = 0;
        -: 1359:
        -: 1360:  //add coins for each Treasure card in player's hand
      396: 1361:  for (i = 0; i < state->handCount[player]; i++)
        -: 1362:    {
      330: 1363:      if (state->hand[player][i] == copper)
        -: 1364:	{
      132: 1365:	  state->coins += 1;
        -: 1366:	}
      198: 1367:      else if (state->hand[player][i] == silver)
        -: 1368:	{
    #####: 1369:	  state->coins += 2;
        -: 1370:	}
      198: 1371:      else if (state->hand[player][i] == gold)
        -: 1372:	{
    #####: 1373:	  state->coins += 3;
        -: 1374:	}	
        -: 1375:    }	
        -: 1376:
        -: 1377:  //add bonus
       66: 1378:  state->coins += bonus;
        -: 1379:
       66: 1380:  return 0;
        -: 1381:}
        -: 1382:
        -: 1383:
        -: 1384://end of dominion.c
        -: 1385:
