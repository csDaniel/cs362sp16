        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:17
        -:    0:Programs:13
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      336:    8:int playMySmithy(int i, int currentPlayer, struct gameState *state, int handPos) {
        -:    9:
        -:   10:
        -:   11:      //+3 Cards
     1680:   12:      for (i = 0; i <= 3; i++)
        -:   13:	{
     1344:   14:	  drawCard(currentPlayer, state);
        -:   15:	}
        -:   16:  
        -:   17:  
        -:   18:      //discard card from hand
      336:   19:      discardCard(handPos, currentPlayer, state, 0);
      336:   20:      return 0;
        -:   21:
        -:   22:
        -:   23:}
        -:   24:
      445:   25:int playMyAdventurer(int z, int cardDrawn, int drawntreasure, int temphand[], int currentPlayer, struct gameState *state, int handPos ) {
     1511:   26:      while(drawntreasure<2){
      621:   27:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:   28:	  shuffle(currentPlayer, state);
        -:   29:	}
      621:   30:	drawCard(currentPlayer, state);
      621:   31:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
      621:   32:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
      445:   33:	  drawntreasure+=2;
        -:   34:	else{
      176:   35:	  temphand[z]=cardDrawn;
      176:   36:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      176:   37:	  z++;
        -:   38:	}
        -:   39:      }
     1066:   40:      while(z-1>=0){
      176:   41:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
      176:   42:	z=z-1;
        -:   43:      }
      445:   44:      return 0;
        -:   45:
        -:   46:}
        -:   47:
        4:   48:int playMyGardens(){
        -:   49:
        4:   50:  return -1;
        -:   51:    
        -:   52:}
        -:   53:    
    #####:   54:int playMySteward(int choice1, int choice2, int choice3, int currentPlayer, struct gameState *state, int handPos) {
    #####:   55:      if (choice1 == 1)
        -:   56:	{
        -:   57:	  //+2 cards
    #####:   58:	  drawCard(currentPlayer, state);
    #####:   59:	  drawCard(currentPlayer, state);
        -:   60:	}
    #####:   61:      else if (choice1 == 2)
        -:   62:	{
        -:   63:	  //+2 coins
    #####:   64:	  state->coins = 2;
        -:   65:	}
        -:   66:      else
        -:   67:	{
        -:   68:	  //trash 2 cards in hand
    #####:   69:	  discardCard(choice2, currentPlayer, state, 1);
    #####:   70:	  discardCard(choice3, currentPlayer, state, 1);
        -:   71:	}
        -:   72:			
        -:   73:      //discard card from hand
    #####:   74:      discardCard(handPos, currentPlayer, state, 0);
    #####:   75:      return 0;
        -:   76:}    
        -:   77:    
        -:   78:    
    #####:   79:int playMyVillage(int currentPlayer, struct gameState *state, int handPos){
        -:   80:    
        -:   81:    
        -:   82:      //+1 Card
    #####:   83:      drawCard(currentPlayer, state);
    #####:   84:      drawCard(currentPlayer, state);
        -:   85:			
        -:   86:      //+2 Actions
    #####:   87:      state->numActions = state->numActions + 1;
        -:   88:			
        -:   89:      //discard played card from hand
    #####:   90:      discardCard(handPos, currentPlayer, state, 0);
    #####:   91:      return 0;
        -:   92:
        -:   93:}
        -:   94:
        -:   95:
    15173:   96:int compare(const void* a, const void* b) {
    15173:   97:  if (*(int*)a > *(int*)b)
      612:   98:    return 1;
    14561:   99:  if (*(int*)a < *(int*)b)
     3764:  100:    return -1;
    10797:  101:  return 0;
        -:  102:}
        -:  103:
    #####:  104:struct gameState* newGame() {
    #####:  105:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  106:  return g;
        -:  107:}
        -:  108:
    #####:  109:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  110:		  int k8, int k9, int k10) {
    #####:  111:  int* k = malloc(10 * sizeof(int));
    #####:  112:  k[0] = k1;
    #####:  113:  k[1] = k2;
    #####:  114:  k[2] = k3;
    #####:  115:  k[3] = k4;
    #####:  116:  k[4] = k5;
    #####:  117:  k[5] = k6;
    #####:  118:  k[6] = k7;
    #####:  119:  k[7] = k8;
    #####:  120:  k[8] = k9;
    #####:  121:  k[9] = k10;
    #####:  122:  return k;
        -:  123:}
        -:  124:
      374:  125:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  126:		   struct gameState *state) {
        -:  127:
        -:  128:  int i;
        -:  129:  int j;
        -:  130:  int it;			
        -:  131:  //set up random number generator
      374:  132:  SelectStream(1);
      374:  133:  PutSeed((long)randomSeed);
        -:  134:  
        -:  135:  //check number of players
      374:  136:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  137:    {
      103:  138:      return -1;
        -:  139:    }
        -:  140:
        -:  141:  //set number of players
      271:  142:  state->numPlayers = numPlayers;
        -:  143:
        -:  144:  //check selected kingdom cards are different
     2981:  145:  for (i = 0; i < 10; i++)
        -:  146:    {
    29810:  147:      for (j = 0; j < 10; j++)
        -:  148:        {
    27100:  149:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  150:	    {
    #####:  151:	      return -1;
        -:  152:	    }
        -:  153:        }
        -:  154:    }
        -:  155:
        -:  156:
        -:  157:  //initialize supply
        -:  158:  ///////////////////////////////
        -:  159:
        -:  160:  //set number of Curse cards
      271:  161:  if (numPlayers == 2)
        -:  162:    {
       96:  163:      state->supplyCount[curse] = 10;
        -:  164:    }
      175:  165:  else if (numPlayers == 3)
        -:  166:    {
       82:  167:      state->supplyCount[curse] = 20;
        -:  168:    }
        -:  169:  else
        -:  170:    {
       93:  171:      state->supplyCount[curse] = 30;
        -:  172:    }
        -:  173:
        -:  174:  //set number of Victory cards
      271:  175:  if (numPlayers == 2)
        -:  176:    {
       96:  177:      state->supplyCount[estate] = 8;
       96:  178:      state->supplyCount[duchy] = 8;
       96:  179:      state->supplyCount[province] = 8;
        -:  180:    }
        -:  181:  else
        -:  182:    {
      175:  183:      state->supplyCount[estate] = 12;
      175:  184:      state->supplyCount[duchy] = 12;
      175:  185:      state->supplyCount[province] = 12;
        -:  186:    }
        -:  187:
        -:  188:  //set number of Treasure cards
      271:  189:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      271:  190:  state->supplyCount[silver] = 40;
      271:  191:  state->supplyCount[gold] = 30;
        -:  192:
        -:  193:  //set number of Kingdom cards
     5691:  194:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  195:    {
    44715:  196:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  197:	{
    42005:  198:	  if (kingdomCards[j] == i)
        -:  199:	    {
        -:  200:	      //check if card is a 'Victory' Kingdom card
     2710:  201:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  202:		{
     1084:  203:		  if (numPlayers == 2){ 
      192:  204:		    state->supplyCount[i] = 8; 
        -:  205:		  }
      350:  206:		  else{ state->supplyCount[i] = 12; }
        -:  207:		}
        -:  208:	      else
        -:  209:		{
     2168:  210:		  state->supplyCount[i] = 10;
        -:  211:		}
     2710:  212:	      break;
        -:  213:	    }
        -:  214:	  else    //card is not in the set choosen for the game
        -:  215:	    {
    39295:  216:	      state->supplyCount[i] = -1;
        -:  217:	    }
        -:  218:	}
        -:  219:
        -:  220:    }
        -:  221:
        -:  222:  ////////////////////////
        -:  223:  //supply intilization complete
        -:  224:
        -:  225:  //set player decks
     1081:  226:  for (i = 0; i < numPlayers; i++)
        -:  227:    {
      810:  228:      state->deckCount[i] = 0;
     3240:  229:      for (j = 0; j < 3; j++)
        -:  230:	{
     2430:  231:	  state->deck[i][j] = estate;
     2430:  232:	  state->deckCount[i]++;
        -:  233:	}
     6480:  234:      for (j = 3; j < 10; j++)
        -:  235:	{
     5670:  236:	  state->deck[i][j] = copper;
     5670:  237:	  state->deckCount[i]++;		
        -:  238:	}
        -:  239:    }
        -:  240:
        -:  241:  //shuffle player decks
     1081:  242:  for (i = 0; i < numPlayers; i++)
        -:  243:    {
      810:  244:      if ( shuffle(i, state) < 0 )
        -:  245:	{
    #####:  246:	  return -1;
        -:  247:	}
        -:  248:    }
        -:  249:
        -:  250:  //draw player hands
     1081:  251:  for (i = 0; i < numPlayers; i++)
        -:  252:    {  
        -:  253:      //initialize hand size to zero
      810:  254:      state->handCount[i] = 0;
      810:  255:      state->discardCount[i] = 0;
        -:  256:      //draw 5 cards
        -:  257:      // for (j = 0; j < 5; j++)
        -:  258:      //	{
        -:  259:      //	  drawCard(i, state);
        -:  260:      //	}
        -:  261:    }
        -:  262:  
        -:  263:  //set embargo tokens to 0 for all supply piles
     7588:  264:  for (i = 0; i <= treasure_map; i++)
        -:  265:    {
     7317:  266:      state->embargoTokens[i] = 0;
        -:  267:    }
        -:  268:
        -:  269:  //initialize first player's turn
      271:  270:  state->outpostPlayed = 0;
      271:  271:  state->phase = 0;
      271:  272:  state->numActions = 1;
      271:  273:  state->numBuys = 1;
      271:  274:  state->playedCardCount = 0;
      271:  275:  state->whoseTurn = 0;
      271:  276:  state->handCount[state->whoseTurn] = 0;
        -:  277:  //int it; move to top
        -:  278:
        -:  279:  //Moved draw cards to here, only drawing at the start of a turn
     1626:  280:  for (it = 0; it < 5; it++){
     1355:  281:    drawCard(state->whoseTurn, state);
        -:  282:  }
        -:  283:
      271:  284:  updateCoins(state->whoseTurn, state, 0);
        -:  285:
      271:  286:  return 0;
        -:  287:}
        -:  288:
     1077:  289:int shuffle(int player, struct gameState *state) {
        -:  290: 
        -:  291:
        -:  292:  int newDeck[MAX_DECK];
     1077:  293:  int newDeckPos = 0;
        -:  294:  int card;
        -:  295:  int i;
        -:  296:
     1077:  297:  if (state->deckCount[player] < 1)
    #####:  298:    return -1;
     1077:  299:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  300:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  301:
    12151:  302:  while (state->deckCount[player] > 0) {
     9997:  303:    card = floor(Random() * state->deckCount[player]);
     9997:  304:    newDeck[newDeckPos] = state->deck[player][card];
     9997:  305:    newDeckPos++;
    31200:  306:    for (i = card; i < state->deckCount[player]-1; i++) {
    21203:  307:      state->deck[player][i] = state->deck[player][i+1];
        -:  308:    }
     9997:  309:    state->deckCount[player]--;
        -:  310:  }
    11074:  311:  for (i = 0; i < newDeckPos; i++) {
     9997:  312:    state->deck[player][i] = newDeck[i];
     9997:  313:    state->deckCount[player]++;
        -:  314:  }
        -:  315:
     1077:  316:  return 0;
        -:  317:}
        -:  318:
    #####:  319:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  320:{	
        -:  321:  int card;
    #####:  322:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  323:
        -:  324:  //check if it is the right phase
    #####:  325:  if (state->phase != 0)
        -:  326:    {
    #####:  327:      return -1;
        -:  328:    }
        -:  329:	
        -:  330:  //check if player has enough actions
    #####:  331:  if ( state->numActions < 1 )
        -:  332:    {
    #####:  333:      return -1;
        -:  334:    }
        -:  335:	
        -:  336:  //get card played
    #####:  337:  card = handCard(handPos, state);
        -:  338:	
        -:  339:  //check if selected card is an action
    #####:  340:  if ( card < adventurer || card > treasure_map )
        -:  341:    {
    #####:  342:      return -1;
        -:  343:    }
        -:  344:	
        -:  345:  //play card
    #####:  346:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  347:    {
    #####:  348:      return -1;
        -:  349:    }
        -:  350:	
        -:  351:  //reduce number of actions
    #####:  352:  state->numActions--;
        -:  353:
        -:  354:  //update coins (Treasure cards may be added with card draws)
    #####:  355:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  356:	
    #####:  357:  return 0;
        -:  358:}
        -:  359:
    #####:  360:int buyCard(int supplyPos, struct gameState *state) {
        -:  361:  int who;
        -:  362:  if (DEBUG){
        -:  363:    printf("Entering buyCard...\n");
        -:  364:  }
        -:  365:
        -:  366:  // I don't know what to do about the phase thing.
        -:  367:
    #####:  368:  who = state->whoseTurn;
        -:  369:
    #####:  370:  if (state->numBuys < 1){
        -:  371:    if (DEBUG)
        -:  372:      printf("You do not have any buys left\n");
    #####:  373:    return -1;
    #####:  374:  } else if (supplyCount(supplyPos, state) <1){
        -:  375:    if (DEBUG)
        -:  376:      printf("There are not any of that type of card left\n");
    #####:  377:    return -1;
    #####:  378:  } else if (state->coins < getCost(supplyPos)){
        -:  379:    if (DEBUG) 
        -:  380:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  381:    return -1;
        -:  382:  } else {
    #####:  383:    state->phase=1;
        -:  384:    //state->supplyCount[supplyPos]--;
    #####:  385:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  386:  
    #####:  387:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  388:    state->numBuys--;
        -:  389:    if (DEBUG)
        -:  390:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  391:  }
        -:  392:
        -:  393:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  394:  //state->discardCount[who]++;
        -:  395:    
    #####:  396:  return 0;
        -:  397:}
        -:  398:
      100:  399:int numHandCards(struct gameState *state) {
      100:  400:  return state->handCount[ whoseTurn(state) ];
        -:  401:}
        -:  402:
    #####:  403:int handCard(int handPos, struct gameState *state) {
    #####:  404:  int currentPlayer = whoseTurn(state);
    #####:  405:  return state->hand[currentPlayer][handPos];
        -:  406:}
        -:  407:
       21:  408:int supplyCount(int card, struct gameState *state) {
       21:  409:  return state->supplyCount[card];
        -:  410:}
        -:  411:
    #####:  412:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  413:  int i;
    #####:  414:  int count = 0;
        -:  415:
    #####:  416:  for (i = 0; i < state->deckCount[player]; i++)
        -:  417:    {
    #####:  418:      if (state->deck[player][i] == card) count++;
        -:  419:    }
        -:  420:
    #####:  421:  for (i = 0; i < state->handCount[player]; i++)
        -:  422:    {
    #####:  423:      if (state->hand[player][i] == card) count++;
        -:  424:    }
        -:  425:
    #####:  426:  for (i = 0; i < state->discardCount[player]; i++)
        -:  427:    {
    #####:  428:      if (state->discard[player][i] == card) count++;
        -:  429:    }
        -:  430:
    #####:  431:  return count;
        -:  432:}
        -:  433:
     1770:  434:int whoseTurn(struct gameState *state) {
     1770:  435:  return state->whoseTurn;
        -:  436:}
        -:  437:
      781:  438:int endTurn(struct gameState *state) {
        -:  439:  int k;
        -:  440:  int i;
      781:  441:  int currentPlayer = whoseTurn(state);
        -:  442:  
        -:  443:  //Discard hand
     6139:  444:  for (i = 0; i < state->handCount[currentPlayer]; i++){
     5358:  445:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
     5358:  446:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  447:  }
      781:  448:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  449:    
        -:  450:  //Code for determining the player
      781:  451:  if (currentPlayer < (state->numPlayers - 1)){ 
      518:  452:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  453:  }
        -:  454:  else{
      263:  455:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  456:  }
        -:  457:
      781:  458:  state->outpostPlayed = 0;
      781:  459:  state->phase = 0;
      781:  460:  state->numActions = 1;
      781:  461:  state->coins = 0;
      781:  462:  state->numBuys = 1;
      781:  463:  state->playedCardCount = 0;
      781:  464:  state->handCount[state->whoseTurn] = 0;
        -:  465:
        -:  466:  //int k; move to top
        -:  467:  //Next player draws hand
     4686:  468:  for (k = 0; k < 5; k++){
     3905:  469:    drawCard(state->whoseTurn, state);//Draw a card
        -:  470:  }
        -:  471:
        -:  472:  //Update money
      781:  473:  updateCoins(state->whoseTurn, state , 0);
        -:  474:
      781:  475:  return 0;
        -:  476:}
        -:  477:
    #####:  478:int isGameOver(struct gameState *state) {
        -:  479:  int i;
        -:  480:  int j;
        -:  481:	
        -:  482:  //if stack of Province cards is empty, the game ends
    #####:  483:  if (state->supplyCount[province] == 0)
        -:  484:    {
    #####:  485:      return 1;
        -:  486:    }
        -:  487:
        -:  488:  //if three supply pile are at 0, the game ends
    #####:  489:  j = 0;
    #####:  490:  for (i = 0; i < 25; i++)
        -:  491:    {
    #####:  492:      if (state->supplyCount[i] == 0)
        -:  493:	{
    #####:  494:	  j++;
        -:  495:	}
        -:  496:    }
    #####:  497:  if ( j >= 3)
        -:  498:    {
    #####:  499:      return 1;
        -:  500:    }
        -:  501:
    #####:  502:  return 0;
        -:  503:}
        -:  504:
    #####:  505:int scoreFor (int player, struct gameState *state) {
        -:  506:
        -:  507:  int i;
    #####:  508:  int score = 0;
        -:  509:  //score from hand
    #####:  510:  for (i = 0; i < state->handCount[player]; i++)
        -:  511:    {
    #####:  512:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  513:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  514:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  515:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  516:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  517:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  518:    }
        -:  519:
        -:  520:  //score from discard
    #####:  521:  for (i = 0; i < state->discardCount[player]; i++)
        -:  522:    {
    #####:  523:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  524:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  525:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  526:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  527:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  528:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  529:    }
        -:  530:
        -:  531:  //score from deck
    #####:  532:  for (i = 0; i < state->discardCount[player]; i++)
        -:  533:    {
    #####:  534:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  535:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  536:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  537:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  538:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  539:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  540:    }
        -:  541:
    #####:  542:  return score;
        -:  543:}
        -:  544:
    #####:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  546:  int i;	
        -:  547:  int j;
        -:  548:  int highScore;
        -:  549:  int currentPlayer;
        -:  550:
        -:  551:  //get score for each player
    #####:  552:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  553:    {
        -:  554:      //set unused player scores to -9999
    #####:  555:      if (i >= state->numPlayers)
        -:  556:	{
    #####:  557:	  players[i] = -9999;
        -:  558:	}
        -:  559:      else
        -:  560:	{
    #####:  561:	  players[i] = scoreFor (i, state);
        -:  562:	}
        -:  563:    }
        -:  564:
        -:  565:  //find highest score
    #####:  566:  j = 0;
    #####:  567:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  568:    {
    #####:  569:      if (players[i] > players[j])
        -:  570:	{
    #####:  571:	  j = i;
        -:  572:	}
        -:  573:    }
    #####:  574:  highScore = players[j];
        -:  575:
        -:  576:  //add 1 to players who had less turns
    #####:  577:  currentPlayer = whoseTurn(state);
    #####:  578:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  579:    {
    #####:  580:      if ( players[i] == highScore && i > currentPlayer )
        -:  581:	{
    #####:  582:	  players[i]++;
        -:  583:	}
        -:  584:    }
        -:  585:
        -:  586:  //find new highest score
    #####:  587:  j = 0;
    #####:  588:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  589:    {
    #####:  590:      if ( players[i] > players[j] )
        -:  591:	{
    #####:  592:	  j = i;
        -:  593:	}
        -:  594:    }
    #####:  595:  highScore = players[j];
        -:  596:
        -:  597:  //set winners in array to 1 and rest to 0
    #####:  598:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  599:    {
    #####:  600:      if ( players[i] == highScore )
        -:  601:	{
    #####:  602:	  players[i] = 1;
        -:  603:	}
        -:  604:      else
        -:  605:	{
    #####:  606:	  players[i] = 0;
        -:  607:	}
        -:  608:    }
        -:  609:
    #####:  610:  return 0;
        -:  611:}
        -:  612:
     7229:  613:int drawCard(int player, struct gameState *state)
        -:  614:{	int count;
        -:  615:  int deckCounter;
     7229:  616:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  617:    
        -:  618:    //Step 1 Shuffle the discard pile back into a deck
        -:  619:    int i;
        -:  620:    //Move discard to deck
     2125:  621:    for (i = 0; i < state->discardCount[player];i++){
     1862:  622:      state->deck[player][i] = state->discard[player][i];
     1862:  623:      state->discard[player][i] = -1;
        -:  624:    }
        -:  625:
      263:  626:    state->deckCount[player] = state->discardCount[player];
      263:  627:    state->discardCount[player] = 0;//Reset discard
        -:  628:
        -:  629:    //Shufffle the deck
      263:  630:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  631:   
        -:  632:    if (DEBUG){//Debug statements
        -:  633:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  634:    }
        -:  635:    
      263:  636:    state->discardCount[player] = 0;
        -:  637:
        -:  638:    //Step 2 Draw Card
      263:  639:    count = state->handCount[player];//Get current player's hand count
        -:  640:    
        -:  641:    if (DEBUG){//Debug statements
        -:  642:      printf("Current hand count: %d\n", count);
        -:  643:    }
        -:  644:    
      263:  645:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  646:
      263:  647:    if (deckCounter == 0)
    #####:  648:      return -1;
        -:  649:
      263:  650:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      263:  651:    state->deckCount[player]--;
      263:  652:    state->handCount[player]++;//Increment hand count
        -:  653:  }
        -:  654:
        -:  655:  else{
     6966:  656:    int count = state->handCount[player];//Get current hand count for player
        -:  657:    int deckCounter;
        -:  658:    if (DEBUG){//Debug statements
        -:  659:      printf("Current hand count: %d\n", count);
        -:  660:    }
        -:  661:
     6966:  662:    deckCounter = state->deckCount[player];//Create holder for the deck count
     6966:  663:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     6966:  664:    state->deckCount[player]--;
     6966:  665:    state->handCount[player]++;//Increment hand count
        -:  666:  }
        -:  667:
     7229:  668:  return 0;
        -:  669:}
        -:  670:
    #####:  671:int getCost(int cardNumber)
        -:  672:{
    #####:  673:  switch( cardNumber ) 
        -:  674:    {
        -:  675:    case curse:
    #####:  676:      return 0;
        -:  677:    case estate:
    #####:  678:      return 2;
        -:  679:    case duchy:
    #####:  680:      return 5;
        -:  681:    case province:
    #####:  682:      return 8;
        -:  683:    case copper:
    #####:  684:      return 0;
        -:  685:    case silver:
    #####:  686:      return 3;
        -:  687:    case gold:
    #####:  688:      return 6;
        -:  689:    case adventurer:
    #####:  690:      return 6;
        -:  691:    case council_room:
    #####:  692:      return 5;
        -:  693:    case feast:
    #####:  694:      return 4;
        -:  695:    case gardens:
    #####:  696:      return 4;
        -:  697:    case mine:
    #####:  698:      return 5;
        -:  699:    case remodel:
    #####:  700:      return 4;
        -:  701:    case smithy:
    #####:  702:      return 4;
        -:  703:    case village:
    #####:  704:      return 3;
        -:  705:    case baron:
    #####:  706:      return 4;
        -:  707:    case great_hall:
    #####:  708:      return 3;
        -:  709:    case minion:
    #####:  710:      return 5;
        -:  711:    case steward:
    #####:  712:      return 3;
        -:  713:    case tribute:
    #####:  714:      return 5;
        -:  715:    case ambassador:
    #####:  716:      return 3;
        -:  717:    case cutpurse:
    #####:  718:      return 4;
        -:  719:    case embargo: 
    #####:  720:      return 2;
        -:  721:    case outpost:
    #####:  722:      return 5;
        -:  723:    case salvager:
    #####:  724:      return 4;
        -:  725:    case sea_hag:
    #####:  726:      return 4;
        -:  727:    case treasure_map:
    #####:  728:      return 4;
        -:  729:    }
        -:  730:	
    #####:  731:  return -1;
        -:  732:}
        -:  733:
      789:  734:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  735:{
      789:  736:  int i =0;
        -:  737:  int j;
        -:  738:  int k;
        -:  739:  int x;
        -:  740:  int index;
      789:  741:  int currentPlayer = whoseTurn(state);
      789:  742:  int nextPlayer = currentPlayer + 1;
        -:  743:
      789:  744:  int tributeRevealedCards[2] = {-1, -1};
        -:  745:  int temphand[MAX_HAND];// moved above the if statement
      789:  746:  int drawntreasure=0;
      789:  747:  int cardDrawn = 0;
      789:  748:  int z = 0;// this is the counter for the temp hand
      789:  749:  if (nextPlayer > (state->numPlayers - 1)){
      263:  750:    nextPlayer = 0;
        -:  751:  }
        -:  752:  
        -:  753:	
        -:  754:  //uses switch to select card and perform actions
      789:  755:  switch( card ) 
        -:  756:    {
        -:  757:    case adventurer:
        -:  758:    
      445:  759:        return playMyAdventurer(z, cardDrawn, drawntreasure, temphand, currentPlayer, state, handPos );
        -:  760:        
        -:  761:    case council_room:
        -:  762:      //+4 Cards
    #####:  763:      for (i = 0; i < 4; i++)
        -:  764:	{
    #####:  765:	  drawCard(currentPlayer, state);
        -:  766:	}
        -:  767:			
        -:  768:      //+1 Buy
    #####:  769:      state->numBuys++;
        -:  770:			
        -:  771:      //Each other player draws a card
    #####:  772:      for (i = 0; i < state->numPlayers; i++)
        -:  773:	{
    #####:  774:	  if ( i != currentPlayer )
        -:  775:	    {
    #####:  776:	      drawCard(i, state);
        -:  777:	    }
        -:  778:	}
        -:  779:			
        -:  780:      //put played card in played card pile
    #####:  781:      discardCard(handPos, currentPlayer, state, 0);
        -:  782:			
    #####:  783:      return 0;
        -:  784:			
        -:  785:    case feast:
        -:  786:      //gain card with cost up to 5
        -:  787:      //Backup hand
    #####:  788:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  789:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  790:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  791:      }
        -:  792:      //Backup hand
        -:  793:
        -:  794:      //Update Coins for Buy
    #####:  795:      updateCoins(currentPlayer, state, 5);
    #####:  796:      x = 1;//Condition to loop on
    #####:  797:      while( x == 1) {//Buy one card
    #####:  798:	if (supplyCount(choice1, state) <= 0){
        -:  799:	  if (DEBUG)
        -:  800:	    printf("None of that card left, sorry!\n");
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  804:	  }
        -:  805:	}
    #####:  806:	else if (state->coins < getCost(choice1)){
    #####:  807:	  printf("That card is too expensive!\n");
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  811:	  }
        -:  812:	}
        -:  813:	else{
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:	  }
        -:  818:
    #####:  819:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  820:	  x = 0;//No more buying cards
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  824:	  }
        -:  825:
        -:  826:	}
        -:  827:      }     
        -:  828:
        -:  829:      //Reset Hand
    #####:  830:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  831:	state->hand[currentPlayer][i] = temphand[i];
    #####:  832:	temphand[i] = -1;
        -:  833:      }
        -:  834:      //Reset Hand
        -:  835:      			
    #####:  836:      return 0;
        -:  837:			
        -:  838:    case gardens:
        4:  839:        return playMyGardens();
        -:  840: 
        -:  841:			
        -:  842:    case mine:
    #####:  843:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  844:
    #####:  845:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  846:	{
    #####:  847:	  return -1;
        -:  848:	}
        -:  849:		
    #####:  850:      if (choice2 > treasure_map || choice2 < curse)
        -:  851:	{
    #####:  852:	  return -1;
        -:  853:	}
        -:  854:
    #####:  855:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  856:	{
    #####:  857:	  return -1;
        -:  858:	}
        -:  859:
    #####:  860:      gainCard(choice2, state, 2, currentPlayer);
        -:  861:
        -:  862:      //discard card from hand
    #####:  863:      discardCard(handPos, currentPlayer, state, 0);
        -:  864:
        -:  865:      //discard trashed card
    #####:  866:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  867:	{
    #####:  868:	  if (state->hand[currentPlayer][i] == j)
        -:  869:	    {
    #####:  870:	      discardCard(i, currentPlayer, state, 0);			
    #####:  871:	      break;
        -:  872:	    }
        -:  873:	}
        -:  874:			
    #####:  875:      return 0;
        -:  876:			
        -:  877:    case remodel:
    #####:  878:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  879:
    #####:  880:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  881:	{
    #####:  882:	  return -1;
        -:  883:	}
        -:  884:
    #####:  885:      gainCard(choice2, state, 0, currentPlayer);
        -:  886:
        -:  887:      //discard card from hand
    #####:  888:      discardCard(handPos, currentPlayer, state, 0);
        -:  889:
        -:  890:      //discard trashed card
    #####:  891:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  892:	{
    #####:  893:	  if (state->hand[currentPlayer][i] == j)
        -:  894:	    {
    #####:  895:	      discardCard(i, currentPlayer, state, 0);			
    #####:  896:	      break;
        -:  897:	    }
        -:  898:	}
        -:  899:
        -:  900:
    #####:  901:      return 0;
        -:  902:		
        -:  903:    case smithy:
        -:  904:      
      336:  905:      return playMySmithy(i, currentPlayer, state, handPos);
        -:  906:
        -:  907:		
        -:  908:    case village:
        -:  909:    
    #####:  910:      return playMyVillage(currentPlayer, state, handPos);
        -:  911:    
        -:  912:		
        -:  913:    case baron:
    #####:  914:      state->numBuys++;//Increase buys by 1!
    #####:  915:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  916:	int p = 0;//Iterator for hand!
    #####:  917:	int card_not_discarded = 1;//Flag for discard set!
    #####:  918:	while(card_not_discarded){
    #####:  919:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  920:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  921:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  922:	    state->discardCount[currentPlayer]++;
    #####:  923:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  924:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  925:	    }
    #####:  926:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  927:	    state->handCount[currentPlayer]--;
    #####:  928:	    card_not_discarded = 0;//Exit the loop
        -:  929:	  }
    #####:  930:	  else if (p > state->handCount[currentPlayer]){
        -:  931:	    if(DEBUG) {
        -:  932:	      printf("No estate cards in your hand, invalid choice\n");
        -:  933:	      printf("Must gain an estate if there are any\n");
        -:  934:	    }
    #####:  935:	    if (supplyCount(estate, state) > 0){
    #####:  936:	      gainCard(estate, state, 0, currentPlayer);
    #####:  937:	      state->supplyCount[estate]--;//Decrement estates
    #####:  938:	      if (supplyCount(estate, state) == 0){
    #####:  939:		isGameOver(state);
        -:  940:	      }
        -:  941:	    }
    #####:  942:	    card_not_discarded = 0;//Exit the loop
        -:  943:	  }
        -:  944:			    
        -:  945:	  else{
    #####:  946:	    p++;//Next card
        -:  947:	  }
        -:  948:	}
        -:  949:      }
        -:  950:			    
        -:  951:      else{
    #####:  952:	if (supplyCount(estate, state) > 0){
    #####:  953:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  954:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  955:	  if (supplyCount(estate, state) == 0){
    #####:  956:	    isGameOver(state);
        -:  957:	  }
        -:  958:	}
        -:  959:      }
        -:  960:	    
        -:  961:      
    #####:  962:      return 0;
        -:  963:		
        -:  964:    case great_hall:
        -:  965:      //+1 Card
        4:  966:      drawCard(currentPlayer, state);
        -:  967:			
        -:  968:      //+1 Actions
        4:  969:      state->numActions++;
        -:  970:			
        -:  971:      //discard card from hand
        4:  972:      discardCard(handPos, currentPlayer, state, 0);
        4:  973:      return 0;
        -:  974:		
        -:  975:    case minion:
        -:  976:      //+1 action
    #####:  977:      state->numActions++;
        -:  978:			
        -:  979:      //discard card from hand
    #####:  980:      discardCard(handPos, currentPlayer, state, 0);
        -:  981:			
    #####:  982:      if (choice1)		//+2 coins
        -:  983:	{
    #####:  984:	  state->coins = state->coins + 2;
        -:  985:	}
        -:  986:			
    #####:  987:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  988:	{
        -:  989:	  //discard hand
    #####:  990:	  while(numHandCards(state) > 0)
        -:  991:	    {
    #####:  992:	      discardCard(handPos, currentPlayer, state, 0);
        -:  993:	    }
        -:  994:				
        -:  995:	  //draw 4
    #####:  996:	  for (i = 0; i < 4; i++)
        -:  997:	    {
    #####:  998:	      drawCard(currentPlayer, state);
        -:  999:	    }
        -: 1000:				
        -: 1001:	  //other players discard hand and redraw if hand size > 4
    #####: 1002:	  for (i = 0; i < state->numPlayers; i++)
        -: 1003:	    {
    #####: 1004:	      if (i != currentPlayer)
        -: 1005:		{
    #####: 1006:		  if ( state->handCount[i] > 4 )
        -: 1007:		    {
        -: 1008:		      //discard hand
    #####: 1009:		      while( state->handCount[i] > 0 )
        -: 1010:			{
    #####: 1011:			  discardCard(handPos, i, state, 0);
        -: 1012:			}
        -: 1013:							
        -: 1014:		      //draw 4
    #####: 1015:		      for (j = 0; j < 4; j++)
        -: 1016:			{
    #####: 1017:			  drawCard(i, state);
        -: 1018:			}
        -: 1019:		    }
        -: 1020:		}
        -: 1021:	    }
        -: 1022:				
        -: 1023:	}
    #####: 1024:      return 0;
        -: 1025:		
        -: 1026:    case steward:
        -: 1027:    
    #####: 1028:        return playMySteward(choice1, choice2, choice3, currentPlayer, state, handPos);
        -: 1029:
        -: 1030:		
        -: 1031:    case tribute:
    #####: 1032:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1033:	if (state->deckCount[nextPlayer] > 0){
    #####: 1034:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1035:	  state->deckCount[nextPlayer]--;
        -: 1036:	}
    #####: 1037:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1038:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1039:	  state->discardCount[nextPlayer]--;
        -: 1040:	}
        -: 1041:	else{
        -: 1042:	  //No Card to Reveal
        -: 1043:	  if (DEBUG){
        -: 1044:	    printf("No cards to reveal\n");
        -: 1045:	  }
        -: 1046:	}
        -: 1047:      }
        -: 1048:	    
        -: 1049:      else{
    #####: 1050:	if (state->deckCount[nextPlayer] == 0){
    #####: 1051:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1052:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1053:	    state->deckCount[nextPlayer]++;
    #####: 1054:	    state->discard[nextPlayer][i] = -1;
    #####: 1055:	    state->discardCount[nextPlayer]--;
        -: 1056:	  }
        -: 1057:			    
    #####: 1058:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1059:	} 
    #####: 1060:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1061:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1062:	state->deckCount[nextPlayer]--;
    #####: 1063:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1064:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1065:	state->deckCount[nextPlayer]--;
        -: 1066:      }    
        -: 1067:		       
    #####: 1068:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1069:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1070:	state->playedCardCount++;
    #####: 1071:	tributeRevealedCards[1] = -1;
        -: 1072:      }
        -: 1073:
    #####: 1074:      for (i = 0; i <= 2; i ++){
    #####: 1075:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1076:	  state->coins += 2;
        -: 1077:	}
        -: 1078:		    
    #####: 1079:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1080:	  drawCard(currentPlayer, state);
    #####: 1081:	  drawCard(currentPlayer, state);
        -: 1082:	}
        -: 1083:	else{//Action Card
    #####: 1084:	  state->numActions = state->numActions + 2;
        -: 1085:	}
        -: 1086:      }
        -: 1087:	    
    #####: 1088:      return 0;
        -: 1089:		
        -: 1090:    case ambassador:
    #####: 1091:      j = 0;		//used to check if player has enough cards to discard
        -: 1092:
    #####: 1093:      if (choice2 > 2 || choice2 < 0)
        -: 1094:	{
    #####: 1095:	  return -1;				
        -: 1096:	}
        -: 1097:
    #####: 1098:      if (choice1 == handPos)
        -: 1099:	{
    #####: 1100:	  return -1;
        -: 1101:	}
        -: 1102:
    #####: 1103:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1104:	{
    #####: 1105:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1106:	    {
    #####: 1107:	      j++;
        -: 1108:	    }
        -: 1109:	}
    #####: 1110:      if (j < choice2)
        -: 1111:	{
    #####: 1112:	  return -1;				
        -: 1113:	}
        -: 1114:
        -: 1115:      if (DEBUG) 
        -: 1116:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1117:
        -: 1118:      //increase supply count for choosen card by amount being discarded
    #####: 1119:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1120:			
        -: 1121:      //each other player gains a copy of revealed card
    #####: 1122:      for (i = 0; i < state->numPlayers; i++)
        -: 1123:	{
    #####: 1124:	  if (i != currentPlayer)
        -: 1125:	    {
    #####: 1126:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1127:	    }
        -: 1128:	}
        -: 1129:
        -: 1130:      //discard played card from hand
    #####: 1131:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1132:
        -: 1133:      //trash copies of cards returned to supply
    #####: 1134:      for (j = 0; j < choice2; j++)
        -: 1135:	{
    #####: 1136:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1137:	    {
    #####: 1138:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1139:		{
    #####: 1140:		  discardCard(i, currentPlayer, state, 1);
    #####: 1141:		  break;
        -: 1142:		}
        -: 1143:	    }
        -: 1144:	}			
        -: 1145:
    #####: 1146:      return 0;
        -: 1147:		
        -: 1148:    case cutpurse:
        -: 1149:
    #####: 1150:      updateCoins(currentPlayer, state, 2);
    #####: 1151:      for (i = 0; i < state->numPlayers; i++)
        -: 1152:	{
    #####: 1153:	  if (i != currentPlayer)
        -: 1154:	    {
    #####: 1155:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1156:		{
    #####: 1157:		  if (state->hand[i][j] == copper)
        -: 1158:		    {
    #####: 1159:		      discardCard(j, i, state, 0);
    #####: 1160:		      break;
        -: 1161:		    }
    #####: 1162:		  if (j == state->handCount[i])
        -: 1163:		    {
    #####: 1164:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1165:			{
        -: 1166:			  if (DEBUG)
        -: 1167:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1168:			}	
    #####: 1169:		      break;
        -: 1170:		    }		
        -: 1171:		}
        -: 1172:					
        -: 1173:	    }
        -: 1174:				
        -: 1175:	}				
        -: 1176:
        -: 1177:      //discard played card from hand
    #####: 1178:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1179:
    #####: 1180:      return 0;
        -: 1181:
        -: 1182:		
        -: 1183:    case embargo: 
        -: 1184:      //+2 Coins
    #####: 1185:      state->coins = state->coins + 2;
        -: 1186:			
        -: 1187:      //see if selected pile is in play
    #####: 1188:      if ( state->supplyCount[choice1] == -1 )
        -: 1189:	{
    #####: 1190:	  return -1;
        -: 1191:	}
        -: 1192:			
        -: 1193:      //add embargo token to selected supply pile
    #####: 1194:      state->embargoTokens[choice1]++;
        -: 1195:			
        -: 1196:      //trash card
    #####: 1197:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1198:      return 0;
        -: 1199:		
        -: 1200:    case outpost:
        -: 1201:      //set outpost flag
    #####: 1202:      state->outpostPlayed++;
        -: 1203:			
        -: 1204:      //discard card
    #####: 1205:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1206:      return 0;
        -: 1207:		
        -: 1208:    case salvager:
        -: 1209:      //+1 buy
    #####: 1210:      state->numBuys++;
        -: 1211:			
    #####: 1212:      if (choice1)
        -: 1213:	{
        -: 1214:	  //gain coins equal to trashed card
    #####: 1215:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1216:	  //trash card
    #####: 1217:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1218:	}
        -: 1219:			
        -: 1220:      //discard card
    #####: 1221:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1222:      return 0;
        -: 1223:		
        -: 1224:    case sea_hag:
    #####: 1225:      for (i = 0; i < state->numPlayers; i++){
    #####: 1226:	if (i != currentPlayer){
    #####: 1227:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1228:	  state->discardCount[i]++;
    #####: 1229:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1230:	}
        -: 1231:      }
    #####: 1232:      return 0;
        -: 1233:		
        -: 1234:    case treasure_map:
        -: 1235:      //search hand for another treasure_map
    #####: 1236:      index = -1;
    #####: 1237:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1238:	{
    #####: 1239:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1240:	    {
    #####: 1241:	      index = i;
    #####: 1242:	      break;
        -: 1243:	    }
        -: 1244:	}
    #####: 1245:      if (index > -1)
        -: 1246:	{
        -: 1247:	  //trash both treasure cards
    #####: 1248:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1249:	  discardCard(index, currentPlayer, state, 1);
        -: 1250:
        -: 1251:	  //gain 4 Gold cards
    #####: 1252:	  for (i = 0; i < 4; i++)
        -: 1253:	    {
    #####: 1254:	      gainCard(gold, state, 1, currentPlayer);
        -: 1255:	    }
        -: 1256:				
        -: 1257:	  //return success
    #####: 1258:	  return 1;
        -: 1259:	}
        -: 1260:			
        -: 1261:      //no second treasure_map found in hand
    #####: 1262:      return -1;
        -: 1263:    }
        -: 1264:	
    #####: 1265:  return -1;
        -: 1266:}
        -: 1267:
      340: 1268:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1269:{
        -: 1270:	
        -: 1271:  //if card is not trashed, added to Played pile 
      340: 1272:  if (trashFlag < 1)
        -: 1273:    {
        -: 1274:      //add card to played pile
      340: 1275:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      340: 1276:      state->playedCardCount++;
        -: 1277:    }
        -: 1278:	
        -: 1279:  //set played card to -1
      340: 1280:  state->hand[currentPlayer][handPos] = -1;
        -: 1281:	
        -: 1282:  //remove card from player's hand
      340: 1283:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1284:    {
        -: 1285:      //reduce number of cards in hand
    #####: 1286:      state->handCount[currentPlayer]--;
        -: 1287:    }
      340: 1288:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1289:    {
        -: 1290:      //reduce number of cards in hand
    #####: 1291:      state->handCount[currentPlayer]--;
        -: 1292:    }
        -: 1293:  else 	
        -: 1294:    {
        -: 1295:      //replace discarded card with last card in hand
      340: 1296:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1297:      //set last card to -1
      340: 1298:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1299:      //reduce number of cards in hand
      340: 1300:      state->handCount[currentPlayer]--;
        -: 1301:    }
        -: 1302:	
      340: 1303:  return 0;
        -: 1304:}
        -: 1305:
    #####: 1306:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1307:{
        -: 1308:  //Note: supplyPos is enum of choosen card
        -: 1309:	
        -: 1310:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1311:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1312:    {
    #####: 1313:      return -1;
        -: 1314:    }
        -: 1315:	
        -: 1316:  //added card for [whoseTurn] current player:
        -: 1317:  // toFlag = 0 : add to discard
        -: 1318:  // toFlag = 1 : add to deck
        -: 1319:  // toFlag = 2 : add to hand
        -: 1320:
    #####: 1321:  if (toFlag == 1)
        -: 1322:    {
    #####: 1323:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1324:      state->deckCount[player]++;
        -: 1325:    }
    #####: 1326:  else if (toFlag == 2)
        -: 1327:    {
    #####: 1328:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1329:      state->handCount[player]++;
        -: 1330:    }
        -: 1331:  else
        -: 1332:    {
    #####: 1333:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1334:      state->discardCount[player]++;
        -: 1335:    }
        -: 1336:	
        -: 1337:  //decrease number in supply pile
    #####: 1338:  state->supplyCount[supplyPos]--;
        -: 1339:	 
    #####: 1340:  return 0;
        -: 1341:}
        -: 1342:
     1052: 1343:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1344:{
        -: 1345:  int i;
        -: 1346:	
        -: 1347:  //reset coin count
     1052: 1348:  state->coins = 0;
        -: 1349:
        -: 1350:  //add coins for each Treasure card in player's hand
     6312: 1351:  for (i = 0; i < state->handCount[player]; i++)
        -: 1352:    {
     5260: 1353:      if (state->hand[player][i] == copper)
        -: 1354:	{
     3671: 1355:	  state->coins += 1;
        -: 1356:	}
     1589: 1357:      else if (state->hand[player][i] == silver)
        -: 1358:	{
    #####: 1359:	  state->coins += 2;
        -: 1360:	}
     1589: 1361:      else if (state->hand[player][i] == gold)
        -: 1362:	{
    #####: 1363:	  state->coins += 3;
        -: 1364:	}	
        -: 1365:    }	
        -: 1366:
        -: 1367:  //add bonus
     1052: 1368:  state->coins += bonus;
        -: 1369:
     1052: 1370:  return 0;
        -: 1371:}
        -: 1372:
        -: 1373:
        -: 1374:
        -: 1375://end of dominion.c
