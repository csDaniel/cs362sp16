        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      698:    8:int compare(const void* a, const void* b) {
      698:    9:  if (*(int*)a > *(int*)b)
       47:   10:    return 1;
      651:   11:  if (*(int*)a < *(int*)b)
      171:   12:    return -1;
      480:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       10:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       10:   44:  SelectStream(1);
       10:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       10:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       10:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      110:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     1100:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     1000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       10:   73:  if (numPlayers == 2)
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        9:   77:  else if (numPlayers == 3)
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        8:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       10:   87:  if (numPlayers == 2)
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        9:   95:      state->supplyCount[estate] = 12;
        9:   96:      state->supplyCount[duchy] = 12;
        9:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       10:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       10:  102:  state->supplyCount[silver] = 40;
       10:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      210:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     1650:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     1550:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      100:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       40:  115:		  if (numPlayers == 2){ 
        2:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
       18:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       80:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      100:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1450:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       47:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       37:  140:      state->deckCount[i] = 0;
      148:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      111:  143:	  state->deck[i][j] = estate;
      111:  144:	  state->deckCount[i]++;
        -:  145:	}
      296:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      259:  148:	  state->deck[i][j] = copper;	  state->deckCount[i]++;		
        -:  149:	}
        -:  150:    }
        -:  151:
        -:  152:  //shuffle player decks
       47:  153:  for (i = 0; i < numPlayers; i++)
        -:  154:    {
       37:  155:      if ( shuffle(i, state) < 0 )
        -:  156:	{
    #####:  157:	  return -1;
        -:  158:	}
        -:  159:    }
        -:  160:
        -:  161:  //draw player hands
       47:  162:  for (i = 0; i < numPlayers; i++)
        -:  163:    {  
        -:  164:      //initialize hand size to zero
       37:  165:      state->handCount[i] = 0;
       37:  166:      state->discardCount[i] = 0;
        -:  167:      //draw 5 cards
        -:  168:      // for (j = 0; j < 5; j++)
        -:  169:      //	{
        -:  170:      //	  drawCard(i, state);
        -:  171:      //	}
        -:  172:    }
        -:  173:  
        -:  174:  //set embargo tokens to 0 for all supply piles
      280:  175:  for (i = 0; i <= treasure_map; i++)
        -:  176:    {
      270:  177:      state->embargoTokens[i] = 0;
        -:  178:    }
        -:  179:
        -:  180:  //initialize first player's turn
       10:  181:  state->outpostPlayed = 0;
       10:  182:  state->phase = 0;
       10:  183:  state->numActions = 1;
       10:  184:  state->numBuys = 1;
       10:  185:  state->playedCardCount = 0;
       10:  186:  state->whoseTurn = 0;
       10:  187:  state->handCount[state->whoseTurn] = 0;
        -:  188:  //int it; move to top
        -:  189:
        -:  190:  //Moved draw cards to here, only drawing at the start of a turn
       60:  191:  for (it = 0; it < 5; it++){
       50:  192:    drawCard(state->whoseTurn, state);
        -:  193:  }
        -:  194:
       10:  195:  updateCoins(state->whoseTurn, state, 0);
        -:  196:
       10:  197:  return 0;
        -:  198:}
        -:  199:
       61:  200:int shuffle(int player, struct gameState *state) {
        -:  201: 
        -:  202:
        -:  203:  int newDeck[MAX_DECK];
       61:  204:  int newDeckPos = 0;
        -:  205:  int card;
        -:  206:  int i;
        -:  207:
       61:  208:  if (state->deckCount[player] < 1)
       12:  209:    return -1;
       49:  210:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  211:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  212:
      548:  213:  while (state->deckCount[player] > 0) {
      450:  214:    card = floor(Random() * state->deckCount[player]);
      450:  215:    newDeck[newDeckPos] = state->deck[player][card];
      450:  216:    newDeckPos++;
     1389:  217:    for (i = card; i < state->deckCount[player]-1; i++) {
      939:  218:      state->deck[player][i] = state->deck[player][i+1];
        -:  219:    }
      450:  220:    state->deckCount[player]--;
        -:  221:  }
      499:  222:  for (i = 0; i < newDeckPos; i++) {
      450:  223:    state->deck[player][i] = newDeck[i];
      450:  224:    state->deckCount[player]++;
        -:  225:  }
        -:  226:
       49:  227:  return 0;
        -:  228:}
        -:  229:
    #####:  230:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  231:{	
        -:  232:  int card;
    #####:  233:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  234:
        -:  235:  //check if it is the right phase
    #####:  236:  if (state->phase != 0)
        -:  237:    {
    #####:  238:      return -1;
        -:  239:    }
        -:  240:	
        -:  241:  //check if player has enough actions
    #####:  242:  if ( state->numActions < 1 )
        -:  243:    {
    #####:  244:      return -1;
        -:  245:    }
        -:  246:	
        -:  247:  //get card played
    #####:  248:  card = handCard(handPos, state);
        -:  249:	
        -:  250:  //check if selected card is an action
    #####:  251:  if ( card < adventurer || card > treasure_map )
        -:  252:    {
    #####:  253:      return -1;
        -:  254:    }
        -:  255:	
        -:  256:  //play card
    #####:  257:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  258:    {
    #####:  259:      return -1;
        -:  260:    }
        -:  261:	
        -:  262:  //reduce number of actions
    #####:  263:  state->numActions--;
        -:  264:
        -:  265:  //update coins (Treasure cards may be added with card draws)
    #####:  266:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  267:	
    #####:  268:  return 0;
        -:  269:}
        -:  270:
    #####:  271:int buyCard(int supplyPos, struct gameState *state) {
        -:  272:  int who;
        -:  273:  if (DEBUG){
        -:  274:    printf("Entering buyCard...\n");
        -:  275:  }
        -:  276:
        -:  277:  // I don't know what to do about the phase thing.
        -:  278:
    #####:  279:  who = state->whoseTurn;
        -:  280:
    #####:  281:  if (state->numBuys < 1){
        -:  282:    if (DEBUG)
        -:  283:      printf("You do not have any buys left\n");
    #####:  284:    return -1;
    #####:  285:  } else if (supplyCount(supplyPos, state) <1){
        -:  286:    if (DEBUG)
        -:  287:      printf("There are not any of that type of card left\n");
    #####:  288:    return -1;
    #####:  289:  } else if (state->coins < getCost(supplyPos)){
        -:  290:    if (DEBUG) 
        -:  291:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  292:    return -1;
        -:  293:  } else {
    #####:  294:    state->phase=1;
        -:  295:    //state->supplyCount[supplyPos]--;
    #####:  296:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  297:  
    #####:  298:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  299:    state->numBuys--;
        -:  300:    if (DEBUG)
        -:  301:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  302:  }
        -:  303:
        -:  304:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  305:  //state->discardCount[who]++;
        -:  306:    
    #####:  307:  return 0;
        -:  308:}
        -:  309:
      100:  310:int numHandCards(struct gameState *state) {
      100:  311:  return state->handCount[ whoseTurn(state) ];
        -:  312:}
        -:  313:
    #####:  314:int handCard(int handPos, struct gameState *state) {
    #####:  315:  int currentPlayer = whoseTurn(state);
    #####:  316:  return state->hand[currentPlayer][handPos];
        -:  317:}
        -:  318:
       33:  319:int supplyCount(int card, struct gameState *state) {
       33:  320:  return state->supplyCount[card];
        -:  321:}
        -:  322:
    #####:  323:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  324:  int i;
    #####:  325:  int count = 0;
        -:  326:
    #####:  327:  for (i = 0; i < state->deckCount[player]; i++)
        -:  328:    {
    #####:  329:      if (state->deck[player][i] == card) count++;
        -:  330:    }
        -:  331:
    #####:  332:  for (i = 0; i < state->handCount[player]; i++)
        -:  333:    {
    #####:  334:      if (state->hand[player][i] == card) count++;
        -:  335:    }
        -:  336:
    #####:  337:  for (i = 0; i < state->discardCount[player]; i++)
        -:  338:    {
    #####:  339:      if (state->discard[player][i] == card) count++;
        -:  340:    }
        -:  341:
    #####:  342:  return count;
        -:  343:}
        -:  344:
      236:  345:int whoseTurn(struct gameState *state) {
      236:  346:  return state->whoseTurn;
        -:  347:}
        -:  348:
        8:  349:int endTurn(struct gameState *state) {
        -:  350:  int k;
        -:  351:  int i;
        8:  352:  int currentPlayer = whoseTurn(state);
        -:  353:  
        -:  354:  //Discard hand
       72:  355:  for (i = 0; i < state->handCount[currentPlayer]; i++){
       64:  356:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       64:  357:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  358:  }
        8:  359:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  360:    
        -:  361:  //Code for determining the player
        8:  362:  if (currentPlayer < (state->numPlayers - 1)){ 
        6:  363:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  364:  }
        -:  365:  else{
        2:  366:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  367:  }
        -:  368:
        8:  369:  state->outpostPlayed = 0;
        8:  370:  state->phase = 0;
        8:  371:  state->numActions = 1;
        8:  372:  state->coins = 0;
        8:  373:  state->numBuys = 1;
        8:  374:  state->playedCardCount = 0;
        8:  375:  state->handCount[state->whoseTurn] = 0;
        -:  376:
        -:  377:  //int k; move to top
        -:  378:  //Next player draws hand
       48:  379:  for (k = 0; k < 5; k++){
       40:  380:    drawCard(state->whoseTurn, state);//Draw a card
        -:  381:  }
        -:  382:
        -:  383:  //Update money
        8:  384:  updateCoins(state->whoseTurn, state , 0);
        -:  385:
        8:  386:  return 0;
        -:  387:}
        -:  388:
    #####:  389:int isGameOver(struct gameState *state) {
        -:  390:  int i;
        -:  391:  int j;
        -:  392:	
        -:  393:  //if stack of Province cards is empty, the game ends
    #####:  394:  if (state->supplyCount[province] == 0)
        -:  395:    {
    #####:  396:      return 1;
        -:  397:    }
        -:  398:
        -:  399:  //if three supply pile are at 0, the game ends
    #####:  400:  j = 0;
    #####:  401:  for (i = 0; i < 25; i++)
        -:  402:    {
    #####:  403:      if (state->supplyCount[i] == 0)
        -:  404:	{
    #####:  405:	  j++;
        -:  406:	}
        -:  407:    }
    #####:  408:  if ( j >= 3)
        -:  409:    {
    #####:  410:      return 1;
        -:  411:    }
        -:  412:
    #####:  413:  return 0;
        -:  414:}
        -:  415:
    #####:  416:int scoreFor (int player, struct gameState *state) {
        -:  417:
        -:  418:  int i;
    #####:  419:  int score = 0;
        -:  420:  //score from hand
    #####:  421:  for (i = 0; i < state->handCount[player]; i++)
        -:  422:    {
    #####:  423:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  424:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  425:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  426:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  427:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  429:    }
        -:  430:
        -:  431:  //score from discard
    #####:  432:  for (i = 0; i < state->discardCount[player]; i++)
        -:  433:    {
    #####:  434:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  435:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  436:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  437:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  438:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  439:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  440:    }
        -:  441:
        -:  442:  //score from deck
    #####:  443:  for (i = 0; i < state->discardCount[player]; i++)
        -:  444:    {
    #####:  445:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  446:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  447:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  448:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  449:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  451:    }
        -:  452:
    #####:  453:  return score;
        -:  454:}
        -:  455:
    #####:  456:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  457:  int i;	
        -:  458:  int j;
        -:  459:  int highScore;
        -:  460:  int currentPlayer;
        -:  461:
        -:  462:  //get score for each player
    #####:  463:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  464:    {
        -:  465:      //set unused player scores to -9999
    #####:  466:      if (i >= state->numPlayers)
        -:  467:	{
    #####:  468:	  players[i] = -9999;
        -:  469:	}
        -:  470:      else
        -:  471:	{
    #####:  472:	  players[i] = scoreFor (i, state);
        -:  473:	}
        -:  474:    }
        -:  475:
        -:  476:  //find highest score
    #####:  477:  j = 0;
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  479:    {
    #####:  480:      if (players[i] > players[j])
        -:  481:	{
    #####:  482:	  j = i;
        -:  483:	}
        -:  484:    }
    #####:  485:  highScore = players[j];
        -:  486:
        -:  487:  //add 1 to players who had less turns
    #####:  488:  currentPlayer = whoseTurn(state);
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  490:    {
    #####:  491:      if ( players[i] == highScore && i > currentPlayer )
        -:  492:	{
    #####:  493:	  players[i]++;
        -:  494:	}
        -:  495:    }
        -:  496:
        -:  497:  //find new highest score
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  500:    {
    #####:  501:      if ( players[i] > players[j] )
        -:  502:	{
    #####:  503:	  j = i;
        -:  504:	}
        -:  505:    }
    #####:  506:  highScore = players[j];
        -:  507:
        -:  508:  //set winners in array to 1 and rest to 0
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  510:    {
    #####:  511:      if ( players[i] == highScore )
        -:  512:	{
    #####:  513:	  players[i] = 1;
        -:  514:	}
        -:  515:      else
        -:  516:	{
    #####:  517:	  players[i] = 0;
        -:  518:	}
        -:  519:    }
        -:  520:
    #####:  521:  return 0;
        -:  522:}
        -:  523:
      157:  524:int drawCard(int player, struct gameState *state)
        -:  525:{	int count;
        -:  526:  int deckCounter;
      157:  527:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  528:    
        -:  529:    //Step 1 Shuffle the discard pile back into a deck
        -:  530:    int i;
        -:  531:    //Move discard to deck
       61:  532:    for (i = 0; i < state->discardCount[player];i++){
       45:  533:      state->deck[player][i] = state->discard[player][i];
       45:  534:      state->discard[player][i] = -1;
        -:  535:    }
        -:  536:
       16:  537:    state->deckCount[player] = state->discardCount[player];
       16:  538:    state->discardCount[player] = 0;//Reset discard
        -:  539:
        -:  540:    //Shufffle the deck
       16:  541:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  542:   
        -:  543:    if (DEBUG){//Debug statements
        -:  544:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  545:    }
        -:  546:    
       16:  547:    state->discardCount[player] = 0;
        -:  548:
        -:  549:    //Step 2 Draw Card
       16:  550:    count = state->handCount[player];//Get current player's hand count
        -:  551:    
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Current hand count: %d\n", count);
        -:  554:    }
        -:  555:    
       16:  556:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  557:
       16:  558:    if (deckCounter == 0)
        8:  559:      return -1;
        -:  560:
        8:  561:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        8:  562:    state->deckCount[player]--;
        8:  563:    state->handCount[player]++;//Increment hand count
        -:  564:  }
        -:  565:
        -:  566:  else{
      141:  567:    int count = state->handCount[player];//Get current hand count for player
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
      141:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
      141:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      141:  575:    state->deckCount[player]--;
      141:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
      149:  579:  return 0;
        -:  580:}
        -:  581:
    #####:  582:int getCost(int cardNumber)
        -:  583:{
    #####:  584:  switch( cardNumber ) 
        -:  585:    {
        -:  586:    case curse:
    #####:  587:      return 0;
        -:  588:    case estate:
    #####:  589:      return 2;
        -:  590:    case duchy:
    #####:  591:      return 5;
        -:  592:    case province:
    #####:  593:      return 8;
        -:  594:    case copper:
    #####:  595:      return 0;
        -:  596:    case silver:
    #####:  597:      return 3;
        -:  598:    case gold:
    #####:  599:      return 6;
        -:  600:    case adventurer:
    #####:  601:      return 6;
        -:  602:    case council_room:
    #####:  603:      return 5;
        -:  604:    case feast:
    #####:  605:      return 4;
        -:  606:    case gardens:
    #####:  607:      return 4;
        -:  608:    case mine:
    #####:  609:      return 5;
        -:  610:    case remodel:
    #####:  611:      return 4;
        -:  612:    case smithy:
    #####:  613:      return 4;
        -:  614:    case village:
    #####:  615:      return 3;
        -:  616:    case baron:
    #####:  617:      return 4;
        -:  618:    case great_hall:
    #####:  619:      return 3;
        -:  620:    case minion:
    #####:  621:      return 5;
        -:  622:    case steward:
    #####:  623:      return 3;
        -:  624:    case tribute:
    #####:  625:      return 5;
        -:  626:    case ambassador:
    #####:  627:      return 3;
        -:  628:    case cutpurse:
    #####:  629:      return 4;
        -:  630:    case embargo: 
    #####:  631:      return 2;
        -:  632:    case outpost:
    #####:  633:      return 5;
        -:  634:    case salvager:
    #####:  635:      return 4;
        -:  636:    case sea_hag:
    #####:  637:      return 4;
        -:  638:    case treasure_map:
    #####:  639:      return 4;
        -:  640:    }
        -:  641:	
    #####:  642:  return -1;
        -:  643:}
        -:  644:
        -:  645:/****************************************************************************************************
        -:  646:* Start of card functions
        -:  647:*****************************************************************************************************/
        -:  648:
        4:  649:int playSmithy(struct gameState *state, int handPos) {
        -:  650:	//+3 Cards
        4:  651:	int currentPlayer = whoseTurn(state);
        -:  652:	int i;
       20:  653:    for (i = 0; i <= 3; i++)
        -:  654:	{
       16:  655:		drawCard(currentPlayer, state);
        -:  656:	}
        -:  657:			
        -:  658:	//discard card from hand
        4:  659:	discardCard(handPos, currentPlayer, state, 1);
        4:  660:	return 0;
        -:  661:}
        -:  662:
        4:  663:int playAdventurer(struct gameState *state) {
        4:  664:	int currentPlayer = whoseTurn(state);
        4:  665:	int drawntreasure =0;
        -:  666:	int cardDrawn;
        -:  667:	int temphand[MAX_HAND]; 
        4:  668:	int z = 0;
        -:  669:
       23:  670:	while(drawntreasure<2){
       15:  671:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        4:  672:		  shuffle(currentPlayer, state);
        -:  673:		}
       15:  674:		drawCard(currentPlayer, state);
       15:  675:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-2];//top card of hand is most recently drawn card.
       15:  676:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        8:  677:		  drawntreasure++;
        -:  678:		else{
        7:  679:      z++;
        7:  680:		  temphand[z]=cardDrawn;
        7:  681:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  682:
        -:  683:	}
        -:  684:      }
       19:  685:    while(z>=0){
       11:  686:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       11:  687:	z=z-1;
        -:  688:    }
        4:  689:    return 0;
        -:  690:}
        -:  691:
    #####:  692:int playMine(struct gameState *state, int choice1, int choice2, int handPos) {
    #####:  693:	int currentPlayer = whoseTurn(state);
        -:  694:	int i, j;
    #####:  695:	int z = 0;
    #####:  696:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  697:
    #####:  698:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  699:	{
    #####:  700:	  return -1;
        -:  701:	}
        -:  702:
    #####:  703:	if (choice2 > z || choice2 < curse)
        -:  704:	{
    #####:  705:		return -1;
        -:  706:	}
        -:  707:
    #####:  708:	if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  709:	{
    #####:  710:		return -1;
        -:  711:	}
        -:  712:
    #####:  713:	gainCard(choice1, state, 2, currentPlayer);
        -:  714:
        -:  715:	//discard card from hand
    #####:  716:	discardCard(handPos, currentPlayer, state, 0);
        -:  717:
        -:  718:	//discard trashed card
    #####:  719:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  720:	{
    #####:  721:		if (state->hand[currentPlayer][i] == j)
        -:  722:		{
    #####:  723:			discardCard(i, currentPlayer, state, 0);			
    #####:  724:			break;
        -:  725:		}
        -:  726:	}
        -:  727:		
    #####:  728:	return 0;
        -:  729:}
        -:  730:
        4:  731:int playVillage(struct gameState *state, int handPos) {
        4:  732:	int currentPlayer = whoseTurn(state);
        -:  733:
        -:  734:	//+1 Card
        4:  735:	drawCard(currentPlayer, state);
        -:  736:
        -:  737:	//+2 Actions
        4:  738:	state->numActions = state->numActions + 2;
        -:  739:
        -:  740:	//discard played card from hand
        4:  741:	discardCard(handPos, currentPlayer, state, 0);
        4:  742:	return 0;
        -:  743:}
        -:  744:
    #####:  745:int playRemodel(struct gameState *state, int choice1, int choice2, int handPos) {
        -:  746:	int i, j;
    #####:  747:	int currentPlayer = whoseTurn(state);
        -:  748: 
        -:  749:
    #####:  750:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  751:
    #####:  752:	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  753:	{
    #####:  754:		return -1;
        -:  755:	}
        -:  756:
    #####:  757:	gainCard(choice2, state, 0, currentPlayer);
        -:  758:
        -:  759:	//discard card from hand
    #####:  760:	discardCard(handPos+1, currentPlayer, state, 0);
        -:  761:
        -:  762:	//discard trashed card
    #####:  763:	for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  764:		{
    #####:  765:		if (state->hand[currentPlayer][i] == j)
        -:  766:		{
    #####:  767:			discardCard(i+1, currentPlayer, state, 0);			
    #####:  768:			break;
        -:  769:		}
        -:  770:	}
        -:  771:
    #####:  772:	return 0;
        -:  773:}
        -:  774:
       16:  775:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  776:{
        -:  777:  int i;
        -:  778:  int j;
        -:  779:  int k;
        -:  780:  int x;
        -:  781:  int index;
       16:  782:  int currentPlayer = whoseTurn(state);
       16:  783:  int nextPlayer = currentPlayer + 1;
        -:  784:
       16:  785:  int tributeRevealedCards[2] = {-1, -1};
        -:  786:  int temphand[MAX_HAND];// moved above the if statement
       16:  787:  int drawntreasure=0;
        -:  788:  int cardDrawn;
       16:  789:  int z = 0;// this is the counter for the temp hand
       16:  790:  if (nextPlayer > (state->numPlayers - 1)){
        2:  791:    nextPlayer = 0;
        -:  792:  }
        -:  793:  
        -:  794:	
        -:  795:  //uses switch to select card and perform actions
       16:  796:  switch( card ) 
        -:  797:    {
        -:  798:    case adventurer:
        4:  799:      playAdventurer(state);
        -:  800:			
        -:  801:    case council_room:
        -:  802:      //+4 Cards
       20:  803:      for (i = 0; i < 4; i++)
        -:  804:	{
       16:  805:	  drawCard(currentPlayer, state);
        -:  806:	}
        -:  807:			
        -:  808:      //+1 Buy
        4:  809:      state->numBuys++;
        -:  810:			
        -:  811:      //Each other player draws a card
       20:  812:      for (i = 0; i < state->numPlayers; i++)
        -:  813:	{
       16:  814:	  if ( i != currentPlayer )
        -:  815:	    {
       12:  816:	      drawCard(i, state);
        -:  817:	    }
        -:  818:	}
        -:  819:			
        -:  820:      //put played card in played card pile
        4:  821:      discardCard(handPos, currentPlayer, state, 0);
        -:  822:			
        4:  823:      return 0;
        -:  824:			
        -:  825:    case feast:
        -:  826:      //gain card with cost up to 5
        -:  827:      //Backup hand
    #####:  828:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  829:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  830:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  831:      }
        -:  832:      //Backup hand
        -:  833:
        -:  834:      //Update Coins for Buy
    #####:  835:      updateCoins(currentPlayer, state, 5);
    #####:  836:      x = 1;//Condition to loop on
    #####:  837:      while( x == 1) {//Buy one card
    #####:  838:	if (supplyCount(choice1, state) <= 0){
        -:  839:	  if (DEBUG)
        -:  840:	    printf("None of that card left, sorry!\n");
        -:  841:
        -:  842:	  if (DEBUG){
        -:  843:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  844:	  }
        -:  845:	}
    #####:  846:	else if (state->coins < getCost(choice1)){
    #####:  847:	  printf("That card is too expensive!\n");
        -:  848:
        -:  849:	  if (DEBUG){
        -:  850:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  851:	  }
        -:  852:	}
        -:  853:	else{
        -:  854:
        -:  855:	  if (DEBUG){
        -:  856:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  857:	  }
        -:  858:
    #####:  859:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  860:	  x = 0;//No more buying cards
        -:  861:
        -:  862:	  if (DEBUG){
        -:  863:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  864:	  }
        -:  865:
        -:  866:	}
        -:  867:      }     
        -:  868:
        -:  869:      //Reset Hand
    #####:  870:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  871:	state->hand[currentPlayer][i] = temphand[i];
    #####:  872:	temphand[i] = -1;
        -:  873:      }
        -:  874:      //Reset Hand
        -:  875:      			
    #####:  876:      return 0;
        -:  877:			
        -:  878:    case gardens:
        4:  879:      return -1;
        -:  880:			
        -:  881:    case mine:
    #####:  882:   	  playMine(state, choice1, choice2, handPos);
        -:  883:			
        -:  884:    case remodel:
    #####:  885:      playRemodel(state, choice1, choice2, handPos);
        -:  886:		
        -:  887:    case smithy:
        4:  888:      playSmithy(state, handPos);
        -:  889:		
        -:  890:    case village:
        4:  891:      playVillage(state, handPos);
        -:  892:		
        -:  893:    case baron:
        4:  894:      state->numBuys++;//Increase buys by 1!
        4:  895:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  896:	int p = 0;//Iterator for hand!
    #####:  897:	int card_not_discarded = 1;//Flag for discard set!
    #####:  898:	while(card_not_discarded){
    #####:  899:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  900:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  901:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  902:	    state->discardCount[currentPlayer]++;
    #####:  903:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  904:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  905:	    }
    #####:  906:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  907:	    state->handCount[currentPlayer]--;
    #####:  908:	    card_not_discarded = 0;//Exit the loop
        -:  909:	  }
    #####:  910:	  else if (p > state->handCount[currentPlayer]){
        -:  911:	    if(DEBUG) {
        -:  912:	      printf("No estate cards in your hand, invalid choice\n");
        -:  913:	      printf("Must gain an estate if there are any\n");
        -:  914:	    }
    #####:  915:	    if (supplyCount(estate, state) > 0){
    #####:  916:	      gainCard(estate, state, 0, currentPlayer);
    #####:  917:	      state->supplyCount[estate]--;//Decrement estates
    #####:  918:	      if (supplyCount(estate, state) == 0){
    #####:  919:		isGameOver(state);
        -:  920:	      }
        -:  921:	    }
    #####:  922:	    card_not_discarded = 0;//Exit the loop
        -:  923:	  }
        -:  924:			    
        -:  925:	  else{
    #####:  926:	    p++;//Next card
        -:  927:	  }
        -:  928:	}
        -:  929:      }
        -:  930:			    
        -:  931:      else{
        4:  932:	if (supplyCount(estate, state) > 0){
        4:  933:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        4:  934:	  state->supplyCount[estate]--;//Decrement Estates
        4:  935:	  if (supplyCount(estate, state) == 0){
    #####:  936:	    isGameOver(state);
        -:  937:	  }
        -:  938:	}
        -:  939:      }
        -:  940:	    
        -:  941:      
        4:  942:      return 0;
        -:  943:		
        -:  944:    case great_hall:
        -:  945:      //+1 Card
        4:  946:      drawCard(currentPlayer, state);
        -:  947:			
        -:  948:      //+1 Actions
        4:  949:      state->numActions++;
        -:  950:			
        -:  951:      //discard card from hand
        4:  952:      discardCard(handPos, currentPlayer, state, 0);
        4:  953:      return 0;
        -:  954:		
        -:  955:    case minion:
        -:  956:      //+1 action
    #####:  957:      state->numActions++;
        -:  958:			
        -:  959:      //discard card from hand
    #####:  960:      discardCard(handPos, currentPlayer, state, 0);
        -:  961:			
    #####:  962:      if (choice1)		//+2 coins
        -:  963:	{
    #####:  964:	  state->coins = state->coins + 2;
        -:  965:	}
        -:  966:			
    #####:  967:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  968:	{
        -:  969:	  //discard hand
    #####:  970:	  while(numHandCards(state) > 0)
        -:  971:	    {
    #####:  972:	      discardCard(handPos, currentPlayer, state, 0);
        -:  973:	    }
        -:  974:				
        -:  975:	  //draw 4
    #####:  976:	  for (i = 0; i < 4; i++)
        -:  977:	    {
    #####:  978:	      drawCard(currentPlayer, state);
        -:  979:	    }
        -:  980:				
        -:  981:	  //other players discard hand and redraw if hand size > 4
    #####:  982:	  for (i = 0; i < state->numPlayers; i++)
        -:  983:	    {
    #####:  984:	      if (i != currentPlayer)
        -:  985:		{
    #####:  986:		  if ( state->handCount[i] > 4 )
        -:  987:		    {
        -:  988:		      //discard hand
    #####:  989:		      while( state->handCount[i] > 0 )
        -:  990:			{
    #####:  991:			  discardCard(handPos, i, state, 0);
        -:  992:			}
        -:  993:							
        -:  994:		      //draw 4
    #####:  995:		      for (j = 0; j < 4; j++)
        -:  996:			{
    #####:  997:			  drawCard(i, state);
        -:  998:			}
        -:  999:		    }
        -: 1000:		}
        -: 1001:	    }
        -: 1002:				
        -: 1003:	}
    #####: 1004:      return 0;
        -: 1005:		
        -: 1006:    case steward:
    #####: 1007:      if (choice1 == 1)
        -: 1008:	{
        -: 1009:	  //+2 cards
    #####: 1010:	  drawCard(currentPlayer, state);
    #####: 1011:	  drawCard(currentPlayer, state);
        -: 1012:	}
    #####: 1013:      else if (choice1 == 2)
        -: 1014:	{
        -: 1015:	  //+2 coins
    #####: 1016:	  state->coins = state->coins + 2;
        -: 1017:	}
        -: 1018:      else
        -: 1019:	{
        -: 1020:	  //trash 2 cards in hand
    #####: 1021:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1022:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1023:	}
        -: 1024:			
        -: 1025:      //discard card from hand
    #####: 1026:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1027:      return 0;
        -: 1028:		
        -: 1029:    case tribute:
    #####: 1030:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1031:	if (state->deckCount[nextPlayer] > 0){
    #####: 1032:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1033:	  state->deckCount[nextPlayer]--;
        -: 1034:	}
    #####: 1035:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1036:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1037:	  state->discardCount[nextPlayer]--;
        -: 1038:	}
        -: 1039:	else{
        -: 1040:	  //No Card to Reveal
        -: 1041:	  if (DEBUG){
        -: 1042:	    printf("No cards to reveal\n");
        -: 1043:	  }
        -: 1044:	}
        -: 1045:      }
        -: 1046:	    
        -: 1047:      else{
    #####: 1048:	if (state->deckCount[nextPlayer] == 0){
    #####: 1049:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1050:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1051:	    state->deckCount[nextPlayer]++;
    #####: 1052:	    state->discard[nextPlayer][i] = -1;
    #####: 1053:	    state->discardCount[nextPlayer]--;
        -: 1054:	  }
        -: 1055:			    
    #####: 1056:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1057:	} 
    #####: 1058:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1059:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1060:	state->deckCount[nextPlayer]--;
    #####: 1061:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1062:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1063:	state->deckCount[nextPlayer]--;
        -: 1064:      }    
        -: 1065:		       
    #####: 1066:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1067:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1068:	state->playedCardCount++;
    #####: 1069:	tributeRevealedCards[1] = -1;
        -: 1070:      }
        -: 1071:
    #####: 1072:      for (i = 0; i <= 2; i ++){
    #####: 1073:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1074:	  state->coins += 2;
        -: 1075:	}
        -: 1076:		    
    #####: 1077:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1078:	  drawCard(currentPlayer, state);
    #####: 1079:	  drawCard(currentPlayer, state);
        -: 1080:	}
        -: 1081:	else{//Action Card
    #####: 1082:	  state->numActions = state->numActions + 2;
        -: 1083:	}
        -: 1084:      }
        -: 1085:	    
    #####: 1086:      return 0;
        -: 1087:		
        -: 1088:    case ambassador:
    #####: 1089:      j = 0;		//used to check if player has enough cards to discard
        -: 1090:
    #####: 1091:      if (choice2 > 2 || choice2 < 0)
        -: 1092:	{
    #####: 1093:	  return -1;				
        -: 1094:	}
        -: 1095:
    #####: 1096:      if (choice1 == handPos)
        -: 1097:	{
    #####: 1098:	  return -1;
        -: 1099:	}
        -: 1100:
    #####: 1101:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1102:	{
    #####: 1103:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1104:	    {
    #####: 1105:	      j++;
        -: 1106:	    }
        -: 1107:	}
    #####: 1108:      if (j < choice2)
        -: 1109:	{
    #####: 1110:	  return -1;				
        -: 1111:	}
        -: 1112:
        -: 1113:      if (DEBUG) 
        -: 1114:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1115:
        -: 1116:      //increase supply count for choosen card by amount being discarded
    #####: 1117:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1118:			
        -: 1119:      //each other player gains a copy of revealed card
    #####: 1120:      for (i = 0; i < state->numPlayers; i++)
        -: 1121:	{
    #####: 1122:	  if (i != currentPlayer)
        -: 1123:	    {
    #####: 1124:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1125:	    }
        -: 1126:	}
        -: 1127:
        -: 1128:      //discard played card from hand
    #####: 1129:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1130:
        -: 1131:      //trash copies of cards returned to supply
    #####: 1132:      for (j = 0; j < choice2; j++)
        -: 1133:	{
    #####: 1134:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1135:	    {
    #####: 1136:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1137:		{
    #####: 1138:		  discardCard(i, currentPlayer, state, 1);
    #####: 1139:		  break;
        -: 1140:		}
        -: 1141:	    }
        -: 1142:	}			
        -: 1143:
    #####: 1144:      return 0;
        -: 1145:		
        -: 1146:    case cutpurse:
        -: 1147:
    #####: 1148:      updateCoins(currentPlayer, state, 2);
    #####: 1149:      for (i = 0; i < state->numPlayers; i++)
        -: 1150:	{
    #####: 1151:	  if (i != currentPlayer)
        -: 1152:	    {
    #####: 1153:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1154:		{
    #####: 1155:		  if (state->hand[i][j] == copper)
        -: 1156:		    {
    #####: 1157:		      discardCard(j, i, state, 0);
    #####: 1158:		      break;
        -: 1159:		    }
    #####: 1160:		  if (j == state->handCount[i])
        -: 1161:		    {
    #####: 1162:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1163:			{
        -: 1164:			  if (DEBUG)
        -: 1165:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1166:			}	
    #####: 1167:		      break;
        -: 1168:		    }		
        -: 1169:		}
        -: 1170:					
        -: 1171:	    }
        -: 1172:				
        -: 1173:	}				
        -: 1174:
        -: 1175:      //discard played card from hand
    #####: 1176:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1177:
    #####: 1178:      return 0;
        -: 1179:
        -: 1180:		
        -: 1181:    case embargo: 
        -: 1182:      //+2 Coins
    #####: 1183:      state->coins = state->coins + 2;
        -: 1184:			
        -: 1185:      //see if selected pile is in play
    #####: 1186:      if ( state->supplyCount[choice1] == -1 )
        -: 1187:	{
    #####: 1188:	  return -1;
        -: 1189:	}
        -: 1190:			
        -: 1191:      //add embargo token to selected supply pile
    #####: 1192:      state->embargoTokens[choice1]++;
        -: 1193:			
        -: 1194:      //trash card
    #####: 1195:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1196:      return 0;
        -: 1197:		
        -: 1198:    case outpost:
        -: 1199:      //set outpost flag
    #####: 1200:      state->outpostPlayed++;
        -: 1201:			
        -: 1202:      //discard card
    #####: 1203:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1204:      return 0;
        -: 1205:		
        -: 1206:    case salvager:
        -: 1207:      //+1 buy
    #####: 1208:      state->numBuys++;
        -: 1209:			
    #####: 1210:      if (choice1)
        -: 1211:	{
        -: 1212:	  //gain coins equal to trashed card
    #####: 1213:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1214:	  //trash card
    #####: 1215:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1216:	}
        -: 1217:			
        -: 1218:      //discard card
    #####: 1219:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1220:      return 0;
        -: 1221:		
        -: 1222:    case sea_hag:
    #####: 1223:      for (i = 0; i < state->numPlayers; i++){
    #####: 1224:	if (i != currentPlayer){
    #####: 1225:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1226:	  state->discardCount[i]++;
    #####: 1227:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1228:	}
        -: 1229:      }
    #####: 1230:      return 0;
        -: 1231:		
        -: 1232:    case treasure_map:
        -: 1233:      //search hand for another treasure_map
    #####: 1234:      index = -1;
    #####: 1235:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1236:	{
    #####: 1237:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1238:	    {
    #####: 1239:	      index = i;
    #####: 1240:	      break;
        -: 1241:	    }
        -: 1242:	}
    #####: 1243:      if (index > -1)
        -: 1244:	{
        -: 1245:	  //trash both treasure cards
    #####: 1246:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1247:	  discardCard(index, currentPlayer, state, 1);
        -: 1248:
        -: 1249:	  //gain 4 Gold cards
    #####: 1250:	  for (i = 0; i < 4; i++)
        -: 1251:	    {
    #####: 1252:	      gainCard(gold, state, 1, currentPlayer);
        -: 1253:	    }
        -: 1254:				
        -: 1255:	  //return success
    #####: 1256:	  return 1;
        -: 1257:	}
        -: 1258:			
        -: 1259:      //no second treasure_map found in hand
    #####: 1260:      return -1;
        -: 1261:    }
        -: 1262:	
    #####: 1263:  return -1;
        -: 1264:}
        -: 1265:
       16: 1266:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1267:{
        -: 1268:	
        -: 1269:  //if card is not trashed, added to Played pile 
       16: 1270:  if (trashFlag < 1)
        -: 1271:    {
        -: 1272:      //add card to played pile
       12: 1273:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       12: 1274:      state->playedCardCount++;
        -: 1275:    }
        -: 1276:	
        -: 1277:  //set played card to -1
       16: 1278:  state->hand[currentPlayer][handPos] = -1;
        -: 1279:	
        -: 1280:  //remove card from player's hand
       16: 1281:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1282:    {
        -: 1283:      //reduce number of cards in hand
    #####: 1284:      state->handCount[currentPlayer]--;
        -: 1285:    }
       16: 1286:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1287:    {
        -: 1288:      //reduce number of cards in hand
    #####: 1289:      state->handCount[currentPlayer]--;
        -: 1290:    }
        -: 1291:  else 	
        -: 1292:    {
        -: 1293:      //replace discarded card with last card in hand
       16: 1294:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1295:      //set last card to -1
       16: 1296:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1297:      //reduce number of cards in hand
       16: 1298:      state->handCount[currentPlayer]--;
        -: 1299:    }
        -: 1300:	
       16: 1301:  return 0;
        -: 1302:}
        -: 1303:
        4: 1304:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1305:{
        -: 1306:  //Note: supplyPos is enum of choosen card
        -: 1307:	
        -: 1308:  //check if supply pile is empty (0) or card is not used in game (-1)
        4: 1309:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1310:    {
    #####: 1311:      return -1;
        -: 1312:    }
        -: 1313:	
        -: 1314:  //added card for [whoseTurn] current player:
        -: 1315:  // toFlag = 0 : add to discard
        -: 1316:  // toFlag = 1 : add to deck
        -: 1317:  // toFlag = 2 : add to hand
        -: 1318:
        4: 1319:  if (toFlag == 1)
        -: 1320:    {
    #####: 1321:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1322:      state->deckCount[player]++;
        -: 1323:    }
        4: 1324:  else if (toFlag == 2)
        -: 1325:    {
    #####: 1326:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1327:      state->handCount[player]++;
        -: 1328:    }
        -: 1329:  else
        -: 1330:    {
        4: 1331:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1332:      state->discardCount[player]++;
        -: 1333:    }
        -: 1334:	
        -: 1335:  //decrease number in supply pile
        4: 1336:  state->supplyCount[supplyPos]--;
        -: 1337:	 
        4: 1338:  return 0;
        -: 1339:}
        -: 1340:
       18: 1341:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1342:{
        -: 1343:  int i;
        -: 1344:	
        -: 1345:  //reset coin count
       18: 1346:  state->coins = 0;
        -: 1347:
        -: 1348:  //add coins for each Treasure card in player's hand
      108: 1349:  for (i = 0; i < state->handCount[player]; i++)
        -: 1350:    {
       90: 1351:      if (state->hand[player][i] == copper)
        -: 1352:	{
       65: 1353:	  state->coins += 1;
        -: 1354:	}
       25: 1355:      else if (state->hand[player][i] == silver)
        -: 1356:	{
    #####: 1357:	  state->coins += 2;
        -: 1358:	}
       25: 1359:      else if (state->hand[player][i] == gold)
        -: 1360:	{
    #####: 1361:	  state->coins += 3;
        -: 1362:	}	
        -: 1363:    }	
        -: 1364:
        -: 1365:  //add bonus
       18: 1366:  state->coins += bonus;
        -: 1367:
       18: 1368:  return 0;
        -: 1369:}
        -: 1370:
        -: 1371:
        -: 1372:/************************************************
        -: 1373:Start of function unit tests
        -: 1374:*************************************************/
        -: 1375:
    #####: 1376:int testUpdateCoins(int player, struct gameState *state, int bonus) {
        -: 1377:  
    #####: 1378:}
        -: 1379:
        -: 1380:
        -: 1381://end of dominion.c
        -: 1382:
