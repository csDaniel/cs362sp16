        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/********************************************************************
        -:    2: * Kara Franco
        -:    3: * cardtest3: village() function
        -:    4: * Due Date: April 24, 2016
        -:    5: * ****************************************************************/
        -:    6:
        -:    7:#include "dominion.h" 
        -:    8:#include <stdio.h>
        -:    9:
function main called 1 returned 100% blocks executed 78%
        1:   10:int main(){
        -:   11:
        1:   12:	printf("\n------------------------Card Test 3-----------------------------\n\n");
call    0 returned 100%
        1:   13:	printf("---Test village()---\n");
call    0 returned 100%
        -:   14:	
        -:   15:	// create a game to test 
        -:   16:	struct gameState G;
        -:   17:
        1:   18:	int cards[10] = {adventurer, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy, council_room};
        -:   19:	
        1:   20:	printf("Initialize Game...\n");
call    0 returned 100%
        1:   21:	initializeGame(2, cards, 10, &G);	
call    0 returned 100%
        -:   22:	// set up variables to track cards and players
        -:   23:	int flag;
        -:   24:	int thisPlayer; 
        -:   25:	int preHandCount;
        -:   26:	int preDeckCount;	
        -:   27:	int victoryCheck;
        -:   28:	int actionCheck;
        -:   29:
        1:   30:	thisPlayer = G.whoseTurn;
        1:   31:	preHandCount = G.handCount[thisPlayer];
        1:   32:	preDeckCount = G.deckCount[thisPlayer];
        1:   33:	actionCheck = G.numActions + 2;
        1:   34:	victoryCheck = G.supplyCount[estate] + G.supplyCount[duchy] + G.supplyCount[province];
        -:   35:	
        -:   36:	// use cardEffect to check for function return value
        1:   37:	printf("Testing that village() cardEffect function return value is 0...\n");
call    0 returned 100%
        1:   38:	flag = cardEffect(village, 0, 0, 0, &G, 0, 0);
call    0 returned 100%
        1:   39:	if(flag == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   40:		printf("PASS\n");
call    0 returned 100%
        -:   41:	} else {
    #####:   42:		printf("FAIL\n");
call    0 never executed
        -:   43:	}
        -:   44:	
        -:   45:	// village() action is take 1 card and get 2 actions
        -:   46:
        1:   47:	printf("Testing if village() card gave player 1 new card...\n");
call    0 returned 100%
        -:   48:	
        1:   49:	if(G.handCount[thisPlayer] == preHandCount + 1){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   50:		printf("PASS\n"); 	
call    0 never executed
        -:   51:	} 
        -:   52:	else {
        1:   53:		printf("FAIL\n");
call    0 returned 100%
        1:   54:		printf("current handCount: %d, previous handCount: %d\n", G.handCount[thisPlayer], preHandCount);
call    0 returned 100%
        -:   55:	}
        -:   56:	
        -:   57:	// village() action should result in 1 card missing from the deck 
        1:   58:	printf("Testing if village() card removed 1 card from the deck...\n");
call    0 returned 100%
        1:   59:	if(G.deckCount[thisPlayer] == preDeckCount - 1){  
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   60:		printf("PASS\n"); 		
call    0 returned 100%
        -:   61:	} 
        -:   62:	else {
    #####:   63:		printf("FAIL\n");
call    0 never executed
    #####:   64:		printf("current deckCount: %d, previous deckCount: %d\n", G.deckCount[thisPlayer], preDeckCount);
call    0 never executed
        -:   65:	}
        -:   66:	
        -:   67:	// village() action should not effect the victory card pile 
        1:   68:	printf("Testing if village() action did not alter victory points...\n");
call    0 returned 100%
        1:   69:	if((G.supplyCount[estate] + G.supplyCount[duchy] + G.supplyCount[province]) == victoryCheck){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   70:		printf("PASS\n");
call    0 returned 100%
        -:   71:	} 
        -:   72:	else {
    #####:   73:		printf("FAIL\n");
call    0 never executed
    #####:   74:		printf("Victory points have been changed\n");
call    0 never executed
        -:   75:	}
        -:   76:	
        -:   77:	// village() action should give player 2 actions
        1:   78:	printf("Testing if village() gave 2 actions...\n");
call    0 returned 100%
        1:   79:	if(G.numActions == actionCheck){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   80:		printf("PASS\n");
call    0 never executed
        -:   81:	} 
        -:   82:	else {
        1:   83:		printf("FAIL\n");
call    0 returned 100%
        1:   84:		printf("Player received %d actions\n", G.numActions);
call    0 returned 100%
        -:   85:	}
        -:   86:
        -:   87:
        1:   88:	printf("---village() Test Complete---\n\n");
call    0 returned 100%
        1:   89:return 0;
        -:   90:}
