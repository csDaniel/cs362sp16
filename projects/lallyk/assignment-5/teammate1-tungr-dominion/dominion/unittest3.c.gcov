        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/********************************************************************
        -:    2: * Kara Franco
        -:    3: * unittest3: isGameOver() function
        -:    4: * Due Date: April 24, 2016
        -:    5: * ****************************************************************/
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include <stdio.h>
        -:    9:#include <stdlib.h> //malloc/free
        -:   10:
function main called 1 returned 100% blocks executed 83%
        1:   11:int main(){
        -:   12:
        1:   13:	printf("\n------------------------Unit Test 3-----------------------------\n\n");
call    0 returned 100%
        1:   14:	printf("---Test isGameOver()---\n");
call    0 returned 100%
        -:   15:
        -:   16:	// create a game to test
        1:   17:  	struct gameState* state = malloc(sizeof(struct gameState));
        1:   18:  	int cards[10] = {adventurer, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy, council_room};
        -:   19:	
        1:   20:	printf("Initialize Game...\n");
call    0 returned 100%
        1:   21:	initializeGame(2, cards, 10, state);
call    0 returned 100%
        -:   22:	
        -:   23:	// the game ends when there are no Province Cards in supply
        -:   24:	// first we will test if the game ends prematurely with any cards remaining
        1:   25:	printf("Testing if returns 0 (false) if there are cards remaining (including Province Cards)...\n");
call    0 returned 100%
        -:   26:  	int i;
        1:   27:  	for (i = 0; i <= state->supplyCount[treasure_map]; i++) {
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:   28:    		state->supplyCount[i] = 1;
        -:   29:  	}
        -:   30:
        1:   31: 	int r = isGameOver(state);
call    0 returned 100%
        1:   32:  	if (r == 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   33:    		printf("PASS\n");
call    0 returned 100%
        -:   34:  	}
        -:   35:  	else {
    #####:   36:    		printf("FAIL\n");
call    0 never executed
        -:   37:  	}
        -:   38:	
        -:   39:	// next we test if the game stays in session when a non-Province card is empty
        1:   40:	printf("Testing if returns 0 (false) if a non-Province card supply count is empty...\n");
call    0 returned 100%
        -:   41:  
        1:   42:	state->supplyCount[province] = 1;
        1:   43:  	state->supplyCount[curse] = 0;
        -:   44:
        1:   45:	r = isGameOver(state);
call    0 returned 100%
        1:   46:  	if (r == 0) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   47:    		printf("PASS\n");
call    0 returned 100%
        -:   48:  	}
        -:   49:  	else {
    #####:   50:    		printf("FAIL\n");
call    0 never executed
        -:   51:  	}
        -:   52:	
        1:   53:	printf("Testing if returns 1 (true) if three non-Province cards are empty...\n"); 
call    0 returned 100%
        1:   54:	state->supplyCount[province] = 1;
        1:   55:  	state->supplyCount[curse] = 0;
        1:   56:  	state->supplyCount[treasure_map] = 0; 
        1:   57: 	state->supplyCount[smithy] = 0;
        -:   58:
        1:   59:  	r = isGameOver(state);
call    0 returned 100%
        1:   60:  	if (r == 1) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   61:    		printf("PASS\n");
call    0 never executed
        -:   62:  	}
        -:   63:  	else {
        1:   64:    		printf("FAIL\n");
call    0 returned 100%
        -:   65:  	}
        -:   66:  	
        -:   67:	// lastly, we test if the game does end when there are no Province cards left
        1:   68:	printf("Testing if returns 1 (true) if there are no Province Cards...\n");
call    0 returned 100%
        -:   69:  	
        1:   70:  	state->supplyCount[province] = 0;
        -:   71:
        1:   72:  	r = isGameOver(state);
call    0 returned 100%
        1:   73:  	if (r == 1) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   74:    		printf("PASS\n");
call    0 returned 100%
        -:   75:  	}
        -:   76:  	else {
    #####:   77:    		printf("FAIL\n");
call    0 never executed
        -:   78:  	}
        -:   79:
        1:   80:	printf("---isGameOver() Test Complete---\n\n");
call    0 returned 100%
        -:   81:	  
        -:   82:	// clean up
        1:   83:  	free(state);
        -:   84:
        1:   85:  return 0;
        -:   86:}
