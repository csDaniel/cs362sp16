        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <stdlib.h>
        -:    6:#include <string.h>
        -:    7:#include <time.h>
        -:    8:#include <math.h>
        -:    9:
        -:   10:int testAdventurer(struct gameState actual, struct gameState previous, int curPlay);
        -:   11:int countCoins(struct gameState actual, int curPlay);
        -:   12:
        1:   13:int main() {
        1:   14:	srand(time(NULL));
        -:   15:
        -:   16:	struct gameState game, compareGame;
        -:   17:	int numPlay, curPlay;
        -:   18:	
        1:   19:	int k[10] = {adventurer, embargo, village, mine, gardens, smithy, council_room, minion, tribute, feast};
        1:   20:	int seed = 500;
        -:   21:	int i; 
        1:   22:	int numRandTest = 10000;
        1:   23:	int errors = 0;
        -:   24:	//for 10000 random tests
    10001:   25:	for(i=0; i<numRandTest; i++){
        -:   26:		//get random num of players
    10000:   27:		numPlay = (rand() % 3) + 2;
    10000:   28:		initializeGame(numPlay, k, seed, &game);
        -:   29:		
        -:   30:		//randomize the game settings
    10000:   31:		curPlay = 0;
        -:   32:		
    10000:   33:		game.deckCount[curPlay] = (rand() % MAX_DECK) + 4;
    10000:   34:		game.discardCount[curPlay] = MAX_DECK - game.deckCount[curPlay];
    10000:   35:		game.handCount[curPlay] = (rand() % MAX_HAND) + 1;
        -:   36:		//printf("%d\n", game.handCount[curPlay]);
    10000:   37:		game.whoseTurn = curPlay;
        -:   38:	
        -:   39:		//randomize how many coins in hand min of 3 coins
    10000:   40:		int numCoins = rand() % game.handCount[curPlay] + 3;
        -:   41:		//printf("%d\n", numCoins);
        -:   42:		int j;
  1290746:   43:		for(j=0;j<numCoins;j++){
  1280746:   44:			int pos = rand() % game.handCount[curPlay];
  1280746:   45:			int randCoin = rand() % 3 + 4;
  1280746:   46:			game.hand[curPlay][pos] = randCoin;
        -:   47:		}	
        -:   48:
    10000:   49:		memcpy(&compareGame, &game, sizeof(struct gameState));
        -:   50:		int temphand[MAX_HAND];
        -:   51:		//call adventurer
    10000:   52:		cardAdventurer(&game, 0, curPlay, temphand, 0, 0);
    10000:   53:		errors = errors + testAdventurer(game, compareGame, curPlay);
        -:   54:
        -:   55:
        -:   56:	}
        1:   57:	printf("There were %d errors\n", errors);
        1:   58:	return 0;
        -:   59:}
        -:   60:
    10000:   61:int testAdventurer(struct gameState actual, struct gameState previous, int curPlay){
    10000:   62:	int error = 0;
    10000:   63:	if(actual.deckCount[curPlay] >= previous.deckCount[curPlay]){
        -:   64:	//	printf("new deck size: %d old deck size: %d\nnew deck should be smaller  than old deck\n", actual.deckCount[curPlay], previous.deckCount[curPlay]);
    #####:   65:		error++;
        -:   66:	}
        -:   67:
    10000:   68:	if(actual.discardCount[curPlay] < previous.discardCount[curPlay]){
    #####:   69:		printf("new discard count: %d old discard count: %d\ndiscard count is less than old deck\n", actual.discardCount[curPlay], previous.discardCount[curPlay]);
    #####:   70:		error++;
        -:   71:	}
        -:   72:
    10000:   73:	if(countCoins(actual, curPlay) != 2 + countCoins(previous, curPlay)){
        -:   74:	//	printf("new coins: %d, oldCoins: %d\n", countCoins(actual, curPlay), countCoins(previous,curPlay));
        -:   75:	//	printf("didn't increase coin count\n");
    10000:   76:		error++;
        -:   77:	}	
        -:   78:
    10000:   79:	if(actual.handCount[curPlay] != 2 + previous.handCount[curPlay]){
        -:   80:		//printf("player hand count was not increased\n");
    10000:   81:		error++;
        -:   82:	}
        -:   83:	int i;
    40000:   84:	for(i=1; i<4; i++){
        -:   85:		//printf("other player was changed in some way\n");
    30000:   86:		if(actual.deckCount[i] != previous.deckCount[i]){
      109:   87:			error++;
        -:   88:		}
    30000:   89:		if(actual.discardCount[i] != previous.discardCount[i]){
    #####:   90:			error++;
        -:   91:		}
    30000:   92:		if(actual.handCount[i] != previous.handCount[i]){
    #####:   93:			error++;
        -:   94:		}
        -:   95:	}
        -:   96:
    10000:   97:	return error;
        -:   98:
        -:   99:}
        -:  100:
        -:  101:
    20000:  102:int countCoins(struct gameState actual, int curPlay){
    20000:  103:	int newHandCount = actual.handCount[curPlay];
        -:  104:	int i;
    20000:  105:	int newCoins = 0; 
  5077782:  106:	for(i=0;i<newHandCount;i++){
  5057782:  107:		if(actual.hand[curPlay][i] == copper){
  1778080:  108:			newCoins++;
        -:  109:		}
  3279702:  110:		else if(actual.hand[curPlay][i] == silver){
  1624706:  111:			newCoins++;
        -:  112:		}
  1654996:  113:		else if(actual.hand[curPlay][i] == gold){
  1628386:  114:			newCoins++;
        -:  115:		}
        -:  116:	}
    20000:  117:	return newCoins;
        -:  118:}
