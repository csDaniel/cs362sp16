        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:119
        -:    0:Programs:115
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
    67380:   10:int compare(const void* a, const void* b) {
    67380:   11:  if (*(int*)a > *(int*)b)
    #####:   12:    return 1;
    67380:   13:  if (*(int*)a < *(int*)b)
    17968:   14:    return -1;
    49412:   15:  return 0;
        -:   16:}
        -:   17:
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
     2242:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
     2242:   46:  SelectStream(1);
     2242:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
     2242:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
     2242:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
    24662:   59:  for (i = 0; i < 10; i++)
        -:   60:    {
   246620:   61:      for (j = 0; j < 10; j++)
        -:   62:        {
   224200:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
     2242:   75:  if (numPlayers == 2)
        -:   76:    {
     2238:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
        4:   79:  else if (numPlayers == 3)
        -:   80:    {
    #####:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
        4:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
     2242:   89:  if (numPlayers == 2)
        -:   90:    {
     2238:   91:      state->supplyCount[estate] = 8;
     2238:   92:      state->supplyCount[duchy] = 8;
     2238:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
        4:   97:      state->supplyCount[estate] = 12;
        4:   98:      state->supplyCount[duchy] = 12;
        4:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
     2242:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     2242:  104:  state->supplyCount[silver] = 40;
     2242:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
    47082:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  109:    {
   369930:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  111:	{
   347510:  112:	  if (kingdomCards[j] == i)
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
    22420:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:		{
     8968:  117:		  if (numPlayers == 2){ 
     4476:  118:		    state->supplyCount[i] = 8; 
        -:  119:		  }
        8:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
    17936:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
    22420:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
   325090:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
     6734:  140:  for (i = 0; i < numPlayers; i++)
        -:  141:    {
     4492:  142:      state->deckCount[i] = 0;
    17968:  143:      for (j = 0; j < 3; j++)
        -:  144:	{
    13476:  145:	  state->deck[i][j] = estate;
    13476:  146:	  state->deckCount[i]++;
        -:  147:	}
    35936:  148:      for (j = 3; j < 10; j++)
        -:  149:	{
    31444:  150:	  state->deck[i][j] = copper;
    31444:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
     6734:  156:  for (i = 0; i < numPlayers; i++)
        -:  157:    {
     4492:  158:      if ( shuffle(i, state) < 0 )
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
     6734:  165:  for (i = 0; i < numPlayers; i++)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
     4492:  168:      state->handCount[i] = 0;
     4492:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
    62776:  178:  for (i = 0; i <= treasure_map; i++)
        -:  179:    {
    60534:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
     2242:  184:  state->outpostPlayed = 0;
     2242:  185:  state->phase = 0;
     2242:  186:  state->numActions = 1;
     2242:  187:  state->numBuys = 1;
     2242:  188:  state->playedCardCount = 0;
     2242:  189:  state->whoseTurn = 0;
     2242:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
    13452:  194:  for (it = 0; it < 5; it++){
    11210:  195:    drawCard(state->whoseTurn, state);
        -:  196:  }
        -:  197:
     2242:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
     2242:  200:  return 0;
        -:  201:}
        -:  202:
     4492:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
     4492:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
     4492:  211:  if (state->deckCount[player] < 1)
    #####:  212:    return -1;
     4492:  213:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  214:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  215:
    53904:  216:  while (state->deckCount[player] > 0) {
    44920:  217:    card = floor(Random() * state->deckCount[player]);
    44920:  218:    newDeck[newDeckPos] = state->deck[player][card];
    44920:  219:    newDeckPos++;
   139284:  220:    for (i = card; i < state->deckCount[player]-1; i++) {
    94364:  221:      state->deck[player][i] = state->deck[player][i+1];
        -:  222:    }
    44920:  223:    state->deckCount[player]--;
        -:  224:  }
    49412:  225:  for (i = 0; i < newDeckPos; i++) {
    44920:  226:    state->deck[player][i] = newDeck[i];
    44920:  227:    state->deckCount[player]++;
        -:  228:  }
        -:  229:
     4492:  230:  return 0;
        -:  231:}
        -:  232:
    #####:  233:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  234:{	
        -:  235:  int card;
    #####:  236:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  237:
        -:  238:  //check if it is the right phase
    #####:  239:  if (state->phase != 0)
        -:  240:    {
    #####:  241:      return -1;
        -:  242:    }
        -:  243:	
        -:  244:  //check if player has enough actions
    #####:  245:  if ( state->numActions < 1 )
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //get card played
    #####:  251:  card = handCard(handPos, state);
        -:  252:	
        -:  253:  //check if selected card is an action
    #####:  254:  if ( card < adventurer || card > treasure_map )
        -:  255:    {
    #####:  256:      return -1;
        -:  257:    }
        -:  258:	
        -:  259:  //play card
    #####:  260:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //reduce number of actions
    #####:  266:  state->numActions--;
        -:  267:
        -:  268:  //update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
        -:  272:}
        -:  273:
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
        -:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
        -:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
        -:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
        -:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
        -:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
     2037:  322:int supplyCount(int card, struct gameState *state) {
     2037:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
        -:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
        -:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
       45:  348:int whoseTurn(struct gameState *state) {
       45:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
      105:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
      105:  397:  if (state->supplyCount[province] == 0)
        -:  398:    {
       21:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
       84:  403:  j = 0;
     2184:  404:  for (i = 0; i < 25; i++)
        -:  405:    {
     2100:  406:      if (state->supplyCount[i] == 0)
        -:  407:	{
      189:  408:	  j++;
        -:  409:	}
        -:  410:    }
       84:  411:  if ( j >= 3)
        -:  412:    {
       42:  413:      return 1;
        -:  414:    }
        -:  415:
       42:  416:  return 0;
        -:  417:}
        -:  418:
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
    #####:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
        -:  470:	{
    #####:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
        -:  515:	{
    #####:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
    11303:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
    11303:  530:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
    #####:  535:    for (i = 0; i < state->discardCount[player];i++){
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
    #####:  540:    state->deckCount[player] = state->discardCount[player];
    #####:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
    #####:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
        -:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
    #####:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
    #####:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
        -:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
    #####:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
    #####:  561:    if (deckCounter == 0)
    #####:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
    11303:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        -:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
    11303:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
    11303:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    11303:  578:    state->deckCount[player]--;
    11303:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
    11303:  582:  return 0;
        -:  583:}
        -:  584:
    #####:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
    #####:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
        -:  646:}
        -:  647:
        -:  648:
        -:  649:/*************************************************
        -:  650: * start of new card functions
        -:  651: ************************************************/
        -:  652: 
        -:  653: 
        -:  654: 
        -:  655: 
        -:  656: 
       21:  657: int playSmithy(struct gameState *state, int handPos) {
        -:  658:  int i;
       21:  659:  int currentPlayer = whoseTurn(state);
        -:  660:  // +3 cards
       84:  661:  for (i = 0; i < 3; i++)
        -:  662:	{
       63:  663:	  drawCard(currentPlayer, state);
        -:  664:	}
        -:  665:			
        -:  666:      //discard card from hand
       21:  667:  discardCard(0, currentPlayer, state, 0);
       21:  668:  return 0;
        -:  669:}
        -:  670:
       10:  671:int playAdventurer(struct gameState *state) {
       10:  672:  int currentPlayer = whoseTurn(state);
       10:  673:  int drawntreasure = 1;
       10:  674:  int z = 0;// this is the counter for the temp hand
        -:  675:  int temphand[MAX_HAND];// moved above the if statement
        -:  676:    
       40:  677:  while(drawntreasure<2){
       20:  678:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  679:	  shuffle(currentPlayer, state);
        -:  680:	}
       20:  681:	drawCard(currentPlayer, state);
       20:  682:	int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       20:  683:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       10:  684:	  drawntreasure++;
        -:  685:	else{
       10:  686:	  temphand[z]=cardDrawn;
       10:  687:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       10:  688:	  z++;
        -:  689:	}
        -:  690:      }
       30:  691:      while(z-1>=0){
       10:  692:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       10:  693:	z=z-1;
        -:  694:      }
       10:  695:      return 0;
        -:  696:}
        -:  697:
        2:  698:int playCouncilRoom(struct gameState *state, int handPos) {
        -:  699:    int i;
        2:  700:    int currentPlayer = whoseTurn(state);
        -:  701:      //+4 Cards
       10:  702:      for (i = 0; i < 4; i++)
        -:  703:	{
        8:  704:	  drawCard(currentPlayer, state);
        -:  705:	}
        -:  706:			
        -:  707:      //+1 Buy
        2:  708:      state->numBuys++;
        -:  709:			
        -:  710:      //Each other player draws a card
       10:  711:      for (i = 0; i < state->numPlayers; i++)
        -:  712:	{
        8:  713:	  if ( i == currentPlayer )
        -:  714:	    {
        2:  715:	      drawCard(i, state);
        -:  716:	    }
        -:  717:	}
        -:  718:			
        -:  719:      //put played card in played card pile
        2:  720:      discardCard(handPos, currentPlayer, state, 0);
        2:  721:}
        -:  722:
    #####:  723:int playGreatHall(struct gameState *state, int handPos) {
    #####:  724:    int currentPlayer = whoseTurn(state);
        -:  725:      //+1 Card
    #####:  726:      drawCard(0, state);
        -:  727:			
        -:  728:      //+1 Actions
    #####:  729:      state->numActions++;
        -:  730:			
        -:  731:      //discard card from hand
    #####:  732:      discardCard(handPos, currentPlayer, state, 0);
    #####:  733:}
        -:  734:
    #####:  735:int playMinion(struct gameState *state, int handPos, int choice1, int choice2) {
        -:  736:      //+1 action
    #####:  737:      state->numActions++;
    #####:  738:      int currentPlayer = whoseTurn(state);
        -:  739:      int i;
        -:  740:      int j;
        -:  741:			
        -:  742:      //discard card from hand
    #####:  743:      discardCard(handPos, currentPlayer, state, 0);
        -:  744:			
    #####:  745:      if (choice1)		//+2 coins
        -:  746:	{
    #####:  747:	  state->coins = state->coins + 2;
        -:  748:	}
        -:  749:			
    #####:  750:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  751:	{
        -:  752:	  //discard hand
    #####:  753:	  while(numHandCards(state) > 0)
        -:  754:	    {
    #####:  755:	      discardCard(handPos, currentPlayer, state, 0);
        -:  756:	    }
        -:  757:				
        -:  758:	  //draw 4
    #####:  759:	  for (i = 0; i < 4; i++)
        -:  760:	    {
    #####:  761:	      drawCard(currentPlayer, state);
        -:  762:	    }
        -:  763:				
        -:  764:	  //other players discard hand and redraw if hand size > 4
    #####:  765:	  for (i = 0; i < state->numPlayers; i++)
        -:  766:	    {
    #####:  767:	      if (i != currentPlayer)
        -:  768:		{
    #####:  769:		  if ( state->handCount[i] > 4 )
        -:  770:		    {
        -:  771:		      //discard hand
    #####:  772:		      while( state->handCount[i] > 0 )
        -:  773:			{
    #####:  774:			  discardCard(handPos, i, state, 0);
        -:  775:			}
        -:  776:							
        -:  777:		      //draw 4
    #####:  778:		      for (j = 0; j < 4; j++)
        -:  779:			{
    #####:  780:			  drawCard(i, state);
        -:  781:			}
        -:  782:		    }
        -:  783:		}
        -:  784:	    }
        -:  785:				
        -:  786:	}
    #####:  787:}
        -:  788:
        -:  789:
        -:  790:
        -:  791:
        -:  792:
        -:  793:
        -:  794:
        -:  795:
        2:  796:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  797:{
        -:  798:  int i;
        -:  799:  int j;
        -:  800:  int k;
        -:  801:  int x;
        -:  802:  int index;
        2:  803:  int currentPlayer = whoseTurn(state);
        2:  804:  int nextPlayer = currentPlayer + 1;
        -:  805:
        2:  806:  int tributeRevealedCards[2] = {-1, -1};
        -:  807:  int temphand[MAX_HAND];// moved above the if statement
        2:  808:  int drawntreasure=0;
        -:  809:  int cardDrawn;
        2:  810:  int z = 0;// this is the counter for the temp hand
        2:  811:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  812:    nextPlayer = 0;
        -:  813:  }
        -:  814:  
        -:  815:	
        -:  816:  //uses switch to select card and perform actions
        2:  817:  switch( card ) 
        -:  818:    {
        -:  819:    case adventurer:
    #####:  820:      playAdventurer(state);
        -:  821:    /*
        -:  822:      while(drawntreasure<2){
        -:  823:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  824:	  shuffle(currentPlayer, state);
        -:  825:	}
        -:  826:	drawCard(currentPlayer, state);
        -:  827:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  828:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  829:	  drawntreasure++;
        -:  830:	else{
        -:  831:	  temphand[z]=cardDrawn;
        -:  832:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  833:	  z++;
        -:  834:	}
        -:  835:      }
        -:  836:      while(z-1>=0){
        -:  837:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  838:	z=z-1;
        -:  839:      }
        -:  840:      return 0;
        -:  841:			*/
        -:  842:            
        -:  843:    case council_room:
    #####:  844:        playCouncilRoom(state, handPos);
        -:  845:    /*
        -:  846:      //+4 Cards
        -:  847:      for (i = 0; i < 4; i++)
        -:  848:	{
        -:  849:	  drawCard(currentPlayer, state);
        -:  850:	}
        -:  851:			
        -:  852:      //+1 Buy
        -:  853:      state->numBuys++;
        -:  854:			
        -:  855:      //Each other player draws a card
        -:  856:      for (i = 0; i < state->numPlayers; i++)
        -:  857:	{
        -:  858:	  if ( i != currentPlayer )
        -:  859:	    {
        -:  860:	      drawCard(i, state);
        -:  861:	    }
        -:  862:	}
        -:  863:			
        -:  864:      //put played card in played card pile
        -:  865:      discardCard(handPos, currentPlayer, state, 0);
        -:  866:			
        -:  867:      return 0; */
        -:  868:			
        -:  869:    case feast:
        -:  870:      //gain card with cost up to 5
        -:  871:      //Backup hand
    #####:  872:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  873:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  874:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  875:      }
        -:  876:      //Backup hand
        -:  877:
        -:  878:      //Update Coins for Buy
    #####:  879:      updateCoins(currentPlayer, state, 5);
    #####:  880:      x = 1;//Condition to loop on
    #####:  881:      while( x == 1) {//Buy one card
    #####:  882:	if (supplyCount(choice1, state) <= 0){
        -:  883:	  if (DEBUG)
        -:  884:	    printf("None of that card left, sorry!\n");
        -:  885:
        -:  886:	  if (DEBUG){
        -:  887:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  888:	  }
        -:  889:	}
    #####:  890:	else if (state->coins < getCost(choice1)){
    #####:  891:	  printf("That card is too expensive!\n");
        -:  892:
        -:  893:	  if (DEBUG){
        -:  894:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  895:	  }
        -:  896:	}
        -:  897:	else{
        -:  898:
        -:  899:	  if (DEBUG){
        -:  900:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  901:	  }
        -:  902:
    #####:  903:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  904:	  x = 0;//No more buying cards
        -:  905:
        -:  906:	  if (DEBUG){
        -:  907:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  908:	  }
        -:  909:
        -:  910:	}
        -:  911:      }     
        -:  912:
        -:  913:      //Reset Hand
    #####:  914:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  915:	state->hand[currentPlayer][i] = temphand[i];
    #####:  916:	temphand[i] = -1;
        -:  917:      }
        -:  918:      //Reset Hand
        -:  919:      			
    #####:  920:      return 0;
        -:  921:			
        -:  922:    case gardens:
    #####:  923:      return -1;
        -:  924:			
        -:  925:    case mine:
    #####:  926:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  927:
    #####:  928:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  929:	{
    #####:  930:	  return -1;
        -:  931:	}
        -:  932:		
    #####:  933:      if (choice2 > treasure_map || choice2 < curse)
        -:  934:	{
    #####:  935:	  return -1;
        -:  936:	}
        -:  937:
    #####:  938:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  939:	{
    #####:  940:	  return -1;
        -:  941:	}
        -:  942:
    #####:  943:      gainCard(choice2, state, 2, currentPlayer);
        -:  944:
        -:  945:      //discard card from hand
    #####:  946:      discardCard(handPos, currentPlayer, state, 0);
        -:  947:
        -:  948:      //discard trashed card
    #####:  949:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  950:	{
    #####:  951:	  if (state->hand[currentPlayer][i] == j)
        -:  952:	    {
    #####:  953:	      discardCard(i, currentPlayer, state, 0);			
    #####:  954:	      break;
        -:  955:	    }
        -:  956:	}
        -:  957:			
    #####:  958:      return 0;
        -:  959:			
        -:  960:    case remodel:
        -:  961:    
    #####:  962:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  963:
    #####:  964:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  965:	{
    #####:  966:	  return -1;
        -:  967:	}
        -:  968:
    #####:  969:      gainCard(choice2, state, 0, currentPlayer);
        -:  970:
        -:  971:      //discard card from hand
    #####:  972:      discardCard(handPos, currentPlayer, state, 0);
        -:  973:
        -:  974:      //discard trashed card
    #####:  975:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  976:	{
    #####:  977:	  if (state->hand[currentPlayer][i] == j)
        -:  978:	    {
    #####:  979:	      discardCard(i, currentPlayer, state, 0);			
    #####:  980:	      break;
        -:  981:	    }
        -:  982:	}
        -:  983:
        -:  984:
    #####:  985:      return 0;
        -:  986:		
        -:  987:    case smithy:
    #####:  988:        playSmithy(state, handPos);
        -:  989:    /*
        -:  990:      //+3 Cards
        -:  991:      for (i = 0; i < 3; i++)
        -:  992:	{
        -:  993:	  drawCard(currentPlayer, state);
        -:  994:	}
        -:  995:			
        -:  996:      //discard card from hand
        -:  997:      discardCard(handPos, currentPlayer, state, 0);
        -:  998:      return 0; */
        -:  999:		
        -: 1000:    case village:
        -: 1001:      //+1 Card
    #####: 1002:      drawCard(currentPlayer, state);
        -: 1003:			
        -: 1004:      //+2 Actions
    #####: 1005:      state->numActions = state->numActions + 2;
        -: 1006:			
        -: 1007:      //discard played card from hand
    #####: 1008:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1009:      return 0;
        -: 1010:		
        -: 1011:    case baron:
    #####: 1012:      state->numBuys++;//Increase buys by 1!
    #####: 1013:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1014:	int p = 0;//Iterator for hand!
    #####: 1015:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1016:	while(card_not_discarded){
    #####: 1017:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1018:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1019:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1020:	    state->discardCount[currentPlayer]++;
    #####: 1021:	    for (;p < state->handCount[currentPlayer]; p++){
    #####: 1022:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1023:	    }
    #####: 1024:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1025:	    state->handCount[currentPlayer]--;
    #####: 1026:	    card_not_discarded = 0;//Exit the loop
        -: 1027:	  }
    #####: 1028:	  else if (p > state->handCount[currentPlayer]){
        -: 1029:	    if(DEBUG) {
        -: 1030:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1031:	      printf("Must gain an estate if there are any\n");
        -: 1032:	    }
    #####: 1033:	    if (supplyCount(estate, state) > 0){
    #####: 1034:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1035:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1036:	      if (supplyCount(estate, state) == 0){
    #####: 1037:		isGameOver(state);
        -: 1038:	      }
        -: 1039:	    }
    #####: 1040:	    card_not_discarded = 0;//Exit the loop
        -: 1041:	  }
        -: 1042:			    
        -: 1043:	  else{
    #####: 1044:	    p++;//Next card
        -: 1045:	  }
        -: 1046:	}
        -: 1047:      }
        -: 1048:			    
        -: 1049:      else{
    #####: 1050:	if (supplyCount(estate, state) > 0){
    #####: 1051:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1052:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1053:	  if (supplyCount(estate, state) == 0){
    #####: 1054:	    isGameOver(state);
        -: 1055:	  }
        -: 1056:	}
        -: 1057:      }
        -: 1058:	    
        -: 1059:      
    #####: 1060:      return 0;
        -: 1061:		
        -: 1062:    case great_hall:
    #####: 1063:        playGreatHall(state, handPos);
        -: 1064:    /*
        -: 1065:      //+1 Card
        -: 1066:      drawCard(currentPlayer, state);
        -: 1067:			
        -: 1068:      //+1 Actions
        -: 1069:      state->numActions++;
        -: 1070:			
        -: 1071:      //discard card from hand
        -: 1072:      discardCard(handPos, currentPlayer, state, 0);
        -: 1073:      return 0; */
        -: 1074:		
        -: 1075:    case minion:
    #####: 1076:        playMinion(state, handPos, choice1, choice2);
        -: 1077:    /*
        -: 1078:      //+1 action
        -: 1079:      state->numActions++;
        -: 1080:			
        -: 1081:      //discard card from hand
        -: 1082:      discardCard(handPos, currentPlayer, state, 0);
        -: 1083:			
        -: 1084:      if (choice1)		//+2 coins
        -: 1085:	{
        -: 1086:	  state->coins = state->coins + 2;
        -: 1087:	}
        -: 1088:			
        -: 1089:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1090:	{
        -: 1091:	  //discard hand
        -: 1092:	  while(numHandCards(state) > 0)
        -: 1093:	    {
        -: 1094:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1095:	    }
        -: 1096:				
        -: 1097:	  //draw 4
        -: 1098:	  for (i = 0; i < 4; i++)
        -: 1099:	    {
        -: 1100:	      drawCard(currentPlayer, state);
        -: 1101:	    }
        -: 1102:				
        -: 1103:	  //other players discard hand and redraw if hand size > 4
        -: 1104:	  for (i = 0; i < state->numPlayers; i++)
        -: 1105:	    {
        -: 1106:	      if (i != currentPlayer)
        -: 1107:		{
        -: 1108:		  if ( state->handCount[i] > 4 )
        -: 1109:		    {
        -: 1110:		      //discard hand
        -: 1111:		      while( state->handCount[i] > 0 )
        -: 1112:			{
        -: 1113:			  discardCard(handPos, i, state, 0);
        -: 1114:			}
        -: 1115:							
        -: 1116:		      //draw 4
        -: 1117:		      for (j = 0; j < 4; j++)
        -: 1118:			{
        -: 1119:			  drawCard(i, state);
        -: 1120:			}
        -: 1121:		    }
        -: 1122:		}
        -: 1123:	    }
        -: 1124:				
        -: 1125:	}
        -: 1126:      return 0; */
        -: 1127:		
        -: 1128:    case steward:
    #####: 1129:      if (choice1 == 1)
        -: 1130:	{
        -: 1131:	  //+2 cards
    #####: 1132:	  drawCard(currentPlayer, state);
    #####: 1133:	  drawCard(currentPlayer, state);
        -: 1134:	}
    #####: 1135:      else if (choice1 == 2)
        -: 1136:	{
        -: 1137:	  //+2 coins
    #####: 1138:	  state->coins = state->coins + 2;
        -: 1139:	}
        -: 1140:      else
        -: 1141:	{
        -: 1142:	  //trash 2 cards in hand
    #####: 1143:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1144:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1145:	}
        -: 1146:			
        -: 1147:      //discard card from hand
    #####: 1148:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1149:      return 0;
        -: 1150:		
        -: 1151:    case tribute:
    #####: 1152:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1153:	if (state->deckCount[nextPlayer] > 0){
    #####: 1154:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1155:	  state->deckCount[nextPlayer]--;
        -: 1156:	}
    #####: 1157:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1158:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1159:	  state->discardCount[nextPlayer]--;
        -: 1160:	}
        -: 1161:	else{
        -: 1162:	  //No Card to Reveal
        -: 1163:	  if (DEBUG){
        -: 1164:	    printf("No cards to reveal\n");
        -: 1165:	  }
        -: 1166:	}
        -: 1167:      }
        -: 1168:	    
        -: 1169:      else{
    #####: 1170:	if (state->deckCount[nextPlayer] == 0){
    #####: 1171:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1172:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1173:	    state->deckCount[nextPlayer]++;
    #####: 1174:	    state->discard[nextPlayer][i] = -1;
    #####: 1175:	    state->discardCount[nextPlayer]--;
        -: 1176:	  }
        -: 1177:			    
    #####: 1178:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1179:	} 
    #####: 1180:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1181:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1182:	state->deckCount[nextPlayer]--;
    #####: 1183:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1184:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1185:	state->deckCount[nextPlayer]--;
        -: 1186:      }    
        -: 1187:		       
    #####: 1188:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1189:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1190:	state->playedCardCount++;
    #####: 1191:	tributeRevealedCards[1] = -1;
        -: 1192:      }
        -: 1193:
    #####: 1194:      for (i = 0; i <= 2; i ++){
    #####: 1195:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1196:	  state->coins += 2;
        -: 1197:	}
        -: 1198:		    
    #####: 1199:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1200:	  drawCard(currentPlayer, state);
    #####: 1201:	  drawCard(currentPlayer, state);
        -: 1202:	}
        -: 1203:	else{//Action Card
    #####: 1204:	  state->numActions = state->numActions + 2;
        -: 1205:	}
        -: 1206:      }
        -: 1207:	    
    #####: 1208:      return 0;
        -: 1209:		
        -: 1210:    case ambassador:
    #####: 1211:      j = 0;		//used to check if player has enough cards to discard
        -: 1212:
    #####: 1213:      if (choice2 > 2 || choice2 < 0)
        -: 1214:	{
    #####: 1215:	  return -1;				
        -: 1216:	}
        -: 1217:
    #####: 1218:      if (choice1 == handPos)
        -: 1219:	{
    #####: 1220:	  return -1;
        -: 1221:	}
        -: 1222:
    #####: 1223:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1224:	{
    #####: 1225:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1226:	    {
    #####: 1227:	      j++;
        -: 1228:	    }
        -: 1229:	}
    #####: 1230:      if (j < choice2)
        -: 1231:	{
    #####: 1232:	  return -1;				
        -: 1233:	}
        -: 1234:
        -: 1235:      if (DEBUG) 
        -: 1236:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1237:
        -: 1238:      //increase supply count for choosen card by amount being discarded
    #####: 1239:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1240:			
        -: 1241:      //each other player gains a copy of revealed card
    #####: 1242:      for (i = 0; i < state->numPlayers; i++)
        -: 1243:	{
    #####: 1244:	  if (i != currentPlayer)
        -: 1245:	    {
    #####: 1246:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1247:	    }
        -: 1248:	}
        -: 1249:
        -: 1250:      //discard played card from hand
    #####: 1251:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1252:
        -: 1253:      //trash copies of cards returned to supply
    #####: 1254:      for (j = 0; j < choice2; j++)
        -: 1255:	{
    #####: 1256:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1257:	    {
    #####: 1258:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1259:		{
    #####: 1260:		  discardCard(i, currentPlayer, state, 1);
    #####: 1261:		  break;
        -: 1262:		}
        -: 1263:	    }
        -: 1264:	}			
        -: 1265:
    #####: 1266:      return 0;
        -: 1267:		
        -: 1268:    case cutpurse:
        -: 1269:
    #####: 1270:      updateCoins(currentPlayer, state, 2);
    #####: 1271:      for (i = 0; i < state->numPlayers; i++)
        -: 1272:	{
    #####: 1273:	  if (i != currentPlayer)
        -: 1274:	    {
    #####: 1275:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1276:		{
    #####: 1277:		  if (state->hand[i][j] == copper)
        -: 1278:		    {
    #####: 1279:		      discardCard(j, i, state, 0);
    #####: 1280:		      break;
        -: 1281:		    }
    #####: 1282:		  if (j == state->handCount[i])
        -: 1283:		    {
    #####: 1284:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1285:			{
        -: 1286:			  if (DEBUG)
        -: 1287:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1288:			}	
    #####: 1289:		      break;
        -: 1290:		    }		
        -: 1291:		}
        -: 1292:					
        -: 1293:	    }
        -: 1294:				
        -: 1295:	}				
        -: 1296:
        -: 1297:      //discard played card from hand
    #####: 1298:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1299:
    #####: 1300:      return 0;
        -: 1301:
        -: 1302:		
        -: 1303:    case embargo: 
        -: 1304:      //+2 Coins
    #####: 1305:      state->coins = state->coins + 2;
        -: 1306:			
        -: 1307:      //see if selected pile is in play
    #####: 1308:      if ( state->supplyCount[choice1] == -1 )
        -: 1309:	{
    #####: 1310:	  return -1;
        -: 1311:	}
        -: 1312:			
        -: 1313:      //add embargo token to selected supply pile
    #####: 1314:      state->embargoTokens[choice1]++;
        -: 1315:			
        -: 1316:      //trash card
    #####: 1317:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1318:      return 0;
        -: 1319:		
        -: 1320:    case outpost:
        -: 1321:      //set outpost flag
        2: 1322:      state->outpostPlayed++;
        -: 1323:			
        -: 1324:      //discard card
        2: 1325:      discardCard(handPos, currentPlayer, state, 0);
        2: 1326:      return 0;
        -: 1327:		
        -: 1328:    case salvager:
        -: 1329:      //+1 buy
    #####: 1330:      state->numBuys++;
        -: 1331:			
    #####: 1332:      if (choice1)
        -: 1333:	{
        -: 1334:	  //gain coins equal to trashed card
    #####: 1335:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1336:	  //trash card
    #####: 1337:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1338:	}
        -: 1339:			
        -: 1340:      //discard card
    #####: 1341:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1342:      return 0;
        -: 1343:		
        -: 1344:    case sea_hag:
    #####: 1345:      for (i = 0; i < state->numPlayers; i++){
    #####: 1346:	if (i != currentPlayer){
    #####: 1347:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1348:	  state->discardCount[i]++;
    #####: 1349:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1350:	}
        -: 1351:      }
    #####: 1352:      return 0;
        -: 1353:		
        -: 1354:    case treasure_map:
        -: 1355:      //search hand for another treasure_map
    #####: 1356:      index = -1;
    #####: 1357:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1358:	{
    #####: 1359:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1360:	    {
    #####: 1361:	      index = i;
    #####: 1362:	      break;
        -: 1363:	    }
        -: 1364:	}
    #####: 1365:      if (index > -1)
        -: 1366:	{
        -: 1367:	  //trash both treasure cards
    #####: 1368:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1369:	  discardCard(index, currentPlayer, state, 1);
        -: 1370:
        -: 1371:	  //gain 4 Gold cards
    #####: 1372:	  for (i = 0; i < 4; i++)
        -: 1373:	    {
    #####: 1374:	      gainCard(gold, state, 1, currentPlayer);
        -: 1375:	    }
        -: 1376:				
        -: 1377:	  //return success
    #####: 1378:	  return 1;
        -: 1379:	}
        -: 1380:			
        -: 1381:      //no second treasure_map found in hand
    #####: 1382:      return -1;
        -: 1383:    }
        -: 1384:	
    #####: 1385:  return -1;
        -: 1386:}
        -: 1387:
      109: 1388:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1389:{
        -: 1390:	
        -: 1391:  //if card is not trashed, added to Played pile 
      109: 1392:  if (trashFlag < 1)
        -: 1393:    {
        -: 1394:      //add card to played pile
       46: 1395:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       46: 1396:      state->playedCardCount++;
        -: 1397:    }
        -: 1398:	
        -: 1399:  //set played card to -1
      109: 1400:  state->hand[currentPlayer][handPos] = -1;
        -: 1401:	
        -: 1402:  //remove card from player's hand
      109: 1403:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1404:    {
        -: 1405:      //reduce number of cards in hand
       42: 1406:      state->handCount[currentPlayer]--;
        -: 1407:    }
       67: 1408:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1409:    {
        -: 1410:      //reduce number of cards in hand
    #####: 1411:      state->handCount[currentPlayer]--;
        -: 1412:    }
        -: 1413:  else 	
        -: 1414:    {
        -: 1415:      //replace discarded card with last card in hand
       67: 1416:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1417:      //set last card to -1
       67: 1418:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1419:      //reduce number of cards in hand
       67: 1420:      state->handCount[currentPlayer]--;
        -: 1421:    }
        -: 1422:	
      109: 1423:  return 0;
        -: 1424:}
        -: 1425:
     2037: 1426:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1427:{
        -: 1428:  //Note: supplyPos is enum of choosen card
        -: 1429:	
        -: 1430:  //check if supply pile is empty (0) or card is not used in game (-1)
     2037: 1431:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1432:    {
      126: 1433:      return -1;
        -: 1434:    }
        -: 1435:	
        -: 1436:  //added card for [whoseTurn] current player:
        -: 1437:  // toFlag = 0 : add to discard
        -: 1438:  // toFlag = 1 : add to deck
        -: 1439:  // toFlag = 2 : add to hand
        -: 1440:
     1911: 1441:  if (toFlag == 1)
        -: 1442:    {
      357: 1443:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
      357: 1444:      state->deckCount[player]++;
        -: 1445:    }
     1554: 1446:  else if (toFlag == 2)
        -: 1447:    {
      357: 1448:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
      357: 1449:      state->handCount[player]++;
        -: 1450:    }
        -: 1451:  else
        -: 1452:    {
     1197: 1453:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     1197: 1454:      state->discardCount[player]++;
        -: 1455:    }
        -: 1456:	
        -: 1457:  //decrease number in supply pile
     1911: 1458:  state->supplyCount[supplyPos]--;
        -: 1459:	 
     1911: 1460:  return 0;
        -: 1461:}
        -: 1462:
     8542: 1463:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1464:{
        -: 1465:  int i;
        -: 1466:	
        -: 1467:  //reset coin count
     8542: 1468:  state->coins = 0;
        -: 1469:
        -: 1470:  //add coins for each Treasure card in player's hand
    32352: 1471:  for (i = 0; i < state->handCount[player]; i++)
        -: 1472:    {
    23810: 1473:      if (state->hand[player][i] == copper)
        -: 1474:	{
    10926: 1475:	  state->coins += 1;
        -: 1476:	}
    12884: 1477:      else if (state->hand[player][i] == silver)
        -: 1478:	{
     4200: 1479:	  state->coins += 2;
        -: 1480:	}
     8684: 1481:      else if (state->hand[player][i] == gold)
        -: 1482:	{
     4200: 1483:	  state->coins += 3;
        -: 1484:	}	
        -: 1485:    }	
        -: 1486:
        -: 1487:  //add bonus
     8542: 1488:  state->coins += bonus;
        -: 1489:
     8542: 1490:  return 0;
        -: 1491:}
        -: 1492:
        -: 1493:
        -: 1494:
        -: 1495://end of dominion.c
        -: 1496:
