TESTING scoreFor():
TEST 1: Test score for all zero.
Score value: 0. Expected value: 0. 
Test 1 Passed.
TEST 2: Test score combining positive & negative.
Score value: 10. Expected value: 10. 
Test 2 Passed.
TEST 3: Test score combining positive only.
Score value: 40. Expected value: 40. 
Test 3 Passed.
All tests passed!
TESTING scoreFor():
TEST 1: Test if no coins.
Coin value: 0. Expected value: 0. 
Test 1 Passed.
TEST 2: Test all coopers.
Coin value: 5. Expected value: 5. 
Test 2 Passed.
TEST 3: Test mix between coopers,silvers,and golds.
Coin value: 10. Expected value: 10. 
Test 3 Passed.
TEST 4: Test with bonus.
Coin value: 10. Expected value: 10. 
Test 4 Passed.
All tests passed!
TESTING isGameOver():
TEST 1: Test if province is negative.
# of province card in supply: -8. Dominion need condition state->supplyCount[province] =< 0!
Result value: 0. Expected value: 0 (Game Not Over). 
Test 1 Failed.
TEST 2: Test if dutchy empty.
Result value: 0. Expected value: 0 (Game Not Over). 
Test 2 Passed.
TEST 3: Test if estate empty.
Result value: 0. Expected value: 0 (Game Not Over). 
Test 3 Passed.
TEST 4: Test when 4 supplies zero
Testing with duchy, estate, curse and gold
Result value: 1. Expected value: 1 (Game Is Over). 
Test 4 Passed.
TEST 5: Test when 2 supplies zero but 1 with province.
Testing with provice and gold
Result value: 1. Expected value: 1 (Game Is Over). 
Test 5 Passed.
All tests passed, except test # 1 since it is intentional.
TESTING fullDeckCount():
Specific card for this test: 'ADVENTURER'. Assume using Player 1 Point of View.
TEST 1: No Adventurer at deck, discard and hand
Result value: 0. Expected value: 0. 
Test 1 Passed.
TEST 2: No Adventurer at deck, discard. 1 Adventurer at hand
Result value: 1. Expected value: 1. 
Test 2 Passed.
TEST 3: No Adventurer at deck and discard. 1 Adventurer at player 1 and player 2 hand.
Result value: 1. Expected value: 1. 
Test 3 Passed.
TEST 4: 1 Adventurer at Player 1 deck, discard and hand.
Result value: 3. Expected value: 3. 
Test 4 Passed.
All tests passed.
----------------- Testing Card: smithy ----------------
TEST 1: Check current player's hand card.
Player's hand card = 9, Expected = 7
Test 1 Failed: More / Less than 3 cards.

TEST 2: Check current player's deck size.
Player's deck = 0, expected = 2
Test 2 Failed: More / Less than (-3) cards FROM deck.

TEST 3: Check other player's (opponent) hand card & deck size.
Other Hand count = 5, expected = 5
Other Deck count = 5, expected = 5
Test 3 Passed: Other player's state doesn't change. 

TEST 4: Check Victory piles.
Test 4 Passed: Victory piles NO CHANGE.

TEST 5: Check Kingdom piles.
Test 5 Passed: Kingdom piles NO CHANGE.

 >>>>> SUCCESS: Testing complete smithy <<<<<

----------------- Testing Card: adventurer ----------------
TEST 1: Check current player's hand card (2 treasure cards at top).
	--> BEFORE 'adventurer': 
Player's hand card = 5, Expected = 5
	--> AFTER 'adventurer': 
Player's hand card = -121, Expected = 6
Player's deck = 0, Expected = 3
Player's discard = 131, Expected = 0
Test 1 Passed: DRAW total of MORE/LESS than 2 cards -- 2 Treasure cards not to HAND and 0 card not to DISCARD.

TEST 2: Check current player's hand card (2 treasure cards not at top, expect a card in discard pile).
	-->BEFORE 'adventurer': 
Player's hand card = 5, Expected = 5
	-->AFTER 'adventurer': 
Player's hand card = -121, Expected = 6
Player's deck = 0, Expected = 2
Player's discard = 131, Expected = 1
Test 2 Failed: DRAW total of MORE/LESS than 3 cards -- 2 Treasure cards not to HAND and 1 card not to DISCARD.

TEST 3: Check other player's (opponent) hand card & deck size.
Other Hand count = 5, expected = 5
Other Deck count = 5, expected = 5
Test 3 Passed: Other player's state doesn't change. 

TEST 4: Check Victory piles.
Test 4 Passed: Victory piles NO CHANGE.

TEST 5: Check Kingdom piles.
Test 5 Passed: Kingdom piles NO CHANGE.

 >>>>> SUCCESS: Testing complete adventurer <<<<<

----------------- Testing Card: village ----------------

TEST 1: Check current player's hand card.
Hand count = 5, expected = 5
Test 1 Passed: + 1 card.

TEST 2: Check current player's action.
Player's action = 5, expected = 3
Test 2 Failed: More / Less than 2 actions.

TEST 3: Check OTHER player's hand card. 
Other Hand count = 5, expected = 5
Test 3 Passed: Other player's state doesn't change.

TEST 4: Check Victory piles.
Test 4 Passed: Victory piles NO CHANGE.

TEST 5: Check Kingdom piles.
Test 5 Passed: Kingdom piles NO CHANGE.

 >>>>> SUCCESS: Testing complete village <<<<<

----------------- Testing Card: council_room ----------------

TEST 1: Check current player's hand card.
Hand count = 6, expected = 8
Test 1 Failed: More / Less than 4 cards.

TEST 2: Check current player's buy.
Player's buy = 3, expected = 2
Test 2 Failed: More / Less than 1 buy.

TEST 3: Check OTHER player's hand card & deck. 
Other Hand count = 6, expected = 6
Other Deck count = 4, expected = 4
Test 3 Passed: Other player's state changes +1 card TO hand.

TEST 4: Check Victory piles.
Test 4 Passed: Victory piles NO CHANGE.

TEST 5: Check Kingdom piles.
Test 5 Passed: Kingdom piles NO CHANGE.

 >>>>> SUCCESS: Testing complete council_room <<<<<

File 'dominion.c'
Lines executed:44.11% of 569
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:125
        -:    0:Programs:89
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
     3516:    8:int compare(const void* a, const void* b) {
     3516:    9:  if (*(int*)a > *(int*)b)
        1:   10:    return 1;
     3515:   11:  if (*(int*)a < *(int*)b)
      937:   12:    return -1;
     2578:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
      125:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      125:   44:  SelectStream(1);
      125:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      125:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
        8:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      117:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     1287:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    12870:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    11700:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      117:   73:  if (numPlayers == 2)
        -:   74:    {
      117:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      117:   87:  if (numPlayers == 2)
        -:   88:    {
      117:   89:      state->supplyCount[estate] = 8;
      117:   90:      state->supplyCount[duchy] = 8;
      117:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      117:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      117:  102:  state->supplyCount[silver] = 40;
      117:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     2457:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    19305:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    18135:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1170:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      104:  115:		  if (numPlayers == 2){ 
       52:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     1118:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     1170:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    16965:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      351:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
      234:  140:      state->deckCount[i] = 0;
      936:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      702:  143:	  state->deck[i][j] = estate;
      702:  144:	  state->deckCount[i]++;
        -:  145:	}
     1872:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     1638:  148:	  state->deck[i][j] = copper;
     1638:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      351:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
      234:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      351:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      234:  166:      state->handCount[i] = 0;
      234:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     3276:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     3159:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      117:  182:  state->outpostPlayed = 0;
      117:  183:  state->phase = 0;
      117:  184:  state->numActions = 1;
      117:  185:  state->numBuys = 1;
      117:  186:  state->playedCardCount = 0;
      117:  187:  state->whoseTurn = 0;
      117:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      702:  192:  for (it = 0; it < 5; it++){
      585:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
      117:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      117:  198:  return 0;
        -:  199:}
        -:  200:
    16367:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    16367:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    16367:  209:  if (state->deckCount[player] < 1)
    16132:  210:    return -1;
      235:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     2815:  214:  while (state->deckCount[player] > 0) {
     2345:  215:    card = floor(Random() * state->deckCount[player]);
     2345:  216:    newDeck[newDeckPos] = state->deck[player][card];
     2345:  217:    newDeckPos++;
     8203:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
     5858:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     2345:  221:    state->deckCount[player]--;
        -:  222:  }
     2580:  223:  for (i = 0; i < newDeckPos; i++) {
     2345:  224:    state->deck[player][i] = newDeck[i];
     2345:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      235:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
       76:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
       76:  326:  int count = 0;
        -:  327:
      676:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
      600:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
      236:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
      160:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
       80:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
        4:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
       76:  343:  return count;
        -:  344:}
        -:  345:
      697:  346:int whoseTurn(struct gameState *state) {
      697:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
       87:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       87:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
      538:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      451:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      451:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
       87:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       87:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
       75:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
       12:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       87:  370:  state->outpostPlayed = 0;
       87:  371:  state->phase = 0;
       87:  372:  state->numActions = 1;
       87:  373:  state->coins = 0;
       87:  374:  state->numBuys = 1;
       87:  375:  state->playedCardCount = 0;
       87:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      522:  380:  for (k = 0; k < 5; k++){
      435:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
       87:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
       87:  387:  return 0;
        -:  388:}
        -:  389:
       33:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       33:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        7:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       26:  401:  j = 0;
      676:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      650:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
       42:  406:	  j++;
        -:  407:	}
        -:  408:    }
       26:  409:  if ( j >= 3)
        -:  410:    {
        7:  411:      return 1;
        -:  412:    }
        -:  413:
       19:  414:  return 0;
        -:  415:}
        -:  416:
       12:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
       12:  420:  int score = 0;
        -:  421:  //score from hand
       72:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
       60:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
       60:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
       60:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
       60:  427:      if (state->hand[player][i] == province) { score = score + 6; };
       60:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
       60:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       72:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
       60:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
       60:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
       60:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
       60:  438:      if (state->discard[player][i] == province) { score = score + 6; };
       60:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
       60:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       72:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
       60:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
       60:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
       60:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
       60:  449:      if (state->deck[player][i] == province) { score = score + 6; };
       60:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
       60:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
       12:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    10183:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    10183:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
     8072:  533:    for (i = 0; i < state->discardCount[player];i++){
        5:  534:      state->deck[player][i] = state->discard[player][i];
        5:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     8067:  538:    state->deckCount[player] = state->discardCount[player];
     8067:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     8067:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     8067:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     8067:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     8067:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     8067:  559:    if (deckCounter == 0)
     8066:  560:      return -1;
        -:  561:
        1:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  563:    state->deckCount[player]--;
        1:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     2116:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     2116:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     2116:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     2116:  576:    state->deckCount[player]--;
     2116:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     2117:  580:  return 0;
        -:  581:}
        -:  582:
        -:  583://--------------------------------------------
       34:  584:void adventurerCard(struct gameState *state){
       34:  585:  int z = 0;
       34:  586:  int drawntreasure = 0;
       34:  587:  int currentPlayer = whoseTurn(state);
        -:  588:  int temphand[MAX_HAND];
        -:  589:  int cardDrawn;
        -:  590:
     8305:  591:  while(drawntreasure<3){
     8237:  592:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
     8066:  593:        shuffle(currentPlayer, state);
        -:  594:    }
     8237:  595:    drawCard(currentPlayer, state);
     8237:  596:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     8237:  597:    if (cardDrawn == silver || cardDrawn == gold)
       75:  598:      drawntreasure++;
        -:  599:    else{
     8162:  600:      temphand[z]=cardDrawn;
     8162:  601:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     8162:  602:      z++;
        -:  603:    }
        -:  604:    }
     8230:  605:    while(z-1>=0){
     8162:  606:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     8162:  607:    z=z-1;
        -:  608:    }
       34:  609:}
        -:  610:
      107:  611:void smithyCard(struct gameState *state, int handPos){
        -:  612:  int i;
      107:  613:  int currentPlayer = whoseTurn(state);
        -:  614:
      642:  615:  for (i = 0; i < 5; i++) {
      535:  616:    drawCard(currentPlayer, state);
        -:  617:  }
        -:  618:      
        -:  619:    //discard card from hand
      107:  620:  discardCard(handPos, currentPlayer, state, 0);
      107:  621:}
        -:  622:
      113:  623:void councilRoomCard(struct gameState *state, int handPos){
        -:  624:  int i;
      113:  625:  int currentPlayer = whoseTurn(state);
        -:  626:
      339:  627:  for (i = 0; i < 2; i++) {
      226:  628:    drawCard(currentPlayer, state);
        -:  629:  }
        -:  630:      
        -:  631:  //+1 Buy
      113:  632:  state->numBuys = state->numBuys + 2;
        -:  633:      
        -:  634:  //Each other player draws a card
      339:  635:  for (i = 0; i < state->numPlayers; i++) {
      226:  636:    if ( i != currentPlayer ) {
      113:  637:        drawCard(i, state);
        -:  638:    }
        -:  639:  }
        -:  640:      
        -:  641:  //put played card in played card pile
      113:  642:  discardCard(handPos, currentPlayer, state, 0);
      113:  643:}
        -:  644:
       50:  645:void villageCard(struct gameState *state, int handPos){
       50:  646:  int currentPlayer = whoseTurn(state);
        -:  647:
        -:  648:  //+1 Card
       50:  649:  drawCard(currentPlayer, state);
        -:  650:      
        -:  651:  //+2 Actions
       50:  652:  state->numActions = state->numActions + 4;
        -:  653:      
        -:  654:  //discard played card from hand
       50:  655:  discardCard(handPos, currentPlayer, state, 0);
       50:  656:}
        -:  657:
    #####:  658:void greatHallCard(struct gameState *state, int handPos){
    #####:  659:  int currentPlayer = whoseTurn(state);
        -:  660:    //+1 Card
    #####:  661:    drawCard(currentPlayer, state);
        -:  662:      
        -:  663:    //+1 Actions
    #####:  664:    state->numActions++;
        -:  665:
    #####:  666:}
        -:  667://--------------------------------------------
        -:  668:
        -:  669:
    #####:  670:int getCost(int cardNumber)
        -:  671:{
    #####:  672:  switch( cardNumber ) 
        -:  673:    {
        -:  674:    case curse:
    #####:  675:      return 0;
        -:  676:    case estate:
    #####:  677:      return 2;
        -:  678:    case duchy:
    #####:  679:      return 5;
        -:  680:    case province:
    #####:  681:      return 8;
        -:  682:    case copper:
    #####:  683:      return 0;
        -:  684:    case silver:
    #####:  685:      return 3;
        -:  686:    case gold:
    #####:  687:      return 6;
        -:  688:    case adventurer:
    #####:  689:      return 6;
        -:  690:    case council_room:
    #####:  691:      return 5;
        -:  692:    case feast:
    #####:  693:      return 4;
        -:  694:    case gardens:
    #####:  695:      return 4;
        -:  696:    case mine:
    #####:  697:      return 5;
        -:  698:    case remodel:
    #####:  699:      return 4;
        -:  700:    case smithy:
    #####:  701:      return 4;
        -:  702:    case village:
    #####:  703:      return 3;
        -:  704:    case baron:
    #####:  705:      return 4;
        -:  706:    case great_hall:
    #####:  707:      return 3;
        -:  708:    case minion:
    #####:  709:      return 5;
        -:  710:    case steward:
    #####:  711:      return 3;
        -:  712:    case tribute:
    #####:  713:      return 5;
        -:  714:    case ambassador:
    #####:  715:      return 3;
        -:  716:    case cutpurse:
    #####:  717:      return 4;
        -:  718:    case embargo: 
    #####:  719:      return 2;
        -:  720:    case outpost:
    #####:  721:      return 5;
        -:  722:    case salvager:
    #####:  723:      return 4;
        -:  724:    case sea_hag:
    #####:  725:      return 4;
        -:  726:    case treasure_map:
    #####:  727:      return 4;
        -:  728:    }
        -:  729:	
    #####:  730:  return -1;
        -:  731:}
        -:  732:
      306:  733:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  734:{
        -:  735:  int i;
        -:  736:  int j;
        -:  737:  int k;
        -:  738:  int x;
        -:  739:  int index;
      306:  740:  int currentPlayer = whoseTurn(state);
      306:  741:  int nextPlayer = currentPlayer + 1;
        -:  742:
      306:  743:  int tributeRevealedCards[2] = {-1, -1};
        -:  744:  int temphand[MAX_HAND];// moved above the if statement
      306:  745:  int drawntreasure=0;
        -:  746:  int cardDrawn;
      306:  747:  int z = 0;// this is the counter for the temp hand
      306:  748:  if (nextPlayer > (state->numPlayers - 1)){
       27:  749:    nextPlayer = 0;
        -:  750:  }
        -:  751:  
        -:  752:	
        -:  753:  //uses switch to select card and perform actions
      306:  754:  switch( card ) 
        -:  755:    {
        -:  756:    // modified 1
        -:  757:    case adventurer:
       34:  758:      adventurerCard(state);  
       34:  759:      return 0;
        -:  760:			
        -:  761:    // modified 2  
        -:  762:    case council_room:
      113:  763:      councilRoomCard(state,handPos);
      113:  764:      return 0;
        -:  765:			
        -:  766:    case feast:
        -:  767:      //gain card with cost up to 5
        -:  768:      //Backup hand
    #####:  769:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  770:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  771:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  772:      }
        -:  773:      //Backup hand
        -:  774:
        -:  775:      //Update Coins for Buy
    #####:  776:      updateCoins(currentPlayer, state, 5);
    #####:  777:      x = 1;//Condition to loop on
    #####:  778:      while( x == 1) {//Buy one card
    #####:  779:	if (supplyCount(choice1, state) <= 0){
        -:  780:	  if (DEBUG)
        -:  781:	    printf("None of that card left, sorry!\n");
        -:  782:
        -:  783:	  if (DEBUG){
        -:  784:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  785:	  }
        -:  786:	}
    #####:  787:	else if (state->coins < getCost(choice1)){
    #####:  788:	  printf("That card is too expensive!\n");
        -:  789:
        -:  790:	  if (DEBUG){
        -:  791:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  792:	  }
        -:  793:	}
        -:  794:	else{
        -:  795:
        -:  796:	  if (DEBUG){
        -:  797:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  798:	  }
        -:  799:
    #####:  800:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  801:	  x = 0;//No more buying cards
        -:  802:
        -:  803:	  if (DEBUG){
        -:  804:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  805:	  }
        -:  806:
        -:  807:	}
        -:  808:      }     
        -:  809:
        -:  810:      //Reset Hand
    #####:  811:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  812:	state->hand[currentPlayer][i] = temphand[i];
    #####:  813:	temphand[i] = -1;
        -:  814:      }
        -:  815:      //Reset Hand
        -:  816:      			
    #####:  817:      return 0;
        -:  818:			
        -:  819:    case gardens:
    #####:  820:      return -1;
        -:  821:			
        -:  822:    case mine:
    #####:  823:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  824:
    #####:  825:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  826:	{
    #####:  827:	  return -1;
        -:  828:	}
        -:  829:		
    #####:  830:      if (choice2 > treasure_map || choice2 < curse)
        -:  831:	{
    #####:  832:	  return -1;
        -:  833:	}
        -:  834:
    #####:  835:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  836:	{
    #####:  837:	  return -1;
        -:  838:	}
        -:  839:
    #####:  840:      gainCard(choice2, state, 2, currentPlayer);
        -:  841:
        -:  842:      //discard card from hand
    #####:  843:      discardCard(handPos, currentPlayer, state, 0);
        -:  844:
        -:  845:      //discard trashed card
    #####:  846:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  847:	{
    #####:  848:	  if (state->hand[currentPlayer][i] == j)
        -:  849:	    {
    #####:  850:	      discardCard(i, currentPlayer, state, 0);			
    #####:  851:	      break;
        -:  852:	    }
        -:  853:	}
        -:  854:			
    #####:  855:      return 0;
        -:  856:			
        -:  857:    case remodel:
    #####:  858:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  859:
    #####:  860:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  861:	{
    #####:  862:	  return -1;
        -:  863:	}
        -:  864:
    #####:  865:      gainCard(choice2, state, 0, currentPlayer);
        -:  866:
        -:  867:      //discard card from hand
    #####:  868:      discardCard(handPos, currentPlayer, state, 0);
        -:  869:
        -:  870:      //discard trashed card
    #####:  871:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  872:	{
    #####:  873:	  if (state->hand[currentPlayer][i] == j)
        -:  874:	    {
    #####:  875:	      discardCard(i, currentPlayer, state, 0);			
    #####:  876:	      break;
        -:  877:	    }
        -:  878:	}
        -:  879:
        -:  880:
    #####:  881:      return 0;
        -:  882:		
        -:  883:    // modified 3
        -:  884:    case smithy:
      101:  885:      smithyCard(state,handPos);
      101:  886:      return 0;
        -:  887:		
        -:  888:    // modified 4
        -:  889:    case village:
       50:  890:      villageCard(state,handPos);
       50:  891:      return 0;
        -:  892:		
        -:  893:    case baron:
    #####:  894:      state->numBuys++;//Increase buys by 1!
    #####:  895:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  896:	int p = 0;//Iterator for hand!
    #####:  897:	int card_not_discarded = 1;//Flag for discard set!
    #####:  898:	while(card_not_discarded){
    #####:  899:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  900:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  901:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  902:	    state->discardCount[currentPlayer]++;
    #####:  903:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  904:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  905:	    }
    #####:  906:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  907:	    state->handCount[currentPlayer]--;
    #####:  908:	    card_not_discarded = 0;//Exit the loop
        -:  909:	  }
    #####:  910:	  else if (p > state->handCount[currentPlayer]){
        -:  911:	    if(DEBUG) {
        -:  912:	      printf("No estate cards in your hand, invalid choice\n");
        -:  913:	      printf("Must gain an estate if there are any\n");
        -:  914:	    }
    #####:  915:	    if (supplyCount(estate, state) > 0){
    #####:  916:	      gainCard(estate, state, 0, currentPlayer);
    #####:  917:	      state->supplyCount[estate]--;//Decrement estates
    #####:  918:	      if (supplyCount(estate, state) == 0){
    #####:  919:		isGameOver(state);
        -:  920:	      }
        -:  921:	    }
    #####:  922:	    card_not_discarded = 0;//Exit the loop
        -:  923:	  }
        -:  924:			    
        -:  925:	  else{
    #####:  926:	    p++;//Next card
        -:  927:	  }
        -:  928:	}
        -:  929:      }
        -:  930:			    
        -:  931:      else{
    #####:  932:	if (supplyCount(estate, state) > 0){
    #####:  933:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  934:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  935:	  if (supplyCount(estate, state) == 0){
    #####:  936:	    isGameOver(state);
        -:  937:	  }
        -:  938:	}
        -:  939:      }
        -:  940:	    
        -:  941:      
    #####:  942:      return 0;
        -:  943:		
        -:  944:    // modified 4
        -:  945:    case great_hall:
    #####:  946:      greatHallCard(state,handPos);
    #####:  947:      return 0;
        -:  948:		
        -:  949:    case minion:
        -:  950:      //+1 action
    #####:  951:      state->numActions++;
        -:  952:			
        -:  953:      //discard card from hand
    #####:  954:      discardCard(handPos, currentPlayer, state, 0);
        -:  955:			
    #####:  956:      if (choice1)		//+2 coins
        -:  957:	{
    #####:  958:	  state->coins = state->coins + 2;
        -:  959:	}
        -:  960:			
    #####:  961:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  962:	{
        -:  963:	  //discard hand
    #####:  964:	  while(numHandCards(state) > 0)
        -:  965:	    {
    #####:  966:	      discardCard(handPos, currentPlayer, state, 0);
        -:  967:	    }
        -:  968:				
        -:  969:	  //draw 4
    #####:  970:	  for (i = 0; i < 4; i++)
        -:  971:	    {
    #####:  972:	      drawCard(currentPlayer, state);
        -:  973:	    }
        -:  974:				
        -:  975:	  //other players discard hand and redraw if hand size > 4
    #####:  976:	  for (i = 0; i < state->numPlayers; i++)
        -:  977:	    {
    #####:  978:	      if (i != currentPlayer)
        -:  979:		{
    #####:  980:		  if ( state->handCount[i] > 4 )
        -:  981:		    {
        -:  982:		      //discard hand
    #####:  983:		      while( state->handCount[i] > 0 )
        -:  984:			{
    #####:  985:			  discardCard(handPos, i, state, 0);
        -:  986:			}
        -:  987:							
        -:  988:		      //draw 4
    #####:  989:		      for (j = 0; j < 4; j++)
        -:  990:			{
    #####:  991:			  drawCard(i, state);
        -:  992:			}
        -:  993:		    }
        -:  994:		}
        -:  995:	    }
        -:  996:				
        -:  997:	}
    #####:  998:      return 0;
        -:  999:		
        -: 1000:    case steward:
        8: 1001:      if (choice1 == 1)
        -: 1002:	{
        -: 1003:	  //+2 cards
        1: 1004:	  drawCard(currentPlayer, state);
        1: 1005:	  drawCard(currentPlayer, state);
        -: 1006:	}
        7: 1007:      else if (choice1 == 2)
        -: 1008:	{
        -: 1009:	  //+2 coins
        1: 1010:	  state->coins = state->coins + 2;
        -: 1011:	}
        -: 1012:      else
        -: 1013:	{
        -: 1014:	  //trash 2 cards in hand
        6: 1015:	  discardCard(choice2, currentPlayer, state, 1);
        6: 1016:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1017:	}
        -: 1018:			
        -: 1019:      //discard card from hand
        8: 1020:      discardCard(handPos, currentPlayer, state, 0);
        8: 1021:      return 0;
        -: 1022:		
        -: 1023:    case tribute:
    #####: 1024:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1025:	if (state->deckCount[nextPlayer] > 0){
    #####: 1026:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1027:	  state->deckCount[nextPlayer]--;
        -: 1028:	}
    #####: 1029:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1030:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1031:	  state->discardCount[nextPlayer]--;
        -: 1032:	}
        -: 1033:	else{
        -: 1034:	  //No Card to Reveal
        -: 1035:	  if (DEBUG){
        -: 1036:	    printf("No cards to reveal\n");
        -: 1037:	  }
        -: 1038:	}
        -: 1039:      }
        -: 1040:	    
        -: 1041:      else{
    #####: 1042:	if (state->deckCount[nextPlayer] == 0){
    #####: 1043:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1044:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1045:	    state->deckCount[nextPlayer]++;
    #####: 1046:	    state->discard[nextPlayer][i] = -1;
    #####: 1047:	    state->discardCount[nextPlayer]--;
        -: 1048:	  }
        -: 1049:			    
    #####: 1050:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1051:	} 
    #####: 1052:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1053:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1054:	state->deckCount[nextPlayer]--;
    #####: 1055:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1056:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1057:	state->deckCount[nextPlayer]--;
        -: 1058:      }    
        -: 1059:		       
    #####: 1060:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1061:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1062:	state->playedCardCount++;
    #####: 1063:	tributeRevealedCards[1] = -1;
        -: 1064:      }
        -: 1065:
    #####: 1066:      for (i = 0; i <= 2; i ++){
    #####: 1067:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1068:	  state->coins += 2;
        -: 1069:	}
        -: 1070:		    
    #####: 1071:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1072:	  drawCard(currentPlayer, state);
    #####: 1073:	  drawCard(currentPlayer, state);
        -: 1074:	}
        -: 1075:	else{//Action Card
    #####: 1076:	  state->numActions = state->numActions + 2;
        -: 1077:	}
        -: 1078:      }
        -: 1079:	    
    #####: 1080:      return 0;
        -: 1081:		
        -: 1082:    case ambassador:
    #####: 1083:      j = 0;		//used to check if player has enough cards to discard
        -: 1084:
    #####: 1085:      if (choice2 > 2 || choice2 < 0)
        -: 1086:	{
    #####: 1087:	  return -1;				
        -: 1088:	}
        -: 1089:
    #####: 1090:      if (choice1 == handPos)
        -: 1091:	{
    #####: 1092:	  return -1;
        -: 1093:	}
        -: 1094:
    #####: 1095:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1096:	{
    #####: 1097:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1098:	    {
    #####: 1099:	      j++;
        -: 1100:	    }
        -: 1101:	}
    #####: 1102:      if (j < choice2)
        -: 1103:	{
    #####: 1104:	  return -1;				
        -: 1105:	}
        -: 1106:
        -: 1107:      if (DEBUG) 
        -: 1108:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1109:
        -: 1110:      //increase supply count for choosen card by amount being discarded
    #####: 1111:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1112:			
        -: 1113:      //each other player gains a copy of revealed card
    #####: 1114:      for (i = 0; i < state->numPlayers; i++)
        -: 1115:	{
    #####: 1116:	  if (i != currentPlayer)
        -: 1117:	    {
    #####: 1118:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1119:	    }
        -: 1120:	}
        -: 1121:
        -: 1122:      //discard played card from hand
    #####: 1123:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1124:
        -: 1125:      //trash copies of cards returned to supply
    #####: 1126:      for (j = 0; j < choice2; j++)
        -: 1127:	{
    #####: 1128:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1129:	    {
    #####: 1130:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1131:		{
    #####: 1132:		  discardCard(i, currentPlayer, state, 1);
    #####: 1133:		  break;
        -: 1134:		}
        -: 1135:	    }
        -: 1136:	}			
        -: 1137:
    #####: 1138:      return 0;
        -: 1139:		
        -: 1140:    case cutpurse:
        -: 1141:
    #####: 1142:      updateCoins(currentPlayer, state, 2);
    #####: 1143:      for (i = 0; i < state->numPlayers; i++)
        -: 1144:	{
    #####: 1145:	  if (i != currentPlayer)
        -: 1146:	    {
    #####: 1147:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1148:		{
    #####: 1149:		  if (state->hand[i][j] == copper)
        -: 1150:		    {
    #####: 1151:		      discardCard(j, i, state, 0);
    #####: 1152:		      break;
        -: 1153:		    }
    #####: 1154:		  if (j == state->handCount[i])
        -: 1155:		    {
    #####: 1156:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1157:			{
        -: 1158:			  if (DEBUG)
        -: 1159:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1160:			}	
    #####: 1161:		      break;
        -: 1162:		    }		
        -: 1163:		}
        -: 1164:					
        -: 1165:	    }
        -: 1166:				
        -: 1167:	}				
        -: 1168:
        -: 1169:      //discard played card from hand
    #####: 1170:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1171:
    #####: 1172:      return 0;
        -: 1173:
        -: 1174:		
        -: 1175:    case embargo: 
        -: 1176:      //+2 Coins
    #####: 1177:      state->coins = state->coins + 2;
        -: 1178:			
        -: 1179:      //see if selected pile is in play
    #####: 1180:      if ( state->supplyCount[choice1] == -1 )
        -: 1181:	{
    #####: 1182:	  return -1;
        -: 1183:	}
        -: 1184:			
        -: 1185:      //add embargo token to selected supply pile
    #####: 1186:      state->embargoTokens[choice1]++;
        -: 1187:			
        -: 1188:      //trash card
    #####: 1189:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1190:      return 0;
        -: 1191:		
        -: 1192:    case outpost:
        -: 1193:      //set outpost flag
    #####: 1194:      state->outpostPlayed++;
        -: 1195:			
        -: 1196:      //discard card
    #####: 1197:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1198:      return 0;
        -: 1199:		
        -: 1200:    case salvager:
        -: 1201:      //+1 buy
    #####: 1202:      state->numBuys++;
        -: 1203:			
    #####: 1204:      if (choice1)
        -: 1205:	{
        -: 1206:	  //gain coins equal to trashed card
    #####: 1207:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1208:	  //trash card
    #####: 1209:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1210:	}
        -: 1211:			
        -: 1212:      //discard card
    #####: 1213:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1214:      return 0;
        -: 1215:		
        -: 1216:    case sea_hag:
    #####: 1217:      for (i = 0; i < state->numPlayers; i++){
    #####: 1218:	if (i != currentPlayer){
    #####: 1219:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1220:	  state->discardCount[i]++;
    #####: 1221:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1222:	}
        -: 1223:      }
    #####: 1224:      return 0;
        -: 1225:		
        -: 1226:    case treasure_map:
        -: 1227:      //search hand for another treasure_map
    #####: 1228:      index = -1;
    #####: 1229:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1230:	{
    #####: 1231:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1232:	    {
    #####: 1233:	      index = i;
    #####: 1234:	      break;
        -: 1235:	    }
        -: 1236:	}
    #####: 1237:      if (index > -1)
        -: 1238:	{
        -: 1239:	  //trash both treasure cards
    #####: 1240:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1241:	  discardCard(index, currentPlayer, state, 1);
        -: 1242:
        -: 1243:	  //gain 4 Gold cards
    #####: 1244:	  for (i = 0; i < 4; i++)
        -: 1245:	    {
    #####: 1246:	      gainCard(gold, state, 1, currentPlayer);
        -: 1247:	    }
        -: 1248:				
        -: 1249:	  //return success
    #####: 1250:	  return 1;
        -: 1251:	}
        -: 1252:			
        -: 1253:      //no second treasure_map found in hand
    #####: 1254:      return -1;
        -: 1255:    }
        -: 1256:	
    #####: 1257:  return -1;
        -: 1258:}
        -: 1259:
      290: 1260:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1261:{
        -: 1262:	
        -: 1263:  //if card is not trashed, added to Played pile 
      290: 1264:  if (trashFlag < 1)
        -: 1265:    {
        -: 1266:      //add card to played pile
      278: 1267:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      278: 1268:      state->playedCardCount++;
        -: 1269:    }
        -: 1270:	
        -: 1271:  //set played card to -1
      290: 1272:  state->hand[currentPlayer][handPos] = -1;
        -: 1273:	
        -: 1274:  //remove card from player's hand
      290: 1275:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1276:    {
        -: 1277:      //reduce number of cards in hand
        4: 1278:      state->handCount[currentPlayer]--;
        -: 1279:    }
      286: 1280:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1281:    {
        -: 1282:      //reduce number of cards in hand
    #####: 1283:      state->handCount[currentPlayer]--;
        -: 1284:    }
        -: 1285:  else 	
        -: 1286:    {
        -: 1287:      //replace discarded card with last card in hand
      286: 1288:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1289:      //set last card to -1
      286: 1290:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1291:      //reduce number of cards in hand
      286: 1292:      state->handCount[currentPlayer]--;
        -: 1293:    }
        -: 1294:	
      290: 1295:  return 0;
        -: 1296:}
        -: 1297:
    #####: 1298:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1299:{
        -: 1300:  //Note: supplyPos is enum of choosen card
        -: 1301:	
        -: 1302:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1303:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1304:    {
    #####: 1305:      return -1;
        -: 1306:    }
        -: 1307:	
        -: 1308:  //added card for [whoseTurn] current player:
        -: 1309:  // toFlag = 0 : add to discard
        -: 1310:  // toFlag = 1 : add to deck
        -: 1311:  // toFlag = 2 : add to hand
        -: 1312:
    #####: 1313:  if (toFlag == 1)
        -: 1314:    {
    #####: 1315:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1316:      state->deckCount[player]++;
        -: 1317:    }
    #####: 1318:  else if (toFlag == 2)
        -: 1319:    {
    #####: 1320:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1321:      state->handCount[player]++;
        -: 1322:    }
        -: 1323:  else
        -: 1324:    {
    #####: 1325:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1326:      state->discardCount[player]++;
        -: 1327:    }
        -: 1328:	
        -: 1329:  //decrease number in supply pile
    #####: 1330:  state->supplyCount[supplyPos]--;
        -: 1331:	 
    #####: 1332:  return 0;
        -: 1333:}
        -: 1334:
      220: 1335:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1336:{
        -: 1337:  int i;
        -: 1338:	
        -: 1339:  //reset coin count
      220: 1340:  state->coins = 0;
        -: 1341:
        -: 1342:  //add coins for each Treasure card in player's hand
     1320: 1343:  for (i = 0; i < state->handCount[player]; i++)
        -: 1344:    {
     1100: 1345:      if (state->hand[player][i] == copper)
        -: 1346:	{
      762: 1347:	  state->coins += 1;
        -: 1348:	}
      338: 1349:      else if (state->hand[player][i] == silver)
        -: 1350:	{
        8: 1351:	  state->coins += 2;
        -: 1352:	}
      330: 1353:      else if (state->hand[player][i] == gold)
        -: 1354:	{
       12: 1355:	  state->coins += 3;
        -: 1356:	}	
        -: 1357:    }	
        -: 1358:
        -: 1359:  //add bonus
      220: 1360:  state->coins += bonus;
        -: 1361:
      220: 1362:  return 0;
        -: 1363:}
        -: 1364:
        -: 1365:
        -: 1366://end of dominion.c
        -: 1367:
