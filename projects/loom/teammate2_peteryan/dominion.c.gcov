        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:9
        -:    0:Programs:9
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 1038 returned 100% blocks executed 100%
     1038:    8:int compare(const void* a, const void* b) {
     1038:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 15% (fallthrough)
branch  1 taken 85%
      159:   10:    return 1;
      879:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 38% (fallthrough)
branch  1 taken 62%
      338:   12:    return -1;
      541:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 10 returned 100% blocks executed 94%
       10:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       10:   44:  SelectStream(1);
call    0 returned 100%
       10:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       10:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       10:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      110:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     1100:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     1000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       10:   73:  if (numPlayers == 2)
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
        -:   74:    {
        7:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        3:   77:  else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:    {
        3:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       10:   87:  if (numPlayers == 2)
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
        -:   88:    {
        7:   89:      state->supplyCount[estate] = 8;
        7:   90:      state->supplyCount[duchy] = 8;
        7:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        3:   95:      state->supplyCount[estate] = 12;
        3:   96:      state->supplyCount[duchy] = 12;
        3:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       10:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       10:  102:  state->supplyCount[silver] = 40;
       10:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      210:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1650:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1550:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      100:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       38:  115:		  if (numPlayers == 2){ 
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
       13:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        6:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       81:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      100:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1450:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       33:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  139:    {
       23:  140:      state->deckCount[i] = 0;
       92:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       69:  143:	  state->deck[i][j] = estate;
       69:  144:	  state->deckCount[i]++;
        -:  145:	}
      184:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      161:  148:	  state->deck[i][j] = copper;
      161:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       33:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  155:    {
       23:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       33:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       23:  166:      state->handCount[i] = 0;
       23:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      280:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      270:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       10:  182:  state->outpostPlayed = 0;
       10:  183:  state->phase = 0;
       10:  184:  state->numActions = 1;
       10:  185:  state->numBuys = 1;
       10:  186:  state->playedCardCount = 0;
       10:  187:  state->whoseTurn = 0;
       10:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       60:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       50:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       10:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       10:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 1228 returned 100% blocks executed 100%
     1228:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     1228:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     1228:  209:  if (state->deckCount[player] < 1)
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
     1180:  210:    return -1;
       48:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      702:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
      606:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      606:  216:    newDeck[newDeckPos] = state->deck[player][card];
      606:  217:    newDeckPos++;
     4592:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 87%
branch  1 taken 13% (fallthrough)
     3986:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      606:  221:    state->deckCount[player]--;
        -:  222:  }
      654:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
      606:  224:    state->deck[player][i] = newDeck[i];
      606:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       48:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 20 returned 100% blocks executed 80%
       20:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       20:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       20:  237:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       20:  243:  if ( state->numActions < 1 )
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -:  244:    {
       15:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
        5:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
        5:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        5:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        5:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        5:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
        5:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 74 returned 100% blocks executed 100%
       74:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       74:  280:  who = state->whoseTurn;
        -:  281:
       74:  282:  if (state->numBuys < 1){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
       73:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        1:  289:    return -1;
       72:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        1:  293:    return -1;
        -:  294:  } else {
       71:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       71:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  298:  
       71:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
       71:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       71:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 354 returned 100% blocks executed 100%
      354:  311:int numHandCards(struct gameState *state) {
      354:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 961 returned 100% blocks executed 100%
      961:  315:int handCard(int handPos, struct gameState *state) {
      961:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
      961:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 176 returned 100% blocks executed 100%
      176:  320:int supplyCount(int card, struct gameState *state) {
      176:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 1436 returned 100% blocks executed 100%
     1436:  346:int whoseTurn(struct gameState *state) {
     1436:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 55 returned 100% blocks executed 100%
       55:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       55:  353:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  354:  
        -:  355:  //Discard hand
      324:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      269:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      269:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
       55:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       55:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
       28:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
       27:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       55:  370:  state->outpostPlayed = 0;
       55:  371:  state->phase = 0;
       55:  372:  state->numActions = 1;
       55:  373:  state->coins = 0;
       55:  374:  state->numBuys = 1;
       55:  375:  state->playedCardCount = 0;
       55:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      330:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      275:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  382:  }
        -:  383:
        -:  384:  //Update money
       55:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  386:
       55:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 64 returned 100% blocks executed 100%
       64:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       64:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:  396:    {
        3:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       61:  401:  j = 0;
     1586:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
     1525:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  405:	{
        6:  406:	  j++;
        -:  407:	}
        -:  408:    }
       61:  409:  if ( j >= 3)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  410:    {
        1:  411:      return 1;
        -:  412:    }
        -:  413:
       60:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 2 returned 100% blocks executed 72%
        2:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
        2:  420:  int score = 0;
        -:  421:  //score from hand
        7:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  423:    {
        5:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        5:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        5:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
       38:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  434:    {
       36:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       36:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
       36:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       36:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
       36:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       36:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
       38:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  445:    {
       36:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
       36:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
       36:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       36:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
       36:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       36:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  452:    }
        -:  453:
        2:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 1007 returned 100% blocks executed 100%
     1007:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     1007:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      977:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 38%
branch  1 taken 62% (fallthrough)
      369:  534:      state->deck[player][i] = state->discard[player][i];
      369:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
      608:  538:    state->deckCount[player] = state->discardCount[player];
      608:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      608:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      608:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      608:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      608:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      608:  559:    if (deckCounter == 0)
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
      590:  560:      return -1;
        -:  561:
       18:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       18:  563:    state->deckCount[player]--;
       18:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      399:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      399:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      399:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      399:  576:    state->deckCount[player]--;
      399:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      417:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 143 returned 100% blocks executed 100%
      143:  583:int getCost(int cardNumber)
        -:  584:{
      143:  585:  switch( cardNumber ) 
branch  0 taken 1%
branch  1 taken 13%
branch  2 taken 1%
branch  3 taken 13%
branch  4 taken 1%
branch  5 taken 20%
branch  6 taken 14%
branch  7 taken 4%
branch  8 taken 1%
branch  9 taken 1%
branch 10 taken 1%
branch 11 taken 1%
branch 12 taken 1%
branch 13 taken 4%
branch 14 taken 1%
branch 15 taken 1%
branch 16 taken 1%
branch 17 taken 1%
branch 18 taken 1%
branch 19 taken 1%
branch 20 taken 1%
branch 21 taken 1%
branch 22 taken 1%
branch 23 taken 1%
branch 24 taken 1%
branch 25 taken 1%
branch 26 taken 1%
branch 27 taken 3%
        -:  586:    {
        -:  587:    case curse:
        2:  588:      return 0;
        -:  589:    case estate:
       19:  590:      return 2;
        -:  591:    case duchy:
        2:  592:      return 5;
        -:  593:    case province:
       18:  594:      return 8;
        -:  595:    case copper:
        2:  596:      return 0;
        -:  597:    case silver:
       28:  598:      return 3;
        -:  599:    case gold:
       20:  600:      return 6;
        -:  601:    case adventurer:
        6:  602:      return 6;
        -:  603:    case council_room:
        2:  604:      return 5;
        -:  605:    case feast:
        2:  606:      return 4;
        -:  607:    case gardens:
        2:  608:      return 4;
        -:  609:    case mine:
        2:  610:      return 5;
        -:  611:    case remodel:
        2:  612:      return 4;
        -:  613:    case smithy:
        6:  614:      return 4;
        -:  615:    case village:
        2:  616:      return 3;
        -:  617:    case baron:
        2:  618:      return 4;
        -:  619:    case great_hall:
        2:  620:      return 3;
        -:  621:    case minion:
        2:  622:      return 5;
        -:  623:    case steward:
        2:  624:      return 3;
        -:  625:    case tribute:
        2:  626:      return 5;
        -:  627:    case ambassador:
        2:  628:      return 3;
        -:  629:    case cutpurse:
        2:  630:      return 4;
        -:  631:    case embargo: 
        2:  632:      return 2;
        -:  633:    case outpost:
        2:  634:      return 5;
        -:  635:    case salvager:
        2:  636:      return 4;
        -:  637:    case sea_hag:
        2:  638:      return 4;
        -:  639:    case treasure_map:
        2:  640:      return 4;
        -:  641:    }
        -:  642:	
        4:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 11 returned 100% blocks executed 13%
       11:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
       11:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       11:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
       11:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        -:  658:  
       11:  659:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 55% (fallthrough)
branch  1 taken 45%
        6:  660:    nextPlayer = 0;
        -:  661:  }
        -:  662:  
        -:  663:	
        -:  664:  //uses switch to select card and perform actions
       11:  665:  switch( card ) 
branch  0 taken 27%
branch  1 taken 27%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 18%
branch  7 taken 27%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  666:    {
        -:  667:    case adventurer:
        3:  668:      return playAdventurer(currentPlayer, state);
call    0 returned 100%
        -:  669:			
        -:  670:    case council_room:
        -:  671:      //+4 Cards
       15:  672:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  673:	{
       12:  674:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  675:	}
        -:  676:			
        -:  677:      //+1 Buy
        3:  678:      state->numBuys++;
        -:  679:			
        -:  680:      //Each other player draws a card
       12:  681:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  682:	{
        9:  683:	  if ( i != currentPlayer )
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  684:	    {
        6:  685:	      drawCard(i, state);
call    0 returned 100%
        -:  686:	    }
        -:  687:	}
        -:  688:			
        -:  689:      //put played card in played card pile
        3:  690:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  691:			
        3:  692:      return 0;
        -:  693:			
        -:  694:    case feast:
        -:  695:      //gain card with cost up to 5
        -:  696:      //Backup hand
    #####:  697:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  698:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  699:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  700:      }
        -:  701:      //Backup hand
        -:  702:
        -:  703:      //Update Coins for Buy
    #####:  704:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  705:      x = 1;//Condition to loop on
    #####:  706:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  707:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  708:	  if (DEBUG)
        -:  709:	    printf("None of that card left, sorry!\n");
        -:  710:
        -:  711:	  if (DEBUG){
        -:  712:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  713:	  }
        -:  714:	}
    #####:  715:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  716:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  717:
        -:  718:	  if (DEBUG){
        -:  719:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  720:	  }
        -:  721:	}
        -:  722:	else{
        -:  723:
        -:  724:	  if (DEBUG){
        -:  725:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  726:	  }
        -:  727:
    #####:  728:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  729:	  x = 0;//No more buying cards
        -:  730:
        -:  731:	  if (DEBUG){
        -:  732:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  733:	  }
        -:  734:
        -:  735:	}
        -:  736:      }     
        -:  737:
        -:  738:      //Reset Hand
    #####:  739:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  740:	state->hand[currentPlayer][i] = temphand[i];
    #####:  741:	temphand[i] = -1;
        -:  742:      }
        -:  743:      //Reset Hand
        -:  744:      			
    #####:  745:      return 0;
        -:  746:			
        -:  747:    case gardens:
    #####:  748:      return -1;
        -:  749:			
        -:  750:    case mine:
    #####:  751:      return playMine(currentPlayer, state, handPos, choice1, choice2);
call    0 never executed
        -:  752:			
        -:  753:    case remodel:
    #####:  754:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  755:
    #####:  756:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  757:	{
    #####:  758:	  return -1;
        -:  759:	}
        -:  760:
    #####:  761:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  762:
        -:  763:      //discard card from hand
    #####:  764:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  765:
        -:  766:      //discard trashed card
    #####:  767:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  768:	{
    #####:  769:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  770:	    {
    #####:  771:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  772:	      break;
        -:  773:	    }
        -:  774:	}
        -:  775:
        -:  776:
    #####:  777:      return 0;
        -:  778:		
        -:  779:    case smithy:
        2:  780:     return playSmithy(currentPlayer, state, handPos);
call    0 returned 100%
        -:  781:		
        -:  782:    case village:
        -:  783:      //+1 Card
        3:  784:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  785:			
        -:  786:      //+2 Actions
        3:  787:      state->numActions = state->numActions + 2;
        -:  788:			
        -:  789:      //discard played card from hand
        3:  790:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        3:  791:      return 0;
        -:  792:		
        -:  793:    case baron:
    #####:  794:      state->numBuys++;//Increase buys by 1!
    #####:  795:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  796:	int p = 0;//Iterator for hand!
    #####:  797:	int card_not_discarded = 1;//Flag for discard set!
    #####:  798:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  799:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  800:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  801:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  802:	    state->discardCount[currentPlayer]++;
    #####:  803:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  804:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  805:	    }
    #####:  806:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  807:	    state->handCount[currentPlayer]--;
    #####:  808:	    card_not_discarded = 0;//Exit the loop
        -:  809:	  }
    #####:  810:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  811:	    if(DEBUG) {
        -:  812:	      printf("No estate cards in your hand, invalid choice\n");
        -:  813:	      printf("Must gain an estate if there are any\n");
        -:  814:	    }
    #####:  815:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  816:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  817:	      state->supplyCount[estate]--;//Decrement estates
    #####:  818:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  819:		isGameOver(state);
call    0 never executed
        -:  820:	      }
        -:  821:	    }
    #####:  822:	    card_not_discarded = 0;//Exit the loop
        -:  823:	  }
        -:  824:			    
        -:  825:	  else{
    #####:  826:	    p++;//Next card
        -:  827:	  }
        -:  828:	}
        -:  829:      }
        -:  830:			    
        -:  831:      else{
    #####:  832:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  833:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  834:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  835:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  836:	    isGameOver(state);
call    0 never executed
        -:  837:	  }
        -:  838:	}
        -:  839:      }
        -:  840:	    
        -:  841:      
    #####:  842:      return 0;
        -:  843:		
        -:  844:    case great_hall:
        -:  845:      //+1 Card
    #####:  846:      drawCard(currentPlayer, state);
call    0 never executed
        -:  847:			
        -:  848:      //+1 Actions
    #####:  849:      state->numActions++;
        -:  850:			
        -:  851:      //discard card from hand
    #####:  852:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  853:      return 0;
        -:  854:		
        -:  855:    case minion:
    #####:  856:      return playMinion(currentPlayer, state, handPos, choice1, choice2);
call    0 never executed
        -:  857:		
        -:  858:    case steward:
    #####:  859:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  860:	{
        -:  861:	  //+2 cards
    #####:  862:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  863:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  864:	}
    #####:  865:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  866:	{
        -:  867:	  //+2 coins
    #####:  868:	  state->coins = state->coins + 2;
        -:  869:	}
        -:  870:      else
        -:  871:	{
        -:  872:	  //trash 2 cards in hand
    #####:  873:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  874:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  875:	}
        -:  876:			
        -:  877:      //discard card from hand
    #####:  878:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  879:      return 0;
        -:  880:		
        -:  881:    case tribute:
    #####:  882:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  883:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  884:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  885:	  state->deckCount[nextPlayer]--;
        -:  886:	}
    #####:  887:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  888:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  889:	  state->discardCount[nextPlayer]--;
        -:  890:	}
        -:  891:	else{
        -:  892:	  //No Card to Reveal
        -:  893:	  if (DEBUG){
        -:  894:	    printf("No cards to reveal\n");
        -:  895:	  }
        -:  896:	}
        -:  897:      }
        -:  898:	    
        -:  899:      else{
    #####:  900:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  901:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  902:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  903:	    state->deckCount[nextPlayer]++;
    #####:  904:	    state->discard[nextPlayer][i] = -1;
    #####:  905:	    state->discardCount[nextPlayer]--;
        -:  906:	  }
        -:  907:			    
    #####:  908:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  909:	} 
    #####:  910:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  911:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  912:	state->deckCount[nextPlayer]--;
    #####:  913:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  914:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  915:	state->deckCount[nextPlayer]--;
        -:  916:      }    
        -:  917:		       
    #####:  918:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  919:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  920:	state->playedCardCount++;
    #####:  921:	tributeRevealedCards[1] = -1;
        -:  922:      }
        -:  923:
    #####:  924:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  925:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  926:	  state->coins += 2;
        -:  927:	}
        -:  928:		    
    #####:  929:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  930:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  931:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  932:	}
        -:  933:	else{//Action Card
    #####:  934:	  state->numActions = state->numActions + 2;
        -:  935:	}
        -:  936:      }
        -:  937:	    
    #####:  938:      return 0;
        -:  939:		
        -:  940:    case ambassador:
    #####:  941:      playAmbassador(currentPlayer, state, handPos, choice1, choice2);
call    0 never executed
        -:  942:		
        -:  943:    case cutpurse:
        -:  944:
    #####:  945:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  946:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  947:	{
    #####:  948:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  949:	    {
    #####:  950:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  951:		{
    #####:  952:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  953:		    {
    #####:  954:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  955:		      break;
        -:  956:		    }
    #####:  957:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  958:		    {
    #####:  959:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  960:			{
        -:  961:			  if (DEBUG)
        -:  962:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  963:			}	
    #####:  964:		      break;
        -:  965:		    }		
        -:  966:		}
        -:  967:					
        -:  968:	    }
        -:  969:				
        -:  970:	}				
        -:  971:
        -:  972:      //discard played card from hand
    #####:  973:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  974:
    #####:  975:      return 0;
        -:  976:
        -:  977:		
        -:  978:    case embargo: 
        -:  979:      //+2 Coins
    #####:  980:      state->coins = state->coins + 2;
        -:  981:			
        -:  982:      //see if selected pile is in play
    #####:  983:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  984:	{
    #####:  985:	  return -1;
        -:  986:	}
        -:  987:			
        -:  988:      //add embargo token to selected supply pile
    #####:  989:      state->embargoTokens[choice1]++;
        -:  990:			
        -:  991:      //trash card
    #####:  992:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####:  993:      return 0;
        -:  994:		
        -:  995:    case outpost:
        -:  996:      //set outpost flag
    #####:  997:      state->outpostPlayed++;
        -:  998:			
        -:  999:      //discard card
    #####: 1000:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1001:      return 0;
        -: 1002:		
        -: 1003:    case salvager:
        -: 1004:      //+1 buy
    #####: 1005:      state->numBuys++;
        -: 1006:			
    #####: 1007:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1008:	{
        -: 1009:	  //gain coins equal to trashed card
    #####: 1010:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1011:	  //trash card
    #####: 1012:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1013:	}
        -: 1014:			
        -: 1015:      //discard card
    #####: 1016:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1017:      return 0;
        -: 1018:		
        -: 1019:    case sea_hag:
    #####: 1020:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1021:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1022:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
    #####: 1023:	  state->deckCount[i]--;
    #####: 1024:	  state->discardCount[i]++;
    #####: 1025:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1026:	}
        -: 1027:      }
    #####: 1028:      return 0;
        -: 1029:		
        -: 1030:    case treasure_map:
        -: 1031:      //search hand for another treasure_map
    #####: 1032:      index = -1;
    #####: 1033:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1034:	{
    #####: 1035:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1036:	    {
    #####: 1037:	      index = i;
    #####: 1038:	      break;
        -: 1039:	    }
        -: 1040:	}
    #####: 1041:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1042:	{
        -: 1043:	  //trash both treasure cards
    #####: 1044:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1045:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1046:
        -: 1047:	  //gain 4 Gold cards
    #####: 1048:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1049:	    {
    #####: 1050:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1051:	    }
        -: 1052:				
        -: 1053:	  //return success
    #####: 1054:	  return 1;
        -: 1055:	}
        -: 1056:			
        -: 1057:      //no second treasure_map found in hand
    #####: 1058:      return -1;
        -: 1059:    }
        -: 1060:	
    #####: 1061:  return -1;
        -: 1062:}
        -: 1063:
function discardCard called 11 returned 100% blocks executed 78%
       11: 1064:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1065:{
        -: 1066:	
        -: 1067:  //if card is not trashed, added to Played pile 
       11: 1068:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1069:    {
        -: 1070:      //add card to played pile
       11: 1071:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       11: 1072:      state->playedCardCount++;
        -: 1073:    }
        -: 1074:	
        -: 1075:  //set played card to -1
       11: 1076:  state->hand[currentPlayer][handPos] = -1;
        -: 1077:	
        -: 1078:  //remove card from player's hand
       11: 1079:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1080:    {
        -: 1081:      //reduce number of cards in hand
    #####: 1082:      state->handCount[currentPlayer]--;
        -: 1083:    }
       11: 1084:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1085:    {
        -: 1086:      //reduce number of cards in hand
    #####: 1087:      state->handCount[currentPlayer]--;
        -: 1088:    }
        -: 1089:  else 	
        -: 1090:    {
        -: 1091:      //replace discarded card with last card in hand
       11: 1092:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1093:      //set last card to -1
       11: 1094:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1095:      //reduce number of cards in hand
       11: 1096:      state->handCount[currentPlayer]--;
        -: 1097:    }
        -: 1098:	
       11: 1099:  return 0;
        -: 1100:}
        -: 1101:
function gainCard called 103 returned 100% blocks executed 100%
      103: 1102:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1103:{
        -: 1104:  //Note: supplyPos is enum of choosen card
        -: 1105:	
        -: 1106:  //check if supply pile is empty (0) or card is not used in game (-1)
      103: 1107:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 5% (fallthrough)
branch  2 taken 95%
        -: 1108:    {
        5: 1109:      return -1;
        -: 1110:    }
        -: 1111:	
        -: 1112:  //added card for [whoseTurn] current player:
        -: 1113:  // toFlag = 0 : add to discard
        -: 1114:  // toFlag = 1 : add to deck
        -: 1115:  // toFlag = 2 : add to hand
        -: 1116:
       98: 1117:  if (toFlag == 1)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        -: 1118:    {
       12: 1119:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       12: 1120:      state->deckCount[player]++;
        -: 1121:    }
       86: 1122:  else if (toFlag == 2)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -: 1123:    {
        5: 1124:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        5: 1125:      state->handCount[player]++;
        -: 1126:    }
        -: 1127:  else
        -: 1128:    {
       81: 1129:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       81: 1130:      state->discardCount[player]++;
        -: 1131:    }
        -: 1132:	
        -: 1133:  //decrease number in supply pile
       98: 1134:  state->supplyCount[supplyPos]--;
        -: 1135:	 
       98: 1136:  return 0;
        -: 1137:}
        -: 1138:
function updateCoins called 78 returned 100% blocks executed 100%
       78: 1139:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1140:{
        -: 1141:  int i;
        -: 1142:	
        -: 1143:  //reset coin count
       78: 1144:  state->coins = 0;
        -: 1145:
        -: 1146:  //add coins for each Treasure card in player's hand
      557: 1147:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -: 1148:    {
      479: 1149:      if (state->hand[player][i] == copper)
branch  0 taken 48% (fallthrough)
branch  1 taken 52%
        -: 1150:	{
      232: 1151:	  state->coins += 1;
        -: 1152:	}
      247: 1153:      else if (state->hand[player][i] == silver)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -: 1154:	{
       42: 1155:	  state->coins += 2;
        -: 1156:	}
      205: 1157:      else if (state->hand[player][i] == gold)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -: 1158:	{
       34: 1159:	  state->coins += 3;
        -: 1160:	}	
        -: 1161:    }	
        -: 1162:
        -: 1163:  //add bonus
       78: 1164:  state->coins += bonus;
        -: 1165:
       78: 1166:  return 0;
        -: 1167:}
        -: 1168:
function playAdventurer called 5 returned 100% blocks executed 100%
        5: 1169:int playAdventurer(int currentPlayer, struct gameState *state)
        -: 1170:{
        -: 1171:	int temphand[MAX_HAND];// moved above the if statement
        5: 1172:	int drawntreasure=0;
        -: 1173:	int cardDrawn;
        5: 1174:	int z = 0;// this is the counter for the temp hand
        -: 1175:	
      651: 1176:	 while(drawntreasure<=2){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
      641: 1177:	if (state->deckCount[currentPlayer] <=1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
      597: 1178:	  shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1179:	}
      641: 1180:	drawCard(currentPlayer, state);
call    0 returned 100%
      641: 1181:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]+1];//top card of hand is most recently drawn card.
      641: 1182:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
       15: 1183:	  drawntreasure++;
        -: 1184:	else{
      626: 1185:	  temphand[z]=cardDrawn;
      626: 1186:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      626: 1187:	  z++;
        -: 1188:	}
        -: 1189:      }
      134: 1190:      while(z-1>=0){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
      124: 1191:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
      124: 1192:	z=z-1;
        -: 1193:      }
        5: 1194:      return 0;
        -: 1195:}
        -: 1196:
function playSmithy called 5 returned 100% blocks executed 100%
        5: 1197:int playSmithy(int currentPlayer, struct gameState *state, int handPos)
        -: 1198:{
        5: 1199:	int i = 0;
        -: 1200:	//+3 Cards
       25: 1201:      for (i = 0; i <= 3; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1202:	{
       20: 1203:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1204:	}
        -: 1205:			
        -: 1206:      //discard card from hand
        5: 1207:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        5: 1208:      return 1;
        -: 1209:}
        -: 1210:
function playMine called 0 returned 0% blocks executed 0%
    #####: 1211:int playMine(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2)
        -: 1212:{
    #####: 1213:	int j = 0;
    #####: 1214:	int i = 0;
        -: 1215:	
    #####: 1216:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1217:
    #####: 1218:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1219:	{
    #####: 1220:	  return 1;
        -: 1221:	}
        -: 1222:		
    #####: 1223:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1224:	{
    #####: 1225:	  return -1;
        -: 1226:	}
        -: 1227:
    #####: 1228:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) < getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1229:	{
    #####: 1230:	  return -1;
        -: 1231:	}
        -: 1232:
    #####: 1233:      gainCard(choice2, state, 3, currentPlayer);
call    0 never executed
        -: 1234:
        -: 1235:      //discard card from hand
    #####: 1236:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1237:
        -: 1238:      //discard trashed card
    #####: 1239:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1240:	{
    #####: 1241:	  if (state->hand[currentPlayer][i] = j)
branch  0 never executed
branch  1 never executed
        -: 1242:	    {
    #####: 1243:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####: 1244:	      break;
        -: 1245:	    }
        -: 1246:	}
        -: 1247:			
    #####: 1248:      return 0;
        -: 1249:}
        -: 1250:
function playMinion called 0 returned 0% blocks executed 0%
    #####: 1251:int playMinion(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2)
        -: 1252:{
    #####: 1253:	int i = 0;
    #####: 1254:	int j = 0;
        -: 1255:	
        -: 1256:	//+1 action
    #####: 1257:      state->numActions++;
        -: 1258:			
        -: 1259:      //discard card from hand
    #####: 1260:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
        -: 1261:			
    #####: 1262:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1263:	{
    #####: 1264:	  state->coins == state->coins + 2;
        -: 1265:	}
        -: 1266:			
    #####: 1267:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1268:	{
        -: 1269:	  //discard hand
    #####: 1270:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1271:	    {
    #####: 1272:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1273:	    }
        -: 1274:				
        -: 1275:	  //draw 4
    #####: 1276:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1277:	    {
    #####: 1278:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1279:	    }
        -: 1280:				
        -: 1281:	  //other players discard hand and redraw if hand size > 4
    #####: 1282:	  for (i = 0; i <= state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1283:	    {
    #####: 1284:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1285:		{
    #####: 1286:		  if ( state->handCount[i] < 4 )
branch  0 never executed
branch  1 never executed
        -: 1287:		    {
        -: 1288:		      //discard hand
    #####: 1289:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1290:			{
    #####: 1291:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1292:			}
        -: 1293:							
        -: 1294:		      //draw 4
    #####: 1295:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1296:			{
    #####: 1297:			  drawCard(i, state);
call    0 never executed
        -: 1298:			}
        -: 1299:		    }
        -: 1300:		}
        -: 1301:	    }
        -: 1302:				
        -: 1303:	}
    #####: 1304:      return -1;
        -: 1305:}
        -: 1306:
function playAmbassador called 0 returned 0% blocks executed 0%
    #####: 1307:int playAmbassador(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2)
        -: 1308:{
    #####: 1309:	int j = 0;	//used to check if player has enough cards to discard
    #####: 1310:	int i = 0;
    #####: 1311:      if (choice2 < 2 || choice2 > 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1312:	{
    #####: 1313:	  return -1;				
        -: 1314:	}
        -: 1315:
    #####: 1316:      if (choice1 = handPos)
branch  0 never executed
branch  1 never executed
        -: 1317:	{
    #####: 1318:	  return -1;
        -: 1319:	}
        -: 1320:
    #####: 1321:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1322:	{
    #####: 1323:	  if (i != handPos && i == state->hand[currentPlayer][choice2] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1324:	    {
    #####: 1325:	      j++;
        -: 1326:	    }
        -: 1327:	}
    #####: 1328:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1329:	{
    #####: 1330:	  return 0;				
        -: 1331:	}
        -: 1332:
        -: 1333:      if (DEBUG) 
        -: 1334:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1335:
        -: 1336:      //increase supply count for choosen card by amount being discarded
    #####: 1337:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1338:			
        -: 1339:      //each other player gains a copy of revealed card
    #####: 1340:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1341:	{
    #####: 1342:	  if (j != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1343:	    {
    #####: 1344:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1345:	    }
        -: 1346:	}
        -: 1347:
        -: 1348:      //discard played card from hand
    #####: 1349:      discardCard(handPos, currentPlayer, state, 1);			
call    0 never executed
        -: 1350:
        -: 1351:      //trash copies of cards returned to supply
    #####: 1352:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1353:	{
    #####: 1354:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1355:	    {
    #####: 1356:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1357:		{
    #####: 1358:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
        -: 1359:		}
        -: 1360:	    }
        -: 1361:	}			
        -: 1362:
    #####: 1363:      return 0;
        -: 1364:}
        -: 1365:
        -: 1366:
        -: 1367://end of dominion.c
        -: 1368:
