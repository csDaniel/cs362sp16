        -:    0:Source:randomtestcard.c
        -:    0:Graph:randomtestcard.gcno
        -:    0:Data:randomtestcard.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:/*
        -:    2:*Alex Marsh
        -:    3:*CS362
        -:    4:*randomtestcard.c
        -:    5:*Last Modified: May 7, 2016
        -:    6:*
        -:    7:*This is a random test for the implementation of the village card in dominion.c. Format and some code taken from 'betterTestDrawCard.c' and 'cardtest2.c'
        -:    8:*
        -:    9:*When a player plays this card the player should gain 1 card and 
        -:   10:*two actions.
        -:   11:*
        -:   12:*
        -:   13:*Include the following lines in your makefile:
        -:   14:*
        -:   15:*randomtestcard.c: randomtestcard.c dominion.o rngs.o
        -:   16:*       gcc -o randomtestcard -g randomtestcard.c dominion.o rngs.o $(CFLAGS)
        -:   17:*/
        -:   18:
        -:   19:#include "dominion.h"
        -:   20:#include "dominion_helpers.h"
        -:   21:#include "interface.h"
        -:   22:#include <string.h>
        -:   23:#include <stdio.h>
        -:   24:#include <assert.h>
        -:   25:#include "rngs.h"
        -:   26:
        -:   27:#define TESTCARD "village"
        -:   28:
function main called 2 returned 100% blocks executed 71%
        2:   29:int main() {
        -:   30:    int i, coins;
        -:   31:    int currPlayer, otherPlayer;
        2:   32:    int seed = 1000;
        2:   33:    int numPlayers = 2;
        2:   34:    int newCards = 2, discarded = 1;
        2:   35:    int num_copper = 60;
        2:   36:    int num_silver = 40;
        2:   37:    int num_gold = 30;
        2:   38:    int choice1 = 0, choice2 = 0, choice3 = 0;
        2:   39:    int handpos, bonus = 0;
        2:   40:    int errors = 0;
        2:   41:    int testTreasureCount = 0, realTreasureCount = 0;
        -:   42:    int testHandCount, realHandCount;
        2:   43:    int handIndex, shuffledCards = 0;
        -:   44:
        -:   45:
        2:   46:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   47:	       remodel, smithy, village, baron, great_hall};
        -:   48:
        -:   49:  struct gameState G, expected, played;
        -:   50:
        2:   51:  printf("--------------Testing village Randomly--------------\n");
call    0 returned 100%
        -:   52:    
        2:   53:  srand(time(NULL)); //set rand
call    0 returned 100%
call    1 returned 100%
        -:   54:     
        2:   55:  SelectStream(2);
call    0 returned 100%
        2:   56:  PutSeed(3);    
call    0 returned 100%
        -:   57:    
     4002:   58:  for(i=0; i<2000; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   59:    // initialize game environment & begin testing
     4000:   60:    initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
     4000:   61:    memcpy(&played, &G, sizeof(struct gameState));
        -:   62:    
        -:   63:    //initialize a random game 
     4000:   64:    currPlayer = rand() % numPlayers; //get random player
call    0 returned 100%
     4000:   65:    if(currPlayer == 0){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
     1998:   66:      otherPlayer = 1;   
        -:   67:    }
        -:   68:    else
     2002:   69:        otherPlayer = 2;
        -:   70:      
     4000:   71:    played.whoseTurn = currPlayer; //set player
        -:   72:     
        -:   73:    //randomize deck, hand, and discard  
     4000:   74:    played.deckCount[currPlayer] = (rand() % (MAX_DECK+1));
call    0 returned 100%
     4000:   75:    played.discardCount[currPlayer] = (rand() % ( MAX_DECK+1));
call    0 returned 100%
     4000:   76:    played.handCount[currPlayer] = (rand() %  (MAX_HAND+1));
call    0 returned 100%
        -:   77:    
        -:   78:    //get random number for handposition
     4000:   79:    handpos  = (rand() % 7);
call    0 returned 100%
        -:   80:      
        -:   81:    //insert a adventure card in players hand for testing
     4000:   82:    played.hand[currPlayer][handpos] = village;   
        -:   83:      
        -:   84:    //randomize the number of coins 
     4000:   85:    coins = (rand() % (num_copper + 1)); //copper coins
call    0 returned 100%
        -:   86:    //printf("coins = %d\n", coins);
     4000:   87:    coins =+ (rand() % (num_silver +1)); //silver coins
call    0 returned 100%
        -:   88:    //printf("coins = %d\n", coins);
     4000:   89:    coins =+ (rand() % (num_gold+1)); //gold coins
call    0 returned 100%
        -:   90:    //printf("coins = %d\n", coins);
        -:   91:      
     4000:   92:    played.coins = coins;  
        -:   93:
        -:   94:    //copy random test state for testing  
     4000:   95:    memcpy(&expected, &played, sizeof(struct gameState));
        -:   96:  
        -:   97: /***     
        -:   98:    //test printing
        -:   99:    printf("%d player handcount %d:\n", currPlayer, played.deckCount[currPlayer]);   
        -:  100:    printf("%d player deckcount %d:\n", currPlayer, played.deckCount[currPlayer]);   
        -:  101:    printf("%d player discardcount %d:\n", currPlayer, played.discardCount[currPlayer]);   
        -:  102:    printf("%d player coins %d:\n", currPlayer, countHandCoins(currPlayer, &played));   
        -:  103:    printf("*******************************************************\n");  
        -:  104:  
        -:  105:    printf("%d player handcount %d:\n", currPlayer, expected.deckCount[currPlayer]);   
        -:  106:    printf("%d player deckcount %d:\n", currPlayer, expected.deckCount[currPlayer]);   
        -:  107:    printf("%d player discardcount %d:\n", currPlayer, expected.discardCount[currPlayer]);   
        -:  108:    printf("%d player coins %d:\n", currPlayer, countHandCoins(currPlayer, &expected));   
        -:  109:    printf("*******************************************************\n");  
        -:  110: ***/   
        -:  111:      
        -:  112:    //play village card
     4000:  113:    cardEffect(village, choice1, choice2, choice3, &played, handpos, bonus); 
call    0 returned 100%
        -:  114:      
        -:  115:      
        -:  116:    //test to make sure play is recieving 1 cards
        -:  117:    //the player should draw 1 card and discard the village card
        -:  118:    //this should make the hand the same count
        -:  119:    
        -:  120: //   printf("Player %d hand count = %d, expected = %d\n", currPlayer, recievedResult, expected);
     4000:  121:    if(played.handCount[currPlayer] != expected.handCount[currPlayer] + newCards - discarded){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  122:        //check if hand is correct
    #####:  123:            printf("****FAIL Iteration: %d Returned Hand Count = %d, expected = %d\n", i, played.handCount[currPlayer], expected.handCount[currPlayer] + newCards - discarded); 
call    0 never executed
    #####:  124:            errors++;
        -:  125:    }
        -:  126:    
        -:  127:    //test to make sure player is drawing from their own pile
        -:  128: //   printf("Player %d deck count = %d, expected = %d\n", currPlayer, played.deckCount[currPlayer], expected.deckCount[currPlayer] - newCards + shuffledCards);
     4000:  129:    if(played.deckCount[currPlayer] != expected.deckCount[currPlayer] - newCards + shuffledCards){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  130:        //check if deck is correct
       15:  131:            printf("****FAIL Iteration: %d Returned Deck Count for Player %d = %d, expected = %d\n", i, currPlayer, played.deckCount[currPlayer], expected.deckCount[currPlayer] - newCards + shuffledCards); 
call    0 returned 100%
       15:  132:            errors++;
        -:  133:    }
        -:  134:    
        -:  135:    //test for players number of actions
        -:  136:    //the player shoud have 2 action moves
        -:  137: //   printf("Player %d action count = %d, expected = %d\n", currPlayer, played.numActions, expected.numActions+2);
     4000:  138:    if(played.numActions != expected.numActions+2){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  139:        //check if deck is correct
    #####:  140:            printf("****FAIL Iteration: %d Returned Action Count for Player %d = %d, expected = %d\n", i, currPlayer, played.numActions, expected.numActions+2); 
call    0 never executed
    #####:  141:            errors++;
        -:  142:    }
        -:  143:    
        -:  144:        //test to make sure other players game state has not changed
        -:  145:    
        -:  146:    //test to make sure other players hand is not changed
        -:  147:    
        -:  148: //   printf("Player %d hand count = %d, expected = %d\n", otherPlayer, recievedResult, expected);
     4000:  149:    if(played.handCount[otherPlayer] != expected.handCount[otherPlayer]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  150:        //check if hand is correct
    #####:  151:            printf("****FAIL Iteration: %d Returned Hand Count for Player %d = %d, expected = %d\n", i, otherPlayer, played.handCount[otherPlayer], expected.handCount[otherPlayer]); 
call    0 never executed
    #####:  152:            errors++;
        -:  153:    }
        -:  154:    
        -:  155:    //test to make sure other player deck is same and first player did not draw
        -:  156:    //from other players pile
        -:  157://    printf("Player %d deck count = %d, expected = %d\n", otherPlayer, played.deckCount[otherPlayer], expected.deckCount[otherPlayer]);
     4000:  158:    if(played.deckCount[otherPlayer] != expected.deckCount[otherPlayer]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  159:        //check if deck is correct
    #####:  160:            printf("****FAIL Iteration: %d Returned Deck Count for Player %d = %d, expected = %d\n", i, otherPlayer, played.deckCount[currPlayer], expected.deckCount[currPlayer]); 
call    0 never executed
    #####:  161:            errors++;
        -:  162:    }
        -:  163:    
        -:  164:    //test to make sure victory card piles where untouched.
        -:  165:    //check curse
     4000:  166:    if(played.supplyCount[curse] != expected.supplyCount[curse]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  167:         printf("****FAIL Iteration: %d Curse Count for Player %d = %d, expected = %d\n", i, currPlayer, played.supplyCount[curse], expected.supplyCount[curse]); 
call    0 never executed
    #####:  168:            errors++;
        -:  169:    }
        -:  170:    //check estate
     4000:  171:    if(played.supplyCount[estate] != expected.supplyCount[estate]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     4000:  172:         printf("****FAIL Iteration: %d Estate Count for Player %d = %d, expected = %d\n", i, currPlayer, played.supplyCount[estate], expected.supplyCount[estate]); 
call    0 returned 100%
     4000:  173:            errors++;
        -:  174:    }
        -:  175:    //check duchy
     4000:  176:    if(played.supplyCount[duchy] != expected.supplyCount[duchy]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  177:         printf("****FAIL Iteration: %d Duchy Count for Player %d = %d, expected = %d\n", i, currPlayer, played.supplyCount[duchy], expected.supplyCount[duchy]); 
call    0 never executed
    #####:  178:            errors++;
        -:  179:    }
        -:  180:    //check province
     4000:  181:    if(played.supplyCount[province] != expected.supplyCount[province]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  182:         printf("****FAIL Iteration: %d Province Count for Player %d = %d, expected = %d\n", i, currPlayer, played.supplyCount[province], expected.supplyCount[province]); 
call    0 never executed
    #####:  183:            errors++;
        -:  184:    }
        -:  185:    
        -:  186:    //test to make sure the kingdom cards count have not been altered
        -:  187:    int i;
    44000:  188:    for(i=0; i < 10; i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    40000:  189:        if(played.supplyCount[k[i]] != expected.supplyCount[k[i]]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  190:         printf("****FAIL Iteration: %d Count for Player %d = %d, expected = %d\n", i, currPlayer, played.supplyCount[k[i]], expected.supplyCount[k[i]]); 
call    0 never executed
    #####:  191:            errors++;
    #####:  192:         printf("%d is incorrect\n", k[i]);    
call    0 never executed
        -:  193:        }
        -:  194:    }
        -:  195:    
        -:  196:    
        -:  197:    
        -:  198:  }
        -:  199:    
        -:  200:    
        -:  201:    
        -:  202:    
        2:  203:    if(errors == 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  204:     printf("ALL TESTS PASS for village card.\n");   
call    0 never executed
        -:  205:    }
        -:  206:    else{
        2:  207:     printf("FAIL: There are %d errors for playing village card.\n", errors);   
call    0 returned 100%
        -:  208:    }  
        -:  209:      
        -:  210:      
        -:  211:      
        -:  212:      
        -:  213:      
        2:  214:    return 0; 
        -:  215:}
