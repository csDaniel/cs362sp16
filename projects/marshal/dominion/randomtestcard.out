--------------Testing village Randomly--------------
****FAIL Iteration: 0 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 2 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 3 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 4 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 5 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 6 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 7 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 8 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 9 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 10 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 11 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 12 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 13 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 14 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 15 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 16 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 17 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 18 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 19 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 20 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 21 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 22 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 23 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 24 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 25 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 26 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 27 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 28 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 29 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 30 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 31 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 32 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 33 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 34 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 35 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 36 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 37 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 38 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 39 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 40 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 41 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 42 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 43 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 44 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 45 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 46 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 47 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 48 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 49 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 50 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 51 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 52 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 53 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 54 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 55 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 56 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 57 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 58 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 59 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 60 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 61 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 62 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 63 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 64 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 65 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 66 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 67 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 68 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 69 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 70 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 71 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 72 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 73 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 74 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 75 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 76 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 77 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 78 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 79 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 80 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 81 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 82 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 83 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 84 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 85 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 86 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 87 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 88 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 89 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 90 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 91 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 92 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 93 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 94 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 95 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 96 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 97 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 98 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 99 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 100 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 101 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 102 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 103 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 104 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 105 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 106 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 107 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 108 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 109 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 110 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 111 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 112 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 113 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 114 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 115 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 116 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 117 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 118 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 119 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 120 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 121 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 122 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 123 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 124 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 125 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 126 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 127 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 128 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 129 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 130 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 131 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 132 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 133 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 134 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 135 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 136 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 137 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 138 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 139 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 140 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 141 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 142 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 143 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 144 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 145 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 146 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 147 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 148 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 149 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 150 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 151 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 152 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 153 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 154 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 155 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 156 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 157 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 158 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 159 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 160 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 161 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 162 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 163 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 164 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 165 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 166 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 167 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 168 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 169 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 170 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 171 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 172 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 173 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 174 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 175 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 176 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 177 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 178 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 179 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 180 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 181 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 182 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 183 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 184 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 185 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 186 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 187 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 188 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 189 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 190 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 191 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 192 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 193 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 194 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 195 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 196 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 197 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 198 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 199 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 200 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 201 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 202 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 203 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 204 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 205 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 206 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 207 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 208 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 209 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 210 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 211 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 212 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 213 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 214 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 215 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 216 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 217 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 218 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 219 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 220 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 221 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 222 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 223 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 224 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 225 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 226 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 227 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 228 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 229 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 230 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 231 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 232 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 233 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 234 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 235 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 236 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 237 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 238 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 239 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 240 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 241 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 242 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 243 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 244 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 245 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 246 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 247 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 248 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 249 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 250 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 251 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 252 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 253 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 254 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 255 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 256 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 257 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 258 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 259 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 260 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 261 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 262 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 263 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 264 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 265 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 266 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 267 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 268 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 269 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 270 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 271 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 272 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 273 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 274 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 275 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 276 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 277 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 278 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 279 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 280 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 281 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 282 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 283 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 284 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 285 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 286 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 287 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 288 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 289 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 290 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 291 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 292 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 293 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 294 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 295 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 296 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 297 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 298 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 299 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 300 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 301 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 302 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 303 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 304 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 305 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 306 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 307 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 308 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 309 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 310 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 311 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 312 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 313 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 314 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 315 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 316 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 317 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 318 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 319 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 320 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 321 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 322 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 323 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 324 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 325 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 326 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 327 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 328 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 329 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 330 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 331 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 332 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 333 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 334 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 335 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 336 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 337 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 338 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 339 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 340 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 341 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 342 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 343 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 344 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 345 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 346 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 347 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 348 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 349 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 350 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 351 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 352 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 353 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 354 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 355 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 356 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 357 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 358 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 359 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 360 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 361 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 362 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 363 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 364 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 365 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 366 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 367 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 368 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 369 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 370 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 371 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 372 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 373 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 374 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 375 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 376 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 377 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 378 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 379 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 380 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 381 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 382 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 383 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 384 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 385 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 386 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 387 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 388 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 389 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 390 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 391 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 392 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 393 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 394 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 395 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 396 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 397 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 398 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 399 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 400 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 401 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 402 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 403 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 404 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 405 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 406 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 407 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 408 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 409 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 410 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 411 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 412 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 413 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 414 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 415 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 416 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 417 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 418 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 419 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 420 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 421 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 422 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 423 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 424 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 425 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 426 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 427 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 428 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 429 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 430 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 431 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 432 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 433 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 434 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 435 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 436 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 437 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 438 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 439 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 440 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 441 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 442 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 443 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 444 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 445 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 446 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 447 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 448 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 449 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 450 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 451 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 452 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 453 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 454 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 455 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 456 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 457 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 458 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 459 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 460 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 461 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 462 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 463 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 464 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 465 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 466 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 467 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 468 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 469 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 470 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 471 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 472 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 473 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 474 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 475 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 476 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 477 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 478 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 479 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 480 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 481 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 482 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 483 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 484 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 485 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 486 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 487 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 488 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 489 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 490 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 491 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 492 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 493 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 494 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 495 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 496 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 497 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 498 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 499 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 500 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 501 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 502 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 503 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 504 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 505 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 506 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 507 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 508 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 509 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 510 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 511 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 512 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 513 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 514 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 515 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 516 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 517 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 518 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 519 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 520 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 521 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 522 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 523 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 524 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 525 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 526 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 527 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 528 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 529 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 530 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 531 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 532 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 533 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 534 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 535 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 536 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 537 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 538 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 539 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 540 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 541 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 542 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 543 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 544 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 545 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 546 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 547 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 548 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 549 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 550 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 551 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 552 Returned Deck Count for Player 1 = 82, expected = -2
****FAIL Iteration: 552 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 553 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 554 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 555 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 556 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 557 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 558 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 559 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 560 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 561 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 562 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 563 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 564 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 565 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 566 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 567 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 568 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 569 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 570 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 571 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 572 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 573 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 574 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 575 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 576 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 577 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 578 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 579 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 580 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 581 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 582 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 583 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 584 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 585 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 586 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 587 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 588 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 589 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 590 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 591 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 592 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 593 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 594 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 595 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 596 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 597 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 598 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 599 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 600 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 601 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 602 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 603 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 604 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 605 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 606 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 607 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 608 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 609 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 610 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 611 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 612 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 613 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 614 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 615 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 616 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 617 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 618 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 619 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 620 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 621 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 622 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 623 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 624 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 625 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 626 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 627 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 628 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 629 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 630 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 631 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 632 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 633 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 634 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 635 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 636 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 637 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 638 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 639 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 640 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 641 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 642 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 643 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 644 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 645 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 646 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 647 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 648 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 649 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 650 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 651 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 652 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 653 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 654 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 655 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 656 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 657 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 658 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 659 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 660 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 661 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 662 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 663 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 664 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 665 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 666 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 667 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 668 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 669 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 670 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 671 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 672 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 673 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 674 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 675 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 676 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 677 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 678 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 679 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 680 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 681 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 682 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 683 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 684 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 685 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 686 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 687 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 688 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 689 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 690 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 691 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 692 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 693 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 694 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 695 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 696 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 697 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 698 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 699 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 700 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 701 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 702 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 703 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 704 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 705 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 706 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 707 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 708 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 709 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 710 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 711 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 712 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 713 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 714 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 715 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 716 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 717 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 718 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 719 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 720 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 721 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 722 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 723 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 724 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 725 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 726 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 727 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 728 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 729 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 730 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 731 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 732 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 733 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 734 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 735 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 736 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 737 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 738 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 739 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 740 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 741 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 742 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 743 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 744 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 745 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 746 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 747 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 748 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 749 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 750 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 751 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 752 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 753 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 754 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 755 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 756 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 757 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 758 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 759 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 760 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 761 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 762 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 763 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 764 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 765 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 766 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 767 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 768 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 769 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 770 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 771 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 772 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 773 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 774 Returned Deck Count for Player 0 = 149, expected = -1
****FAIL Iteration: 774 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 775 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 776 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 777 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 778 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 779 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 780 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 781 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 782 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 783 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 784 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 785 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 786 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 787 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 788 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 789 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 790 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 791 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 792 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 793 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 794 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 795 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 796 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 797 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 798 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 799 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 800 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 801 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 802 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 803 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 804 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 805 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 806 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 807 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 808 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 809 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 810 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 811 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 812 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 813 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 814 Returned Deck Count for Player 1 = 449, expected = -1
****FAIL Iteration: 814 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 815 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 816 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 817 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 818 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 819 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 820 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 821 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 822 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 823 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 824 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 825 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 826 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 827 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 828 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 829 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 830 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 831 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 832 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 833 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 834 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 835 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 836 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 837 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 838 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 839 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 840 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 841 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 842 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 843 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 844 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 845 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 846 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 847 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 848 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 849 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 850 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 851 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 852 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 853 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 854 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 855 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 856 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 857 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 858 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 859 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 860 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 861 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 862 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 863 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 864 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 865 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 866 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 867 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 868 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 869 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 870 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 871 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 872 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 873 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 874 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 875 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 876 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 877 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 878 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 879 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 880 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 881 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 882 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 883 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 884 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 885 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 886 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 887 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 888 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 889 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 890 Returned Deck Count for Player 1 = 68, expected = -2
****FAIL Iteration: 890 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 891 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 892 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 893 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 894 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 895 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 896 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 897 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 898 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 899 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 900 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 901 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 902 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 903 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 904 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 905 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 906 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 907 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 908 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 909 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 910 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 911 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 912 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 913 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 914 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 915 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 916 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 917 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 918 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 919 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 920 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 921 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 922 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 923 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 924 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 925 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 926 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 927 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 928 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 929 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 930 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 931 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 932 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 933 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 934 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 935 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 936 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 937 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 938 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 939 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 940 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 941 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 942 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 943 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 944 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 945 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 946 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 947 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 948 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 949 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 950 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 951 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 952 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 953 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 954 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 955 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 956 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 957 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 958 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 959 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 960 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 961 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 962 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 963 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 964 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 965 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 966 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 967 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 968 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 969 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 970 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 971 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 972 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 973 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 974 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 975 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 976 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 977 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 978 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 979 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 980 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 981 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 982 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 983 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 984 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 985 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 986 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 987 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 988 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 989 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 990 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 991 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 992 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 993 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 994 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 995 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 996 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 997 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 998 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 999 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1000 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1001 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1002 Returned Deck Count for Player 0 = 428, expected = -1
****FAIL Iteration: 1002 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1003 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1004 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1005 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1006 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1007 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1008 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1009 Returned Deck Count for Player 1 = 278, expected = -1
****FAIL Iteration: 1009 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1010 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1011 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1012 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1013 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1014 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1015 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1016 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1017 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1018 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1019 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1020 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1021 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1022 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1023 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1024 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1025 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1026 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1027 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1028 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1029 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1030 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1031 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1032 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1033 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1034 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1035 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1036 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1037 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1038 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1039 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1040 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1041 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1042 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1043 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1044 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1045 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1046 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1047 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1048 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1049 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1050 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1051 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1052 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1053 Returned Deck Count for Player 1 = 57, expected = -1
****FAIL Iteration: 1053 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1054 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1055 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1056 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1057 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1058 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1059 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1060 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1061 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1062 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1063 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1064 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1065 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1066 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1067 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1068 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1069 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1070 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1071 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1072 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1073 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1074 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1075 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1076 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1077 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1078 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1079 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1080 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1081 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1082 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1083 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1084 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1085 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1086 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1087 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1088 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1089 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1090 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1091 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1092 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1093 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1094 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1095 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1096 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1097 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1098 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1099 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1100 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1101 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1102 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1103 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1104 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1105 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1106 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1107 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1108 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1109 Estate Count for Player 0 = 6, expected = 8
*
**FAIL Iteration: 1110 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1111 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1112 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1113 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1114 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1115 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1116 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1117 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1118 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1119 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1120 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1121 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1122 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1123 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1124 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1125 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1126 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1127 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1128 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1129 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1130 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1131 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1132 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1133 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1134 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1135 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1136 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1137 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1138 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1139 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1140 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1141 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1142 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1143 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1144 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1145 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1146 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1147 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1148 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1149 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1150 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1151 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1152 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1153 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1154 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1155 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1156 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1157 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1158 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1159 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1160 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1161 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1162 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1163 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1164 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1165 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1166 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1167 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1168 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1169 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1170 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1171 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1172 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1173 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1174 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1175 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1176 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1177 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1178 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1179 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1180 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1181 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1182 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1183 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1184 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1185 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1186 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1187 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1188 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1189 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1190 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1191 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1192 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1193 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1194 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1195 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1196 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1197 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1198 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1199 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1200 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1201 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1202 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1203 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1204 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1205 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1206 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1207 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1208 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1209 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1210 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1211 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1212 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1213 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1214 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1215 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1216 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1217 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1218 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1219 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1220 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1221 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1222 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1223 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1224 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1225 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1226 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1227 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1228 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1229 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1230 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1231 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1232 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1233 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1234 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1235 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1236 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1237 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1238 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1239 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1240 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1241 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1242 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1243 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1244 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1245 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1246 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1247 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1248 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1249 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1250 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1251 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1252 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1253 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1254 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1255 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1256 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1257 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1258 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1259 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1260 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1261 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1262 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1263 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1264 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1265 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1266 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1267 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1268 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1269 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1270 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1271 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1272 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1273 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1274 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1275 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1276 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1277 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1278 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1279 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1280 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1281 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1282 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1283 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1284 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1285 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1286 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1287 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1288 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1289 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1290 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1291 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1292 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1293 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1294 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1295 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1296 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1297 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1298 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1299 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1300 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1301 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1302 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1303 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1304 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1305 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1306 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1307 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1308 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1309 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1310 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1311 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1312 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1313 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1314 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1315 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1316 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1317 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1318 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1319 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1320 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1321 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1322 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1323 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1324 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1325 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1326 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1327 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1328 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1329 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1330 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1331 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1332 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1333 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1334 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1335 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1336 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1337 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1338 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1339 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1340 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1341 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1342 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1343 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1344 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1345 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1346 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1347 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1348 Returned Deck Count for Player 1 = 30, expected = -1
****FAIL Iteration: 1348 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1349 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1350 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1351 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1352 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1353 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1354 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1355 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1356 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1357 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1358 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1359 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1360 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1361 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1362 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1363 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1364 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1365 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1366 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1367 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1368 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1369 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1370 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1371 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1372 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1373 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1374 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1375 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1376 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1377 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1378 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1379 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1380 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1381 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1382 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1383 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1384 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1385 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1386 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1387 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1388 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1389 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1390 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1391 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1392 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1393 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1394 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1395 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1396 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1397 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1398 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1399 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1400 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1401 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1402 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1403 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1404 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1405 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1406 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1407 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1408 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1409 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1410 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1411 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1412 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1413 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1414 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1415 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1416 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1417 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1418 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1419 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1420 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1421 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1422 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1423 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1424 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1425 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1426 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1427 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1428 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1429 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1430 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1431 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1432 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1433 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1434 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1435 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1436 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1437 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1438 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1439 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1440 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1441 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1442 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1443 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1444 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1445 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1446 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1447 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1448 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1449 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1450 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1451 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1452 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1453 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1454 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1455 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1456 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1457 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1458 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1459 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1460 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1461 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1462 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1463 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1464 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1465 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1466 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1467 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1468 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1469 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1470 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1471 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1472 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1473 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1474 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1475 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1476 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1477 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1478 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1479 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1480 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1481 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1482 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1483 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1484 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1485 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1486 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1487 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1488 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1489 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1490 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1491 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1492 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1493 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1494 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1495 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1496 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1497 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1498 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1499 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1500 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1501 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1502 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1503 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1504 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1505 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1506 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1507 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1508 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1509 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1510 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1511 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1512 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1513 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1514 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1515 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1516 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1517 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1518 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1519 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1520 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1521 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1522 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1523 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1524 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1525 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1526 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1527 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1528 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1529 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1530 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1531 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1532 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1533 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1534 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1535 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1536 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1537 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1538 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1539 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1540 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1541 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1542 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1543 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1544 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1545 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1546 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1547 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1548 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1549 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1550 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1551 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1552 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1553 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1554 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1555 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1556 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1557 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1558 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1559 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1560 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1561 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1562 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1563 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1564 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1565 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1566 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1567 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1568 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1569 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1570 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1571 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1572 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1573 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1574 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1575 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1576 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1577 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1578 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1579 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1580 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1581 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1582 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1583 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1584 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1585 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1586 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1587 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1588 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1589 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1590 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1591 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1592 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1593 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1594 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1595 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1596 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1597 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1598 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1599 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1600 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1601 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1602 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1603 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1604 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1605 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1606 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1607 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1608 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1609 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1610 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1611 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1612 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1613 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1614 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1615 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1616 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1617 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1618 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1619 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1620 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1621 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1622 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1623 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1624 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1625 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1626 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1627 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1628 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1629 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1630 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1631 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1632 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1633 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1634 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1635 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1636 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1637 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1638 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1639 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1640 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1641 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1642 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1643 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1644 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1645 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1646 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1647 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1648 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1649 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1650 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1651 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1652 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1653 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1654 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1655 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1656 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1657 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1658 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1659 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1660 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1661 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1662 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1663 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1664 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1665 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1666 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1667 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1668 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1669 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1670 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1671 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1672 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1673 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1674 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1675 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1676 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1677 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1678 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1679 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1680 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1681 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1682 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1683 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1684 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1685 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1686 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1687 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1688 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1689 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1690 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1691 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1692 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1693 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1694 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1695 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1696 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1697 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1698 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1699 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1700 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1701 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1702 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1703 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1704 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1705 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1706 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1707 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1708 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1709 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1710 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1711 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1712 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1713 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1714 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1715 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1716 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1717 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1718 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1719 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1720 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1721 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1722 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1723 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1724 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1725 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1726 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1727 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1728 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1729 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1730 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1731 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1732 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1733 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1734 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1735 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1736 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1737 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1738 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1739 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1740 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1741 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1742 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1743 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1744 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1745 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1746 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1747 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1748 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1749 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1750 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1751 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1752 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1753 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1754 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1755 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1756 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1757 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1758 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1759 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1760 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1761 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1762 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1763 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1764 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1765 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1766 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1767 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1768 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1769 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1770 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1771 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1772 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1773 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1774 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1775 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1776 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1777 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1778 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1779 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1780 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1781 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1782 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1783 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1784 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1785 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1786 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1787 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1788 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1789 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1790 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1791 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1792 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1793 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1794 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1795 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1796 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1797 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1798 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1799 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1800 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1801 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1802 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1803 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1804 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1805 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1806 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1807 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1808 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1809 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1810 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1811 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1812 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1813 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1814 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1815 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1816 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1817 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1818 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1819 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1820 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1821 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1822 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1823 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1824 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1825 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1826 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1827 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1828 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1829 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1830 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1831 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1832 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1833 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1834 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1835 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1836 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1837 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1838 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1839 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1840 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1841 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1842 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1843 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1844 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1845 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1846 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1847 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1848 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1849 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1850 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1851 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1852 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1853 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1854 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1855 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1856 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1857 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1858 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1859 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1860 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1861 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1862 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1863 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1864 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1865 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1866 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1867 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1868 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1869 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1870 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1871 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1872 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1873 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1874 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1875 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1876 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1877 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1878 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1879 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1880 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1881 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1882 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1883 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1884 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1885 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1886 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1887 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1888 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1889 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1890 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1891 Returned Deck Count for Player 0 = 219, expected = -1
****FAIL Iteration: 1891 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1892 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1893 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1894 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1895 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1896 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1897 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1898 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1899 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1900 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1901 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1902 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1903 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1904 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1905 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1906 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1907 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1908 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1909 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1910 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1911 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1912 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1913 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1914 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1915 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1916 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1917 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1918 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1919 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1920 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1921 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1922 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1923 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1924 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1925 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1926 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1927 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1928 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1929 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1930 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1931 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1932 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1933 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1934 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1935 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1936 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1937 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1938 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1939 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1940 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1941 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1942 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1943 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1944 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1945 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1946 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1947 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1948 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1949 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1950 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1951 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1952 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1953 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1954 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1955 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1956 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1957 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1958 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1959 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1960 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1961 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1962 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1963 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1964 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1965 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1966 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1967 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1968 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1969 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1970 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1971 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1972 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1973 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1974 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1975 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1976 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1977 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1978 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1979 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1980 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1981 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1982 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1983 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1984 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1985 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1986 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1987 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1988 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1989 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1990 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1991 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1992 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1993 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1994 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1995 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1996 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1997 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1998 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1999 Estate Count for Player 1 = 6, expected = 8
FAIL: There are 2009 errors for playing village card.
File 'randomtestcard.c'
Lines executed:75.00% of 72
Creating 'randomtestcard.c.gcov'

File 'randomtestcard.c'
Lines executed:75.00% of 72
Branches executed:100.00% of 28
Taken at least once:64.29% of 28
Calls executed:64.29% of 28
Creating 'randomtestcard.c.gcov'

        -:    0:Source:randomtestcard.c
        -:    0:Graph:randomtestcard.gcno
        -:    0:Data:randomtestcard.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:*Alex Marsh
        -:    3:*CS362
        -:    4:*randomtestcard.c
        -:    5:*Last Modified: May 7, 2016
        -:    6:*
        -:    7:*This is a random test for the implementation of the village card in dominion.c. Format and some code taken from 'betterTestDrawCard.c' and 'cardtest2.c'
        -:    8:*
        -:    9:*When a player plays this card the player should gain 1 card and 
        -:   10:*two actions.
        -:   11:*
        -:   12:*
        -:   13:*Include the following lines in your makefile:
        -:   14:*
        -:   15:*randomtestcard.c: randomtestcard.c dominion.o rngs.o
        -:   16:*       gcc -o randomtestcard -g randomtestcard.c dominion.o rngs.o $(CFLAGS)
        -:   17:*/
        -:   18:
        -:   19:#include "dominion.h"
        -:   20:#include "dominion_helpers.h"
        -:   21:#include "interface.h"
        -:   22:#include <string.h>
        -:   23:#include <stdio.h>
        -:   24:#include <assert.h>
        -:   25:#include "rngs.h"
        -:   26:
        -:   27:#define TESTCARD "village"
        -:   28:
function main called 1 returned 100% blocks executed 71%
        1:   29:int main() {
        -:   30:    int i, coins;
        -:   31:    int currPlayer, otherPlayer;
        1:   32:    int seed = 1000;
        1:   33:    int numPlayers = 2;
        1:   34:    int newCards = 2, discarded = 1;
        1:   35:    int num_copper = 60;
        1:   36:    int num_silver = 40;
        1:   37:    int num_gold = 30;
        1:   38:    int choice1 = 0, choice2 = 0, choice3 = 0;
        1:   39:    int handpos, bonus = 0;
        1:   40:    int errors = 0;
        1:   41:    int testTreasureCount = 0, realTreasureCount = 0;
        -:   42:    int testHandCount, realHandCount;
        1:   43:    int handIndex, shuffledCards = 0;
        -:   44:
        -:   45:
        1:   46:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   47:	       remodel, smithy, village, baron, great_hall};
        -:   48:
        -:   49:  struct gameState G, expected, played;
        -:   50:
        1:   51:  printf("--------------Testing village Randomly--------------\n");
call    0 returned 100%
        -:   52:    
        1:   53:  srand(time(NULL)); //set rand
call    0 returned 100%
call    1 returned 100%
        -:   54:     
        1:   55:  SelectStream(2);
call    0 returned 100%
        1:   56:  PutSeed(3);    
call    0 returned 100%
        -:   57:    
     2001:   58:  for(i=0; i<2000; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   59:    // initialize game environment & begin testing
     2000:   60:    initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
     2000:   61:    memcpy(&played, &G, sizeof(struct gameState));
        -:   62:    
        -:   63:    //initialize a random game 
     2000:   64:    currPlayer = rand() % numPlayers; //get random player
call    0 returned 100%
     2000:   65:    if(currPlayer == 0){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
     1006:   66:      otherPlayer = 1;   
        -:   67:    }
        -:   68:    else
      994:   69:        otherPlayer = 2;
        -:   70:      
     2000:   71:    played.whoseTurn = currPlayer; //set player
        -:   72:     
        -:   73:    //randomize deck, hand, and discard  
     2000:   74:    played.deckCount[currPlayer] = (rand() % (MAX_DECK+1));
call    0 returned 100%
     2000:   75:    played.discardCount[currPlayer] = (rand() % ( MAX_DECK+1));
call    0 returned 100%
     2000:   76:    played.handCount[currPlayer] = (rand() %  (MAX_HAND+1));
call    0 returned 100%
        -:   77:    
        -:   78:    //get random number for handposition
     2000:   79:    handpos  = (rand() % 7);
call    0 returned 100%
        -:   80:      
        -:   81:    //insert a adventure card in players hand for testing
     2000:   82:    played.hand[currPlayer][handpos] = village;   
        -:   83:      
        -:   84:    //randomize the number of coins 
     2000:   85:    coins = (rand() % (num_copper + 1)); //copper coins
call    0 returned 100%
        -:   86:    //printf("coins = %d\n", coins);
     2000:   87:    coins =+ (rand() % (num_silver +1)); //silver coins
call    0 returned 100%
        -:   88:    //printf("coins = %d\n", coins);
     2000:   89:    coins =+ (rand() % (num_gold+1)); //gold coins
call    0 returned 100%
        -:   90:    //printf("coins = %d\n", coins);
        -:   91:      
     2000:   92:    played.coins = coins;  
        -:   93:
        -:   94:    //copy random test state for testing  
     2000:   95:    memcpy(&expected, &played, sizeof(struct gameState));
        -:   96:  
        -:   97: /***     
        -:   98:    //test printing
        -:   99:    printf("%d player handcount %d:\n", currPlayer, played.deckCount[currPlayer]);   
        -:  100:    printf("%d player deckcount %d:\n", currPlayer, played.deckCount[currPlayer]);   
        -:  101:    printf("%d player discardcount %d:\n", currPlayer, played.discardCount[currPlayer]);   
        -:  102:    printf("%d player coins %d:\n", currPlayer, countHandCoins(currPlayer, &played));   
        -:  103:    printf("*******************************************************\n");  
        -:  104:  
        -:  105:    printf("%d player handcount %d:\n", currPlayer, expected.deckCount[currPlayer]);   
        -:  106:    printf("%d player deckcount %d:\n", currPlayer, expected.deckCount[currPlayer]);   
        -:  107:    printf("%d player discardcount %d:\n", currPlayer, expected.discardCount[currPlayer]);   
        -:  108:    printf("%d player coins %d:\n", currPlayer, countHandCoins(currPlayer, &expected));   
        -:  109:    printf("*******************************************************\n");  
        -:  110: ***/   
        -:  111:      
        -:  112:    //play village card
     2000:  113:    cardEffect(village, choice1, choice2, choice3, &played, handpos, bonus); 
call    0 returned 100%
        -:  114:      
        -:  115:      
        -:  116:    //test to make sure play is recieving 1 cards
        -:  117:    //the player should draw 1 card and discard the village card
        -:  118:    //this should make the hand the same count
        -:  119:    
        -:  120: //   printf("Player %d hand count = %d, expected = %d\n", currPlayer, recievedResult, expected);
     2000:  121:    if(played.handCount[currPlayer] != expected.handCount[currPlayer] + newCards - discarded){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  122:        //check if hand is correct
    #####:  123:            printf("****FAIL Iteration: %d Returned Hand Count = %d, expected = %d\n", i, played.handCount[currPlayer], expected.handCount[currPlayer] + newCards - discarded); 
call    0 never executed
    #####:  124:            errors++;
        -:  125:    }
        -:  126:    
        -:  127:    //test to make sure player is drawing from their own pile
        -:  128: //   printf("Player %d deck count = %d, expected = %d\n", currPlayer, played.deckCount[currPlayer], expected.deckCount[currPlayer] - newCards + shuffledCards);
     2000:  129:    if(played.deckCount[currPlayer] != expected.deckCount[currPlayer] - newCards + shuffledCards){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  130:        //check if deck is correct
        9:  131:            printf("****FAIL Iteration: %d Returned Deck Count for Player %d = %d, expected = %d\n", i, currPlayer, played.deckCount[currPlayer], expected.deckCount[currPlayer] - newCards + shuffledCards); 
call    0 returned 100%
        9:  132:            errors++;
        -:  133:    }
        -:  134:    
        -:  135:    //test for players number of actions
        -:  136:    //the player shoud have 2 action moves
        -:  137: //   printf("Player %d action count = %d, expected = %d\n", currPlayer, played.numActions, expected.numActions+2);
     2000:  138:    if(played.numActions != expected.numActions+2){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  139:        //check if deck is correct
    #####:  140:            printf("****FAIL Iteration: %d Returned Action Count for Player %d = %d, expected = %d\n", i, currPlayer, played.numActions, expected.numActions+2); 
call    0 never executed
    #####:  141:            errors++;
        -:  142:    }
        -:  143:    
        -:  144:        //test to make sure other players game state has not changed
        -:  145:    
        -:  146:    //test to make sure other players hand is not changed
        -:  147:    
        -:  148: //   printf("Player %d hand count = %d, expected = %d\n", otherPlayer, recievedResult, expected);
     2000:  149:    if(played.handCount[otherPlayer] != expected.handCount[otherPlayer]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  150:        //check if hand is correct
    #####:  151:            printf("****FAIL Iteration: %d Returned Hand Count for Player %d = %d, expected = %d\n", i, otherPlayer, played.handCount[otherPlayer], expected.handCount[otherPlayer]); 
call    0 never executed
    #####:  152:            errors++;
        -:  153:    }
        -:  154:    
        -:  155:    //test to make sure other player deck is same and first player did not draw
        -:  156:    //from other players pile
        -:  157://    printf("Player %d deck count = %d, expected = %d\n", otherPlayer, played.deckCount[otherPlayer], expected.deckCount[otherPlayer]);
     2000:  158:    if(played.deckCount[otherPlayer] != expected.deckCount[otherPlayer]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  159:        //check if deck is correct
    #####:  160:            printf("****FAIL Iteration: %d Returned Deck Count for Player %d = %d, expected = %d\n", i, otherPlayer, played.deckCount[currPlayer], expected.deckCount[currPlayer]); 
call    0 never executed
    #####:  161:            errors++;
        -:  162:    }
        -:  163:    
        -:  164:    //test to make sure victory card piles where untouched.
        -:  165:    //check curse
     2000:  166:    if(played.supplyCount[curse] != expected.supplyCount[curse]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  167:         printf("****FAIL Iteration: %d Curse Count for Player %d = %d, expected = %d\n", i, currPlayer, played.supplyCount[curse], expected.supplyCount[curse]); 
call    0 never executed
    #####:  168:            errors++;
        -:  169:    }
        -:  170:    //check estate
     2000:  171:    if(played.supplyCount[estate] != expected.supplyCount[estate]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     2000:  172:         printf("****FAIL Iteration: %d Estate Count for Player %d = %d, expected = %d\n", i, currPlayer, played.supplyCount[estate], expected.supplyCount[estate]); 
call    0 returned 100%
     2000:  173:            errors++;
        -:  174:    }
        -:  175:    //check duchy
     2000:  176:    if(played.supplyCount[duchy] != expected.supplyCount[duchy]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  177:         printf("****FAIL Iteration: %d Duchy Count for Player %d = %d, expected = %d\n", i, currPlayer, played.supplyCount[duchy], expected.supplyCount[duchy]); 
call    0 never executed
    #####:  178:            errors++;
        -:  179:    }
        -:  180:    //check province
     2000:  181:    if(played.supplyCount[province] != expected.supplyCount[province]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  182:         printf("****FAIL Iteration: %d Province Count for Player %d = %d, expected = %d\n", i, currPlayer, played.supplyCount[province], expected.supplyCount[province]); 
call    0 never executed
    #####:  183:            errors++;
        -:  184:    }
        -:  185:    
        -:  186:    //test to make sure the kingdom cards count have not been altered
        -:  187:    int i;
    22000:  188:    for(i=0; i < 10; i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    20000:  189:        if(played.supplyCount[k[i]] != expected.supplyCount[k[i]]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  190:         printf("****FAIL Iteration: %d Count for Player %d = %d, expected = %d\n", i, currPlayer, played.supplyCount[k[i]], expected.supplyCount[k[i]]); 
call    0 never executed
    #####:  191:            errors++;
    #####:  192:         printf("%d is incorrect\n", k[i]);    
call    0 never executed
        -:  193:        }
        -:  194:    }
        -:  195:    
        -:  196:    
        -:  197:    
        -:  198:  }
        -:  199:    
        -:  200:    
        -:  201:    
        -:  202:    
        1:  203:    if(errors == 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  204:     printf("ALL TESTS PASS for village card.\n");   
call    0 never executed
        -:  205:    }
        -:  206:    else{
        1:  207:     printf("FAIL: There are %d errors for playing village card.\n", errors);   
call    0 returned 100%
        -:  208:    }  
        -:  209:      
        -:  210:      
        -:  211:      
        -:  212:      
        -:  213:      
        1:  214:    return 0; 
        -:  215:}
File 'dominion.c'
Lines executed:31.80% of 566
Creating 'dominion.c.gcov'

File 'dominion.c'
Lines executed:31.80% of 566
Branches executed:30.94% of 417
Taken at least once:21.82% of 417
Calls executed:24.75% of 101
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function playSmithyCard called 0 returned 0% blocks executed 0%
    #####:    8:void playSmithyCard(int handPos, struct gameState *state){
        -:    9:    //find current player
    #####:   10:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -:   11:    int i;
        -:   12:    //+3 Cards
    #####:   13:      for (i = 0; i <= 3; i++)
branch  0 never executed
branch  1 never executed
        -:   14:	{
    #####:   15:	  drawCard(currentPlayer, state);
call    0 never executed
        -:   16:	}
        -:   17:			
        -:   18:      //discard card from hand
    #####:   19:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:   20:}
        -:   21:
function playAdventurerCard called 2000 returned 100% blocks executed 100%
     2000:   22:void playAdventurerCard(struct gameState *state){
        -:   23:     //find current player
     2000:   24:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:   25:    //set the amount of treasure to 0
     2000:   26:    int drawntreasure = 0;
        -:   27:    //set z to 0
     2000:   28:    int z = 0;
        -:   29:    int cardDrawn;
        -:   30:    //initialize a temp hand
        -:   31:    int temphand[MAX_HAND];
        -:   32:    
   504879:   33:    while(drawntreasure<2){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   500879:   34:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
     2711:   35:          shuffle(currentPlayer, state);
call    0 returned 100%
        -:   36:        }
   500879:   37:        drawCard(currentPlayer, state);
call    0 returned 100%
   500879:   38:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
   500879:   39:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
     4000:   40:          drawntreasure++;
        -:   41:        else{
   496879:   42:          temphand[z]=cardDrawn;
   496879:   43:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   496879:   44:          z++;
        -:   45:        }
        -:   46:          }
   499373:   47:     while(z-1>=0){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   495373:   48:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
   495373:   49:        z=z-1;
        -:   50:          } 
     2000:   51:}
        -:   52:    
function playVillageCard called 2000 returned 100% blocks executed 100%
     2000:   53:void playVillageCard(int handPos, struct gameState *state){
        -:   54:       //find current player
     2000:   55:    int currentPlayer = whoseTurn(state); 
call    0 returned 100%
        -:   56:    
        -:   57:      //+1 Card
     2000:   58:      drawCard(currentPlayer, state);
call    0 returned 100%
     2000:   59:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:   60:    
        -:   61:      //+2 Actions
     2000:   62:      state->numActions = state->numActions + 2;
        -:   63:			
        -:   64:      //discard played card from hand
     2000:   65:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     2000:   66:}
        -:   67:
function playGreat_HallCard called 0 returned 0% blocks executed 0%
    #####:   68:void playGreat_HallCard(int handPos, struct gameState *state){
        -:   69:    //find current player
    #####:   70:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -:   71:    
        -:   72:    //+1 Card
    #####:   73:      drawCard(currentPlayer, state);
call    0 never executed
        -:   74:			
        -:   75:      //+1 Actions
    #####:   76:      state->numActions++;
        -:   77:			
        -:   78:      //discard card from hand
    #####:   79:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:   80:}
        -:   81:
function playMinionCard called 0 returned 0% blocks executed 0%
    #####:   82:void playMinionCard(int handPos, int choice1, int choice2, struct gameState *state){
        -:   83:    int i;
        -:   84:    int j;
        -:   85:    //find current player
    #####:   86:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -:   87:    
        -:   88:    int cardDrawn;
        -:   89:    
        -:   90:    //+1 action
    #####:   91:      state->numActions++;
        -:   92:			
        -:   93:      //discard card from hand
    #####:   94:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:   95:			
    #####:   96:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:   97:	{
    #####:   98:	  state->coins = state->coins + 2;
        -:   99:	}
        -:  100:			
    #####:  101:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  102:	{
        -:  103:	  //discard hand
    #####:  104:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  105:	    {
    #####:  106:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  107:	    }
        -:  108:				
        -:  109:	  //draw 4
    #####:  110:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  111:	    {
    #####:  112:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  113:	    }
        -:  114:				
        -:  115:	  //other players discard hand and redraw if hand size > 4
    #####:  116:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  117:	    {
    #####:  118:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  119:		{
    #####:  120:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  121:		    {
        -:  122:		      //discard hand
    #####:  123:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  124:			{
    #####:  125:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  126:			}
        -:  127:							
        -:  128:		      //draw 4
    #####:  129:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  130:			{
    #####:  131:			  drawCard(i, state);
call    0 never executed
        -:  132:			}
        -:  133:		    }
        -:  134:		}
        -:  135:	    }
        -:  136:				
        -:  137:	}
    #####:  138:      return 0;   
        -:  139:}
        -:  140:    
function compare called 157188 returned 100% blocks executed 100%
   157188:  141:int compare(const void* a, const void* b) {
   157188:  142:  if (*(int*)a > *(int*)b)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
     1089:  143:    return 1;
   156099:  144:  if (*(int*)a < *(int*)b)
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
    32013:  145:    return -1;
   124086:  146:  return 0;
        -:  147:}
        -:  148:
        -:  149:
function newGame called 0 returned 0% blocks executed 0%
    #####:  150:struct gameState* newGame() {
    #####:  151:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  152:  return g;
        -:  153:}
        -:  154:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:  155:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  156:		  int k8, int k9, int k10) {
    #####:  157:  int* k = malloc(10 * sizeof(int));
    #####:  158:  k[0] = k1;
    #####:  159:  k[1] = k2;
    #####:  160:  k[2] = k3;
    #####:  161:  k[3] = k4;
    #####:  162:  k[4] = k5;
    #####:  163:  k[5] = k6;
    #####:  164:  k[6] = k7;
    #####:  165:  k[7] = k8;
    #####:  166:  k[8] = k9;
    #####:  167:  k[9] = k10;
    #####:  168:  return k;
        -:  169:}
        -:  170:
function initializeGame called 4000 returned 100% blocks executed 88%
     4000:  171:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  172:		   struct gameState *state) {
        -:  173:
        -:  174:  int i;
        -:  175:  int j;
        -:  176:  int it;			
        -:  177:  //set up random number generator
     4000:  178:  SelectStream(1);
call    0 returned 100%
     4000:  179:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:  180:  
        -:  181:  //check number of players
     4000:  182:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  183:    {
    #####:  184:      return -1;
        -:  185:    }
        -:  186:
        -:  187:  //set number of players
     4000:  188:  state->numPlayers = numPlayers;
        -:  189:
        -:  190:  //check selected kingdom cards are different
    44000:  191:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  192:    {
   440000:  193:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  194:        {
   400000:  195:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  196:	    {
    #####:  197:	      return -1;
        -:  198:	    }
        -:  199:        }
        -:  200:    }
        -:  201:
        -:  202:
        -:  203:  //initialize supply
        -:  204:  ///////////////////////////////
        -:  205:
        -:  206:  //set number of Curse cards
     4000:  207:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  208:    {
     4000:  209:      state->supplyCount[curse] = 10;
        -:  210:    }
    #####:  211:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:  212:    {
    #####:  213:      state->supplyCount[curse] = 20;
        -:  214:    }
        -:  215:  else
        -:  216:    {
    #####:  217:      state->supplyCount[curse] = 30;
        -:  218:    }
        -:  219:
        -:  220:  //set number of Victory cards
     4000:  221:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  222:    {
     4000:  223:      state->supplyCount[estate] = 8;
     4000:  224:      state->supplyCount[duchy] = 8;
     4000:  225:      state->supplyCount[province] = 8;
        -:  226:    }
        -:  227:  else
        -:  228:    {
    #####:  229:      state->supplyCount[estate] = 12;
    #####:  230:      state->supplyCount[duchy] = 12;
    #####:  231:      state->supplyCount[province] = 12;
        -:  232:    }
        -:  233:
        -:  234:  //set number of Treasure cards
     4000:  235:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     4000:  236:  state->supplyCount[silver] = 40;
     4000:  237:  state->supplyCount[gold] = 30;
        -:  238:
        -:  239:  //set number of Kingdom cards
    84000:  240:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  241:    {
   660000:  242:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  243:	{
   620000:  244:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  245:	    {
        -:  246:	      //check if card is a 'Victory' Kingdom card
    40000:  247:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  248:		{
    16000:  249:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     8000:  250:		    state->supplyCount[i] = 8; 
        -:  251:		  }
    #####:  252:		  else{ state->supplyCount[i] = 12; }
        -:  253:		}
        -:  254:	      else
        -:  255:		{
    32000:  256:		  state->supplyCount[i] = 10;
        -:  257:		}
    40000:  258:	      break;
        -:  259:	    }
        -:  260:	  else    //card is not in the set choosen for the game
        -:  261:	    {
   580000:  262:	      state->supplyCount[i] = -1;
        -:  263:	    }
        -:  264:	}
        -:  265:
        -:  266:    }
        -:  267:
        -:  268:  ////////////////////////
        -:  269:  //supply intilization complete
        -:  270:
        -:  271:  //set player decks
    12000:  272:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  273:    {
     8000:  274:      state->deckCount[i] = 0;
    32000:  275:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  276:	{
    24000:  277:	  state->deck[i][j] = estate;
    24000:  278:	  state->deckCount[i]++;
        -:  279:	}
    64000:  280:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  281:	{
    56000:  282:	  state->deck[i][j] = copper;
    56000:  283:	  state->deckCount[i]++;		
        -:  284:	}
        -:  285:    }
        -:  286:
        -:  287:  //shuffle player decks
    12000:  288:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  289:    {
     8000:  290:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  291:	{
    #####:  292:	  return -1;
        -:  293:	}
        -:  294:    }
        -:  295:
        -:  296:  //draw player hands
    12000:  297:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  298:    {  
        -:  299:      //initialize hand size to zero
     8000:  300:      state->handCount[i] = 0;
     8000:  301:      state->discardCount[i] = 0;
        -:  302:      //draw 5 cards
        -:  303:      // for (j = 0; j < 5; j++)
        -:  304:      //	{
        -:  305:      //	  drawCard(i, state);
        -:  306:      //	}
        -:  307:    }
        -:  308:  
        -:  309:  //set embargo tokens to 0 for all supply piles
   112000:  310:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  311:    {
   108000:  312:      state->embargoTokens[i] = 0;
        -:  313:    }
        -:  314:
        -:  315:  //initialize first player's turn
     4000:  316:  state->outpostPlayed = 0;
     4000:  317:  state->phase = 0;
     4000:  318:  state->numActions = 1;
     4000:  319:  state->numBuys = 1;
     4000:  320:  state->playedCardCount = 0;
     4000:  321:  state->whoseTurn = 0;
     4000:  322:  state->handCount[state->whoseTurn] = 0;
        -:  323:  //int it; move to top
        -:  324:
        -:  325:  //Moved draw cards to here, only drawing at the start of a turn
    24000:  326:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    20000:  327:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  328:  }
        -:  329:
     4000:  330:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  331:
     4000:  332:  return 0;
        -:  333:}
        -:  334:
function shuffle called 13461 returned 100% blocks executed 100%
    13461:  335:int shuffle(int player, struct gameState *state) {
        -:  336: 
        -:  337:
        -:  338:  int newDeck[MAX_DECK];
    13461:  339:  int newDeckPos = 0;
        -:  340:  int card;
        -:  341:  int i;
        -:  342:
    13461:  343:  if (state->deckCount[player] < 1)
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
     5416:  344:    return -1;
     8045:  345:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  346:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  347:
   105371:  348:  while (state->deckCount[player] > 0) {
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
    89281:  349:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    89281:  350:    newDeck[newDeckPos] = state->deck[player][card];
    89281:  351:    newDeckPos++;
  1024198:  352:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
   934917:  353:      state->deck[player][i] = state->deck[player][i+1];
        -:  354:    }
    89281:  355:    state->deckCount[player]--;
        -:  356:  }
    97326:  357:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
    89281:  358:    state->deck[player][i] = newDeck[i];
    89281:  359:    state->deckCount[player]++;
        -:  360:  }
        -:  361:
     8045:  362:  return 0;
        -:  363:}
        -:  364:
function playCard called 0 returned 0% blocks executed 0%
    #####:  365:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  366:{	
        -:  367:  int card;
    #####:  368:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  369:
        -:  370:  //check if it is the right phase
    #####:  371:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  372:    {
    #####:  373:      return -1;
        -:  374:    }
        -:  375:	
        -:  376:  //check if player has enough actions
    #####:  377:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  378:    {
    #####:  379:      return -1;
        -:  380:    }
        -:  381:	
        -:  382:  //get card played
    #####:  383:  card = handCard(handPos, state);
call    0 never executed
        -:  384:	
        -:  385:  //check if selected card is an action
    #####:  386:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  387:    {
    #####:  388:      return -1;
        -:  389:    }
        -:  390:	
        -:  391:  //play card
    #####:  392:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  393:    {
    #####:  394:      return -1;
        -:  395:    }
        -:  396:	
        -:  397:  //reduce number of actions
    #####:  398:  state->numActions--;
        -:  399:
        -:  400:  //update coins (Treasure cards may be added with card draws)
    #####:  401:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  402:	
    #####:  403:  return 0;
        -:  404:}
        -:  405:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  406:int buyCard(int supplyPos, struct gameState *state) {
        -:  407:  int who;
        -:  408:  if (DEBUG){
        -:  409:    printf("Entering buyCard...\n");
        -:  410:  }
        -:  411:
        -:  412:  // I don't know what to do about the phase thing.
        -:  413:
    #####:  414:  who = state->whoseTurn;
        -:  415:
    #####:  416:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  417:    if (DEBUG)
        -:  418:      printf("You do not have any buys left\n");
    #####:  419:    return -1;
    #####:  420:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  421:    if (DEBUG)
        -:  422:      printf("There are not any of that type of card left\n");
    #####:  423:    return -1;
    #####:  424:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  425:    if (DEBUG) 
        -:  426:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  427:    return -1;
        -:  428:  } else {
    #####:  429:    state->phase=1;
        -:  430:    //state->supplyCount[supplyPos]--;
    #####:  431:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  432:  
    #####:  433:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  434:    state->numBuys--;
        -:  435:    if (DEBUG)
        -:  436:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  437:  }
        -:  438:
        -:  439:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  440:  //state->discardCount[who]++;
        -:  441:    
    #####:  442:  return 0;
        -:  443:}
        -:  444:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  445:int numHandCards(struct gameState *state) {
    #####:  446:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  447:}
        -:  448:
function handCard called 0 returned 0% blocks executed 0%
    #####:  449:int handCard(int handPos, struct gameState *state) {
    #####:  450:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  451:  return state->hand[currentPlayer][handPos];
        -:  452:}
        -:  453:
function supplyCount called 6000 returned 100% blocks executed 100%
     6000:  454:int supplyCount(int card, struct gameState *state) {
     6000:  455:  return state->supplyCount[card];
        -:  456:}
        -:  457:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  458:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  459:  int i;
    #####:  460:  int count = 0;
        -:  461:
    #####:  462:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  463:    {
    #####:  464:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  465:    }
        -:  466:
    #####:  467:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  468:    {
    #####:  469:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  470:    }
        -:  471:
    #####:  472:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  473:    {
    #####:  474:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  475:    }
        -:  476:
    #####:  477:  return count;
        -:  478:}
        -:  479:
function whoseTurn called 8000 returned 100% blocks executed 100%
     8000:  480:int whoseTurn(struct gameState *state) {
     8000:  481:  return state->whoseTurn;
        -:  482:}
        -:  483:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  484:int endTurn(struct gameState *state) {
        -:  485:  int k;
        -:  486:  int i;
    #####:  487:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  488:  
        -:  489:  //Discard hand
    #####:  490:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  491:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  492:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  493:  }
    #####:  494:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  495:    
        -:  496:  //Code for determining the player
    #####:  497:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  498:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  499:  }
        -:  500:  else{
    #####:  501:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  502:  }
        -:  503:
    #####:  504:  state->outpostPlayed = 0;
    #####:  505:  state->phase = 0;
    #####:  506:  state->numActions = 1;
    #####:  507:  state->coins = 0;
    #####:  508:  state->numBuys = 1;
    #####:  509:  state->playedCardCount = 0;
    #####:  510:  state->handCount[state->whoseTurn] = 0;
        -:  511:
        -:  512:  //int k; move to top
        -:  513:  //Next player draws hand
    #####:  514:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  515:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  516:  }
        -:  517:
        -:  518:  //Update money
    #####:  519:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  520:
    #####:  521:  return 0;
        -:  522:}
        -:  523:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  524:int isGameOver(struct gameState *state) {
        -:  525:  int i;
        -:  526:  int j;
        -:  527:	
        -:  528:  //if stack of Province cards is empty, the game ends
    #####:  529:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  530:    {
    #####:  531:      return 1;
        -:  532:    }
        -:  533:
        -:  534:  //if three supply pile are at 0, the game ends
    #####:  535:  j = 0;
    #####:  536:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  537:    {
    #####:  538:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  539:	{
    #####:  540:	  j++;
        -:  541:	}
        -:  542:    }
    #####:  543:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  544:    {
    #####:  545:      return 1;
        -:  546:    }
        -:  547:
    #####:  548:  return 0;
        -:  549:}
        -:  550:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  551:int scoreFor (int player, struct gameState *state) {
        -:  552:
        -:  553:  int i;
    #####:  554:  int score = 0;
        -:  555:  //score from hand
    #####:  556:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  557:    {
    #####:  558:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  559:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  560:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  561:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  562:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  563:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  564:    }
        -:  565:
        -:  566:  //score from discard
    #####:  567:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  568:    {
    #####:  569:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  570:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  571:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  572:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  573:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  574:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  575:    }
        -:  576:
        -:  577:  //score from deck
    #####:  578:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  579:    {
    #####:  580:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  581:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  582:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  583:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  584:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  585:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  586:    }
        -:  587:
    #####:  588:  return score;
        -:  589:}
        -:  590:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  591:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  592:  int i;	
        -:  593:  int j;
        -:  594:  int highScore;
        -:  595:  int currentPlayer;
        -:  596:
        -:  597:  //get score for each player
    #####:  598:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  599:    {
        -:  600:      //set unused player scores to -9999
    #####:  601:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  602:	{
    #####:  603:	  players[i] = -9999;
        -:  604:	}
        -:  605:      else
        -:  606:	{
    #####:  607:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  608:	}
        -:  609:    }
        -:  610:
        -:  611:  //find highest score
    #####:  612:  j = 0;
    #####:  613:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  614:    {
    #####:  615:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  616:	{
    #####:  617:	  j = i;
        -:  618:	}
        -:  619:    }
    #####:  620:  highScore = players[j];
        -:  621:
        -:  622:  //add 1 to players who had less turns
    #####:  623:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  624:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  625:    {
    #####:  626:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  627:	{
    #####:  628:	  players[i]++;
        -:  629:	}
        -:  630:    }
        -:  631:
        -:  632:  //find new highest score
    #####:  633:  j = 0;
    #####:  634:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  635:    {
    #####:  636:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  637:	{
    #####:  638:	  j = i;
        -:  639:	}
        -:  640:    }
    #####:  641:  highScore = players[j];
        -:  642:
        -:  643:  //set winners in array to 1 and rest to 0
    #####:  644:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  645:    {
    #####:  646:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  647:	{
    #####:  648:	  players[i] = 1;
        -:  649:	}
        -:  650:      else
        -:  651:	{
    #####:  652:	  players[i] = 0;
        -:  653:	}
        -:  654:    }
        -:  655:
    #####:  656:  return 0;
        -:  657:}
        -:  658:
function drawCard called 534879 returned 100% blocks executed 100%
   534879:  659:int drawCard(int player, struct gameState *state)
        -:  660:{	int count;
        -:  661:  int deckCounter;
   534879:  662:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  663:    
        -:  664:    //Step 1 Shuffle the discard pile back into a deck
        -:  665:    int i;
        -:  666:    //Move discard to deck
    12031:  667:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
     9281:  668:      state->deck[player][i] = state->discard[player][i];
     9281:  669:      state->discard[player][i] = -1;
        -:  670:    }
        -:  671:
     2750:  672:    state->deckCount[player] = state->discardCount[player];
     2750:  673:    state->discardCount[player] = 0;//Reset discard
        -:  674:
        -:  675:    //Shufffle the deck
     2750:  676:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  677:   
        -:  678:    if (DEBUG){//Debug statements
        -:  679:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  680:    }
        -:  681:    
     2750:  682:    state->discardCount[player] = 0;
        -:  683:
        -:  684:    //Step 2 Draw Card
     2750:  685:    count = state->handCount[player];//Get current player's hand count
        -:  686:    
        -:  687:    if (DEBUG){//Debug statements
        -:  688:      printf("Current hand count: %d\n", count);
        -:  689:    }
        -:  690:    
     2750:  691:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  692:
     2750:  693:    if (deckCounter == 0)
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
     2705:  694:      return -1;
        -:  695:
       45:  696:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       45:  697:    state->deckCount[player]--;
       45:  698:    state->handCount[player]++;//Increment hand count
        -:  699:  }
        -:  700:
        -:  701:  else{
   532129:  702:    int count = state->handCount[player];//Get current hand count for player
        -:  703:    int deckCounter;
        -:  704:    if (DEBUG){//Debug statements
        -:  705:      printf("Current hand count: %d\n", count);
        -:  706:    }
        -:  707:
   532129:  708:    deckCounter = state->deckCount[player];//Create holder for the deck count
   532129:  709:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   532129:  710:    state->deckCount[player]--;
   532129:  711:    state->handCount[player]++;//Increment hand count
        -:  712:  }
        -:  713:
   532174:  714:  return 0;
        -:  715:}
        -:  716:
function getCost called 0 returned 0% blocks executed 0%
    #####:  717:int getCost(int cardNumber)
        -:  718:{
    #####:  719:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  720:    {
        -:  721:    case curse:
    #####:  722:      return 0;
        -:  723:    case estate:
    #####:  724:      return 2;
        -:  725:    case duchy:
    #####:  726:      return 5;
        -:  727:    case province:
    #####:  728:      return 8;
        -:  729:    case copper:
    #####:  730:      return 0;
        -:  731:    case silver:
    #####:  732:      return 3;
        -:  733:    case gold:
    #####:  734:      return 6;
        -:  735:    case adventurer:
    #####:  736:      return 6;
        -:  737:    case council_room:
    #####:  738:      return 5;
        -:  739:    case feast:
    #####:  740:      return 4;
        -:  741:    case gardens:
    #####:  742:      return 4;
        -:  743:    case mine:
    #####:  744:      return 5;
        -:  745:    case remodel:
    #####:  746:      return 4;
        -:  747:    case smithy:
    #####:  748:      return 4;
        -:  749:    case village:
    #####:  750:      return 3;
        -:  751:    case baron:
    #####:  752:      return 4;
        -:  753:    case great_hall:
    #####:  754:      return 3;
        -:  755:    case minion:
    #####:  756:      return 5;
        -:  757:    case steward:
    #####:  758:      return 3;
        -:  759:    case tribute:
    #####:  760:      return 5;
        -:  761:    case ambassador:
    #####:  762:      return 3;
        -:  763:    case cutpurse:
    #####:  764:      return 4;
        -:  765:    case embargo: 
    #####:  766:      return 2;
        -:  767:    case outpost:
    #####:  768:      return 5;
        -:  769:    case salvager:
    #####:  770:      return 4;
        -:  771:    case sea_hag:
    #####:  772:      return 4;
        -:  773:    case treasure_map:
    #####:  774:      return 4;
        -:  775:    }
        -:  776:	
    #####:  777:  return -1;
        -:  778:}
        -:  779:
function cardEffect called 4000 returned 100% blocks executed 12%
     4000:  780:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  781:{
        -:  782:  int i;
        -:  783:  int j;
        -:  784:  int k;
        -:  785:  int x;
        -:  786:  int index;
     4000:  787:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     4000:  788:  int nextPlayer = currentPlayer + 1;
        -:  789:
     4000:  790:  int tributeRevealedCards[2] = {-1, -1};
        -:  791:  int temphand[MAX_HAND];// moved above the if statement
     4000:  792:  int drawntreasure=0;
        -:  793:  int cardDrawn;
     4000:  794:  int z = 0;// this is the counter for the temp hand
     4000:  795:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
     1988:  796:    nextPlayer = 0;
        -:  797:  }
        -:  798:  
        -:  799:	
        -:  800:  //uses switch to select card and perform actions
     4000:  801:  switch( card ) 
branch  0 taken 50%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 50%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  802:    {
        -:  803:    case adventurer:
     2000:  804:      playAdventurerCard(state);
call    0 returned 100%
        -:  805:			
        -:  806:    case council_room:
        -:  807:      //+4 Cards
    10000:  808:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  809:	{
     8000:  810:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  811:	}
        -:  812:			
        -:  813:      //+1 Buy
     2000:  814:      state->numBuys++;
        -:  815:			
        -:  816:      //Each other player draws a card
     6000:  817:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  818:	{
     4000:  819:	  if ( i != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  820:	    {
     2000:  821:	      drawCard(i, state);
call    0 returned 100%
        -:  822:	    }
        -:  823:	}
        -:  824:			
        -:  825:      //put played card in played card pile
     2000:  826:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  827:			
     2000:  828:      return 0;
        -:  829:			
        -:  830:    case feast:
        -:  831:      //gain card with cost up to 5
        -:  832:      //Backup hand
    #####:  833:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  834:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  835:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  836:      }
        -:  837:      //Backup hand
        -:  838:
        -:  839:      //Update Coins for Buy
    #####:  840:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  841:      x = 1;//Condition to loop on
    #####:  842:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  843:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  844:	  if (DEBUG)
        -:  845:	    printf("None of that card left, sorry!\n");
        -:  846:
        -:  847:	  if (DEBUG){
        -:  848:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  849:	  }
        -:  850:	}
    #####:  851:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  852:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  853:
        -:  854:	  if (DEBUG){
        -:  855:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  856:	  }
        -:  857:	}
        -:  858:	else{
        -:  859:
        -:  860:	  if (DEBUG){
        -:  861:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  862:	  }
        -:  863:
    #####:  864:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  865:	  x = 0;//No more buying cards
        -:  866:
        -:  867:	  if (DEBUG){
        -:  868:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  869:	  }
        -:  870:
        -:  871:	}
        -:  872:      }     
        -:  873:
        -:  874:      //Reset Hand
    #####:  875:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  876:	state->hand[currentPlayer][i] = temphand[i];
    #####:  877:	temphand[i] = -1;
        -:  878:      }
        -:  879:      //Reset Hand
        -:  880:      			
    #####:  881:      return 0;
        -:  882:			
        -:  883:    case gardens:
    #####:  884:      return -1;
        -:  885:			
        -:  886:    case mine:
    #####:  887:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  888:
    #####:  889:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  890:	{
    #####:  891:	  return -1;
        -:  892:	}
        -:  893:		
    #####:  894:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  895:	{
    #####:  896:	  return -1;
        -:  897:	}
        -:  898:
    #####:  899:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  900:	{
    #####:  901:	  return -1;
        -:  902:	}
        -:  903:
    #####:  904:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  905:
        -:  906:      //discard card from hand
    #####:  907:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  908:
        -:  909:      //discard trashed card
    #####:  910:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  911:	{
    #####:  912:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  913:	    {
    #####:  914:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  915:	      break;
        -:  916:	    }
        -:  917:	}
        -:  918:			
    #####:  919:      return 0;
        -:  920:			
        -:  921:    case remodel:
    #####:  922:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  923:
    #####:  924:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  925:	{
    #####:  926:	  return -1;
        -:  927:	}
        -:  928:
    #####:  929:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  930:
        -:  931:      //discard card from hand
    #####:  932:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  933:
        -:  934:      //discard trashed card
    #####:  935:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  936:	{
    #####:  937:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  938:	    {
    #####:  939:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  940:	      break;
        -:  941:	    }
        -:  942:	}
        -:  943:
        -:  944:
    #####:  945:      return 0;
        -:  946:		
        -:  947:    case smithy:
    #####:  948:      playSmithyCard(handPos, state);
call    0 never executed
        -:  949:          
        -:  950:    case village:
     2000:  951:      playVillageCard(handPos, state);
call    0 returned 100%
        -:  952:		
        -:  953:    case baron:
     2000:  954:      state->numBuys++;//Increase buys by 1!
     2000:  955:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  956:	int p = 0;//Iterator for hand!
    #####:  957:	int card_not_discarded = 1;//Flag for discard set!
    #####:  958:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  959:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  960:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  961:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  962:	    state->discardCount[currentPlayer]++;
    #####:  963:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  964:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  965:	    }
    #####:  966:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  967:	    state->handCount[currentPlayer]--;
    #####:  968:	    card_not_discarded = 0;//Exit the loop
        -:  969:	  }
    #####:  970:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  971:	    if(DEBUG) {
        -:  972:	      printf("No estate cards in your hand, invalid choice\n");
        -:  973:	      printf("Must gain an estate if there are any\n");
        -:  974:	    }
    #####:  975:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  976:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  977:	      state->supplyCount[estate]--;//Decrement estates
    #####:  978:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  979:		isGameOver(state);
call    0 never executed
        -:  980:	      }
        -:  981:	    }
    #####:  982:	    card_not_discarded = 0;//Exit the loop
        -:  983:	  }
        -:  984:			    
        -:  985:	  else{
    #####:  986:	    p++;//Next card
        -:  987:	  }
        -:  988:	}
        -:  989:      }
        -:  990:			    
        -:  991:      else{
     2000:  992:	if (supplyCount(estate, state) > 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     2000:  993:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 returned 100%
     2000:  994:	  state->supplyCount[estate]--;//Decrement Estates
     2000:  995:	  if (supplyCount(estate, state) == 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  996:	    isGameOver(state);
call    0 never executed
        -:  997:	  }
        -:  998:	}
        -:  999:      }
        -: 1000:	    
        -: 1001:      
     2000: 1002:      return 0;
        -: 1003:		
        -: 1004:    case great_hall:
    #####: 1005:      playGreat_HallCard(handPos, state);
call    0 never executed
        -: 1006:		
        -: 1007:    case minion:
    #####: 1008:      playMinionCard(handPos, choice1, choice2, state);
call    0 never executed
        -: 1009:		
        -: 1010:    case steward:
    #####: 1011:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1012:	{
        -: 1013:	  //+2 cards
    #####: 1014:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1015:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1016:	}
    #####: 1017:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1018:	{
        -: 1019:	  //+2 coins
    #####: 1020:	  state->coins = state->coins + 2;
        -: 1021:	}
        -: 1022:      else
        -: 1023:	{
        -: 1024:	  //trash 2 cards in hand
    #####: 1025:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1026:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1027:	}
        -: 1028:			
        -: 1029:      //discard card from hand
    #####: 1030:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1031:      return 0;
        -: 1032:		
        -: 1033:    case tribute:
    #####: 1034:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1035:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1036:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1037:	  state->deckCount[nextPlayer]--;
        -: 1038:	}
    #####: 1039:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1040:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1041:	  state->discardCount[nextPlayer]--;
        -: 1042:	}
        -: 1043:	else{
        -: 1044:	  //No Card to Reveal
        -: 1045:	  if (DEBUG){
        -: 1046:	    printf("No cards to reveal\n");
        -: 1047:	  }
        -: 1048:	}
        -: 1049:      }
        -: 1050:	    
        -: 1051:      else{
    #####: 1052:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1053:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1054:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1055:	    state->deckCount[nextPlayer]++;
    #####: 1056:	    state->discard[nextPlayer][i] = -1;
    #####: 1057:	    state->discardCount[nextPlayer]--;
        -: 1058:	  }
        -: 1059:			    
    #####: 1060:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1061:	} 
    #####: 1062:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1063:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1064:	state->deckCount[nextPlayer]--;
    #####: 1065:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1066:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1067:	state->deckCount[nextPlayer]--;
        -: 1068:      }    
        -: 1069:		       
    #####: 1070:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1071:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1072:	state->playedCardCount++;
    #####: 1073:	tributeRevealedCards[1] = -1;
        -: 1074:      }
        -: 1075:
    #####: 1076:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1077:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1078:	  state->coins += 2;
        -: 1079:	}
        -: 1080:		    
    #####: 1081:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1082:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1083:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1084:	}
        -: 1085:	else{//Action Card
    #####: 1086:	  state->numActions = state->numActions + 2;
        -: 1087:	}
        -: 1088:      }
        -: 1089:	    
    #####: 1090:      return 0;
        -: 1091:		
        -: 1092:    case ambassador:
    #####: 1093:      j = 0;		//used to check if player has enough cards to discard
        -: 1094:
    #####: 1095:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1096:	{
    #####: 1097:	  return -1;				
        -: 1098:	}
        -: 1099:
    #####: 1100:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1101:	{
    #####: 1102:	  return -1;
        -: 1103:	}
        -: 1104:
    #####: 1105:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1106:	{
    #####: 1107:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1108:	    {
    #####: 1109:	      j++;
        -: 1110:	    }
        -: 1111:	}
    #####: 1112:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
    #####: 1114:	  return -1;				
        -: 1115:	}
        -: 1116:
        -: 1117:      if (DEBUG) 
        -: 1118:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1119:
        -: 1120:      //increase supply count for choosen card by amount being discarded
    #####: 1121:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1122:			
        -: 1123:      //each other player gains a copy of revealed card
    #####: 1124:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1125:	{
    #####: 1126:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1127:	    {
    #####: 1128:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1129:	    }
        -: 1130:	}
        -: 1131:
        -: 1132:      //discard played card from hand
    #####: 1133:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1134:
        -: 1135:      //trash copies of cards returned to supply
    #####: 1136:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1137:	{
    #####: 1138:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1139:	    {
    #####: 1140:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1141:		{
    #####: 1142:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1143:		  break;
        -: 1144:		}
        -: 1145:	    }
        -: 1146:	}			
        -: 1147:
    #####: 1148:      return 0;
        -: 1149:		
        -: 1150:    case cutpurse:
        -: 1151:
    #####: 1152:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1153:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1154:	{
    #####: 1155:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1156:	    {
    #####: 1157:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1158:		{
    #####: 1159:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1160:		    {
    #####: 1161:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1162:		      break;
        -: 1163:		    }
    #####: 1164:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1165:		    {
    #####: 1166:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1167:			{
        -: 1168:			  if (DEBUG)
        -: 1169:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1170:			}	
    #####: 1171:		      break;
        -: 1172:		    }		
        -: 1173:		}
        -: 1174:					
        -: 1175:	    }
        -: 1176:				
        -: 1177:	}				
        -: 1178:
        -: 1179:      //discard played card from hand
    #####: 1180:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1181:
    #####: 1182:      return 0;
        -: 1183:
        -: 1184:		
        -: 1185:    case embargo: 
        -: 1186:      //+2 Coins
    #####: 1187:      state->coins = state->coins + 2;
        -: 1188:			
        -: 1189:      //see if selected pile is in play
    #####: 1190:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1191:	{
    #####: 1192:	  return -1;
        -: 1193:	}
        -: 1194:			
        -: 1195:      //add embargo token to selected supply pile
    #####: 1196:      state->embargoTokens[choice1]++;
        -: 1197:			
        -: 1198:      //trash card
    #####: 1199:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1200:      return 0;
        -: 1201:		
        -: 1202:    case outpost:
        -: 1203:      //set outpost flag
    #####: 1204:      state->outpostPlayed++;
        -: 1205:			
        -: 1206:      //discard card
    #####: 1207:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1208:      return 0;
        -: 1209:		
        -: 1210:    case salvager:
        -: 1211:      //+1 buy
    #####: 1212:      state->numBuys++;
        -: 1213:			
    #####: 1214:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1215:	{
        -: 1216:	  //gain coins equal to trashed card
    #####: 1217:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1218:	  //trash card
    #####: 1219:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1220:	}
        -: 1221:			
        -: 1222:      //discard card
    #####: 1223:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1224:      return 0;
        -: 1225:		
        -: 1226:    case sea_hag:
    #####: 1227:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1228:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1229:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1230:	  state->discardCount[i]++;
    #####: 1231:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1232:	}
        -: 1233:      }
    #####: 1234:      return 0;
        -: 1235:		
        -: 1236:    case treasure_map:
        -: 1237:      //search hand for another treasure_map
    #####: 1238:      index = -1;
    #####: 1239:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1240:	{
    #####: 1241:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1242:	    {
    #####: 1243:	      index = i;
    #####: 1244:	      break;
        -: 1245:	    }
        -: 1246:	}
    #####: 1247:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1248:	{
        -: 1249:	  //trash both treasure cards
    #####: 1250:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1251:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1252:
        -: 1253:	  //gain 4 Gold cards
    #####: 1254:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1255:	    {
    #####: 1256:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1257:	    }
        -: 1258:				
        -: 1259:	  //return success
    #####: 1260:	  return 1;
        -: 1261:	}
        -: 1262:			
        -: 1263:      //no second treasure_map found in hand
    #####: 1264:      return -1;
        -: 1265:    }
        -: 1266:	
    #####: 1267:  return -1;
        -: 1268:}
        -: 1269:
function discardCard called 4000 returned 100% blocks executed 89%
     4000: 1270:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1271:{
        -: 1272:	
        -: 1273:  //if card is not trashed, added to Played pile 
     4000: 1274:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1275:    {
        -: 1276:      //add card to played pile
     4000: 1277:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     4000: 1278:      state->playedCardCount++;
        -: 1279:    }
        -: 1280:	
        -: 1281:  //set played card to -1
     4000: 1282:  state->hand[currentPlayer][handPos] = -1;
        -: 1283:	
        -: 1284:  //remove card from player's hand
     4000: 1285:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1286:    {
        -: 1287:      //reduce number of cards in hand
        7: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
     3993: 1290:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1291:    {
        -: 1292:      //reduce number of cards in hand
    #####: 1293:      state->handCount[currentPlayer]--;
        -: 1294:    }
        -: 1295:  else 	
        -: 1296:    {
        -: 1297:      //replace discarded card with last card in hand
     3993: 1298:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1299:      //set last card to -1
     3993: 1300:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1301:      //reduce number of cards in hand
     3993: 1302:      state->handCount[currentPlayer]--;
        -: 1303:    }
        -: 1304:	
     4000: 1305:  return 0;
        -: 1306:}
        -: 1307:
function gainCard called 2000 returned 100% blocks executed 70%
     2000: 1308:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1309:{
        -: 1310:  //Note: supplyPos is enum of choosen card
        -: 1311:	
        -: 1312:  //check if supply pile is empty (0) or card is not used in game (-1)
     2000: 1313:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1314:    {
    #####: 1315:      return -1;
        -: 1316:    }
        -: 1317:	
        -: 1318:  //added card for [whoseTurn] current player:
        -: 1319:  // toFlag = 0 : add to discard
        -: 1320:  // toFlag = 1 : add to deck
        -: 1321:  // toFlag = 2 : add to hand
        -: 1322:
     2000: 1323:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1324:    {
    #####: 1325:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1326:      state->deckCount[player]++;
        -: 1327:    }
     2000: 1328:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1329:    {
    #####: 1330:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1331:      state->handCount[player]++;
        -: 1332:    }
        -: 1333:  else
        -: 1334:    {
     2000: 1335:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     2000: 1336:      state->discardCount[player]++;
        -: 1337:    }
        -: 1338:	
        -: 1339:  //decrease number in supply pile
     2000: 1340:  state->supplyCount[supplyPos]--;
        -: 1341:	 
     2000: 1342:  return 0;
        -: 1343:}
        -: 1344:
function updateCoins called 4000 returned 100% blocks executed 82%
     4000: 1345:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1346:{
        -: 1347:  int i;
        -: 1348:	
        -: 1349:  //reset coin count
     4000: 1350:  state->coins = 0;
        -: 1351:
        -: 1352:  //add coins for each Treasure card in player's hand
    24000: 1353:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1354:    {
    20000: 1355:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1356:	{
    16000: 1357:	  state->coins += 1;
        -: 1358:	}
     4000: 1359:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1360:	{
    #####: 1361:	  state->coins += 2;
        -: 1362:	}
     4000: 1363:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1364:	{
    #####: 1365:	  state->coins += 3;
        -: 1366:	}	
        -: 1367:    }	
        -: 1368:
        -: 1369:  //add bonus
     4000: 1370:  state->coins += bonus;
        -: 1371:
     4000: 1372:  return 0;
        -: 1373:}
        -: 1374:
        -: 1375:
        -: 1376://end of dominion.c
        -: 1377:
--------------Testing village Randomly--------------
****FAIL Iteration: 0 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 2 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 3 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 4 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 5 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 6 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 7 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 8 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 9 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 10 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 11 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 12 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 13 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 14 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 15 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 16 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 17 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 18 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 19 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 20 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 21 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 22 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 23 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 24 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 25 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 26 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 27 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 28 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 29 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 30 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 31 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 32 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 33 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 34 Returned Deck Count for Player 1 = 291, expected = -1
****FAIL Iteration: 34 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 35 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 36 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 37 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 38 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 39 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 40 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 41 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 42 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 43 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 44 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 45 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 46 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 47 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 48 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 49 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 50 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 51 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 52 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 53 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 54 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 55 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 56 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 57 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 58 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 59 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 60 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 61 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 62 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 63 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 64 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 65 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 66 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 67 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 68 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 69 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 70 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 71 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 72 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 73 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 74 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 75 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 76 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 77 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 78 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 79 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 80 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 81 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 82 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 83 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 84 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 85 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 86 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 87 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 88 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 89 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 90 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 91 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 92 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 93 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 94 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 95 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 96 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 97 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 98 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 99 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 100 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 101 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 102 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 103 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 104 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 105 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 106 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 107 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 108 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 109 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 110 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 111 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 112 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 113 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 114 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 115 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 116 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 117 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 118 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 119 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 120 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 121 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 122 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 123 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 124 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 125 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 126 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 127 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 128 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 129 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 130 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 131 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 132 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 133 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 134 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 135 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 136 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 137 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 138 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 139 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 140 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 141 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 142 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 143 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 144 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 145 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 146 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 147 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 148 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 149 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 150 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 151 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 152 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 153 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 154 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 155 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 156 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 157 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 158 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 159 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 160 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 161 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 162 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 163 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 164 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 165 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 166 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 167 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 168 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 169 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 170 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 171 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 172 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 173 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 174 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 175 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 176 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 177 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 178 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 179 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 180 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 181 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 182 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 183 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 184 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 185 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 186 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 187 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 188 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 189 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 190 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 191 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 192 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 193 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 194 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 195 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 196 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 197 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 198 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 199 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 200 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 201 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 202 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 203 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 204 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 205 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 206 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 207 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 208 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 209 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 210 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 211 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 212 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 213 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 214 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 215 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 216 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 217 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 218 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 219 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 220 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 221 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 222 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 223 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 224 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 225 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 226 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 227 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 228 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 229 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 230 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 231 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 232 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 233 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 234 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 235 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 236 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 237 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 238 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 239 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 240 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 241 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 242 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 243 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 244 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 245 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 246 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 247 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 248 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 249 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 250 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 251 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 252 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 253 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 254 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 255 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 256 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 257 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 258 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 259 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 260 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 261 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 262 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 263 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 264 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 265 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 266 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 267 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 268 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 269 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 270 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 271 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 272 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 273 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 274 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 275 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 276 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 277 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 278 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 279 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 280 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 281 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 282 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 283 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 284 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 285 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 286 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 287 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 288 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 289 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 290 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 291 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 292 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 293 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 294 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 295 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 296 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 297 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 298 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 299 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 300 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 301 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 302 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 303 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 304 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 305 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 306 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 307 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 308 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 309 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 310 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 311 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 312 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 313 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 314 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 315 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 316 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 317 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 318 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 319 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 320 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 321 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 322 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 323 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 324 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 325 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 326 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 327 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 328 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 329 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 330 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 331 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 332 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 333 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 334 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 335 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 336 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 337 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 338 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 339 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 340 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 341 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 342 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 343 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 344 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 345 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 346 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 347 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 348 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 349 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 350 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 351 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 352 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 353 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 354 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 355 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 356 Returned Deck Count for Player 0 = 218, expected = -2
****FAIL Iteration: 356 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 357 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 358 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 359 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 360 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 361 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 362 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 363 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 364 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 365 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 366 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 367 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 368 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 369 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 370 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 371 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 372 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 373 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 374 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 375 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 376 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 377 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 378 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 379 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 380 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 381 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 382 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 383 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 384 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 385 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 386 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 387 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 388 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 389 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 390 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 391 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 392 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 393 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 394 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 395 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 396 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 397 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 398 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 399 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 400 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 401 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 402 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 403 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 404 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 405 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 406 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 407 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 408 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 409 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 410 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 411 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 412 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 413 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 414 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 415 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 416 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 417 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 418 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 419 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 420 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 421 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 422 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 423 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 424 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 425 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 426 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 427 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 428 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 429 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 430 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 431 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 432 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 433 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 434 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 435 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 436 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 437 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 438 Returned Deck Count for Player 1 = 49, expected = -1
****FAIL Iteration: 438 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 439 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 440 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 441 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 442 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 443 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 444 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 445 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 446 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 447 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 448 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 449 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 450 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 451 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 452 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 453 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 454 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 455 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 456 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 457 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 458 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 459 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 460 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 461 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 462 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 463 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 464 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 465 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 466 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 467 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 468 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 469 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 470 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 471 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 472 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 473 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 474 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 475 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 476 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 477 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 478 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 479 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 480 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 481 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 482 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 483 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 484 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 485 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 486 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 487 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 488 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 489 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 490 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 491 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 492 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 493 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 494 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 495 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 496 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 497 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 498 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 499 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 500 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 501 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 502 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 503 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 504 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 505 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 506 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 507 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 508 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 509 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 510 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 511 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 512 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 513 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 514 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 515 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 516 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 517 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 518 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 519 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 520 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 521 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 522 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 523 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 524 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 525 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 526 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 527 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 528 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 529 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 530 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 531 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 532 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 533 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 534 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 535 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 536 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 537 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 538 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 539 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 540 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 541 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 542 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 543 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 544 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 545 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 546 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 547 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 548 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 549 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 550 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 551 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 552 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 553 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 554 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 555 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 556 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 557 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 558 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 559 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 560 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 561 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 562 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 563 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 564 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 565 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 566 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 567 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 568 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 569 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 570 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 571 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 572 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 573 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 574 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 575 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 576 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 577 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 578 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 579 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 580 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 581 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 582 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 583 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 584 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 585 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 586 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 587 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 588 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 589 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 590 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 591 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 592 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 593 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 594 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 595 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 596 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 597 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 598 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 599 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 600 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 601 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 602 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 603 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 604 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 605 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 606 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 607 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 608 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 609 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 610 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 611 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 612 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 613 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 614 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 615 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 616 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 617 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 618 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 619 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 620 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 621 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 622 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 623 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 624 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 625 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 626 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 627 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 628 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 629 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 630 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 631 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 632 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 633 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 634 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 635 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 636 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 637 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 638 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 639 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 640 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 641 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 642 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 643 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 644 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 645 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 646 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 647 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 648 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 649 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 650 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 651 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 652 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 653 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 654 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 655 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 656 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 657 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 658 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 659 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 660 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 661 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 662 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 663 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 664 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 665 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 666 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 667 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 668 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 669 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 670 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 671 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 672 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 673 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 674 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 675 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 676 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 677 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 678 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 679 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 680 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 681 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 682 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 683 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 684 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 685 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 686 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 687 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 688 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 689 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 690 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 691 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 692 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 693 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 694 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 695 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 696 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 697 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 698 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 699 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 700 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 701 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 702 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 703 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 704 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 705 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 706 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 707 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 708 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 709 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 710 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 711 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 712 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 713 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 714 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 715 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 716 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 717 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 718 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 719 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 720 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 721 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 722 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 723 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 724 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 725 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 726 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 727 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 728 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 729 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 730 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 731 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 732 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 733 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 734 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 735 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 736 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 737 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 738 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 739 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 740 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 741 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 742 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 743 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 744 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 745 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 746 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 747 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 748 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 749 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 750 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 751 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 752 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 753 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 754 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 755 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 756 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 757 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 758 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 759 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 760 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 761 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 762 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 763 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 764 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 765 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 766 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 767 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 768 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 769 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 770 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 771 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 772 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 773 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 774 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 775 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 776 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 777 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 778 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 779 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 780 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 781 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 782 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 783 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 784 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 785 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 786 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 787 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 788 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 789 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 790 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 791 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 792 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 793 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 794 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 795 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 796 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 797 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 798 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 799 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 800 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 801 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 802 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 803 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 804 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 805 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 806 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 807 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 808 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 809 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 810 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 811 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 812 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 813 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 814 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 815 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 816 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 817 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 818 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 819 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 820 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 821 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 822 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 823 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 824 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 825 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 826 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 827 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 828 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 829 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 830 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 831 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 832 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 833 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 834 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 835 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 836 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 837 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 838 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 839 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 840 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 841 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 842 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 843 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 844 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 845 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 846 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 847 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 848 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 849 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 850 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 851 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 852 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 853 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 854 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 855 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 856 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 857 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 858 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 859 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 860 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 861 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 862 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 863 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 864 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 865 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 866 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 867 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 868 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 869 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 870 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 871 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 872 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 873 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 874 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 875 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 876 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 877 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 878 Returned Deck Count for Player 1 = 159, expected = -2
****FAIL Iteration: 878 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 879 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 880 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 881 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 882 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 883 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 884 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 885 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 886 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 887 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 888 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 889 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 890 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 891 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 892 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 893 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 894 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 895 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 896 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 897 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 898 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 899 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 900 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 901 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 902 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 903 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 904 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 905 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 906 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 907 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 908 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 909 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 910 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 911 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 912 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 913 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 914 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 915 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 916 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 917 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 918 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 919 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 920 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 921 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 922 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 923 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 924 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 925 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 926 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 927 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 928 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 929 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 930 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 931 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 932 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 933 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 934 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 935 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 936 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 937 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 938 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 939 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 940 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 941 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 942 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 943 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 944 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 945 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 946 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 947 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 948 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 949 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 950 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 951 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 952 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 953 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 954 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 955 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 956 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 957 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 958 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 959 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 960 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 961 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 962 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 963 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 964 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 965 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 966 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 967 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 968 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 969 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 970 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 971 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 972 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 973 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 974 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 975 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 976 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 977 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 978 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 979 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 980 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 981 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 982 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 983 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 984 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 985 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 986 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 987 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 988 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 989 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 990 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 991 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 992 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 993 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 994 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 995 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 996 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 997 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 998 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 999 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1000 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1001 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1002 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1003 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1004 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1005 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1006 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1007 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1008 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1009 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1010 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1011 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1012 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1013 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1014 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1015 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1016 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1017 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1018 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1019 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1020 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1021 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1022 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1023 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1024 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1025 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1026 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1027 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1028 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1029 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1030 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1031 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1032 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1033 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1034 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1035 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1036 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1037 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1038 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1039 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1040 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1041 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1042 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1043 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1044 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1045 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1046 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1047 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1048 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1049 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1050 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1051 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1052 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1053 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1054 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1055 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1056 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1057 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1058 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1059 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1060 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1061 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1062 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1063 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1064 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1065 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1066 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1067 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1068 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1069 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1070 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1071 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1072 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1073 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1074 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1075 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1076 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1077 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1078 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1079 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1080 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1081 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1082 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1083 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1084 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1085 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1086 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1087 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1088 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1089 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1090 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1091 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1092 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1093 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1094 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1095 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1096 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1097 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1098 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1099 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1100 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1101 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1102 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1103 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1104 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1105 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1106 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1107 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1108 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1109 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1110 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1111 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1112 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1113 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1114 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1115 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1116 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1117 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1118 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1119 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1120 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1121 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1122 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1123 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1124 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1125 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1126 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1127 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1128 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1129 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1130 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1131 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1132 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1133 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1134 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1135 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1136 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1137 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1138 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1139 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1140 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1141 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1142 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1143 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1144 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1145 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1146 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1147 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1148 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1149 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1150 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1151 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1152 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1153 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1154 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1155 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1156 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1157 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1158 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1159 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1160 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1161 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1162 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1163 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1164 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1165 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1166 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1167 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1168 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1169 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1170 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1171 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1172 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1173 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1174 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1175 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1176 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1177 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1178 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1179 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1180 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1181 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1182 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1183 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1184 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1185 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1186 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1187 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1188 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1189 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1190 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1191 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1192 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1193 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1194 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1195 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1196 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1197 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1198 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1199 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1200 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1201 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1202 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1203 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1204 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1205 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1206 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1207 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1208 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1209 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1210 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1211 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1212 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1213 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1214 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1215 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1216 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1217 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1218 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1219 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1220 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1221 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1222 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1223 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1224 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1225 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1226 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1227 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1228 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1229 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1230 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1231 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1232 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1233 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1234 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1235 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1236 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1237 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1238 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1239 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1240 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1241 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1242 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1243 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1244 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1245 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1246 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1247 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1248 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1249 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1250 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1251 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1252 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1253 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1254 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1255 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1256 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1257 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1258 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1259 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1260 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1261 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1262 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1263 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1264 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1265 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1266 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1267 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1268 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1269 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1270 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1271 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1272 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1273 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1274 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1275 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1276 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1277 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1278 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1279 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1280 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1281 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1282 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1283 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1284 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1285 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1286 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1287 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1288 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1289 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1290 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1291 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1292 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1293 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1294 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1295 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1296 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1297 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1298 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1299 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1300 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1301 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1302 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1303 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1304 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1305 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1306 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1307 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1308 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1309 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1310 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1311 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1312 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1313 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1314 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1315 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1316 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1317 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1318 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1319 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1320 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1321 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1322 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1323 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1324 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1325 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1326 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1327 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1328 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1329 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1330 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1331 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1332 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1333 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1334 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1335 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1336 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1337 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1338 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1339 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1340 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1341 Returned Deck Count for Player 1 = 335, expected = -2
****FAIL Iteration: 1341 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1342 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1343 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1344 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1345 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1346 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1347 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1348 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1349 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1350 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1351 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1352 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1353 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1354 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1355 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1356 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1357 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1358 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1359 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1360 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1361 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1362 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1363 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1364 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1365 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1366 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1367 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1368 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1369 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1370 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1371 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1372 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1373 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1374 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1375 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1376 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1377 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1378 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1379 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1380 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1381 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1382 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1383 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1384 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1385 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1386 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1387 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1388 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1389 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1390 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1391 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1392 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1393 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1394 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1395 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1396 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1397 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1398 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1399 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1400 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1401 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1402 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1403 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1404 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1405 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1406 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1407 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1408 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1409 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1410 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1411 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1412 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1413 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1414 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1415 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1416 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1417 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1418 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1419 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1420 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1421 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1422 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1423 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1424 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1425 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1426 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1427 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1428 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1429 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1430 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1431 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1432 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1433 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1434 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1435 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1436 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1437 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1438 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1439 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1440 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1441 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1442 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1443 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1444 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1445 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1446 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1447 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1448 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1449 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1450 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1451 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1452 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1453 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1454 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1455 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1456 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1457 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1458 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1459 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1460 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1461 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1462 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1463 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1464 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1465 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1466 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1467 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1468 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1469 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1470 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1471 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1472 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1473 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1474 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1475 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1476 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1477 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1478 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1479 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1480 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1481 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1482 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1483 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1484 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1485 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1486 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1487 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1488 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1489 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1490 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1491 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1492 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1493 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1494 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1495 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1496 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1497 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1498 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1499 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1500 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1501 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1502 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1503 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1504 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1505 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1506 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1507 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1508 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1509 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1510 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1511 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1512 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1513 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1514 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1515 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1516 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1517 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1518 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1519 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1520 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1521 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1522 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1523 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1524 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1525 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1526 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1527 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1528 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1529 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1530 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1531 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1532 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1533 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1534 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1535 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1536 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1537 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1538 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1539 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1540 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1541 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1542 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1543 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1544 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1545 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1546 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1547 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1548 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1549 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1550 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1551 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1552 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1553 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1554 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1555 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1556 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1557 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1558 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1559 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1560 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1561 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1562 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1563 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1564 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1565 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1566 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1567 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1568 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1569 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1570 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1571 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1572 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1573 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1574 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1575 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1576 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1577 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1578 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1579 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1580 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1581 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1582 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1583 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1584 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1585 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1586 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1587 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1588 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1589 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1590 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1591 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1592 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1593 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1594 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1595 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1596 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1597 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1598 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1599 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1600 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1601 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1602 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1603 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1604 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1605 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1606 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1607 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1608 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1609 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1610 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1611 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1612 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1613 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1614 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1615 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1616 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1617 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1618 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1619 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1620 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1621 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1622 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1623 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1624 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1625 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1626 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1627 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1628 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1629 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1630 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1631 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1632 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1633 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1634 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1635 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1636 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1637 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1638 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1639 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1640 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1641 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1642 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1643 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1644 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1645 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1646 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1647 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1648 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1649 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1650 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1651 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1652 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1653 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1654 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1655 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1656 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1657 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1658 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1659 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1660 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1661 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1662 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1663 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1664 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1665 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1666 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1667 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1668 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1669 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1670 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1671 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1672 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1673 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1674 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1675 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1676 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1677 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1678 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1679 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1680 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1681 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1682 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1683 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1684 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1685 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1686 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1687 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1688 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1689 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1690 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1691 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1692 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1693 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1694 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1695 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1696 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1697 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1698 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1699 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1700 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1701 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1702 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1703 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1704 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1705 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1706 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1707 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1708 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1709 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1710 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1711 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1712 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1713 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1714 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1715 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1716 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1717 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1718 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1719 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1720 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1721 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1722 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1723 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1724 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1725 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1726 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1727 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1728 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1729 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1730 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1731 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1732 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1733 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1734 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1735 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1736 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1737 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1738 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1739 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1740 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1741 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1742 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1743 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1744 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1745 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1746 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1747 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1748 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1749 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1750 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1751 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1752 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1753 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1754 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1755 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1756 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1757 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1758 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1759 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1760 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1761 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1762 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1763 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1764 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1765 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1766 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1767 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1768 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1769 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1770 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1771 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1772 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1773 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1774 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1775 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1776 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1777 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1778 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1779 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1780 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1781 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1782 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1783 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1784 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1785 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1786 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1787 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1788 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1789 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1790 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1791 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1792 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1793 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1794 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1795 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1796 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1797 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1798 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1799 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1800 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1801 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1802 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1803 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1804 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1805 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1806 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1807 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1808 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1809 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1810 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1811 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1812 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1813 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1814 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1815 Returned Deck Count for Player 0 = 334, expected = -2
****FAIL Iteration: 1815 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1816 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1817 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1818 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1819 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1820 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1821 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1822 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1823 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1824 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1825 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1826 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1827 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1828 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1829 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1830 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1831 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1832 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1833 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1834 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1835 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1836 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1837 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1838 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1839 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1840 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1841 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1842 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1843 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1844 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1845 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1846 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1847 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1848 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1849 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1850 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1851 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1852 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1853 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1854 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1855 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1856 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1857 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1858 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1859 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1860 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1861 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1862 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1863 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1864 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1865 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1866 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1867 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1868 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1869 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1870 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1871 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1872 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1873 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1874 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1875 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1876 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1877 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1878 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1879 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1880 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1881 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1882 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1883 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1884 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1885 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1886 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1887 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1888 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1889 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1890 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1891 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1892 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1893 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1894 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1895 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1896 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1897 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1898 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1899 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1900 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1901 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1902 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1903 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1904 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1905 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1906 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1907 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1908 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1909 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1910 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1911 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1912 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1913 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1914 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1915 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1916 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1917 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1918 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1919 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1920 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1921 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1922 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1923 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1924 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1925 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1926 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1927 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1928 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1929 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1930 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1931 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1932 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1933 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1934 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1935 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1936 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1937 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1938 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1939 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1940 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1941 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1942 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1943 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1944 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1945 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1946 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1947 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1948 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1949 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1950 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1951 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1952 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1953 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1954 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1955 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1956 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1957 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1958 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1959 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1960 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1961 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1962 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1963 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1964 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1965 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1966 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1967 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1968 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1969 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1970 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1971 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1972 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1973 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1974 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1975 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1976 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1977 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1978 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1979 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1980 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1981 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1982 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1983 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1984 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1985 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1986 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1987 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1988 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1989 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1990 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1991 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1992 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1993 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1994 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1995 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1996 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1997 Estate Count for Player 0 = 6, expected = 8
****FAIL Iteration: 1998 Estate Count for Player 1 = 6, expected = 8
****FAIL Iteration: 1999 Estate Count for Player 1 = 6, expected = 8
FAIL: There are 2006 errors for playing village card.
File 'randomtestcard.c'
Lines executed:75.00% of 72
Creating 'randomtestcard.c.gcov'

File 'randomtestcard.c'
Lines executed:75.00% of 72
Branches executed:100.00% of 28
Taken at least once:64.29% of 28
Calls executed:64.29% of 28
Creating 'randomtestcard.c.gcov'

        -:    0:Source:randomtestcard.c
        -:    0:Graph:randomtestcard.gcno
        -:    0:Data:randomtestcard.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:/*
        -:    2:*Alex Marsh
        -:    3:*CS362
        -:    4:*randomtestcard.c
        -:    5:*Last Modified: May 7, 2016
        -:    6:*
        -:    7:*This is a random test for the implementation of the village card in dominion.c. Format and some code taken from 'betterTestDrawCard.c' and 'cardtest2.c'
        -:    8:*
        -:    9:*When a player plays this card the player should gain 1 card and 
        -:   10:*two actions.
        -:   11:*
        -:   12:*
        -:   13:*Include the following lines in your makefile:
        -:   14:*
        -:   15:*randomtestcard.c: randomtestcard.c dominion.o rngs.o
        -:   16:*       gcc -o randomtestcard -g randomtestcard.c dominion.o rngs.o $(CFLAGS)
        -:   17:*/
        -:   18:
        -:   19:#include "dominion.h"
        -:   20:#include "dominion_helpers.h"
        -:   21:#include "interface.h"
        -:   22:#include <string.h>
        -:   23:#include <stdio.h>
        -:   24:#include <assert.h>
        -:   25:#include "rngs.h"
        -:   26:
        -:   27:#define TESTCARD "village"
        -:   28:
function main called 2 returned 100% blocks executed 71%
        2:   29:int main() {
        -:   30:    int i, coins;
        -:   31:    int currPlayer, otherPlayer;
        2:   32:    int seed = 1000;
        2:   33:    int numPlayers = 2;
        2:   34:    int newCards = 2, discarded = 1;
        2:   35:    int num_copper = 60;
        2:   36:    int num_silver = 40;
        2:   37:    int num_gold = 30;
        2:   38:    int choice1 = 0, choice2 = 0, choice3 = 0;
        2:   39:    int handpos, bonus = 0;
        2:   40:    int errors = 0;
        2:   41:    int testTreasureCount = 0, realTreasureCount = 0;
        -:   42:    int testHandCount, realHandCount;
        2:   43:    int handIndex, shuffledCards = 0;
        -:   44:
        -:   45:
        2:   46:    int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   47:	       remodel, smithy, village, baron, great_hall};
        -:   48:
        -:   49:  struct gameState G, expected, played;
        -:   50:
        2:   51:  printf("--------------Testing village Randomly--------------\n");
call    0 returned 100%
        -:   52:    
        2:   53:  srand(time(NULL)); //set rand
call    0 returned 100%
call    1 returned 100%
        -:   54:     
        2:   55:  SelectStream(2);
call    0 returned 100%
        2:   56:  PutSeed(3);    
call    0 returned 100%
        -:   57:    
     4002:   58:  for(i=0; i<2000; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   59:    // initialize game environment & begin testing
     4000:   60:    initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
     4000:   61:    memcpy(&played, &G, sizeof(struct gameState));
        -:   62:    
        -:   63:    //initialize a random game 
     4000:   64:    currPlayer = rand() % numPlayers; //get random player
call    0 returned 100%
     4000:   65:    if(currPlayer == 0){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
     1998:   66:      otherPlayer = 1;   
        -:   67:    }
        -:   68:    else
     2002:   69:        otherPlayer = 2;
        -:   70:      
     4000:   71:    played.whoseTurn = currPlayer; //set player
        -:   72:     
        -:   73:    //randomize deck, hand, and discard  
     4000:   74:    played.deckCount[currPlayer] = (rand() % (MAX_DECK+1));
call    0 returned 100%
     4000:   75:    played.discardCount[currPlayer] = (rand() % ( MAX_DECK+1));
call    0 returned 100%
     4000:   76:    played.handCount[currPlayer] = (rand() %  (MAX_HAND+1));
call    0 returned 100%
        -:   77:    
        -:   78:    //get random number for handposition
     4000:   79:    handpos  = (rand() % 7);
call    0 returned 100%
        -:   80:      
        -:   81:    //insert a adventure card in players hand for testing
     4000:   82:    played.hand[currPlayer][handpos] = village;   
        -:   83:      
        -:   84:    //randomize the number of coins 
     4000:   85:    coins = (rand() % (num_copper + 1)); //copper coins
call    0 returned 100%
        -:   86:    //printf("coins = %d\n", coins);
     4000:   87:    coins =+ (rand() % (num_silver +1)); //silver coins
call    0 returned 100%
        -:   88:    //printf("coins = %d\n", coins);
     4000:   89:    coins =+ (rand() % (num_gold+1)); //gold coins
call    0 returned 100%
        -:   90:    //printf("coins = %d\n", coins);
        -:   91:      
     4000:   92:    played.coins = coins;  
        -:   93:
        -:   94:    //copy random test state for testing  
     4000:   95:    memcpy(&expected, &played, sizeof(struct gameState));
        -:   96:  
        -:   97: /***     
        -:   98:    //test printing
        -:   99:    printf("%d player handcount %d:\n", currPlayer, played.deckCount[currPlayer]);   
        -:  100:    printf("%d player deckcount %d:\n", currPlayer, played.deckCount[currPlayer]);   
        -:  101:    printf("%d player discardcount %d:\n", currPlayer, played.discardCount[currPlayer]);   
        -:  102:    printf("%d player coins %d:\n", currPlayer, countHandCoins(currPlayer, &played));   
        -:  103:    printf("*******************************************************\n");  
        -:  104:  
        -:  105:    printf("%d player handcount %d:\n", currPlayer, expected.deckCount[currPlayer]);   
        -:  106:    printf("%d player deckcount %d:\n", currPlayer, expected.deckCount[currPlayer]);   
        -:  107:    printf("%d player discardcount %d:\n", currPlayer, expected.discardCount[currPlayer]);   
        -:  108:    printf("%d player coins %d:\n", currPlayer, countHandCoins(currPlayer, &expected));   
        -:  109:    printf("*******************************************************\n");  
        -:  110: ***/   
        -:  111:      
        -:  112:    //play village card
     4000:  113:    cardEffect(village, choice1, choice2, choice3, &played, handpos, bonus); 
call    0 returned 100%
        -:  114:      
        -:  115:      
        -:  116:    //test to make sure play is recieving 1 cards
        -:  117:    //the player should draw 1 card and discard the village card
        -:  118:    //this should make the hand the same count
        -:  119:    
        -:  120: //   printf("Player %d hand count = %d, expected = %d\n", currPlayer, recievedResult, expected);
     4000:  121:    if(played.handCount[currPlayer] != expected.handCount[currPlayer] + newCards - discarded){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  122:        //check if hand is correct
    #####:  123:            printf("****FAIL Iteration: %d Returned Hand Count = %d, expected = %d\n", i, played.handCount[currPlayer], expected.handCount[currPlayer] + newCards - discarded); 
call    0 never executed
    #####:  124:            errors++;
        -:  125:    }
        -:  126:    
        -:  127:    //test to make sure player is drawing from their own pile
        -:  128: //   printf("Player %d deck count = %d, expected = %d\n", currPlayer, played.deckCount[currPlayer], expected.deckCount[currPlayer] - newCards + shuffledCards);
     4000:  129:    if(played.deckCount[currPlayer] != expected.deckCount[currPlayer] - newCards + shuffledCards){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  130:        //check if deck is correct
       15:  131:            printf("****FAIL Iteration: %d Returned Deck Count for Player %d = %d, expected = %d\n", i, currPlayer, played.deckCount[currPlayer], expected.deckCount[currPlayer] - newCards + shuffledCards); 
call    0 returned 100%
       15:  132:            errors++;
        -:  133:    }
        -:  134:    
        -:  135:    //test for players number of actions
        -:  136:    //the player shoud have 2 action moves
        -:  137: //   printf("Player %d action count = %d, expected = %d\n", currPlayer, played.numActions, expected.numActions+2);
     4000:  138:    if(played.numActions != expected.numActions+2){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  139:        //check if deck is correct
    #####:  140:            printf("****FAIL Iteration: %d Returned Action Count for Player %d = %d, expected = %d\n", i, currPlayer, played.numActions, expected.numActions+2); 
call    0 never executed
    #####:  141:            errors++;
        -:  142:    }
        -:  143:    
        -:  144:        //test to make sure other players game state has not changed
        -:  145:    
        -:  146:    //test to make sure other players hand is not changed
        -:  147:    
        -:  148: //   printf("Player %d hand count = %d, expected = %d\n", otherPlayer, recievedResult, expected);
     4000:  149:    if(played.handCount[otherPlayer] != expected.handCount[otherPlayer]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  150:        //check if hand is correct
    #####:  151:            printf("****FAIL Iteration: %d Returned Hand Count for Player %d = %d, expected = %d\n", i, otherPlayer, played.handCount[otherPlayer], expected.handCount[otherPlayer]); 
call    0 never executed
    #####:  152:            errors++;
        -:  153:    }
        -:  154:    
        -:  155:    //test to make sure other player deck is same and first player did not draw
        -:  156:    //from other players pile
        -:  157://    printf("Player %d deck count = %d, expected = %d\n", otherPlayer, played.deckCount[otherPlayer], expected.deckCount[otherPlayer]);
     4000:  158:    if(played.deckCount[otherPlayer] != expected.deckCount[otherPlayer]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  159:        //check if deck is correct
    #####:  160:            printf("****FAIL Iteration: %d Returned Deck Count for Player %d = %d, expected = %d\n", i, otherPlayer, played.deckCount[currPlayer], expected.deckCount[currPlayer]); 
call    0 never executed
    #####:  161:            errors++;
        -:  162:    }
        -:  163:    
        -:  164:    //test to make sure victory card piles where untouched.
        -:  165:    //check curse
     4000:  166:    if(played.supplyCount[curse] != expected.supplyCount[curse]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  167:         printf("****FAIL Iteration: %d Curse Count for Player %d = %d, expected = %d\n", i, currPlayer, played.supplyCount[curse], expected.supplyCount[curse]); 
call    0 never executed
    #####:  168:            errors++;
        -:  169:    }
        -:  170:    //check estate
     4000:  171:    if(played.supplyCount[estate] != expected.supplyCount[estate]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     4000:  172:         printf("****FAIL Iteration: %d Estate Count for Player %d = %d, expected = %d\n", i, currPlayer, played.supplyCount[estate], expected.supplyCount[estate]); 
call    0 returned 100%
     4000:  173:            errors++;
        -:  174:    }
        -:  175:    //check duchy
     4000:  176:    if(played.supplyCount[duchy] != expected.supplyCount[duchy]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  177:         printf("****FAIL Iteration: %d Duchy Count for Player %d = %d, expected = %d\n", i, currPlayer, played.supplyCount[duchy], expected.supplyCount[duchy]); 
call    0 never executed
    #####:  178:            errors++;
        -:  179:    }
        -:  180:    //check province
     4000:  181:    if(played.supplyCount[province] != expected.supplyCount[province]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  182:         printf("****FAIL Iteration: %d Province Count for Player %d = %d, expected = %d\n", i, currPlayer, played.supplyCount[province], expected.supplyCount[province]); 
call    0 never executed
    #####:  183:            errors++;
        -:  184:    }
        -:  185:    
        -:  186:    //test to make sure the kingdom cards count have not been altered
        -:  187:    int i;
    44000:  188:    for(i=0; i < 10; i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    40000:  189:        if(played.supplyCount[k[i]] != expected.supplyCount[k[i]]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  190:         printf("****FAIL Iteration: %d Count for Player %d = %d, expected = %d\n", i, currPlayer, played.supplyCount[k[i]], expected.supplyCount[k[i]]); 
call    0 never executed
    #####:  191:            errors++;
    #####:  192:         printf("%d is incorrect\n", k[i]);    
call    0 never executed
        -:  193:        }
        -:  194:    }
        -:  195:    
        -:  196:    
        -:  197:    
        -:  198:  }
        -:  199:    
        -:  200:    
        -:  201:    
        -:  202:    
        2:  203:    if(errors == 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  204:     printf("ALL TESTS PASS for village card.\n");   
call    0 never executed
        -:  205:    }
        -:  206:    else{
        2:  207:     printf("FAIL: There are %d errors for playing village card.\n", errors);   
call    0 returned 100%
        -:  208:    }  
        -:  209:      
        -:  210:      
        -:  211:      
        -:  212:      
        -:  213:      
        2:  214:    return 0; 
        -:  215:}
File 'dominion.c'
Lines executed:31.80% of 566
Creating 'dominion.c.gcov'

File 'dominion.c'
Lines executed:31.80% of 566
Branches executed:30.94% of 417
Taken at least once:21.82% of 417
Calls executed:24.75% of 101
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function playSmithyCard called 0 returned 0% blocks executed 0%
    #####:    8:void playSmithyCard(int handPos, struct gameState *state){
        -:    9:    //find current player
    #####:   10:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -:   11:    int i;
        -:   12:    //+3 Cards
    #####:   13:      for (i = 0; i <= 3; i++)
branch  0 never executed
branch  1 never executed
        -:   14:	{
    #####:   15:	  drawCard(currentPlayer, state);
call    0 never executed
        -:   16:	}
        -:   17:			
        -:   18:      //discard card from hand
    #####:   19:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:   20:}
        -:   21:
function playAdventurerCard called 8000 returned 100% blocks executed 100%
     8000:   22:void playAdventurerCard(struct gameState *state){
        -:   23:     //find current player
     8000:   24:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:   25:    //set the amount of treasure to 0
     8000:   26:    int drawntreasure = 0;
        -:   27:    //set z to 0
     8000:   28:    int z = 0;
        -:   29:    int cardDrawn;
        -:   30:    //initialize a temp hand
        -:   31:    int temphand[MAX_HAND];
        -:   32:    
  2000360:   33:    while(drawntreasure<2){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  1984360:   34:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
     8696:   35:          shuffle(currentPlayer, state);
call    0 returned 100%
        -:   36:        }
  1984360:   37:        drawCard(currentPlayer, state);
call    0 returned 100%
  1984360:   38:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
  1984360:   39:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
    16000:   40:          drawntreasure++;
        -:   41:        else{
  1968360:   42:          temphand[z]=cardDrawn;
  1968360:   43:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
  1968360:   44:          z++;
        -:   45:        }
        -:   46:          }
  1978336:   47:     while(z-1>=0){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  1962336:   48:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
  1962336:   49:        z=z-1;
        -:   50:          } 
     8000:   51:}
        -:   52:    
function playVillageCard called 4000 returned 100% blocks executed 100%
     4000:   53:void playVillageCard(int handPos, struct gameState *state){
        -:   54:       //find current player
     4000:   55:    int currentPlayer = whoseTurn(state); 
call    0 returned 100%
        -:   56:    
        -:   57:      //+1 Card
     4000:   58:      drawCard(currentPlayer, state);
call    0 returned 100%
     4000:   59:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:   60:    
        -:   61:      //+2 Actions
     4000:   62:      state->numActions = state->numActions + 2;
        -:   63:			
        -:   64:      //discard played card from hand
     4000:   65:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     4000:   66:}
        -:   67:
function playGreat_HallCard called 0 returned 0% blocks executed 0%
    #####:   68:void playGreat_HallCard(int handPos, struct gameState *state){
        -:   69:    //find current player
    #####:   70:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -:   71:    
        -:   72:    //+1 Card
    #####:   73:      drawCard(currentPlayer, state);
call    0 never executed
        -:   74:			
        -:   75:      //+1 Actions
    #####:   76:      state->numActions++;
        -:   77:			
        -:   78:      //discard card from hand
    #####:   79:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:   80:}
        -:   81:
function playMinionCard called 0 returned 0% blocks executed 0%
    #####:   82:void playMinionCard(int handPos, int choice1, int choice2, struct gameState *state){
        -:   83:    int i;
        -:   84:    int j;
        -:   85:    //find current player
    #####:   86:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -:   87:    
        -:   88:    int cardDrawn;
        -:   89:    
        -:   90:    //+1 action
    #####:   91:      state->numActions++;
        -:   92:			
        -:   93:      //discard card from hand
    #####:   94:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:   95:			
    #####:   96:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:   97:	{
    #####:   98:	  state->coins = state->coins + 2;
        -:   99:	}
        -:  100:			
    #####:  101:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  102:	{
        -:  103:	  //discard hand
    #####:  104:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  105:	    {
    #####:  106:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  107:	    }
        -:  108:				
        -:  109:	  //draw 4
    #####:  110:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  111:	    {
    #####:  112:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  113:	    }
        -:  114:				
        -:  115:	  //other players discard hand and redraw if hand size > 4
    #####:  116:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  117:	    {
    #####:  118:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  119:		{
    #####:  120:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  121:		    {
        -:  122:		      //discard hand
    #####:  123:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  124:			{
    #####:  125:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  126:			}
        -:  127:							
        -:  128:		      //draw 4
    #####:  129:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  130:			{
    #####:  131:			  drawCard(i, state);
call    0 never executed
        -:  132:			}
        -:  133:		    }
        -:  134:		}
        -:  135:	    }
        -:  136:				
        -:  137:	}
    #####:  138:      return 0;   
        -:  139:}
        -:  140:    
function compare called 496739 returned 100% blocks executed 100%
   496739:  141:int compare(const void* a, const void* b) {
   496739:  142:  if (*(int*)a > *(int*)b)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
     2766:  143:    return 1;
   493973:  144:  if (*(int*)a < *(int*)b)
branch  0 taken 19% (fallthrough)
branch  1 taken 81%
    96050:  145:    return -1;
   397923:  146:  return 0;
        -:  147:}
        -:  148:
        -:  149:
function newGame called 0 returned 0% blocks executed 0%
    #####:  150:struct gameState* newGame() {
    #####:  151:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  152:  return g;
        -:  153:}
        -:  154:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:  155:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  156:		  int k8, int k9, int k10) {
    #####:  157:  int* k = malloc(10 * sizeof(int));
    #####:  158:  k[0] = k1;
    #####:  159:  k[1] = k2;
    #####:  160:  k[2] = k3;
    #####:  161:  k[3] = k4;
    #####:  162:  k[4] = k5;
    #####:  163:  k[5] = k6;
    #####:  164:  k[6] = k7;
    #####:  165:  k[7] = k8;
    #####:  166:  k[8] = k9;
    #####:  167:  k[9] = k10;
    #####:  168:  return k;
        -:  169:}
        -:  170:
function initializeGame called 12000 returned 100% blocks executed 88%
    12000:  171:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  172:		   struct gameState *state) {
        -:  173:
        -:  174:  int i;
        -:  175:  int j;
        -:  176:  int it;			
        -:  177:  //set up random number generator
    12000:  178:  SelectStream(1);
call    0 returned 100%
    12000:  179:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:  180:  
        -:  181:  //check number of players
    12000:  182:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  183:    {
    #####:  184:      return -1;
        -:  185:    }
        -:  186:
        -:  187:  //set number of players
    12000:  188:  state->numPlayers = numPlayers;
        -:  189:
        -:  190:  //check selected kingdom cards are different
   132000:  191:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  192:    {
  1320000:  193:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  194:        {
  1200000:  195:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  196:	    {
    #####:  197:	      return -1;
        -:  198:	    }
        -:  199:        }
        -:  200:    }
        -:  201:
        -:  202:
        -:  203:  //initialize supply
        -:  204:  ///////////////////////////////
        -:  205:
        -:  206:  //set number of Curse cards
    12000:  207:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  208:    {
    12000:  209:      state->supplyCount[curse] = 10;
        -:  210:    }
    #####:  211:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:  212:    {
    #####:  213:      state->supplyCount[curse] = 20;
        -:  214:    }
        -:  215:  else
        -:  216:    {
    #####:  217:      state->supplyCount[curse] = 30;
        -:  218:    }
        -:  219:
        -:  220:  //set number of Victory cards
    12000:  221:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  222:    {
    12000:  223:      state->supplyCount[estate] = 8;
    12000:  224:      state->supplyCount[duchy] = 8;
    12000:  225:      state->supplyCount[province] = 8;
        -:  226:    }
        -:  227:  else
        -:  228:    {
    #####:  229:      state->supplyCount[estate] = 12;
    #####:  230:      state->supplyCount[duchy] = 12;
    #####:  231:      state->supplyCount[province] = 12;
        -:  232:    }
        -:  233:
        -:  234:  //set number of Treasure cards
    12000:  235:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    12000:  236:  state->supplyCount[silver] = 40;
    12000:  237:  state->supplyCount[gold] = 30;
        -:  238:
        -:  239:  //set number of Kingdom cards
   252000:  240:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  241:    {
  1980000:  242:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  243:	{
  1860000:  244:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  245:	    {
        -:  246:	      //check if card is a 'Victory' Kingdom card
   120000:  247:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  248:		{
    48000:  249:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    24000:  250:		    state->supplyCount[i] = 8; 
        -:  251:		  }
    #####:  252:		  else{ state->supplyCount[i] = 12; }
        -:  253:		}
        -:  254:	      else
        -:  255:		{
    96000:  256:		  state->supplyCount[i] = 10;
        -:  257:		}
   120000:  258:	      break;
        -:  259:	    }
        -:  260:	  else    //card is not in the set choosen for the game
        -:  261:	    {
  1740000:  262:	      state->supplyCount[i] = -1;
        -:  263:	    }
        -:  264:	}
        -:  265:
        -:  266:    }
        -:  267:
        -:  268:  ////////////////////////
        -:  269:  //supply intilization complete
        -:  270:
        -:  271:  //set player decks
    36000:  272:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  273:    {
    24000:  274:      state->deckCount[i] = 0;
    96000:  275:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  276:	{
    72000:  277:	  state->deck[i][j] = estate;
    72000:  278:	  state->deckCount[i]++;
        -:  279:	}
   192000:  280:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  281:	{
   168000:  282:	  state->deck[i][j] = copper;
   168000:  283:	  state->deckCount[i]++;		
        -:  284:	}
        -:  285:    }
        -:  286:
        -:  287:  //shuffle player decks
    36000:  288:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  289:    {
    24000:  290:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  291:	{
    #####:  292:	  return -1;
        -:  293:	}
        -:  294:    }
        -:  295:
        -:  296:  //draw player hands
    36000:  297:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  298:    {  
        -:  299:      //initialize hand size to zero
    24000:  300:      state->handCount[i] = 0;
    24000:  301:      state->discardCount[i] = 0;
        -:  302:      //draw 5 cards
        -:  303:      // for (j = 0; j < 5; j++)
        -:  304:      //	{
        -:  305:      //	  drawCard(i, state);
        -:  306:      //	}
        -:  307:    }
        -:  308:  
        -:  309:  //set embargo tokens to 0 for all supply piles
   336000:  310:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  311:    {
   324000:  312:      state->embargoTokens[i] = 0;
        -:  313:    }
        -:  314:
        -:  315:  //initialize first player's turn
    12000:  316:  state->outpostPlayed = 0;
    12000:  317:  state->phase = 0;
    12000:  318:  state->numActions = 1;
    12000:  319:  state->numBuys = 1;
    12000:  320:  state->playedCardCount = 0;
    12000:  321:  state->whoseTurn = 0;
    12000:  322:  state->handCount[state->whoseTurn] = 0;
        -:  323:  //int it; move to top
        -:  324:
        -:  325:  //Moved draw cards to here, only drawing at the start of a turn
    72000:  326:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    60000:  327:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  328:  }
        -:  329:
    12000:  330:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  331:
    12000:  332:  return 0;
        -:  333:}
        -:  334:
function shuffle called 41522 returned 100% blocks executed 100%
    41522:  335:int shuffle(int player, struct gameState *state) {
        -:  336: 
        -:  337:
        -:  338:  int newDeck[MAX_DECK];
    41522:  339:  int newDeckPos = 0;
        -:  340:  int card;
        -:  341:  int i;
        -:  342:
    41522:  343:  if (state->deckCount[player] < 1)
branch  0 taken 42% (fallthrough)
branch  1 taken 58%
    17370:  344:    return -1;
    24152:  345:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  346:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  347:
   322755:  348:  while (state->deckCount[player] > 0) {
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
   274451:  349:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
   274451:  350:    newDeck[newDeckPos] = state->deck[player][card];
   274451:  351:    newDeckPos++;
  3506453:  352:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
  3232002:  353:      state->deck[player][i] = state->deck[player][i+1];
        -:  354:    }
   274451:  355:    state->deckCount[player]--;
        -:  356:  }
   298603:  357:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
   274451:  358:    state->deck[player][i] = newDeck[i];
   274451:  359:    state->deckCount[player]++;
        -:  360:  }
        -:  361:
    24152:  362:  return 0;
        -:  363:}
        -:  364:
function playCard called 0 returned 0% blocks executed 0%
    #####:  365:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  366:{	
        -:  367:  int card;
    #####:  368:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  369:
        -:  370:  //check if it is the right phase
    #####:  371:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  372:    {
    #####:  373:      return -1;
        -:  374:    }
        -:  375:	
        -:  376:  //check if player has enough actions
    #####:  377:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  378:    {
    #####:  379:      return -1;
        -:  380:    }
        -:  381:	
        -:  382:  //get card played
    #####:  383:  card = handCard(handPos, state);
call    0 never executed
        -:  384:	
        -:  385:  //check if selected card is an action
    #####:  386:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  387:    {
    #####:  388:      return -1;
        -:  389:    }
        -:  390:	
        -:  391:  //play card
    #####:  392:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  393:    {
    #####:  394:      return -1;
        -:  395:    }
        -:  396:	
        -:  397:  //reduce number of actions
    #####:  398:  state->numActions--;
        -:  399:
        -:  400:  //update coins (Treasure cards may be added with card draws)
    #####:  401:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  402:	
    #####:  403:  return 0;
        -:  404:}
        -:  405:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  406:int buyCard(int supplyPos, struct gameState *state) {
        -:  407:  int who;
        -:  408:  if (DEBUG){
        -:  409:    printf("Entering buyCard...\n");
        -:  410:  }
        -:  411:
        -:  412:  // I don't know what to do about the phase thing.
        -:  413:
    #####:  414:  who = state->whoseTurn;
        -:  415:
    #####:  416:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  417:    if (DEBUG)
        -:  418:      printf("You do not have any buys left\n");
    #####:  419:    return -1;
    #####:  420:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  421:    if (DEBUG)
        -:  422:      printf("There are not any of that type of card left\n");
    #####:  423:    return -1;
    #####:  424:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  425:    if (DEBUG) 
        -:  426:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  427:    return -1;
        -:  428:  } else {
    #####:  429:    state->phase=1;
        -:  430:    //state->supplyCount[supplyPos]--;
    #####:  431:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  432:  
    #####:  433:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  434:    state->numBuys--;
        -:  435:    if (DEBUG)
        -:  436:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  437:  }
        -:  438:
        -:  439:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  440:  //state->discardCount[who]++;
        -:  441:    
    #####:  442:  return 0;
        -:  443:}
        -:  444:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  445:int numHandCards(struct gameState *state) {
    #####:  446:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  447:}
        -:  448:
function handCard called 0 returned 0% blocks executed 0%
    #####:  449:int handCard(int handPos, struct gameState *state) {
    #####:  450:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  451:  return state->hand[currentPlayer][handPos];
        -:  452:}
        -:  453:
function supplyCount called 12000 returned 100% blocks executed 100%
    12000:  454:int supplyCount(int card, struct gameState *state) {
    12000:  455:  return state->supplyCount[card];
        -:  456:}
        -:  457:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  458:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  459:  int i;
    #####:  460:  int count = 0;
        -:  461:
    #####:  462:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  463:    {
    #####:  464:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  465:    }
        -:  466:
    #####:  467:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  468:    {
    #####:  469:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  470:    }
        -:  471:
    #####:  472:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  473:    {
    #####:  474:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  475:    }
        -:  476:
    #####:  477:  return count;
        -:  478:}
        -:  479:
function whoseTurn called 24000 returned 100% blocks executed 100%
    24000:  480:int whoseTurn(struct gameState *state) {
    24000:  481:  return state->whoseTurn;
        -:  482:}
        -:  483:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  484:int endTurn(struct gameState *state) {
        -:  485:  int k;
        -:  486:  int i;
    #####:  487:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  488:  
        -:  489:  //Discard hand
    #####:  490:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  491:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  492:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  493:  }
    #####:  494:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  495:    
        -:  496:  //Code for determining the player
    #####:  497:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  498:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  499:  }
        -:  500:  else{
    #####:  501:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  502:  }
        -:  503:
    #####:  504:  state->outpostPlayed = 0;
    #####:  505:  state->phase = 0;
    #####:  506:  state->numActions = 1;
    #####:  507:  state->coins = 0;
    #####:  508:  state->numBuys = 1;
    #####:  509:  state->playedCardCount = 0;
    #####:  510:  state->handCount[state->whoseTurn] = 0;
        -:  511:
        -:  512:  //int k; move to top
        -:  513:  //Next player draws hand
    #####:  514:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  515:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  516:  }
        -:  517:
        -:  518:  //Update money
    #####:  519:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  520:
    #####:  521:  return 0;
        -:  522:}
        -:  523:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  524:int isGameOver(struct gameState *state) {
        -:  525:  int i;
        -:  526:  int j;
        -:  527:	
        -:  528:  //if stack of Province cards is empty, the game ends
    #####:  529:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  530:    {
    #####:  531:      return 1;
        -:  532:    }
        -:  533:
        -:  534:  //if three supply pile are at 0, the game ends
    #####:  535:  j = 0;
    #####:  536:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  537:    {
    #####:  538:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  539:	{
    #####:  540:	  j++;
        -:  541:	}
        -:  542:    }
    #####:  543:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  544:    {
    #####:  545:      return 1;
        -:  546:    }
        -:  547:
    #####:  548:  return 0;
        -:  549:}
        -:  550:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  551:int scoreFor (int player, struct gameState *state) {
        -:  552:
        -:  553:  int i;
    #####:  554:  int score = 0;
        -:  555:  //score from hand
    #####:  556:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  557:    {
    #####:  558:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  559:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  560:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  561:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  562:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  563:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  564:    }
        -:  565:
        -:  566:  //score from discard
    #####:  567:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  568:    {
    #####:  569:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  570:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  571:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  572:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  573:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  574:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  575:    }
        -:  576:
        -:  577:  //score from deck
    #####:  578:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  579:    {
    #####:  580:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  581:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  582:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  583:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  584:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  585:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  586:    }
        -:  587:
    #####:  588:  return score;
        -:  589:}
        -:  590:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  591:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  592:  int i;	
        -:  593:  int j;
        -:  594:  int highScore;
        -:  595:  int currentPlayer;
        -:  596:
        -:  597:  //get score for each player
    #####:  598:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  599:    {
        -:  600:      //set unused player scores to -9999
    #####:  601:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  602:	{
    #####:  603:	  players[i] = -9999;
        -:  604:	}
        -:  605:      else
        -:  606:	{
    #####:  607:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  608:	}
        -:  609:    }
        -:  610:
        -:  611:  //find highest score
    #####:  612:  j = 0;
    #####:  613:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  614:    {
    #####:  615:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  616:	{
    #####:  617:	  j = i;
        -:  618:	}
        -:  619:    }
    #####:  620:  highScore = players[j];
        -:  621:
        -:  622:  //add 1 to players who had less turns
    #####:  623:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  624:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  625:    {
    #####:  626:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  627:	{
    #####:  628:	  players[i]++;
        -:  629:	}
        -:  630:    }
        -:  631:
        -:  632:  //find new highest score
    #####:  633:  j = 0;
    #####:  634:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  635:    {
    #####:  636:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  637:	{
    #####:  638:	  j = i;
        -:  639:	}
        -:  640:    }
    #####:  641:  highScore = players[j];
        -:  642:
        -:  643:  //set winners in array to 1 and rest to 0
    #####:  644:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  645:    {
    #####:  646:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  647:	{
    #####:  648:	  players[i] = 1;
        -:  649:	}
        -:  650:      else
        -:  651:	{
    #####:  652:	  players[i] = 0;
        -:  653:	}
        -:  654:    }
        -:  655:
    #####:  656:  return 0;
        -:  657:}
        -:  658:
function drawCard called 2092360 returned 100% blocks executed 100%
  2092360:  659:int drawCard(int player, struct gameState *state)
        -:  660:{	int count;
        -:  661:  int deckCounter;
  2092360:  662:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  663:    
        -:  664:    //Step 1 Shuffle the discard pile back into a deck
        -:  665:    int i;
        -:  666:    //Move discard to deck
    43277:  667:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
    34451:  668:      state->deck[player][i] = state->discard[player][i];
    34451:  669:      state->discard[player][i] = -1;
        -:  670:    }
        -:  671:
     8826:  672:    state->deckCount[player] = state->discardCount[player];
     8826:  673:    state->discardCount[player] = 0;//Reset discard
        -:  674:
        -:  675:    //Shufffle the deck
     8826:  676:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  677:   
        -:  678:    if (DEBUG){//Debug statements
        -:  679:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  680:    }
        -:  681:    
     8826:  682:    state->discardCount[player] = 0;
        -:  683:
        -:  684:    //Step 2 Draw Card
     8826:  685:    count = state->handCount[player];//Get current player's hand count
        -:  686:    
        -:  687:    if (DEBUG){//Debug statements
        -:  688:      printf("Current hand count: %d\n", count);
        -:  689:    }
        -:  690:    
     8826:  691:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  692:
     8826:  693:    if (deckCounter == 0)
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
     8674:  694:      return -1;
        -:  695:
      152:  696:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      152:  697:    state->deckCount[player]--;
      152:  698:    state->handCount[player]++;//Increment hand count
        -:  699:  }
        -:  700:
        -:  701:  else{
  2083534:  702:    int count = state->handCount[player];//Get current hand count for player
        -:  703:    int deckCounter;
        -:  704:    if (DEBUG){//Debug statements
        -:  705:      printf("Current hand count: %d\n", count);
        -:  706:    }
        -:  707:
  2083534:  708:    deckCounter = state->deckCount[player];//Create holder for the deck count
  2083534:  709:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  2083534:  710:    state->deckCount[player]--;
  2083534:  711:    state->handCount[player]++;//Increment hand count
        -:  712:  }
        -:  713:
  2083686:  714:  return 0;
        -:  715:}
        -:  716:
function getCost called 0 returned 0% blocks executed 0%
    #####:  717:int getCost(int cardNumber)
        -:  718:{
    #####:  719:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  720:    {
        -:  721:    case curse:
    #####:  722:      return 0;
        -:  723:    case estate:
    #####:  724:      return 2;
        -:  725:    case duchy:
    #####:  726:      return 5;
        -:  727:    case province:
    #####:  728:      return 8;
        -:  729:    case copper:
    #####:  730:      return 0;
        -:  731:    case silver:
    #####:  732:      return 3;
        -:  733:    case gold:
    #####:  734:      return 6;
        -:  735:    case adventurer:
    #####:  736:      return 6;
        -:  737:    case council_room:
    #####:  738:      return 5;
        -:  739:    case feast:
    #####:  740:      return 4;
        -:  741:    case gardens:
    #####:  742:      return 4;
        -:  743:    case mine:
    #####:  744:      return 5;
        -:  745:    case remodel:
    #####:  746:      return 4;
        -:  747:    case smithy:
    #####:  748:      return 4;
        -:  749:    case village:
    #####:  750:      return 3;
        -:  751:    case baron:
    #####:  752:      return 4;
        -:  753:    case great_hall:
    #####:  754:      return 3;
        -:  755:    case minion:
    #####:  756:      return 5;
        -:  757:    case steward:
    #####:  758:      return 3;
        -:  759:    case tribute:
    #####:  760:      return 5;
        -:  761:    case ambassador:
    #####:  762:      return 3;
        -:  763:    case cutpurse:
    #####:  764:      return 4;
        -:  765:    case embargo: 
    #####:  766:      return 2;
        -:  767:    case outpost:
    #####:  768:      return 5;
        -:  769:    case salvager:
    #####:  770:      return 4;
        -:  771:    case sea_hag:
    #####:  772:      return 4;
        -:  773:    case treasure_map:
    #####:  774:      return 4;
        -:  775:    }
        -:  776:	
    #####:  777:  return -1;
        -:  778:}
        -:  779:
function cardEffect called 12000 returned 100% blocks executed 12%
    12000:  780:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  781:{
        -:  782:  int i;
        -:  783:  int j;
        -:  784:  int k;
        -:  785:  int x;
        -:  786:  int index;
    12000:  787:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
    12000:  788:  int nextPlayer = currentPlayer + 1;
        -:  789:
    12000:  790:  int tributeRevealedCards[2] = {-1, -1};
        -:  791:  int temphand[MAX_HAND];// moved above the if statement
    12000:  792:  int drawntreasure=0;
        -:  793:  int cardDrawn;
    12000:  794:  int z = 0;// this is the counter for the temp hand
    12000:  795:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
     5963:  796:    nextPlayer = 0;
        -:  797:  }
        -:  798:  
        -:  799:	
        -:  800:  //uses switch to select card and perform actions
    12000:  801:  switch( card ) 
branch  0 taken 67%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 33%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  802:    {
        -:  803:    case adventurer:
     8000:  804:      playAdventurerCard(state);
call    0 returned 100%
        -:  805:			
        -:  806:    case council_room:
        -:  807:      //+4 Cards
    40000:  808:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  809:	{
    32000:  810:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  811:	}
        -:  812:			
        -:  813:      //+1 Buy
     8000:  814:      state->numBuys++;
        -:  815:			
        -:  816:      //Each other player draws a card
    24000:  817:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  818:	{
    16000:  819:	  if ( i != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  820:	    {
     8000:  821:	      drawCard(i, state);
call    0 returned 100%
        -:  822:	    }
        -:  823:	}
        -:  824:			
        -:  825:      //put played card in played card pile
     8000:  826:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  827:			
     8000:  828:      return 0;
        -:  829:			
        -:  830:    case feast:
        -:  831:      //gain card with cost up to 5
        -:  832:      //Backup hand
    #####:  833:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  834:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  835:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  836:      }
        -:  837:      //Backup hand
        -:  838:
        -:  839:      //Update Coins for Buy
    #####:  840:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  841:      x = 1;//Condition to loop on
    #####:  842:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  843:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  844:	  if (DEBUG)
        -:  845:	    printf("None of that card left, sorry!\n");
        -:  846:
        -:  847:	  if (DEBUG){
        -:  848:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  849:	  }
        -:  850:	}
    #####:  851:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  852:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  853:
        -:  854:	  if (DEBUG){
        -:  855:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  856:	  }
        -:  857:	}
        -:  858:	else{
        -:  859:
        -:  860:	  if (DEBUG){
        -:  861:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  862:	  }
        -:  863:
    #####:  864:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  865:	  x = 0;//No more buying cards
        -:  866:
        -:  867:	  if (DEBUG){
        -:  868:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  869:	  }
        -:  870:
        -:  871:	}
        -:  872:      }     
        -:  873:
        -:  874:      //Reset Hand
    #####:  875:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  876:	state->hand[currentPlayer][i] = temphand[i];
    #####:  877:	temphand[i] = -1;
        -:  878:      }
        -:  879:      //Reset Hand
        -:  880:      			
    #####:  881:      return 0;
        -:  882:			
        -:  883:    case gardens:
    #####:  884:      return -1;
        -:  885:			
        -:  886:    case mine:
    #####:  887:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  888:
    #####:  889:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  890:	{
    #####:  891:	  return -1;
        -:  892:	}
        -:  893:		
    #####:  894:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  895:	{
    #####:  896:	  return -1;
        -:  897:	}
        -:  898:
    #####:  899:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  900:	{
    #####:  901:	  return -1;
        -:  902:	}
        -:  903:
    #####:  904:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  905:
        -:  906:      //discard card from hand
    #####:  907:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  908:
        -:  909:      //discard trashed card
    #####:  910:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  911:	{
    #####:  912:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  913:	    {
    #####:  914:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  915:	      break;
        -:  916:	    }
        -:  917:	}
        -:  918:			
    #####:  919:      return 0;
        -:  920:			
        -:  921:    case remodel:
    #####:  922:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  923:
    #####:  924:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  925:	{
    #####:  926:	  return -1;
        -:  927:	}
        -:  928:
    #####:  929:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  930:
        -:  931:      //discard card from hand
    #####:  932:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  933:
        -:  934:      //discard trashed card
    #####:  935:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  936:	{
    #####:  937:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  938:	    {
    #####:  939:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  940:	      break;
        -:  941:	    }
        -:  942:	}
        -:  943:
        -:  944:
    #####:  945:      return 0;
        -:  946:		
        -:  947:    case smithy:
    #####:  948:      playSmithyCard(handPos, state);
call    0 never executed
        -:  949:          
        -:  950:    case village:
     4000:  951:      playVillageCard(handPos, state);
call    0 returned 100%
        -:  952:		
        -:  953:    case baron:
     4000:  954:      state->numBuys++;//Increase buys by 1!
     4000:  955:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  956:	int p = 0;//Iterator for hand!
    #####:  957:	int card_not_discarded = 1;//Flag for discard set!
    #####:  958:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  959:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  960:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  961:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  962:	    state->discardCount[currentPlayer]++;
    #####:  963:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  964:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  965:	    }
    #####:  966:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  967:	    state->handCount[currentPlayer]--;
    #####:  968:	    card_not_discarded = 0;//Exit the loop
        -:  969:	  }
    #####:  970:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  971:	    if(DEBUG) {
        -:  972:	      printf("No estate cards in your hand, invalid choice\n");
        -:  973:	      printf("Must gain an estate if there are any\n");
        -:  974:	    }
    #####:  975:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  976:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  977:	      state->supplyCount[estate]--;//Decrement estates
    #####:  978:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  979:		isGameOver(state);
call    0 never executed
        -:  980:	      }
        -:  981:	    }
    #####:  982:	    card_not_discarded = 0;//Exit the loop
        -:  983:	  }
        -:  984:			    
        -:  985:	  else{
    #####:  986:	    p++;//Next card
        -:  987:	  }
        -:  988:	}
        -:  989:      }
        -:  990:			    
        -:  991:      else{
     4000:  992:	if (supplyCount(estate, state) > 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     4000:  993:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 returned 100%
     4000:  994:	  state->supplyCount[estate]--;//Decrement Estates
     4000:  995:	  if (supplyCount(estate, state) == 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  996:	    isGameOver(state);
call    0 never executed
        -:  997:	  }
        -:  998:	}
        -:  999:      }
        -: 1000:	    
        -: 1001:      
     4000: 1002:      return 0;
        -: 1003:		
        -: 1004:    case great_hall:
    #####: 1005:      playGreat_HallCard(handPos, state);
call    0 never executed
        -: 1006:		
        -: 1007:    case minion:
    #####: 1008:      playMinionCard(handPos, choice1, choice2, state);
call    0 never executed
        -: 1009:		
        -: 1010:    case steward:
    #####: 1011:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1012:	{
        -: 1013:	  //+2 cards
    #####: 1014:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1015:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1016:	}
    #####: 1017:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1018:	{
        -: 1019:	  //+2 coins
    #####: 1020:	  state->coins = state->coins + 2;
        -: 1021:	}
        -: 1022:      else
        -: 1023:	{
        -: 1024:	  //trash 2 cards in hand
    #####: 1025:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1026:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1027:	}
        -: 1028:			
        -: 1029:      //discard card from hand
    #####: 1030:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1031:      return 0;
        -: 1032:		
        -: 1033:    case tribute:
    #####: 1034:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1035:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1036:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1037:	  state->deckCount[nextPlayer]--;
        -: 1038:	}
    #####: 1039:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1040:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1041:	  state->discardCount[nextPlayer]--;
        -: 1042:	}
        -: 1043:	else{
        -: 1044:	  //No Card to Reveal
        -: 1045:	  if (DEBUG){
        -: 1046:	    printf("No cards to reveal\n");
        -: 1047:	  }
        -: 1048:	}
        -: 1049:      }
        -: 1050:	    
        -: 1051:      else{
    #####: 1052:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1053:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1054:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1055:	    state->deckCount[nextPlayer]++;
    #####: 1056:	    state->discard[nextPlayer][i] = -1;
    #####: 1057:	    state->discardCount[nextPlayer]--;
        -: 1058:	  }
        -: 1059:			    
    #####: 1060:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1061:	} 
    #####: 1062:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1063:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1064:	state->deckCount[nextPlayer]--;
    #####: 1065:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1066:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1067:	state->deckCount[nextPlayer]--;
        -: 1068:      }    
        -: 1069:		       
    #####: 1070:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1071:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1072:	state->playedCardCount++;
    #####: 1073:	tributeRevealedCards[1] = -1;
        -: 1074:      }
        -: 1075:
    #####: 1076:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1077:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1078:	  state->coins += 2;
        -: 1079:	}
        -: 1080:		    
    #####: 1081:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1082:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1083:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1084:	}
        -: 1085:	else{//Action Card
    #####: 1086:	  state->numActions = state->numActions + 2;
        -: 1087:	}
        -: 1088:      }
        -: 1089:	    
    #####: 1090:      return 0;
        -: 1091:		
        -: 1092:    case ambassador:
    #####: 1093:      j = 0;		//used to check if player has enough cards to discard
        -: 1094:
    #####: 1095:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1096:	{
    #####: 1097:	  return -1;				
        -: 1098:	}
        -: 1099:
    #####: 1100:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1101:	{
    #####: 1102:	  return -1;
        -: 1103:	}
        -: 1104:
    #####: 1105:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1106:	{
    #####: 1107:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1108:	    {
    #####: 1109:	      j++;
        -: 1110:	    }
        -: 1111:	}
    #####: 1112:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
    #####: 1114:	  return -1;				
        -: 1115:	}
        -: 1116:
        -: 1117:      if (DEBUG) 
        -: 1118:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1119:
        -: 1120:      //increase supply count for choosen card by amount being discarded
    #####: 1121:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1122:			
        -: 1123:      //each other player gains a copy of revealed card
    #####: 1124:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1125:	{
    #####: 1126:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1127:	    {
    #####: 1128:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1129:	    }
        -: 1130:	}
        -: 1131:
        -: 1132:      //discard played card from hand
    #####: 1133:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1134:
        -: 1135:      //trash copies of cards returned to supply
    #####: 1136:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1137:	{
    #####: 1138:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1139:	    {
    #####: 1140:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1141:		{
    #####: 1142:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1143:		  break;
        -: 1144:		}
        -: 1145:	    }
        -: 1146:	}			
        -: 1147:
    #####: 1148:      return 0;
        -: 1149:		
        -: 1150:    case cutpurse:
        -: 1151:
    #####: 1152:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1153:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1154:	{
    #####: 1155:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1156:	    {
    #####: 1157:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1158:		{
    #####: 1159:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1160:		    {
    #####: 1161:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1162:		      break;
        -: 1163:		    }
    #####: 1164:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1165:		    {
    #####: 1166:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1167:			{
        -: 1168:			  if (DEBUG)
        -: 1169:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1170:			}	
    #####: 1171:		      break;
        -: 1172:		    }		
        -: 1173:		}
        -: 1174:					
        -: 1175:	    }
        -: 1176:				
        -: 1177:	}				
        -: 1178:
        -: 1179:      //discard played card from hand
    #####: 1180:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1181:
    #####: 1182:      return 0;
        -: 1183:
        -: 1184:		
        -: 1185:    case embargo: 
        -: 1186:      //+2 Coins
    #####: 1187:      state->coins = state->coins + 2;
        -: 1188:			
        -: 1189:      //see if selected pile is in play
    #####: 1190:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1191:	{
    #####: 1192:	  return -1;
        -: 1193:	}
        -: 1194:			
        -: 1195:      //add embargo token to selected supply pile
    #####: 1196:      state->embargoTokens[choice1]++;
        -: 1197:			
        -: 1198:      //trash card
    #####: 1199:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1200:      return 0;
        -: 1201:		
        -: 1202:    case outpost:
        -: 1203:      //set outpost flag
    #####: 1204:      state->outpostPlayed++;
        -: 1205:			
        -: 1206:      //discard card
    #####: 1207:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1208:      return 0;
        -: 1209:		
        -: 1210:    case salvager:
        -: 1211:      //+1 buy
    #####: 1212:      state->numBuys++;
        -: 1213:			
    #####: 1214:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1215:	{
        -: 1216:	  //gain coins equal to trashed card
    #####: 1217:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1218:	  //trash card
    #####: 1219:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1220:	}
        -: 1221:			
        -: 1222:      //discard card
    #####: 1223:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1224:      return 0;
        -: 1225:		
        -: 1226:    case sea_hag:
    #####: 1227:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1228:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1229:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1230:	  state->discardCount[i]++;
    #####: 1231:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1232:	}
        -: 1233:      }
    #####: 1234:      return 0;
        -: 1235:		
        -: 1236:    case treasure_map:
        -: 1237:      //search hand for another treasure_map
    #####: 1238:      index = -1;
    #####: 1239:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1240:	{
    #####: 1241:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1242:	    {
    #####: 1243:	      index = i;
    #####: 1244:	      break;
        -: 1245:	    }
        -: 1246:	}
    #####: 1247:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1248:	{
        -: 1249:	  //trash both treasure cards
    #####: 1250:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1251:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1252:
        -: 1253:	  //gain 4 Gold cards
    #####: 1254:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1255:	    {
    #####: 1256:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1257:	    }
        -: 1258:				
        -: 1259:	  //return success
    #####: 1260:	  return 1;
        -: 1261:	}
        -: 1262:			
        -: 1263:      //no second treasure_map found in hand
    #####: 1264:      return -1;
        -: 1265:    }
        -: 1266:	
    #####: 1267:  return -1;
        -: 1268:}
        -: 1269:
function discardCard called 12000 returned 100% blocks executed 89%
    12000: 1270:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1271:{
        -: 1272:	
        -: 1273:  //if card is not trashed, added to Played pile 
    12000: 1274:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1275:    {
        -: 1276:      //add card to played pile
    12000: 1277:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    12000: 1278:      state->playedCardCount++;
        -: 1279:    }
        -: 1280:	
        -: 1281:  //set played card to -1
    12000: 1282:  state->hand[currentPlayer][handPos] = -1;
        -: 1283:	
        -: 1284:  //remove card from player's hand
    12000: 1285:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1286:    {
        -: 1287:      //reduce number of cards in hand
       10: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
    11990: 1290:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1291:    {
        -: 1292:      //reduce number of cards in hand
    #####: 1293:      state->handCount[currentPlayer]--;
        -: 1294:    }
        -: 1295:  else 	
        -: 1296:    {
        -: 1297:      //replace discarded card with last card in hand
    11990: 1298:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1299:      //set last card to -1
    11990: 1300:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1301:      //reduce number of cards in hand
    11990: 1302:      state->handCount[currentPlayer]--;
        -: 1303:    }
        -: 1304:	
    12000: 1305:  return 0;
        -: 1306:}
        -: 1307:
function gainCard called 4000 returned 100% blocks executed 70%
     4000: 1308:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1309:{
        -: 1310:  //Note: supplyPos is enum of choosen card
        -: 1311:	
        -: 1312:  //check if supply pile is empty (0) or card is not used in game (-1)
     4000: 1313:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1314:    {
    #####: 1315:      return -1;
        -: 1316:    }
        -: 1317:	
        -: 1318:  //added card for [whoseTurn] current player:
        -: 1319:  // toFlag = 0 : add to discard
        -: 1320:  // toFlag = 1 : add to deck
        -: 1321:  // toFlag = 2 : add to hand
        -: 1322:
     4000: 1323:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1324:    {
    #####: 1325:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1326:      state->deckCount[player]++;
        -: 1327:    }
     4000: 1328:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1329:    {
    #####: 1330:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1331:      state->handCount[player]++;
        -: 1332:    }
        -: 1333:  else
        -: 1334:    {
     4000: 1335:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     4000: 1336:      state->discardCount[player]++;
        -: 1337:    }
        -: 1338:	
        -: 1339:  //decrease number in supply pile
     4000: 1340:  state->supplyCount[supplyPos]--;
        -: 1341:	 
     4000: 1342:  return 0;
        -: 1343:}
        -: 1344:
function updateCoins called 12000 returned 100% blocks executed 82%
    12000: 1345:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1346:{
        -: 1347:  int i;
        -: 1348:	
        -: 1349:  //reset coin count
    12000: 1350:  state->coins = 0;
        -: 1351:
        -: 1352:  //add coins for each Treasure card in player's hand
    72000: 1353:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1354:    {
    60000: 1355:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1356:	{
    48000: 1357:	  state->coins += 1;
        -: 1358:	}
    12000: 1359:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1360:	{
    #####: 1361:	  state->coins += 2;
        -: 1362:	}
    12000: 1363:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1364:	{
    #####: 1365:	  state->coins += 3;
        -: 1366:	}	
        -: 1367:    }	
        -: 1368:
        -: 1369:  //add bonus
    12000: 1370:  state->coins += bonus;
        -: 1371:
    12000: 1372:  return 0;
        -: 1373:}
        -: 1374:
        -: 1375:
        -: 1376://end of dominion.c
        -: 1377:
