        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Name: Alex Marsh
        -:    3: * CS362
        -:    4: * unittest4.c
        -:    5: * This tests the function whoseTurn() function in dominion.c
        -:    6: * Include the following lines in your makefile:
        -:    7: *
        -:    8: * unittest4: unittest4.c dominion.o rngs.o
        -:    9: *      gcc -o unittest4 -g  unittest4.c dominion.o rngs.o $(CFLAGS)
        -:   10: * -----------------------------------------------------------------------
        -:   11: */
        -:   12:
        -:   13:#include <string.h>
        -:   14:#include <stdio.h>
        -:   15:#include <assert.h>
        -:   16:#include <math.h>
        -:   17:#include "dominion.h"
        -:   18:#include "dominion_helpers.h"
        -:   19:#include "interface.h"
        -:   20:#include "rngs.h"
        -:   21:
        -:   22:// set NOISY_TEST to 0 to remove printfs from output
        -:   23://to include printfs set to 1
        -:   24:#define NOISY_TEST 0
        -:   25:
function main called 1 returned 100% blocks executed 81%
        1:   26:int main(){
        1:   27:    int numPlayer = 4;
        1:   28:    int seed = 1000;
        -:   29:    int r;
        -:   30:    int expected, returnedPlayer;
        -:   31:    int numOfGames, players;
        1:   32:    int errors = 0;
        1:   33:    int totalGames = 11; //test for 10 games
        1:   34:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   35:               , remodel, smithy, village, baron, great_hall};
        -:   36:    struct gameState G;
        1:   37:    printf("----------------- Testing whoseTurn() ----------------\n");
call    0 returned 100%
        1:   38:    printf("\n"); 
call    0 returned 100%
        -:   39:    
       11:   40:    for(numOfGames = 1; numOfGames < totalGames; numOfGames++){     
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:   41:        memset(&G, 23, sizeof(struct gameState));   // clear the game state
       10:   42:        r = initializeGame(numPlayer, k, seed, &G); // initialize a new game
call    0 returned 100%
        -:   43: //       printf("Game %d\n", numOfGames);
        -:   44:        
       10:   45:        returnedPlayer = whoseTurn(&G);  //get current player
call    0 returned 100%
        -:   46://        printf("returnedPlayer is %d\n", returnedPlayer);
        -:   47://        printf("r is %d\n", r);  //printCurrent player
        -:   48: 
       10:   49:        expected = r; //expected player is 
       10:   50:        if(returnedPlayer != expected){//check if score is correct
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   51:            printf("****FAIL Returned Player = %d, expected = %d\n", returnedPlayer, expected); 
call    0 never executed
    #####:   52:            errors++;
        -:   53:        }  
        -:   54:#if (NOISY_TEST == 1)
        -:   55: 
        -:   56:        else{
        -:   57:            printf("PASS Returned Player = %d, expected = %d\n", returnedPlayer, expected);}  
        -:   58:#endif        
        -:   59:        //loop through the players. Once all of the players have had
        -:   60:        //a turn, whoseTurn() should loop around to the first player
       50:   61:        for(players=0; players < numPlayer; players++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
       40:   62:            endTurn(&G); //end current players turn and change players
call    0 returned 100%
       40:   63:            returnedPlayer = whoseTurn(&G);
call    0 returned 100%
       40:   64:            if(players < numPlayer - 1){
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
       30:   65:                expected= expected + 1; 
        -:   66:    //        printf("returnedPlayer after endTurn is %d\n", returnedPlayer);
        -:   67:            }
        -:   68:            else{  //whoseTurn should loop back to 0
       10:   69:              expected = 0;    
        -:   70:            }
       40:   71:            if(returnedPlayer != expected){//check if score is correct
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   72:                printf("****FAIL Returned Player after endTurn = %d, expected = %d\n", returnedPlayer, expected); 
call    0 never executed
    #####:   73:                errors++;
        -:   74:            }  
        -:   75:
        -:   76:#if (NOISY_TEST == 1)
        -:   77:     
        -:   78:            else{
        -:   79:                printf("PASS Returned Player after endTurn = %d, expected = %d\n", returnedPlayer, expected);} 
        -:   80:#endif
        -:   81:        }
        -:   82:    
        -:   83:    }
        -:   84:    
        1:   85:    if(errors == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   86:     printf("ALL TESTS PASS for whoseTurn().\n");   
call    0 returned 100%
        -:   87:    }
        -:   88:    else{
    #####:   89:     printf("FAIL: There are %d errors in whoseTurn.\n", errors);   
call    0 never executed
        -:   90:    }
        -:   91:    
        1:   92: return 0;   
        -:   93:}
