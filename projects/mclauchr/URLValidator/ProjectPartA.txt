Final Project, Part A

Team Members: Kayla Vondy, Christopher McLaughlin, Lisa Scheibner

For Part A, You will be provided a correctly working version of URL Validator.
Go through instructor video of explaining URL Validation testing. 


Explain the testIsValid Function of UrlValidator test code. It is available under aburasali/UrlValidator folder. 

The testIsValid function called from main accepts zero parameters.  Once called, testIsValid makes calls to two additional sub functions:

Void testIsValid(Object[] testObjects, long options);

This version of testIsValid is passed the object testUrlParts, which contains all test elements belonging to each subsection: scheme, authority, 
port, path, and query.  A long variable (“options”) is also passed into the testIsValid function.

Upon receiving the variables, testIsValid first asserts that a commonly known to be true URL is in fact valid. “http://www.google.com.”  Then, 
testIsValid uses a do-while loop to iterate through all possible testPartsIndex configurations to generate test URLs.  A URL consisting of a scheme,
authority, port, path, and query selected by the testPartsIndex setup is used to build the URL string and determine the expected validity outcome to 
be used as a comparison to isValid(url) (see response to the question below about URL building).  Once a URL has been tested/verified, a call to 
incrementTestPartsIndex is used to formulate the next testPartsIndex configuration.  This process will continue within the do While loop until all 
configurations have been used.

setUp();

The setUp function is called to reset testPartsIndex to its’ default {0, 0, 0, 0, 0}.


Give how many total number of URLs it is testing. 

testIsValid is testing  35,910 URLs.

This is because testUrlScheme has 9 options, testUrlAuthority has 19, testUrlPort has 7, testPath has 10, and testUrlQuery has 3 and 9 * 19 * 7 * 10 * 3 = 35,910.


Also, explain how it is building all the URLs. 

Each URL is built from the following:
Scheme
Authority
Port
Path
Query

Test elements belonging to each subsection are stored in their own ResultPair array, which contain a string and boolean value for each individual element.  
The testIsValid function accepts a testObjects parameter which contains all ResultPair arrays to be used for testing.  The testIsValid function uses a for loop
to build a URL by selecting a test element from each subsection and appending them to a testBuffer (which is later converted to the string - “url”).  The use 
of the “bitwise AND” logical operator is also used within the for loop to determine the overall expected boolean outcome of the URL.  In more detail, as each 
test element from each subsections is added, the boolean portion of each element is combined into the cumulative boolean variable “expected” by an AND operator.
Thus, all test elements must be true for the cumulative outcome to be true; if one or more test elements used to generate the URL are false, the overall expected 
result will be false.  Once the comparison has been made between the results of the test for a specific URL with it’s expected result, the incrementTestPartsIndex 
function is called to bulid the next test URL.  The function In summary, a URL is built from predetermined subsections which contain test elements which contain a 
string and a boolean value.  When building a URL, each test element’s boolean value is used to determine the overall expected validity of that specific URL to be 
used in a later comparison.     

 

Give an example of valid url being tested and an invalid URL being tested by testIsValid() method. 

One valid URL being tested is: http://go.cc:65535/t123?action=view

One possible invalid URL is: ftp://256.256.256.256/test1/ 

This is because the second URL has an invalid part in testUrlAuthority


UrlValidator code is a direct copy paste of apache commons url validator code. The test file/code is also direct copy paste of apache commons test code. Do you think 
that a real world test (URL Validator's testIsValid() test in this case) is very different than the unit tests and card tests that we wrote (in terms of concepts & 
complexity)? Explain in few lines. 

This test code is definitely a lot more detailed than the test code that we wrote. It seems that Apache tried to consider every single combination of URL that the 
validator might encounter and include some example of that in order to make sure their software functions correctly. It also goes a step further to test all of these
 different URL parts in combination with each other because, perhaps, different combinations of these URL parts could cause problems.