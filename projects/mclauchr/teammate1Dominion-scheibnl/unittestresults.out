************************************
* Running Unit Test 1...           *
************************************
*****TEST: initializeGame() - BEGIN*****

SubTest 0:
ST0 - Caught not enough players error: PASS
ST0 - Caught too many players error: PASS

Running initializeGame() for 2 Players: 
Function returned with 0: PASS
SubTest 1:
ST1 - Number of Players: PASS
SubTest 2:
ST2 - # Curse Cards: PASS
ST2 - # Estate Cards: PASS
ST2 - # Duchy Cards: PASS
ST2 - # Province Cards: PASS
ST2 - # Copper Cards: PASS
ST2 - # Silver Cards: PASS
ST2 - # Gold Cards: PASS
SubTest 3:
ST3 - First Players Turn: PASS
ST3 - First Players numActions = 1: PASS
ST3 - First Players numBuys = 1: PASS
ST3 - First Players playedCardCount = 0: PASS
SubTest 4:
ST4 - First Player has Drawn 5 Cards: PASS
ST4 - Other Player has Drawn 0 Cards: PASS

Running initializeGame() for 3 Players: 
Function returned with 0: PASS
SubTest 1:
ST1 - Number of Players: PASS
SubTest 2:
ST2 - # Curse Cards: PASS
ST2 - # Estate Cards: PASS
ST2 - # Duchy Cards: PASS
ST2 - # Province Cards: PASS
ST2 - # Copper Cards: PASS
ST2 - # Silver Cards: PASS
ST2 - # Gold Cards: PASS
SubTest 3:
ST3 - First Players Turn: PASS
ST3 - First Players numActions = 1: PASS
ST3 - First Players numBuys = 1: PASS
ST3 - First Players playedCardCount = 0: PASS
SubTest 4:
ST4 - First Player has Drawn 5 Cards: PASS
ST4 - Other Player has Drawn 0 Cards: PASS
ST4 - Other Player has Drawn 0 Cards: PASS

Running initializeGame() for 4 Players: 
Function returned with 0: PASS
SubTest 1:
ST1 - Number of Players: PASS
SubTest 2:
ST2 - # Curse Cards: PASS
ST2 - # Estate Cards: PASS
ST2 - # Duchy Cards: PASS
ST2 - # Province Cards: PASS
ST2 - # Copper Cards: PASS
ST2 - # Silver Cards: PASS
ST2 - # Gold Cards: PASS
SubTest 3:
ST3 - First Players Turn: PASS
ST3 - First Players numActions = 1: PASS
ST3 - First Players numBuys = 1: PASS
ST3 - First Players playedCardCount = 0: PASS
SubTest 4:
ST4 - First Player has Drawn 5 Cards: PASS
ST4 - Other Player has Drawn 0 Cards: PASS
ST4 - Other Player has Drawn 0 Cards: PASS
ST4 - Other Player has Drawn 0 Cards: PASS

SubTest 5:
ST5 - Function Caught Same kCard Error: PASS

*****TEST: initializeGame() - END ******

File 'unittest1.c'
Lines executed:77.17% of 92
Branches executed:100.00% of 50
Taken at least once:56.00% of 50
Calls executed:65.57% of 61
Creating 'unittest1.c.gcov'

************************************
* Running Unit Test 2...           *
************************************
*****TEST: getCost() - BEGIN ***********

Test1: Curse Cost: PASS
Test1: Estate Cost: PASS
Test1: Duchy Cost: PASS
Test1: Province Cost: PASS
Test1: Copper Cost: PASS
Test1: Silver Cost: PASS
Test1: Gold Cost: PASS
Test1: Adventurer Cost: PASS
Test1: Council_room Cost: PASS
Test1: Feast Cost: PASS
Test1: Gardens Cost: PASS
Test1: Mine Cost: PASS
Test1: Remodel Cost: PASS
Test1: Smithy Cost: PASS
Test1: Village Cost: PASS
Test1: Baron Cost: PASS
Test1: Great_hall Cost: PASS
Test1: Minion Cost: PASS
Test1: Steward Cost: PASS
Test1: Tribute Cost: PASS
Test1: Ambassador Cost: PASS
Test1: Cutpurse Cost: PASS
Test1: Embargo Cost: PASS
Test1: Outpost Cost: PASS
Test1: Salvager Cost: PASS
Test1: Sea_hag Cost: PASS
Test1: Treasure_map Cost: PASS

Test2: Catch Card Number TOO LOW: PASS
Test2: Catch Card Number TOO HIGH: PASS

*****TEST: getCost() - END *************

File 'unittest2.c'
Lines executed:76.80% of 125
Branches executed:100.00% of 114
Taken at least once:74.56% of 114
Calls executed:54.69% of 64
Creating 'unittest2.c.gcov'

************************************
* Running Unit Test 3...           *
************************************
*****TEST: updateCoins() - BEGIN *******

TEST1: Copper Incremented Correctly: PASS
TEST1: Silver Incremented Correctly: PASS
TEST1: Gold Incremented Correctly: PASS
TEST2: Variety of Coins Incremented Correctly: PASS
TEST3: Bonus Applied Correctly: PASS

*****TEST: updateCoins() - END *********

File 'unittest3.c'
Lines executed:92.19% of 64
Branches executed:100.00% of 24
Taken at least once:79.17% of 24
Calls executed:75.00% of 20
Creating 'unittest3.c.gcov'

************************************
* Running Unit Test 4...           *
************************************
*****TEST: isGameOver() - BEGIN ********

*****TEST: updateCoins() - BEGIN *******

Test1: Provinces Exists, Game Continues: PASS
Test1: Zero Provinces, Game Ends: PASS
Test2: Two Supply piles empty, Game Continues: PASS
Test2: Three Supply piles empty, Game Ends: PASS

*****TEST: isGameOver() - END **********

File 'unittest4.c'
Lines executed:87.50% of 32
Branches executed:100.00% of 8
Taken at least once:50.00% of 8
Calls executed:76.47% of 17
Creating 'unittest4.c.gcov'

************************************
* Running Card Test 1...           *
************************************
SMITHY!!!
*****TEST: cardtest1() - BEGIN *********

Test1: Appropriate Cards Add/Subtract (+3 - 1 = +2) Total: FAIL
Expected: 7, Test: 8
Test2: Cards Drawn/Discarded to and from Appropriate Pile: PASS
Test2: Other Players Discard Pile NOT Affected: PASS
Test3: Card Effect for Smithy Returned Successfully: PASS

*****TEST: cardtest1() - END ***********

File 'cardtest1.c'
Lines executed:87.88% of 33
Branches executed:100.00% of 8
Taken at least once:50.00% of 8
Calls executed:73.33% of 15
Creating 'cardtest1.c.gcov'

************************************
* Running Card Test 2...           *
************************************
ADVENTURER!!!
*****TEST: cardtest2() - BEGIN *********

Test1: New Hand Count Should be +1: FAIL
Expected: 6, Tested: 7
Test2: Current Player has +2 Treasure Cards: PASS
Test3: Deck Changes Occurred Only in Current Players Deck: PASS
Test4: Card Effect for Adventurer Returned Successfully: PASS
Test5: Card Effect for Adventurer Returned Successfully when Deck Count = 0: PASS
*****TEST: cardtest2() - END ***********

File 'cardtest2.c'
Lines executed:80.39% of 51
Branches executed:100.00% of 28
Taken at least once:64.29% of 28
Calls executed:68.42% of 19
Creating 'cardtest2.c.gcov'

************************************
* Running Card Test 3...           *
************************************
GREAT_HALL!!!
*****TEST: cardtest3() - BEGIN *********

Test1: Players New Hand Count Should be Same(+1-1): PASS
Test1b: Current Players Deck Count Remains Unchanged: FAIL
Expected: 5, Tested: 4
Test2: Num Actions + 1: PASS
Test3: Other Players Deck Count Remains Unchanged: PASS
Test4: Card Effect for Great_Hall Returned Successfully: PASS
*****TEST: cardtest3() - END ***********

File 'cardtest3.c'
Lines executed:77.14% of 35
Branches executed:100.00% of 10
Taken at least once:50.00% of 10
Calls executed:57.89% of 19
Creating 'cardtest3.c.gcov'

************************************
* Running Card Test 4...           *
************************************
EMBARGO!!!
*****TEST: cardtest4() - BEGIN *********

Test1: +2 Coins Added to Player State: PASS
Test2: Card is trashed when discarded, deckCount - 1: FAIL
Expected: 4, Tested: 5
Test3: Embargo Token for Choice1 Increased: PASS
Test4: Other Players Deck Count Remains Unchanged: PASS
Test5: Card Effect for Embargo Returned Successfully: PASS
Test6: Caught Inappropriate Choice 1 Parameter: PASS

*****TEST: cardtest4() - END ***********

File 'cardtest4.c'
Lines executed:79.55% of 44
Branches executed:100.00% of 12
Taken at least once:50.00% of 12
Calls executed:62.50% of 24
Creating 'cardtest4.c.gcov'

************************************
* Dom Function Coverage...         *
************************************
Function 'updateCoins'
Lines executed:100.00% of 11
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'cardEffect'
Lines executed:11.56% of 173
Branches executed:17.99% of 139
Taken at least once:5.04% of 139
Calls executed:10.17% of 59

Function 'getCost'
Lines executed:100.00% of 30
Branches executed:100.00% of 28
Taken at least once:100.00% of 28
No calls

Function 'drawCard'
Lines executed:77.27% of 22
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:100.00% of 10
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 9
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:98.39% of 62
Branches executed:100.00% of 46
Taken at least once:95.65% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'tributeAction'
Lines executed:0.00% of 33
Branches executed:0.00% of 30
Taken at least once:0.00% of 30
Calls executed:0.00% of 3

Function 'sea_hagAction'
Lines executed:0.00% of 8
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
No calls

Function 'cutpurseAction'
Lines executed:0.00% of 13
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
Calls executed:0.00% of 3

Function 'smithyAction'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'adventurerAction'
Lines executed:80.00% of 15
Branches executed:66.67% of 12
Taken at least once:58.33% of 12
Calls executed:100.00% of 2

File 'dominion.c'
Lines executed:35.78% of 559
Branches executed:35.73% of 417
Taken at least once:29.50% of 417
Calls executed:18.95% of 95
Creating 'dominion.c.gcov'

************************************
* Dominion Coverage...             *
************************************
        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function adventurerAction called 2 returned 100% blocks executed 80%
        2:    8:int adventurerAction(int* drawntreasure, struct gameState* state, int* currentPlayer, int* cardDrawn, int temphand[], int* z) {
        8:    9:	while (*drawntreasure<2) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        4:   10:		if (state->deckCount[*currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2:   11:			shuffle(*currentPlayer, state);
call    0 returned 100%
        -:   12:		}
        4:   13:		drawCard(*currentPlayer, state);
call    0 returned 100%
        4:   14:		*cardDrawn = state->hand[*currentPlayer][state->handCount[*currentPlayer]-1];//top card of hand is most recently drawn card.
        4:   15:		if (*cardDrawn == copper || *cardDrawn == silver || *cardDrawn == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        4:   16:			(*drawntreasure)++;
        -:   17:		else {
    #####:   18:			temphand[*z] = *cardDrawn;
    #####:   19:			state->handCount[*currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:   20:			(*z)++;
        -:   21:		}
        -:   22:	}
        6:   23:	while ((*z) >= 0) {
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        2:   24:		state->discard[*currentPlayer][state->discardCount[*currentPlayer]++] = temphand[*z - 1]; // discard all cards in play that have been drawn
        2:   25:		*z = (*z) - 1;
        -:   26:	}
        2:   27:	return 0;
        -:   28:}
        -:   29:
function smithyAction called 1 returned 100% blocks executed 100%
        1:   30:int smithyAction(int* currentPlayer, struct gameState* state, int* handPos) {
        -:   31:	//+3 Cards
        -:   32:	int i;
        -:   33:
        5:   34:	for (i = 0; i <= 3; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:   35:	{
        4:   36:		drawCard(*currentPlayer, state);
call    0 returned 100%
        -:   37:	}
        -:   38:
        -:   39:	//discard card from hand
        1:   40:	discardCard(*handPos, *currentPlayer, state, 0);
call    0 returned 100%
        1:   41:	return 0;
        -:   42:}
        -:   43:
function cutpurseAction called 0 returned 0% blocks executed 0%
    #####:   44:int cutpurseAction(int* currentPlayer, struct gameState* state, int* handPos) {
    #####:   45:	updateCoins(*currentPlayer, state, 2);
call    0 never executed
        -:   46:
        -:   47:	int i;
        -:   48:	int j;
        -:   49:	int k;
        -:   50:
    #####:   51:	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:   52:	{
    #####:   53:		if (i == *currentPlayer)
branch  0 never executed
branch  1 never executed
        -:   54:		{
    #####:   55:			for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:   56:			{
    #####:   57:				if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:   58:				{
    #####:   59:					discardCard(j, i, state, 0);
call    0 never executed
    #####:   60:					break;
        -:   61:				}
    #####:   62:				if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:   63:				{
    #####:   64:					for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:   65:					{
        -:   66:						if (DEBUG)
        -:   67:							printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:   68:					}
    #####:   69:					break;
        -:   70:				}
        -:   71:			}
        -:   72:
        -:   73:		}
        -:   74:
        -:   75:	}
        -:   76:
        -:   77:	//discard played card from hand
    #####:   78:	discardCard(*handPos, *currentPlayer, state, 0);
call    0 never executed
        -:   79:
    #####:   80:	return 0;
        -:   81:}
        -:   82:
function sea_hagAction called 0 returned 0% blocks executed 0%
    #####:   83:int sea_hagAction(struct gameState* state, int* currentPlayer) {
        -:   84:	int i;
    #####:   85:	for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:   86:		if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:   87:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####:   88:			state->deckCount[i]--;
    #####:   89:			state->discardCount[i]++;
    #####:   90:			state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:   91:		}
        -:   92:	}
    #####:   93:	return 0;
        -:   94:}
        -:   95:
function tributeAction called 0 returned 0% blocks executed 0%
    #####:   96:int tributeAction(struct gameState* state, int* nextPlayer, int tributeRevealedCards[], int* currentPlayer) {
        -:   97:	int i;
        -:   98:
    #####:   99:	if ((state->discardCount[*nextPlayer] + state->deckCount[*nextPlayer]) <= 1) {
branch  0 never executed
branch  1 never executed
    #####:  100:		if (state->deckCount[*nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  101:			tributeRevealedCards[0] = state->deck[*nextPlayer][state->deckCount[*nextPlayer] - 1];
    #####:  102:			state->deckCount[*nextPlayer]--;
        -:  103:		}
    #####:  104:		else if (state->discardCount[*nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  105:			tributeRevealedCards[0] = state->discard[*nextPlayer][state->discardCount[*nextPlayer] - 1];
    #####:  106:			state->discardCount[*nextPlayer]--;
        -:  107:		}
        -:  108:		else {
        -:  109:			//No Card to Reveal
        -:  110:			if (DEBUG) {
        -:  111:				printf("No cards to reveal\n");
        -:  112:			}
        -:  113:		}
        -:  114:	}
        -:  115:	else {
    #####:  116:		if (state->deckCount[*nextPlayer] == 0) {
branch  0 never executed
branch  1 never executed
    #####:  117:			for (i = 0; i < state->discardCount[*nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  118:				state->deck[*nextPlayer][i] = state->discard[*nextPlayer][i];//Move to deck
    #####:  119:				state->deckCount[*nextPlayer]++;
    #####:  120:				state->discard[*nextPlayer][i] = -1;
    #####:  121:				state->discardCount[*nextPlayer]--;
        -:  122:			}
        -:  123:
    #####:  124:			shuffle(nextPlayer, state);//Shuffle the deck
call    0 never executed
        -:  125:		}
    #####:  126:		tributeRevealedCards[0] = state->deck[*nextPlayer][state->deckCount[*nextPlayer] - 1];
    #####:  127:		state->deck[*nextPlayer][state->deckCount[*nextPlayer]--] = -1;
    #####:  128:		state->deckCount[*nextPlayer]--;
    #####:  129:		tributeRevealedCards[1] = state->deck[*nextPlayer][state->deckCount[*nextPlayer] - 1];
    #####:  130:		state->deck[*nextPlayer][state->deckCount[*nextPlayer]--] = -1;
    #####:  131:		state->deckCount[*nextPlayer]--;
        -:  132:	}
        -:  133:
    #####:  134:	if (tributeRevealedCards[0] == tributeRevealedCards[1]) {//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  135:		state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  136:		state->playedCardCount++;
    #####:  137:		tributeRevealedCards[1] = -1;
        -:  138:	}
        -:  139:
    #####:  140:	for (i = 0; i <= 2; i++) {
branch  0 never executed
branch  1 never executed
    #####:  141:		if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == copper) {//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  142:			state->coins += 2;
        -:  143:		}
        -:  144:
    #####:  145:		else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) {//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  146:			drawCard(*currentPlayer, state);
call    0 never executed
    #####:  147:			drawCard(*currentPlayer, state);
call    0 never executed
        -:  148:		}
        -:  149:		else {//Action Card
    #####:  150:			state->numActions = state->numActions + 2;
        -:  151:		}
        -:  152:	}
        -:  153:
    #####:  154:	return 0;
        -:  155:}
        -:  156:
function compare called 435 returned 100% blocks executed 83%
      435:  157:int compare(const void* a, const void* b) {
      435:  158:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  159:    return 1;
      435:  160:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      116:  161:    return -1;
      319:  162:  return 0;
        -:  163:}
        -:  164:
function newGame called 0 returned 0% blocks executed 0%
    #####:  165:struct gameState* newGame() {
    #####:  166:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  167:  return g;
        -:  168:}
        -:  169:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:  170:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  171:		  int k8, int k9, int k10) {
    #####:  172:  int* k = malloc(10 * sizeof(int));
    #####:  173:  k[0] = k1;
    #####:  174:  k[1] = k2;
    #####:  175:  k[2] = k3;
    #####:  176:  k[3] = k4;
    #####:  177:  k[4] = k5;
    #####:  178:  k[5] = k6;
    #####:  179:  k[6] = k7;
    #####:  180:  k[7] = k8;
    #####:  181:  k[8] = k9;
    #####:  182:  k[9] = k10;
    #####:  183:  return k;
        -:  184:}
        -:  185:
function initializeGame called 14 returned 100% blocks executed 98%
       14:  186:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  187:		   struct gameState *state) {
        -:  188:
        -:  189:  int i;
        -:  190:  int j;
        -:  191:  int it;			
        -:  192:  //set up random number generator
       14:  193:  SelectStream(1);
call    0 returned 100%
       14:  194:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:  195:  
        -:  196:  //check number of players
       14:  197:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
        -:  198:    {
        2:  199:      return -1;
        -:  200:    }
        -:  201:
        -:  202:  //set number of players
       12:  203:  state->numPlayers = numPlayers;
        -:  204:
        -:  205:  //check selected kingdom cards are different
      122:  206:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  207:    {
     1220:  208:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  209:        {
     1110:  210:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:  211:	    {
        1:  212:	      return -1;
        -:  213:	    }
        -:  214:        }
        -:  215:    }
        -:  216:
        -:  217:
        -:  218:  //initialize supply
        -:  219:  ///////////////////////////////
        -:  220:
        -:  221:  //set number of Curse cards
       11:  222:  if (numPlayers == 2)
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
        -:  223:    {
        7:  224:      state->supplyCount[curse] = 10;
        -:  225:    }
        4:  226:  else if (numPlayers == 3)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  227:    {
        1:  228:      state->supplyCount[curse] = 20;
        -:  229:    }
        -:  230:  else
        -:  231:    {
        3:  232:      state->supplyCount[curse] = 30;
        -:  233:    }
        -:  234:
        -:  235:  //set number of Victory cards
       11:  236:  if (numPlayers == 2)
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
        -:  237:    {
        7:  238:      state->supplyCount[estate] = 8;
        7:  239:      state->supplyCount[duchy] = 8;
        7:  240:      state->supplyCount[province] = 8;
        -:  241:    }
        -:  242:  else
        -:  243:    {
        4:  244:      state->supplyCount[estate] = 12;
        4:  245:      state->supplyCount[duchy] = 12;
        4:  246:      state->supplyCount[province] = 12;
        -:  247:    }
        -:  248:
        -:  249:  //set number of Treasure cards
       11:  250:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       11:  251:  state->supplyCount[silver] = 40;
       11:  252:  state->supplyCount[gold] = 30;
        -:  253:
        -:  254:  //set number of Kingdom cards
      231:  255:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  256:    {
     1815:  257:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  258:	{
     1705:  259:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  260:	    {
        -:  261:	      //check if card is a 'Victory' Kingdom card
      110:  262:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  263:		{
       22:  264:		  if (numPlayers == 2){ 
branch  0 taken 64% (fallthrough)
branch  1 taken 36%
        7:  265:		    state->supplyCount[i] = 8; 
        -:  266:		  }
        4:  267:		  else{ state->supplyCount[i] = 12; }
        -:  268:		}
        -:  269:	      else
        -:  270:		{
       99:  271:		  state->supplyCount[i] = 10;
        -:  272:		}
      110:  273:	      break;
        -:  274:	    }
        -:  275:	  else    //card is not in the set choosen for the game
        -:  276:	    {
     1595:  277:	      state->supplyCount[i] = -1;
        -:  278:	    }
        -:  279:	}
        -:  280:
        -:  281:    }
        -:  282:
        -:  283:  ////////////////////////
        -:  284:  //supply intilization complete
        -:  285:
        -:  286:  //set player decks
       40:  287:  for (i = 0; i < numPlayers; i++)
branch  0 taken 73%
branch  1 taken 28% (fallthrough)
        -:  288:    {
       29:  289:      state->deckCount[i] = 0;
      116:  290:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  291:	{
       87:  292:	  state->deck[i][j] = estate;
       87:  293:	  state->deckCount[i]++;
        -:  294:	}
      232:  295:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  296:	{
      203:  297:	  state->deck[i][j] = copper;
      203:  298:	  state->deckCount[i]++;		
        -:  299:	}
        -:  300:    }
        -:  301:
        -:  302:  //shuffle player decks
       40:  303:  for (i = 0; i < numPlayers; i++)
branch  0 taken 73%
branch  1 taken 28% (fallthrough)
        -:  304:    {
       29:  305:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  306:	{
    #####:  307:	  return -1;
        -:  308:	}
        -:  309:    }
        -:  310:
        -:  311:  //draw player hands
       40:  312:  for (i = 0; i < numPlayers; i++)
branch  0 taken 73%
branch  1 taken 28% (fallthrough)
        -:  313:    {  
        -:  314:      //initialize hand size to zero
       29:  315:      state->handCount[i] = 0;
       29:  316:      state->discardCount[i] = 0;
        -:  317:      //draw 5 cards
        -:  318:      // for (j = 0; j < 5; j++)
        -:  319:      //	{
        -:  320:      //	  drawCard(i, state);
        -:  321:      //	}
        -:  322:    }
        -:  323:  
        -:  324:  //set embargo tokens to 0 for all supply piles
      308:  325:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  326:    {
      297:  327:      state->embargoTokens[i] = 0;
        -:  328:    }
        -:  329:
        -:  330:  //initialize first player's turn
       11:  331:  state->outpostPlayed = 0;
       11:  332:  state->phase = 0;
       11:  333:  state->numActions = 1;
       11:  334:  state->numBuys = 1;
       11:  335:  state->playedCardCount = 0;
       11:  336:  state->whoseTurn = 0;
       11:  337:  state->handCount[state->whoseTurn] = 0;
        -:  338:  //int it; move to top
        -:  339:
        -:  340:  //Moved draw cards to here, only drawing at the start of a turn
       66:  341:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       55:  342:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  343:  }
        -:  344:
       11:  345:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  346:
       11:  347:  return 0;
        -:  348:}
        -:  349:
function shuffle called 33 returned 100% blocks executed 100%
       33:  350:int shuffle(int player, struct gameState *state) {
        -:  351: 
        -:  352:
        -:  353:  int newDeck[MAX_DECK];
       33:  354:  int newDeckPos = 0;
        -:  355:  int card;
        -:  356:  int i;
        -:  357:
       33:  358:  if (state->deckCount[player] < 1)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        4:  359:    return -1;
       29:  360:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  361:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  362:
      348:  363:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      290:  364:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      290:  365:    newDeck[newDeckPos] = state->deck[player][card];
      290:  366:    newDeckPos++;
      987:  367:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      697:  368:      state->deck[player][i] = state->deck[player][i+1];
        -:  369:    }
      290:  370:    state->deckCount[player]--;
        -:  371:  }
      319:  372:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      290:  373:    state->deck[player][i] = newDeck[i];
      290:  374:    state->deckCount[player]++;
        -:  375:  }
        -:  376:
       29:  377:  return 0;
        -:  378:}
        -:  379:
function playCard called 0 returned 0% blocks executed 0%
    #####:  380:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  381:{	
        -:  382:  int card;
    #####:  383:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  384:
        -:  385:  //check if it is the right phase
    #####:  386:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  387:    {
    #####:  388:      return -1;
        -:  389:    }
        -:  390:	
        -:  391:  //check if player has enough actions
    #####:  392:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  393:    {
    #####:  394:      return -1;
        -:  395:    }
        -:  396:	
        -:  397:  //get card played
    #####:  398:  card = handCard(handPos, state);
call    0 never executed
        -:  399:	
        -:  400:  //check if selected card is an action
    #####:  401:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  402:    {
    #####:  403:      return -1;
        -:  404:    }
        -:  405:	
        -:  406:  //play card
    #####:  407:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  408:    {
    #####:  409:      return -1;
        -:  410:    }
        -:  411:	
        -:  412:  //reduce number of actions
    #####:  413:  state->numActions--;
        -:  414:
        -:  415:  //update coins (Treasure cards may be added with card draws)
    #####:  416:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  417:	
    #####:  418:  return 0;
        -:  419:}
        -:  420:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  421:int buyCard(int supplyPos, struct gameState *state) {
        -:  422:  int who;
        -:  423:  if (DEBUG){
        -:  424:    printf("Entering buyCard...\n");
        -:  425:  }
        -:  426:
        -:  427:  // I don't know what to do about the phase thing.
        -:  428:
    #####:  429:  who = state->whoseTurn;
        -:  430:
    #####:  431:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  432:    if (DEBUG)
        -:  433:      printf("You do not have any buys left\n");
    #####:  434:    return -1;
    #####:  435:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  436:    if (DEBUG)
        -:  437:      printf("There are not any of that type of card left\n");
    #####:  438:    return -1;
    #####:  439:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  440:    if (DEBUG) 
        -:  441:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  442:    return -1;
        -:  443:  } else {
    #####:  444:    state->phase=1;
        -:  445:    //state->supplyCount[supplyPos]--;
    #####:  446:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  447:  
    #####:  448:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  449:    state->numBuys--;
        -:  450:    if (DEBUG)
        -:  451:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  452:  }
        -:  453:
        -:  454:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  455:  //state->discardCount[who]++;
        -:  456:    
    #####:  457:  return 0;
        -:  458:}
        -:  459:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  460:int numHandCards(struct gameState *state) {
    #####:  461:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  462:}
        -:  463:
function handCard called 0 returned 0% blocks executed 0%
    #####:  464:int handCard(int handPos, struct gameState *state) {
    #####:  465:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  466:  return state->hand[currentPlayer][handPos];
        -:  467:}
        -:  468:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  469:int supplyCount(int card, struct gameState *state) {
    #####:  470:  return state->supplyCount[card];
        -:  471:}
        -:  472:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  473:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  474:  int i;
    #####:  475:  int count = 0;
        -:  476:
    #####:  477:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  478:    {
    #####:  479:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  480:    }
        -:  481:
    #####:  482:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  483:    {
    #####:  484:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  485:    }
        -:  486:
    #####:  487:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  488:    {
    #####:  489:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  490:    }
        -:  491:
    #####:  492:  return count;
        -:  493:}
        -:  494:
function whoseTurn called 6 returned 100% blocks executed 100%
        6:  495:int whoseTurn(struct gameState *state) {
        6:  496:  return state->whoseTurn;
        -:  497:}
        -:  498:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  499:int endTurn(struct gameState *state) {
        -:  500:  int k;
        -:  501:  int i;
    #####:  502:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  503:  
        -:  504:  //Discard hand
    #####:  505:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  506:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  507:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  508:  }
    #####:  509:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  510:    
        -:  511:  //Code for determining the player
    #####:  512:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  513:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  514:  }
        -:  515:  else{
    #####:  516:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  517:  }
        -:  518:
    #####:  519:  state->outpostPlayed = 0;
    #####:  520:  state->phase = 0;
    #####:  521:  state->numActions = 1;
    #####:  522:  state->coins = 0;
    #####:  523:  state->numBuys = 1;
    #####:  524:  state->playedCardCount = 0;
    #####:  525:  state->handCount[state->whoseTurn] = 0;
        -:  526:
        -:  527:  //int k; move to top
        -:  528:  //Next player draws hand
    #####:  529:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  530:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  531:  }
        -:  532:
        -:  533:  //Update money
    #####:  534:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  535:
    #####:  536:  return 0;
        -:  537:}
        -:  538:
function isGameOver called 4 returned 100% blocks executed 100%
        4:  539:int isGameOver(struct gameState *state) {
        -:  540:  int i;
        -:  541:  int j;
        -:  542:	
        -:  543:  //if stack of Province cards is empty, the game ends
        4:  544:  if (state->supplyCount[province] == 0)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  545:    {
        1:  546:      return 1;
        -:  547:    }
        -:  548:
        -:  549:  //if three supply pile are at 0, the game ends
        3:  550:  j = 0;
       78:  551:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  552:    {
       75:  553:      if (state->supplyCount[i] == 0)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  554:	{
        5:  555:	  j++;
        -:  556:	}
        -:  557:    }
        3:  558:  if ( j >= 3)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  559:    {
        1:  560:      return 1;
        -:  561:    }
        -:  562:
        2:  563:  return 0;
        -:  564:}
        -:  565:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  566:int scoreFor (int player, struct gameState *state) {
        -:  567:
        -:  568:  int i;
    #####:  569:  int score = 0;
        -:  570:  //score from hand
    #####:  571:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  572:    {
    #####:  573:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  574:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  575:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  576:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  577:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  578:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  579:    }
        -:  580:
        -:  581:  //score from discard
    #####:  582:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  583:    {
    #####:  584:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  585:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  586:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  587:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  588:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  589:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  590:    }
        -:  591:
        -:  592:  //score from deck
    #####:  593:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  594:    {
    #####:  595:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  596:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  597:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  598:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  599:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  600:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  601:    }
        -:  602:
    #####:  603:  return score;
        -:  604:}
        -:  605:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  606:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  607:  int i;	
        -:  608:  int j;
        -:  609:  int highScore;
        -:  610:  int currentPlayer;
        -:  611:
        -:  612:  //get score for each player
    #####:  613:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  614:    {
        -:  615:      //set unused player scores to -9999
    #####:  616:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  617:	{
    #####:  618:	  players[i] = -9999;
        -:  619:	}
        -:  620:      else
        -:  621:	{
    #####:  622:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  623:	}
        -:  624:    }
        -:  625:
        -:  626:  //find highest score
    #####:  627:  j = 0;
    #####:  628:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  629:    {
    #####:  630:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  631:	{
    #####:  632:	  j = i;
        -:  633:	}
        -:  634:    }
    #####:  635:  highScore = players[j];
        -:  636:
        -:  637:  //add 1 to players who had less turns
    #####:  638:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  639:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  640:    {
    #####:  641:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  642:	{
    #####:  643:	  players[i]++;
        -:  644:	}
        -:  645:    }
        -:  646:
        -:  647:  //find new highest score
    #####:  648:  j = 0;
    #####:  649:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  650:    {
    #####:  651:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  652:	{
    #####:  653:	  j = i;
        -:  654:	}
        -:  655:    }
    #####:  656:  highScore = players[j];
        -:  657:
        -:  658:  //set winners in array to 1 and rest to 0
    #####:  659:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  660:    {
    #####:  661:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  662:	{
    #####:  663:	  players[i] = 1;
        -:  664:	}
        -:  665:      else
        -:  666:	{
    #####:  667:	  players[i] = 0;
        -:  668:	}
        -:  669:    }
        -:  670:
    #####:  671:  return 0;
        -:  672:}
        -:  673:
function drawCard called 64 returned 100% blocks executed 85%
       64:  674:int drawCard(int player, struct gameState *state)
        -:  675:{	int count;
        -:  676:  int deckCounter;
       64:  677:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -:  678:    
        -:  679:    //Step 1 Shuffle the discard pile back into a deck
        -:  680:    int i;
        -:  681:    //Move discard to deck
        2:  682:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  683:      state->deck[player][i] = state->discard[player][i];
    #####:  684:      state->discard[player][i] = -1;
        -:  685:    }
        -:  686:
        2:  687:    state->deckCount[player] = state->discardCount[player];
        2:  688:    state->discardCount[player] = 0;//Reset discard
        -:  689:
        -:  690:    //Shufffle the deck
        2:  691:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  692:   
        -:  693:    if (DEBUG){//Debug statements
        -:  694:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  695:    }
        -:  696:    
        2:  697:    state->discardCount[player] = 0;
        -:  698:
        -:  699:    //Step 2 Draw Card
        2:  700:    count = state->handCount[player];//Get current player's hand count
        -:  701:    
        -:  702:    if (DEBUG){//Debug statements
        -:  703:      printf("Current hand count: %d\n", count);
        -:  704:    }
        -:  705:    
        2:  706:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  707:
        2:  708:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  709:      return -1;
        -:  710:
    #####:  711:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  712:    state->deckCount[player]--;
    #####:  713:    state->handCount[player]++;//Increment hand count
        -:  714:  }
        -:  715:
        -:  716:  else{
       62:  717:    int count = state->handCount[player];//Get current hand count for player
        -:  718:    int deckCounter;
        -:  719:    if (DEBUG){//Debug statements
        -:  720:      printf("Current hand count: %d\n", count);
        -:  721:    }
        -:  722:
       62:  723:    deckCounter = state->deckCount[player];//Create holder for the deck count
       62:  724:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       62:  725:    state->deckCount[player]--;
       62:  726:    state->handCount[player]++;//Increment hand count
        -:  727:  }
        -:  728:
       62:  729:  return 0;
        -:  730:}
        -:  731:
function getCost called 29 returned 100% blocks executed 100%
       29:  732:int getCost(int cardNumber)
        -:  733:{
       29:  734:  switch( cardNumber ) 
branch  0 taken 3%
branch  1 taken 3%
branch  2 taken 3%
branch  3 taken 3%
branch  4 taken 3%
branch  5 taken 3%
branch  6 taken 3%
branch  7 taken 3%
branch  8 taken 3%
branch  9 taken 3%
branch 10 taken 3%
branch 11 taken 3%
branch 12 taken 3%
branch 13 taken 3%
branch 14 taken 3%
branch 15 taken 3%
branch 16 taken 3%
branch 17 taken 3%
branch 18 taken 3%
branch 19 taken 3%
branch 20 taken 3%
branch 21 taken 3%
branch 22 taken 3%
branch 23 taken 3%
branch 24 taken 3%
branch 25 taken 3%
branch 26 taken 3%
branch 27 taken 7%
        -:  735:    {
        -:  736:    case curse:
        1:  737:      return 0;
        -:  738:    case estate:
        1:  739:      return 2;
        -:  740:    case duchy:
        1:  741:      return 5;
        -:  742:    case province:
        1:  743:      return 8;
        -:  744:    case copper:
        1:  745:      return 0;
        -:  746:    case silver:
        1:  747:      return 3;
        -:  748:    case gold:
        1:  749:      return 6;
        -:  750:    case adventurer:
        1:  751:      return 6;
        -:  752:    case council_room:
        1:  753:      return 5;
        -:  754:    case feast:
        1:  755:      return 4;
        -:  756:    case gardens:
        1:  757:      return 4;
        -:  758:    case mine:
        1:  759:      return 5;
        -:  760:    case remodel:
        1:  761:      return 4;
        -:  762:    case smithy:
        1:  763:      return 4;
        -:  764:    case village:
        1:  765:      return 3;
        -:  766:    case baron:
        1:  767:      return 4;
        -:  768:    case great_hall:
        1:  769:      return 3;
        -:  770:    case minion:
        1:  771:      return 5;
        -:  772:    case steward:
        1:  773:      return 3;
        -:  774:    case tribute:
        1:  775:      return 5;
        -:  776:    case ambassador:
        1:  777:      return 3;
        -:  778:    case cutpurse:
        1:  779:      return 4;
        -:  780:    case embargo: 
        1:  781:      return 2;
        -:  782:    case outpost:
        1:  783:      return 5;
        -:  784:    case salvager:
        1:  785:      return 4;
        -:  786:    case sea_hag:
        1:  787:      return 4;
        -:  788:    case treasure_map:
        1:  789:      return 4;
        -:  790:    }
        -:  791:	
        2:  792:  return -1;
        -:  793:}
        -:  794:
function cardEffect called 6 returned 100% blocks executed 7%
        6:  795:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  796:{
        -:  797:  int i;
        -:  798:  int j;
        -:  799:  int k;
        -:  800:  int x;
        -:  801:  int index;
        6:  802:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        6:  803:  int nextPlayer = currentPlayer + 1;
        -:  804:
        6:  805:  int tributeRevealedCards[2] = {-1, -1};
        -:  806:  int temphand[MAX_HAND];// moved above the if statement
        6:  807:  int drawntreasure=0;
        -:  808:  int cardDrawn;
        6:  809:  int z = 0;// this is the counter for the temp hand
        6:  810:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  811:    nextPlayer = 0;
        -:  812:  }
        -:  813:  
        -:  814:	
        -:  815:  //uses switch to select card and perform actions
        6:  816:  switch( card ) 
branch  0 taken 33%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 17%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 17%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 33%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  817:    {
        -:  818:    case adventurer:
        2:  819:		return adventurerAction(&drawntreasure, state, &currentPlayer, &cardDrawn, temphand, &z);
call    0 returned 100%
        -:  820:			
        -:  821:    case council_room:
        -:  822:      //+4 Cards
    #####:  823:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  824:	{
    #####:  825:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  826:	}
        -:  827:			
        -:  828:      //+1 Buy
    #####:  829:      state->numBuys++;
        -:  830:			
        -:  831:      //Each other player draws a card
    #####:  832:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  833:	{
    #####:  834:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  835:	    {
    #####:  836:	      drawCard(i, state);
call    0 never executed
        -:  837:	    }
        -:  838:	}
        -:  839:			
        -:  840:      //put played card in played card pile
    #####:  841:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  842:			
    #####:  843:      return 0;
        -:  844:			
        -:  845:    case feast:
        -:  846:		//gain card with cost up to 5
        -:  847:		//Backup hand
    #####:  848:		for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  849:			temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  850:			state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  851:		}
        -:  852:		//Backup hand
        -:  853:
        -:  854:		//Update Coins for Buy
    #####:  855:		updateCoins(currentPlayer, state, 5);
call    0 never executed
        -:  856:		int x;
    #####:  857:		x = 1;//Condition to loop on
    #####:  858:		while (x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  859:			if (supplyCount(choice1, state) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  860:				if (DEBUG)
        -:  861:					printf("None of that card left, sorry!\n");
        -:  862:
        -:  863:				if (DEBUG) {
        -:  864:					printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  865:				}
        -:  866:			}
    #####:  867:			else if (state->coins < getCost(choice1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  868:				printf("That card is too expensive!\n");
call    0 never executed
        -:  869:
        -:  870:				if (DEBUG) {
        -:  871:					printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  872:				}
        -:  873:			}
        -:  874:			else {
        -:  875:
        -:  876:				if (DEBUG) {
        -:  877:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  878:				}
        -:  879:
    #####:  880:				gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  881:				x = 0;//No more buying cards
        -:  882:
        -:  883:				if (DEBUG) {
        -:  884:					printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  885:				}
        -:  886:
        -:  887:			}
        -:  888:		}
        -:  889:
        -:  890:		//Reset Hand
    #####:  891:		for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  892:			state->hand[currentPlayer][i] = temphand[i];
    #####:  893:			temphand[i] = -1;
        -:  894:		}
        -:  895:		//Reset Hand
        -:  896:
    #####:  897:		return 0;
        -:  898:			
        -:  899:    case gardens:
    #####:  900:      return -1;
        -:  901:			
        -:  902:    case mine:
    #####:  903:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  904:
    #####:  905:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  906:	{
    #####:  907:	  return -1;
        -:  908:	}
        -:  909:		
    #####:  910:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  911:	{
    #####:  912:	  return -1;
        -:  913:	}
        -:  914:
    #####:  915:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  916:	{
    #####:  917:	  return -1;
        -:  918:	}
        -:  919:
    #####:  920:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  921:
        -:  922:      //discard card from hand
    #####:  923:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  924:
        -:  925:      //discard trashed card
    #####:  926:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  927:	{
    #####:  928:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  929:	    {
    #####:  930:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  931:	      break;
        -:  932:	    }
        -:  933:	}
        -:  934:			
    #####:  935:      return 0;
        -:  936:			
        -:  937:    case remodel:
    #####:  938:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  939:
    #####:  940:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  941:	{
    #####:  942:	  return -1;
        -:  943:	}
        -:  944:
    #####:  945:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  946:
        -:  947:      //discard card from hand
    #####:  948:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  949:
        -:  950:      //discard trashed card
    #####:  951:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  952:	{
    #####:  953:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  954:	    {
    #####:  955:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  956:	      break;
        -:  957:	    }
        -:  958:	}
        -:  959:
        -:  960:
    #####:  961:      return 0;
        -:  962:		
        -:  963:    case smithy:
        1:  964:		return smithyAction(&currentPlayer, state, &handPos);
call    0 returned 100%
        -:  965:		
        -:  966:    case village:
        -:  967:      //+1 Card
    #####:  968:      drawCard(currentPlayer, state);
call    0 never executed
        -:  969:			
        -:  970:      //+2 Actions
    #####:  971:      state->numActions = state->numActions + 2;
        -:  972:			
        -:  973:      //discard played card from hand
    #####:  974:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  975:      return 0;
        -:  976:		
        -:  977:    case baron:
    #####:  978:      state->numBuys++;//Increase buys by 1!
    #####:  979:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  980:	int p = 0;//Iterator for hand!
    #####:  981:	int card_not_discarded = 1;//Flag for discard set!
    #####:  982:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  983:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  984:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  985:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  986:	    state->discardCount[currentPlayer]++;
    #####:  987:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  988:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  989:	    }
    #####:  990:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  991:	    state->handCount[currentPlayer]--;
    #####:  992:	    card_not_discarded = 0;//Exit the loop
        -:  993:	  }
    #####:  994:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  995:	    if(DEBUG) {
        -:  996:	      printf("No estate cards in your hand, invalid choice\n");
        -:  997:	      printf("Must gain an estate if there are any\n");
        -:  998:	    }
    #####:  999:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1000:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####: 1001:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1002:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1003:		isGameOver(state);
call    0 never executed
        -: 1004:	      }
        -: 1005:	    }
    #####: 1006:	    card_not_discarded = 0;//Exit the loop
        -: 1007:	  }
        -: 1008:			    
        -: 1009:	  else{
    #####: 1010:	    p++;//Next card
        -: 1011:	  }
        -: 1012:	}
        -: 1013:      }
        -: 1014:			    
        -: 1015:      else{
    #####: 1016:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1017:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1018:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1019:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1020:	    isGameOver(state);
call    0 never executed
        -: 1021:	  }
        -: 1022:	}
        -: 1023:      }
        -: 1024:	    
        -: 1025:      
    #####: 1026:      return 0;
        -: 1027:		
        -: 1028:    case great_hall:
        -: 1029:      //+1 Card
        1: 1030:      drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1031:			
        -: 1032:      //+1 Actions
        1: 1033:      state->numActions++;
        -: 1034:			
        -: 1035:      //discard card from hand
        1: 1036:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1: 1037:      return 0;
        -: 1038:		
        -: 1039:    case minion:
        -: 1040:      //+1 action
    #####: 1041:      state->numActions++;
        -: 1042:			
        -: 1043:      //discard card from hand
    #####: 1044:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1045:			
    #####: 1046:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1047:	{
    #####: 1048:	  state->coins = state->coins + 2;
        -: 1049:	}
        -: 1050:			
    #####: 1051:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1052:	{
        -: 1053:	  //discard hand
    #####: 1054:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1055:	    {
    #####: 1056:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1057:	    }
        -: 1058:				
        -: 1059:	  //draw 4
    #####: 1060:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1061:	    {
    #####: 1062:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1063:	    }
        -: 1064:				
        -: 1065:	  //other players discard hand and redraw if hand size > 4
    #####: 1066:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1067:	    {
    #####: 1068:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1069:		{
    #####: 1070:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1071:		    {
        -: 1072:		      //discard hand
    #####: 1073:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1074:			{
    #####: 1075:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1076:			}
        -: 1077:							
        -: 1078:		      //draw 4
    #####: 1079:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1080:			{
    #####: 1081:			  drawCard(i, state);
call    0 never executed
        -: 1082:			}
        -: 1083:		    }
        -: 1084:		}
        -: 1085:	    }
        -: 1086:				
        -: 1087:	}
    #####: 1088:      return 0;
        -: 1089:		
        -: 1090:    case steward:
    #####: 1091:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1092:	{
        -: 1093:	  //+2 cards
    #####: 1094:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1095:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1096:	}
    #####: 1097:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1098:	{
        -: 1099:	  //+2 coins
    #####: 1100:	  state->coins = state->coins + 2;
        -: 1101:	}
        -: 1102:      else
        -: 1103:	{
        -: 1104:	  //trash 2 cards in hand
    #####: 1105:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1106:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1107:	}
        -: 1108:			
        -: 1109:      //discard card from hand
    #####: 1110:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1111:      return 0;
        -: 1112:		
        -: 1113:    case tribute:
    #####: 1114:		return tributeAction(state, &nextPlayer, tributeRevealedCards, &currentPlayer);
call    0 never executed
        -: 1115:		
        -: 1116:    case ambassador:
    #####: 1117:      j = 0;		//used to check if player has enough cards to discard
        -: 1118:
    #####: 1119:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1120:	{
    #####: 1121:	  return -1;				
        -: 1122:	}
        -: 1123:
    #####: 1124:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1125:	{
    #####: 1126:	  return -1;
        -: 1127:	}
        -: 1128:
    #####: 1129:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1130:	{
    #####: 1131:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1132:	    {
    #####: 1133:	      j++;
        -: 1134:	    }
        -: 1135:	}
    #####: 1136:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1137:	{
    #####: 1138:	  return -1;				
        -: 1139:	}
        -: 1140:
        -: 1141:      if (DEBUG) 
        -: 1142:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1143:
        -: 1144:      //increase supply count for choosen card by amount being discarded
    #####: 1145:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1146:			
        -: 1147:      //each other player gains a copy of revealed card
    #####: 1148:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1149:	{
    #####: 1150:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1151:	    {
    #####: 1152:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1153:	    }
        -: 1154:	}
        -: 1155:
        -: 1156:      //discard played card from hand
    #####: 1157:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1158:
        -: 1159:      //trash copies of cards returned to supply
    #####: 1160:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1161:	{
    #####: 1162:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1163:	    {
    #####: 1164:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1165:		{
    #####: 1166:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1167:		  break;
        -: 1168:		}
        -: 1169:	    }
        -: 1170:	}			
        -: 1171:
    #####: 1172:      return 0;
        -: 1173:		
        -: 1174:    case cutpurse:
        -: 1175:
    #####: 1176:		return cutpurseAction(&currentPlayer, state, &handPos);
call    0 never executed
        -: 1177:
        -: 1178:		
        -: 1179:    case embargo: 
        -: 1180:      //+2 Coins
        2: 1181:      state->coins = state->coins + 2;
        -: 1182:			
        -: 1183:      //see if selected pile is in play
        2: 1184:      if ( state->supplyCount[choice1] == -1 )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1185:	{
        1: 1186:	  return -1;
        -: 1187:	}
        -: 1188:			
        -: 1189:      //add embargo token to selected supply pile
        1: 1190:      state->embargoTokens[choice1]++;
        -: 1191:			
        -: 1192:      //trash card
        1: 1193:      discardCard(handPos, currentPlayer, state, 1);		
call    0 returned 100%
        1: 1194:      return 0;
        -: 1195:		
        -: 1196:    case outpost:
        -: 1197:      //set outpost flag
    #####: 1198:      state->outpostPlayed++;
        -: 1199:			
        -: 1200:      //discard card
    #####: 1201:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1202:      return 0;
        -: 1203:		
        -: 1204:    case salvager:
        -: 1205:      //+1 buy
    #####: 1206:      state->numBuys++;
        -: 1207:			
    #####: 1208:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1209:	{
        -: 1210:	  //gain coins equal to trashed card
    #####: 1211:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1212:	  //trash card
    #####: 1213:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1214:	}
        -: 1215:			
        -: 1216:      //discard card
    #####: 1217:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1218:      return 0;
        -: 1219:		
        -: 1220:    case sea_hag:
    #####: 1221:		return sea_hagAction(state, &currentPlayer);
call    0 never executed
        -: 1222:		
        -: 1223:    case treasure_map:
        -: 1224:      //search hand for another treasure_map
    #####: 1225:      index = -1;
    #####: 1226:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1227:	{
    #####: 1228:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1229:	    {
    #####: 1230:	      index = i;
    #####: 1231:	      break;
        -: 1232:	    }
        -: 1233:	}
    #####: 1234:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1235:	{
        -: 1236:	  //trash both treasure cards
    #####: 1237:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1238:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1239:
        -: 1240:	  //gain 4 Gold cards
    #####: 1241:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1242:	    {
    #####: 1243:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1244:	    }
        -: 1245:				
        -: 1246:	  //return success
    #####: 1247:	  return 1;
        -: 1248:	}
        -: 1249:			
        -: 1250:      //no second treasure_map found in hand
    #####: 1251:      return -1;
        -: 1252:    }
        -: 1253:	
    #####: 1254:  return -1;
        -: 1255:}
        -: 1256:
function discardCard called 3 returned 100% blocks executed 78%
        3: 1257:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1258:{
        -: 1259:	
        -: 1260:  //if card is not trashed, added to Played pile 
        3: 1261:  if (trashFlag < 1)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -: 1262:    {
        -: 1263:      //add card to played pile
        2: 1264:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1265:      state->playedCardCount++;
        -: 1266:    }
        -: 1267:	
        -: 1268:  //set played card to -1
        3: 1269:  state->hand[currentPlayer][handPos] = -1;
        -: 1270:	
        -: 1271:  //remove card from player's hand
        3: 1272:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1273:    {
        -: 1274:      //reduce number of cards in hand
    #####: 1275:      state->handCount[currentPlayer]--;
        -: 1276:    }
        3: 1277:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1278:    {
        -: 1279:      //reduce number of cards in hand
    #####: 1280:      state->handCount[currentPlayer]--;
        -: 1281:    }
        -: 1282:  else 	
        -: 1283:    {
        -: 1284:      //replace discarded card with last card in hand
        3: 1285:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1286:      //set last card to -1
        3: 1287:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1288:      //reduce number of cards in hand
        3: 1289:      state->handCount[currentPlayer]--;
        -: 1290:    }
        -: 1291:	
        3: 1292:  return 0;
        -: 1293:}
        -: 1294:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1295:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1296:{
        -: 1297:  //Note: supplyPos is enum of choosen card
        -: 1298:	
        -: 1299:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1300:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1301:    {
    #####: 1302:      return -1;
        -: 1303:    }
        -: 1304:	
        -: 1305:  //added card for [whoseTurn] current player:
        -: 1306:  // toFlag = 0 : add to discard
        -: 1307:  // toFlag = 1 : add to deck
        -: 1308:  // toFlag = 2 : add to hand
        -: 1309:
    #####: 1310:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1311:    {
    #####: 1312:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1313:      state->deckCount[player]++;
        -: 1314:    }
    #####: 1315:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1316:    {
    #####: 1317:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1318:      state->handCount[player]++;
        -: 1319:    }
        -: 1320:  else
        -: 1321:    {
    #####: 1322:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1323:      state->discardCount[player]++;
        -: 1324:    }
        -: 1325:	
        -: 1326:  //decrease number in supply pile
    #####: 1327:  state->supplyCount[supplyPos]--;
        -: 1328:	 
    #####: 1329:  return 0;
        -: 1330:}
        -: 1331:
function updateCoins called 17 returned 100% blocks executed 100%
       17: 1332:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1333:{
        -: 1334:  int i;
        -: 1335:	
        -: 1336:  //reset coin count
       17: 1337:  state->coins = 0;
        -: 1338:
        -: 1339:  //add coins for each Treasure card in player's hand
      112: 1340:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 85%
branch  1 taken 15% (fallthrough)
        -: 1341:    {
       95: 1342:      if (state->hand[player][i] == copper)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -: 1343:	{
       64: 1344:	  state->coins += 1;
        -: 1345:	}
       31: 1346:      else if (state->hand[player][i] == silver)
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
        -: 1347:	{
       10: 1348:	  state->coins += 2;
        -: 1349:	}
       21: 1350:      else if (state->hand[player][i] == gold)
branch  0 taken 48% (fallthrough)
branch  1 taken 52%
        -: 1351:	{
       10: 1352:	  state->coins += 3;
        -: 1353:	}	
        -: 1354:    }	
        -: 1355:
        -: 1356:  //add bonus
       17: 1357:  state->coins += bonus;
        -: 1358:
       17: 1359:  return 0;
        -: 1360:}
        -: 1361:
        -: 1362:
        -: 1363://end of dominion.c
        -: 1364:
