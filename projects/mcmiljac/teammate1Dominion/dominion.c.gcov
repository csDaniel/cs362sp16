        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:6
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
     2075:    8:int compare(const void* a, const void* b) {
     2075:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
     2075:   11:  if (*(int*)a < *(int*)b)
      552:   12:    return -1;
     1523:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       53:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       53:   44:  SelectStream(1);
       53:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       53:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       53:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      583:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     5830:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     5300:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       53:   73:  if (numPlayers == 2)
        -:   74:    {
       32:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       21:   77:  else if (numPlayers == 3)
        -:   78:    {
       10:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
       11:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       53:   87:  if (numPlayers == 2)
        -:   88:    {
       32:   89:      state->supplyCount[estate] = 8;
       32:   90:      state->supplyCount[duchy] = 8;
       32:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       21:   95:      state->supplyCount[estate] = 12;
       21:   96:      state->supplyCount[duchy] = 12;
       21:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       53:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       53:  102:  state->supplyCount[silver] = 40;
       53:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     1113:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     8745:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     8215:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      530:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
      212:  115:		  if (numPlayers == 2){ 
       64:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
       42:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      424:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      530:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     7685:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      191:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
      138:  140:      state->deckCount[i] = 0;
      552:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      414:  143:	  state->deck[i][j] = estate;
      414:  144:	  state->deckCount[i]++;
        -:  145:	}
     1104:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      966:  148:	  state->deck[i][j] = copper;
      966:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      191:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
      138:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      191:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      138:  166:      state->handCount[i] = 0;
      138:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     1484:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     1431:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       53:  182:  state->outpostPlayed = 0;
       53:  183:  state->phase = 0;
       53:  184:  state->numActions = 1;
       53:  185:  state->numBuys = 1;
       53:  186:  state->playedCardCount = 0;
       53:  187:  state->whoseTurn = 0;
       53:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      318:  192:  for (it = 0; it < 5; it++){
      265:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       53:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       53:  198:  return 0;
        -:  199:}
        -:  200:
      139:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      139:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      139:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
      139:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     1663:  214:  while (state->deckCount[player] > 0) {
     1385:  215:    card = floor(Random() * state->deckCount[player]);
     1385:  216:    newDeck[newDeckPos] = state->deck[player][card];
     1385:  217:    newDeckPos++;
     4447:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
     3062:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     1385:  221:    state->deckCount[player]--;
        -:  222:  }
     1524:  223:  for (i = 0; i < newDeckPos; i++) {
     1385:  224:    state->deck[player][i] = newDeck[i];
     1385:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      139:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        5:  315:int handCard(int handPos, struct gameState *state) {
        5:  316:  int currentPlayer = whoseTurn(state);
        5:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
       30:  320:int supplyCount(int card, struct gameState *state) {
       30:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
       27:  346:int whoseTurn(struct gameState *state) {
       27:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
      289:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      289:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
        6:  533:    for (i = 0; i < state->discardCount[player];i++){
        5:  534:      state->deck[player][i] = state->discard[player][i];
        5:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        1:  538:    state->deckCount[player] = state->discardCount[player];
        1:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        1:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        1:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        1:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        1:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        1:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
        1:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        1:  563:    state->deckCount[player]--;
        1:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      288:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      288:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      288:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      288:  576:    state->deckCount[player]--;
      288:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      289:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
    #####:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
    #####:  660:  int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:      adventurerEffect(drawntreasure, state, currentPlayer, cardDrawn=0, z, temphand);
    #####:  671:      return 0;
        -:  672:			
        -:  673:    case council_room:
        -:  674:      //+4 Cards
    #####:  675:      for (i = 0; i < 4; i++)
        -:  676:	{
    #####:  677:	  drawCard(currentPlayer, state);
        -:  678:	}
        -:  679:			
        -:  680:      //+1 Buy
    #####:  681:      state->numBuys++;
        -:  682:			
        -:  683:      //Each other player draws a card
    #####:  684:      for (i = 0; i < state->numPlayers; i++)
        -:  685:	{
    #####:  686:	  if ( i != currentPlayer )
        -:  687:	    {
    #####:  688:	      drawCard(i, state);
        -:  689:	    }
        -:  690:	}
        -:  691:			
        -:  692:      //put played card in played card pile
    #####:  693:      discardCard(handPos, currentPlayer, state, 0);
        -:  694:			
    #####:  695:      return 0;
        -:  696:			
        -:  697:    case feast:
        -:  698:      //gain card with cost up to 5
        -:  699:      //Backup hand
    #####:  700:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  701:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  702:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  703:      }
        -:  704:      //Backup hand
        -:  705:
        -:  706:      //Update Coins for Buy
    #####:  707:      updateCoins(currentPlayer, state, 5);
    #####:  708:      x = 1;//Condition to loop on
    #####:  709:      while( x == 1) {//Buy one card
    #####:  710:	if (supplyCount(choice1, state) <= 0){
        -:  711:	  if (DEBUG)
        -:  712:	    printf("None of that card left, sorry!\n");
        -:  713:
        -:  714:	  if (DEBUG){
        -:  715:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  716:	  }
        -:  717:	}
    #####:  718:	else if (state->coins < getCost(choice1)){
    #####:  719:	  printf("That card is too expensive!\n");
        -:  720:
        -:  721:	  if (DEBUG){
        -:  722:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  723:	  }
        -:  724:	}
        -:  725:	else{
        -:  726:
        -:  727:	  if (DEBUG){
        -:  728:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  729:	  }
        -:  730:
    #####:  731:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  732:	  x = 0;//No more buying cards
        -:  733:
        -:  734:	  if (DEBUG){
        -:  735:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  736:	  }
        -:  737:
        -:  738:	}
        -:  739:      }     
        -:  740:
        -:  741:      //Reset Hand
    #####:  742:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  743:	state->hand[currentPlayer][i] = temphand[i];
    #####:  744:	temphand[i] = -1;
        -:  745:      }
        -:  746:      //Reset Hand
        -:  747:      			
    #####:  748:      return 0;
        -:  749:			
        -:  750:    case gardens:
    #####:  751:      return -1;
        -:  752:			
        -:  753:    case mine:
    #####:  754:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  755:
    #####:  756:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  757:	{
    #####:  758:	  return -1;
        -:  759:	}
        -:  760:		
    #####:  761:      if (choice2 > treasure_map || choice2 < curse)
        -:  762:	{
    #####:  763:	  return -1;
        -:  764:	}
        -:  765:
    #####:  766:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  767:	{
    #####:  768:	  return -1;
        -:  769:	}
        -:  770:
    #####:  771:      gainCard(choice2, state, 2, currentPlayer);
        -:  772:
        -:  773:      //discard card from hand
    #####:  774:      discardCard(handPos, currentPlayer, state, 0);
        -:  775:
        -:  776:      //discard trashed card
    #####:  777:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  778:	{
    #####:  779:	  if (state->hand[currentPlayer][i] == j)
        -:  780:	    {
    #####:  781:	      discardCard(i, currentPlayer, state, 0);			
    #####:  782:	      break;
        -:  783:	    }
        -:  784:	}
        -:  785:			
    #####:  786:      return 0;
        -:  787:			
        -:  788:    case remodel:
    #####:  789:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  790:
    #####:  791:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  792:	{
    #####:  793:	  return -1;
        -:  794:	}
        -:  795:
    #####:  796:      gainCard(choice2, state, 0, currentPlayer);
        -:  797:
        -:  798:      //discard card from hand
    #####:  799:      discardCard(handPos, currentPlayer, state, 0);
        -:  800:
        -:  801:      //discard trashed card
    #####:  802:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  803:	{
    #####:  804:	  if (state->hand[currentPlayer][i] == j)
        -:  805:	    {
    #####:  806:	      discardCard(i, currentPlayer, state, 0);			
    #####:  807:	      break;
        -:  808:	    }
        -:  809:	}
        -:  810:
        -:  811:
    #####:  812:      return 0;
        -:  813:		
        -:  814:    case smithy:
    #####:  815:      smithyEffect(currentPlayer, state, handPos, i=0);
    #####:  816:      return 0;
        -:  817:		
        -:  818:    case village:
        -:  819:      //+1 Card
    #####:  820:      drawCard(currentPlayer, state);
        -:  821:			
        -:  822:      //+2 Actions
    #####:  823:      state->numActions = state->numActions + 2;
        -:  824:			
        -:  825:      //discard played card from hand
    #####:  826:      discardCard(handPos, currentPlayer, state, 0);
    #####:  827:      return 0;
        -:  828:		
        -:  829:    case baron:
    #####:  830:      state->numBuys++;//Increase buys by 1!
    #####:  831:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  832:	int p = 0;//Iterator for hand!
    #####:  833:	int card_not_discarded = 1;//Flag for discard set!
    #####:  834:	while(card_not_discarded){
    #####:  835:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  836:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  837:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  838:	    state->discardCount[currentPlayer]++;
    #####:  839:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  840:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  841:	    }
    #####:  842:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  843:	    state->handCount[currentPlayer]--;
    #####:  844:	    card_not_discarded = 0;//Exit the loop
        -:  845:	  }
    #####:  846:	  else if (p > state->handCount[currentPlayer]){
        -:  847:	    if(DEBUG) {
        -:  848:	      printf("No estate cards in your hand, invalid choice\n");
        -:  849:	      printf("Must gain an estate if there are any\n");
        -:  850:	    }
    #####:  851:	    if (supplyCount(estate, state) > 0){
    #####:  852:	      gainCard(estate, state, 0, currentPlayer);
    #####:  853:	      state->supplyCount[estate]--;//Decrement estates
    #####:  854:	      if (supplyCount(estate, state) == 0){
    #####:  855:		isGameOver(state);
        -:  856:	      }
        -:  857:	    }
    #####:  858:	    card_not_discarded = 0;//Exit the loop
        -:  859:	  }
        -:  860:			    
        -:  861:	  else{
    #####:  862:	    p++;//Next card
        -:  863:	  }
        -:  864:	}
        -:  865:      }
        -:  866:			    
        -:  867:      else{
    #####:  868:	if (supplyCount(estate, state) > 0){
    #####:  869:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  870:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  871:	  if (supplyCount(estate, state) == 0){
    #####:  872:	    isGameOver(state);
        -:  873:	  }
        -:  874:	}
        -:  875:      }
        -:  876:	    
        -:  877:      
    #####:  878:      return 0;
        -:  879:		
        -:  880:    case great_hall:
        -:  881:      //+1 Card
    #####:  882:      drawCard(currentPlayer, state);
        -:  883:			
        -:  884:      //+1 Actions
    #####:  885:      state->numActions++;
        -:  886:			
        -:  887:      //discard card from hand
    #####:  888:      discardCard(handPos, currentPlayer, state, 0);
    #####:  889:      return 0;
        -:  890:		
        -:  891:    case minion:
    #####:  892:      minionEffect(state, handPos, currentPlayer, choice1, choice2, i=0, j=0);
    #####:  893:      return 0;
        -:  894:		
        -:  895:    case steward:
    #####:  896:      if (choice1 == 1)
        -:  897:	{
        -:  898:	  //+2 cards
    #####:  899:	  drawCard(currentPlayer, state);
    #####:  900:	  drawCard(currentPlayer, state);
        -:  901:	}
    #####:  902:      else if (choice1 == 2)
        -:  903:	{
        -:  904:	  //+2 coins
    #####:  905:	  state->coins = state->coins + 2;
        -:  906:	}
        -:  907:      else
        -:  908:	{
        -:  909:	  //trash 2 cards in hand
    #####:  910:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  911:	  discardCard(choice3, currentPlayer, state, 1);
        -:  912:	}
        -:  913:			
        -:  914:      //discard card from hand
    #####:  915:      discardCard(handPos, currentPlayer, state, 0);
    #####:  916:      return 0;
        -:  917:		
        -:  918:    case tribute:
    #####:  919:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  920:	if (state->deckCount[nextPlayer] > 0){
    #####:  921:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  922:	  state->deckCount[nextPlayer]--;
        -:  923:	}
    #####:  924:	else if (state->discardCount[nextPlayer] > 0){
    #####:  925:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  926:	  state->discardCount[nextPlayer]--;
        -:  927:	}
        -:  928:	else{
        -:  929:	  //No Card to Reveal
        -:  930:	  if (DEBUG){
        -:  931:	    printf("No cards to reveal\n");
        -:  932:	  }
        -:  933:	}
        -:  934:      }
        -:  935:	    
        -:  936:      else{
    #####:  937:	if (state->deckCount[nextPlayer] == 0){
    #####:  938:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  939:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  940:	    state->deckCount[nextPlayer]++;
    #####:  941:	    state->discard[nextPlayer][i] = -1;
    #####:  942:	    state->discardCount[nextPlayer]--;
        -:  943:	  }
        -:  944:			    
    #####:  945:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  946:	} 
    #####:  947:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  948:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  949:	state->deckCount[nextPlayer]--;
    #####:  950:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  951:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  952:	state->deckCount[nextPlayer]--;
        -:  953:      }    
        -:  954:		       
    #####:  955:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  956:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  957:	state->playedCardCount++;
    #####:  958:	tributeRevealedCards[1] = -1;
        -:  959:      }
        -:  960:
    #####:  961:      for (i = 0; i <= 2; i ++){
    #####:  962:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  963:	  state->coins += 2;
        -:  964:	}
        -:  965:		    
    #####:  966:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  967:	  drawCard(currentPlayer, state);
    #####:  968:	  drawCard(currentPlayer, state);
        -:  969:	}
        -:  970:	else{//Action Card
    #####:  971:	  state->numActions = state->numActions + 2;
        -:  972:	}
        -:  973:      }
        -:  974:	    
    #####:  975:      return 0;
        -:  976:		
        -:  977:    case ambassador:
    #####:  978:      j = 0;		//used to check if player has enough cards to discard
        -:  979:
    #####:  980:      if (choice2 > 2 || choice2 < 0)
        -:  981:	{
    #####:  982:	  return -1;				
        -:  983:	}
        -:  984:
    #####:  985:      if (choice1 == handPos)
        -:  986:	{
    #####:  987:	  return -1;
        -:  988:	}
        -:  989:
    #####:  990:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  991:	{
    #####:  992:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  993:	    {
    #####:  994:	      j++;
        -:  995:	    }
        -:  996:	}
    #####:  997:      if (j < choice2)
        -:  998:	{
    #####:  999:	  return -1;				
        -: 1000:	}
        -: 1001:
        -: 1002:      if (DEBUG) 
        -: 1003:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1004:
        -: 1005:      //increase supply count for choosen card by amount being discarded
    #####: 1006:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1007:			
        -: 1008:      //each other player gains a copy of revealed card
    #####: 1009:      for (i = 0; i < state->numPlayers; i++)
        -: 1010:	{
    #####: 1011:	  if (i != currentPlayer)
        -: 1012:	    {
    #####: 1013:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1014:	    }
        -: 1015:	}
        -: 1016:
        -: 1017:      //discard played card from hand
    #####: 1018:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1019:
        -: 1020:      //trash copies of cards returned to supply
    #####: 1021:      for (j = 0; j < choice2; j++)
        -: 1022:	{
    #####: 1023:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1024:	    {
    #####: 1025:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1026:		{
    #####: 1027:		  discardCard(i, currentPlayer, state, 1);
    #####: 1028:		  break;
        -: 1029:		}
        -: 1030:	    }
        -: 1031:	}			
        -: 1032:
    #####: 1033:      return 0;
        -: 1034:		
        -: 1035:    case cutpurse:
        -: 1036:
    #####: 1037:      updateCoins(currentPlayer, state, 2);
    #####: 1038:      for (i = 0; i < state->numPlayers; i++)
        -: 1039:	{
    #####: 1040:	  if (i != currentPlayer)
        -: 1041:	    {
    #####: 1042:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1043:		{
    #####: 1044:		  if (state->hand[i][j] == copper)
        -: 1045:		    {
    #####: 1046:		      discardCard(j, i, state, 0);
    #####: 1047:		      break;
        -: 1048:		    }
    #####: 1049:		  if (j == state->handCount[i])
        -: 1050:		    {
    #####: 1051:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1052:			{
        -: 1053:			  if (DEBUG)
        -: 1054:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1055:			}	
    #####: 1056:		      break;
        -: 1057:		    }		
        -: 1058:		}
        -: 1059:					
        -: 1060:	    }
        -: 1061:				
        -: 1062:	}				
        -: 1063:
        -: 1064:      //discard played card from hand
    #####: 1065:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1066:
    #####: 1067:      return 0;
        -: 1068:
        -: 1069:		
        -: 1070:    case embargo: 
        -: 1071:      //+2 Coins
    #####: 1072:      state->coins = state->coins + 2;
        -: 1073:			
        -: 1074:      //see if selected pile is in play
    #####: 1075:      if ( state->supplyCount[choice1] == -1 )
        -: 1076:	{
    #####: 1077:	  return -1;
        -: 1078:	}
        -: 1079:			
        -: 1080:      //add embargo token to selected supply pile
    #####: 1081:      state->embargoTokens[choice1]++;
        -: 1082:			
        -: 1083:      //trash card
    #####: 1084:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1085:      return 0;
        -: 1086:		
        -: 1087:    case outpost:
        -: 1088:      //set outpost flag
    #####: 1089:      state->outpostPlayed++;
        -: 1090:			
        -: 1091:      //discard card
    #####: 1092:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1093:      return 0;
        -: 1094:		
        -: 1095:    case salvager:
        -: 1096:      //+1 buy
    #####: 1097:      state->numBuys++;
        -: 1098:			
    #####: 1099:      if (choice1)
        -: 1100:	{
        -: 1101:	  //gain coins equal to trashed card
    #####: 1102:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1103:	  //trash card
    #####: 1104:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1105:	}
        -: 1106:			
        -: 1107:      //discard card
    #####: 1108:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1109:      return 0;
        -: 1110:		
        -: 1111:    case sea_hag:
    #####: 1112:      seahagEffect(state, currentPlayer, i=0);
    #####: 1113:      return 0;
        -: 1114:		
        -: 1115:    case treasure_map:
    #####: 1116:      return treasuremapEffect(index=0, state, currentPlayer, i=0, handPos);
        -: 1117:    }
        -: 1118:	
    #####: 1119:  return -1;
        -: 1120:}
        -: 1121:
       16: 1122:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1123:{
        -: 1124:	
        -: 1125:  //if card is not trashed, added to Played pile 
       16: 1126:  if (trashFlag < 1)
        -: 1127:    {
        -: 1128:      //add card to played pile
       11: 1129:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       11: 1130:      state->playedCardCount++;
        -: 1131:    }
        -: 1132:	
        -: 1133:  //set played card to -1
       16: 1134:  state->hand[currentPlayer][handPos] = -1;
        -: 1135:	
        -: 1136:  //remove card from player's hand
       16: 1137:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1138:    {
        -: 1139:      //reduce number of cards in hand
    #####: 1140:      state->handCount[currentPlayer]--;
        -: 1141:    }
       16: 1142:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1143:    {
        -: 1144:      //reduce number of cards in hand
    #####: 1145:      state->handCount[currentPlayer]--;
        -: 1146:    }
        -: 1147:  else 	
        -: 1148:    {
        -: 1149:      //replace discarded card with last card in hand
       16: 1150:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1151:      //set last card to -1
       16: 1152:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1153:      //reduce number of cards in hand
       16: 1154:      state->handCount[currentPlayer]--;
        -: 1155:    }
        -: 1156:	
       16: 1157:  return 0;
        -: 1158:}
        -: 1159:
       30: 1160:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1161:{
        -: 1162:  //Note: supplyPos is enum of choosen card
        -: 1163:	
        -: 1164:  //check if supply pile is empty (0) or card is not used in game (-1)
       30: 1165:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1166:    {
    #####: 1167:      return -1;
        -: 1168:    }
        -: 1169:	
        -: 1170:  //added card for [whoseTurn] current player:
        -: 1171:  // toFlag = 0 : add to discard
        -: 1172:  // toFlag = 1 : add to deck
        -: 1173:  // toFlag = 2 : add to hand
        -: 1174:
       30: 1175:  if (toFlag == 1)
        -: 1176:    {
       10: 1177:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       10: 1178:      state->deckCount[player]++;
        -: 1179:    }
       20: 1180:  else if (toFlag == 2)
        -: 1181:    {
       10: 1182:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       10: 1183:      state->handCount[player]++;
        -: 1184:    }
        -: 1185:  else
        -: 1186:    {
       10: 1187:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       10: 1188:      state->discardCount[player]++;
        -: 1189:    }
        -: 1190:	
        -: 1191:  //decrease number in supply pile
       30: 1192:  state->supplyCount[supplyPos]--;
        -: 1193:	 
       30: 1194:  return 0;
        -: 1195:}
        -: 1196:
       58: 1197:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1198:{
        -: 1199:  int i;
        -: 1200:	
        -: 1201:  //reset coin count
       58: 1202:  state->coins = 0;
        -: 1203:
        -: 1204:  //add coins for each Treasure card in player's hand
      363: 1205:  for (i = 0; i < state->handCount[player]; i++)
        -: 1206:    {
      305: 1207:      if (state->hand[player][i] == copper)
        -: 1208:	{
      237: 1209:	  state->coins += 1;
        -: 1210:	}
       68: 1211:      else if (state->hand[player][i] == silver)
        -: 1212:	{
        5: 1213:	  state->coins += 2;
        -: 1214:	}
       63: 1215:      else if (state->hand[player][i] == gold)
        -: 1216:	{
        5: 1217:	  state->coins += 3;
        -: 1218:	}	
        -: 1219:    }	
        -: 1220:
        -: 1221:  //add bonus
       58: 1222:  state->coins += bonus;
        -: 1223:
       58: 1224:  return 0;
        -: 1225:}
        -: 1226:
        -: 1227:
        -: 1228://end of dominion.c
        -: 1229:
        -: 1230:// Refactored code for selected cards
        -: 1231:// adventurer
        1: 1232:void adventurerEffect(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int z, int temphand[])
        -: 1233:{
        4: 1234:  while(drawntreasure<2)
        -: 1235:  {
        2: 1236:    if (state->deckCount[currentPlayer] <1)
        -: 1237:    {//if the deck is empty we need to shuffle discard and add to deck
    #####: 1238:      shuffle(currentPlayer, state);
        -: 1239:    }
        2: 1240:    drawCard(currentPlayer, state);
        2: 1241:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        2: 1242:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        2: 1243:      drawntreasure++;
        -: 1244:    else{
    #####: 1245:      temphand[z]=cardDrawn;
    #####: 1246:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1247:      z++;
        -: 1248:    }
        -: 1249:  }
        2: 1250:  while(z-1>=0){
    #####: 1251:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z]; // discard all cards in play that have been drawn
    #####: 1252:    z=z-1;
        -: 1253:  }
        1: 1254:}
        -: 1255:
        -: 1256:// smithy
        6: 1257:void smithyEffect(int currentPlayer, struct gameState *state, int handPos, int i)
        -: 1258:{
        -: 1259:  //+3 Cards
       24: 1260:      for (i = 0; i < 3; i++)
        -: 1261:  {
       18: 1262:    drawCard(currentPlayer, state);
        -: 1263:  }
        -: 1264:      
        -: 1265:  //discard card from hand
        6: 1266:  discardCard(handPos, currentPlayer, state, 0);
        6: 1267:}
        -: 1268:
        -: 1269:// treasure map
    #####: 1270:int treasuremapEffect(int index, struct gameState *state, int currentPlayer, int i, int handPos)
        -: 1271:{
        -: 1272:  //search hand for another treasure_map
    #####: 1273:      index = -1;
    #####: 1274:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1275:  {
    #####: 1276:    if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1277:      {
    #####: 1278:        index = i;
    #####: 1279:        break;
        -: 1280:      }
        -: 1281:  }
    #####: 1282:      if (index > -1)
        -: 1283:  {
        -: 1284:    //trash both treasure cards
    #####: 1285:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1286:    discardCard(index, currentPlayer, state, 1);
        -: 1287:
        -: 1288:    //gain 4 Gold cards
    #####: 1289:    for (i = 0; i < 4; i++)
        -: 1290:      {
    #####: 1291:        gainCard(gold, state, 1, currentPlayer);
        -: 1292:      }
        -: 1293:        
        -: 1294:    //return success
    #####: 1295:    return -1;
        -: 1296:  }
        -: 1297:      
        -: 1298:      //no second treasure_map found in hand
    #####: 1299:      return -1;
        -: 1300:}
        -: 1301:
        -: 1302:// sea hag
    #####: 1303:void seahagEffect(struct gameState *state, int currentPlayer, int i)
        -: 1304:{
    #####: 1305:  for (i = 0; i < state->numPlayers; i++){
    #####: 1306:    if (i == currentPlayer){
    #####: 1307:      state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1308:      state->deckCount[i]--;
    #####: 1309:      state->discardCount[i]++;
    #####: 1310:      state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1311:    }
        -: 1312:  }
    #####: 1313:}
        -: 1314:
        -: 1315:// minion
    #####: 1316:void minionEffect(struct gameState *state, int handPos, int currentPlayer, int choice1, int choice2, int i, int j)
        -: 1317:{
        -: 1318:  //+1 action
    #####: 1319:      state->numActions++;
        -: 1320:      
        -: 1321:      //discard card from hand
    #####: 1322:      discardCard(handPos, currentPlayer, state, 0);
        -: 1323:      
    #####: 1324:      if (choice1)    //+2 coins
        -: 1325:  {
    #####: 1326:    state->coins = state->coins + 1;
        -: 1327:  }
        -: 1328:      
    #####: 1329:      else if (choice2)   //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1330:  {
        -: 1331:    //discard hand
    #####: 1332:    while(numHandCards(state) > 0)
        -: 1333:      {
    #####: 1334:        discardCard(handPos, currentPlayer, state, 0);
        -: 1335:      }
        -: 1336:        
        -: 1337:    //draw 4
    #####: 1338:    for (i = 0; i < 4; i++)
        -: 1339:      {
    #####: 1340:        drawCard(currentPlayer, state);
        -: 1341:      }
        -: 1342:        
        -: 1343:    //other players discard hand and redraw if hand size > 4
    #####: 1344:    for (i = 0; i < state->numPlayers; i++)
        -: 1345:      {
    #####: 1346:        if (i != currentPlayer)
        -: 1347:    {
    #####: 1348:      if ( state->handCount[i] > 4 )
        -: 1349:        {
        -: 1350:          //discard hand
    #####: 1351:          while( state->handCount[i] > 0 )
        -: 1352:      {
    #####: 1353:        discardCard(handPos, i, state, 0);
        -: 1354:      }
        -: 1355:              
        -: 1356:          //draw 4
    #####: 1357:          for (j = 0; j < 4; j++)
        -: 1358:      {
    #####: 1359:        drawCard(i, state);
        -: 1360:      }
        -: 1361:        }
        -: 1362:    }
        -: 1363:      }
        -: 1364:        
        -: 1365:  }
    #####: 1366:}
