
File 'dominion.c'
Lines executed:32.29% of 672
dominion.c:creating 'dominion.c.gcov'


        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
       80:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       80:  280:  who = state->whoseTurn;
        -:  281:
       80:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
       20:  284:      printf("You do not have any buys left\n");
       20:  285:    return -1;
       60:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
       20:  288:      printf("There are not any of that type of card left\n");
       20:  289:    return -1;
       40:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
       20:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
       20:  293:    return -1;
        -:  294:  } else {
       20:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       20:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       20:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       20:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
       20:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       20:  308:  return 0;
       80:  309:}

        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       78:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
       26:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       52:  401:  j = 0;
     2704:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
     1300:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
      130:  406:	  j++;
      130:  407:	}
     1300:  408:    }
       52:  409:  if ( j >= 3)
        -:  410:    {
       26:  411:      return 1;
        -:  412:    }
        -:  413:
       26:  414:  return 0;
       78:  415:}

        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       26:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
      312:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      130:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      130:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
      130:  359:  }
       26:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       26:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
       13:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       13:  365:  }
        -:  366:  else{
       13:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       26:  370:  state->outpostPlayed = 0;
       26:  371:  state->phase = 0;
       26:  372:  state->numActions = 1;
       26:  373:  state->coins = 0;
       26:  374:  state->numBuys = 1;
       26:  375:  state->playedCardCount = 0;
       26:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      312:  380:  for (k = 0; k < 5; k++){
      130:  381:    drawCard(state->whoseTurn, state);//Draw a card
      130:  382:  }
        -:  383:
        -:  384:  //Update money
       26:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
       26:  387:  return 0;
        -:  388:}

        -: 1201:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1202:{
        -: 1203:  int i;
        -: 1204:	
        -: 1205:  //reset coin count
      147: 1206:  state->coins = 0;
        -: 1207:
        -: 1208:  //add coins for each Treasure card in player's hand
     1842: 1209:  for (i = 0; i < state->handCount[player]; i++)
        -: 1210:    {
      774: 1211:      if (state->hand[player][i] == copper)
        -: 1212:	{
      572: 1213:	  state->coins += 1;
      572: 1214:	}
      202: 1215:      else if (state->hand[player][i] == silver)
        -: 1216:	{
       13: 1217:	  state->coins += 2;
       13: 1218:	}
      189: 1219:      else if (state->hand[player][i] == gold)
        -: 1220:	{
       13: 1221:	  state->coins += 3;
       13: 1222:	}	
      774: 1223:    }	
        -: 1224:
        -: 1225:  //add bonus
      147: 1226:  state->coins += bonus;
        -: 1227:
      147: 1228:  return 0;
        -: 1229:}
File 'dominion.c'
Lines executed:35.86% of 672
dominion.c:creating 'dominion.c.gcov'

