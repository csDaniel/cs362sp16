
#### #### #### TEST OUTPUT #### #### ####

Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
--------------- UNIT TEST 1 ---------------
------------- BUY CARD TESTS --------------

TEST 1: Player 0 has no buys, buyCard returns -1
Entering buyCard...
You do not have any buys left
buyCard returned -1

TEST 2: Player 0 tries to draw card where none left
Entering buyCard...
There are not any of that type of card left
buyCard returned -1

TEST 3: Player 0 doesn't have enough coin to purchaseEntering buyCard...
You do not have enough money to buy that. You have 0 coins.
buyCard returned -1

TEST 4: Player 0 purchases adventurer card, +1 discardCountEntering buyCard...
You bought card number 7 for 6 coins. You now have 0 buys and 0 coins.
buyCard returned 0, discardCount: 1, expected: 1

TEST 5: Supply count for card 0 decremented by 1
Supply count for adventurer: 9, expected 9

TEST 6: Number of buys decremented by 1
Num of buys left: 0, expected 0

TEST 7: Amt. of coin has decremented.
Coin: 0, expected 0

--------------- ALL TESTS PASSED ---------------

Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
--------------- UNIT TEST 2 ---------------
----------- IS GAME OVER TESTS ------------

TEST 1: IF PROVINCE CARD PILE EMPTY, GAME IS OVER
isGameOver returned 1, expected 1

TEST 2: IF THREE SUPPY PILES EMPTY, GAME IS OVER
isGameOver returned 1, expected 1

TEST 3: IF TWO SUPPLY PILES EMPTY, GAME IS NOT OVER
isGameOver returned 0, expected 0

------------ ALL TESTS PASSED -------------

Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
--------------- UNIT TEST 3 ---------------
----------- IS GAME OVER TESTS ------------

TEST 1: Does player 0's hand get discarded?
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
G.handCount[0] = 0, expected 0

TEST 2: Is it the next player's turn (1)?
G.whoseTurn = 1, expected 1

TEST 3: If player is last, does turn loop back to zero?
Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
G.whoseTurn == 0, expected 0

TEST 4: Does current player have 5 cards?
Current player hand count = 5, expected 5

------------ ALL TESTS PASSED -------------

Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
--------------- UNIT TEST 4 ---------------
------------ UPDATE COIN TESTS ------------

TEST 1: Does having a copper increase coin by one?
Player 0's coin = 5, expected 5

TEST 2: Does having a silver increase coin by two?
Player 0's coin = 6, expected 6

TEST 3: Does having a gold increase coin by three?
Player 0's coin = 7, expected 7

TEST 1: Does getting a coin bonus increase coin by bonus amt?
Player 0's coin = 12, expected 12

------------ ALL TESTS PASSED -------------

Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
--------------- CARD TEST 4 ---------------
--------------- SMITHY TESTS --------------

TEST 1: Does playing a smithy increase hand size by 3?
Current hand count: 6
Current hand count: 7
Current hand count: 8
Current hand count: 9
Current hand count: 10
Player 0's hand count = 10, expected 8

TEST 2: Does smithy card go to played pile?
Player 0's played card count = 1, expected 1
Player 0's last played card = 13, expected 13

------------ ALL TESTS PASSED -------------

Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
--------------- CARD TEST 4 ---------------
------------ ADVENTURER TESTS -------------
Cards gained: 5 4 1 2 7 5 1 1 3 4 
Treasures gained: 4 5 4 4 5 6 
Shuffling...

TEST 1: Does playing an adventurer increase hand size by 2?
Current hand count: 6
Current hand count: 7
Current hand count: 7
Current hand count: 7
Current hand count: 8
Current hand count: 8
Current hand count: 8
Current hand count: 8
Current hand count: 9
Current hand count: 10
Current hand count: 10
Current hand count: 10
Current hand count: 10
Current hand count: 11
Current hand count: 11
Current hand count: 12
Current hand count: 12
Current hand count: 13
Current hand count: 14
Current hand count: 15
Current hand count: 16
Deck count now: 0
Current hand count: 16
Deck count now: 0
Current hand count: 16
Deck count now: 0
Current hand count: 16
Player 0's hand count = 16, expected 8

TEST 2: Are the last two cards in Player 0's hand treasures?
Player 0's last card = 6, expected 4, 5, or 6
Player 0's second to last card = 4, expected 4, 5, or 6

TEST 3: No discarded card is a treasure
Discarded card count = 11
Discard 0 = 11, should not be 4, 5, or 6
Discard 1 = 17, should not be 4, 5, or 6
Discard 2 = 22, should not be 4, 5, or 6
Discard 3 = 14, should not be 4, 5, or 6
Discard 4 = 21, should not be 4, 5, or 6
Discard 5 = 1, should not be 4, 5, or 6
Discard 6 = 22, should not be 4, 5, or 6
Discard 7 = 11, should not be 4, 5, or 6
Discard 8 = 19, should not be 4, 5, or 6
Discard 9 = 21, should not be 4, 5, or 6
Discard 10 = 22, should not be 4, 5, or 6

TEST 4: Does adventurer card go to played pile?
Player 0's played card count = 0, expected 1
Player 0's last played card = 0, expected 7

------------ ALL TESTS PASSED -------------

Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
--------------- CARD TEST 4 ---------------
-------------- VILLAGE TESTS --------------

TEST 1: Does playing a smithy increase hand size by 1?
Current hand count: 6
Player 0's hand count = 6, expected 6

TEST 2: Does the player have two additional actions?
Player 0's actions = 2, expected 3

TEST 3: Does village card go to played pile?
Player 0's played card count = 1, expected 1
Player 0's last played card = 14, expected 14

------------ ALL TESTS PASSED -------------

Current hand count: 0
Current hand count: 1
Current hand count: 2
Current hand count: 3
Current hand count: 4
--------------- CARD TEST 4 ---------------
----------- COUNCIL ROOM TESTS ------------

TEST 1: Does playing a council room increase hand size by 3?
Current hand count: 6
Current hand count: 7
Current hand count: 8
Current hand count: 9
Player 0's hand count = 9, expected 9

TEST 2: Does the player an additional buy?
Player 0's actions = 2, expected 2

TEST 3: Does each other player get a card?
Player 1 hand count = 0, expected 1

TEST 4: Does council room card go to played pile?
Player 0's played card count = 1, expected 1
Player 0's last played card = 14, expected 8

------------ ALL TESTS PASSED -------------

#### #### #### TESTED COVERAGE #### #### ####
File 'dominion.c'
Lines executed:35.86% of 672
dominion.c:creating 'dominion.c.gcov'


        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
      124:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
      124:  280:  who = state->whoseTurn;
        -:  281:
      124:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
       31:  284:      printf("You do not have any buys left\n");
       31:  285:    return -1;
       93:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
       31:  288:      printf("There are not any of that type of card left\n");
       31:  289:    return -1;
       62:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
       31:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
       31:  293:    return -1;
        -:  294:  } else {
       31:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       31:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       31:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       31:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
       31:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       31:  308:  return 0;
      124:  309:}

        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       48:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
      576:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      240:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      240:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
      240:  359:  }
       48:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       48:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
       24:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       24:  365:  }
        -:  366:  else{
       24:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       48:  370:  state->outpostPlayed = 0;
       48:  371:  state->phase = 0;
       48:  372:  state->numActions = 1;
       48:  373:  state->coins = 0;
       48:  374:  state->numBuys = 1;
       48:  375:  state->playedCardCount = 0;
       48:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      576:  380:  for (k = 0; k < 5; k++){
      240:  381:    drawCard(state->whoseTurn, state);//Draw a card
      240:  382:  }
        -:  383:
        -:  384:  //Update money
       48:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
       48:  387:  return 0;
        -:  388:}

        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      144:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
       48:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       96:  401:  j = 0;
     4992:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
     2400:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
      240:  406:	  j++;
      240:  407:	}
     2400:  408:    }
       96:  409:  if ( j >= 3)
        -:  410:    {
       48:  411:      return 1;
        -:  412:    }
        -:  413:
       48:  414:  return 0;
      144:  415:}

        -: 1201:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1202:{
        -: 1203:  int i;
        -: 1204:	
        -: 1205:  //reset coin count
      305: 1206:  state->coins = 0;
        -: 1207:
        -: 1208:  //add coins for each Treasure card in player's hand
     3804: 1209:  for (i = 0; i < state->handCount[player]; i++)
        -: 1210:    {
     1597: 1211:      if (state->hand[player][i] == copper)
        -: 1212:	{
     1181: 1213:	  state->coins += 1;
     1181: 1214:	}
      416: 1215:      else if (state->hand[player][i] == silver)
        -: 1216:	{
       24: 1217:	  state->coins += 2;
       24: 1218:	}
      392: 1219:      else if (state->hand[player][i] == gold)
        -: 1220:	{
       24: 1221:	  state->coins += 3;
       24: 1222:	}	
     1597: 1223:    }	
        -: 1224:
        -: 1225:  //add bonus
      305: 1226:  state->coins += bonus;
        -: 1227:
      305: 1228:  return 0;
        -: 1229:}

        -: 1262:int playSmithy(struct gameState *state, int handPos) {
        -: 1263:  //+3 Cards
       17: 1264:  int currentPlayer = whoseTurn(state),
        -: 1265:      i;
      204: 1266:  for (i = 0; i < 5; i++)
        -: 1267:  {
       85: 1268:    drawCard(currentPlayer, state);
       85: 1269:  }
        -: 1270:      
        -: 1271:  //discard card from hand
       17: 1272:  discardCard(handPos, currentPlayer, state, 0);
       17: 1273:  return 0;
        -: 1274:}

        -: 1231:int playAdventurer(struct gameState *state) {
       15: 1232:  int drawntreasure = 0,
        -: 1233:      cardDrawn,
       15: 1234:      currentPlayer = whoseTurn(state),
        -: 1235:      temphand[MAX_HAND],
       15: 1236:      z = 0;
        -: 1237:
      438: 1238:  while(drawntreasure<2){
      204: 1239:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
       41: 1240:      shuffle(currentPlayer, state);
       41: 1241:    }
      204: 1242:    drawCard(currentPlayer, state);
      204: 1243:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
      447: 1244:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
      117: 1245:      drawntreasure++;
        -: 1246:    else{
       87: 1247:      drawntreasure--;
       87: 1248:      temphand[z]=cardDrawn;
       87: 1249:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       87: 1250:      z++;
        -: 1251:    }
        -: 1252:  }
      204: 1253:  while(z-1>=0){
       87: 1254:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       87: 1255:    z=z-1;
        -: 1256:  }
        -: 1257:
       15: 1258:  return 0;
        -: 1259:
        -: 1260:}

        -: 1276:int playVillage(struct gameState *state, int handPos) {
       14: 1277:  int currentPlayer = whoseTurn(state);
        -: 1278:
        -: 1279:  //+1 Card
       14: 1280:  drawCard(currentPlayer, state);
        -: 1281:  
        -: 1282:  //+2 Actions
       14: 1283:  state->numActions = state->numActions + 1;
        -: 1284:  
        -: 1285:  //discard played card from hand
       14: 1286:  discardCard(handPos, currentPlayer, state, 0);
        -: 1287:
       14: 1288:  return 0;
        -: 1289:}

        -: 1347:int playCouncil_Room(struct gameState *state, int handPos) {
        -: 1348:  int i,
       12: 1349:      currentPlayer = whoseTurn(state);
        -: 1350:
        -: 1351:  //+4 Cards
      120: 1352:  for (i = 0; i < 4; i++)
        -: 1353:  {
       48: 1354:    drawCard(currentPlayer, state);
       48: 1355:  }
        -: 1356:      
        -: 1357:  //+1 Buy
       12: 1358:  state->numBuys++;
        -: 1359:      
        -: 1360:  //Each other player draws a card
       72: 1361:  for (i = 0; i < state->numPlayers; i++)
        -: 1362:  {
       36: 1363:    if ( i != currentPlayer && currentPlayer != 0)
        -: 1364:      {
    #####: 1365:        drawCard(i, state);
    #####: 1366:      }
       24: 1367:  }
        -: 1368:      
        -: 1369:  //put played card in played card pile
       12: 1370:  discardCard(handPos, currentPlayer, state, 0);
        -: 1371:
       12: 1372:  return 0;      
        -: 1373:}

#### #### #### ALL COVERAGE #### #### ####

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:161
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
     5309:    9:  if (*(int*)a > *(int*)b)
      365:   10:    return 1;
     4944:   11:  if (*(int*)a < *(int*)b)
     1864:   12:    return -1;
     3080:   13:  return 0;
     5309:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      161:   44:  SelectStream(1);
      161:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
      322:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      161:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     3542:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    35420:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    30590:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
    16100:   65:        }
     1610:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      161:   73:  if (numPlayers == 2)
        -:   74:    {
      161:   75:      state->supplyCount[curse] = 10;
      161:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      161:   87:  if (numPlayers == 2)
        -:   88:    {
      161:   89:      state->supplyCount[estate] = 8;
      161:   90:      state->supplyCount[duchy] = 8;
      161:   91:      state->supplyCount[province] = 8;
      161:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      161:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      161:  102:  state->supplyCount[silver] = 40;
      161:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     6762:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    53130:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    24955:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     3220:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
    #####:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    #####:  119:		}
        -:  120:	      else
        -:  121:		{
     1610:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     1610:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    23345:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
    23345:  130:	}
        -:  131:
     3220:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      966:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
      322:  140:      state->deckCount[i] = 0;
     2576:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      966:  143:	  state->deck[i][j] = estate;
      966:  144:	  state->deckCount[i]++;
      966:  145:	}
     5152:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
     2254:  148:	  state->deck[i][j] = copper;
     2254:  149:	  state->deckCount[i]++;		
     2254:  150:	}
      322:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      966:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
      322:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
      322:  160:    }
        -:  161:
        -:  162:  //draw player hands
      966:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      322:  166:      state->handCount[i] = 0;
      322:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
      322:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     9016:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
     4347:  178:      state->embargoTokens[i] = 0;
     4347:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      161:  182:  state->outpostPlayed = 0;
      161:  183:  state->phase = 0;
      161:  184:  state->numActions = 1;
      161:  185:  state->numBuys = 1;
      161:  186:  state->playedCardCount = 0;
      161:  187:  state->whoseTurn = 0;
      161:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     1932:  192:  for (it = 0; it < 5; it++){
      805:  193:    drawCard(state->whoseTurn, state);
      805:  194:  }
        -:  195:
      161:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
      161:  198:  return 0;
      161:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      419:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      419:  209:  if (state->deckCount[player] < 1)
       82:  210:    return -1;
      337:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     7696:  214:  while (state->deckCount[player] > 0) {
     3511:  215:    card = floor(Random() * state->deckCount[player]);
     3511:  216:    newDeck[newDeckPos] = state->deck[player][card];
     3511:  217:    newDeckPos++;
    25876:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
     9427:  219:      state->deck[player][i] = state->deck[player][i+1];
     9427:  220:    }
     3511:  221:    state->deckCount[player]--;
        -:  222:  }
     7696:  223:  for (i = 0; i < newDeckPos; i++) {
     3511:  224:    state->deck[player][i] = newDeck[i];
     3511:  225:    state->deckCount[player]++;
     3511:  226:  }
        -:  227:
      337:  228:  return 0;
      419:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
    #####:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
      124:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
      124:  280:  who = state->whoseTurn;
        -:  281:
      124:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
       31:  284:      printf("You do not have any buys left\n");
       31:  285:    return -1;
       93:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
       31:  288:      printf("There are not any of that type of card left\n");
       31:  289:    return -1;
       62:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
       31:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
       31:  293:    return -1;
        -:  294:  } else {
       31:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       31:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
       31:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       31:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
       31:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
       31:  308:  return 0;
      124:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
      340:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
      130:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       48:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
      576:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      240:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      240:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
      240:  359:  }
       48:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
       48:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
       24:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       24:  365:  }
        -:  366:  else{
       24:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       48:  370:  state->outpostPlayed = 0;
       48:  371:  state->phase = 0;
       48:  372:  state->numActions = 1;
       48:  373:  state->coins = 0;
       48:  374:  state->numBuys = 1;
       48:  375:  state->playedCardCount = 0;
       48:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      576:  380:  for (k = 0; k < 5; k++){
      240:  381:    drawCard(state->whoseTurn, state);//Draw a card
      240:  382:  }
        -:  383:
        -:  384:  //Update money
       48:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
       48:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
      144:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
       48:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       96:  401:  j = 0;
     4992:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
     2400:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
      240:  406:	  j++;
      240:  407:	}
     2400:  408:    }
       96:  409:  if ( j >= 3)
        -:  410:    {
       48:  411:      return 1;
        -:  412:    }
        -:  413:
       48:  414:  return 0;
      144:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     1396:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       82:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
    #####:  536:    }
        -:  537:
       41:  538:    state->deckCount[player] = state->discardCount[player];
       41:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       41:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
       41:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       41:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       41:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
       41:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       41:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       41:  559:    if (deckCounter == 0)
       41:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
    #####:  565:  }
        -:  566:
        -:  567:  else{
     1355:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
     1355:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     1355:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     1355:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1355:  576:    state->deckCount[player]--;
     1355:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     1355:  580:  return 0;
     1396:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
      186:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
       31:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
      155:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
      186:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  // int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  // int temphand[MAX_HAND];// moved above the if statement
        -:  658:  // int drawntreasure=0;
        -:  659:  // int cardDrawn;
        -:  660:  // int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  662:    nextPlayer = 0;
    #####:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card ) 
        -:  668:    {
        -:  669:    case adventurer:
    #####:  670:      playAdventurer(state);
    #####:  671:      return 0;
        -:  672:			
        -:  673:    case council_room:
    #####:  674:      playCouncil_Room(state, handPos);
    #####:  675:      return 0;
        -:  676:			
        -:  677:    case feast:
    #####:  678:      playFeast(state, choice1);
    #####:  679:      return 0;
        -:  680:			
        -:  681:    case gardens:
    #####:  682:      return -1;
        -:  683:			
        -:  684:    case mine:
    #####:  685:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  686:
    #####:  687:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  688:	{
    #####:  689:	  return -1;
        -:  690:	}
        -:  691:		
    #####:  692:      if (choice2 > treasure_map || choice2 < curse)
        -:  693:	{
    #####:  694:	  return -1;
        -:  695:	}
        -:  696:
    #####:  697:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  698:	{
    #####:  699:	  return -1;
        -:  700:	}
        -:  701:
    #####:  702:      gainCard(choice2, state, 2, currentPlayer);
        -:  703:
        -:  704:      //discard card from hand
    #####:  705:      discardCard(handPos, currentPlayer, state, 0);
        -:  706:
        -:  707:      //discard trashed card
    #####:  708:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  709:	{
    #####:  710:	  if (state->hand[currentPlayer][i] == j)
        -:  711:	    {
    #####:  712:	      discardCard(i, currentPlayer, state, 0);			
    #####:  713:	      break;
        -:  714:	    }
    #####:  715:	}
        -:  716:			
    #####:  717:      return 0;
        -:  718:			
        -:  719:    case remodel:
    #####:  720:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:
    #####:  722:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  723:	{
    #####:  724:	  return -1;
        -:  725:	}
        -:  726:
    #####:  727:      gainCard(choice2, state, 0, currentPlayer);
        -:  728:
        -:  729:      //discard card from hand
    #####:  730:      discardCard(handPos, currentPlayer, state, 0);
        -:  731:
        -:  732:      //discard trashed card
    #####:  733:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  734:	{
    #####:  735:	  if (state->hand[currentPlayer][i] == j)
        -:  736:	    {
    #####:  737:	      discardCard(i, currentPlayer, state, 0);			
    #####:  738:	      break;
        -:  739:	    }
    #####:  740:	}
        -:  741:
        -:  742:
    #####:  743:      return 0;
        -:  744:		
        -:  745:    case smithy:
    #####:  746:      playSmithy(state, handPos);
    #####:  747:      return 0;
        -:  748:		
        -:  749:    case village:
    #####:  750:      playVillage(state, handPos);
    #####:  751:      return 0;
        -:  752:		
        -:  753:    case baron:
    #####:  754:      state->numBuys++;//Increase buys by 1!
    #####:  755:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  756:	int p = 0;//Iterator for hand!
    #####:  757:	int card_not_discarded = 1;//Flag for discard set!
    #####:  758:	while(card_not_discarded){
    #####:  759:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  760:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  761:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  762:	    state->discardCount[currentPlayer]++;
    #####:  763:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  764:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  765:	    }
    #####:  766:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  767:	    state->handCount[currentPlayer]--;
    #####:  768:	    card_not_discarded = 0;//Exit the loop
    #####:  769:	  }
    #####:  770:	  else if (p > state->handCount[currentPlayer]){
        -:  771:	    if(DEBUG) {
    #####:  772:	      printf("No estate cards in your hand, invalid choice\n");
    #####:  773:	      printf("Must gain an estate if there are any\n");
        -:  774:	    }
    #####:  775:	    if (supplyCount(estate, state) > 0){
    #####:  776:	      gainCard(estate, state, 0, currentPlayer);
    #####:  777:	      state->supplyCount[estate]--;//Decrement estates
    #####:  778:	      if (supplyCount(estate, state) == 0){
    #####:  779:		isGameOver(state);
    #####:  780:	      }
    #####:  781:	    }
    #####:  782:	    card_not_discarded = 0;//Exit the loop
    #####:  783:	  }
        -:  784:			    
        -:  785:	  else{
    #####:  786:	    p++;//Next card
        -:  787:	  }
        -:  788:	}
    #####:  789:      }
        -:  790:			    
        -:  791:      else{
    #####:  792:	if (supplyCount(estate, state) > 0){
    #####:  793:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  794:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  795:	  if (supplyCount(estate, state) == 0){
    #####:  796:	    isGameOver(state);
    #####:  797:	  }
    #####:  798:	}
        -:  799:      }
        -:  800:	    
        -:  801:      
    #####:  802:      return 0;
        -:  803:		
        -:  804:    case great_hall:
        -:  805:      //+1 Card
    #####:  806:      drawCard(currentPlayer, state);
        -:  807:			
        -:  808:      //+1 Actions
    #####:  809:      state->numActions++;
        -:  810:			
        -:  811:      //discard card from hand
    #####:  812:      discardCard(handPos, currentPlayer, state, 0);
    #####:  813:      return 0;
        -:  814:		
        -:  815:    case minion:
        -:  816:      //+1 action
    #####:  817:      state->numActions++;
        -:  818:			
        -:  819:      //discard card from hand
    #####:  820:      discardCard(handPos, currentPlayer, state, 0);
        -:  821:			
    #####:  822:      if (choice1)		//+2 coins
        -:  823:	{
    #####:  824:	  state->coins = state->coins + 2;
    #####:  825:	}
        -:  826:			
    #####:  827:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  828:	{
        -:  829:	  //discard hand
    #####:  830:	  while(numHandCards(state) > 0)
        -:  831:	    {
    #####:  832:	      discardCard(handPos, currentPlayer, state, 0);
        -:  833:	    }
        -:  834:				
        -:  835:	  //draw 4
    #####:  836:	  for (i = 0; i < 4; i++)
        -:  837:	    {
    #####:  838:	      drawCard(currentPlayer, state);
    #####:  839:	    }
        -:  840:				
        -:  841:	  //other players discard hand and redraw if hand size > 4
    #####:  842:	  for (i = 0; i < state->numPlayers; i++)
        -:  843:	    {
    #####:  844:	      if (i != currentPlayer)
        -:  845:		{
    #####:  846:		  if ( state->handCount[i] > 4 )
        -:  847:		    {
        -:  848:		      //discard hand
    #####:  849:		      while( state->handCount[i] > 0 )
        -:  850:			{
    #####:  851:			  discardCard(handPos, i, state, 0);
        -:  852:			}
        -:  853:							
        -:  854:		      //draw 4
    #####:  855:		      for (j = 0; j < 4; j++)
        -:  856:			{
    #####:  857:			  drawCard(i, state);
    #####:  858:			}
    #####:  859:		    }
    #####:  860:		}
    #####:  861:	    }
        -:  862:				
    #####:  863:	}
    #####:  864:      return 0;
        -:  865:		
        -:  866:    case steward:
    #####:  867:      if (choice1 == 1)
        -:  868:	{
        -:  869:	  //+2 cards
    #####:  870:	  drawCard(currentPlayer, state);
    #####:  871:	  drawCard(currentPlayer, state);
    #####:  872:	}
    #####:  873:      else if (choice1 == 2)
        -:  874:	{
        -:  875:	  //+2 coins
    #####:  876:	  state->coins = state->coins + 2;
    #####:  877:	}
        -:  878:      else
        -:  879:	{
        -:  880:	  //trash 2 cards in hand
    #####:  881:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  882:	  discardCard(choice3, currentPlayer, state, 1);
        -:  883:	}
        -:  884:			
        -:  885:      //discard card from hand
    #####:  886:      discardCard(handPos, currentPlayer, state, 0);
    #####:  887:      return 0;
        -:  888:		
        -:  889:    case tribute:
    #####:  890:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  891:	if (state->deckCount[nextPlayer] > 0){
    #####:  892:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  893:	  state->deckCount[nextPlayer]--;
    #####:  894:	}
    #####:  895:	else if (state->discardCount[nextPlayer] > 0){
    #####:  896:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  897:	  state->discardCount[nextPlayer]--;
    #####:  898:	}
        -:  899:	else{
        -:  900:	  //No Card to Reveal
        -:  901:	  if (DEBUG){
    #####:  902:	    printf("No cards to reveal\n");
        -:  903:	  }
        -:  904:	}
    #####:  905:      }
        -:  906:	    
        -:  907:      else{
    #####:  908:	if (state->deckCount[nextPlayer] == 0){
    #####:  909:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  910:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  911:	    state->deckCount[nextPlayer]++;
    #####:  912:	    state->discard[nextPlayer][i] = -1;
    #####:  913:	    state->discardCount[nextPlayer]--;
    #####:  914:	  }
        -:  915:			    
    #####:  916:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####:  917:	} 
    #####:  918:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  919:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  920:	state->deckCount[nextPlayer]--;
    #####:  921:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  922:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  923:	state->deckCount[nextPlayer]--;
        -:  924:      }    
        -:  925:		       
    #####:  926:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  927:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  928:	state->playedCardCount++;
    #####:  929:	tributeRevealedCards[1] = -1;
    #####:  930:      }
        -:  931:
    #####:  932:      for (i = 0; i <= 2; i ++){
    #####:  933:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  934:	  state->coins += 2;
    #####:  935:	}
        -:  936:		    
    #####:  937:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  938:	  drawCard(currentPlayer, state);
    #####:  939:	  drawCard(currentPlayer, state);
    #####:  940:	}
        -:  941:	else{//Action Card
    #####:  942:	  state->numActions = state->numActions + 2;
        -:  943:	}
    #####:  944:      }
        -:  945:	    
    #####:  946:      return 0;
        -:  947:		
        -:  948:    case ambassador:
    #####:  949:      j = 0;		//used to check if player has enough cards to discard
        -:  950:
    #####:  951:      if (choice2 > 2 || choice2 < 0)
        -:  952:	{
    #####:  953:	  return -1;				
        -:  954:	}
        -:  955:
    #####:  956:      if (choice1 == handPos)
        -:  957:	{
    #####:  958:	  return -1;
        -:  959:	}
        -:  960:
    #####:  961:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  962:	{
    #####:  963:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  964:	    {
    #####:  965:	      j++;
    #####:  966:	    }
    #####:  967:	}
    #####:  968:      if (j < choice2)
        -:  969:	{
    #####:  970:	  return -1;				
        -:  971:	}
        -:  972:
        -:  973:      if (DEBUG) 
    #####:  974:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  975:
        -:  976:      //increase supply count for choosen card by amount being discarded
    #####:  977:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  978:			
        -:  979:      //each other player gains a copy of revealed card
    #####:  980:      for (i = 0; i < state->numPlayers; i++)
        -:  981:	{
    #####:  982:	  if (i != currentPlayer)
        -:  983:	    {
    #####:  984:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  985:	    }
    #####:  986:	}
        -:  987:
        -:  988:      //discard played card from hand
    #####:  989:      discardCard(handPos, currentPlayer, state, 0);			
        -:  990:
        -:  991:      //trash copies of cards returned to supply
    #####:  992:      for (j = 0; j < choice2; j++)
        -:  993:	{
    #####:  994:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  995:	    {
    #####:  996:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  997:		{
    #####:  998:		  discardCard(i, currentPlayer, state, 1);
    #####:  999:		  break;
        -: 1000:		}
    #####: 1001:	    }
    #####: 1002:	}			
        -: 1003:
    #####: 1004:      return 0;
        -: 1005:		
        -: 1006:    case cutpurse:
        -: 1007:
    #####: 1008:      updateCoins(currentPlayer, state, 2);
    #####: 1009:      for (i = 0; i < state->numPlayers; i++)
        -: 1010:	{
    #####: 1011:	  if (i != currentPlayer)
        -: 1012:	    {
    #####: 1013:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1014:		{
    #####: 1015:		  if (state->hand[i][j] == copper)
        -: 1016:		    {
    #####: 1017:		      discardCard(j, i, state, 0);
    #####: 1018:		      break;
        -: 1019:		    }
    #####: 1020:		  if (j == state->handCount[i])
        -: 1021:		    {
    #####: 1022:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1023:			{
        -: 1024:			  if (DEBUG)
    #####: 1025:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1026:			}	
    #####: 1027:		      break;
        -: 1028:		    }		
    #####: 1029:		}
        -: 1030:					
    #####: 1031:	    }
        -: 1032:				
    #####: 1033:	}				
        -: 1034:
        -: 1035:      //discard played card from hand
    #####: 1036:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1037:
    #####: 1038:      return 0;
        -: 1039:
        -: 1040:		
        -: 1041:    case embargo: 
        -: 1042:      //+2 Coins
    #####: 1043:      state->coins = state->coins + 2;
        -: 1044:			
        -: 1045:      //see if selected pile is in play
    #####: 1046:      if ( state->supplyCount[choice1] == -1 )
        -: 1047:	{
    #####: 1048:	  return -1;
        -: 1049:	}
        -: 1050:			
        -: 1051:      //add embargo token to selected supply pile
    #####: 1052:      state->embargoTokens[choice1]++;
        -: 1053:			
        -: 1054:      //trash card
    #####: 1055:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1056:      return 0;
        -: 1057:		
        -: 1058:    case outpost:
        -: 1059:      //set outpost flag
    #####: 1060:      state->outpostPlayed++;
        -: 1061:			
        -: 1062:      //discard card
    #####: 1063:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1064:      return 0;
        -: 1065:		
        -: 1066:    case salvager:
        -: 1067:      //+1 buy
    #####: 1068:      state->numBuys++;
        -: 1069:			
    #####: 1070:      if (choice1)
        -: 1071:	{
        -: 1072:	  //gain coins equal to trashed card
    #####: 1073:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1074:	  //trash card
    #####: 1075:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1076:	}
        -: 1077:			
        -: 1078:      //discard card
    #####: 1079:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1080:      return 0;
        -: 1081:		
        -: 1082:    case sea_hag:
    #####: 1083:      for (i = 0; i < state->numPlayers; i++){
    #####: 1084:	if (i != currentPlayer){
    #####: 1085:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1086:	  state->discardCount[i]++;
    #####: 1087:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1088:	}
    #####: 1089:      }
    #####: 1090:      return 0;
        -: 1091:		
        -: 1092:    case treasure_map:
        -: 1093:      //search hand for another treasure_map
    #####: 1094:      index = -1;
    #####: 1095:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1096:	{
    #####: 1097:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1098:	    {
    #####: 1099:	      index = i;
    #####: 1100:	      break;
        -: 1101:	    }
    #####: 1102:	}
    #####: 1103:      if (index > -1)
        -: 1104:	{
        -: 1105:	  //trash both treasure cards
    #####: 1106:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1107:	  discardCard(index, currentPlayer, state, 1);
        -: 1108:
        -: 1109:	  //gain 4 Gold cards
    #####: 1110:	  for (i = 0; i < 4; i++)
        -: 1111:	    {
    #####: 1112:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1113:	    }
        -: 1114:				
        -: 1115:	  //return success
    #####: 1116:	  return 1;
        -: 1117:	}
        -: 1118:			
        -: 1119:      //no second treasure_map found in hand
    #####: 1120:      return -1;
        -: 1121:    }
        -: 1122:	
    #####: 1123:  return -1;
    #####: 1124:}
        -: 1125:
        -: 1126:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1127:{
        -: 1128:	
        -: 1129:  //if card is not trashed, added to Played pile 
       43: 1130:  if (trashFlag < 1)
        -: 1131:    {
        -: 1132:      //add card to played pile
       43: 1133:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       43: 1134:      state->playedCardCount++;
       43: 1135:    }
        -: 1136:	
        -: 1137:  //set played card to -1
       43: 1138:  state->hand[currentPlayer][handPos] = -1;
        -: 1139:	
        -: 1140:  //remove card from player's hand
       43: 1141:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1142:    {
        -: 1143:      //reduce number of cards in hand
    #####: 1144:      state->handCount[currentPlayer]--;
    #####: 1145:    }
       43: 1146:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1147:    {
        -: 1148:      //reduce number of cards in hand
    #####: 1149:      state->handCount[currentPlayer]--;
    #####: 1150:    }
        -: 1151:  else 	
        -: 1152:    {
        -: 1153:      //replace discarded card with last card in hand
       43: 1154:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1155:      //set last card to -1
       43: 1156:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1157:      //reduce number of cards in hand
       43: 1158:      state->handCount[currentPlayer]--;
        -: 1159:    }
        -: 1160:	
       43: 1161:  return 0;
        -: 1162:}
        -: 1163:
        -: 1164:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1165:{
        -: 1166:  //Note: supplyPos is enum of choosen card
        -: 1167:	
        -: 1168:  //check if supply pile is empty (0) or card is not used in game (-1)
      247: 1169:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1170:    {
    #####: 1171:      return -1;
        -: 1172:    }
        -: 1173:	
        -: 1174:  //added card for [whoseTurn] current player:
        -: 1175:  // toFlag = 0 : add to discard
        -: 1176:  // toFlag = 1 : add to deck
        -: 1177:  // toFlag = 2 : add to hand
        -: 1178:
      247: 1179:  if (toFlag == 1)
        -: 1180:    {
      216: 1181:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
      216: 1182:      state->deckCount[player]++;
      216: 1183:    }
       31: 1184:  else if (toFlag == 2)
        -: 1185:    {
    #####: 1186:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1187:      state->handCount[player]++;
    #####: 1188:    }
        -: 1189:  else
        -: 1190:    {
       31: 1191:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       31: 1192:      state->discardCount[player]++;
        -: 1193:    }
        -: 1194:	
        -: 1195:  //decrease number in supply pile
      247: 1196:  state->supplyCount[supplyPos]--;
        -: 1197:	 
      247: 1198:  return 0;
      247: 1199:}
        -: 1200:
        -: 1201:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1202:{
        -: 1203:  int i;
        -: 1204:	
        -: 1205:  //reset coin count
      305: 1206:  state->coins = 0;
        -: 1207:
        -: 1208:  //add coins for each Treasure card in player's hand
     3804: 1209:  for (i = 0; i < state->handCount[player]; i++)
        -: 1210:    {
     1597: 1211:      if (state->hand[player][i] == copper)
        -: 1212:	{
     1181: 1213:	  state->coins += 1;
     1181: 1214:	}
      416: 1215:      else if (state->hand[player][i] == silver)
        -: 1216:	{
       24: 1217:	  state->coins += 2;
       24: 1218:	}
      392: 1219:      else if (state->hand[player][i] == gold)
        -: 1220:	{
       24: 1221:	  state->coins += 3;
       24: 1222:	}	
     1597: 1223:    }	
        -: 1224:
        -: 1225:  //add bonus
      305: 1226:  state->coins += bonus;
        -: 1227:
      305: 1228:  return 0;
        -: 1229:}
        -: 1230:
        -: 1231:int playAdventurer(struct gameState *state) {
       15: 1232:  int drawntreasure = 0,
        -: 1233:      cardDrawn,
       15: 1234:      currentPlayer = whoseTurn(state),
        -: 1235:      temphand[MAX_HAND],
       15: 1236:      z = 0;
        -: 1237:
      438: 1238:  while(drawntreasure<2){
      204: 1239:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
       41: 1240:      shuffle(currentPlayer, state);
       41: 1241:    }
      204: 1242:    drawCard(currentPlayer, state);
      204: 1243:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
      447: 1244:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
      117: 1245:      drawntreasure++;
        -: 1246:    else{
       87: 1247:      drawntreasure--;
       87: 1248:      temphand[z]=cardDrawn;
       87: 1249:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       87: 1250:      z++;
        -: 1251:    }
        -: 1252:  }
      204: 1253:  while(z-1>=0){
       87: 1254:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       87: 1255:    z=z-1;
        -: 1256:  }
        -: 1257:
       15: 1258:  return 0;
        -: 1259:
        -: 1260:}
        -: 1261:
        -: 1262:int playSmithy(struct gameState *state, int handPos) {
        -: 1263:  //+3 Cards
       17: 1264:  int currentPlayer = whoseTurn(state),
        -: 1265:      i;
      204: 1266:  for (i = 0; i < 5; i++)
        -: 1267:  {
       85: 1268:    drawCard(currentPlayer, state);
       85: 1269:  }
        -: 1270:      
        -: 1271:  //discard card from hand
       17: 1272:  discardCard(handPos, currentPlayer, state, 0);
       17: 1273:  return 0;
        -: 1274:}
        -: 1275:
        -: 1276:int playVillage(struct gameState *state, int handPos) {
       14: 1277:  int currentPlayer = whoseTurn(state);
        -: 1278:
        -: 1279:  //+1 Card
       14: 1280:  drawCard(currentPlayer, state);
        -: 1281:  
        -: 1282:  //+2 Actions
       14: 1283:  state->numActions = state->numActions + 1;
        -: 1284:  
        -: 1285:  //discard played card from hand
       14: 1286:  discardCard(handPos, currentPlayer, state, 0);
        -: 1287:
       14: 1288:  return 0;
        -: 1289:}
        -: 1290:
        -: 1291:int playFeast(struct gameState *state, int choice1) {
    #####: 1292:  int currentPlayer = whoseTurn(state),
        -: 1293:  i, x,
        -: 1294:  temphand[MAX_HAND];
        -: 1295:
        -: 1296:  //gain card with cost up to 5
        -: 1297:  //Backup hand
    #####: 1298:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1299:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1300:    state->hand[currentPlayer][i] = -1;//Set to nothing
    #####: 1301:  }
        -: 1302:  //Backup hand
        -: 1303:
        -: 1304:  //Update Coins for Buy
        -: 1305:  // updateCoins(currentPlayer, state, 5);
    #####: 1306:  x = 1;//Condition to loop on
    #####: 1307:  while( x == 1) {//Buy one card
    #####: 1308:    if (supplyCount(choice1, state) <= 0){
        -: 1309:      if (DEBUG)
    #####: 1310:        printf("None of that card left, sorry!\n");
        -: 1311:
        -: 1312:      if (DEBUG){
    #####: 1313:        printf("Cards Left: %d\n", supplyCount(choice1, state));      
        -: 1314:      }
    #####: 1315:    }
    #####: 1316:    else if (state->coins < getCost(choice1)){
    #####: 1317:      printf("That card is too expensive!\n");
        -: 1318:
        -: 1319:      if (DEBUG){
    #####: 1320:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1321:      }
    #####: 1322:    }
        -: 1323:    else{
        -: 1324:      if (DEBUG){
    #####: 1325:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1326:      }
        -: 1327:
    #####: 1328:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1329:      x = 0;//No more buying cards
        -: 1330:
        -: 1331:      if (DEBUG){
    #####: 1332:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1333:      }
        -: 1334:    }
        -: 1335:  }     
        -: 1336:
        -: 1337:  //Reset Hand
    #####: 1338:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1339:    state->hand[currentPlayer][i] = temphand[i];
    #####: 1340:    temphand[i] = -1;
    #####: 1341:  }
        -: 1342:  //Reset Hand
        -: 1343:
    #####: 1344:  return 0;
        -: 1345:}
        -: 1346:
        -: 1347:int playCouncil_Room(struct gameState *state, int handPos) {
        -: 1348:  int i,
       12: 1349:      currentPlayer = whoseTurn(state);
        -: 1350:
        -: 1351:  //+4 Cards
      120: 1352:  for (i = 0; i < 4; i++)
        -: 1353:  {
       48: 1354:    drawCard(currentPlayer, state);
       48: 1355:  }
        -: 1356:      
        -: 1357:  //+1 Buy
       12: 1358:  state->numBuys++;
        -: 1359:      
        -: 1360:  //Each other player draws a card
       72: 1361:  for (i = 0; i < state->numPlayers; i++)
        -: 1362:  {
       36: 1363:    if ( i != currentPlayer && currentPlayer != 0)
        -: 1364:      {
    #####: 1365:        drawCard(i, state);
    #####: 1366:      }
       24: 1367:  }
        -: 1368:      
        -: 1369:  //put played card in played card pile
       12: 1370:  discardCard(handPos, currentPlayer, state, 0);
        -: 1371:
       12: 1372:  return 0;      
        -: 1373:}
        -: 1374:
        -: 1375://end of dominion.c
        -: 1376:

File 'dominion.c'
Lines executed:35.86% of 672
dominion.c:creating 'dominion.c.gcov'

