Name: Lauren Miller, Dave Martinez, Runa Trinh
Assignment: Course Project, Part A
Class: CS362
Date: 4/30/2016

The testIsValid test without arguments calls the version of the testIsValid test that takes arguments with testUrlParts and the option ALLOW_ALL_SCHEMES set. testUrlParts is an array of testUrlScheme, testUrlAuthority, testUrlPort, testPath, and testUrlQuery. Each of these is some set of options for their respective part of a url and whether this option is valid. The  ALLOW_ALL_SCHEMES option allows schemes beside http, https, and ftp to pass validation.

This second version of testIsValid takes the sets of URL parts from testUrlParts and tests all their combinations to assure that invalid ones fail and valid ones succeed. testUrlParts comprises testUrlScheme, testUrlAuthority, testUrlPort, testPath, and testUrlQuery, for which there are 9, 19, 7, 10, and 3 options respectively. There should then be 35910 different URLs tested.

It begins by creating a new UrlValidator and running assertions that two obviously valid URLs succeed. It then creates new URLs from testUrlParts and the expected success of that combination. The new URLs are made from every (ordered) combination of the testUrlParts: testUrlScheme, testUrlAuthority, testUrlPort, testPath, and testUrlQuery, by going through each index of these parts and appending a new value to a base URL until a full URL is created. It then runs the UrlValidator on that URL and asserts that the value of that result matches the expected value. 

These tests are run on all combinations, valid and invalid. A valid input is one in which all constiuent parts are valid, such as http://www.google.com:80/test1?action=view, which is made of http://, (valid), www.google.com, (valid), :80, (valid), /test1, (valid), and ?action=view, (valid). As each component has a true/valid value, the complete URL should have a value of true, and this value is compared to the result of the UrlValidator, which should be true. 

It might also be run on an invalid URL, which is one in which any constituent part is invalid. For example, the URL http://www.google.com:-1/test1?action=view is valid in all ways except for its port, :-1, (invalid), and so the expected result for this URL from the UrlValidator would be false.

Depending on printStatus, certain information about the test may be output.

At the end of the test, setUp(), which sets the values of of testPartsIndex to 0, is called.

Overall, this test is much more complex and more complete in testing its code than the unit and card tests, which is both a reflection of how the tests we created could be improved and in the type of material being tested. The URL validator test was much more thorough, testing many more valid and invalid situations. Also, the the test focused only on whether the URL validator returned the correct response or true or false, rather than changes in numbers or values, as would be the case for Dominion test. The test was also different from Dominion tests in that the test URLs created are based on acutal URLs and each part of the URLs created is either a known valid or invalid part based on existing standards for what types of URLs are valid in the real world. While Dominion is based on an analog game, the minimal documentation for each card or function leads to somewhat less clarity in what each function is supposed to do. For example, it’s less obvious whether playing a card should include a discard action at the end or not, since each part of the digital game doesn’t have an entirely discrete real-life counterpart.