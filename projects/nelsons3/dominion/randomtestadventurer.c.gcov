        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7://for random seed
        -:    8:#include <stdlib.h>
        -:    9:#include <time.h>
        -:   10:
function testAdventurer called 5000 returned 100% blocks executed 94%
     5000:   11:int testAdventurer(struct gameState *beforeCardPlay)
        -:   12:{
        -:   13:    //create test game
        -:   14:    struct gameState afterCardPlay;
        -:   15:    //copy over beforeCardPlay card struct to new struct
     5000:   16:    memcpy(&afterCardPlay,beforeCardPlay,sizeof(struct gameState));
        -:   17:    //ensure they are of same size (ensures correct copy)
     5000:   18:    assert (memcmp(&afterCardPlay,beforeCardPlay, sizeof(struct gameState))==0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   19:
        -:   20:    //play adventurer card
     5000:   21:    playAdventurer(&afterCardPlay);
call    0 returned 100%
        -:   22:
        -:   23:    //update beforeCardPlay card struct...give it expected number of cards and buys just as the above line automatically did
     5000:   24:    int currentPlayer = beforeCardPlay->whoseTurn;
        -:   25:    int counter;
        -:   26:
        -:   27:    //add the two cards drawn
    15000:   28:    for(counter=0; counter<2; counter++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   29:    {
    10000:   30:        beforeCardPlay->hand[currentPlayer][beforeCardPlay->handCount[currentPlayer]] = afterCardPlay.hand[currentPlayer][beforeCardPlay->handCount[currentPlayer]];
    10000:   31:    	int num = afterCardPlay.hand[currentPlayer][beforeCardPlay->handCount[currentPlayer]];
    10000:   32:    	beforeCardPlay->handCount[currentPlayer]++;
        -:   33:    }
        -:   34:
        -:   35:    //update deck and discard in case of shuffle.
    41534:   36:    for (counter=0; counter < afterCardPlay.deckCount[currentPlayer]; counter++)
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
        -:   37:    {
    36534:   38:        beforeCardPlay->deck[currentPlayer][counter] =afterCardPlay.deck[currentPlayer][counter];
        -:   39:    }
        -:   40:    
     5000:   41:    beforeCardPlay->deckCount[currentPlayer] = afterCardPlay.deckCount[currentPlayer];
        -:   42:
  2449690:   43:    for (counter=0; counter < afterCardPlay.discardCount[currentPlayer]; counter++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   44:    {
  2444690:   45:        beforeCardPlay->discard[currentPlayer][counter] = afterCardPlay.discard[currentPlayer][counter];
        -:   46:    }
     5000:   47:    beforeCardPlay->discardCount[currentPlayer] = afterCardPlay.discardCount[currentPlayer];
        -:   48:
        -:   49:
        -:   50:
     5000:   51:    printf("count expected %d test amount %d ",  beforeCardPlay->handCount[currentPlayer], afterCardPlay.handCount[currentPlayer]);
call    0 returned 100%
        -:   52:
     5000:   53:    if(memcmp(&afterCardPlay,beforeCardPlay, sizeof(struct gameState))==0)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -:   54:    {
     4970:   55:        printf("adventurer Test PASS\n");	
call    0 returned 100%
        -:   56:    }
        -:   57:    else
        -:   58:    {
       30:   59:        printf("adventurer Test *******  FAIL  *******\n");
call    0 returned 100%
        -:   60:    }
        -:   61:
     5000:   62:return 0;
        -:   63:}
        -:   64:
        -:   65:
function main called 1 returned 100% blocks executed 100%
        1:   66:int main()
        -:   67:{
        1:   68:    printf("playAdventurer test - cardtest2/n");
call    0 returned 100%
        -:   69:
        -:   70:    //array of cards
        1:   71:    int k[10] = {adventurer, copper, silver, gold, mine, remodel, smithy, village, baron, great_hall};
        -:   72:
        -:   73:    struct gameState beforeCardPlay;
        -:   74:
        -:   75:    int counter, innerCounter;
        -:   76:    //create intial game
        1:   77:    srand(time(NULL));	
call    0 returned 100%
call    1 returned 100%
        -:   78:
     5001:   79:    for (counter = 0; counter < 5000; counter++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   80:
        -:   81:
     5000:   82:        initializeGame(4,k,counter+1,&beforeCardPlay);
call    0 returned 100%
        -:   83:    //fill in required preconditions with randoms.
        -:   84:
     5000:   85:        beforeCardPlay.numPlayers = (Random() * (MAX_PLAYERS-1))+1;
call    0 returned 100%
     5000:   86:        beforeCardPlay.whoseTurn = Random() * beforeCardPlay.numPlayers;
call    0 returned 100%
        -:   87:
     5000:   88:        beforeCardPlay.handCount[beforeCardPlay.whoseTurn] = Random() * MAX_HAND;
call    0 returned 100%
     5000:   89:        beforeCardPlay.discardCount[beforeCardPlay.whoseTurn] = Random() * MAX_DECK;
call    0 returned 100%
     5000:   90:        beforeCardPlay.deckCount[beforeCardPlay.whoseTurn] = Random() * MAX_DECK;
call    0 returned 100%
        -:   91:
  1256649:   92:    	for(innerCounter=0;innerCounter<beforeCardPlay.handCount[beforeCardPlay.whoseTurn];innerCounter++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   93:        {
  1251649:   94:        	beforeCardPlay.hand[beforeCardPlay.whoseTurn][innerCounter] = Random() * 2;
call    0 returned 100%
        -:   95:        }
  1253651:   96:    	for(innerCounter=0;innerCounter<beforeCardPlay.deckCount[beforeCardPlay.whoseTurn];innerCounter++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   97:        {
  1248651:   98:        	beforeCardPlay.hand[beforeCardPlay.whoseTurn][innerCounter] = Random() * 3;
call    0 returned 100%
        -:   99:        }
        -:  100:
        -:  101:        //run test
     5000:  102:        testAdventurer(&beforeCardPlay);
call    0 returned 100%
        -:  103:    }
        -:  104:
        1:  105:return 0;
        -:  106:}
