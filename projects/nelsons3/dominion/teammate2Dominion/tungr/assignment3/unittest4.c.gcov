        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:/*
        -:    2:	Rosa Tung
        -:    3:	CS362
        -:    4:	(20 points) Write unit tests for four functions (not card implementations or cardEffect) in dominion.c. 
        -:    5:	Check these tests in as unittest1.c,unittest2.c, unittest3.c, and unittest4.c. 
        -:    6:	(for example, you can create a test for updateCoins() method)
        -:    7:	
        -:    8:	Testing:
        -:    9:		int compare(const void* a, const void* b);
        -:   10:*/
        -:   11:
        -:   12:#include "dominion.h"  
        -:   13:
        -:   14:#include <stdio.h> //printf scanf
        -:   15:
function main called 2 returned 100% blocks executed 84%
        2:   16:int main(){
        -:   17:	//set our values to test
        2:   18:	int small = 1;
        2:   19:	int big = 2;
        2:   20:	int* smaller = &small;
        2:   21:	int* bigger = &big;
        -:   22:	
        -:   23:	int flag;
        2:   24:	printf("---Testing compare function START---\n\n");
call    0 returned 100%
        -:   25:	
        2:   26:	printf("Testing [left < right]...\n");
call    0 returned 100%
        2:   27:	if(compare(smaller, bigger) == -1){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2:   28:		printf("	PASS\n");
call    0 returned 100%
        -:   29:	} else {
    #####:   30:		printf("	FAIL\n");
call    0 never executed
        -:   31:	}
        2:   32:	printf("Testing [left > right]...\n");
call    0 returned 100%
        2:   33:	if(compare(bigger, smaller) == 1){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2:   34:		printf("	PASS\n");
call    0 returned 100%
        -:   35:	} else {
    #####:   36:		printf("	FAIL\n");
call    0 never executed
        -:   37:	}
        2:   38:	printf("Testing [left = right]...\n");
call    0 returned 100%
        2:   39:	if(compare(smaller, smaller) == 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2:   40:		printf("	PASS\n\n");
call    0 returned 100%
        -:   41:	} else {
    #####:   42:		printf("	FAIL\n\ns");
call    0 never executed
        -:   43:	}
        -:   44:	
        2:   45:	printf("---Testing compare function COMPLETE---\n\n\n\n");
call    0 returned 100%
        2:   46:	return 0;
        -:   47:}
