        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:	Rosa Tung
        -:    3:	CS 362 Assignment 4
        -:    4:	randomtestadventurer.c
        -:    5:		Write a random tester for two Dominion cards, one of which has to be the adventurer card.
        -:    6:*/
        -:    7:
        -:    8:#include <stdio.h>
        -:    9:#include <stdlib.h> //rand()
        -:   10:#include <time.h> //time
        -:   11:
        -:   12:#include "dominion.h"
        -:   13:
        -:   14://global variables
        -:   15:#define MAX_TESTS 10
        -:   16:/* dominion.h
        -:   17:
        -:   18:#define MAX_HAND 500 
        -:   19:#define MAX_DECK 500 
        -:   20:#define MAX_PLAYERS 4	
        -:   21:
        -:   22:*/
        -:   23:
function main called 1 returned 100% blocks executed 99%
        1:   24:int main(){
        -:   25:
        -:   26:	//make new game object
        1:   27:	struct gameState* G = newGame();
call    0 returned 100%
        1:   28:  	const char *cardNames[] = {"curse", "estate", "duchy", "province", "copper", "silver", "gold", "adventurer", "council_room", "feast", 
        -:   29:  								"gardens", "mine", "remodel", "smithy", "village", "baron", "great_hall", "minion", "steward", "tribute", 
        -:   30:  								"ambassador", "cutpurse", "embargo", "outpost", "salvager", "sea_hag", "treasure_map"};
        -:   31:	
        1:   32:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy, council_room};
        -:   33:	
        -:   34:	int randPlayers;
        -:   35:	int randState;
        -:   36:	int test, player, card; 
        -:   37:	int cardEnum, treasuresBefore, treasuresAfter;
        -:   38:	int choice1, choice2, choice3;
        1:   39:	int treasurePass = 0, treasureFail = 0, returnPass = 0, returnFail = 0, returnValue; 
        -:   40:	int handPosition;
        -:   41:
        -:   42:	//random seed
        1:   43:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:   44:
        1:   45:	printf("---Random Testing Adventurer Card START---\n\n");
call    0 returned 100%
        -:   46:	
        -:   47:	/*loop through MAX_TEST times*/
       11:   48:	for(test = 0; test < MAX_TESTS; test++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:   49:		randPlayers = (rand() % 3) + 2; //2-4 players
call    0 returned 100%
       10:   50:		randState = (rand() % 9) + 1; //1-9 state
call    0 returned 100%
       10:   51:		printf("initializing game with %d players and state of %d\n", randPlayers, randState);
call    0 returned 100%
       10:   52:		initializeGame(randPlayers, k, randState, G);
call    0 returned 100%
        -:   53:		
        -:   54:		/*loop through players times - set decks*/
       41:   55:		for(player = 0; player < randPlayers; player++){
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
       31:   56:			treasuresBefore = 0; //reset treasure counts
       31:   57:			treasuresAfter = 0;
       31:   58:			G->deckCount[player] = rand() % MAX_DECK; //each player gets random deck size
call    0 returned 100%
       31:   59:			printf("player %d gets deck size of %d\n", player+1, G->deckCount[player]);
call    0 returned 100%
        -:   60:
        -:   61:			/*loop through players deck*/
      841:   62:			for(card = 0; card < G->deckCount[player]; card++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
      810:   63:				G->deck[player][card] = rand() % 27; //assign random card from enum CARD
call    0 returned 100%
      810:   64:				printf(" %s  | ", cardNames[G->deck[player][card]]);	
call    0 returned 100%
       31:   65:			} printf("\n");
call    0 returned 100%
       31:   66:			G->discardCount[player] = rand() % MAX_DECK; //each player gets random discard deck size
call    0 returned 100%
       31:   67:			printf("player %d gets discard size of %d\n", player+1, G->discardCount[player]);
call    0 returned 100%
        -:   68:
        -:   69:			/*loop throuhg players discard pile*/
      948:   70:			for(card = 0; card < G->discardCount[player]; card++){
branch  0 taken 97%
branch  1 taken 3% (fallthrough)
      917:   71:				G->discard[player][card] = rand() % 27; //random discard
call    0 returned 100%
      917:   72:				printf(" %s  | ", cardNames[G->discard[player][card]]);
call    0 returned 100%
       31:   73:			}printf("\n");
call    0 returned 100%
        -:   74:
       31:   75:			G->handCount[player] = rand() % MAX_HAND; //each player gets a random hand size
call    0 returned 100%
       31:   76:			printf("player %d gets hand size of %d\n", player+1, G->handCount[player]);
call    0 returned 100%
        -:   77:			
        -:   78:			/*loop through players hand - count treasures*/
      797:   79:			for(card = 0; card < G->handCount[player]; card++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
      766:   80:				G->hand[player][card] = rand() % 27; //random hand
call    0 returned 100%
      766:   81:				cardEnum = G->hand[player][card];
      766:   82:				printf(" %s  | ", cardNames[G->hand[player][card]]);
call    0 returned 100%
        -:   83:				/*if it's a treasure card, tally it up*/
      766:   84:				if(cardEnum == copper || cardEnum == silver || cardEnum == gold){
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
branch  2 taken 97% (fallthrough)
branch  3 taken 3%
branch  4 taken 3% (fallthrough)
branch  5 taken 97%
       72:   85:					treasuresBefore++;
        -:   86:				}
       31:   87:			} printf("\n");
call    0 returned 100%
       31:   88:			printf("Treasures Before: %d\n", treasuresBefore);
call    0 returned 100%
        -:   89:
       31:   90:			choice1 = rand() % 2; //0 or 1
call    0 returned 100%
       31:   91:			choice2 = rand() % 2; 
call    0 returned 100%
       31:   92:			choice3 = rand() % 2;	
call    0 returned 100%
       31:   93:			handPosition = rand() % 4; //no bonus
call    0 returned 100%
       31:   94:			printf("Card Effect with choice1 = %d choice2 = %d choice3 = %d handPosition = %d\n", choice1, choice2, choice3, handPosition);
call    0 returned 100%
        -:   95:
        -:   96:			/*card effect - return value pass or fail*/
       31:   97:			returnValue = cardEffect(adventurer, choice1, choice2, choice3, G, handPosition, 0);
call    0 returned 100%
       31:   98:			if(returnValue == 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   99:				returnPass++;
    #####:  100:				printf("	RETURN VALUE PASS\n");
call    0 never executed
        -:  101:			} else {
       31:  102:				returnFail++;
       31:  103:				printf("	RETURN VALUE FAIL\n");
call    0 returned 100%
        -:  104:			}
        -:  105:
        -:  106:			/*loop through players hand again - compare tresaures counts*/
      857:  107:			for(card = 0; card < G->handCount[player]; card++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
      826:  108:				cardEnum = G->hand[player][card]; //get card type
      826:  109:				if(cardEnum == copper || cardEnum == silver || cardEnum == gold){
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 96% (fallthrough)
branch  3 taken 4%
branch  4 taken 4% (fallthrough)
branch  5 taken 96%
       99:  110:					treasuresAfter++;
        -:  111:				}
        -:  112:			}
       31:  113:			printf("Treasures After: %d\n", treasuresAfter);
call    0 returned 100%
        -:  114:
        -:  115:			/*treasure count fail or pass*/
       31:  116:			if(treasuresAfter == treasuresBefore + 2){
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
        4:  117:				treasurePass++;
        4:  118:				printf("	TREASURE COUNT PASS\n");
call    0 returned 100%
        -:  119:			} else {
       27:  120:				treasureFail++;
       27:  121:				printf("	TREASURE COUNT FAIL\n");
call    0 returned 100%
        -:  122:			}
        -:  123:		}
        -:  124:
        -:  125:		/*print out results*/
       10:  126:		printf("Times Treasures Count Passes: %d\n", treasurePass);
call    0 returned 100%
       10:  127:		printf("Times Treasures Count Fails: %d\n", treasureFail);
call    0 returned 100%
       10:  128:		printf("Times Return Value Passes: %d\n", returnPass);
call    0 returned 100%
       10:  129:		printf("Times Return Value Passes: %d\n", returnFail);
call    0 returned 100%
        -:  130:	}
        -:  131:
        1:  132:	printf("---Random Testing Adventurer Card COMPLETE---\n\n\n\n");
call    0 returned 100%
        1:  133:	return 0;
        -:  134:}
