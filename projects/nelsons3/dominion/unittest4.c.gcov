        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "rngs.h"
        -:    3:#include <stdio.h>
        -:    4:#include <math.h>
        -:    5:#include <stdlib.h>
        -:    6:
function main called 1 returned 100% blocks executed 79%
        1:    7:int main()
        -:    8:{
        1:    9:	 printf("\n\ntesting isGameOver\n");
call    0 returned 100%
        -:   10:	int counter;
        1:   11:	struct gameState *state = malloc(sizeof(struct gameState));
        -:   12://no more province cards ends the game
        -:   13://set provinces == 0 then test for running game
        1:   14:	state->supplyCount[province] = 0 ; 
        1:   15:	if( isGameOver(state) == 1 )
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   16:    {
        1:   17:		printf("game ends when all provinces are gone\n");
call    0 returned 100%
    #####:   18:	} else if ( isGameOver(state) == 0 ){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   19:		printf("error->isGameOver: no provinces available but game still running\n");
call    0 never executed
        -:   20:	}
        -:   21://game also ends when 3 supply piles are consumed 
        -:   22://set the supply count to 3 then test for running game
        4:   23:	for (counter = 0; counter < 3 ; counter++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   24:    {
        3:   25:		state->supplyCount[counter] = 0;
        -:   26:	} 
        1:   27:	if( isGameOver(state) == 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:   28:    {
    #####:   29:		printf("error->isGameOver: returned false with win condition\n");
call    0 never executed
        1:   30:	} else if (isGameOver(state) == 1){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   31:		printf("supply pile Win Condition properly returned as true \n");
call    0 returned 100%
        -:   32:	}
        1:   33:	printf("\nUnit test 4 passed. \n");
call    0 returned 100%
        1:   34:return 0;
        -:   35:}
