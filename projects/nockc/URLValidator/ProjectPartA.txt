Tatsiana Clifton             cliftota
Alexandria Marsh          marshal
Christina Nock               nockc

CS362
Final Project PartA

Submit a file called ProjectPartA.txt with your writeup. You can submit the file under the folder URLValidator within on ONID directory. (How to setup this folder will be explained soon.)


Explain testIsValid Function of UrlValidator test code. 
The testIsValid() function calls the testValid(Object[] testObjects, long options) function and passes two parameters to it, “testUrlParts” and “UrlValidator.ALLOW_ALL_SCHEMES”. “testUrlParts” is an Object array of ResultPair arrays. Each ResultPair represents part of a complete URL: a scheme, authority, port, path, or query. For each of these parts, they can be valid or invalid.  In order for a URL to be considered acceptable all 4 parts must be individually valid. “UrlValidator.ALLOW_ALL_SCHEMES” is an option which when enabled lets any scheme pass validation, bypassing the default of considering only http, https, and ftp to be valid schemes. 
The testIsValid object checks for incorrect URL parts sequentially so the point of failure can be identified and isolated. It begins with two URLS ( http://www.google.com and http://www.google.com/ ) having their validity confirmed with an AssertTrue. Then we create a testBuffer ( modifiable string ) and set a flag variable, expected, to true. Then we enter a for loop to traverse the object arrays of url parts, starting with the first part scheme, get the scheme url part at testPartsIndexIndex (as a ResultPair[]), append the scheme part to testBuffer, and set expected value to true or false depending on value of scheme’s “validity” property. 
The above process continues as long as testPartsIndexIndex < testPartsIndex.length which means it will continue the process for each URL part authority, port, and then optionally for path until query where then testPartsIndexIndex will be 4. At this point testIsValid has tried all possible permutations of 4 parts. Now that we have all the URL parts in the buffer, we convert it to a string url, pass it to urlVal.isValid() and store the return value in a Boolean result. If result is true, then url is printed. There is also an assertEquals call that prints an error message if expected and result are not equal. 

Explain how it is building all the urls. Give an example of valid url being tested and an invalid url being tested by testIsValid() method.
We repeat this process for the other URL parts, with the last one being query. At the end of this process, testBuffer is made into a string url.
There is test data for creating a composite URL at the bottom of UrlValidatorTest and we can use the first index of each ResultPair array to build a sample URL. First we would take the first index of testUrlScheme so http:// will be added to the url and expected is set to true. Second we would take the first index of testUrlAuthority so www.google.com will be added to the url and expected is set to true. Third we would take the first index of testUrlPort so :80 will be added to the url and expected is set to true. Fourth we would take the first index of testPath so /test1 will be added to the url and expected is set to true. Adding a testQuery is optional. So an example of a valid url being tested is http://www.google.com:80/test1. An example of an invalid url being tested is htp://www.google.com:80/test1.

Give how many total number of urls it is testing.

To find the total number of urls it is testing, we add the sizes of each ResultPair array for the parts like below:
Scheme – 9
Authority – 19
Port – 7
Path – 10
Query – 3
Total number of urls tested = 9 * 19 * 7 * 10 * 3 = 35,910

Do you think that a real world test (URL Validator's testIsValid() test in this case) is very different than the unit tests and card tests that we wrote (in terms of concepts & complexity)? Explain in few lines. 

This example of a real world test ( like testIsValid() ) has the same idea as the unit and card tests we created in class, because we have a suite of tests that provide the expected value and confirm or deny that the actual produced value matches the expected. One difference between this test and our tests from class is in our work we wrote individual tests that checked a single variable for correctness, while in this test we are looping through five parts of a URL and as we append, checking each part’s validity. In our class tests, we could accept as a “success” multiple things, such as an inequality or a range.  In our unit and card tests we had some flexibility, but for this test one invalid URL part renders the entire URL invalid. Also, this test is not as similar to our random card tests and is not as suited to randomized testing as dominion playing. The reason for this is that URLs have strict rules and structure for each part so for instance, you could not have a randomized value for scheme.

