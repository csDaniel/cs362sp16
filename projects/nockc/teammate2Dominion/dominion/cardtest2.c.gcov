        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * cardtest2.c
        -:    3: *
        -:    4: 
        -:    5: */
        -:    6:
        -:    7:/*
        -:    8: * Include the following lines in your makefile:
        -:    9: *
        -:   10: * cardtest2: cardtest2.c dominion.o rngs.o
        -:   11: *      gcc -o cardtest2 -g  cardtest2.c dominion.o rngs.o $(CFLAGS)
        -:   12: */
        -:   13:
        -:   14:
        -:   15:#include "dominion.h"
        -:   16:#include "dominion_helpers.h"
        -:   17:#include <string.h>
        -:   18:#include <stdio.h>
        -:   19:#include <assert.h>
        -:   20:#include "rngs.h"
        -:   21:#include <stdlib.h>
        -:   22:
        -:   23:#define TESTCARD "adventurer"
        -:   24:
function main called 1 returned 100% blocks executed 73%
        1:   25:int main() {
        1:   26:    int numPlayers = 2, thisPlayer = 0, otherPlayer = 1;
        1:   27:    int newCards = 2, discarded = 1;
        1:   28:    int errors = 0;
        1:   29:    int seed = 1000;
        1:   30:    int choice1 = 0, choice2 = 0, choice3 = 0;
        1:   31:    int handpos = 0, bonus = 0;
        -:   32:    int testTreasureCount, realTreasureCount;
        -:   33:    int testHandCount, realHandCount;
        1:   34:    int handIndex, shuffledCards = 0;
        -:   35:    struct gameState G, testG;
        1:   36:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   37:			sea_hag, tribute, smithy, council_room};
        -:   38:    
        -:   39:    // initialize a game state and player cards
        1:   40:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   41:    //insert a adventurer card in players hand for testing
        1:   42:    G.hand[thisPlayer][0] = adventurer; 
        1:   43:    printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
call    0 returned 100%
        -:   44:    // copy the game state to a test case
        1:   45:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   46:    
        -:   47:    //get amount of treasure cards in hand before adventure card is played
        1:   48:    realHandCount = G.handCount[thisPlayer];  //get current num of cards in hand
        -:   49:    
        -:   50:    //print players hand for error checking. 
        1:   51:    realTreasureCount = 0;
        -:   52://    if(realHandCount > 0) printf("#  Card\n");
        6:   53:    for(handIndex = 0; handIndex < realHandCount; handIndex++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   54:        int card = G.deck[thisPlayer][handIndex];
        5:   55:        if(card == 4 || card == 5 || card == 6){
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        3:   56:           realTreasureCount++;    
        -:   57:        }
        -:   58:    }
        -:   59://    printf("Player %d's hand has %d treasure cards BEFORE:\n", thisPlayer, realTreasureCount);
        -:   60://    printf("\n");  
        -:   61:    
        -:   62:    
        -:   63:    //call cardEffect
        1:   64:    cardEffect(smithy, choice1, choice2, choice3, &testG, handpos, &bonus);
call    0 returned 100%
        -:   65:    
        -:   66:    //check to see that 2 treasure cards 
        -:   67:    //test to make sure play is recieving 2 cards
        -:   68:    //and then discarding 1, resulting in the handCount
        -:   69:    //growing by 1
        -:   70: //   printf("Player %d hand count = %d, expected = %d\n", thisPlayer, testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        1:   71:    if(testG.handCount[thisPlayer] != G.handCount[thisPlayer] + newCards - discarded){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   72:        //check if hand is correct
        1:   73:            printf("****FAIL Player %d Returned Hand Count = %d, expected = %d\n", thisPlayer, testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded); 
call    0 returned 100%
        1:   74:            errors++;
        -:   75:    }
        -:   76:    
        -:   77:    //test to see that cards added are treasure cards
        -:   78:    //the enum for copper is 4, silver =5, and gold =6
        -:   79:    //get amount of treasure cards in hand before adventure card is played
        1:   80:    testHandCount = testG.handCount[thisPlayer];  //get current num of cards in hand
        -:   81:    
        -:   82:    //print players hand for error checking. 
        1:   83:    testTreasureCount = 0;
        -:   84: //   if(testHandCount > 0) printf("#  Card\n");
        9:   85:    for(handIndex = 0; handIndex < testHandCount; handIndex++) {
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
        8:   86:        int card = testG.deck[thisPlayer][handIndex];
        8:   87:        if(card == 4 || card == 5 || card == 6){
branch  0 taken 38% (fallthrough)
branch  1 taken 63%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        5:   88:           testTreasureCount++;    
        -:   89:        }
        -:   90:    }
        -:   91://    printf("Player %d's test hand has %d treasure cards AFTER:\n", thisPlayer, testTreasureCount);
        -:   92://    printf("\n");
        -:   93://    printf("Player %d treasure count in hand= %d, expected = %d\n", thisPlayer, testTreasureCount, realTreasureCount+2);
        1:   94:    if(testTreasureCount != realTreasureCount+2){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   95:        //check if hand is correct
    #####:   96:            printf("****FAIL Player %d Returned Treasure Count in Hand = %d, expected = %d\n", thisPlayer, testTreasureCount, realTreasureCount+2); 
call    0 never executed
    #####:   97:            errors++;
        -:   98:    }
        -:   99:    
        -:  100:    //
        -:  101:    //test to make sure player is drawing from their own pile
        -:  102://    printf("Player %d deck count = %d, expected = %d\n", thisPlayer, testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
        1:  103:    if(testG.deckCount[thisPlayer] != G.deckCount[thisPlayer] - newCards + shuffledCards){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  104:        //check if deck is correct
        1:  105:            printf("****FAIL Returned Deck Count for Player %d = %d, expected = %d\n", thisPlayer, testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards); 
call    0 returned 100%
        1:  106:            errors++;
        -:  107:    }
        -:  108:    
        -:  109:    //test to make sure other players game state has not changed
        -:  110:    //test to make sure other players hand is not changed
        1:  111:    int recievedResult = testG.handCount[otherPlayer];
        1:  112:    int expected = G.handCount[otherPlayer];
        -:  113: //   printf("Player %d hand count = %d, expected = %d\n", otherPlayer, recievedResult, expected);
        1:  114:    if(recievedResult != expected){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  115:        //check if hand is correct
    #####:  116:            printf("****FAIL Returned Hand Count for Player %d = %d, expected = %d\n", otherPlayer, recievedResult, expected); 
call    0 never executed
    #####:  117:            errors++;
        -:  118:    }
        -:  119:    
        -:  120:    //test to make sure other player deck is same and first player did not draw
        -:  121:    //from other players pile
        -:  122://    printf("Player %d deck count = %d, expected = %d\n", otherPlayer, testG.deckCount[otherPlayer], G.deckCount[otherPlayer]);
        1:  123:    if(testG.deckCount[otherPlayer] != G.deckCount[otherPlayer]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  124:        //check if deck is correct
    #####:  125:            printf("****FAIL Returned Deck Count for Player %d = %d, expected = %d\n", otherPlayer, testG.deckCount[thisPlayer], G.deckCount[thisPlayer]); 
call    0 never executed
    #####:  126:            errors++;
        -:  127:    }
        -:  128:    
        -:  129:    //test to make sure victory card piles where untouched.
        -:  130:    //check curse
        1:  131:    if(testG.supplyCount[curse] != G.supplyCount[curse]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  132:         printf("****FAIL Curse Count for Player %d = %d, expected = %d\n", thisPlayer, testG.supplyCount[curse], G.supplyCount[curse]); 
call    0 never executed
    #####:  133:            errors++;
        -:  134:    }
        -:  135:    //check estate
        1:  136:    if(testG.supplyCount[estate] != G.supplyCount[estate]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  137:         printf("****FAIL Estate Count for Player %d = %d, expected = %d\n", thisPlayer, testG.supplyCount[estate], G.supplyCount[estate]); 
call    0 returned 100%
        1:  138:            errors++;
        -:  139:    }
        -:  140:    //check duchy
        1:  141:    if(testG.supplyCount[duchy] != G.supplyCount[duchy]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  142:         printf("****FAIL Duchy Count for Player %d = %d, expected = %d\n", thisPlayer, testG.supplyCount[duchy], G.supplyCount[duchy]); 
call    0 never executed
    #####:  143:            errors++;
        -:  144:    }
        -:  145:    //check province
        1:  146:    if(testG.supplyCount[province] != G.supplyCount[province]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  147:         printf("****FAIL Province Count for Player %d = %d, expected = %d\n", thisPlayer, testG.supplyCount[province], G.supplyCount[province]); 
call    0 never executed
    #####:  148:            errors++;
        -:  149:    }
        -:  150:    
        -:  151:    //test to make sure the kingdom cards count have not been altered
        -:  152:    int i;
       11:  153:    for(i=0; i < 10; i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:  154:        if(testG.supplyCount[k[i]] != G.supplyCount[k[i]]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  155:         printf("****FAIL Count for Player %d = %d, expected = %d\n", thisPlayer, testG.supplyCount[k[i]], G.supplyCount[k[i]]); 
call    0 never executed
    #####:  156:            errors++;
    #####:  157:         printf("%d is incorrect\n", k[i]);    
call    0 never executed
        -:  158:        }
        -:  159:    }
        -:  160:    
        1:  161:    if(errors == 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  162:     printf("ALL TESTS PASS for adventurer card.\n");   
call    0 never executed
        -:  163:    }
        -:  164:    else{
        1:  165:     printf("FAIL: There are %d errors for playing adventurer card.\n", errors);   
call    0 returned 100%
        -:  166:    }
        1:  167: return 0; 
        -:  168:}
