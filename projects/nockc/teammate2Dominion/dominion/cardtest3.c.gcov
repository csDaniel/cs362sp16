        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * cardtest3.c
        -:    3: *
        -:    4: 
        -:    5: */
        -:    6:
        -:    7:/*
        -:    8: * Include the following lines in your makefile:
        -:    9: *
        -:   10: * cardtest3: cardtest3.c dominion.o rngs.o
        -:   11: *      gcc -o cardtest3 -g  cardtest3.c dominion.o rngs.o $(CFLAGS)
        -:   12: */
        -:   13:
        -:   14:
        -:   15:#include "dominion.h"
        -:   16:#include "dominion_helpers.h"
        -:   17:#include <string.h>
        -:   18:#include <stdio.h>
        -:   19:#include <assert.h>
        -:   20:#include "rngs.h"
        -:   21:#include <stdlib.h>
        -:   22:
        -:   23:#define TESTCARD "village"
        -:   24:
function main called 1 returned 100% blocks executed 63%
        1:   25:int main() {
        1:   26:    int numPlayers = 2;
        1:   27:    int choice1 = 0, choice2 = 0, choice3 = 0;
        1:   28:    int handpos = 0, bonus = 0;
        1:   29:    int thisPlayer = 0, otherPlayer = 1;
        1:   30:    int shuffledCards = 0;
        1:   31:    int seed = 1000;
        1:   32:    int newCards = 1;
        1:   33:    int discarded = 1;
        1:   34:    int errors = 0;
        -:   35:    int recievedResult, expected;
        -:   36:    struct gameState G, testG;
        1:   37:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   38:			sea_hag, tribute, smithy, council_room};
        -:   39:    
        -:   40:    // initialize a game state and player cards
        1:   41:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   42:    //insert a village card in players hand for testing
        1:   43:    G.hand[thisPlayer][0] = village; 
        -:   44:    
        1:   45:	printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
call    0 returned 100%
        -:   46:    // copy the game state to a test case
        1:   47:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   48:    //call cardEffect
        1:   49:    cardEffect(village, choice1, choice2, choice3, &testG, handpos, &bonus);
call    0 returned 100%
        -:   50:    
        -:   51:    //test to make sure play is recieving 1 cards
        -:   52:    //the player should draw 1 card and discard the village card
        -:   53:    //this should make the hand the same count
        1:   54:    recievedResult = testG.handCount[thisPlayer];
        1:   55:    expected = G.handCount[thisPlayer] + newCards - discarded;
        -:   56: //   printf("Player %d hand count = %d, expected = %d\n", thisPlayer, recievedResult, expected);
        1:   57:    if(recievedResult != expected){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   58:        //check if hand is correct
        1:   59:            printf("****FAIL Returned Hand Count = %d, expected = %d\n", recievedResult, expected); 
call    0 returned 100%
        1:   60:            errors++;
        -:   61:    }
        -:   62:    
        -:   63:    //test to make sure player is drawing from their own pile
        -:   64: //   printf("Player %d deck count = %d, expected = %d\n", thisPlayer, testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
        1:   65:    if(testG.deckCount[thisPlayer] != G.deckCount[thisPlayer] - newCards + shuffledCards){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   66:        //check if deck is correct
        1:   67:            printf("****FAIL Returned Deck Count for Player %d = %d, expected = %d\n", thisPlayer, testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards); 
call    0 returned 100%
        1:   68:            errors++;
        -:   69:    }
        -:   70:    
        -:   71:    //test for players number of actions
        -:   72:    //the player shoud have 2 action moves
        -:   73: //   printf("Player %d action count = %d, expected = %d\n", thisPlayer, testG.numActions, G.numActions+2);
        1:   74:    if(testG.numActions != G.numActions+2){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   75:        //check if deck is correct
    #####:   76:            printf("****FAIL Returned Action Count for Player %d = %d, expected = %d\n", thisPlayer, testG.numActions, G.numActions+2); 
call    0 never executed
    #####:   77:            errors++;
        -:   78:    }
        -:   79:    
        -:   80:        //test to make sure other players game state has not changed
        -:   81:    
        -:   82:    //test to make sure other players hand is not changed
        1:   83:    recievedResult = testG.handCount[otherPlayer];
        1:   84:    expected = G.handCount[otherPlayer];
        -:   85: //   printf("Player %d hand count = %d, expected = %d\n", otherPlayer, recievedResult, expected);
        1:   86:    if(recievedResult != expected){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   87:        //check if hand is correct
    #####:   88:            printf("****FAIL Returned Hand Count for Player %d = %d, expected = %d\n", otherPlayer, recievedResult, expected); 
call    0 never executed
    #####:   89:            errors++;
        -:   90:    }
        -:   91:    
        -:   92:    //test to make sure other player deck is same and first player did not draw
        -:   93:    //from other players pile
        -:   94://    printf("Player %d deck count = %d, expected = %d\n", otherPlayer, testG.deckCount[otherPlayer], G.deckCount[otherPlayer]);
        1:   95:    if(testG.deckCount[otherPlayer] != G.deckCount[otherPlayer]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   96:        //check if deck is correct
    #####:   97:            printf("****FAIL Returned Deck Count for Player %d = %d, expected = %d\n", otherPlayer, testG.deckCount[thisPlayer], G.deckCount[thisPlayer]); 
call    0 never executed
    #####:   98:            errors++;
        -:   99:    }
        -:  100:    
        -:  101:    //test to make sure victory card piles where untouched.
        -:  102:    //check curse
        1:  103:    if(testG.supplyCount[curse] != G.supplyCount[curse]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  104:         printf("****FAIL Curse Count for Player %d = %d, expected = %d\n", thisPlayer, testG.supplyCount[curse], G.supplyCount[curse]); 
call    0 never executed
    #####:  105:            errors++;
        -:  106:    }
        -:  107:    //check estate
        1:  108:    if(testG.supplyCount[estate] != G.supplyCount[estate]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  109:         printf("****FAIL Estate Count for Player %d = %d, expected = %d\n", thisPlayer, testG.supplyCount[estate], G.supplyCount[estate]); 
call    0 returned 100%
        1:  110:            errors++;
        -:  111:    }
        -:  112:    //check duchy
        1:  113:    if(testG.supplyCount[duchy] != G.supplyCount[duchy]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  114:         printf("****FAIL Duchy Count for Player %d = %d, expected = %d\n", thisPlayer, testG.supplyCount[duchy], G.supplyCount[duchy]); 
call    0 never executed
    #####:  115:            errors++;
        -:  116:    }
        -:  117:    //check province
        1:  118:    if(testG.supplyCount[province] != G.supplyCount[province]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  119:         printf("****FAIL Province Count for Player %d = %d, expected = %d\n", thisPlayer, testG.supplyCount[province], G.supplyCount[province]); 
call    0 never executed
    #####:  120:            errors++;
        -:  121:    }
        -:  122:    
        -:  123:    //test to make sure the kingdom cards count have not been altered
        -:  124:    int i;
       11:  125:    for(i=0; i < 10; i++){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       10:  126:        if(testG.supplyCount[k[i]] != G.supplyCount[k[i]]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  127:         printf("****FAIL Count for Player %d = %d, expected = %d\n", thisPlayer, testG.supplyCount[k[i]], G.supplyCount[k[i]]); 
call    0 never executed
    #####:  128:            errors++;
    #####:  129:         printf("%d is incorrect\n", k[i]);    
call    0 never executed
        -:  130:        }
        -:  131:    }
        -:  132:    
        -:  133:    
        -:  134:    
        -:  135:    
        -:  136:    
        -:  137:    
        -:  138:    
        -:  139:    
        1:  140:    if(errors == 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  141:     printf("ALL TESTS PASS for village card.\n");   
call    0 never executed
        -:  142:    }
        -:  143:    else{
        1:  144:     printf("FAIL: There are %d errors for playing village card.\n", errors);   
call    0 returned 100%
        -:  145:    }
        -:  146:    
        -:  147:    
        -:  148:    
        -:  149:    
        1:  150: return 0;   
        -:  151:}
