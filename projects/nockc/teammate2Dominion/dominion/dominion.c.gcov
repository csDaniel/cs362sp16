        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function playSmithyCard called 2 returned 100% blocks executed 100%
        2:    8:void playSmithyCard(int handPos, struct gameState *state){
        -:    9:    //find current player
        2:   10:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:   11:    int i;
        -:   12:    //+3 Cards
       10:   13:      for (i = 0; i <= 3; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:   14:	{
        8:   15:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:   16:	}
        -:   17:			
        -:   18:      //discard card from hand
        2:   19:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:   20:}
        -:   21:
function playAdventurerCard called 0 returned 0% blocks executed 0%
    #####:   22:void playAdventurerCard(struct gameState *state){
        -:   23:     //find current player
    #####:   24:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -:   25:    //set the amount of treasure to 0
    #####:   26:    int drawntreasure = 0;
        -:   27:    //set z to 0
    #####:   28:    int z = 0;
        -:   29:    int cardDrawn;
        -:   30:    //initialize a temp hand
        -:   31:    int temphand[MAX_HAND];
        -:   32:    
    #####:   33:    while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####:   34:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:   35:          shuffle(currentPlayer, state);
call    0 never executed
        -:   36:        }
    #####:   37:        drawCard(currentPlayer, state);
call    0 never executed
    #####:   38:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:   39:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:   40:          drawntreasure++;
        -:   41:        else{
    #####:   42:          temphand[z]=cardDrawn;
    #####:   43:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:   44:          z++;
        -:   45:        }
        -:   46:          }
    #####:   47:     while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####:   48:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:   49:        z=z-1;
        -:   50:          } 
    #####:   51:}
        -:   52:    
function playVillageCard called 3 returned 100% blocks executed 100%
        3:   53:void playVillageCard(int handPos, struct gameState *state){
        -:   54:       //find current player
        3:   55:    int currentPlayer = whoseTurn(state); 
call    0 returned 100%
        -:   56:    
        -:   57:      //+1 Card
        3:   58:      drawCard(currentPlayer, state);
call    0 returned 100%
        3:   59:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:   60:    
        -:   61:      //+2 Actions
        3:   62:      state->numActions = state->numActions + 2;
        -:   63:			
        -:   64:      //discard played card from hand
        3:   65:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        3:   66:}
        -:   67:
function playGreat_HallCard called 1 returned 100% blocks executed 100%
        1:   68:void playGreat_HallCard(int handPos, struct gameState *state){
        -:   69:    //find current player
        1:   70:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:   71:    
        -:   72:    //+1 Card
        1:   73:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:   74:			
        -:   75:      //+1 Actions
        1:   76:      state->numActions++;
        -:   77:			
        -:   78:      //discard card from hand
        1:   79:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:   80:}
        -:   81:
function playMinionCard called 1 returned 100% blocks executed 22%
        1:   82:void playMinionCard(int handPos, int choice1, int choice2, struct gameState *state){
        -:   83:    int i;
        -:   84:    int j;
        -:   85:    //find current player
        1:   86:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:   87:    
        -:   88:    int cardDrawn;
        -:   89:    
        -:   90:    //+1 action
        1:   91:      state->numActions++;
        -:   92:			
        -:   93:      //discard card from hand
        1:   94:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:   95:			
        1:   96:      if (choice1)		//+2 coins
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   97:	{
    #####:   98:	  state->coins = state->coins + 2;
        -:   99:	}
        -:  100:			
        1:  101:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  102:	{
        -:  103:	  //discard hand
    #####:  104:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  105:	    {
    #####:  106:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  107:	    }
        -:  108:				
        -:  109:	  //draw 4
    #####:  110:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  111:	    {
    #####:  112:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  113:	    }
        -:  114:				
        -:  115:	  //other players discard hand and redraw if hand size > 4
    #####:  116:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  117:	    {
    #####:  118:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  119:		{
    #####:  120:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  121:		    {
        -:  122:		      //discard hand
    #####:  123:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  124:			{
    #####:  125:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  126:			}
        -:  127:							
        -:  128:		      //draw 4
    #####:  129:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  130:			{
    #####:  131:			  drawCard(i, state);
call    0 never executed
        -:  132:			}
        -:  133:		    }
        -:  134:		}
        -:  135:	    }
        -:  136:				
        -:  137:	}
        1:  138:      return 0;   
        -:  139:}
        -:  140:    
function compare called 48360 returned 100% blocks executed 83%
    48360:  141:int compare(const void* a, const void* b) {
    48360:  142:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  143:    return 1;
    48360:  144:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
    12896:  145:    return -1;
    35464:  146:  return 0;
        -:  147:}
        -:  148:
        -:  149:
function newGame called 0 returned 0% blocks executed 0%
    #####:  150:struct gameState* newGame() {
    #####:  151:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  152:  return g;
        -:  153:}
        -:  154:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:  155:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  156:		  int k8, int k9, int k10) {
    #####:  157:  int* k = malloc(10 * sizeof(int));
    #####:  158:  k[0] = k1;
    #####:  159:  k[1] = k2;
    #####:  160:  k[2] = k3;
    #####:  161:  k[3] = k4;
    #####:  162:  k[4] = k5;
    #####:  163:  k[5] = k6;
    #####:  164:  k[6] = k7;
    #####:  165:  k[7] = k8;
    #####:  166:  k[8] = k9;
    #####:  167:  k[9] = k10;
    #####:  168:  return k;
        -:  169:}
        -:  170:
function initializeGame called 1602 returned 100% blocks executed 94%
     1602:  171:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  172:		   struct gameState *state) {
        -:  173:
        -:  174:  int i;
        -:  175:  int j;
        -:  176:  int it;			
        -:  177:  //set up random number generator
     1602:  178:  SelectStream(1);
call    0 returned 100%
     1602:  179:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:  180:  
        -:  181:  //check number of players
     1602:  182:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  183:    {
    #####:  184:      return -1;
        -:  185:    }
        -:  186:
        -:  187:  //set number of players
     1602:  188:  state->numPlayers = numPlayers;
        -:  189:
        -:  190:  //check selected kingdom cards are different
    17622:  191:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  192:    {
   176220:  193:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  194:        {
   160200:  195:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  196:	    {
    #####:  197:	      return -1;
        -:  198:	    }
        -:  199:        }
        -:  200:    }
        -:  201:
        -:  202:
        -:  203:  //initialize supply
        -:  204:  ///////////////////////////////
        -:  205:
        -:  206:  //set number of Curse cards
     1602:  207:  if (numPlayers == 2)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -:  208:    {
     1592:  209:      state->supplyCount[curse] = 10;
        -:  210:    }
       10:  211:  else if (numPlayers == 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  212:    {
    #####:  213:      state->supplyCount[curse] = 20;
        -:  214:    }
        -:  215:  else
        -:  216:    {
       10:  217:      state->supplyCount[curse] = 30;
        -:  218:    }
        -:  219:
        -:  220:  //set number of Victory cards
     1602:  221:  if (numPlayers == 2)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -:  222:    {
     1592:  223:      state->supplyCount[estate] = 8;
     1592:  224:      state->supplyCount[duchy] = 8;
     1592:  225:      state->supplyCount[province] = 8;
        -:  226:    }
        -:  227:  else
        -:  228:    {
       10:  229:      state->supplyCount[estate] = 12;
       10:  230:      state->supplyCount[duchy] = 12;
       10:  231:      state->supplyCount[province] = 12;
        -:  232:    }
        -:  233:
        -:  234:  //set number of Treasure cards
     1602:  235:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1602:  236:  state->supplyCount[silver] = 40;
     1602:  237:  state->supplyCount[gold] = 30;
        -:  238:
        -:  239:  //set number of Kingdom cards
    33642:  240:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  241:    {
   264330:  242:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  243:	{
   248310:  244:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  245:	    {
        -:  246:	      //check if card is a 'Victory' Kingdom card
    16020:  247:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  248:		{
     6392:  249:		  if (numPlayers == 2){ 
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     3176:  250:		    state->supplyCount[i] = 8; 
        -:  251:		  }
       20:  252:		  else{ state->supplyCount[i] = 12; }
        -:  253:		}
        -:  254:	      else
        -:  255:		{
    12824:  256:		  state->supplyCount[i] = 10;
        -:  257:		}
    16020:  258:	      break;
        -:  259:	    }
        -:  260:	  else    //card is not in the set choosen for the game
        -:  261:	    {
   232290:  262:	      state->supplyCount[i] = -1;
        -:  263:	    }
        -:  264:	}
        -:  265:
        -:  266:    }
        -:  267:
        -:  268:  ////////////////////////
        -:  269:  //supply intilization complete
        -:  270:
        -:  271:  //set player decks
     4826:  272:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  273:    {
     3224:  274:      state->deckCount[i] = 0;
    12896:  275:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  276:	{
     9672:  277:	  state->deck[i][j] = estate;
     9672:  278:	  state->deckCount[i]++;
        -:  279:	}
    25792:  280:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  281:	{
    22568:  282:	  state->deck[i][j] = copper;
    22568:  283:	  state->deckCount[i]++;		
        -:  284:	}
        -:  285:    }
        -:  286:
        -:  287:  //shuffle player decks
     4826:  288:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  289:    {
     3224:  290:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  291:	{
    #####:  292:	  return -1;
        -:  293:	}
        -:  294:    }
        -:  295:
        -:  296:  //draw player hands
     4826:  297:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  298:    {  
        -:  299:      //initialize hand size to zero
     3224:  300:      state->handCount[i] = 0;
     3224:  301:      state->discardCount[i] = 0;
        -:  302:      //draw 5 cards
        -:  303:      // for (j = 0; j < 5; j++)
        -:  304:      //	{
        -:  305:      //	  drawCard(i, state);
        -:  306:      //	}
        -:  307:    }
        -:  308:  
        -:  309:  //set embargo tokens to 0 for all supply piles
    44856:  310:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  311:    {
    43254:  312:      state->embargoTokens[i] = 0;
        -:  313:    }
        -:  314:
        -:  315:  //initialize first player's turn
     1602:  316:  state->outpostPlayed = 0;
     1602:  317:  state->phase = 0;
     1602:  318:  state->numActions = 1;
     1602:  319:  state->numBuys = 1;
     1602:  320:  state->playedCardCount = 0;
     1602:  321:  state->whoseTurn = 0;
     1602:  322:  state->handCount[state->whoseTurn] = 0;
        -:  323:  //int it; move to top
        -:  324:
        -:  325:  //Moved draw cards to here, only drawing at the start of a turn
     9612:  326:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     8010:  327:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  328:  }
        -:  329:
     1602:  330:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  331:
     1602:  332:  return 0;
        -:  333:}
        -:  334:
function shuffle called 3226 returned 100% blocks executed 100%
     3226:  335:int shuffle(int player, struct gameState *state) {
        -:  336: 
        -:  337:
        -:  338:  int newDeck[MAX_DECK];
     3226:  339:  int newDeckPos = 0;
        -:  340:  int card;
        -:  341:  int i;
        -:  342:
     3226:  343:  if (state->deckCount[player] < 1)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        2:  344:    return -1;
     3224:  345:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  346:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  347:
    38688:  348:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    32240:  349:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    32240:  350:    newDeck[newDeckPos] = state->deck[player][card];
    32240:  351:    newDeckPos++;
   112830:  352:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
    80590:  353:      state->deck[player][i] = state->deck[player][i+1];
        -:  354:    }
    32240:  355:    state->deckCount[player]--;
        -:  356:  }
    35464:  357:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    32240:  358:    state->deck[player][i] = newDeck[i];
    32240:  359:    state->deckCount[player]++;
        -:  360:  }
        -:  361:
     3224:  362:  return 0;
        -:  363:}
        -:  364:
function playCard called 0 returned 0% blocks executed 0%
    #####:  365:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  366:{	
        -:  367:  int card;
    #####:  368:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  369:
        -:  370:  //check if it is the right phase
    #####:  371:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  372:    {
    #####:  373:      return -1;
        -:  374:    }
        -:  375:	
        -:  376:  //check if player has enough actions
    #####:  377:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  378:    {
    #####:  379:      return -1;
        -:  380:    }
        -:  381:	
        -:  382:  //get card played
    #####:  383:  card = handCard(handPos, state);
call    0 never executed
        -:  384:	
        -:  385:  //check if selected card is an action
    #####:  386:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  387:    {
    #####:  388:      return -1;
        -:  389:    }
        -:  390:	
        -:  391:  //play card
    #####:  392:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  393:    {
    #####:  394:      return -1;
        -:  395:    }
        -:  396:	
        -:  397:  //reduce number of actions
    #####:  398:  state->numActions--;
        -:  399:
        -:  400:  //update coins (Treasure cards may be added with card draws)
    #####:  401:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  402:	
    #####:  403:  return 0;
        -:  404:}
        -:  405:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  406:int buyCard(int supplyPos, struct gameState *state) {
        -:  407:  int who;
        -:  408:  if (DEBUG){
        -:  409:    printf("Entering buyCard...\n");
        -:  410:  }
        -:  411:
        -:  412:  // I don't know what to do about the phase thing.
        -:  413:
    #####:  414:  who = state->whoseTurn;
        -:  415:
    #####:  416:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  417:    if (DEBUG)
        -:  418:      printf("You do not have any buys left\n");
    #####:  419:    return -1;
    #####:  420:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  421:    if (DEBUG)
        -:  422:      printf("There are not any of that type of card left\n");
    #####:  423:    return -1;
    #####:  424:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  425:    if (DEBUG) 
        -:  426:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  427:    return -1;
        -:  428:  } else {
    #####:  429:    state->phase=1;
        -:  430:    //state->supplyCount[supplyPos]--;
    #####:  431:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  432:  
    #####:  433:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  434:    state->numBuys--;
        -:  435:    if (DEBUG)
        -:  436:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  437:  }
        -:  438:
        -:  439:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  440:  //state->discardCount[who]++;
        -:  441:    
    #####:  442:  return 0;
        -:  443:}
        -:  444:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  445:int numHandCards(struct gameState *state) {
    #####:  446:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  447:}
        -:  448:
function handCard called 0 returned 0% blocks executed 0%
    #####:  449:int handCard(int handPos, struct gameState *state) {
    #####:  450:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  451:  return state->hand[currentPlayer][handPos];
        -:  452:}
        -:  453:
function supplyCount called 9 returned 100% blocks executed 100%
        9:  454:int supplyCount(int card, struct gameState *state) {
        9:  455:  return state->supplyCount[card];
        -:  456:}
        -:  457:
function fullDeckCount called 1606 returned 100% blocks executed 100%
     1606:  458:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  459:  int i;
     1606:  460:  int count = 0;
        -:  461:
   113934:  462:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  463:    {
   112328:  464:      if (state->deck[player][i] == card) count++;
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
        -:  465:    }
        -:  466:
   113934:  467:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  468:    {
   112328:  469:      if (state->hand[player][i] == card) count++;
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
        -:  470:    }
        -:  471:
   113934:  472:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  473:    {
   112328:  474:      if (state->discard[player][i] == card) count++;
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
        -:  475:    }
        -:  476:
     1606:  477:  return count;
        -:  478:}
        -:  479:
function whoseTurn called 101 returned 100% blocks executed 100%
      101:  480:int whoseTurn(struct gameState *state) {
      101:  481:  return state->whoseTurn;
        -:  482:}
        -:  483:
function endTurn called 40 returned 100% blocks executed 100%
       40:  484:int endTurn(struct gameState *state) {
        -:  485:  int k;
        -:  486:  int i;
       40:  487:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  488:  
        -:  489:  //Discard hand
      240:  490:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      200:  491:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      200:  492:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  493:  }
       40:  494:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  495:    
        -:  496:  //Code for determining the player
       40:  497:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
       30:  498:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  499:  }
        -:  500:  else{
       10:  501:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  502:  }
        -:  503:
       40:  504:  state->outpostPlayed = 0;
       40:  505:  state->phase = 0;
       40:  506:  state->numActions = 1;
       40:  507:  state->coins = 0;
       40:  508:  state->numBuys = 1;
       40:  509:  state->playedCardCount = 0;
       40:  510:  state->handCount[state->whoseTurn] = 0;
        -:  511:
        -:  512:  //int k; move to top
        -:  513:  //Next player draws hand
      240:  514:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      200:  515:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  516:  }
        -:  517:
        -:  518:  //Update money
       40:  519:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  520:
       40:  521:  return 0;
        -:  522:}
        -:  523:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  524:int isGameOver(struct gameState *state) {
        -:  525:  int i;
        -:  526:  int j;
        -:  527:	
        -:  528:  //if stack of Province cards is empty, the game ends
    #####:  529:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  530:    {
    #####:  531:      return 1;
        -:  532:    }
        -:  533:
        -:  534:  //if three supply pile are at 0, the game ends
    #####:  535:  j = 0;
    #####:  536:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  537:    {
    #####:  538:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  539:	{
    #####:  540:	  j++;
        -:  541:	}
        -:  542:    }
    #####:  543:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  544:    {
    #####:  545:      return 1;
        -:  546:    }
        -:  547:
    #####:  548:  return 0;
        -:  549:}
        -:  550:
function scoreFor called 324 returned 100% blocks executed 92%
      324:  551:int scoreFor (int player, struct gameState *state) {
        -:  552:
        -:  553:  int i;
      324:  554:  int score = 0;
        -:  555:  //score from hand
     1404:  556:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
        -:  557:    {
     1080:  558:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
     1080:  559:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
     1080:  560:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
     1080:  561:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
     1080:  562:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
     1080:  563:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
call    2 returned 100%
        -:  564:    }
        -:  565:
        -:  566:  //score from discard
     1044:  567:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  568:    {
      720:  569:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
      720:  570:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
      720:  571:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
      720:  572:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
      720:  573:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
      720:  574:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
call    2 returned 100%
        -:  575:    }
        -:  576:
        -:  577:  //score from deck
     1044:  578:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  579:    {
      720:  580:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
      720:  581:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      720:  582:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      720:  583:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      720:  584:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
      720:  585:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
call    2 returned 100%
        -:  586:    }
        -:  587:
      324:  588:  return score;
        -:  589:}
        -:  590:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  591:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  592:  int i;	
        -:  593:  int j;
        -:  594:  int highScore;
        -:  595:  int currentPlayer;
        -:  596:
        -:  597:  //get score for each player
    #####:  598:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  599:    {
        -:  600:      //set unused player scores to -9999
    #####:  601:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  602:	{
    #####:  603:	  players[i] = -9999;
        -:  604:	}
        -:  605:      else
        -:  606:	{
    #####:  607:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  608:	}
        -:  609:    }
        -:  610:
        -:  611:  //find highest score
    #####:  612:  j = 0;
    #####:  613:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  614:    {
    #####:  615:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  616:	{
    #####:  617:	  j = i;
        -:  618:	}
        -:  619:    }
    #####:  620:  highScore = players[j];
        -:  621:
        -:  622:  //add 1 to players who had less turns
    #####:  623:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  624:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  625:    {
    #####:  626:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  627:	{
    #####:  628:	  players[i]++;
        -:  629:	}
        -:  630:    }
        -:  631:
        -:  632:  //find new highest score
    #####:  633:  j = 0;
    #####:  634:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  635:    {
    #####:  636:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  637:	{
    #####:  638:	  j = i;
        -:  639:	}
        -:  640:    }
    #####:  641:  highScore = players[j];
        -:  642:
        -:  643:  //set winners in array to 1 and rest to 0
    #####:  644:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  645:    {
    #####:  646:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  647:	{
    #####:  648:	  players[i] = 1;
        -:  649:	}
        -:  650:      else
        -:  651:	{
    #####:  652:	  players[i] = 0;
        -:  653:	}
        -:  654:    }
        -:  655:
    #####:  656:  return 0;
        -:  657:}
        -:  658:
function drawCard called 8225 returned 100% blocks executed 85%
     8225:  659:int drawCard(int player, struct gameState *state)
        -:  660:{	int count;
        -:  661:  int deckCounter;
     8225:  662:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  663:    
        -:  664:    //Step 1 Shuffle the discard pile back into a deck
        -:  665:    int i;
        -:  666:    //Move discard to deck
        2:  667:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  668:      state->deck[player][i] = state->discard[player][i];
    #####:  669:      state->discard[player][i] = -1;
        -:  670:    }
        -:  671:
        2:  672:    state->deckCount[player] = state->discardCount[player];
        2:  673:    state->discardCount[player] = 0;//Reset discard
        -:  674:
        -:  675:    //Shufffle the deck
        2:  676:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  677:   
        -:  678:    if (DEBUG){//Debug statements
        -:  679:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  680:    }
        -:  681:    
        2:  682:    state->discardCount[player] = 0;
        -:  683:
        -:  684:    //Step 2 Draw Card
        2:  685:    count = state->handCount[player];//Get current player's hand count
        -:  686:    
        -:  687:    if (DEBUG){//Debug statements
        -:  688:      printf("Current hand count: %d\n", count);
        -:  689:    }
        -:  690:    
        2:  691:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  692:
        2:  693:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:  694:      return -1;
        -:  695:
    #####:  696:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  697:    state->deckCount[player]--;
    #####:  698:    state->handCount[player]++;//Increment hand count
        -:  699:  }
        -:  700:
        -:  701:  else{
     8223:  702:    int count = state->handCount[player];//Get current hand count for player
        -:  703:    int deckCounter;
        -:  704:    if (DEBUG){//Debug statements
        -:  705:      printf("Current hand count: %d\n", count);
        -:  706:    }
        -:  707:
     8223:  708:    deckCounter = state->deckCount[player];//Create holder for the deck count
     8223:  709:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     8223:  710:    state->deckCount[player]--;
     8223:  711:    state->handCount[player]++;//Increment hand count
        -:  712:  }
        -:  713:
     8223:  714:  return 0;
        -:  715:}
        -:  716:
function getCost called 27 returned 100% blocks executed 97%
       27:  717:int getCost(int cardNumber)
        -:  718:{
       27:  719:  switch( cardNumber ) 
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 0%
        -:  720:    {
        -:  721:    case curse:
        1:  722:      return 0;
        -:  723:    case estate:
        1:  724:      return 2;
        -:  725:    case duchy:
        1:  726:      return 5;
        -:  727:    case province:
        1:  728:      return 8;
        -:  729:    case copper:
        1:  730:      return 0;
        -:  731:    case silver:
        1:  732:      return 3;
        -:  733:    case gold:
        1:  734:      return 6;
        -:  735:    case adventurer:
        1:  736:      return 6;
        -:  737:    case council_room:
        1:  738:      return 5;
        -:  739:    case feast:
        1:  740:      return 4;
        -:  741:    case gardens:
        1:  742:      return 4;
        -:  743:    case mine:
        1:  744:      return 5;
        -:  745:    case remodel:
        1:  746:      return 4;
        -:  747:    case smithy:
        1:  748:      return 4;
        -:  749:    case village:
        1:  750:      return 3;
        -:  751:    case baron:
        1:  752:      return 4;
        -:  753:    case great_hall:
        1:  754:      return 3;
        -:  755:    case minion:
        1:  756:      return 5;
        -:  757:    case steward:
        1:  758:      return 3;
        -:  759:    case tribute:
        1:  760:      return 5;
        -:  761:    case ambassador:
        1:  762:      return 3;
        -:  763:    case cutpurse:
        1:  764:      return 4;
        -:  765:    case embargo: 
        1:  766:      return 2;
        -:  767:    case outpost:
        1:  768:      return 5;
        -:  769:    case salvager:
        1:  770:      return 4;
        -:  771:    case sea_hag:
        1:  772:      return 4;
        -:  773:    case treasure_map:
        1:  774:      return 4;
        -:  775:    }
        -:  776:	
    #####:  777:  return -1;
        -:  778:}
        -:  779:
function cardEffect called 4 returned 100% blocks executed 10%
        4:  780:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  781:{
        -:  782:  int i;
        -:  783:  int j;
        -:  784:  int k;
        -:  785:  int x;
        -:  786:  int index;
        4:  787:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        4:  788:  int nextPlayer = currentPlayer + 1;
        -:  789:
        4:  790:  int tributeRevealedCards[2] = {-1, -1};
        -:  791:  int temphand[MAX_HAND];// moved above the if statement
        4:  792:  int drawntreasure=0;
        -:  793:  int cardDrawn;
        4:  794:  int z = 0;// this is the counter for the temp hand
        4:  795:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  796:    nextPlayer = 0;
        -:  797:  }
        -:  798:  
        -:  799:	
        -:  800:  //uses switch to select card and perform actions
        4:  801:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 50%
branch  7 taken 25%
branch  8 taken 0%
branch  9 taken 25%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  802:    {
        -:  803:    case adventurer:
    #####:  804:      playAdventurerCard(state);
call    0 never executed
        -:  805:			
        -:  806:    case council_room:
        -:  807:      //+4 Cards
    #####:  808:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  809:	{
    #####:  810:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  811:	}
        -:  812:			
        -:  813:      //+1 Buy
    #####:  814:      state->numBuys++;
        -:  815:			
        -:  816:      //Each other player draws a card
    #####:  817:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  818:	{
    #####:  819:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  820:	    {
    #####:  821:	      drawCard(i, state);
call    0 never executed
        -:  822:	    }
        -:  823:	}
        -:  824:			
        -:  825:      //put played card in played card pile
    #####:  826:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  827:			
    #####:  828:      return 0;
        -:  829:			
        -:  830:    case feast:
        -:  831:      //gain card with cost up to 5
        -:  832:      //Backup hand
    #####:  833:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  834:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  835:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  836:      }
        -:  837:      //Backup hand
        -:  838:
        -:  839:      //Update Coins for Buy
    #####:  840:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  841:      x = 1;//Condition to loop on
    #####:  842:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  843:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  844:	  if (DEBUG)
        -:  845:	    printf("None of that card left, sorry!\n");
        -:  846:
        -:  847:	  if (DEBUG){
        -:  848:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  849:	  }
        -:  850:	}
    #####:  851:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  852:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  853:
        -:  854:	  if (DEBUG){
        -:  855:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  856:	  }
        -:  857:	}
        -:  858:	else{
        -:  859:
        -:  860:	  if (DEBUG){
        -:  861:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  862:	  }
        -:  863:
    #####:  864:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  865:	  x = 0;//No more buying cards
        -:  866:
        -:  867:	  if (DEBUG){
        -:  868:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  869:	  }
        -:  870:
        -:  871:	}
        -:  872:      }     
        -:  873:
        -:  874:      //Reset Hand
    #####:  875:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  876:	state->hand[currentPlayer][i] = temphand[i];
    #####:  877:	temphand[i] = -1;
        -:  878:      }
        -:  879:      //Reset Hand
        -:  880:      			
    #####:  881:      return 0;
        -:  882:			
        -:  883:    case gardens:
    #####:  884:      return -1;
        -:  885:			
        -:  886:    case mine:
    #####:  887:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  888:
    #####:  889:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  890:	{
    #####:  891:	  return -1;
        -:  892:	}
        -:  893:		
    #####:  894:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  895:	{
    #####:  896:	  return -1;
        -:  897:	}
        -:  898:
    #####:  899:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  900:	{
    #####:  901:	  return -1;
        -:  902:	}
        -:  903:
    #####:  904:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  905:
        -:  906:      //discard card from hand
    #####:  907:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  908:
        -:  909:      //discard trashed card
    #####:  910:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  911:	{
    #####:  912:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  913:	    {
    #####:  914:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  915:	      break;
        -:  916:	    }
        -:  917:	}
        -:  918:			
    #####:  919:      return 0;
        -:  920:			
        -:  921:    case remodel:
    #####:  922:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  923:
    #####:  924:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  925:	{
    #####:  926:	  return -1;
        -:  927:	}
        -:  928:
    #####:  929:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  930:
        -:  931:      //discard card from hand
    #####:  932:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  933:
        -:  934:      //discard trashed card
    #####:  935:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  936:	{
    #####:  937:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  938:	    {
    #####:  939:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  940:	      break;
        -:  941:	    }
        -:  942:	}
        -:  943:
        -:  944:
    #####:  945:      return 0;
        -:  946:		
        -:  947:    case smithy:
        2:  948:      playSmithyCard(handPos, state);
call    0 returned 100%
        -:  949:          
        -:  950:    case village:
        3:  951:      playVillageCard(handPos, state);
call    0 returned 100%
        -:  952:		
        -:  953:    case baron:
        3:  954:      state->numBuys++;//Increase buys by 1!
        3:  955:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  956:	int p = 0;//Iterator for hand!
    #####:  957:	int card_not_discarded = 1;//Flag for discard set!
    #####:  958:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  959:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  960:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  961:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  962:	    state->discardCount[currentPlayer]++;
    #####:  963:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  964:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  965:	    }
    #####:  966:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  967:	    state->handCount[currentPlayer]--;
    #####:  968:	    card_not_discarded = 0;//Exit the loop
        -:  969:	  }
    #####:  970:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  971:	    if(DEBUG) {
        -:  972:	      printf("No estate cards in your hand, invalid choice\n");
        -:  973:	      printf("Must gain an estate if there are any\n");
        -:  974:	    }
    #####:  975:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  976:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  977:	      state->supplyCount[estate]--;//Decrement estates
    #####:  978:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  979:		isGameOver(state);
call    0 never executed
        -:  980:	      }
        -:  981:	    }
    #####:  982:	    card_not_discarded = 0;//Exit the loop
        -:  983:	  }
        -:  984:			    
        -:  985:	  else{
    #####:  986:	    p++;//Next card
        -:  987:	  }
        -:  988:	}
        -:  989:      }
        -:  990:			    
        -:  991:      else{
        3:  992:	if (supplyCount(estate, state) > 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        3:  993:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 returned 100%
        3:  994:	  state->supplyCount[estate]--;//Decrement Estates
        3:  995:	  if (supplyCount(estate, state) == 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  996:	    isGameOver(state);
call    0 never executed
        -:  997:	  }
        -:  998:	}
        -:  999:      }
        -: 1000:	    
        -: 1001:      
        3: 1002:      return 0;
        -: 1003:		
        -: 1004:    case great_hall:
        1: 1005:      playGreat_HallCard(handPos, state);
call    0 returned 100%
        -: 1006:		
        -: 1007:    case minion:
        1: 1008:      playMinionCard(handPos, choice1, choice2, state);
call    0 returned 100%
        -: 1009:		
        -: 1010:    case steward:
        1: 1011:      if (choice1 == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1012:	{
        -: 1013:	  //+2 cards
    #####: 1014:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1015:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1016:	}
        1: 1017:      else if (choice1 == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1018:	{
        -: 1019:	  //+2 coins
    #####: 1020:	  state->coins = state->coins + 2;
        -: 1021:	}
        -: 1022:      else
        -: 1023:	{
        -: 1024:	  //trash 2 cards in hand
        1: 1025:	  discardCard(choice2, currentPlayer, state, 1);
call    0 returned 100%
        1: 1026:	  discardCard(choice3, currentPlayer, state, 1);
call    0 returned 100%
        -: 1027:	}
        -: 1028:			
        -: 1029:      //discard card from hand
        1: 1030:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1: 1031:      return 0;
        -: 1032:		
        -: 1033:    case tribute:
    #####: 1034:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1035:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1036:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1037:	  state->deckCount[nextPlayer]--;
        -: 1038:	}
    #####: 1039:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1040:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1041:	  state->discardCount[nextPlayer]--;
        -: 1042:	}
        -: 1043:	else{
        -: 1044:	  //No Card to Reveal
        -: 1045:	  if (DEBUG){
        -: 1046:	    printf("No cards to reveal\n");
        -: 1047:	  }
        -: 1048:	}
        -: 1049:      }
        -: 1050:	    
        -: 1051:      else{
    #####: 1052:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1053:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1054:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1055:	    state->deckCount[nextPlayer]++;
    #####: 1056:	    state->discard[nextPlayer][i] = -1;
    #####: 1057:	    state->discardCount[nextPlayer]--;
        -: 1058:	  }
        -: 1059:			    
    #####: 1060:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1061:	} 
    #####: 1062:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1063:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1064:	state->deckCount[nextPlayer]--;
    #####: 1065:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1066:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1067:	state->deckCount[nextPlayer]--;
        -: 1068:      }    
        -: 1069:		       
    #####: 1070:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1071:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1072:	state->playedCardCount++;
    #####: 1073:	tributeRevealedCards[1] = -1;
        -: 1074:      }
        -: 1075:
    #####: 1076:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1077:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1078:	  state->coins += 2;
        -: 1079:	}
        -: 1080:		    
    #####: 1081:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1082:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1083:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1084:	}
        -: 1085:	else{//Action Card
    #####: 1086:	  state->numActions = state->numActions + 2;
        -: 1087:	}
        -: 1088:      }
        -: 1089:	    
    #####: 1090:      return 0;
        -: 1091:		
        -: 1092:    case ambassador:
    #####: 1093:      j = 0;		//used to check if player has enough cards to discard
        -: 1094:
    #####: 1095:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1096:	{
    #####: 1097:	  return -1;				
        -: 1098:	}
        -: 1099:
    #####: 1100:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1101:	{
    #####: 1102:	  return -1;
        -: 1103:	}
        -: 1104:
    #####: 1105:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1106:	{
    #####: 1107:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1108:	    {
    #####: 1109:	      j++;
        -: 1110:	    }
        -: 1111:	}
    #####: 1112:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
    #####: 1114:	  return -1;				
        -: 1115:	}
        -: 1116:
        -: 1117:      if (DEBUG) 
        -: 1118:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1119:
        -: 1120:      //increase supply count for choosen card by amount being discarded
    #####: 1121:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1122:			
        -: 1123:      //each other player gains a copy of revealed card
    #####: 1124:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1125:	{
    #####: 1126:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1127:	    {
    #####: 1128:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1129:	    }
        -: 1130:	}
        -: 1131:
        -: 1132:      //discard played card from hand
    #####: 1133:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1134:
        -: 1135:      //trash copies of cards returned to supply
    #####: 1136:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1137:	{
    #####: 1138:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1139:	    {
    #####: 1140:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1141:		{
    #####: 1142:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1143:		  break;
        -: 1144:		}
        -: 1145:	    }
        -: 1146:	}			
        -: 1147:
    #####: 1148:      return 0;
        -: 1149:		
        -: 1150:    case cutpurse:
        -: 1151:
    #####: 1152:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1153:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1154:	{
    #####: 1155:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1156:	    {
    #####: 1157:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1158:		{
    #####: 1159:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1160:		    {
    #####: 1161:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1162:		      break;
        -: 1163:		    }
    #####: 1164:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1165:		    {
    #####: 1166:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1167:			{
        -: 1168:			  if (DEBUG)
        -: 1169:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1170:			}	
    #####: 1171:		      break;
        -: 1172:		    }		
        -: 1173:		}
        -: 1174:					
        -: 1175:	    }
        -: 1176:				
        -: 1177:	}				
        -: 1178:
        -: 1179:      //discard played card from hand
    #####: 1180:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1181:
    #####: 1182:      return 0;
        -: 1183:
        -: 1184:		
        -: 1185:    case embargo: 
        -: 1186:      //+2 Coins
    #####: 1187:      state->coins = state->coins + 2;
        -: 1188:			
        -: 1189:      //see if selected pile is in play
    #####: 1190:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1191:	{
    #####: 1192:	  return -1;
        -: 1193:	}
        -: 1194:			
        -: 1195:      //add embargo token to selected supply pile
    #####: 1196:      state->embargoTokens[choice1]++;
        -: 1197:			
        -: 1198:      //trash card
    #####: 1199:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1200:      return 0;
        -: 1201:		
        -: 1202:    case outpost:
        -: 1203:      //set outpost flag
    #####: 1204:      state->outpostPlayed++;
        -: 1205:			
        -: 1206:      //discard card
    #####: 1207:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1208:      return 0;
        -: 1209:		
        -: 1210:    case salvager:
        -: 1211:      //+1 buy
    #####: 1212:      state->numBuys++;
        -: 1213:			
    #####: 1214:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1215:	{
        -: 1216:	  //gain coins equal to trashed card
    #####: 1217:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1218:	  //trash card
    #####: 1219:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1220:	}
        -: 1221:			
        -: 1222:      //discard card
    #####: 1223:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1224:      return 0;
        -: 1225:		
        -: 1226:    case sea_hag:
    #####: 1227:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1228:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1229:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1230:	  state->discardCount[i]++;
    #####: 1231:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1232:	}
        -: 1233:      }
    #####: 1234:      return 0;
        -: 1235:		
        -: 1236:    case treasure_map:
        -: 1237:      //search hand for another treasure_map
    #####: 1238:      index = -1;
    #####: 1239:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1240:	{
    #####: 1241:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1242:	    {
    #####: 1243:	      index = i;
    #####: 1244:	      break;
        -: 1245:	    }
        -: 1246:	}
    #####: 1247:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1248:	{
        -: 1249:	  //trash both treasure cards
    #####: 1250:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1251:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1252:
        -: 1253:	  //gain 4 Gold cards
    #####: 1254:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1255:	    {
    #####: 1256:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1257:	    }
        -: 1258:				
        -: 1259:	  //return success
    #####: 1260:	  return 1;
        -: 1261:	}
        -: 1262:			
        -: 1263:      //no second treasure_map found in hand
    #####: 1264:      return -1;
        -: 1265:    }
        -: 1266:	
    #####: 1267:  return -1;
        -: 1268:}
        -: 1269:
function discardCard called 10 returned 100% blocks executed 78%
       10: 1270:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1271:{
        -: 1272:	
        -: 1273:  //if card is not trashed, added to Played pile 
       10: 1274:  if (trashFlag < 1)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1275:    {
        -: 1276:      //add card to played pile
        8: 1277:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        8: 1278:      state->playedCardCount++;
        -: 1279:    }
        -: 1280:	
        -: 1281:  //set played card to -1
       10: 1282:  state->hand[currentPlayer][handPos] = -1;
        -: 1283:	
        -: 1284:  //remove card from player's hand
       10: 1285:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1286:    {
        -: 1287:      //reduce number of cards in hand
    #####: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
       10: 1290:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1291:    {
        -: 1292:      //reduce number of cards in hand
    #####: 1293:      state->handCount[currentPlayer]--;
        -: 1294:    }
        -: 1295:  else 	
        -: 1296:    {
        -: 1297:      //replace discarded card with last card in hand
       10: 1298:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1299:      //set last card to -1
       10: 1300:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1301:      //reduce number of cards in hand
       10: 1302:      state->handCount[currentPlayer]--;
        -: 1303:    }
        -: 1304:	
       10: 1305:  return 0;
        -: 1306:}
        -: 1307:
function gainCard called 3 returned 100% blocks executed 70%
        3: 1308:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1309:{
        -: 1310:  //Note: supplyPos is enum of choosen card
        -: 1311:	
        -: 1312:  //check if supply pile is empty (0) or card is not used in game (-1)
        3: 1313:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1314:    {
    #####: 1315:      return -1;
        -: 1316:    }
        -: 1317:	
        -: 1318:  //added card for [whoseTurn] current player:
        -: 1319:  // toFlag = 0 : add to discard
        -: 1320:  // toFlag = 1 : add to deck
        -: 1321:  // toFlag = 2 : add to hand
        -: 1322:
        3: 1323:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1324:    {
    #####: 1325:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1326:      state->deckCount[player]++;
        -: 1327:    }
        3: 1328:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1329:    {
    #####: 1330:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1331:      state->handCount[player]++;
        -: 1332:    }
        -: 1333:  else
        -: 1334:    {
        3: 1335:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        3: 1336:      state->discardCount[player]++;
        -: 1337:    }
        -: 1338:	
        -: 1339:  //decrease number in supply pile
        3: 1340:  state->supplyCount[supplyPos]--;
        -: 1341:	 
        3: 1342:  return 0;
        -: 1343:}
        -: 1344:
function updateCoins called 1642 returned 100% blocks executed 82%
     1642: 1345:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1346:{
        -: 1347:  int i;
        -: 1348:	
        -: 1349:  //reset coin count
     1642: 1350:  state->coins = 0;
        -: 1351:
        -: 1352:  //add coins for each Treasure card in player's hand
     9852: 1353:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1354:    {
     8210: 1355:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1356:	{
     6538: 1357:	  state->coins += 1;
        -: 1358:	}
     1672: 1359:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1360:	{
    #####: 1361:	  state->coins += 2;
        -: 1362:	}
     1672: 1363:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1364:	{
    #####: 1365:	  state->coins += 3;
        -: 1366:	}	
        -: 1367:    }	
        -: 1368:
        -: 1369:  //add bonus
     1642: 1370:  state->coins += bonus;
        -: 1371:
     1642: 1372:  return 0;
        -: 1373:}
        -: 1374:
        -: 1375:
        -: 1376://end of dominion.c
        -: 1377:
