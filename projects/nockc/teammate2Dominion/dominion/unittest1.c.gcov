        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Name: Alex Marsh
        -:    3: * CS362
        -:    4: * unittest1.c
        -:    5: * This tests the function scoreFor() function in dominion.c
        -:    6: * Include the following lines in your makefile:
        -:    7: *
        -:    8: * unittest1: unittest1.c dominion.o rngs.o
        -:    9: *      gcc -o unittest1 -g  unittest1.c dominion.o rngs.o $(CFLAGS)
        -:   10: * -----------------------------------------------------------------------
        -:   11: */
        -:   12:
        -:   13:
        -:   14:#include <string.h>
        -:   15:#include <stdio.h>
        -:   16:#include <assert.h>
        -:   17:#include <math.h>
        -:   18:#include "dominion.h"
        -:   19:#include "dominion_helpers.h"
        -:   20:#include "interface.h"
        -:   21:#include "rngs.h"
        -:   22:
        -:   23:// set NOISY_TEST to 0 to remove printfs from output
        -:   24://to include printfs set to 1
        -:   25:#define NOISY_TEST 0
        -:   26:
        -:   27:
function main called 1 returned 100% blocks executed 88%
        1:   28:int main(){
        1:   29:    int seed = 1000;
        1:   30:    int numPlayer = 2;
        -:   31:    int p, r, score;
        -:   32:    int errors;
        -:   33:    int numOfCards, handIndex;
        -:   34:    int expected, vType;
        -:   35:    int discardIndex, deckIndex;
        1:   36:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   37:               , remodel, smithy, village, baron, great_hall};
        -:   38:    //this will hold some of the victory cards. The numbers are taken from 
        -:   39:    //the enumeration in dominion.h
        -:   40:    //curse and gardens are not included since they are special cases
        -:   41:    //1=estate, 2=duchy, 3=province, 16= greathall
        1:   42:    int victoryCardsArr[4] = {1, 2, 3, 16}; 
        1:   43:    char cardName[4][20] = {"estate", "duchy", "province", "great hall"}; 
        -:   44:    struct gameState G;
        -:   45:    
        1:   46:    int maxHandCount = 8;
        1:   47:    printf("----------------- Testing scoreFor() ----------------\n");
call    0 returned 100%
        1:   48:    printf("\n");
call    0 returned 100%
        -:   49:    
        -:   50://    printf("Test players hand\n");
        -:   51:    
        -:   52:    //loop through the victory cards in the victoryCardsArr
        -:   53:    //specifically estate, duchy, province, great hall
        5:   54:    for(vType=0; vType < 4; vType++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:   55:        //loop over the players
       12:   56:        for (p = 0; p <numPlayer; p++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   57:            //with two players there are 8 of each card
       80:   58:            for(numOfCards = 0; numOfCards <= 8; numOfCards++){
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
        -:   59: //               printf("Test player %d Hand with %d %s victory card(s).\n", p, numOfCards, cardName[vType]);
        -:   60:
       72:   61:                memset(&G, 23, sizeof(struct gameState)); // clear the game state  
        -:   62:
       72:   63:                r = initializeGame(numPlayer, k, seed, &G); // initialize a new game
call    0 returned 100%
        -:   64:
       72:   65:                G.handCount[p] = numOfCards;        //set the number of cards on hand
        -:   66:                //G.discardCount[p] = numOfCards;     //set the number of card in discard
        -:   67:                //G.deckCount[p] = numOfCards;             //set the number of card in the deck
        -:   68:                
        -:   69:                //set all the cards in players hand to the appropriate card
        -:   70:                int cardNum;
      720:   71:                for(cardNum = 0; cardNum <= maxHandCount; cardNum++){
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
      648:   72:                    G.hand[p][cardNum] = victoryCardsArr[vType]; 
        -:   73:                    //G.discard[p][cardNum] = estate;     
        -:   74:                    //G.deck[p][cardNum] = estate;    
        -:   75:                }
        -:   76:
       72:   77:                int handCount = G.handCount[p];  //get current num of cards in hand
        -:   78: #if (NOISY_TEST == 1)
        -:   79:                printf("HandCount is %d\n", handCount);
        -:   80:                
        -:   81:                //print players hand for error checking. 
        -:   82:                printf("Player %d's hand:\n", p);
        -:   83:                if(handCount > 0) printf("#  Card\n");
        -:   84:                for(handIndex = 0; handIndex < handCount; handIndex++) {
        -:   85:                    int card = G.hand[p][handIndex];
        -:   86:                    char name[MAX_STRING_LENGTH];
        -:   87:                    cardNumToName(card, name);
        -:   88:                    printf("%-2d %-13s\n", handIndex, name);
        -:   89:                }
        -:   90:                printf("\n");
        -:   91: #endif               
        -:   92:                
       72:   93:                score = scoreFor(p, &G);   //call scoreFor
call    0 returned 100%
        -:   94:                //find the expected score accourding to the card
       72:   95:                if(vType == 0)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
       18:   96:                    {expected = numOfCards * 1;}    //estate
       72:   97:                if(vType == 1)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
       18:   98:                    {expected = numOfCards * 3;}    //duchy
       72:   99:                if(vType == 2)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
       18:  100:                    {expected = numOfCards * 6;}    //province
       72:  101:                if(vType == 3)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
       18:  102:                    {expected = numOfCards * 1;}   //great hall
        -:  103:                 
        -:  104:
       72:  105:                if(score != expected){//check if score is correct
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  106:                    printf("****FAIL Hand score = %d, expected = %d\n", score, expected);
call    0 never executed
    #####:  107:                    errors++;
        -:  108:                }  
        -:  109:#if (NOISY_TEST == 1)
        -:  110:                else{
        -:  111:                    printf("PASS Hand score = %d, expected = %d\n", score, expected);}
        -:  112:#endif                
        -:  113:            }
        -:  114:        }
        -:  115:        
        -:  116:    }
        -:  117:    
        -:  118:    
        -:  119://    printf("Testing Discard Deck\n");
        -:  120:    
        -:  121:    //loop through the victory cards in the victoryCardsArr
        -:  122:    //specifically estate, duchy, province, great hall
        5:  123:    for(vType = 0; vType < 4; vType++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  124:        //loop over the players
       12:  125:        for (p = 0; p < numPlayer; p++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  126:            //with two players there are 8 of each card
       80:  127:            for(numOfCards = 0; numOfCards <= 8; numOfCards++){
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
        -:  128:  //              printf("Test player %d Discard with %d %s victory card(s).\n", p, numOfCards, cardName[vType]);
        -:  129:
       72:  130:                memset(&G, 23, sizeof(struct gameState)); // clear the game state  
        -:  131:
       72:  132:                r = initializeGame(numPlayer, k, seed, &G); // initialize a new game
call    0 returned 100%
        -:  133:
        -:  134:                //G.handCount[p] = numOfCards;        //set the number of cards on hand
       72:  135:                G.discardCount[p] = numOfCards;     //set the number of card in discard
        -:  136:                //G.deckCount[p] = numOfCards;             //set the number of card in the deck
        -:  137:                
        -:  138:                //set all the cards in players hand to the appropriate card
        -:  139:                //fill deck and hand with copper so there are no random victory
        -:  140:                //cards inserted. 
        -:  141:                int cardNum;
      720:  142:                for(cardNum = 0; cardNum <= maxHandCount; cardNum++){
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
      648:  143:                    G.hand[p][cardNum] = copper; 
      648:  144:                    G.discard[p][cardNum] = victoryCardsArr[vType];     
      648:  145:                    G.deck[p][cardNum] = copper;    
        -:  146:                }
        -:  147:
       72:  148:                int discardCount = G.discardCount[p];  //get current num of cards in hand
        -:  149:#if (NOISY_TEST == 1)
        -:  150:                printf("DiscardCount is %d\n", discardCount);
        -:  151:                
        -:  152:                //print players discard for error checking. 
        -:  153:                printf("Player %d's discard hand:\n", p);
        -:  154:                if(discardCount > 0) printf("#  Card\n");
        -:  155:                for(discardIndex = 0; discardIndex < discardCount; discardIndex++) {
        -:  156:                    int card = G.discard[p][discardIndex];
        -:  157:                    char name[MAX_STRING_LENGTH];
        -:  158:                    cardNumToName(card, name);
        -:  159:                    printf("%-2d %-13s\n", discardIndex, name);
        -:  160:                }
        -:  161:                printf("\n");
        -:  162:#endif                    
        -:  163:                
       72:  164:                score = scoreFor(p, &G);   //call scoreFor
call    0 returned 100%
        -:  165:                //find the expected score accourding to the card
       72:  166:                if(vType == 0)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
       18:  167:                    {expected = numOfCards * 1;}    //estate
       72:  168:                if(vType == 1)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
       18:  169:                    {expected = numOfCards * 3;}    //duchy
       72:  170:                if(vType == 2)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
       18:  171:                    {expected = numOfCards * 6;}    //province
       72:  172:                if(vType == 3)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
       18:  173:                    {expected = numOfCards * 1;}   //great hall
        -:  174:                 
        -:  175:
       72:  176:                if(score != expected){//check if score is correct
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  177:                    printf("****FAIL Discard score = %d, expected = %d\n", score, expected); 
call    0 never executed
    #####:  178:                    errors++;
        -:  179:                }  
        -:  180:#if (NOISY_TEST == 1)   
        -:  181:                else{
        -:  182:                    printf("PASS Discard score = %d, expected = %d\n", score, expected);}
        -:  183:#endif
        -:  184:            }
        -:  185:        }
        -:  186:        
        -:  187:    }
        -:  188:    
        -:  189:    
        -:  190://     printf("Testing Deck\n");
        -:  191:    
        -:  192:    //loop through the victory cards in the victoryCardsArr
        -:  193:    //specifically estate, duchy, province, great hall
        5:  194:    for(vType = 0; vType < 4; vType++){
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  195:        //loop over the players
       12:  196:        for (p = 0; p < numPlayer; p++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  197:            //with two players there are 8 of each card
       80:  198:            for(numOfCards = 0; numOfCards <= 8; numOfCards++){
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
        -:  199://                printf("Test player %d Deck with %d %s victory card(s).\n", p, numOfCards, cardName[vType]);
        -:  200:
       72:  201:                memset(&G, 23, sizeof(struct gameState)); // clear the game state  
        -:  202:
       72:  203:                r = initializeGame(numPlayer, k, seed, &G); // initialize a new game
call    0 returned 100%
        -:  204:
        -:  205:                //G.handCount[p] = numOfCards;        //set the number of cards on hand
        -:  206:                //G.discardCount[p] = numOfCards;     //set the number of card in discard
       72:  207:                G.deckCount[p] = numOfCards;             //set the number of card in the deck
        -:  208:                
        -:  209:                //set all the cards in players hand to the appropriate card
        -:  210:                //fill discard and hand with copper so there are no random victory
        -:  211:                //cards inserted. 
        -:  212:                int cardNum;
      720:  213:                for(cardNum = 0; cardNum <= maxHandCount; cardNum++){
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
      648:  214:                    G.hand[p][cardNum] = copper; 
      648:  215:                    G.discard[p][cardNum] = copper;    
      648:  216:                    G.deck[p][cardNum] = victoryCardsArr[vType];    
        -:  217:                }
        -:  218:
       72:  219:                int deckCount = G.deckCount[p];  //get current num of cards in hand
        -:  220: #if (NOISY_TEST == 1)
        -:  221:                printf("DeckCount is %d\n", deckCount);
        -:  222:                
        -:  223:                //print players deck for error checking. 
        -:  224:                printf("Player %d's deck:\n", p);
        -:  225:                if(deckCount > 0) printf("#  Card\n");
        -:  226:                for(deckIndex = 0; deckIndex < deckCount; deckIndex++) {
        -:  227:                    int card = G.deck[p][deckIndex];
        -:  228:                    char name[MAX_STRING_LENGTH];
        -:  229:                    cardNumToName(card, name);
        -:  230:                    printf("%-2d %-13s\n", deckIndex, name);
        -:  231:                }
        -:  232:                printf("\n");
        -:  233: #endif                   
        -:  234:                
       72:  235:                score = scoreFor(p, &G);   //call scoreFor
call    0 returned 100%
        -:  236:                //find the expected score accourding to the card
       72:  237:                if(vType == 0)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
       18:  238:                    {expected = numOfCards * 1;}    //estate
       72:  239:                if(vType == 1)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
       18:  240:                    {expected = numOfCards * 3;}    //duchy
       72:  241:                if(vType == 2)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
       18:  242:                    {expected = numOfCards * 6;}    //province
       72:  243:                if(vType == 3)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
       18:  244:                    {expected = numOfCards * 1;}   //great hall
        -:  245:                 
        -:  246:
       72:  247:                if(score != expected){//check if score is correct
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
       64:  248:                    printf("****FAIL Deck score = %d, expected = %d\n", score, expected); 
call    0 returned 100%
       64:  249:                    errors++;
        -:  250:                }  
        -:  251:#if (NOISY_TEST == 1) 
        -:  252:                else{
        -:  253:                    printf("PASS Deck score = %d, expected = %d\n", score, expected);}
        -:  254:#endif
        -:  255:            }
        -:  256:        }
        -:  257:        
        -:  258:    }
        -:  259:    
        -:  260: //   printf("Testing for curse victory card\n");
        3:  261:    for (p = 0; p < numPlayer; p++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  262:      
       20:  263:      for(numOfCards = 0; numOfCards <= 8; numOfCards++){
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
       18:  264:        memset(&G, 23, sizeof(struct gameState)); // clear the game state  
       18:  265:        r = initializeGame(numPlayer, k, seed, &G); // initialize a new game
call    0 returned 100%
        -:  266:         
       18:  267:        G.handCount[p] = numOfCards;        //set the number of cards on hand
       18:  268:        G.discardCount[p] = numOfCards;     //set the number of card in discard
       18:  269:        G.deckCount[p] = numOfCards;             //set the number of card in the deck
        -:  270:
        -:  271:        //set all the cards in players hand to the appropriate card
        -:  272:        int cardNum;
      180:  273:        for(cardNum = 0; cardNum <= maxHandCount; cardNum++){
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
      162:  274:            G.hand[p][cardNum] = curse; 
      162:  275:            G.discard[p][cardNum] = copper;     
      162:  276:            G.deck[p][cardNum] = copper;    
        -:  277:        }
        -:  278:  //      printf("Test player %d Deck with %d curse card(s).\n", p, numOfCards);   
       18:  279:        int handCount = G.handCount[p];  //get current num of cards in hand
        -:  280:#if (NOISY_TEST == 1)
        -:  281:        printf("HandCount is %d\n", handCount);
        -:  282:
        -:  283:        //print players hand for error checking. 
        -:  284:        printf("Player %d's hand:\n", p);
        -:  285:        if(handCount > 0) printf("#  Card\n");
        -:  286:        for(handIndex = 0; handIndex < handCount; handIndex++) {
        -:  287:            int card = G.hand[p][handIndex];
        -:  288:            char name[MAX_STRING_LENGTH];
        -:  289:            cardNumToName(card, name);
        -:  290:            printf("%-2d %-13s\n", handIndex, name);
        -:  291:        }
        -:  292:        printf("\n");
        -:  293:#endif
        -:  294:
       18:  295:        score = scoreFor(p, &G);   //call scoreFor
call    0 returned 100%
        -:  296:        //find the expected score accourding to the card
       18:  297:        expected = -(1 * numOfCards);
        -:  298:
        -:  299:
       18:  300:        if(score != expected){//check if score is correct
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  301:            printf("****FAIL Hand score = %d, expected = %d\n", score, expected);
call    0 never executed
    #####:  302:            errors++;
        -:  303:        }  
        -:  304:#if (NOISY_TEST == 1) 
        -:  305:          else{
        -:  306:            printf("PASS Hand score = %d, expected = %d\n", score, expected);}
        -:  307:#endif          
        -:  308:          
        -:  309: //       printf("Test player %d Discard with %d curse card(s).\n", p, numOfCards);   
        -:  310:        
      180:  311:        for(cardNum = 0; cardNum <= maxHandCount; cardNum++){
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
      162:  312:            G.hand[p][cardNum] = copper; 
      162:  313:            G.discard[p][cardNum] = curse;     
      162:  314:            G.deck[p][cardNum] = copper;    
        -:  315:        }
       18:  316:        int discardCount = G.discardCount[p];  //get current num of cards in hand
        -:  317: #if (NOISY_TEST == 1)
        -:  318:          printf("DiscardCount is %d\n", discardCount);
        -:  319:
        -:  320:        //print players discard for error checking. 
        -:  321:        printf("Player %d's discard hand:\n", p);
        -:  322:        if(discardCount > 0) printf("#  Card\n");
        -:  323:        for(discardIndex = 0; discardIndex < discardCount; discardIndex++) {
        -:  324:            int card = G.discard[p][discardIndex];
        -:  325:            char name[MAX_STRING_LENGTH];
        -:  326:            cardNumToName(card, name);
        -:  327:            printf("%-2d %-13s\n", discardIndex, name);
        -:  328:        }
        -:  329:        printf("\n");  
        -:  330:#endif          
       18:  331:        score = scoreFor(p, &G);   //call scoreFor
call    0 returned 100%
        -:  332:        //find the expected score accourding to the card
       18:  333:        expected = -(1 * numOfCards);
        -:  334:
        -:  335:
       18:  336:        if(score != expected){//check if score is correct
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  337:            printf("****FAIL Discard score = %d, expected = %d\n", score, expected);
call    0 never executed
    #####:  338:            errors++;
        -:  339:        }  
        -:  340:#if (NOISY_TEST == 1)   
        -:  341:          else{
        -:  342:            printf("PASS Discard score = %d, expected = %d\n", score, expected);}
        -:  343:          
        -:  344:        printf("Test player %d Deck with %d curse card(s).\n", p, numOfCards);   
        -:  345:#endif      
      180:  346:        for(cardNum = 0; cardNum <= maxHandCount; cardNum++){
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
      162:  347:            G.hand[p][cardNum] = copper; 
      162:  348:            G.discard[p][cardNum] = copper;     
      162:  349:            G.deck[p][cardNum] = curse;    
        -:  350:        }
        -:  351:        
       18:  352:        int deckCount = G.deckCount[p];  //get current num of cards in hand
        -:  353: #if (NOISY_TEST == 1)
        -:  354:        printf("DeckCount is %d\n", deckCount);
        -:  355:
        -:  356:        //print players deck for error checking. 
        -:  357:        printf("Player %d's deck:\n", p);
        -:  358:        if(deckCount > 0) printf("#  Card\n");
        -:  359:        for(deckIndex = 0; deckIndex < deckCount; deckIndex++) {
        -:  360:            int card = G.deck[p][deckIndex];
        -:  361:            char name[MAX_STRING_LENGTH];
        -:  362:            cardNumToName(card, name);
        -:  363:            printf("%-2d %-13s\n", deckIndex, name);
        -:  364:        }
        -:  365:        printf("\n");  
        -:  366: #endif
       18:  367:          score = scoreFor(p, &G);   //call scoreFor
call    0 returned 100%
        -:  368:        //find the expected score accourding to the card
       18:  369:        expected = -(1 * numOfCards);
        -:  370:
        -:  371:
       18:  372:        if(score != expected){//check if score is correct
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  373:            printf("****FAIL Deck score = %d, expected = %d\n", score, expected);
call    0 never executed
    #####:  374:            errors++;
        -:  375:        }  
        -:  376:#if (NOISY_TEST == 1)
        -:  377:          else{
        -:  378:            printf("PASS Deck score = %d, expected = %d\n", score, expected);}  
        -:  379:#endif
        -:  380:      }
        -:  381:        
        -:  382:    }
        -:  383:    
        -:  384://   printf("Testing for gardens victory card\n");
        3:  385:    for (p = 0; p < numPlayer; p++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       20:  386:      for(numOfCards = 0; numOfCards <= 8; numOfCards++){ 
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
       18:  387:      memset(&G, 23, sizeof(struct gameState)); // clear the game state  
       18:  388:        r = initializeGame(numPlayer, k, seed, &G); // initialize a new game
call    0 returned 100%
       18:  389:        G.handCount[p] = numOfCards;        //set the number of cards on hand
       18:  390:        G.discardCount[p] = numOfCards;     //set the number of card in discard
       18:  391:        G.deckCount[p]=numOfCards;  
        -:  392:        //set all the cards in players hand to the appropriate card
        -:  393:        int cardNum;
      180:  394:        for(cardNum = 0; cardNum <= maxHandCount; cardNum++){
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
      162:  395:            G.hand[p][cardNum] = gardens; 
      162:  396:            G.discard[p][cardNum] = copper;     
      162:  397:            G.deck[p][cardNum] = copper;    
        -:  398:        }
        -:  399: //       printf("Test player %d Deck with %d gardens card(s).\n", p, numOfCards);   
       18:  400:        int handCount = G.handCount[p];  //get current num of cards in hand
        -:  401:#if (NOISY_TEST == 1)
        -:  402:        printf("HandCount is %d\n", handCount);
        -:  403:
        -:  404:        //print players hand for error checking. 
        -:  405:        printf("Player %d's hand:\n", p);
        -:  406:        if(handCount > 0) printf("#  Card\n");
        -:  407:        for(handIndex = 0; handIndex < handCount; handIndex++) {
        -:  408:            int card = G.hand[p][handIndex];
        -:  409:            char name[MAX_STRING_LENGTH];
        -:  410:            cardNumToName(card, name);
        -:  411:            printf("%-2d %-13s\n", handIndex, name);
        -:  412:        }
        -:  413:        printf("\n");
        -:  414:#endif
        -:  415:
       18:  416:        score = scoreFor(p, &G);   //call scoreFor
call    0 returned 100%
        -:  417:        //gardens victory card is worth 1 estate for every 10 cards
        -:  418:        // the score is then added on, but since we don't have an 
        -:  419:        // additional score now, the division is enough  
       18:  420:        expected = (fullDeckCount(p, 0, &G)/10); 
call    0 returned 100%
       18:  421:        if(score != expected){//check if score is correct
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  422:            printf("****FAIL Deck score = %d, expected = %d\n", score, expected); 
call    0 never executed
    #####:  423:            errors++;
        -:  424:        }  
        -:  425:#if (NOISY_TEST == 1)    
        -:  426:          else{
        -:  427:            printf("PASS Deck score = %d, expected = %d\n", score, expected);}  
        -:  428:          
        -:  429:        printf("Test player %d Discard with %d gardens card(s).\n", p, numOfCards);   
        -:  430:#endif        
      180:  431:        for(cardNum = 0; cardNum <= maxHandCount; cardNum++){
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
      162:  432:            G.hand[p][cardNum] = copper; 
      162:  433:            G.discard[p][cardNum] = gardens;     
      162:  434:            G.deck[p][cardNum] = copper;    
        -:  435:        }
       18:  436:        int discardCount = G.discardCount[p];  //get current num of cards in hand
        -:  437: #if (NOISY_TEST == 1)
        -:  438:          printf("DiscardCount is %d\n", discardCount);
        -:  439:
        -:  440:        //print players discard for error checking. 
        -:  441:        printf("Player %d's discard hand:\n", p);
        -:  442:        if(discardCount > 0) printf("#  Card\n");
        -:  443:        for(discardIndex = 0; discardIndex < discardCount; discardIndex++) {
        -:  444:            int card = G.discard[p][discardIndex];
        -:  445:            char name[MAX_STRING_LENGTH];
        -:  446:            cardNumToName(card, name);
        -:  447:            printf("%-2d %-13s\n", discardIndex, name);
        -:  448:        }
        -:  449:        printf("\n");  
        -:  450:#endif          
       18:  451:        score = scoreFor(p, &G);   //call scoreFor
call    0 returned 100%
        -:  452:        //find the expected score accourding to the card
       18:  453:        expected = (fullDeckCount(p, 0, &G)/10); 
call    0 returned 100%
        -:  454:
       18:  455:        if(score != expected){//check if score is correct
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  456:            printf("****FAIL Discard score = %d, expected = %d\n", score, expected); 
call    0 never executed
    #####:  457:            errors++;
        -:  458:        }  
        -:  459:#if (NOISY_TEST == 1)  
        -:  460:          else{
        -:  461:            printf("PASS Discard score = %d, expected = %d\n", score, expected);}
        -:  462:          
        -:  463:        printf("Test player %d Deck with %d gardens card(s).\n", p, numOfCards);   
        -:  464:#endif        
      180:  465:        for(cardNum = 0; cardNum <= maxHandCount; cardNum++){
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
      162:  466:            G.hand[p][cardNum] = copper; 
      162:  467:            G.discard[p][cardNum] = copper;     
      162:  468:            G.deck[p][cardNum] = gardens;    
        -:  469:        }
        -:  470:        
       18:  471:        int deckCount = G.deckCount[p];  //get current num of cards in hand
        -:  472: #if (NOISY_TEST == 1)
        -:  473:        printf("DeckCount is %d\n", deckCount);
        -:  474:
        -:  475:        //print players deck for error checking. 
        -:  476:        printf("Player %d's deck:\n", p);
        -:  477:        if(deckCount > 0) printf("#  Card\n");
        -:  478:        for(deckIndex = 0; deckIndex < deckCount; deckIndex++) {
        -:  479:            int card = G.deck[p][deckIndex];
        -:  480:            char name[MAX_STRING_LENGTH];
        -:  481:            cardNumToName(card, name);
        -:  482:            printf("%-2d %-13s\n", deckIndex, name);
        -:  483:        }
        -:  484:        printf("\n");  
        -:  485: #endif
       18:  486:          score = scoreFor(p, &G);   //call scoreFor
call    0 returned 100%
        -:  487:        //find the expected score accourding to the card
       18:  488:        expected = (fullDeckCount(p, 0, &G)/10); 
call    0 returned 100%
        -:  489:
       18:  490:        if(score != expected){//check if score is correct
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  491:            printf("****FAIL Deck score = %d, expected = %d\n", score, expected); 
call    0 never executed
    #####:  492:            errors++;
        -:  493:        }  
        -:  494:#if (NOISY_TEST == 1) 
        -:  495:          else{
        -:  496:            printf("PASS Deck score = %d, expected = %d\n", score, expected);}  
        -:  497:#endif          
        -:  498:      }
        -:  499:    }
        -:  500:    
        1:  501:    if(errors == 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  502:     printf("ALL TESTS PASS for whoseTurn().\n");   
call    0 never executed
        -:  503:    }
        -:  504:    else{
        1:  505:     printf("FAIL: There are %d errors in scoreFor().\n", errors);   
call    0 returned 100%
        -:  506:    }
        -:  507:    
        1:  508:    return 0;
        -:  509:}
        -:  510:
        -:  511:
        -:  512:
        -:  513:
        -:  514:
function cardNumToName called 0 returned 0% blocks executed 0%
    #####:  515:void cardNumToName(int card, char *name){
    #####:  516:  switch(card){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
    #####:  517:  case curse: strcpy(name,"Curse");
    #####:  518:    break;
    #####:  519:  case estate: strcpy(name,"Estate");
    #####:  520:    break;
    #####:  521:  case duchy: strcpy(name,"Duchy");
    #####:  522:    break;
    #####:  523:  case province: strcpy(name,"Province");
    #####:  524:    break;
    #####:  525:  case copper: strcpy(name,"Copper");
    #####:  526:    break;
    #####:  527:  case silver: strcpy(name,"Silver");
    #####:  528:    break;
    #####:  529:  case gold: strcpy(name,"Gold");
    #####:  530:    break;
    #####:  531:  case adventurer: strcpy(name,"Adventurer");
    #####:  532:    break;
    #####:  533:  case council_room: strcpy(name,"Council Room");
    #####:  534:    break;
    #####:  535:  case feast: strcpy(name,"Feast");
    #####:  536:    break;
    #####:  537:  case gardens: strcpy(name,"Gardens");
    #####:  538:    break;
    #####:  539:  case mine: strcpy(name,"Mine");
    #####:  540:    break;
    #####:  541:  case remodel: strcpy(name,"Remodel");
    #####:  542:    break;
    #####:  543:  case smithy: strcpy(name,"Smithy");
    #####:  544:    break;
    #####:  545:  case village: strcpy(name,"Village");
    #####:  546:    break;
    #####:  547:  case baron: strcpy(name,"Baron");
    #####:  548:    break;
    #####:  549:  case great_hall: strcpy(name,"Great Hall");
    #####:  550:    break;
    #####:  551:  case minion: strcpy(name,"Minion");
    #####:  552:    break;
    #####:  553:  case steward: strcpy(name,"Steward");
    #####:  554:    break;
    #####:  555:  case tribute: strcpy(name,"Tribute");
    #####:  556:    break;
    #####:  557:  case ambassador: strcpy(name,"Ambassador");
    #####:  558:    break;
    #####:  559:  case cutpurse: strcpy(name,"Cutpurse");
    #####:  560:    break;
    #####:  561:  case embargo: strcpy(name,"Embargo");
    #####:  562:    break;
    #####:  563:  case outpost: strcpy(name,"Outpost");
    #####:  564:    break;
    #####:  565:  case salvager: strcpy(name,"Salvager");
    #####:  566:    break;
    #####:  567:  case sea_hag: strcpy(name,"Sea Hag");
    #####:  568:    break;
    #####:  569:  case treasure_map: strcpy(name,"Treasure Map");
    #####:  570:    break;
        -:  571:
    #####:  572:  default: strcpy(name,"?");
        -:  573:  }
        -:  574:
    #####:  575:}
