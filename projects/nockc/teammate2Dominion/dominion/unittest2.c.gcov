        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Name: Alex Marsh
        -:    3: * CS362
        -:    4: * unittest2.c
        -:    5: * This tests the function getCost() function in dominion.c
        -:    6: * Include the following lines in your makefile:
        -:    7: *
        -:    8: * unittest2: unittest2.c dominion.o rngs.o
        -:    9: *      gcc -o unittest2 -g  unittest2.c dominion.o rngs.o $(CFLAGS)
        -:   10: * -----------------------------------------------------------------------
        -:   11: */
        -:   12:
        -:   13:
        -:   14:#include "dominion.h"
        -:   15:#include "dominion_helpers.h"
        -:   16:#include <string.h>
        -:   17:#include <stdio.h>
        -:   18:#include <assert.h>
        -:   19:#include "rngs.h"
        -:   20:
function main called 1 returned 100% blocks executed 52%
        1:   21:int main(){
        1:   22:    int error = 0; 
        1:   23:    printf("----------------- Testing getCost() ----------------\n");
call    0 returned 100%
        -:   24:
        1:   25:    printf("\n");
call    0 returned 100%
        -:   26:    
        1:   27:    if(getCost(copper)!= 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   28:        printf("FAIL: copper incorrect\n");
call    0 never executed
    #####:   29:        error++;
        -:   30:    }
        -:   31:    
        1:   32:    if(getCost(silver)!= 3){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   33:        printf("FAIL: silver incorrect\n");
call    0 never executed
    #####:   34:        error++;
        -:   35:    }
        -:   36:    
        1:   37:    if(getCost(gold)!= 6){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   38:        printf("FAIL: gold incorrect\n");
call    0 never executed
    #####:   39:        error++;
        -:   40:    }
        -:   41:    
        1:   42:    if(getCost(estate)!= 2){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   43:        printf("FAIL: estate incorrect\n");
call    0 never executed
    #####:   44:        error++;
        -:   45:    }
        -:   46:    
        1:   47:    if(getCost(duchy)!= 5){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   48:        printf("FAIL: duchy incorrect\n");
call    0 never executed
    #####:   49:        error++;
        -:   50:    }
        -:   51:    
        1:   52:    if(getCost(province)!= 8){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   53:        printf("FAIL: province incorrect\n");
call    0 never executed
    #####:   54:        error++;
        -:   55:    }
        -:   56:    
        1:   57:    if(getCost(curse)!= 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   58:        printf("FAIL: curse incorrect\n");
call    0 never executed
    #####:   59:        error++;
        -:   60:    }
        -:   61:    
        1:   62:    if(getCost(adventurer)!= 6){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   63:        printf("FAIL: adventurer incorrect\n");
call    0 never executed
    #####:   64:        error++;
        -:   65:    }
        -:   66:    
        1:   67:    if(getCost(council_room)!= 5){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   68:        printf("FAIL: council_room incorrect\n");
call    0 never executed
    #####:   69:        error++;
        -:   70:    }
        -:   71:    
        1:   72:    if(getCost(feast)!= 4){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   73:        printf("FAIL: feast incorrect\n");
call    0 never executed
    #####:   74:        error++;
        -:   75:    }
        -:   76:    
        1:   77:    if(getCost(gardens)!= 4){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   78:        printf("FAIL: garden incorrect\n");
call    0 never executed
    #####:   79:        error++;
        -:   80:    }
        -:   81:    
        1:   82:    if(getCost(mine)!= 5){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   83:        printf("FAIL: mine incorrect\n");
call    0 never executed
    #####:   84:        error++;
        -:   85:    }
        -:   86:    
        -:   87: /**   if(getCost(moneylender)!= 4){
        -:   88:        printf("FAIL: moneylender incorrect\n");
        -:   89:        error++;
        -:   90:    }**/
        -:   91:    
        1:   92:    if(getCost(remodel)!= 4){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   93:        printf("FAIL: remodel incorrect\n");
call    0 never executed
    #####:   94:        error++;
        -:   95:    }
        -:   96:    
        1:   97:    if(getCost(smithy)!= 4){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   98:        printf("FAIL: smithy incorrect\n");
call    0 never executed
    #####:   99:        error++;
        -:  100:    }
        -:  101:    
        1:  102:    if(getCost(village)!= 3){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  103:        printf("FAIL: village incorrect\n");
call    0 never executed
    #####:  104:        error++;
        -:  105:    }
        -:  106:    
        -:  107:/**    if(getCost(woodcutter)!= 3){
        -:  108:        printf("FAIL: woodcutter incorrect\n");
        -:  109:        error++;
        -:  110:    }**/
        -:  111:    
        1:  112:    if(getCost(baron)!= 4){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  113:        printf("FAIL: baron incorrect\n");
call    0 never executed
    #####:  114:        error++;
        -:  115:    }
        -:  116:    
        1:  117:    if(getCost(great_hall)!= 3){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  118:        printf("FAIL: great_hall incorrect\n");
call    0 never executed
    #####:  119:        error++;
        -:  120:    }
        -:  121:    
        1:  122:    if(getCost(minion)!= 5){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  123:        printf("FAIL: minion incorrect\n");
call    0 never executed
    #####:  124:        error++;
        -:  125:    }
        -:  126:    
        -:  127:/**    if(getCost(shanty_town)!= 3){
        -:  128:        printf("FAIL: shanty_town incorrect\n");
        -:  129:        error++;
        -:  130:    }**/
        -:  131:    
        1:  132:    if(getCost(steward)!= 3){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  133:        printf("FAIL: steward incorrect\n");
call    0 never executed
    #####:  134:        error++;
        -:  135:    }
        -:  136:    
        1:  137:    if(getCost(tribute)!= 5){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  138:        printf("FAIL: tribute incorrect\n");
call    0 never executed
    #####:  139:        error++;
        -:  140:    }
        -:  141:    
        -:  142: /**   if(getCost(wishing_well)!= 3){
        -:  143:        printf("FAIL: wishing_well incorrect\n");
        -:  144:        error++;
        -:  145:    }**/
        -:  146:    
        1:  147:    if(getCost(ambassador)!= 3){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  148:        printf("FAIL: ambassador incorrect\n");
call    0 never executed
    #####:  149:        error++;
        -:  150:    }
        -:  151:    
        1:  152:    if(getCost(cutpurse)!= 4){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  153:        printf("FAIL: cutpurse incorrect\n");
call    0 never executed
    #####:  154:        error++;
        -:  155:    }
        -:  156:    
        1:  157:    if(getCost(embargo)!= 2){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  158:        printf("FAIL: embargo incorrect\n");
call    0 never executed
    #####:  159:        error++;
        -:  160:    }
        -:  161:    
        1:  162:    if(getCost(outpost)!= 5){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  163:        printf("FAIL: outpost incorrect\n");
call    0 never executed
    #####:  164:        error++;
        -:  165:    }
        -:  166:    
        1:  167:    if(getCost(salvager)!= 4){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  168:        printf("FAIL: salvager incorrect\n");
call    0 never executed
    #####:  169:        error++;
        -:  170:    }
        -:  171:    
        1:  172:    if(getCost(sea_hag)!= 4){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  173:        printf("FAIL: sea_hag incorrect\n");
call    0 never executed
    #####:  174:        error++;
        -:  175:    }
        -:  176:    
        1:  177:    if(getCost(treasure_map)!= 4){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  178:        printf("FAIL: treasure_map incorrect\n");
call    0 never executed
    #####:  179:        error++;
        -:  180:    }
        -:  181:    
        1:  182:    if(error == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  183:        printf("ALL TESTS PASSED FOR getCost()\n");
call    0 returned 100%
        -:  184:    else
    #####:  185:        printf("There are %d errors\n", error);
call    0 never executed
        -:  186:    
        1:  187:    return 0;
        -:  188:}
