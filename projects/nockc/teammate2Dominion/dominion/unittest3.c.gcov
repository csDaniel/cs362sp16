        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Name: Alex Marsh
        -:    3: * CS362
        -:    4: * unittest3.c
        -:    5: * This tests the function fullDeckCount() function in dominion.c
        -:    6: * Include the following lines in your makefile:
        -:    7: *
        -:    8: * unittest3: unittest3.c dominion.o rngs.o
        -:    9: *      gcc -o unittest3 -g  unittest3.c dominion.o rngs.o $(CFLAGS)
        -:   10: * -----------------------------------------------------------------------
        -:   11: */
        -:   12:
        -:   13:
        -:   14:#include <string.h>
        -:   15:#include <stdio.h>
        -:   16:#include <assert.h>
        -:   17:#include <math.h>
        -:   18:#include "dominion.h"
        -:   19:#include "dominion_helpers.h"
        -:   20:#include "interface.h"
        -:   21:#include "rngs.h"
        -:   22:
        -:   23:// set NOISY_TEST to 0 to remove printfs from output
        -:   24://to include printfs set to 1
        -:   25:#define NOISY_TEST 0
        -:   26:
function main called 1 returned 100% blocks executed 86%
        1:   27:int main(){
        1:   28:    int numPlayer = 2;
        1:   29:    int seed = 1000;
        -:   30:    int expected, returnedCount;
        -:   31:    int i, p, r;
        -:   32:    int numOfCards;
        1:   33:    int errors = 0;
        -:   34:    //to test the function adds correctly we add the same
        -:   35:    //amount of cards to each hand, deck, or discard.
        -:   36:    //MAX_HAND = 500 and divided by 3 is 166
        1:   37:    int equalDivCards = 166;
        1:   38:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   39:               , remodel, smithy, village, baron, great_hall};
        -:   40:    struct gameState G;
        1:   41:    printf("----------------- Testing fullDeckCount() ----------------\n");
call    0 returned 100%
        -:   42:
        1:   43:    printf("\n");
call    0 returned 100%
        -:   44:    
        -:   45: //   printf("Testing for cards in hand, deck, and discard:\n");
        3:   46:    for (p = 0; p <numPlayer; p++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
      336:   47:        for(numOfCards = 0; numOfCards <= equalDivCards; numOfCards++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   48://        printf("Test player %d with %d card(s).\n", p, numOfCards);
      334:   49:        memset(&G, 23, sizeof(struct gameState));   // clear the game state
      334:   50:        r = initializeGame(numPlayer, k, seed, &G); // initialize a new game
call    0 returned 100%
        -:   51:        
        -:   52:        //set the amount of cards in each pile    
      334:   53:        G.handCount[p] = numOfCards;
      334:   54:        G.deckCount[p] = numOfCards;
      334:   55:        G.discardCount[p] = numOfCards;    
        -:   56:        
        -:   57:        //set all the cards in players hand to the appropriate card
        -:   58:        int cardNum;
    28390:   59:        for(cardNum = 0; cardNum <= numOfCards; cardNum++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    28056:   60:            G.hand[p][cardNum] = copper; 
    28056:   61:            G.discard[p][cardNum] = copper;     
    28056:   62:            G.deck[p][cardNum] = copper;    
        -:   63:        }    
        -:   64:            
      334:   65:        returnedCount = fullDeckCount(p, copper, &G);    
call    0 returned 100%
        -:   66:        
      334:   67:        expected =  numOfCards * 3; 
      334:   68:        if(returnedCount != expected){//check if score is correct
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   69:            printf("****FAIL Returned Count = %d, expected = %d\n", returnedCount, expected); 
call    0 never executed
    #####:   70:            errors++;
        -:   71:        }  
        -:   72:#if (NOISY_TEST == 1)
        -:   73:        else{
        -:   74:            printf("PASS Returned Count = %d, expected = %d\n", returnedCount, expected);}    
        -:   75:#endif            
        -:   76:        }
        -:   77:    }
        -:   78:    
        -:   79: //   printf("Testing for cards only in hand:\n");
        3:   80:    for (p = 0; p <numPlayer; p++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
      336:   81:        for(numOfCards = 0; numOfCards <= equalDivCards; numOfCards++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   82://        printf("Test player %d with %d card(s).\n", p, numOfCards);
      334:   83:        memset(&G, 23, sizeof(struct gameState));   // clear the game state
      334:   84:        r = initializeGame(numPlayer, k, seed, &G); // initialize a new game
call    0 returned 100%
        -:   85:        
        -:   86:        //set the amount of cards in each pile    
      334:   87:        G.handCount[p] = numOfCards;
      334:   88:        G.deckCount[p] = numOfCards;
      334:   89:        G.discardCount[p] = numOfCards;    
        -:   90:        
        -:   91:        //set all the cards in players hand to the appropriate card
        -:   92:        int cardNum;
    28390:   93:        for(cardNum = 0; cardNum <= numOfCards; cardNum++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    28056:   94:            G.hand[p][cardNum] = copper; 
    28056:   95:            G.discard[p][cardNum] = estate;     
    28056:   96:            G.deck[p][cardNum] = estate;    
        -:   97:        }    
        -:   98:            
      334:   99:        returnedCount = fullDeckCount(p, copper, &G);    
call    0 returned 100%
        -:  100:        
      334:  101:        expected =  numOfCards; 
      334:  102:        if(returnedCount != expected){//check if score is correct
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  103:            printf("****FAIL Returned Count = %d, expected = %d\n", returnedCount, expected); 
call    0 never executed
    #####:  104:            errors++;
        -:  105:        }  
        -:  106:#if (NOISY_TEST == 1) 
        -:  107:        else{
        -:  108:            printf("PASS Returned Count = %d, expected = %d\n", returnedCount, expected);}    
        -:  109:#endif            
        -:  110:        }
        -:  111:    }
        -:  112:    
        -:  113: //   printf("Testing for cards only in deck:\n");
        3:  114:    for (p = 0; p <numPlayer; p++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
      336:  115:        for(numOfCards = 0; numOfCards <= equalDivCards; numOfCards++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  116://        printf("Test player %d with %d card(s).\n", p, numOfCards);
      334:  117:        memset(&G, 23, sizeof(struct gameState));   // clear the game state
      334:  118:        r = initializeGame(numPlayer, k, seed, &G); // initialize a new game
call    0 returned 100%
        -:  119:        
        -:  120:        //set the amount of cards in each pile    
      334:  121:        G.handCount[p] = numOfCards;
      334:  122:        G.deckCount[p] = numOfCards;
      334:  123:        G.discardCount[p] = numOfCards;    
        -:  124:        
        -:  125:        //set all the cards in players hand to the appropriate card
        -:  126:        int cardNum;
    28390:  127:        for(cardNum = 0; cardNum <= numOfCards; cardNum++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    28056:  128:            G.hand[p][cardNum] = estate; 
    28056:  129:            G.discard[p][cardNum] = estate;     
    28056:  130:            G.deck[p][cardNum] = copper;    
        -:  131:        }    
        -:  132:            
      334:  133:        returnedCount = fullDeckCount(p, copper, &G);    
call    0 returned 100%
        -:  134:        
      334:  135:        expected =  numOfCards; 
      334:  136:        if(returnedCount != expected){//check if score is correct
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  137:            printf("****FAIL Returned Count = %d, expected = %d\n", returnedCount, expected); 
call    0 never executed
    #####:  138:            errors++;
        -:  139:        }  
        -:  140:#if (NOISY_TEST == 1) 
        -:  141:        else{
        -:  142:            printf("PASS Returned Count = %d, expected = %d\n", returnedCount, expected);}    
        -:  143:#endif            
        -:  144:        }
        -:  145:    }
        -:  146:    
        -:  147: //   printf("Testing for cards only in discard:\n");
        3:  148:    for (p = 0; p <numPlayer; p++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
      336:  149:        for(numOfCards = 0; numOfCards <= equalDivCards; numOfCards++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  150: //       printf("Test player %d with %d card(s).\n", p, numOfCards);
      334:  151:        memset(&G, 23, sizeof(struct gameState));   // clear the game state
      334:  152:        r = initializeGame(numPlayer, k, seed, &G); // initialize a new game
call    0 returned 100%
        -:  153:        
        -:  154:        //set the amount of cards in each pile    
      334:  155:        G.handCount[p] = numOfCards;
      334:  156:        G.deckCount[p] = numOfCards;
      334:  157:        G.discardCount[p] = numOfCards;    
        -:  158:        
        -:  159:        //set all the cards in players hand to the appropriate card
        -:  160:        int cardNum;
    28390:  161:        for(cardNum = 0; cardNum <= numOfCards; cardNum++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    28056:  162:            G.hand[p][cardNum] = estate; 
    28056:  163:            G.discard[p][cardNum] = copper;     
    28056:  164:            G.deck[p][cardNum] = estate;    
        -:  165:        }    
        -:  166:            
      334:  167:        returnedCount = fullDeckCount(p, copper, &G);    
call    0 returned 100%
        -:  168:        
      334:  169:        expected =  numOfCards; 
      334:  170:        if(returnedCount != expected){//check if score is correct
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  171:            printf("****FAIL Returned Count = %d, expected = %d\n", returnedCount, expected); 
call    0 never executed
    #####:  172:            errors++;
        -:  173:        }  
        -:  174:#if (NOISY_TEST == 1) 
        -:  175:        else{
        -:  176:            printf("PASS Returned Count = %d, expected = %d\n", returnedCount, expected);}    
        -:  177:#endif            
        -:  178:        }
        -:  179:    }
        -:  180:
        1:  181:    if(errors == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  182:     printf("ALL TESTS PASS for fullDeckCount().\n");   
call    0 returned 100%
        -:  183:    }
        -:  184:    else{
    #####:  185:     printf("FAIL: There are %d errors.\n",errors);   
call    0 never executed
        -:  186:    }
        -:  187:    
        1:  188: return 0;   
        -:  189:}
