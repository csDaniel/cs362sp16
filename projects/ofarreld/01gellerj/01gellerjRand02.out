	 Testing Card: salvager 

 >>>>>>> salvager TESTING STATUS: COMPLETE <<<<<<<

Function 'playCouncil_Room'
Lines executed:100.00% of 10
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 3

Function 'playSteward'
Lines executed:0.00% of 10
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
Calls executed:0.00% of 4

Function 'playVillage'
Lines executed:0.00% of 6
No branches
Calls executed:0.00% of 2

Function 'playAdventurer'
Lines executed:100.00% of 18
Branches executed:100.00% of 10
Taken at least once:100.00% of 10
Calls executed:100.00% of 2

Function 'playSmithy'
Lines executed:100.00% of 6
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'updateCoins'
Lines executed:100.00% of 11
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:92.31% of 13
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
No calls

Function 'cardEffect'
Lines executed:11.37% of 211
Branches executed:14.29% of 175
Taken at least once:4.00% of 175
Calls executed:18.18% of 55

Function 'getCost'
Lines executed:96.67% of 30
Branches executed:100.00% of 28
Taken at least once:96.43% of 28
No calls

Function 'drawCard'
Lines executed:95.45% of 22
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:100.00% of 24
Branches executed:100.00% of 42
Taken at least once:83.33% of 42
Calls executed:33.33% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:100.00% of 9
Branches executed:100.00% of 12
Taken at least once:75.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 3
No branches
Calls executed:100.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:80.65% of 62
Branches executed:91.30% of 46
Taken at least once:73.91% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

File 'dominion.c'
Lines executed:42.06% of 573
Branches executed:47.95% of 415
Taken at least once:38.55% of 415
Calls executed:28.72% of 94
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:23
        -:    0:Programs:10
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 21679 returned 100% blocks executed 100%
    21679:    8:int compare(const void *a, const void *b) {
    21679:    9:    if (*(int *) a > *(int *) b)
branch  0 taken 48% (fallthrough)
branch  1 taken 52%
    10500:   10:        return 1;
    11179:   11:    if (*(int *) a < *(int *) b)
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
     5057:   12:        return -1;
     6122:   13:    return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState *newGame() {
    #####:   17:    struct gameState *g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:    int *k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
function initializeGame called 23 returned 100% blocks executed 83%
       23:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:
        -:   40:    int i;
        -:   41:    int j;
        -:   42:    int it;
        -:   43:    //set up random number generator
       23:   44:    SelectStream(1);
call    0 returned 100%
       23:   45:    PutSeed((long) randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:    //check number of players
       23:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   49:        return -1;
        -:   50:    }
        -:   51:
        -:   52:    //set number of players
       23:   53:    state->numPlayers = numPlayers;
        -:   54:
        -:   55:    //check selected kingdom cards are different
      253:   56:    for (i = 0; i < 10; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2530:   57:        for (j = 0; j < 10; j++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2300:   58:            if (j != i && kingdomCards[j] == kingdomCards[i]) {
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:   59:                return -1;
        -:   60:            }
        -:   61:        }
        -:   62:    }
        -:   63:
        -:   64:
        -:   65:    //initialize supply
        -:   66:    ///////////////////////////////
        -:   67:
        -:   68:    //set number of Curse cards
       23:   69:    if (numPlayers == 2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       23:   70:        state->supplyCount[curse] = 10;
        -:   71:    }
    #####:   72:    else if (numPlayers == 3) {
branch  0 never executed
branch  1 never executed
    #####:   73:        state->supplyCount[curse] = 20;
        -:   74:    }
        -:   75:    else {
    #####:   76:        state->supplyCount[curse] = 30;
        -:   77:    }
        -:   78:
        -:   79:    //set number of Victory cards
       23:   80:    if (numPlayers == 2) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       23:   81:        state->supplyCount[estate] = 8;
       23:   82:        state->supplyCount[duchy] = 8;
       23:   83:        state->supplyCount[province] = 8;
        -:   84:    }
        -:   85:    else {
    #####:   86:        state->supplyCount[estate] = 12;
    #####:   87:        state->supplyCount[duchy] = 12;
    #####:   88:        state->supplyCount[province] = 12;
        -:   89:    }
        -:   90:
        -:   91:    //set number of Treasure cards
       23:   92:    state->supplyCount[copper] = 60 - (7 * numPlayers);
       23:   93:    state->supplyCount[silver] = 40;
       23:   94:    state->supplyCount[gold] = 30;
        -:   95:
        -:   96:    //set number of Kingdom cards
      483:   97:    for (i = adventurer; i <= treasure_map; i++)        //loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:   98:    {
     3795:   99:        for (j = 0; j < 10; j++)                //loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  100:        {
     3565:  101:            if (kingdomCards[j] == i) {
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  102:                //check if card is a 'Victory' Kingdom card
      230:  103:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  104:                    if (numPlayers == 2) {
branch  0 never executed
branch  1 never executed
    #####:  105:                        state->supplyCount[i] = 8;
        -:  106:                    }
    #####:  107:                    else { state->supplyCount[i] = 12; }
        -:  108:                }
        -:  109:                else {
      230:  110:                    state->supplyCount[i] = 10;
        -:  111:                }
      230:  112:                break;
        -:  113:            }
        -:  114:            else    //card is not in the set choosen for the game
        -:  115:            {
     3335:  116:                state->supplyCount[i] = -1;
        -:  117:            }
        -:  118:        }
        -:  119:
        -:  120:    }
        -:  121:
        -:  122:    ////////////////////////
        -:  123:    //supply intilization complete
        -:  124:
        -:  125:    //set player decks
       69:  126:    for (i = 0; i < numPlayers; i++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       46:  127:        state->deckCount[i] = 0;
      184:  128:        for (j = 0; j < 3; j++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
      138:  129:            state->deck[i][j] = estate;
      138:  130:            state->deckCount[i]++;
        -:  131:        }
      368:  132:        for (j = 3; j < 10; j++) {
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
      322:  133:            state->deck[i][j] = copper;
      322:  134:            state->deckCount[i]++;
        -:  135:        }
        -:  136:    }
        -:  137:
        -:  138:    //shuffle player decks
       69:  139:    for (i = 0; i < numPlayers; i++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       46:  140:        if (shuffle(i, state) < 0) {
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  141:            return -1;
        -:  142:        }
        -:  143:    }
        -:  144:
        -:  145:    //draw player hands
       69:  146:    for (i = 0; i < numPlayers; i++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  147:        //initialize hand size to zero
       46:  148:        state->handCount[i] = 0;
       46:  149:        state->discardCount[i] = 0;
        -:  150:        //draw 5 cards
        -:  151:        // for (j = 0; j < 5; j++)
        -:  152:        //	{
        -:  153:        //	  drawCard(i, state);
        -:  154:        //	}
        -:  155:    }
        -:  156:
        -:  157:    //set embargo tokens to 0 for all supply piles
      644:  158:    for (i = 0; i <= treasure_map; i++) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
      621:  159:        state->embargoTokens[i] = 0;
        -:  160:    }
        -:  161:
        -:  162:    //initialize first player's turn
       23:  163:    state->outpostPlayed = 0;
       23:  164:    state->phase = 0;
       23:  165:    state->numActions = 1;
       23:  166:    state->numBuys = 1;
       23:  167:    state->playedCardCount = 0;
       23:  168:    state->whoseTurn = 0;
       23:  169:    state->handCount[state->whoseTurn] = 0;
        -:  170:    //int it; move to top
        -:  171:
        -:  172:    //Moved draw cards to here, only drawing at the start of a turn
      138:  173:    for (it = 0; it < 5; it++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      115:  174:        drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  175:    }
        -:  176:
       23:  177:    updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  178:
       23:  179:    return 0;
        -:  180:}
        -:  181:
function shuffle called 78 returned 100% blocks executed 100%
       78:  182:int shuffle(int player, struct gameState *state) {
        -:  183:
        -:  184:
        -:  185:    int newDeck[MAX_DECK];
       78:  186:    int newDeckPos = 0;
        -:  187:    int card;
        -:  188:    int i;
        -:  189:
       78:  190:    if (state->deckCount[player] < 1)
branch  0 taken 19% (fallthrough)
branch  1 taken 81%
       15:  191:        return -1;
       63:  192:    qsort((void *) (state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  193:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  194:
     3731:  195:    while (state->deckCount[player] > 0) {
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
     3605:  196:        card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     3605:  197:        newDeck[newDeckPos] = state->deck[player][card];
     3605:  198:        newDeckPos++;
   234451:  199:        for (i = card; i < state->deckCount[player] - 1; i++) {
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
   230846:  200:            state->deck[player][i] = state->deck[player][i + 1];
        -:  201:        }
     3605:  202:        state->deckCount[player]--;
        -:  203:    }
     3668:  204:    for (i = 0; i < newDeckPos; i++) {
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
     3605:  205:        state->deck[player][i] = newDeck[i];
     3605:  206:        state->deckCount[player]++;
        -:  207:    }
        -:  208:
       63:  209:    return 0;
        -:  210:}
        -:  211:
function playCard called 0 returned 0% blocks executed 0%
    #####:  212:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) {
        -:  213:    int card;
    #####:  214:    int coin_bonus = 0;        //tracks coins gain from actions
        -:  215:
        -:  216:    //check if it is the right phase
    #####:  217:    if (state->phase != 0) {
branch  0 never executed
branch  1 never executed
    #####:  218:        return -1;
        -:  219:    }
        -:  220:
        -:  221:    //check if player has enough actions
    #####:  222:    if (state->numActions < 1) {
branch  0 never executed
branch  1 never executed
    #####:  223:        return -1;
        -:  224:    }
        -:  225:
        -:  226:    //get card played
    #####:  227:    card = handCard(handPos, state);
call    0 never executed
        -:  228:
        -:  229:    //check if selected card is an action
    #####:  230:    if (card < adventurer || card > treasure_map) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  231:        return -1;
        -:  232:    }
        -:  233:
        -:  234:    //play card
    #####:  235:    if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  236:        return -1;
        -:  237:    }
        -:  238:
        -:  239:    //reduce number of actions
    #####:  240:    state->numActions--;
        -:  241:
        -:  242:    //update coins (Treasure cards may be added with card draws)
    #####:  243:    updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  244:
    #####:  245:    return 0;
        -:  246:}
        -:  247:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  248:int buyCard(int supplyPos, struct gameState *state) {
        -:  249:    int who;
        -:  250:    if (DEBUG) {
        -:  251:        printf("Entering buyCard...\n");
        -:  252:    }
        -:  253:
        -:  254:    // I don't know what to do about the phase thing.
        -:  255:
    #####:  256:    who = state->whoseTurn;
        -:  257:
    #####:  258:    if (state->numBuys < 1) {
branch  0 never executed
branch  1 never executed
        -:  259:        if (DEBUG)
        -:  260:            printf("You do not have any buys left\n");
    #####:  261:        return -1;
    #####:  262:    } else if (supplyCount(supplyPos, state) < 1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  263:        if (DEBUG)
        -:  264:            printf("There are not any of that type of card left\n");
    #####:  265:        return -1;
    #####:  266:    } else if (state->coins < getCost(supplyPos)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  267:        if (DEBUG)
        -:  268:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  269:        return -1;
        -:  270:    } else {
    #####:  271:        state->phase = 1;
        -:  272:        //state->supplyCount[supplyPos]--;
    #####:  273:        gainCard(supplyPos, state, 0,
call    0 never executed
        -:  274:                 who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  275:
    #####:  276:        state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  277:        state->numBuys--;
        -:  278:        if (DEBUG)
        -:  279:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos,
        -:  280:                   getCost(supplyPos), state->numBuys, state->coins);
        -:  281:    }
        -:  282:
        -:  283:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  284:    //state->discardCount[who]++;
        -:  285:
    #####:  286:    return 0;
        -:  287:}
        -:  288:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  289:int numHandCards(struct gameState *state) {
    #####:  290:    return state->handCount[whoseTurn(state)];
call    0 never executed
        -:  291:}
        -:  292:
function handCard called 20000 returned 100% blocks executed 100%
    20000:  293:int handCard(int handPos, struct gameState *state) {
    20000:  294:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
    20000:  295:    return state->hand[currentPlayer][handPos];
        -:  296:}
        -:  297:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  298:int supplyCount(int card, struct gameState *state) {
    #####:  299:    return state->supplyCount[card];
        -:  300:}
        -:  301:
function fullDeckCount called 12 returned 100% blocks executed 82%
       12:  302:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  303:    int i;
       12:  304:    int count = 0;
        -:  305:
       72:  306:    for (i = 0; i < state->deckCount[player]; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       60:  307:        if (state->deck[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  308:    }
        -:  309:
      112:  310:    for (i = 0; i < state->handCount[player]; i++) {
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
      100:  311:        if (state->hand[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  312:    }
        -:  313:
       32:  314:    for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 63%
branch  1 taken 38% (fallthrough)
       20:  315:        if (state->discard[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  316:    }
        -:  317:
       12:  318:    return count;
        -:  319:}
        -:  320:
function whoseTurn called 33008 returned 100% blocks executed 100%
    33008:  321:int whoseTurn(struct gameState *state) {
    33008:  322:    return state->whoseTurn;
        -:  323:}
        -:  324:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  325:int endTurn(struct gameState *state) {
        -:  326:    int k;
        -:  327:    int i;
    #####:  328:    int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  329:
        -:  330:    //Discard hand
    #####:  331:    for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  332:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  333:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  334:    }
    #####:  335:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  336:
        -:  337:    //Code for determining the player
    #####:  338:    if (currentPlayer < (state->numPlayers - 1)) {
branch  0 never executed
branch  1 never executed
    #####:  339:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  340:    }
        -:  341:    else {
    #####:  342:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  343:    }
        -:  344:
    #####:  345:    state->outpostPlayed = 0;
    #####:  346:    state->phase = 0;
    #####:  347:    state->numActions = 1;
    #####:  348:    state->coins = 0;
    #####:  349:    state->numBuys = 1;
    #####:  350:    state->playedCardCount = 0;
    #####:  351:    state->handCount[state->whoseTurn] = 0;
        -:  352:
        -:  353:    //int k; move to top
        -:  354:    //Next player draws hand
    #####:  355:    for (k = 0; k < 5; k++) {
branch  0 never executed
branch  1 never executed
    #####:  356:        drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  357:    }
        -:  358:
        -:  359:    //Update money
    #####:  360:    updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  361:
    #####:  362:    return 0;
        -:  363:}
        -:  364:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  365:int isGameOver(struct gameState *state) {
        -:  366:    int i;
        -:  367:    int j;
        -:  368:
        -:  369:    //if stack of Province cards is empty, the game ends
    #####:  370:    if (state->supplyCount[province] == 0) {
branch  0 never executed
branch  1 never executed
    #####:  371:        return 1;
        -:  372:    }
        -:  373:
        -:  374:    //if three supply pile are at 0, the game ends
    #####:  375:    j = 0;
    #####:  376:    for (i = 0; i < 25; i++) {
branch  0 never executed
branch  1 never executed
    #####:  377:        if (state->supplyCount[i] == 0) {
branch  0 never executed
branch  1 never executed
    #####:  378:            j++;
        -:  379:        }
        -:  380:    }
    #####:  381:    if (j >= 3) {
branch  0 never executed
branch  1 never executed
    #####:  382:        return 1;
        -:  383:    }
        -:  384:
    #####:  385:    return 0;
        -:  386:}
        -:  387:
function scoreFor called 208 returned 100% blocks executed 82%
      208:  388:int scoreFor(int player, struct gameState *state) {
        -:  389:
        -:  390:    int i;
      208:  391:    int score = 0;
        -:  392:    //score from hand
     1300:  393:    for (i = 0; i < state->handCount[player]; i++) {
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
     1092:  394:        if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
     1092:  395:        if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
     1092:  396:        if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
     1092:  397:        if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
     1092:  398:        if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
     1092:  399:        if (state->hand[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
        -:  400:    }
        -:  401:
        -:  402:    //score from discard
      268:  403:    for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 22%
branch  1 taken 78% (fallthrough)
       60:  404:        if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
       60:  405:        if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
       60:  406:        if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
       60:  407:        if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
       60:  408:        if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
       60:  409:        if (state->discard[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  410:    }
        -:  411:
        -:  412:    //score from deck
      268:  413:    for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 22%
branch  1 taken 78% (fallthrough)
       60:  414:        if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       60:  415:        if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       60:  416:        if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       60:  417:        if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       60:  418:        if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       60:  419:        if (state->deck[player][i] == gardens) { score = score + (fullDeckCount(player, 0, state) / 10); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  420:    }
        -:  421:
      208:  422:    return score;
        -:  423:}
        -:  424:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  425:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  426:    int i;
        -:  427:    int j;
        -:  428:    int highScore;
        -:  429:    int currentPlayer;
        -:  430:
        -:  431:    //get score for each player
    #####:  432:    for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
        -:  433:        //set unused player scores to -9999
    #####:  434:        if (i >= state->numPlayers) {
branch  0 never executed
branch  1 never executed
    #####:  435:            players[i] = -9999;
        -:  436:        }
        -:  437:        else {
    #####:  438:            players[i] = scoreFor(i, state);
call    0 never executed
        -:  439:        }
        -:  440:    }
        -:  441:
        -:  442:    //find highest score
    #####:  443:    j = 0;
    #####:  444:    for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  445:        if (players[i] > players[j]) {
branch  0 never executed
branch  1 never executed
    #####:  446:            j = i;
        -:  447:        }
        -:  448:    }
    #####:  449:    highScore = players[j];
        -:  450:
        -:  451:    //add 1 to players who had less turns
    #####:  452:    currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  453:    for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  454:        if (players[i] == highScore && i > currentPlayer) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  455:            players[i]++;
        -:  456:        }
        -:  457:    }
        -:  458:
        -:  459:    //find new highest score
    #####:  460:    j = 0;
    #####:  461:    for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  462:        if (players[i] > players[j]) {
branch  0 never executed
branch  1 never executed
    #####:  463:            j = i;
        -:  464:        }
        -:  465:    }
    #####:  466:    highScore = players[j];
        -:  467:
        -:  468:    //set winners in array to 1 and rest to 0
    #####:  469:    for (i = 0; i < MAX_PLAYERS; i++) {
branch  0 never executed
branch  1 never executed
    #####:  470:        if (players[i] == highScore) {
branch  0 never executed
branch  1 never executed
    #####:  471:            players[i] = 1;
        -:  472:        }
        -:  473:        else {
    #####:  474:            players[i] = 0;
        -:  475:        }
        -:  476:    }
        -:  477:
    #####:  478:    return 0;
        -:  479:}
        -:  480:
function drawCard called 68573 returned 100% blocks executed 92%
    68573:  481:int drawCard(int player, struct gameState *state) {
        -:  482:    int count;
        -:  483:    int deckCounter;
    68573:  484:    if (state->deckCount[player] <= 0) {//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  485:
        -:  486:        //Step 1 Shuffle the discard pile back into a deck
        -:  487:        int i;
        -:  488:        //Move discard to deck
     3150:  489:        for (i = 0; i < state->discardCount[player]; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     3135:  490:            state->deck[player][i] = state->discard[player][i];
     3135:  491:            state->discard[player][i] = -1;
        -:  492:        }
        -:  493:
       15:  494:        state->deckCount[player] = state->discardCount[player];
       15:  495:        state->discardCount[player] = 0;//Reset discard
        -:  496:
        -:  497:        //Shufffle the deck
       15:  498:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  499:
        -:  500:        if (DEBUG) {//Debug statements
        -:  501:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  502:        }
        -:  503:
       15:  504:        state->discardCount[player] = 0;
        -:  505:
        -:  506:        //Step 2 Draw Card
       15:  507:        count = state->handCount[player];//Get current player's hand count
        -:  508:
        -:  509:        if (DEBUG) {//Debug statements
        -:  510:            printf("Current hand count: %d\n", count);
        -:  511:        }
        -:  512:
       15:  513:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  514:
       15:  515:        if (deckCounter == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  516:            return -1;
        -:  517:
       15:  518:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       15:  519:        state->deckCount[player]--;
       15:  520:        state->handCount[player]++;//Increment hand count
        -:  521:    }
        -:  522:
        -:  523:    else {
    68558:  524:        int count = state->handCount[player];//Get current hand count for player
        -:  525:        int deckCounter;
        -:  526:        if (DEBUG) {//Debug statements
        -:  527:            printf("Current hand count: %d\n", count);
        -:  528:        }
        -:  529:
        -:  530:        // Take the last card from the deck and place it in the last position of the hand.
        -:  531:
    68558:  532:        deckCounter = state->deckCount[player];//Create holder for the deck count
    68558:  533:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    68558:  534:        state->deckCount[player]--;
    68558:  535:        state->handCount[player]++;//Increment hand count
        -:  536:    }
        -:  537:
    68573:  538:    return 0;
        -:  539:}
        -:  540:
function getCost called 20054 returned 100% blocks executed 97%
    20054:  541:int getCost(int cardNumber) {
    20054:  542:    switch (cardNumber) {
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 3%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 3%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 3%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 1%
branch 27 taken 0%
        -:  543:        case curse:
      830:  544:            return 0;
        -:  545:        case estate:
      718:  546:            return 2;
        -:  547:        case duchy:
      674:  548:            return 5;
        -:  549:        case province:
      738:  550:            return 8;
        -:  551:        case copper:
      702:  552:            return 0;
        -:  553:        case silver:
      734:  554:            return 3;
        -:  555:        case gold:
      814:  556:            return 6;
        -:  557:        case adventurer:
      782:  558:            return 6;
        -:  559:        case council_room:
      890:  560:            return 5;
        -:  561:        case feast:
      822:  562:            return 4;
        -:  563:        case gardens:
      786:  564:            return 4;
        -:  565:        case mine:
      770:  566:            return 5;
        -:  567:        case remodel:
      698:  568:            return 4;
        -:  569:        case smithy:
      758:  570:            return 4;
        -:  571:        case village:
      770:  572:            return 3;
        -:  573:        case baron:
      714:  574:            return 4;
        -:  575:        case great_hall:
      838:  576:            return 3;
        -:  577:        case minion:
      862:  578:            return 5;
        -:  579:        case steward:
      774:  580:            return 3;
        -:  581:        case tribute:
      874:  582:            return 5;
        -:  583:        case ambassador:
      730:  584:            return 3;
        -:  585:        case cutpurse:
      746:  586:            return 4;
        -:  587:        case embargo:
      786:  588:            return 2;
        -:  589:        case outpost:
      678:  590:            return 5;
        -:  591:        case salvager:
      770:  592:            return 4;
        -:  593:        case sea_hag:
      794:  594:            return 4;
        -:  595:        case treasure_map:
        2:  596:            return 4;
        -:  597:    }
        -:  598:
    #####:  599:    return -1;
        -:  600:}
        -:  601:
function cardEffect called 13008 returned 100% blocks executed 9%
    13008:  602:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus) {
        -:  603:    int i;
        -:  604:    int j;
        -:  605:    int k;
        -:  606:    int x;
        -:  607:    int index;
    13008:  608:    int currentPlayer = whoseTurn(state);
call    0 returned 100%
    13008:  609:    int nextPlayer = currentPlayer + 1;
        -:  610:
    13008:  611:    int tributeRevealedCards[2] = {-1, -1};
        -:  612:    int temphand[MAX_HAND];// moved above the if statement
    13008:  613:    int drawntreasure = 0;
        -:  614:    int cardDrawn;
    13008:  615:    int z = 0;// this is the counter for the temp hand
    13008:  616:    if (nextPlayer > (state->numPlayers - 1)) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  617:        nextPlayer = 0;
        -:  618:    }
        -:  619:
        -:  620:
        -:  621:    //uses switch to select card and perform actions
    13008:  622:    switch (card) {
branch  0 taken 23%
branch  1 taken 1%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 1%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 1%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 77%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  623:        case adventurer:
     3002:  624:            playAdventurer(state);
call    0 returned 100%
     3002:  625:            return 0;
        -:  626:
        -:  627:        case council_room:
        2:  628:            playCouncil_Room(state, handPos);
call    0 returned 100%
        2:  629:            return 0;
        -:  630:
        -:  631:        case feast:
        -:  632:            //gain card with cost up to 5
        -:  633:            //Backup hand
    #####:  634:            for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  635:                temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  636:                state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  637:            }
        -:  638:            //Backup hand
        -:  639:
        -:  640:            //Update Coins for Buy
    #####:  641:            updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  642:            x = 1;//Condition to loop on
    #####:  643:            while (x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  644:                if (supplyCount(choice1, state) <= 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  645:                    if (DEBUG)
        -:  646:                        printf("None of that card left, sorry!\n");
        -:  647:
        -:  648:                    if (DEBUG) {
        -:  649:                        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  650:                    }
        -:  651:                }
    #####:  652:                else if (state->coins < getCost(choice1)) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  653:                    printf("That card is too expensive!\n");
call    0 never executed
        -:  654:
        -:  655:                    if (DEBUG) {
        -:  656:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  657:                    }
        -:  658:                }
        -:  659:                else {
        -:  660:
        -:  661:                    if (DEBUG) {
        -:  662:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] +
        -:  663:                                                   state->discardCount[currentPlayer]);
        -:  664:                    }
        -:  665:
    #####:  666:                    gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  667:                    x = 0;//No more buying cards
        -:  668:
        -:  669:                    if (DEBUG) {
        -:  670:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] +
        -:  671:                                                   state->discardCount[currentPlayer]);
        -:  672:                    }
        -:  673:
        -:  674:                }
        -:  675:            }
        -:  676:
        -:  677:            //Reset Hand
    #####:  678:            for (i = 0; i <= state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  679:                state->hand[currentPlayer][i] = temphand[i];
    #####:  680:                temphand[i] = -1;
        -:  681:            }
        -:  682:            //Reset Hand
        -:  683:
    #####:  684:            return 0;
        -:  685:
        -:  686:        case gardens:
    #####:  687:            return -1;
        -:  688:
        -:  689:        case mine:
    #####:  690:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  691:
    #####:  692:            if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  693:                return -1;
        -:  694:            }
        -:  695:
    #####:  696:            if (choice2 > treasure_map || choice2 < curse) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  697:                return -1;
        -:  698:            }
        -:  699:
    #####:  700:            if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  701:                return -1;
        -:  702:            }
        -:  703:
    #####:  704:            gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  705:
        -:  706:            //discard card from hand
    #####:  707:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  708:
        -:  709:            //discard trashed card
    #####:  710:            for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  711:                if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####:  712:                    discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  713:                    break;
        -:  714:                }
        -:  715:            }
        -:  716:
    #####:  717:            return 0;
        -:  718:
        -:  719:        case remodel:
    #####:  720:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  721:
    #####:  722:            if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2)) {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  723:                return -1;
        -:  724:            }
        -:  725:
    #####:  726:            gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  727:
        -:  728:            //discard card from hand
    #####:  729:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  730:
        -:  731:            //discard trashed card
    #####:  732:            for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  733:                if (state->hand[currentPlayer][i] == j) {
branch  0 never executed
branch  1 never executed
    #####:  734:                    discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  735:                    break;
        -:  736:                }
        -:  737:            }
        -:  738:
        -:  739:
    #####:  740:            return 0;
        -:  741:
        -:  742:        case smithy:
        -:  743:            //+3 Cards
        2:  744:            playSmithy(state, handPos);
call    0 returned 100%
        2:  745:            return 0;
        -:  746:
        -:  747:        case village:
    #####:  748:            playVillage(state, handPos);
call    0 never executed
    #####:  749:            return 0;
        -:  750:
        -:  751:        case baron:
    #####:  752:            state->numBuys++;//Increase buys by 1!
    #####:  753:            if (choice1 > 0) {//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  754:                int p = 0;//Iterator for hand!
    #####:  755:                int card_not_discarded = 1;//Flag for discard set!
    #####:  756:                while (card_not_discarded) {
branch  0 never executed
branch  1 never executed
    #####:  757:                    if (state->hand[currentPlayer][p] == estate) {//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  758:                        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  759:                        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  760:                        state->discardCount[currentPlayer]++;
    #####:  761:                        for (; p < state->handCount[currentPlayer]; p++) {
branch  0 never executed
branch  1 never executed
    #####:  762:                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -:  763:                        }
    #####:  764:                        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  765:                        state->handCount[currentPlayer]--;
    #####:  766:                        card_not_discarded = 0;//Exit the loop
        -:  767:                    }
    #####:  768:                    else if (p > state->handCount[currentPlayer]) {
branch  0 never executed
branch  1 never executed
        -:  769:                        if (DEBUG) {
        -:  770:                            printf("No estate cards in your hand, invalid choice\n");
        -:  771:                            printf("Must gain an estate if there are any\n");
        -:  772:                        }
    #####:  773:                        if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  774:                            gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  775:                            state->supplyCount[estate]--;//Decrement estates
    #####:  776:                            if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  777:                                isGameOver(state);
call    0 never executed
        -:  778:                            }
        -:  779:                        }
    #####:  780:                        card_not_discarded = 0;//Exit the loop
        -:  781:                    }
        -:  782:
        -:  783:                    else {
    #####:  784:                        p++;//Next card
        -:  785:                    }
        -:  786:                }
        -:  787:            }
        -:  788:
        -:  789:            else {
    #####:  790:                if (supplyCount(estate, state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  791:                    gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  792:                    state->supplyCount[estate]--;//Decrement Estates
    #####:  793:                    if (supplyCount(estate, state) == 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  794:                        isGameOver(state);
call    0 never executed
        -:  795:                    }
        -:  796:                }
        -:  797:            }
        -:  798:
        -:  799:
    #####:  800:            return 0;
        -:  801:
        -:  802:        case great_hall:
        -:  803:            //+1 Card
        2:  804:            drawCard(currentPlayer, state);
call    0 returned 100%
        -:  805:
        -:  806:            //+1 Actions
        2:  807:            state->numActions++;
        -:  808:
        -:  809:            //discard card from hand
        2:  810:            discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  811:            return 0;
        -:  812:
        -:  813:        case minion:
        -:  814:            //+1 action
    #####:  815:            state->numActions++;
        -:  816:
        -:  817:            //discard card from hand
    #####:  818:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  819:
    #####:  820:            if (choice1)        //+2 coins
branch  0 never executed
branch  1 never executed
        -:  821:            {
    #####:  822:                state->coins = state->coins + 2;
        -:  823:            }
        -:  824:
    #####:  825:            else if (choice2)        //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  826:            {
        -:  827:                //discard hand
    #####:  828:                while (numHandCards(state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  829:                    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  830:                }
        -:  831:
        -:  832:                //draw 4
    #####:  833:                for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####:  834:                    drawCard(currentPlayer, state);
call    0 never executed
        -:  835:                }
        -:  836:
        -:  837:                //other players discard hand and redraw if hand size > 4
    #####:  838:                for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  839:                    if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  840:                        if (state->handCount[i] > 4) {
branch  0 never executed
branch  1 never executed
        -:  841:                            //discard hand
    #####:  842:                            while (state->handCount[i] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  843:                                discardCard(handPos, i, state, 0);
call    0 never executed
        -:  844:                            }
        -:  845:
        -:  846:                            //draw 4
    #####:  847:                            for (j = 0; j < 4; j++) {
branch  0 never executed
branch  1 never executed
    #####:  848:                                drawCard(i, state);
call    0 never executed
        -:  849:                            }
        -:  850:                        }
        -:  851:                    }
        -:  852:                }
        -:  853:
        -:  854:            }
    #####:  855:            return 0;
        -:  856:
        -:  857:        case steward:
    #####:  858:            playSteward(state, choice1, choice2, choice3, handPos);
call    0 never executed
    #####:  859:            return 0;
        -:  860:
        -:  861:        case tribute:
    #####:  862:            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1) {
branch  0 never executed
branch  1 never executed
    #####:  863:                if (state->deckCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  864:                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  865:                    state->deckCount[nextPlayer]--;
        -:  866:                }
    #####:  867:                else if (state->discardCount[nextPlayer] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  868:                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####:  869:                    state->discardCount[nextPlayer]--;
        -:  870:                }
        -:  871:                else {
        -:  872:                    //No Card to Reveal
        -:  873:                    if (DEBUG) {
        -:  874:                        printf("No cards to reveal\n");
        -:  875:                    }
        -:  876:                }
        -:  877:            }
        -:  878:
        -:  879:            else {
    #####:  880:                if (state->deckCount[nextPlayer] == 0) {
branch  0 never executed
branch  1 never executed
    #####:  881:                    for (i = 0; i < state->discardCount[nextPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  882:                        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  883:                        state->deckCount[nextPlayer]++;
    #####:  884:                        state->discard[nextPlayer][i] = -1;
    #####:  885:                        state->discardCount[nextPlayer]--;
        -:  886:                    }
        -:  887:
    #####:  888:                    shuffle(nextPlayer, state);//Shuffle the deck
call    0 never executed
        -:  889:                }
    #####:  890:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  891:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  892:                state->deckCount[nextPlayer]--;
    #####:  893:                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####:  894:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  895:                state->deckCount[nextPlayer]--;
        -:  896:            }
        -:  897:
    #####:  898:            if (tributeRevealedCards[0] == tributeRevealedCards[1]) {//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####:  899:                state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  900:                state->playedCardCount++;
    #####:  901:                tributeRevealedCards[1] = -1;
        -:  902:            }
        -:  903:
    #####:  904:            for (i = 0; i <= 2; i++) {
branch  0 never executed
branch  1 never executed
    #####:  905:                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  906:                    tributeRevealedCards[i] == gold) {//Treasure cards
    #####:  907:                    state->coins += 2;
        -:  908:                }
        -:  909:
    #####:  910:                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  911:                         tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  912:                         tributeRevealedCards[i] == great_hall) {//Victory Card Found
    #####:  913:                    drawCard(currentPlayer, state);
call    0 never executed
    #####:  914:                    drawCard(currentPlayer, state);
call    0 never executed
        -:  915:                }
        -:  916:                else {//Action Card
    #####:  917:                    state->numActions = state->numActions + 2;
        -:  918:                }
        -:  919:            }
        -:  920:
    #####:  921:            return 0;
        -:  922:
        -:  923:        case ambassador:
    #####:  924:            j = 0;        //used to check if player has enough cards to discard
        -:  925:
    #####:  926:            if (choice2 > 2 || choice2 < 0) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  927:                return -1;
        -:  928:            }
        -:  929:
    #####:  930:            if (choice1 == handPos) {
branch  0 never executed
branch  1 never executed
    #####:  931:                return -1;
        -:  932:            }
        -:  933:
    #####:  934:            for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  935:                if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  936:                    j++;
        -:  937:                }
        -:  938:            }
    #####:  939:            if (j < choice2) {
branch  0 never executed
branch  1 never executed
    #####:  940:                return -1;
        -:  941:            }
        -:  942:
        -:  943:            if (DEBUG)
        -:  944:                printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  945:
        -:  946:            //increase supply count for choosen card by amount being discarded
    #####:  947:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  948:
        -:  949:            //each other player gains a copy of revealed card
    #####:  950:            for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  951:                if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  952:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  953:                }
        -:  954:            }
        -:  955:
        -:  956:            //discard played card from hand
    #####:  957:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  958:
        -:  959:            //trash copies of cards returned to supply
    #####:  960:            for (j = 0; j < choice2; j++) {
branch  0 never executed
branch  1 never executed
    #####:  961:                for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  962:                    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1]) {
branch  0 never executed
branch  1 never executed
    #####:  963:                        discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  964:                        break;
        -:  965:                    }
        -:  966:                }
        -:  967:            }
        -:  968:
    #####:  969:            return 0;
        -:  970:
        -:  971:        case cutpurse:
        -:  972:
    #####:  973:            updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  974:            for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:  975:                if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  976:                    for (j = 0; j < state->handCount[i]; j++) {
branch  0 never executed
branch  1 never executed
    #####:  977:                        if (state->hand[i][j] == copper) {
branch  0 never executed
branch  1 never executed
    #####:  978:                            discardCard(j, i, state, 0);
call    0 never executed
    #####:  979:                            break;
        -:  980:                        }
    #####:  981:                        if (j == state->handCount[i]) {
branch  0 never executed
branch  1 never executed
    #####:  982:                            for (k = 0; k < state->handCount[i]; k++) {
branch  0 never executed
branch  1 never executed
        -:  983:                                if (DEBUG)
        -:  984:                                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  985:                            }
    #####:  986:                            break;
        -:  987:                        }
        -:  988:                    }
        -:  989:
        -:  990:                }
        -:  991:
        -:  992:            }
        -:  993:
        -:  994:            //discard played card from hand
    #####:  995:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  996:
    #####:  997:            return 0;
        -:  998:
        -:  999:
        -: 1000:        case embargo:
        -: 1001:            //+2 Coins
    #####: 1002:            state->coins = state->coins + 2;
        -: 1003:
        -: 1004:            //see if selected pile is in play
    #####: 1005:            if (state->supplyCount[choice1] == -1) {
branch  0 never executed
branch  1 never executed
    #####: 1006:                return -1;
        -: 1007:            }
        -: 1008:
        -: 1009:            //add embargo token to selected supply pile
    #####: 1010:            state->embargoTokens[choice1]++;
        -: 1011:
        -: 1012:            //trash card
    #####: 1013:            discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1014:            return 0;
        -: 1015:
        -: 1016:        case outpost:
        -: 1017:            //set outpost flag
    #####: 1018:            state->outpostPlayed++;
        -: 1019:
        -: 1020:            //discard card
    #####: 1021:            discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1022:            return 0;
        -: 1023:
        -: 1024:        case salvager:
        -: 1025:            //+1 buy
    10000: 1026:            state->numBuys++;
        -: 1027:
    10000: 1028:            if (choice1) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1029:                //gain coins equal to trashed card
    10000: 1030:                state->coins = state->coins + getCost(handCard(choice1, state));
call    0 returned 100%
call    1 returned 100%
        -: 1031:                //trash card
    10000: 1032:                discardCard(choice1, currentPlayer, state, 1);
call    0 returned 100%
        -: 1033:            }
        -: 1034:
        -: 1035:            //discard card
    10000: 1036:            discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
    10000: 1037:            return 0;
        -: 1038:
        -: 1039:        case sea_hag:
    #####: 1040:            for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1041:                if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1042:                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1043:                    state->deckCount[i]--;
    #####: 1044:                    state->discardCount[i]++;
    #####: 1045:                    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1046:                }
        -: 1047:            }
    #####: 1048:            return 0;
        -: 1049:
        -: 1050:        case treasure_map:
        -: 1051:            //search hand for another treasure_map
    #####: 1052:            index = -1;
    #####: 1053:            for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1054:                if (state->hand[currentPlayer][i] == treasure_map && i != handPos) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1055:                    index = i;
    #####: 1056:                    break;
        -: 1057:                }
        -: 1058:            }
    #####: 1059:            if (index > -1) {
branch  0 never executed
branch  1 never executed
        -: 1060:                //trash both treasure cards
    #####: 1061:                discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1062:                discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1063:
        -: 1064:                //gain 4 Gold cards
    #####: 1065:                for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1066:                    gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1067:                }
        -: 1068:
        -: 1069:                //return success
    #####: 1070:                return 1;
        -: 1071:            }
        -: 1072:
        -: 1073:            //no second treasure_map found in hand
    #####: 1074:            return -1;
        -: 1075:    }
        -: 1076:
    #####: 1077:    return -1;
        -: 1078:}
        -: 1079:
function discardCard called 20006 returned 100% blocks executed 89%
    20006: 1080:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag) {
        -: 1081:
        -: 1082:    //if card is not trashed, added to Played pile
    20006: 1083:    if (trashFlag < 1) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1084:        //add card to played pile
    10004: 1085:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    10004: 1086:        state->playedCardCount++;
        -: 1087:    }
        -: 1088:
        -: 1089:    //set played card to -1
    20006: 1090:    state->hand[currentPlayer][handPos] = -1;
        -: 1091:
        -: 1092:    //remove card from player's hand
    20006: 1093:    if (handPos == (state->handCount[currentPlayer] - 1))    //last card in hand array is played
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1094:    {
        -: 1095:        //reduce number of cards in hand
      160: 1096:        state->handCount[currentPlayer]--;
        -: 1097:    }
    19846: 1098:    else if (state->handCount[currentPlayer] == 1) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1099:    {
        -: 1100:        //reduce number of cards in hand
    #####: 1101:        state->handCount[currentPlayer]--;
        -: 1102:    }
        -: 1103:    else {
        -: 1104:        //replace discarded card with last card in hand
    19846: 1105:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1106:        //set last card to -1
    19846: 1107:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1108:        //reduce number of cards in hand
    19846: 1109:        state->handCount[currentPlayer]--;
        -: 1110:    }
        -: 1111:
    20006: 1112:    return 0;
        -: 1113:}
        -: 1114:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1115:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player) {
        -: 1116:    //Note: supplyPos is enum of choosen card
        -: 1117:
        -: 1118:    //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1119:    if (supplyCount(supplyPos, state) < 1) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1120:        return -1;
        -: 1121:    }
        -: 1122:
        -: 1123:    //added card for [whoseTurn] current player:
        -: 1124:    // toFlag = 0 : add to discard
        -: 1125:    // toFlag = 1 : add to deck
        -: 1126:    // toFlag = 2 : add to hand
        -: 1127:
    #####: 1128:    if (toFlag == 1) {
branch  0 never executed
branch  1 never executed
    #####: 1129:        state->deck[player][state->deckCount[player]] = supplyPos;
    #####: 1130:        state->deckCount[player]++;
        -: 1131:    }
    #####: 1132:    else if (toFlag == 2) {
branch  0 never executed
branch  1 never executed
    #####: 1133:        state->hand[player][state->handCount[player]] = supplyPos;
    #####: 1134:        state->handCount[player]++;
        -: 1135:    }
        -: 1136:    else {
    #####: 1137:        state->discard[player][state->discardCount[player]] = supplyPos;
    #####: 1138:        state->discardCount[player]++;
        -: 1139:    }
        -: 1140:
        -: 1141:    //decrease number in supply pile
    #####: 1142:    state->supplyCount[supplyPos]--;
        -: 1143:
    #####: 1144:    return 0;
        -: 1145:}
        -: 1146:
function updateCoins called 33 returned 100% blocks executed 100%
       33: 1147:int updateCoins(int player, struct gameState *state, int bonus) {
        -: 1148:    int i;
        -: 1149:
        -: 1150:    //reset coin count
       33: 1151:    state->coins = 0;
        -: 1152:
        -: 1153:    //add coins for each Treasure card in player's hand
      198: 1154:    for (i = 0; i < state->handCount[player]; i++) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      165: 1155:        if (state->hand[player][i] == copper) {
branch  0 taken 57% (fallthrough)
branch  1 taken 43%
       94: 1156:            state->coins += 1;
        -: 1157:        }
       71: 1158:        else if (state->hand[player][i] == silver) {
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        2: 1159:            state->coins += 2;
        -: 1160:        }
       69: 1161:        else if (state->hand[player][i] == gold) {
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        4: 1162:            state->coins += 3;
        -: 1163:        }
        -: 1164:    }
        -: 1165:
        -: 1166:    //add bonus
       33: 1167:    state->coins += bonus;
        -: 1168:
       33: 1169:    return 0;
        -: 1170:}
        -: 1171:
function playSmithy called 2 returned 100% blocks executed 100%
        2: 1172:int playSmithy(struct gameState *state, int handPos) {
        -: 1173:    int i;
        2: 1174:    int currentPlayer = state->whoseTurn;
        8: 1175:    for (i = 0; i < 3; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        6: 1176:        drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1177:    }
        2: 1178:    discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
        2: 1179:    return 0;
        -: 1180:}
        -: 1181:
function playAdventurer called 3002 returned 100% blocks executed 100%
     3002: 1182:int playAdventurer(struct gameState *state) {
     3002: 1183:    int drawntreasure = 0;
     3002: 1184:    int z = 0;
     3002: 1185:    int currentPlayer = state->whoseTurn;
        -: 1186:    int temphand[MAX_HAND];
        -: 1187:    int cardDrawn;
        -: 1188:
    74444: 1189:    while (drawntreasure < 2) {
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    68440: 1190:        if (state->deckCount[currentPlayer] < 1) { //if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       15: 1191:            shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1192:        }
    68440: 1193:        drawCard(currentPlayer, state);
call    0 returned 100%
    68440: 1194:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
    68440: 1195:        if (cardDrawn == copper || cardDrawn == silver)
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
     6004: 1196:            drawntreasure++;
        -: 1197:        else {
    62436: 1198:            temphand[z] = cardDrawn;
    62436: 1199:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    62436: 1200:            z++;
        -: 1201:        }
        -: 1202:    }
    68440: 1203:    while (z - 1 >= 0) {
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
    62436: 1204:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z -
        -: 1205:                                                                                       1]; // discard all cards in play that have been drawn
    62436: 1206:        z = z - 1;
        -: 1207:    }
     3002: 1208:    return 0;
        -: 1209:}
        -: 1210:
function playVillage called 0 returned 0% blocks executed 0%
    #####: 1211:int playVillage(struct gameState *state, int handPos) {
    #####: 1212:    int currentPlayer = state->whoseTurn;
    #####: 1213:    drawCard(currentPlayer, state);
call    0 never executed
    #####: 1214:    state->numActions = 2;
    #####: 1215:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1216:    return 0;
        -: 1217:}
        -: 1218:
function playSteward called 0 returned 0% blocks executed 0%
    #####: 1219:int playSteward(struct gameState *state, int choice1, int choice2, int choice3, int handPos) {
    #####: 1220:    int currentPlayer = state->whoseTurn;
    #####: 1221:    if (choice1 == 1) {
branch  0 never executed
branch  1 never executed
    #####: 1222:        drawCard(currentPlayer, state);
call    0 never executed
    #####: 1223:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1224:    }
    #####: 1225:    else if (choice1 == 2) {
branch  0 never executed
branch  1 never executed
    #####: 1226:        state->coins = state->coins + 2;
        -: 1227:    }
        -: 1228:    else {
    #####: 1229:        discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1230:        discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1231:    }
    #####: 1232:    return 0;
        -: 1233:}
        -: 1234:
function playCouncil_Room called 2 returned 100% blocks executed 100%
        2: 1235:int playCouncil_Room(struct gameState *state, int handPos) {
        -: 1236:    int i;
        2: 1237:    int currentPlayer = state->whoseTurn;
       10: 1238:    for (i = 0; i < 4; i++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        8: 1239:        drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1240:    }
        2: 1241:    state->numBuys++;
        6: 1242:    for (i = 0; i < state->numPlayers; i++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        4: 1243:        if (i != currentPlayer) {
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        2: 1244:            drawCard(i, state);
call    0 returned 100%
        -: 1245:        }
        -: 1246:    }
        2: 1247:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2: 1248:    return 0;
        -: 1249:}
        -: 1250:
        -: 1251://end of dominion.c
        -: 1252:
