	 Testing Card: smithy 
Test 01: handCount = handCount + 3 (-1, smithy) 
initial hand count = 5
hand count = 8, expected = 7
deck count = 0, expected = 2
coins = 4, expected = 4
ERROR: handCount does not match ... TEST FAILED
ERROR: deckCount does not match ... TEST FAILED
SUPPLEMENTARY TESTING COMPLETE	

 >>>>> SUCCESS: Testing complete smithy <<<<<

Function 'seahagCard'
Lines executed:0.00% of 8
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
No calls

Function 'embargoCard'
Lines executed:0.00% of 7
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 1

Function 'greathallCard'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 2

Function 'adventurerCard'
Lines executed:100.00% of 15
Branches executed:100.00% of 12
Taken at least once:100.00% of 12
Calls executed:100.00% of 2

Function 'smithyCard'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'updateCoins'
Lines executed:100.00% of 11
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:92.31% of 13
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
No calls

Function 'cardEffect'
Lines executed:16.43% of 207
Branches executed:19.55% of 179
Taken at least once:8.38% of 179
Calls executed:22.58% of 62

Function 'getCost'
Lines executed:96.67% of 30
Branches executed:100.00% of 28
Taken at least once:96.43% of 28
No calls

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:100.00% of 24
Branches executed:100.00% of 42
Taken at least once:83.33% of 42
Calls executed:33.33% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:100.00% of 9
Branches executed:100.00% of 12
Taken at least once:75.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 3
No branches
Calls executed:100.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:80.65% of 62
Branches executed:91.30% of 46
Taken at least once:73.91% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

File 'dominion.c'
Lines executed:43.47% of 559
Branches executed:49.16% of 417
Taken at least once:39.57% of 417
Calls executed:31.58% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:12
        -:    0:Programs:10
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int smithyCard(int handPos, int currentPlayer, struct gameState *state);
        -:    9:int adventurerCard(int drawntreasure, struct gameState *state, int z, int currentPlayer);
        -:   10:int greathallCard(int handPos, int currentPlayer, struct gameState *state);
        -:   11:int embargoCard(int handPos, int currentPlayer, struct gameState *state, int choice1);
        -:   12:int seahagCard(int currentPlayer, struct gameState *state);
        -:   13:
function compare called 74430 returned 100% blocks executed 100%
    74430:   14:int compare(const void* a, const void* b) {
    74430:   15:  if (*(int*)a > *(int*)b)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
    37142:   16:    return 1;
    37288:   17:  if (*(int*)a < *(int*)b)
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
    16616:   18:    return -1;
    20672:   19:  return 0;
        -:   20:}
        -:   21:
function newGame called 0 returned 0% blocks executed 0%
    #####:   22:struct gameState* newGame() {
    #####:   23:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   24:  return g;
        -:   25:}
        -:   26:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   27:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   28:		  int k8, int k9, int k10) {
    #####:   29:  int* k = malloc(10 * sizeof(int));
    #####:   30:  k[0] = k1;
    #####:   31:  k[1] = k2;
    #####:   32:  k[2] = k3;
    #####:   33:  k[3] = k4;
    #####:   34:  k[4] = k5;
    #####:   35:  k[5] = k6;
    #####:   36:  k[6] = k7;
    #####:   37:  k[7] = k8;
    #####:   38:  k[8] = k9;
    #####:   39:  k[9] = k10;
    #####:   40:  return k;
        -:   41:}
        -:   42:
function initializeGame called 12 returned 100% blocks executed 83%
       12:   43:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   44:		   struct gameState *state) {
        -:   45:
        -:   46:  int i;
        -:   47:  int j;
        -:   48:  int it;
        -:   49:  //set up random number generator
       12:   50:  SelectStream(1);
call    0 returned 100%
       12:   51:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   52:
        -:   53:  //check number of players
       12:   54:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   55:    {
    #####:   56:      return -1;
        -:   57:    }
        -:   58:
        -:   59:  //set number of players
       12:   60:  state->numPlayers = numPlayers;
        -:   61:
        -:   62:  //check selected kingdom cards are different
      132:   63:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   64:    {
     1320:   65:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   66:        {
     1200:   67:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   68:	    {
    #####:   69:	      return -1;
        -:   70:	    }
        -:   71:        }
        -:   72:    }
        -:   73:
        -:   74:
        -:   75:  //initialize supply
        -:   76:  ///////////////////////////////
        -:   77:
        -:   78:  //set number of Curse cards
       12:   79:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   80:    {
       12:   81:      state->supplyCount[curse] = 10;
        -:   82:    }
    #####:   83:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   84:    {
    #####:   85:      state->supplyCount[curse] = 20;
        -:   86:    }
        -:   87:  else
        -:   88:    {
    #####:   89:      state->supplyCount[curse] = 30;
        -:   90:    }
        -:   91:
        -:   92:  //set number of Victory cards
       12:   93:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   94:    {
       12:   95:      state->supplyCount[estate] = 8;
       12:   96:      state->supplyCount[duchy] = 8;
       12:   97:      state->supplyCount[province] = 8;
        -:   98:    }
        -:   99:  else
        -:  100:    {
    #####:  101:      state->supplyCount[estate] = 12;
    #####:  102:      state->supplyCount[duchy] = 12;
    #####:  103:      state->supplyCount[province] = 12;
        -:  104:    }
        -:  105:
        -:  106:  //set number of Treasure cards
       12:  107:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       12:  108:  state->supplyCount[silver] = 40;
       12:  109:  state->supplyCount[gold] = 30;
        -:  110:
        -:  111:  //set number of Kingdom cards
      252:  112:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  113:    {
     1980:  114:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  115:	{
     1860:  116:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  117:	    {
        -:  118:	      //check if card is a 'Victory' Kingdom card
      120:  119:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  120:		{
    #####:  121:		  if (numPlayers == 2){
branch  0 never executed
branch  1 never executed
    #####:  122:		    state->supplyCount[i] = 8;
        -:  123:		  }
    #####:  124:		  else{ state->supplyCount[i] = 12; }
        -:  125:		}
        -:  126:	      else
        -:  127:		{
      120:  128:		  state->supplyCount[i] = 10;
        -:  129:		}
      120:  130:	      break;
        -:  131:	    }
        -:  132:	  else    //card is not in the set choosen for the game
        -:  133:	    {
     1740:  134:	      state->supplyCount[i] = -1;
        -:  135:	    }
        -:  136:	}
        -:  137:
        -:  138:    }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
       36:  144:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  145:    {
       24:  146:      state->deckCount[i] = 0;
       96:  147:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  148:	{
       72:  149:	  state->deck[i][j] = estate;
       72:  150:	  state->deckCount[i]++;
        -:  151:	}
      192:  152:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  153:	{
      168:  154:	  state->deck[i][j] = copper;
      168:  155:	  state->deckCount[i]++;
        -:  156:	}
        -:  157:    }
        -:  158:
        -:  159:  //shuffle player decks
       36:  160:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  161:    {
       24:  162:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  163:	{
    #####:  164:	  return -1;
        -:  165:	}
        -:  166:    }
        -:  167:
        -:  168:  //draw player hands
       36:  169:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  170:    {
        -:  171:      //initialize hand size to zero
       24:  172:      state->handCount[i] = 0;
       24:  173:      state->discardCount[i] = 0;
        -:  174:      //draw 5 cards
        -:  175:      // for (j = 0; j < 5; j++)
        -:  176:      //	{
        -:  177:      //	  drawCard(i, state);
        -:  178:      //	}
        -:  179:    }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
      336:  182:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  183:    {
      324:  184:      state->embargoTokens[i] = 0;
        -:  185:    }
        -:  186:
        -:  187:  //initialize first player's turn
       12:  188:  state->outpostPlayed = 0;
       12:  189:  state->phase = 0;
       12:  190:  state->numActions = 1;
       12:  191:  state->numBuys = 1;
       12:  192:  state->playedCardCount = 0;
       12:  193:  state->whoseTurn = 0;
       12:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
       72:  198:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       60:  199:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  200:  }
        -:  201:
       12:  202:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  203:
       12:  204:  return 0;
        -:  205:}
        -:  206:
function shuffle called 111 returned 100% blocks executed 100%
      111:  207:int shuffle(int player, struct gameState *state) {
        -:  208:
        -:  209:
        -:  210:  int newDeck[MAX_DECK];
      111:  211:  int newDeckPos = 0;
        -:  212:  int card;
        -:  213:  int i;
        -:  214:
      111:  215:  if (state->deckCount[player] < 1)
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
       40:  216:    return -1;
       71:  217:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  218:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  219:
    11064:  220:  while (state->deckCount[player] > 0) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    10922:  221:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    10922:  222:    newDeck[newDeckPos] = state->deck[player][card];
    10922:  223:    newDeckPos++;
   896202:  224:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   885280:  225:      state->deck[player][i] = state->deck[player][i+1];
        -:  226:    }
    10922:  227:    state->deckCount[player]--;
        -:  228:  }
    10514:  229:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    10443:  230:    state->deck[player][i] = newDeck[i];
    10443:  231:    state->deckCount[player]++;
        -:  232:  }
        -:  233:
       71:  234:  return 0;
        -:  235:}
        -:  236:
function playCard called 0 returned 0% blocks executed 0%
    #####:  237:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  238:{
        -:  239:  int card;
    #####:  240:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  241:
        -:  242:  //check if it is the right phase
    #####:  243:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //check if player has enough actions
    #####:  249:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:
        -:  254:  //get card played
    #####:  255:  card = handCard(handPos, state);
call    0 never executed
        -:  256:
        -:  257:  //check if selected card is an action
    #####:  258:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //play card
    #####:  264:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:
        -:  269:  //reduce number of actions
    #####:  270:  state->numActions--;
        -:  271:
        -:  272:  //update coins (Treasure cards may be added with card draws)
    #####:  273:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  274:
    #####:  275:  return 0;
        -:  276:}
        -:  277:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  278:int buyCard(int supplyPos, struct gameState *state) {
        -:  279:  int who;
        -:  280:  if (DEBUG){
        -:  281:    printf("Entering buyCard...\n");
        -:  282:  }
        -:  283:
        -:  284:  // I don't know what to do about the phase thing.
        -:  285:
    #####:  286:  who = state->whoseTurn;
        -:  287:
    #####:  288:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  289:    if (DEBUG)
        -:  290:      printf("You do not have any buys left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  293:    if (DEBUG)
        -:  294:      printf("There are not any of that type of card left\n");
    #####:  295:    return -1;
    #####:  296:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  297:    if (DEBUG)
        -:  298:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  299:    return -1;
        -:  300:  } else {
    #####:  301:    state->phase=1;
        -:  302:    //state->supplyCount[supplyPos]--;
    #####:  303:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  304:
    #####:  305:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  306:    state->numBuys--;
        -:  307:    if (DEBUG)
        -:  308:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  309:  }
        -:  310:
        -:  311:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  312:  //state->discardCount[who]++;
        -:  313:
    #####:  314:  return 0;
        -:  315:}
        -:  316:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  317:int numHandCards(struct gameState *state) {
    #####:  318:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  319:}
        -:  320:
function handCard called 10000 returned 100% blocks executed 100%
    10000:  321:int handCard(int handPos, struct gameState *state) {
    10000:  322:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
    10000:  323:  return state->hand[currentPlayer][handPos];
        -:  324:}
        -:  325:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  326:int supplyCount(int card, struct gameState *state) {
    #####:  327:  return state->supplyCount[card];
        -:  328:}
        -:  329:
function fullDeckCount called 3 returned 100% blocks executed 82%
        3:  330:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  331:  int i;
        3:  332:  int count = 0;
        -:  333:
       18:  334:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  335:    {
       15:  336:      if (state->deck[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  337:    }
        -:  338:
       28:  339:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
        -:  340:    {
       25:  341:      if (state->hand[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  342:    }
        -:  343:
        8:  344:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 63%
branch  1 taken 38% (fallthrough)
        -:  345:    {
        5:  346:      if (state->discard[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  347:    }
        -:  348:
        3:  349:  return count;
        -:  350:}
        -:  351:
function whoseTurn called 16006 returned 100% blocks executed 100%
    16006:  352:int whoseTurn(struct gameState *state) {
    16006:  353:  return state->whoseTurn;
        -:  354:}
        -:  355:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  356:int endTurn(struct gameState *state) {
        -:  357:  int k;
        -:  358:  int i;
    #####:  359:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  360:
        -:  361:  //Discard hand
    #####:  362:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  363:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  364:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  365:  }
    #####:  366:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  367:
        -:  368:  //Code for determining the player
    #####:  369:  if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  370:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  371:  }
        -:  372:  else{
    #####:  373:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  374:  }
        -:  375:
    #####:  376:  state->outpostPlayed = 0;
    #####:  377:  state->phase = 0;
    #####:  378:  state->numActions = 1;
    #####:  379:  state->coins = 0;
    #####:  380:  state->numBuys = 1;
    #####:  381:  state->playedCardCount = 0;
    #####:  382:  state->handCount[state->whoseTurn] = 0;
        -:  383:
        -:  384:  //int k; move to top
        -:  385:  //Next player draws hand
    #####:  386:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  387:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  388:  }
        -:  389:
        -:  390:  //Update money
    #####:  391:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  392:
    #####:  393:  return 0;
        -:  394:}
        -:  395:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  396:int isGameOver(struct gameState *state) {
        -:  397:  int i;
        -:  398:  int j;
        -:  399:
        -:  400:  //if stack of Province cards is empty, the game ends
    #####:  401:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  402:    {
    #####:  403:      return 1;
        -:  404:    }
        -:  405:
        -:  406:  //if three supply pile are at 0, the game ends
    #####:  407:  j = 0;
    #####:  408:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  409:    {
    #####:  410:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  411:	{
    #####:  412:	  j++;
        -:  413:	}
        -:  414:    }
    #####:  415:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  416:    {
    #####:  417:      return 1;
        -:  418:    }
        -:  419:
    #####:  420:  return 0;
        -:  421:}
        -:  422:
function scoreFor called 52 returned 100% blocks executed 82%
       52:  423:int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:  int i;
       52:  426:  int score = 0;
        -:  427:  //score from hand
      325:  428:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -:  429:    {
      273:  430:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      273:  431:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
      273:  432:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      273:  433:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      273:  434:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      273:  435:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
        -:  436:    }
        -:  437:
        -:  438:  //score from discard
       67:  439:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 22%
branch  1 taken 78% (fallthrough)
        -:  440:    {
       15:  441:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
       15:  442:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
       15:  443:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
       15:  444:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
       15:  445:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
       15:  446:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  447:    }
        -:  448:
        -:  449:  //score from deck
       67:  450:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 22%
branch  1 taken 78% (fallthrough)
        -:  451:    {
       15:  452:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       15:  453:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       15:  454:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       15:  455:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       15:  456:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       15:  457:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  458:    }
        -:  459:
       52:  460:  return score;
        -:  461:}
        -:  462:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  463:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:  int i;
        -:  465:  int j;
        -:  466:  int highScore;
        -:  467:  int currentPlayer;
        -:  468:
        -:  469:  //get score for each player
    #####:  470:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  471:    {
        -:  472:      //set unused player scores to -9999
    #####:  473:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  474:	{
    #####:  475:	  players[i] = -9999;
        -:  476:	}
        -:  477:      else
        -:  478:	{
    #####:  479:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  480:	}
        -:  481:    }
        -:  482:
        -:  483:  //find highest score
    #####:  484:  j = 0;
    #####:  485:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  486:    {
    #####:  487:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  488:	{
    #####:  489:	  j = i;
        -:  490:	}
        -:  491:    }
    #####:  492:  highScore = players[j];
        -:  493:
        -:  494:  //add 1 to players who had less turns
    #####:  495:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  496:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  497:    {
    #####:  498:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  499:	{
    #####:  500:	  players[i]++;
        -:  501:	}
        -:  502:    }
        -:  503:
        -:  504:  //find new highest score
    #####:  505:  j = 0;
    #####:  506:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  507:    {
    #####:  508:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  509:	{
    #####:  510:	  j = i;
        -:  511:	}
        -:  512:    }
    #####:  513:  highScore = players[j];
        -:  514:
        -:  515:  //set winners in array to 1 and rest to 0
    #####:  516:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  517:    {
    #####:  518:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  519:	{
    #####:  520:	  players[i] = 1;
        -:  521:	}
        -:  522:      else
        -:  523:	{
    #####:  524:	  players[i] = 0;
        -:  525:	}
        -:  526:    }
        -:  527:
    #####:  528:  return 0;
        -:  529:}
        -:  530:
function drawCard called 27934 returned 100% blocks executed 100%
    27934:  531:int drawCard(int player, struct gameState *state)
        -:  532:{	int count;
        -:  533:  int deckCounter;
    27934:  534:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  535:
        -:  536:    //Step 1 Shuffle the discard pile back into a deck
        -:  537:    int i;
        -:  538:    //Move discard to deck
    10732:  539:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    10677:  540:      state->deck[player][i] = state->discard[player][i];
    10677:  541:      state->discard[player][i] = -1;
        -:  542:    }
        -:  543:
       55:  544:    state->deckCount[player] = state->discardCount[player];
       55:  545:    state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:    //Shufffle the deck
       55:  548:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  549:
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:    }
        -:  553:
       55:  554:    state->discardCount[player] = 0;
        -:  555:
        -:  556:    //Step 2 Draw Card
       55:  557:    count = state->handCount[player];//Get current player's hand count
        -:  558:
        -:  559:    if (DEBUG){//Debug statements
        -:  560:      printf("Current hand count: %d\n", count);
        -:  561:    }
        -:  562:
       55:  563:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
       55:  565:    if (deckCounter == 0)
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
        9:  566:      return -1;
        -:  567:
       46:  568:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       46:  569:    state->deckCount[player]--;
       46:  570:    state->handCount[player]++;//Increment hand count
        -:  571:  }
        -:  572:
        -:  573:  else{
    27879:  574:    int count = state->handCount[player];//Get current hand count for player
        -:  575:    int deckCounter;
        -:  576:    if (DEBUG){//Debug statements
        -:  577:      printf("Current hand count: %d\n", count);
        -:  578:    }
        -:  579:
    27879:  580:    deckCounter = state->deckCount[player];//Create holder for the deck count
    27879:  581:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    27879:  582:    state->deckCount[player]--;
    27879:  583:    state->handCount[player]++;//Increment hand count
        -:  584:  }
        -:  585:
    27925:  586:  return 0;
        -:  587:}
        -:  588:
function getCost called 10027 returned 100% blocks executed 97%
    10027:  589:int getCost(int cardNumber)
        -:  590:{
    10027:  591:  switch( cardNumber )
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 3%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 3%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 3%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 1%
branch 27 taken 0%
        -:  592:    {
        -:  593:    case curse:
      415:  594:      return 0;
        -:  595:    case estate:
      359:  596:      return 2;
        -:  597:    case duchy:
      337:  598:      return 5;
        -:  599:    case province:
      369:  600:      return 8;
        -:  601:    case copper:
      351:  602:      return 0;
        -:  603:    case silver:
      367:  604:      return 3;
        -:  605:    case gold:
      407:  606:      return 6;
        -:  607:    case adventurer:
      391:  608:      return 6;
        -:  609:    case council_room:
      445:  610:      return 5;
        -:  611:    case feast:
      411:  612:      return 4;
        -:  613:    case gardens:
      393:  614:      return 4;
        -:  615:    case mine:
      385:  616:      return 5;
        -:  617:    case remodel:
      349:  618:      return 4;
        -:  619:    case smithy:
      379:  620:      return 4;
        -:  621:    case village:
      385:  622:      return 3;
        -:  623:    case baron:
      357:  624:      return 4;
        -:  625:    case great_hall:
      419:  626:      return 3;
        -:  627:    case minion:
      431:  628:      return 5;
        -:  629:    case steward:
      387:  630:      return 3;
        -:  631:    case tribute:
      437:  632:      return 5;
        -:  633:    case ambassador:
      365:  634:      return 3;
        -:  635:    case cutpurse:
      373:  636:      return 4;
        -:  637:    case embargo:
      393:  638:      return 2;
        -:  639:    case outpost:
      339:  640:      return 5;
        -:  641:    case salvager:
      385:  642:      return 4;
        -:  643:    case sea_hag:
      397:  644:      return 4;
        -:  645:    case treasure_map:
        1:  646:      return 4;
        -:  647:    }
        -:  648:
    #####:  649:  return -1;
        -:  650:}
        -:  651:
function cardEffect called 6006 returned 100% blocks executed 14%
     6006:  652:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  653:{
        -:  654:  int i;
        -:  655:  int j;
        -:  656:  int k;
        -:  657:  int x;
        -:  658:  int index;
     6006:  659:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     6006:  660:  int nextPlayer = currentPlayer + 1;
        -:  661:
     6006:  662:  int tributeRevealedCards[2] = {-1, -1};
        -:  663:  int temphand[MAX_HAND];// moved above the if statement
     6006:  664:  int drawntreasure=0;
        -:  665:  int cardDrawn;
     6006:  666:  int z = 0;// this is the counter for the temp hand
     6006:  667:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  668:    nextPlayer = 0;
        -:  669:  }
        -:  670:
        -:  671:
        -:  672:  //uses switch to select card and perform actions
     6006:  673:  switch( card )
branch  0 taken 17%
branch  1 taken 1%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 1%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 1%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 83%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  674:    {
        -:  675:    case adventurer:
     1002:  676:        adventurerCard(drawntreasure, state, z, currentPlayer);
call    0 returned 100%
        -:  677:
        -:  678:    case council_room:
        -:  679:      //+4 Cards
     5015:  680:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  681:	{
     4012:  682:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  683:	}
        -:  684:
        -:  685:      //+1 Buy
     1003:  686:      state->numBuys++;
        -:  687:
        -:  688:      //Each other player draws a card
     3009:  689:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  690:	{
     2006:  691:	  if ( i != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  692:	    {
     1003:  693:	      drawCard(i, state);
call    0 returned 100%
        -:  694:	    }
        -:  695:	}
        -:  696:
        -:  697:      //put played card in played card pile
     1003:  698:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  699:
     1003:  700:      return 0;
        -:  701:
        -:  702:    case feast:
        -:  703:      //gain card with cost up to 5
        -:  704:      //Backup hand
    #####:  705:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  706:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  707:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  708:      }
        -:  709:      //Backup hand
        -:  710:
        -:  711:      //Update Coins for Buy
    #####:  712:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  713:      x = 1;//Condition to loop on
    #####:  714:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  715:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  716:	  if (DEBUG)
        -:  717:	    printf("None of that card left, sorry!\n");
        -:  718:
        -:  719:	  if (DEBUG){
        -:  720:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  721:	  }
        -:  722:	}
    #####:  723:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  724:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  725:
        -:  726:	  if (DEBUG){
        -:  727:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  728:	  }
        -:  729:	}
        -:  730:	else{
        -:  731:
        -:  732:	  if (DEBUG){
        -:  733:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  734:	  }
        -:  735:
    #####:  736:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  737:	  x = 0;//No more buying cards
        -:  738:
        -:  739:	  if (DEBUG){
        -:  740:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  741:	  }
        -:  742:
        -:  743:	}
        -:  744:      }
        -:  745:
        -:  746:      //Reset Hand
    #####:  747:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  748:	state->hand[currentPlayer][i] = temphand[i];
    #####:  749:	temphand[i] = -1;
        -:  750:      }
        -:  751:      //Reset Hand
        -:  752:
    #####:  753:      return 0;
        -:  754:
        -:  755:    case gardens:
    #####:  756:      return -1;
        -:  757:
        -:  758:    case mine:
    #####:  759:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  760:
    #####:  761:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  762:	{
    #####:  763:	  return -1;
        -:  764:	}
        -:  765:
    #####:  766:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  767:	{
    #####:  768:	  return -1;
        -:  769:	}
        -:  770:
    #####:  771:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  772:	{
    #####:  773:	  return -1;
        -:  774:	}
        -:  775:
    #####:  776:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  777:
        -:  778:      //discard card from hand
    #####:  779:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  780:
        -:  781:      //discard trashed card
    #####:  782:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  783:	{
    #####:  784:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  785:	    {
    #####:  786:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  787:	      break;
        -:  788:	    }
        -:  789:	}
        -:  790:
    #####:  791:      return 0;
        -:  792:
        -:  793:    case remodel:
    #####:  794:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  795:
    #####:  796:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  797:	{
    #####:  798:	  return -1;
        -:  799:	}
        -:  800:
    #####:  801:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  802:
        -:  803:      //discard card from hand
    #####:  804:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  805:
        -:  806:      //discard trashed card
    #####:  807:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  808:	{
    #####:  809:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  810:	    {
    #####:  811:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  812:	      break;
        -:  813:	    }
        -:  814:	}
        -:  815:
        -:  816:
    #####:  817:      return 0;
        -:  818:
        -:  819:    case smithy:
        2:  820:      smithyCard(handPos, currentPlayer, state);
call    0 returned 100%
        -:  821:
        -:  822:    case village:
        -:  823:      //+1 Card
        2:  824:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  825:
        -:  826:      //+2 Actions
        2:  827:      state->numActions = state->numActions + 2;
        -:  828:
        -:  829:      //discard played card from hand
        2:  830:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  831:      return 0;
        -:  832:
        -:  833:    case baron:
    #####:  834:      state->numBuys++;//Increase buys by 1!
    #####:  835:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  836:	int p = 0;//Iterator for hand!
    #####:  837:	int card_not_discarded = 1;//Flag for discard set!
    #####:  838:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  839:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  840:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  841:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  842:	    state->discardCount[currentPlayer]++;
    #####:  843:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  844:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  845:	    }
    #####:  846:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  847:	    state->handCount[currentPlayer]--;
    #####:  848:	    card_not_discarded = 0;//Exit the loop
        -:  849:	  }
    #####:  850:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  851:	    if(DEBUG) {
        -:  852:	      printf("No estate cards in your hand, invalid choice\n");
        -:  853:	      printf("Must gain an estate if there are any\n");
        -:  854:	    }
    #####:  855:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  856:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  857:	      state->supplyCount[estate]--;//Decrement estates
    #####:  858:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  859:		isGameOver(state);
call    0 never executed
        -:  860:	      }
        -:  861:	    }
    #####:  862:	    card_not_discarded = 0;//Exit the loop
        -:  863:	  }
        -:  864:
        -:  865:	  else{
    #####:  866:	    p++;//Next card
        -:  867:	  }
        -:  868:	}
        -:  869:      }
        -:  870:
        -:  871:      else{
    #####:  872:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  873:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  874:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  875:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  876:	    isGameOver(state);
call    0 never executed
        -:  877:	  }
        -:  878:	}
        -:  879:      }
        -:  880:
        -:  881:
    #####:  882:      return 0;
        -:  883:
        -:  884:    case great_hall:
        1:  885:        greathallCard(handPos, currentPlayer, state);
call    0 returned 100%
        -:  886:
        -:  887:    case minion:
        -:  888:      //+1 action
        1:  889:      state->numActions++;
        -:  890:
        -:  891:      //discard card from hand
        1:  892:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  893:
        1:  894:      if (choice1)		//+2 coins
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  895:	{
    #####:  896:	  state->coins = state->coins + 2;
        -:  897:	}
        -:  898:
        1:  899:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  900:	{
        -:  901:	  //discard hand
    #####:  902:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  903:	    {
    #####:  904:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  905:	    }
        -:  906:
        -:  907:	  //draw 4
    #####:  908:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  909:	    {
    #####:  910:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  911:	    }
        -:  912:
        -:  913:	  //other players discard hand and redraw if hand size > 4
    #####:  914:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  915:	    {
    #####:  916:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  917:		{
    #####:  918:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  919:		    {
        -:  920:		      //discard hand
    #####:  921:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  922:			{
    #####:  923:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  924:			}
        -:  925:
        -:  926:		      //draw 4
    #####:  927:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  928:			{
    #####:  929:			  drawCard(i, state);
call    0 never executed
        -:  930:			}
        -:  931:		    }
        -:  932:		}
        -:  933:	    }
        -:  934:
        -:  935:	}
        1:  936:      return 0;
        -:  937:
        -:  938:    case steward:
    #####:  939:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  940:	{
        -:  941:	  //+2 cards
    #####:  942:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  943:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  944:	}
    #####:  945:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  946:	{
        -:  947:	  //+2 coins
    #####:  948:	  state->coins = state->coins + 2;
        -:  949:	}
        -:  950:      else
        -:  951:	{
        -:  952:	  //trash 2 cards in hand
    #####:  953:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  954:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  955:	}
        -:  956:
        -:  957:      //discard card from hand
    #####:  958:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  959:      return 0;
        -:  960:
        -:  961:    case tribute:
    #####:  962:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  963:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  964:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  965:	  state->deckCount[nextPlayer]--;
        -:  966:	}
    #####:  967:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  968:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  969:	  state->discardCount[nextPlayer]--;
        -:  970:	}
        -:  971:	else{
        -:  972:	  //No Card to Reveal
        -:  973:	  if (DEBUG){
        -:  974:	    printf("No cards to reveal\n");
        -:  975:	  }
        -:  976:	}
        -:  977:      }
        -:  978:
        -:  979:      else{
    #####:  980:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  981:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  982:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  983:	    state->deckCount[nextPlayer]++;
    #####:  984:	    state->discard[nextPlayer][i] = -1;
    #####:  985:	    state->discardCount[nextPlayer]--;
        -:  986:	  }
        -:  987:
    #####:  988:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  989:	}
    #####:  990:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  991:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  992:	state->deckCount[nextPlayer]--;
    #####:  993:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  994:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  995:	state->deckCount[nextPlayer]--;
        -:  996:      }
        -:  997:
    #####:  998:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####:  999:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1000:	state->playedCardCount++;
    #####: 1001:	tributeRevealedCards[1] = -1;
        -: 1002:      }
        -: 1003:
    #####: 1004:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1005:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1006:	  state->coins += 2;
        -: 1007:	}
        -: 1008:
    #####: 1009:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1010:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1011:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1012:	}
        -: 1013:	else{//Action Card
    #####: 1014:	  state->numActions = state->numActions + 2;
        -: 1015:	}
        -: 1016:      }
        -: 1017:
    #####: 1018:      return 0;
        -: 1019:
        -: 1020:    case ambassador:
    #####: 1021:      j = 0;		//used to check if player has enough cards to discard
        -: 1022:
    #####: 1023:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1024:	{
    #####: 1025:	  return -1;
        -: 1026:	}
        -: 1027:
    #####: 1028:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1029:	{
    #####: 1030:	  return -1;
        -: 1031:	}
        -: 1032:
    #####: 1033:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1034:	{
    #####: 1035:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1036:	    {
    #####: 1037:	      j++;
        -: 1038:	    }
        -: 1039:	}
    #####: 1040:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1041:	{
    #####: 1042:	  return -1;
        -: 1043:	}
        -: 1044:
        -: 1045:      if (DEBUG)
        -: 1046:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1047:
        -: 1048:      //increase supply count for choosen card by amount being discarded
    #####: 1049:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1050:
        -: 1051:      //each other player gains a copy of revealed card
    #####: 1052:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1053:	{
    #####: 1054:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1055:	    {
    #####: 1056:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1057:	    }
        -: 1058:	}
        -: 1059:
        -: 1060:      //discard played card from hand
    #####: 1061:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1062:
        -: 1063:      //trash copies of cards returned to supply
    #####: 1064:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1065:	{
    #####: 1066:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1067:	    {
    #####: 1068:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1069:		{
    #####: 1070:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1071:		  break;
        -: 1072:		}
        -: 1073:	    }
        -: 1074:	}
        -: 1075:
    #####: 1076:      return 0;
        -: 1077:
        -: 1078:    case cutpurse:
        -: 1079:
    #####: 1080:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1081:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1082:	{
    #####: 1083:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1084:	    {
    #####: 1085:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1086:		{
    #####: 1087:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1088:		    {
    #####: 1089:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1090:		      break;
        -: 1091:		    }
    #####: 1092:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1093:		    {
    #####: 1094:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1095:			{
        -: 1096:			  if (DEBUG)
        -: 1097:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1098:			}
    #####: 1099:		      break;
        -: 1100:		    }
        -: 1101:		}
        -: 1102:
        -: 1103:	    }
        -: 1104:
        -: 1105:	}
        -: 1106:
        -: 1107:      //discard played card from hand
    #####: 1108:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1109:
    #####: 1110:      return 0;
        -: 1111:
        -: 1112:
        -: 1113:    case embargo:
    #####: 1114:        embargoCard(handPos, currentPlayer, state, choice1);
call    0 never executed
        -: 1115:
        -: 1116:    case outpost:
        -: 1117:      //set outpost flag
    #####: 1118:      state->outpostPlayed++;
        -: 1119:
        -: 1120:      //discard card
    #####: 1121:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1122:      return 0;
        -: 1123:
        -: 1124:    case salvager:
        -: 1125:      //+1 buy
     5000: 1126:      state->numBuys++;
        -: 1127:
     5000: 1128:      if (choice1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1129:	{
        -: 1130:	  //gain coins equal to trashed card
     5000: 1131:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 returned 100%
call    1 returned 100%
        -: 1132:	  //trash card
     5000: 1133:	  discardCard(choice1, currentPlayer, state, 1);
call    0 returned 100%
        -: 1134:	}
        -: 1135:
        -: 1136:      //discard card
     5000: 1137:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     5000: 1138:      return 0;
        -: 1139:
        -: 1140:    case sea_hag:
    #####: 1141:        seahagCard(currentPlayer, state);
call    0 never executed
        -: 1142:
        -: 1143:    case treasure_map:
        -: 1144:      //search hand for another treasure_map
    #####: 1145:      index = -1;
    #####: 1146:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1147:	{
    #####: 1148:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1149:	    {
    #####: 1150:	      index = i;
    #####: 1151:	      break;
        -: 1152:	    }
        -: 1153:	}
    #####: 1154:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1155:	{
        -: 1156:	  //trash both treasure cards
    #####: 1157:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1158:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1159:
        -: 1160:	  //gain 4 Gold cards
    #####: 1161:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1162:	    {
    #####: 1163:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1164:	    }
        -: 1165:
        -: 1166:	  //return success
    #####: 1167:	  return 1;
        -: 1168:	}
        -: 1169:
        -: 1170:      //no second treasure_map found in hand
    #####: 1171:      return -1;
        -: 1172:    }
        -: 1173:
    #####: 1174:  return -1;
        -: 1175:}
        -: 1176:
function discardCard called 11008 returned 100% blocks executed 89%
    11008: 1177:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1178:{
        -: 1179:
        -: 1180:  //if card is not trashed, added to Played pile
    11008: 1181:  if (trashFlag < 1)
branch  0 taken 55% (fallthrough)
branch  1 taken 45%
        -: 1182:    {
        -: 1183:      //add card to played pile
     6008: 1184:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
     6008: 1185:      state->playedCardCount++;
        -: 1186:    }
        -: 1187:
        -: 1188:  //set played card to -1
    11008: 1189:  state->hand[currentPlayer][handPos] = -1;
        -: 1190:
        -: 1191:  //remove card from player's hand
    11008: 1192:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1193:    {
        -: 1194:      //reduce number of cards in hand
       80: 1195:      state->handCount[currentPlayer]--;
        -: 1196:    }
    10928: 1197:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1198:    {
        -: 1199:      //reduce number of cards in hand
    #####: 1200:      state->handCount[currentPlayer]--;
        -: 1201:    }
        -: 1202:  else
        -: 1203:    {
        -: 1204:      //replace discarded card with last card in hand
    10928: 1205:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1206:      //set last card to -1
    10928: 1207:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1208:      //reduce number of cards in hand
    10928: 1209:      state->handCount[currentPlayer]--;
        -: 1210:    }
        -: 1211:
    11008: 1212:  return 0;
        -: 1213:}
        -: 1214:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1215:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1216:{
        -: 1217:  //Note: supplyPos is enum of choosen card
        -: 1218:
        -: 1219:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1220:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1221:    {
    #####: 1222:      return -1;
        -: 1223:    }
        -: 1224:
        -: 1225:  //added card for [whoseTurn] current player:
        -: 1226:  // toFlag = 0 : add to discard
        -: 1227:  // toFlag = 1 : add to deck
        -: 1228:  // toFlag = 2 : add to hand
        -: 1229:
    #####: 1230:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1231:    {
    #####: 1232:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1233:      state->deckCount[player]++;
        -: 1234:    }
    #####: 1235:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1236:    {
    #####: 1237:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1238:      state->handCount[player]++;
        -: 1239:    }
        -: 1240:  else
        -: 1241:    {
    #####: 1242:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1243:      state->discardCount[player]++;
        -: 1244:    }
        -: 1245:
        -: 1246:  //decrease number in supply pile
    #####: 1247:  state->supplyCount[supplyPos]--;
        -: 1248:
    #####: 1249:  return 0;
        -: 1250:}
        -: 1251:
function updateCoins called 17 returned 100% blocks executed 100%
       17: 1252:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1253:{
        -: 1254:  int i;
        -: 1255:
        -: 1256:  //reset coin count
       17: 1257:  state->coins = 0;
        -: 1258:
        -: 1259:  //add coins for each Treasure card in player's hand
      102: 1260:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1261:    {
       85: 1262:      if (state->hand[player][i] == copper)
branch  0 taken 58% (fallthrough)
branch  1 taken 42%
        -: 1263:	{
       49: 1264:	  state->coins += 1;
        -: 1265:	}
       36: 1266:      else if (state->hand[player][i] == silver)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -: 1267:	{
        1: 1268:	  state->coins += 2;
        -: 1269:	}
       35: 1270:      else if (state->hand[player][i] == gold)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -: 1271:	{
        2: 1272:	  state->coins += 3;
        -: 1273:	}
        -: 1274:    }
        -: 1275:
        -: 1276:  //add bonus
       17: 1277:  state->coins += bonus;
        -: 1278:
       17: 1279:  return 0;
        -: 1280:}
        -: 1281:
function smithyCard called 2 returned 100% blocks executed 100%
        2: 1282:int smithyCard(int handPos, int currentPlayer, struct gameState *state) {
        -: 1283:    int i;
       10: 1284:    for (i = 0; i < 4; i++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        8: 1285:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1286:	}
        -: 1287:
        2: 1288:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2: 1289:    return 0;
        -: 1290:}
        -: 1291:
function adventurerCard called 1002 returned 100% blocks executed 100%
     1002: 1292:int adventurerCard(int drawntreasure, struct gameState *state, int z, int currentPlayer) {
        -: 1293:    int temphand[MAX_HAND];
    24851: 1294:    while(drawntreasure<3){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    22847: 1295:        if (state->deckCount[currentPlayer] <1){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       31: 1296:          shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1297:        }
    22847: 1298:        drawCard(currentPlayer, state);
call    0 returned 100%
    22847: 1299:        int cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
    22847: 1300:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 95% (fallthrough)
branch  1 taken 5%
branch  2 taken 96% (fallthrough)
branch  3 taken 4%
branch  4 taken 4% (fallthrough)
branch  5 taken 96%
     3006: 1301:          drawntreasure++;
        -: 1302:        else{
    19841: 1303:          temphand[z]=cardDrawn;
    19841: 1304:          state->handCount[currentPlayer]--;
    19841: 1305:          z++;
        -: 1306:        }
        -: 1307:      }
    21845: 1308:    while(z-1>=0){
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
    19841: 1309:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1];
    19841: 1310:	z=z-1;
        -: 1311:    }
        -: 1312:
     1002: 1313:    return 0;
        -: 1314:}
        -: 1315:
function greathallCard called 1 returned 100% blocks executed 100%
        1: 1316:int greathallCard(int handPos, int currentPlayer, struct gameState *state) {
        1: 1317:      drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1318:
        1: 1319:      state->numActions++;
        -: 1320:
        1: 1321:      drawCard(currentPlayer, state);
call    0 returned 100%
        1: 1322:      return 0;
        -: 1323:}
        -: 1324:
function embargoCard called 0 returned 0% blocks executed 0%
    #####: 1325:int embargoCard(int handPos, int currentPlayer, struct gameState *state, int choice1) {
        -: 1326:
    #####: 1327:      state->numActions = state->numActions + 2;
        -: 1328:
    #####: 1329:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1330:	{
    #####: 1331:	  return -1;
        -: 1332:	}
        -: 1333:
    #####: 1334:      state->embargoTokens[choice1]++;
        -: 1335:
    #####: 1336:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1337:      return 0;
        -: 1338:
        -: 1339:}
        -: 1340:
function seahagCard called 0 returned 0% blocks executed 0%
    #####: 1341:int seahagCard(int currentPlayer, struct gameState *state) {
        -: 1342:    int i;
    #####: 1343:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1344:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1345:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1346:	  state->deckCount[i]--;
    #####: 1347:	  state->discardCount[i]++;
    #####: 1348:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1349:	}
        -: 1350:      }
    #####: 1351:      return 0;
        -: 1352:}
        -: 1353:
        -: 1354://end of dominion.c
        -: 1355:
