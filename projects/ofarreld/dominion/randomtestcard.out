	 Testing Card: salvager 

 >>>>>>> salvager TESTING STATUS: COMPLETE <<<<<<<

Function '_cardSeaHag'
Lines executed:0.00% of 7
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

Function '_cardAdventurer'
Lines executed:100.00% of 18
Branches executed:100.00% of 12
Taken at least once:100.00% of 12
Calls executed:100.00% of 4

Function '_cardSteward'
Lines executed:0.00% of 9
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
Calls executed:0.00% of 4

Function '_cardVillage'
Lines executed:0.00% of 5
No branches
Calls executed:0.00% of 2

Function '_cardSmithy'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'updateCoins'
Lines executed:100.00% of 11
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:92.31% of 13
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
No calls

Function 'cardEffect'
Lines executed:16.27% of 209
Branches executed:19.78% of 182
Taken at least once:10.44% of 182
Calls executed:20.69% of 58

Function 'getCost'
Lines executed:96.67% of 30
Branches executed:100.00% of 28
Taken at least once:96.43% of 28
No calls

Function 'drawCard'
Lines executed:95.45% of 22
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:100.00% of 26
Branches executed:100.00% of 42
Taken at least once:95.24% of 42
No calls

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:100.00% of 9
Branches executed:100.00% of 12
Taken at least once:75.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 3
No branches
Calls executed:100.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:80.65% of 62
Branches executed:91.30% of 46
Taken at least once:73.91% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

File 'dominion.c'
Lines executed:42.68% of 567
Branches executed:49.05% of 420
Taken at least once:41.19% of 420
Calls executed:29.03% of 93
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:18
        -:    0:Programs:10
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int _cardSeaHag(int currentPlayer, struct gameState *state);
        -:    9:int _cardAdventurer(int currentPlayer, struct gameState *state, int drawntreasure, int handPos, int num);
        -:   10:int _cardSteward(int currentPlayer, struct gameState *state, int handPos, int num, int choice1, int choice2, int choice3);
        -:   11:int _cardVillage(int currentPlayer, struct gameState *state, int handPos, int num);
        -:   12:int _cardSmithy(int currentPlayer, struct gameState *state, int handPos, int num);
        -:   13:
        -:   14:
function compare called 17120 returned 100% blocks executed 100%
    17120:   15:int compare(const void* a, const void* b) {
    17120:   16:  if (*(int*)a > *(int*)b)
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
     8373:   17:    return 1;
     8747:   18:  if (*(int*)a < *(int*)b)
branch  0 taken 42% (fallthrough)
branch  1 taken 58%
     3698:   19:    return -1;
     5049:   20:  return 0;
        -:   21:}
        -:   22:
function newGame called 0 returned 0% blocks executed 0%
    #####:   23:struct gameState* newGame() {
    #####:   24:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   25:  return g;
        -:   26:}
        -:   27:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   28:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   29:		  int k8, int k9, int k10) {
    #####:   30:  int* k = malloc(10 * sizeof(int));
    #####:   31:  k[0] = k1;
    #####:   32:  k[1] = k2;
    #####:   33:  k[2] = k3;
    #####:   34:  k[3] = k4;
    #####:   35:  k[4] = k5;
    #####:   36:  k[5] = k6;
    #####:   37:  k[6] = k7;
    #####:   38:  k[7] = k8;
    #####:   39:  k[8] = k9;
    #####:   40:  k[9] = k10;
    #####:   41:  return k;
        -:   42:}
        -:   43:
function initializeGame called 18 returned 100% blocks executed 83%
       18:   44:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   45:		   struct gameState *state) {
        -:   46:
        -:   47:  int i;
        -:   48:  int j;
        -:   49:  int it;			
        -:   50:  //set up random number generator
       18:   51:  SelectStream(1);
call    0 returned 100%
       18:   52:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   53:  
        -:   54:  //check number of players
       18:   55:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   56:    {
    #####:   57:      return -1;
        -:   58:    }
        -:   59:
        -:   60:  //set number of players
       18:   61:  state->numPlayers = numPlayers;
        -:   62:
        -:   63:  //check selected kingdom cards are different
      198:   64:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   65:    {
     1980:   66:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   67:        {
     1800:   68:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   69:	    {
    #####:   70:	      return -1;
        -:   71:	    }
        -:   72:        }
        -:   73:    }
        -:   74:
        -:   75:
        -:   76:  //initialize supply
        -:   77:  ///////////////////////////////
        -:   78:
        -:   79:  //set number of Curse cards
       18:   80:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   81:    {
       18:   82:      state->supplyCount[curse] = 10;
        -:   83:    }
    #####:   84:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   85:    {
    #####:   86:      state->supplyCount[curse] = 20;
        -:   87:    }
        -:   88:  else
        -:   89:    {
    #####:   90:      state->supplyCount[curse] = 30;
        -:   91:    }
        -:   92:
        -:   93:  //set number of Victory cards
       18:   94:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   95:    {
       18:   96:      state->supplyCount[estate] = 8;
       18:   97:      state->supplyCount[duchy] = 8;
       18:   98:      state->supplyCount[province] = 8;
        -:   99:    }
        -:  100:  else
        -:  101:    {
    #####:  102:      state->supplyCount[estate] = 12;
    #####:  103:      state->supplyCount[duchy] = 12;
    #####:  104:      state->supplyCount[province] = 12;
        -:  105:    }
        -:  106:
        -:  107:  //set number of Treasure cards
       18:  108:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       18:  109:  state->supplyCount[silver] = 40;
       18:  110:  state->supplyCount[gold] = 30;
        -:  111:
        -:  112:  //set number of Kingdom cards
      378:  113:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  114:    {
     2970:  115:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  116:	{
     2790:  117:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  118:	    {
        -:  119:	      //check if card is a 'Victory' Kingdom card
      180:  120:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  121:		{
    #####:  122:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  123:		    state->supplyCount[i] = 8; 
        -:  124:		  }
    #####:  125:		  else{ state->supplyCount[i] = 12; }
        -:  126:		}
        -:  127:	      else
        -:  128:		{
      180:  129:		  state->supplyCount[i] = 10;
        -:  130:		}
      180:  131:	      break;
        -:  132:	    }
        -:  133:	  else    //card is not in the set choosen for the game
        -:  134:	    {
     2610:  135:	      state->supplyCount[i] = -1;
        -:  136:	    }
        -:  137:	}
        -:  138:
        -:  139:    }
        -:  140:
        -:  141:  ////////////////////////
        -:  142:  //supply intilization complete
        -:  143:
        -:  144:  //set player decks
       54:  145:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  146:    {
       36:  147:      state->deckCount[i] = 0;
      144:  148:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  149:	{
      108:  150:	  state->deck[i][j] = estate;
      108:  151:	  state->deckCount[i]++;
        -:  152:	}
      288:  153:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  154:	{
      252:  155:	  state->deck[i][j] = copper;
      252:  156:	  state->deckCount[i]++;		
        -:  157:	}
        -:  158:    }
        -:  159:
        -:  160:  //shuffle player decks
       54:  161:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  162:    {
       36:  163:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  164:	{
    #####:  165:	  return -1;
        -:  166:	}
        -:  167:    }
        -:  168:
        -:  169:  //draw player hands
       54:  170:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  171:    {  
        -:  172:      //initialize hand size to zero
       36:  173:      state->handCount[i] = 0;
       36:  174:      state->discardCount[i] = 0;
        -:  175:      //draw 5 cards
        -:  176:      // for (j = 0; j < 5; j++)
        -:  177:      //	{
        -:  178:      //	  drawCard(i, state);
        -:  179:      //	}
        -:  180:    }
        -:  181:  
        -:  182:  //set embargo tokens to 0 for all supply piles
      504:  183:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  184:    {
      486:  185:      state->embargoTokens[i] = 0;
        -:  186:    }
        -:  187:
        -:  188:  //initialize first player's turn
       18:  189:  state->outpostPlayed = 0;
       18:  190:  state->phase = 0;
       18:  191:  state->numActions = 1;
       18:  192:  state->numBuys = 1;
       18:  193:  state->playedCardCount = 0;
       18:  194:  state->whoseTurn = 0;
       18:  195:  state->handCount[state->whoseTurn] = 0;
        -:  196:  //int it; move to top
        -:  197:
        -:  198:  //Moved draw cards to here, only drawing at the start of a turn
      108:  199:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       90:  200:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  201:  }
        -:  202:
       18:  203:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  204:
       18:  205:  return 0;
        -:  206:}
        -:  207:
function shuffle called 68 returned 100% blocks executed 100%
       68:  208:int shuffle(int player, struct gameState *state) {
        -:  209: 
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       68:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       68:  216:  if (state->deckCount[player] < 1)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        8:  217:    return -1;
       60:  218:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
     2880:  221:  while (state->deckCount[player] > 0) {
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
     2760:  222:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     2760:  223:    newDeck[newDeckPos] = state->deck[player][card];
     2760:  224:    newDeckPos++;
   196341:  225:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   193581:  226:      state->deck[player][i] = state->deck[player][i+1];
        -:  227:    }
     2760:  228:    state->deckCount[player]--;
        -:  229:  }
     2820:  230:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 98%
branch  1 taken 2% (fallthrough)
     2760:  231:    state->deck[player][i] = newDeck[i];
     2760:  232:    state->deckCount[player]++;
        -:  233:  }
        -:  234:
       60:  235:  return 0;
        -:  236:}
        -:  237:
function playCard called 0 returned 0% blocks executed 0%
    #####:  238:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  239:{	
        -:  240:  int card;
    #####:  241:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  242:
        -:  243:  //check if it is the right phase
    #####:  244:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //check if player has enough actions
    #####:  250:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //get card played
    #####:  256:  card = handCard(handPos, state);
call    0 never executed
        -:  257:	
        -:  258:  //check if selected card is an action
    #####:  259:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //play card
    #####:  265:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  266:    {
    #####:  267:      return -1;
        -:  268:    }
        -:  269:	
        -:  270:  //reduce number of actions
    #####:  271:  state->numActions--;
        -:  272:
        -:  273:  //update coins (Treasure cards may be added with card draws)
    #####:  274:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  275:	
    #####:  276:  return 0;
        -:  277:}
        -:  278:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  279:int buyCard(int supplyPos, struct gameState *state) {
        -:  280:  int who;
        -:  281:  if (DEBUG){
        -:  282:    printf("Entering buyCard...\n");
        -:  283:  }
        -:  284:
        -:  285:  // I don't know what to do about the phase thing.
        -:  286:
    #####:  287:  who = state->whoseTurn;
        -:  288:
    #####:  289:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  290:    if (DEBUG)
        -:  291:      printf("You do not have any buys left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  294:    if (DEBUG)
        -:  295:      printf("There are not any of that type of card left\n");
    #####:  296:    return -1;
    #####:  297:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  298:    if (DEBUG) 
        -:  299:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  300:    return -1;
        -:  301:  } else {
    #####:  302:    state->phase=1;
        -:  303:    //state->supplyCount[supplyPos]--;
    #####:  304:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  305:  
    #####:  306:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  307:    state->numBuys--;
        -:  308:    if (DEBUG)
        -:  309:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  310:  }
        -:  311:
        -:  312:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  313:  //state->discardCount[who]++;
        -:  314:    
    #####:  315:  return 0;
        -:  316:}
        -:  317:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  318:int numHandCards(struct gameState *state) {
    #####:  319:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  320:}
        -:  321:
function handCard called 10000 returned 100% blocks executed 100%
    10000:  322:int handCard(int handPos, struct gameState *state) {
    10000:  323:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
    10000:  324:  return state->hand[currentPlayer][handPos];
        -:  325:}
        -:  326:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  327:int supplyCount(int card, struct gameState *state) {
    #####:  328:  return state->supplyCount[card];
        -:  329:}
        -:  330:
function fullDeckCount called 2 returned 100% blocks executed 82%
        2:  331:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  332:  int i;
        2:  333:  int count = 0;
        -:  334:
       12:  335:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  336:    {
       10:  337:      if (state->deck[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  338:    }
        -:  339:
       12:  340:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  341:    {
       10:  342:      if (state->hand[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  343:    }
        -:  344:
       12:  345:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  346:    {
       10:  347:      if (state->discard[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  348:    }
        -:  349:
        2:  350:  return count;
        -:  351:}
        -:  352:
function whoseTurn called 16008 returned 100% blocks executed 100%
    16008:  353:int whoseTurn(struct gameState *state) {
    16008:  354:  return state->whoseTurn;
        -:  355:}
        -:  356:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  357:int endTurn(struct gameState *state) {
        -:  358:  int k;
        -:  359:  int i;
    #####:  360:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  361:  
        -:  362:  //Discard hand
    #####:  363:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  365:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  366:  }
    #####:  367:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  368:    
        -:  369:  //Code for determining the player
    #####:  370:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  371:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  372:  }
        -:  373:  else{
    #####:  374:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  375:  }
        -:  376:
    #####:  377:  state->outpostPlayed = 0;
    #####:  378:  state->phase = 0;
    #####:  379:  state->numActions = 1;
    #####:  380:  state->coins = 0;
    #####:  381:  state->numBuys = 1;
    #####:  382:  state->playedCardCount = 0;
    #####:  383:  state->handCount[state->whoseTurn] = 0;
        -:  384:
        -:  385:  //int k; move to top
        -:  386:  //Next player draws hand
    #####:  387:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  388:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  389:  }
        -:  390:
        -:  391:  //Update money
    #####:  392:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  393:
    #####:  394:  return 0;
        -:  395:}
        -:  396:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  397:int isGameOver(struct gameState *state) {
        -:  398:  int i;
        -:  399:  int j;
        -:  400:	
        -:  401:  //if stack of Province cards is empty, the game ends
    #####:  402:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      return 1;
        -:  405:    }
        -:  406:
        -:  407:  //if three supply pile are at 0, the game ends
    #####:  408:  j = 0;
    #####:  409:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  412:	{
    #####:  413:	  j++;
        -:  414:	}
        -:  415:    }
    #####:  416:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  417:    {
    #####:  418:      return 1;
        -:  419:    }
        -:  420:
    #####:  421:  return 0;
        -:  422:}
        -:  423:
function scoreFor called 80 returned 100% blocks executed 96%
       80:  424:int scoreFor (int player, struct gameState *state) {
        -:  425:
        -:  426:  int i;
       80:  427:  int score = 0;
        -:  428:
        -:  429:
      160:  430:	int totalCards = (state->handCount[player] + state->deckCount[player] 
       80:  431:		+ state->discardCount[player]);
        -:  432:
        -:  433:  //score from hand
      496:  434:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -:  435:    {
      416:  436:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      416:  437:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
      416:  438:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      416:  439:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      416:  440:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      416:  441:      if (state->hand[player][i] == gardens) { score = score + ( floor(totalCards) / 10 ); };
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  442:    }
        -:  443:
        -:  444:  //score from discard
      110:  445:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 27%
branch  1 taken 73% (fallthrough)
        -:  446:    {
       30:  447:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
       30:  448:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
       30:  449:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
       30:  450:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
       30:  451:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
       30:  452:      if (state->discard[player][i] == gardens) { score = score + ( floor(totalCards) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  453:    }
        -:  454:
        -:  455:  //score from deck
      510:  456:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -:  457:    {
      430:  458:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      430:  459:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      430:  460:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      430:  461:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      430:  462:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      430:  463:      if (state->deck[player][i] == gardens) { score = score + ( floor(totalCards) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  464:    }
        -:  465:
       80:  466:  return score;
        -:  467:}
        -:  468:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  469:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  470:  int i;	
        -:  471:  int j;
        -:  472:  int highScore;
        -:  473:  int currentPlayer;
        -:  474:
        -:  475:  //get score for each player
    #####:  476:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  477:    {
        -:  478:      //set unused player scores to -9999
    #####:  479:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  480:	{
    #####:  481:	  players[i] = -9999;
        -:  482:	}
        -:  483:      else
        -:  484:	{
    #####:  485:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  486:	}
        -:  487:    }
        -:  488:
        -:  489:  //find highest score
    #####:  490:  j = 0;
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  492:    {
    #####:  493:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  494:	{
    #####:  495:	  j = i;
        -:  496:	}
        -:  497:    }
    #####:  498:  highScore = players[j];
        -:  499:
        -:  500:  //add 1 to players who had less turns
    #####:  501:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
    #####:  504:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  505:	{
    #####:  506:	  players[i]++;
        -:  507:	}
        -:  508:    }
        -:  509:
        -:  510:  //find new highest score
    #####:  511:  j = 0;
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  513:    {
    #####:  514:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  515:	{
    #####:  516:	  j = i;
        -:  517:	}
        -:  518:    }
    #####:  519:  highScore = players[j];
        -:  520:
        -:  521:  //set winners in array to 1 and rest to 0
    #####:  522:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  523:    {
    #####:  524:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  525:	{
    #####:  526:	  players[i] = 1;
        -:  527:	}
        -:  528:      else
        -:  529:	{
    #####:  530:	  players[i] = 0;
        -:  531:	}
        -:  532:    }
        -:  533:
    #####:  534:  return 0;
        -:  535:}
        -:  536:
function drawCard called 15160 returned 100% blocks executed 92%
    15160:  537:int drawCard(int player, struct gameState *state)
        -:  538:{	int count;
        -:  539:  int deckCounter;
    15160:  540:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  541:    
        -:  542:    //Step 1 Shuffle the discard pile back into a deck
        -:  543:    int i;
        -:  544:    //Move discard to deck
     2384:  545:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     2376:  546:      state->deck[player][i] = state->discard[player][i];
     2376:  547:      state->discard[player][i] = -1;
        -:  548:    }
        -:  549:
        8:  550:    state->deckCount[player] = state->discardCount[player];
        8:  551:    state->discardCount[player] = 0;//Reset discard
        -:  552:
        -:  553:    //Shufffle the deck
        8:  554:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  555:   
        -:  556:    if (DEBUG){//Debug statements
        -:  557:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  558:    }
        -:  559:    
        8:  560:    state->discardCount[player] = 0;
        -:  561:
        -:  562:    //Step 2 Draw Card
        8:  563:    count = state->handCount[player];//Get current player's hand count
        -:  564:    
        -:  565:    if (DEBUG){//Debug statements
        -:  566:      printf("Current hand count: %d\n", count);
        -:  567:    }
        -:  568:    
        8:  569:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  570:
        8:  571:    if (deckCounter == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  572:      return -1;
        -:  573:
        8:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        8:  575:    state->deckCount[player]--;
        8:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
        -:  579:  else{
    15152:  580:    int count = state->handCount[player];//Get current hand count for player
        -:  581:    int deckCounter;
        -:  582:    if (DEBUG){//Debug statements
        -:  583:      printf("Current hand count: %d\n", count);
        -:  584:    }
        -:  585:
    15152:  586:    deckCounter = state->deckCount[player];//Create holder for the deck count
    15152:  587:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    15152:  588:    state->deckCount[player]--;
    15152:  589:    state->handCount[player]++;//Increment hand count
        -:  590:  }
        -:  591:
    15160:  592:  return 0;
        -:  593:}
        -:  594:
function getCost called 10054 returned 100% blocks executed 97%
    10054:  595:int getCost(int cardNumber)
        -:  596:{
    10054:  597:  switch( cardNumber ) 
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 3%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 3%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 3%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 1%
branch 27 taken 0%
        -:  598:    {
        -:  599:    case curse:
      416:  600:      return 0;
        -:  601:    case estate:
      360:  602:      return 2;
        -:  603:    case duchy:
      338:  604:      return 5;
        -:  605:    case province:
      370:  606:      return 8;
        -:  607:    case copper:
      352:  608:      return 0;
        -:  609:    case silver:
      368:  610:      return 3;
        -:  611:    case gold:
      408:  612:      return 6;
        -:  613:    case adventurer:
      392:  614:      return 6;
        -:  615:    case council_room:
      446:  616:      return 5;
        -:  617:    case feast:
      412:  618:      return 4;
        -:  619:    case gardens:
      394:  620:      return 4;
        -:  621:    case mine:
      386:  622:      return 5;
        -:  623:    case remodel:
      350:  624:      return 4;
        -:  625:    case smithy:
      380:  626:      return 4;
        -:  627:    case village:
      386:  628:      return 3;
        -:  629:    case baron:
      358:  630:      return 4;
        -:  631:    case great_hall:
      420:  632:      return 3;
        -:  633:    case minion:
      432:  634:      return 5;
        -:  635:    case steward:
      388:  636:      return 3;
        -:  637:    case tribute:
      438:  638:      return 5;
        -:  639:    case ambassador:
      366:  640:      return 3;
        -:  641:    case cutpurse:
      374:  642:      return 4;
        -:  643:    case embargo: 
      394:  644:      return 2;
        -:  645:    case outpost:
      340:  646:      return 5;
        -:  647:    case salvager:
      386:  648:      return 4;
        -:  649:    case sea_hag:
      398:  650:      return 4;
        -:  651:    case treasure_map:
        2:  652:      return 4;
        -:  653:    }
        -:  654:	
    #####:  655:  return -1;
        -:  656:}
        -:  657:
function cardEffect called 6008 returned 100% blocks executed 14%
     6008:  658:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  659:{
        -:  660:  int i;
        -:  661:  int j;
        -:  662:  int k;
        -:  663:  int x;
        -:  664:  int index;
     6008:  665:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     6008:  666:  int nextPlayer = currentPlayer + 1;
        -:  667:
     6008:  668:  int tributeRevealedCards[2] = {-1, -1};
        -:  669:  int temphand[MAX_HAND];// moved above the if statement
     6008:  670:  int drawntreasure=0;
        -:  671:  int cardDrawn;
     6008:  672:  int z = 0;// this is the counter for the temp hand
     6008:  673:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  674:    nextPlayer = 0;
        -:  675:  }
        -:  676:  
        -:  677:
        -:  678:
     6008:  679:	if (card == adventurer) {
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
     1002:  680:		_cardAdventurer(currentPlayer, state, drawntreasure, handPos, 0);
call    0 returned 100%
     5006:  681:	} else if (card == smithy) {
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        2:  682:		_cardSmithy(currentPlayer, state, handPos, 0);
call    0 returned 100%
     5004:  683:	} else if (card == village) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  684:		_cardVillage(currentPlayer, state, handPos, 0);
call    0 never executed
     5004:  685:	} else if (card == steward) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  686:		_cardSteward(currentPlayer, state, handPos, 0, choice1, choice2, choice3);
call    0 never executed
     5004:  687:	} else if (card == sea_hag) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  688:		_cardSeaHag(currentPlayer, state);
call    0 never executed
        -:  689:	}
        -:  690:	
        -:  691:  //uses switch to select card and perform actions
     6008:  692:  switch( card ) 
branch  0 taken 1%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 1%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 83%
branch 14 taken 0%
branch 15 taken 17%
        -:  693:    {
        -:  694:/*
        -:  695:    case adventurer:
        -:  696:      while(drawntreasure<2){
        -:  697:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  698:	  shuffle(currentPlayer, state);
        -:  699:	}
        -:  700:	drawCard(currentPlayer, state);
        -:  701:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  702:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  703:	  drawntreasure++;
        -:  704:	else{
        -:  705:	  temphand[z]=cardDrawn;
        -:  706:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  707:	  z++;
        -:  708:	}
        -:  709:      }
        -:  710:      while(z-1>=0){
        -:  711:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  712:	z=z-1;
        -:  713:      }
        -:  714:      return 0;
        -:  715:*/			
        -:  716:    case council_room:
        -:  717:      //+4 Cards
       10:  718:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  719:	{
        8:  720:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  721:	}
        -:  722:			
        -:  723:      //+1 Buy
        2:  724:      state->numBuys++;
        -:  725:			
        -:  726:      //Each other player draws a card
        6:  727:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  728:	{
        4:  729:	  if ( i != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  730:	    {
        2:  731:	      drawCard(i, state);
call    0 returned 100%
        -:  732:	    }
        -:  733:	}
        -:  734:			
        -:  735:      //put played card in played card pile
        2:  736:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  737:			
        2:  738:      return 0;
        -:  739:			
        -:  740:    case feast:
        -:  741:      //gain card with cost up to 5
        -:  742:      //Backup hand
    #####:  743:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  744:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  745:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  746:      }
        -:  747:      //Backup hand
        -:  748:
        -:  749:      //Update Coins for Buy
    #####:  750:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  751:      x = 1;//Condition to loop on
    #####:  752:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  753:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  754:	  if (DEBUG)
        -:  755:	    printf("None of that card left, sorry!\n");
        -:  756:
        -:  757:	  if (DEBUG){
        -:  758:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  759:	  }
        -:  760:	}
    #####:  761:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  762:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  763:
        -:  764:	  if (DEBUG){
        -:  765:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  766:	  }
        -:  767:	}
        -:  768:	else{
        -:  769:
        -:  770:	  if (DEBUG){
        -:  771:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  772:	  }
        -:  773:
    #####:  774:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  775:	  x = 0;//No more buying cards
        -:  776:
        -:  777:	  if (DEBUG){
        -:  778:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  779:	  }
        -:  780:
        -:  781:	}
        -:  782:      }     
        -:  783:
        -:  784:      //Reset Hand
    #####:  785:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  786:	state->hand[currentPlayer][i] = temphand[i];
    #####:  787:	temphand[i] = -1;
        -:  788:      }
        -:  789:      //Reset Hand
        -:  790:      			
    #####:  791:      return 0;
        -:  792:			
        -:  793:    case gardens:
    #####:  794:      return -1;
        -:  795:			
        -:  796:    case mine:
    #####:  797:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  798:
    #####:  799:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  800:	{
    #####:  801:	  return -1;
        -:  802:	}
        -:  803:		
    #####:  804:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  805:	{
    #####:  806:	  return -1;
        -:  807:	}
        -:  808:
    #####:  809:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  810:	{
    #####:  811:	  return -1;
        -:  812:	}
        -:  813:
    #####:  814:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  815:
        -:  816:      //discard card from hand
    #####:  817:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  818:
        -:  819:      //discard trashed card
    #####:  820:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  821:	{
    #####:  822:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  823:	    {
    #####:  824:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  825:	      break;
        -:  826:	    }
        -:  827:	}
        -:  828:			
    #####:  829:      return 0;
        -:  830:			
        -:  831:    case remodel:
    #####:  832:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  833:
    #####:  834:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  835:	{
    #####:  836:	  return -1;
        -:  837:	}
        -:  838:
    #####:  839:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  840:
        -:  841:      //discard card from hand
    #####:  842:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  843:
        -:  844:      //discard trashed card
    #####:  845:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  846:	{
    #####:  847:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  848:	    {
    #####:  849:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  850:	      break;
        -:  851:	    }
        -:  852:	}
        -:  853:
        -:  854:
    #####:  855:      return 0;
        -:  856:/*		
        -:  857:    case smithy:
        -:  858:      //+3 Cards
        -:  859:      for (i = 0; i < 3; i++)
        -:  860:	{
        -:  861:	  drawCard(currentPlayer, state);
        -:  862:	}
        -:  863:			
        -:  864:      //discard card from hand
        -:  865:      discardCard(handPos, currentPlayer, state, 0);
        -:  866:      return 0;
        -:  867:*/		
        -:  868:/*
        -:  869:    case village:
        -:  870:      //+1 Card
        -:  871:      drawCard(currentPlayer, state);
        -:  872:			
        -:  873:      //+2 Actions
        -:  874:      state->numActions = state->numActions + 2;
        -:  875:			
        -:  876:      //discard played card from hand
        -:  877:      discardCard(handPos, currentPlayer, state, 0);
        -:  878:      return 0;
        -:  879:*/		
        -:  880:    case baron:
    #####:  881:      state->numBuys++;//Increase buys by 1!
    #####:  882:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  883:	int p = 0;//Iterator for hand!
    #####:  884:	int card_not_discarded = 1;//Flag for discard set!
    #####:  885:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  886:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  887:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  888:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  889:	    state->discardCount[currentPlayer]++;
    #####:  890:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  891:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  892:	    }
    #####:  893:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  894:	    state->handCount[currentPlayer]--;
    #####:  895:	    card_not_discarded = 0;//Exit the loop
        -:  896:	  }
    #####:  897:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  898:	    if(DEBUG) {
        -:  899:	      printf("No estate cards in your hand, invalid choice\n");
        -:  900:	      printf("Must gain an estate if there are any\n");
        -:  901:	    }
    #####:  902:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  903:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  904:	      state->supplyCount[estate]--;//Decrement estates
    #####:  905:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  906:		isGameOver(state);
call    0 never executed
        -:  907:	      }
        -:  908:	    }
    #####:  909:	    card_not_discarded = 0;//Exit the loop
        -:  910:	  }
        -:  911:			    
        -:  912:	  else{
    #####:  913:	    p++;//Next card
        -:  914:	  }
        -:  915:	}
        -:  916:      }
        -:  917:			    
        -:  918:      else{
    #####:  919:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  920:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  921:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  922:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  923:	    isGameOver(state);
call    0 never executed
        -:  924:	  }
        -:  925:	}
        -:  926:      }
        -:  927:	    
        -:  928:      
    #####:  929:      return 0;
        -:  930:		
        -:  931:    case great_hall:
        -:  932:      //+1 Card
        2:  933:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  934:			
        -:  935:      //+1 Actions
        2:  936:      state->numActions++;
        -:  937:			
        -:  938:      //discard card from hand
        2:  939:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  940:      return 0;
        -:  941:		
        -:  942:    case minion:
        -:  943:      //+1 action
    #####:  944:      state->numActions++;
        -:  945:			
        -:  946:      //discard card from hand
    #####:  947:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  948:			
    #####:  949:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  950:	{
    #####:  951:	  state->coins = state->coins + 2;
        -:  952:	}
        -:  953:			
    #####:  954:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  955:	{
        -:  956:	  //discard hand
    #####:  957:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  958:	    {
    #####:  959:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  960:	    }
        -:  961:				
        -:  962:	  //draw 4
    #####:  963:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  964:	    {
    #####:  965:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  966:	    }
        -:  967:				
        -:  968:	  //other players discard hand and redraw if hand size > 4
    #####:  969:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  970:	    {
    #####:  971:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  972:		{
    #####:  973:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  974:		    {
        -:  975:		      //discard hand
    #####:  976:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  977:			{
    #####:  978:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  979:			}
        -:  980:							
        -:  981:		      //draw 4
    #####:  982:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  983:			{
    #####:  984:			  drawCard(i, state);
call    0 never executed
        -:  985:			}
        -:  986:		    }
        -:  987:		}
        -:  988:	    }
        -:  989:				
        -:  990:	}
    #####:  991:      return 0;
        -:  992:/*		
        -:  993:    case steward:
        -:  994:      if (choice1 == 1)
        -:  995:	{
        -:  996:	  //+2 cards
        -:  997:	  drawCard(currentPlayer, state);
        -:  998:	  drawCard(currentPlayer, state);
        -:  999:	}
        -: 1000:      else if (choice1 == 2)
        -: 1001:	{
        -: 1002:	  //+2 coins
        -: 1003:	  state->coins = state->coins + 2;
        -: 1004:	}
        -: 1005:      else
        -: 1006:	{
        -: 1007:	  //trash 2 cards in hand
        -: 1008:	  discardCard(choice2, currentPlayer, state, 1);
        -: 1009:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1010:	}
        -: 1011:			
        -: 1012:      //discard card from hand
        -: 1013:      discardCard(handPos, currentPlayer, state, 0);
        -: 1014:      return 0;
        -: 1015:*/		
        -: 1016:    case tribute:
    #####: 1017:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1018:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1019:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1020:	  state->deckCount[nextPlayer]--;
        -: 1021:	}
    #####: 1022:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1023:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1024:	  state->discardCount[nextPlayer]--;
        -: 1025:	}
        -: 1026:	else{
        -: 1027:	  //No Card to Reveal
        -: 1028:	  if (DEBUG){
        -: 1029:	    printf("No cards to reveal\n");
        -: 1030:	  }
        -: 1031:	}
        -: 1032:      }
        -: 1033:	    
        -: 1034:      else{
    #####: 1035:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1036:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1037:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1038:	    state->deckCount[nextPlayer]++;
    #####: 1039:	    state->discard[nextPlayer][i] = -1;
    #####: 1040:	    state->discardCount[nextPlayer]--;
        -: 1041:	  }
        -: 1042:			    
    #####: 1043:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1044:	} 
    #####: 1045:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1046:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1047:	state->deckCount[nextPlayer]--;
    #####: 1048:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:	state->deckCount[nextPlayer]--;
        -: 1051:      }    
        -: 1052:		       
    #####: 1053:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1054:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1055:	state->playedCardCount++;
    #####: 1056:	tributeRevealedCards[1] = -1;
        -: 1057:      }
        -: 1058:
    #####: 1059:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1060:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1061:	  state->coins += 2;
        -: 1062:	}
        -: 1063:		    
    #####: 1064:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1065:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1066:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1067:	}
        -: 1068:	else{//Action Card
    #####: 1069:	  state->numActions = state->numActions + 2;
        -: 1070:	}
        -: 1071:      }
        -: 1072:	    
    #####: 1073:      return 0;
        -: 1074:		
        -: 1075:    case ambassador:
    #####: 1076:      j = 0;		//used to check if player has enough cards to discard
        -: 1077:
    #####: 1078:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1079:	{
    #####: 1080:	  return -1;				
        -: 1081:	}
        -: 1082:
    #####: 1083:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1084:	{
    #####: 1085:	  return -1;
        -: 1086:	}
        -: 1087:
    #####: 1088:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1089:	{
    #####: 1090:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1091:	    {
    #####: 1092:	      j++;
        -: 1093:	    }
        -: 1094:	}
    #####: 1095:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1096:	{
    #####: 1097:	  return -1;				
        -: 1098:	}
        -: 1099:
        -: 1100:      if (DEBUG) 
        -: 1101:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1102:
        -: 1103:      //increase supply count for choosen card by amount being discarded
    #####: 1104:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1105:			
        -: 1106:      //each other player gains a copy of revealed card
    #####: 1107:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1108:	{
    #####: 1109:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1110:	    {
    #####: 1111:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1112:	    }
        -: 1113:	}
        -: 1114:
        -: 1115:      //discard played card from hand
    #####: 1116:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1117:
        -: 1118:      //trash copies of cards returned to supply
    #####: 1119:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1120:	{
    #####: 1121:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1122:	    {
    #####: 1123:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1124:		{
    #####: 1125:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1126:		  break;
        -: 1127:		}
        -: 1128:	    }
        -: 1129:	}			
        -: 1130:
    #####: 1131:      return 0;
        -: 1132:		
        -: 1133:    case cutpurse:
        -: 1134:
    #####: 1135:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1136:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1137:	{
    #####: 1138:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1139:	    {
    #####: 1140:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1141:		{
    #####: 1142:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1143:		    {
    #####: 1144:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1145:		      break;
        -: 1146:		    }
    #####: 1147:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1148:		    {
    #####: 1149:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1150:			{
        -: 1151:			  if (DEBUG)
        -: 1152:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1153:			}	
    #####: 1154:		      break;
        -: 1155:		    }		
        -: 1156:		}
        -: 1157:					
        -: 1158:	    }
        -: 1159:				
        -: 1160:	}				
        -: 1161:
        -: 1162:      //discard played card from hand
    #####: 1163:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1164:
    #####: 1165:      return 0;
        -: 1166:
        -: 1167:		
        -: 1168:    case embargo: 
        -: 1169:      //+2 Coins
    #####: 1170:      state->coins = state->coins + 2;
        -: 1171:			
        -: 1172:      //see if selected pile is in play
    #####: 1173:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1174:	{
    #####: 1175:	  return -1;
        -: 1176:	}
        -: 1177:			
        -: 1178:      //add embargo token to selected supply pile
    #####: 1179:      state->embargoTokens[choice1]++;
        -: 1180:			
        -: 1181:      //trash card
    #####: 1182:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1183:      return 0;
        -: 1184:		
        -: 1185:    case outpost:
        -: 1186:      //set outpost flag
    #####: 1187:      state->outpostPlayed++;
        -: 1188:			
        -: 1189:      //discard card
    #####: 1190:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1191:      return 0;
        -: 1192:		
        -: 1193:    case salvager:
        -: 1194:      //+1 buy
     5000: 1195:      state->numBuys++;
        -: 1196:			
     5000: 1197:      if (choice1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1198:	{
        -: 1199:	  //gain coins equal to trashed card
     5000: 1200:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 returned 100%
call    1 returned 100%
        -: 1201:	  //trash card
     5000: 1202:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 returned 100%
        -: 1203:	}
        -: 1204:			
        -: 1205:      //discard card
     5000: 1206:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     5000: 1207:      return 0;
        -: 1208:/*		
        -: 1209:    case sea_hag:
        -: 1210:      for (i = 0; i < state->numPlayers; i++){
        -: 1211:	if (i != currentPlayer){
        -: 1212:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        -: 1213:	  state->discardCount[i]++;
        -: 1214:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1215:	}
        -: 1216:      }
        -: 1217:      return 0;
        -: 1218:*/		
        -: 1219:    case treasure_map:
        -: 1220:      //search hand for another treasure_map
    #####: 1221:      index = -1;
    #####: 1222:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1223:	{
    #####: 1224:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1225:	    {
    #####: 1226:	      index = i;
    #####: 1227:	      break;
        -: 1228:	    }
        -: 1229:	}
    #####: 1230:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1231:	{
        -: 1232:	  //trash both treasure cards
    #####: 1233:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1234:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1235:
        -: 1236:	  //gain 4 Gold cards
    #####: 1237:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1238:	    {
    #####: 1239:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1240:	    }
        -: 1241:				
        -: 1242:	  //return success
    #####: 1243:	  return 1;
        -: 1244:	}
        -: 1245:			
        -: 1246:      //no second treasure_map found in hand
    #####: 1247:      return -1;
        -: 1248:    }
        -: 1249:	
     1004: 1250:  return -1;
        -: 1251:}
        -: 1252:
function discardCard called 11008 returned 100% blocks executed 89%
    11008: 1253:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1254:{
        -: 1255:	
        -: 1256:  //if card is not trashed, added to Played pile 
    11008: 1257:  if (trashFlag < 1)
branch  0 taken 55% (fallthrough)
branch  1 taken 45%
        -: 1258:    {
        -: 1259:      //add card to played pile
     6008: 1260:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     6008: 1261:      state->playedCardCount++;
        -: 1262:    }
        -: 1263:	
        -: 1264:  //set played card to -1
    11008: 1265:  state->hand[currentPlayer][handPos] = -1;
        -: 1266:	
        -: 1267:  //remove card from player's hand
    11008: 1268:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1269:    {
        -: 1270:      //reduce number of cards in hand
       80: 1271:      state->handCount[currentPlayer]--;
        -: 1272:    }
    10928: 1273:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1274:    {
        -: 1275:      //reduce number of cards in hand
    #####: 1276:      state->handCount[currentPlayer]--;
        -: 1277:    }
        -: 1278:  else 	
        -: 1279:    {
        -: 1280:      //replace discarded card with last card in hand
    10928: 1281:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1282:      //set last card to -1
    10928: 1283:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1284:      //reduce number of cards in hand
    10928: 1285:      state->handCount[currentPlayer]--;
        -: 1286:    }
        -: 1287:	
    11008: 1288:  return 0;
        -: 1289:}
        -: 1290:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1291:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1292:{
        -: 1293:  //Note: supplyPos is enum of choosen card
        -: 1294:	
        -: 1295:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1296:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1297:    {
    #####: 1298:      return -1;
        -: 1299:    }
        -: 1300:	
        -: 1301:  //added card for [whoseTurn] current player:
        -: 1302:  // toFlag = 0 : add to discard
        -: 1303:  // toFlag = 1 : add to deck
        -: 1304:  // toFlag = 2 : add to hand
        -: 1305:
    #####: 1306:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1307:    {
    #####: 1308:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1309:      state->deckCount[player]++;
        -: 1310:    }
    #####: 1311:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1312:    {
    #####: 1313:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1314:      state->handCount[player]++;
        -: 1315:    }
        -: 1316:  else
        -: 1317:    {
    #####: 1318:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1319:      state->discardCount[player]++;
        -: 1320:    }
        -: 1321:	
        -: 1322:  //decrease number in supply pile
    #####: 1323:  state->supplyCount[supplyPos]--;
        -: 1324:	 
    #####: 1325:  return 0;
        -: 1326:}
        -: 1327:
function updateCoins called 28 returned 100% blocks executed 100%
       28: 1328:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1329:{
        -: 1330:  int i;
        -: 1331:	
        -: 1332:  //reset coin count
       28: 1333:  state->coins = 0;
        -: 1334:
        -: 1335:  //add coins for each Treasure card in player's hand
      168: 1336:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1337:    {
      140: 1338:      if (state->hand[player][i] == copper)
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
        -: 1339:	{
       74: 1340:	  state->coins += 1;
        -: 1341:	}
       66: 1342:      else if (state->hand[player][i] == silver)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -: 1343:	{
        2: 1344:	  state->coins += 2;
        -: 1345:	}
       64: 1346:      else if (state->hand[player][i] == gold)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -: 1347:	{
        4: 1348:	  state->coins += 3;
        -: 1349:	}	
        -: 1350:    }	
        -: 1351:
        -: 1352:  //add bonus
       28: 1353:  state->coins += bonus;
        -: 1354:
       28: 1355:  return 0;
        -: 1356:}
        -: 1357:
        -: 1358:// Card Implementation -----------------------------------------------------------------
        -: 1359:
        -: 1360:
function _cardSmithy called 2 returned 100% blocks executed 100%
        2: 1361:int _cardSmithy(int currentPlayer, struct gameState *state, int handPos, int num) {
        -: 1362:	int i;
        8: 1363:	for (i = 0; i < 3; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        6: 1364:		drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1365:	}
        -: 1366:	// discard card from hand
        2: 1367:	discardCard(handPos, currentPlayer, state, num);
call    0 returned 100%
        2: 1368:	return 0;
        -: 1369:}
        -: 1370:
function _cardVillage called 0 returned 0% blocks executed 0%
    #####: 1371:int _cardVillage(int currentPlayer, struct gameState *state, int handPos, int num) {
        -: 1372:
        -: 1373:	// +1 card
    #####: 1374:	drawCard(currentPlayer, state);
call    0 never executed
        -: 1375:
        -: 1376:	// +2 actions
    #####: 1377:	state->numActions = state->numActions + 2;
        -: 1378:
        -: 1379:	// discard played card from hand
    #####: 1380:	discardCard(handPos, currentPlayer, state, num);
call    0 never executed
        -: 1381:
    #####: 1382:	return 0;
        -: 1383:}
        -: 1384:
        -: 1385:
function _cardSteward called 0 returned 0% blocks executed 0%
    #####: 1386:int _cardSteward(int currentPlayer, struct gameState *state, int handPos, int num, int choice1, int choice2, int choice3) {
        -: 1387:
    #####: 1388:	if (choice1 == 1) {
branch  0 never executed
branch  1 never executed
        -: 1389:		//+2 cards
    #####: 1390:		drawCard(currentPlayer, state);
call    0 never executed
    #####: 1391:		 drawCard(currentPlayer, state);
call    0 never executed
    #####: 1392:	 } else if (choice1 != 2) {
branch  0 never executed
branch  1 never executed
        -: 1393:		//+2 coins
    #####: 1394:		state->coins = state->coins + 2;
        -: 1395:	} else {
        -: 1396:		// trash 2 cards in hand
    #####: 1397:		discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1398:		discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1399:	}
    #####: 1400:	return 0;
        -: 1401:}
        -: 1402:
        -: 1403:
function _cardAdventurer called 1002 returned 100% blocks executed 100%
     1002: 1404:int _cardAdventurer(int currentPlayer, struct gameState *state, int drawntreasure, int handPos, int num) {
        -: 1405:	int cardDrawn;
        -: 1406:	int temphand[MAX_HAND];
     1002: 1407:	int z = 0;
        -: 1408:
        -: 1409:
    17056: 1410:	while(drawntreasure<2){
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
    15052: 1411:		if (state->deckCount[currentPlayer] <=1){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1412:			//if the deck is empty we need to shuffle discard and add to deck
       22: 1413:			shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1414:		}
    15052: 1415:		drawCard(currentPlayer, state);
call    0 returned 100%
    15052: 1416:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
        -: 1417:		//top card of hand is most recently drawn card.
        -: 1418:
    15052: 1419:		if (cardDrawn == silver || cardDrawn == gold || cardDrawn == copper) {
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 96% (fallthrough)
branch  3 taken 4%
branch  4 taken 6% (fallthrough)
branch  5 taken 94%
     2004: 1420:			drawntreasure++;
        -: 1421:		} else {
    13048: 1422:			temphand[z]=cardDrawn;
    13048: 1423:			state->handCount[currentPlayer]--; 
        -: 1424:			//this should just remove the top card (the most recently drawn one).
    13048: 1425:			z++;
        -: 1426:		}
        -: 1427:	}
        -: 1428:
    15052: 1429:	while( z > 0 ){
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
        -: 1430:		// discard all cards in play that have been drawn
    13048: 1431:		printf("discarding %d\n", temphand[z]);
call    0 returned 100%
    13048: 1432:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; 
    13048: 1433:		z--;
        -: 1434:	}
        -: 1435: 
        -: 1436: 	// discard card from hand
     1002: 1437:	discardCard(handPos, currentPlayer, state, num);
call    0 returned 100%
     1002: 1438:	return 0;
        -: 1439:}
        -: 1440:
function _cardSeaHag called 0 returned 0% blocks executed 0%
    #####: 1441:int _cardSeaHag(int currentPlayer, struct gameState *state) {
        -: 1442:
        -: 1443:	int i;
    #####: 1444:	for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1445:	state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];          
    #####: 1446:	state->deckCount[i]--;
    #####: 1447:	state->discardCount[i]++;
    #####: 1448:	state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1449:	}
    #####: 1450:	return 0;
        -: 1451:}
        -: 1452:
        -: 1453:
        -: 1454:
        -: 1455://end of dominion.c
        -: 1456:
