        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:/* ---------------------------------------------------------------------
        -:    2:* Jon Patterson
        -:    3:* Assignment 3
        -:    4:* cardtest3.c
        -:    5:* council room card tests
        -:    6:*---------------------------------------------------------------------*/
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <assert.h>
        -:   12:#include "rngs.h"
        -:   13:#include <time.h>
        -:   14:#include <stdlib.h>
        -:   15:
        -:   16:// set NOISY_TEST to 0 to remove printfs from output
        -:   17:#define NOISY_TEST 1
        -:   18:// set ASSERTS_ON to 0 to disable asserts for investigating gcov
        -:   19:#define ASSERTS_ON 0
        -:   20:
function main called 4 returned 100% blocks executed 90%
        4:   21:int main() {
        4:   22:    int seed = 1000;
        4:   23:    int numPlayer = 2;
        -:   24:    int p, r, i;
        4:   25:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   26:               , remodel, smithy, village, baron, great_hall};
        -:   27:    struct gameState G;
        -:   28:    int error;
        -:   29:
        4:   30:    memset(&G, 23, sizeof(struct gameState));
        4:   31:    r = initializeGame(numPlayer, k, seed, &G);
call    0 returned 100%
        -:   32:    // ensure that the values of all of the supply cards are are at least 2
        4:   33:    int j = 0;
      104:   34:    for(j = 0; j < 25; j++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
      100:   35:        G.supplyCount[j] = 2;
        -:   36:    }
        -:   37:    // store values of other players hands to test afterward
        4:   38:    int *player_card = calloc(numPlayer, sizeof(int));
        -:   39:
       12:   40:    for (p = 0; p < numPlayer; p++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        8:   41:        player_card[i] = G.handCount[p];
        -:   42:    }
        -:   43:
        -:   44:    
        4:   45:    printf ("Testing council_room for playCard(0, 0, 0, 0, gamestate):\n");
call    0 returned 100%
        4:   46:    p = 0;
        4:   47:	printf("Testing for player %d:\n", p);
call    0 returned 100%
        4:   48:    int testActions = G.numActions;
        4:   49:    int testBuys = G.numBuys;
        4:   50:    int testHandCount = G.handCount[p];
        4:   51:    int testDeckCount = G.deckCount[p];
        -:   52:
        -:   53:    // make card in hand a council_room
        4:   54:    G.hand[p][0] = council_room;
        -:   55:    //play it
        4:   56:    playCard(0, 0, 0, 0, &G);
call    0 returned 100%
        -:   57:
        -:   58: 	//Upon execution, adjust test values
        -:   59: 	//test actions should be one less
        4:   60: 	testActions--;
        -:   61:    //Buys are incremented by 1
        4:   62:    testBuys++;
        -:   63: 	//net hand count should now be +3
        4:   64: 	testHandCount += 3;
        -:   65: 	//deck count should be 3 less
        4:   66: 	testDeckCount -= 4;
        -:   67:
        -:   68: 	#if (NOISY_TEST == 1)
        4:   69:    printf("Test actions updated correctly:\n");
call    0 returned 100%
        4:   70:    printf("Actions = %d, Expected = %d\n", G.numActions, testActions);
call    0 returned 100%
        4:   71:    printf("Test buys updated correctly:\n");
call    0 returned 100%
        4:   72:    printf("Buys = %d, Expected = %d\n", G.numBuys, testBuys);
call    0 returned 100%
        4:   73:    printf("Test deck updated correctly:\n");
call    0 returned 100%
        4:   74:    printf("Deck = %d, Expected = %d\n", G.deckCount[p], testDeckCount);
call    0 returned 100%
        4:   75:    printf("Test hand updated correctly:\n");
call    0 returned 100%
        4:   76:    printf("Hand = %d, Expected = %d\n", G.handCount[p], testHandCount);
call    0 returned 100%
        -:   77:    #endif
        -:   78:    #if (ASSERTS_ON == 1)
        -:   79:    assert(G.numActions == testActions);
        -:   80:    assert(G.numBuys == testBuys);
        -:   81:    assert(G.deckCount[p] == testDeckCount);
        -:   82:    assert(G.handCount[p] == testHandCount);
        -:   83:    #endif
        4:   84:    if (G.numActions != testActions) error = 1;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        4:   85:    if (G.numBuys != testBuys) error = 1;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        4:   86:    if (G.deckCount[p] != testDeckCount	) error = 1;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:   87:    if (G.handCount[p] != testHandCount	) error = 1;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:
        -:   89:    //test other players hands to ensure that they were incremented by one
        8:   90:    for(p = 1; p < numPlayer; p++){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        -:   91:        #if (NOISY_TEST == 1)
        4:   92:        printf("Checking the hands of other players:\n");
call    0 returned 100%
        4:   93:        printf("Player %d Hand = %d, Expected = %d\n", p, G.handCount[p], player_card[i]+1);
call    0 returned 100%
        -:   94:        #endif
        -:   95:        #if (ASSERTS_ON == 1)
        -:   96:        assert(G.handCount[p] == player_card[i]+1);
        -:   97:        #endif
        4:   98:        if(G.handCount[p] != player_card[i]+1) error = 1;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   99:    }
        4:  100:    free(player_card);
        4:  101:    if(error == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:  102:    	printf("Errors were encountered.\n");
call    0 returned 100%
        4:  103:    	return 1;
        -:  104:    }
        -:  105:
        -:  106:
    #####:  107:    return 0;
        -:  108:}
