        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:21
        -:    0:Programs:21
        -:    1:/*
        -:    2:* Modified by James Guerra for Assignment 1 @ 4/10/16
        -:    3:*
        -:    4:*/
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include "rngs.h"
        -:    8:#include <stdio.h>
        -:    9:#include <math.h>
        -:   10:#include <stdlib.h>
        -:   11:
function compare called 840 returned 100% blocks executed 100%
      840:   12:int compare(const void* a, const void* b) {
      840:   13:  if (*(int*)a > *(int*)b)
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
      108:   14:    return 1;
      732:   15:  if (*(int*)a < *(int*)b)
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
      290:   16:    return -1;
      442:   17:  return 0;
        -:   18:}
        -:   19:
function newGame called 0 returned 0% blocks executed 0%
    #####:   20:struct gameState* newGame() {
    #####:   21:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   22:  return g;
        -:   23:}
        -:   24:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   25:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   26:		  int k8, int k9, int k10) {
    #####:   27:  int* k = malloc(10 * sizeof(int));
    #####:   28:  k[0] = k1;
    #####:   29:  k[1] = k2;
    #####:   30:  k[2] = k3;
    #####:   31:  k[3] = k4;
    #####:   32:  k[4] = k5;
    #####:   33:  k[5] = k6;
    #####:   34:  k[6] = k7;
    #####:   35:  k[7] = k8;
    #####:   36:  k[8] = k9;
    #####:   37:  k[9] = k10;
    #####:   38:  return k;
        -:   39:}
        -:   40:
function initializeGame called 14 returned 100% blocks executed 97%
       14:   41:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   42:		   struct gameState *state) {
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;			
        -:   47:  //set up random number generator
       14:   48:  SelectStream(1);
call    0 returned 100%
       14:   49:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   50:  
        -:   51:  //check number of players
       14:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 7% (fallthrough)
branch  3 taken 93%
        -:   53:    {
        1:   54:      return -1;
        -:   55:    }
        -:   56:
        -:   57:  //set number of players
       13:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
      143:   61:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   62:    {
     1430:   63:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   64:        {
     1300:   65:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   66:	    {
    #####:   67:	      return -1;
        -:   68:	    }
        -:   69:        }
        -:   70:    }
        -:   71:
        -:   72:
        -:   73:  //initialize supply
        -:   74:  ///////////////////////////////
        -:   75:
        -:   76:  //set number of Curse cards
       13:   77:  if (numPlayers == 2)
branch  0 taken 62% (fallthrough)
branch  1 taken 38%
        -:   78:    {
        8:   79:      state->supplyCount[curse] = 10;
        -:   80:    }
        5:   81:  else if (numPlayers == 3)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        -:   82:    {
        3:   83:      state->supplyCount[curse] = 20;
        -:   84:    }
        -:   85:  else
        -:   86:    {
        2:   87:      state->supplyCount[curse] = 30;
        -:   88:    }
        -:   89:
        -:   90:  //set number of Victory cards
       13:   91:  if (numPlayers == 2)
branch  0 taken 62% (fallthrough)
branch  1 taken 38%
        -:   92:    {
        8:   93:      state->supplyCount[estate] = 8;
        8:   94:      state->supplyCount[duchy] = 8;
        8:   95:      state->supplyCount[province] = 8;
        -:   96:    }
        -:   97:  else
        -:   98:    {
        5:   99:      state->supplyCount[estate] = 12;
        5:  100:      state->supplyCount[duchy] = 12;
        5:  101:      state->supplyCount[province] = 12;
        -:  102:    }
        -:  103:
        -:  104:  //set number of Treasure cards
       13:  105:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       13:  106:  state->supplyCount[silver] = 40;
       13:  107:  state->supplyCount[gold] = 30;
        -:  108:
        -:  109:  //set number of Kingdom cards
      273:  110:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  111:    {
     2145:  112:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  113:	{
     2015:  114:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  115:	    {
        -:  116:	      //check if card is a 'Victory' Kingdom card
      130:  117:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 91% (fallthrough)
branch  1 taken 9%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  118:		{
       50:  119:		  if (numPlayers == 2){ 
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
       15:  120:		    state->supplyCount[i] = 8; 
        -:  121:		  }
       10:  122:		  else{ state->supplyCount[i] = 12; }
        -:  123:		}
        -:  124:	      else
        -:  125:		{
      105:  126:		  state->supplyCount[i] = 10;
        -:  127:		}
      130:  128:	      break;
        -:  129:	    }
        -:  130:	  else    //card is not in the set choosen for the game
        -:  131:	    {
     1885:  132:	      state->supplyCount[i] = -1;
        -:  133:	    }
        -:  134:	}
        -:  135:
        -:  136:    }
        -:  137:
        -:  138:  ////////////////////////
        -:  139:  //supply intilization complete
        -:  140:
        -:  141:  //set player decks
       46:  142:  for (i = 0; i < numPlayers; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  143:    {
       33:  144:      state->deckCount[i] = 0;
      132:  145:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  146:	{
       99:  147:	  state->deck[i][j] = estate;
       99:  148:	  state->deckCount[i]++;
        -:  149:	}
      264:  150:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  151:	{
      231:  152:	  state->deck[i][j] = copper;
      231:  153:	  state->deckCount[i]++;		
        -:  154:	}
        -:  155:    }
        -:  156:
        -:  157:  //shuffle player decks
       46:  158:  for (i = 0; i < numPlayers; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  159:    {
       33:  160:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  161:	{
    #####:  162:	  return -1;
        -:  163:	}
        -:  164:    }
        -:  165:
        -:  166:  //draw player hands
       46:  167:  for (i = 0; i < numPlayers; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  168:    {  
        -:  169:      //initialize hand size to zero
       33:  170:      state->handCount[i] = 0;
       33:  171:      state->discardCount[i] = 0;
        -:  172:      //draw 5 cards
        -:  173:      // for (j = 0; j < 5; j++)
        -:  174:      //	{
        -:  175:      //	  drawCard(i, state);
        -:  176:      //	}
        -:  177:    }
        -:  178:  
        -:  179:  //set embargo tokens to 0 for all supply piles
      364:  180:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  181:    {
      351:  182:      state->embargoTokens[i] = 0;
        -:  183:    }
        -:  184:
        -:  185:  //initialize first player's turn
       13:  186:  state->outpostPlayed = 0;
       13:  187:  state->phase = 0;
       13:  188:  state->numActions = 1;
       13:  189:  state->numBuys = 1;
       13:  190:  state->playedCardCount = 0;
       13:  191:  state->whoseTurn = 0;
       13:  192:  state->handCount[state->whoseTurn] = 0;
        -:  193:  //int it; move to top
        -:  194:
        -:  195:  //Moved draw cards to here, only drawing at the start of a turn
       78:  196:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       65:  197:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  198:  }
        -:  199:
       13:  200:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  201:
       13:  202:  return 0;
        -:  203:}
        -:  204:
function shuffle called 202 returned 100% blocks executed 100%
      202:  205:int shuffle(int player, struct gameState *state) {
        -:  206: 
        -:  207:
        -:  208:  int newDeck[MAX_DECK];
      202:  209:  int newDeckPos = 0;
        -:  210:  int card;
        -:  211:  int i;
        -:  212:
      202:  213:  if (state->deckCount[player] < 1)
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
      157:  214:    return -1;
       45:  215:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  216:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  217:
      600:  218:  while (state->deckCount[player] > 0) {
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
      510:  219:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      510:  220:    newDeck[newDeckPos] = state->deck[player][card];
      510:  221:    newDeckPos++;
     2017:  222:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
     1507:  223:      state->deck[player][i] = state->deck[player][i+1];
        -:  224:    }
      510:  225:    state->deckCount[player]--;
        -:  226:  }
      555:  227:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
      510:  228:    state->deck[player][i] = newDeck[i];
      510:  229:    state->deckCount[player]++;
        -:  230:  }
        -:  231:
       45:  232:  return 0;
        -:  233:}
        -:  234:
function playCard called 33 returned 100% blocks executed 80%
       33:  235:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  236:{	
        -:  237:  int card;
       33:  238:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  239:
        -:  240:  //check if it is the right phase
       33:  241:  if (state->phase != 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  242:    {
    #####:  243:      return -1;
        -:  244:    }
        -:  245:	
        -:  246:  //check if player has enough actions
       33:  247:  if ( state->numActions < 1 )
branch  0 taken 85% (fallthrough)
branch  1 taken 15%
        -:  248:    {
       28:  249:      return -1;
        -:  250:    }
        -:  251:	
        -:  252:  //get card played
        5:  253:  card = handCard(handPos, state);
call    0 returned 100%
        -:  254:	
        -:  255:  //check if selected card is an action
        5:  256:  if ( card < adventurer || card > treasure_map )
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  257:    {
    #####:  258:      return -1;
        -:  259:    }
        -:  260:	
        -:  261:  //play card
        5:  262:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  263:    {
    #####:  264:      return -1;
        -:  265:    }
        -:  266:	
        -:  267:  //reduce number of actions
        5:  268:  state->numActions--;
        -:  269:
        -:  270:  //update coins (Treasure cards may be added with card draws)
        5:  271:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  272:	
        5:  273:  return 0;
        -:  274:}
        -:  275:
function buyCard called 155 returned 100% blocks executed 100%
      155:  276:int buyCard(int supplyPos, struct gameState *state) {
        -:  277:  int who;
        -:  278:  if (DEBUG){
        -:  279:    printf("Entering buyCard...\n");
        -:  280:  }
        -:  281:
        -:  282:  // I don't know what to do about the phase thing.
        -:  283:
      155:  284:  who = state->whoseTurn;
        -:  285:
      155:  286:  if (state->numBuys < 1){
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -:  287:    if (DEBUG)
        -:  288:      printf("You do not have any buys left\n");
        3:  289:    return -1;
      152:  290:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 4% (fallthrough)
branch  2 taken 96%
        -:  291:    if (DEBUG)
        -:  292:      printf("There are not any of that type of card left\n");
        6:  293:    return -1;
      146:  294:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 2% (fallthrough)
branch  2 taken 98%
        -:  295:    if (DEBUG) 
        -:  296:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        3:  297:    return -1;
        -:  298:  } else {
      143:  299:    state->phase=1;
        -:  300:    //state->supplyCount[supplyPos]--;
      143:  301:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  302:  
      143:  303:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
      143:  304:    state->numBuys--;
        -:  305:    if (DEBUG)
        -:  306:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  307:  }
        -:  308:
        -:  309:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  310:  //state->discardCount[who]++;
        -:  311:    
      143:  312:  return 0;
        -:  313:}
        -:  314:
function numHandCards called 254 returned 100% blocks executed 100%
      254:  315:int numHandCards(struct gameState *state) {
      254:  316:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  317:}
        -:  318:
function handCard called 497 returned 100% blocks executed 100%
      497:  319:int handCard(int handPos, struct gameState *state) {
      497:  320:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
      497:  321:  return state->hand[currentPlayer][handPos];
        -:  322:}
        -:  323:
function supplyCount called 391 returned 100% blocks executed 100%
      391:  324:int supplyCount(int card, struct gameState *state) {
      391:  325:  return state->supplyCount[card];
        -:  326:}
        -:  327:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  328:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  329:  int i;
    #####:  330:  int count = 0;
        -:  331:
    #####:  332:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  333:    {
    #####:  334:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  335:    }
        -:  336:
    #####:  337:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  338:    {
    #####:  339:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  340:    }
        -:  341:
    #####:  342:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  343:    {
    #####:  344:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  345:    }
        -:  346:
    #####:  347:  return count;
        -:  348:}
        -:  349:
function whoseTurn called 847 returned 100% blocks executed 100%
      847:  350:int whoseTurn(struct gameState *state) {
      847:  351:  return state->whoseTurn;
        -:  352:}
        -:  353:
function endTurn called 35 returned 100% blocks executed 100%
       35:  354:int endTurn(struct gameState *state) {
        -:  355:  int k;
        -:  356:  int i;
       35:  357:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  358:  
        -:  359:  //Discard hand
      224:  360:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
      189:  361:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      189:  362:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  363:  }
       35:  364:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  365:    
        -:  366:  //Code for determining the player
       35:  367:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
       18:  368:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  369:  }
        -:  370:  else{
       17:  371:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  372:  }
        -:  373:
       35:  374:  state->outpostPlayed = 0;
       35:  375:  state->phase = 0;
       35:  376:  state->numActions = 1;
       35:  377:  state->coins = 0;
       35:  378:  state->numBuys = 1;
       35:  379:  state->playedCardCount = 0;
       35:  380:  state->handCount[state->whoseTurn] = 0;
        -:  381:
        -:  382:  //int k; move to top
        -:  383:  //Next player draws hand
      210:  384:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      175:  385:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  386:  }
        -:  387:
        -:  388:  //Update money
       35:  389:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  390:
       35:  391:  return 0;
        -:  392:}
        -:  393:
function isGameOver called 63 returned 100% blocks executed 100%
       63:  394:int isGameOver(struct gameState *state) {
        -:  395:  int i;
        -:  396:  int j;
        -:  397:	
        -:  398:  //if stack of Province cards is empty, the game ends
       63:  399:  if (state->supplyCount[province] == 0)
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -:  400:    {
        7:  401:      return 1;
        -:  402:    }
        -:  403:
        -:  404:  //if three supply pile are at 0, the game ends
       56:  405:  j = 0;
     1456:  406:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  407:    {
     1400:  408:      if (state->supplyCount[i] == 0)
branch  0 taken 2% (fallthrough)
branch  1 taken 99%
        -:  409:	{
       21:  410:	  j++;
        -:  411:	}
        -:  412:    }
       56:  413:  if ( j >= 3)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:  414:    {
        3:  415:      return 1;
        -:  416:    }
        -:  417:
       53:  418:  return 0;
        -:  419:}
        -:  420:
function scoreFor called 2 returned 100% blocks executed 68%
        2:  421:int scoreFor (int player, struct gameState *state) {
        -:  422:
        -:  423:  int i;
        2:  424:  int score = 0;
        -:  425:  //score from hand
        7:  426:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  427:    {
        5:  428:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  429:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  430:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  431:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  432:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        5:  433:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  434:    }
        -:  435:
        -:  436:  //score from discard
       48:  437:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  438:    {
       46:  439:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       46:  440:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
       46:  441:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       46:  442:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
       46:  443:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       46:  444:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  445:    }
        -:  446:
        -:  447:  //score from deck
       48:  448:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  449:    {
       46:  450:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
       46:  451:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
       46:  452:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       46:  453:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
       46:  454:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       46:  455:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  456:    }
        -:  457:
        2:  458:  return score;
        -:  459:}
        -:  460:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  461:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  462:  int i;	
        -:  463:  int j;
        -:  464:  int highScore;
        -:  465:  int currentPlayer;
        -:  466:
        -:  467:  //get score for each player
    #####:  468:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  469:    {
        -:  470:      //set unused player scores to -9999
    #####:  471:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  472:	{
    #####:  473:	  players[i] = -9999;
        -:  474:	}
        -:  475:      else
        -:  476:	{
    #####:  477:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  478:	}
        -:  479:    }
        -:  480:
        -:  481:  //find highest score
    #####:  482:  j = 0;
    #####:  483:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  484:    {
    #####:  485:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  486:	{
    #####:  487:	  j = i;
        -:  488:	}
        -:  489:    }
    #####:  490:  highScore = players[j];
        -:  491:
        -:  492:  //add 1 to players who had less turns
    #####:  493:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  494:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  495:    {
    #####:  496:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  497:	{
    #####:  498:	  players[i]++;
        -:  499:	}
        -:  500:    }
        -:  501:
        -:  502:  //find new highest score
    #####:  503:  j = 0;
    #####:  504:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  505:    {
    #####:  506:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  507:	{
    #####:  508:	  j = i;
        -:  509:	}
        -:  510:    }
    #####:  511:  highScore = players[j];
        -:  512:
        -:  513:  //set winners in array to 1 and rest to 0
    #####:  514:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  515:    {
    #####:  516:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  517:	{
    #####:  518:	  players[i] = 1;
        -:  519:	}
        -:  520:      else
        -:  521:	{
    #####:  522:	  players[i] = 0;
        -:  523:	}
        -:  524:    }
        -:  525:
    #####:  526:  return 0;
        -:  527:}
        -:  528:
function drawCard called 478 returned 100% blocks executed 100%
      478:  529:int drawCard(int player, struct gameState *state)
        -:  530:{	int count;
        -:  531:  int deckCounter;
      478:  532:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        -:  533:    
        -:  534:    //Step 1 Shuffle the discard pile back into a deck
        -:  535:    int i;
        -:  536:    //Move discard to deck
      349:  537:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 52%
branch  1 taken 48% (fallthrough)
      180:  538:      state->deck[player][i] = state->discard[player][i];
      180:  539:      state->discard[player][i] = -1;
        -:  540:    }
        -:  541:
      169:  542:    state->deckCount[player] = state->discardCount[player];
      169:  543:    state->discardCount[player] = 0;//Reset discard
        -:  544:
        -:  545:    //Shufffle the deck
      169:  546:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  547:   
        -:  548:    if (DEBUG){//Debug statements
        -:  549:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  550:    }
        -:  551:    
      169:  552:    state->discardCount[player] = 0;
        -:  553:
        -:  554:    //Step 2 Draw Card
      169:  555:    count = state->handCount[player];//Get current player's hand count
        -:  556:    
        -:  557:    if (DEBUG){//Debug statements
        -:  558:      printf("Current hand count: %d\n", count);
        -:  559:    }
        -:  560:    
      169:  561:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  562:
      169:  563:    if (deckCounter == 0)
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
      157:  564:      return -1;
        -:  565:
       12:  566:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       12:  567:    state->deckCount[player]--;
       12:  568:    state->handCount[player]++;//Increment hand count
        -:  569:  }
        -:  570:
        -:  571:  else{
      309:  572:    int count = state->handCount[player];//Get current hand count for player
        -:  573:    int deckCounter;
        -:  574:    if (DEBUG){//Debug statements
        -:  575:      printf("Current hand count: %d\n", count);
        -:  576:    }
        -:  577:
      309:  578:    deckCounter = state->deckCount[player];//Create holder for the deck count
      309:  579:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      309:  580:    state->deckCount[player]--;
      309:  581:    state->handCount[player]++;//Increment hand count
        -:  582:  }
        -:  583:
      321:  584:  return 0;
        -:  585:}
        -:  586:
function getCost called 289 returned 100% blocks executed 100%
      289:  587:int getCost(int cardNumber)
        -:  588:{
      289:  589:  switch( cardNumber ) 
branch  0 taken 2%
branch  1 taken 2%
branch  2 taken 2%
branch  3 taken 8%
branch  4 taken 2%
branch  5 taken 10%
branch  6 taken 10%
branch  7 taken 3%
branch  8 taken 2%
branch  9 taken 2%
branch 10 taken 2%
branch 11 taken 2%
branch 12 taken 2%
branch 13 taken 3%
branch 14 taken 18%
branch 15 taken 2%
branch 16 taken 2%
branch 17 taken 2%
branch 18 taken 2%
branch 19 taken 2%
branch 20 taken 2%
branch 21 taken 2%
branch 22 taken 2%
branch 23 taken 2%
branch 24 taken 2%
branch 25 taken 2%
branch 26 taken 2%
branch 27 taken 4%
        -:  590:    {
        -:  591:    case curse:
        6:  592:      return 0;
        -:  593:    case estate:
        6:  594:      return 2;
        -:  595:    case duchy:
        6:  596:      return 5;
        -:  597:    case province:
       22:  598:      return 8;
        -:  599:    case copper:
        6:  600:      return 0;
        -:  601:    case silver:
       30:  602:      return 3;
        -:  603:    case gold:
       28:  604:      return 6;
        -:  605:    case adventurer:
       10:  606:      return 6;
        -:  607:    case council_room:
        6:  608:      return 5;
        -:  609:    case feast:
        6:  610:      return 4;
        -:  611:    case gardens:
        6:  612:      return 4;
        -:  613:    case mine:
        6:  614:      return 5;
        -:  615:    case remodel:
        6:  616:      return 4;
        -:  617:    case smithy:
       10:  618:      return 4;
        -:  619:    case village:
       51:  620:      return 3;
        -:  621:    case baron:
        6:  622:      return 4;
        -:  623:    case great_hall:
        6:  624:      return 3;
        -:  625:    case minion:
        6:  626:      return 5;
        -:  627:    case steward:
        6:  628:      return 3;
        -:  629:    case tribute:
        6:  630:      return 5;
        -:  631:    case ambassador:
        6:  632:      return 3;
        -:  633:    case cutpurse:
        6:  634:      return 4;
        -:  635:    case embargo: 
        6:  636:      return 2;
        -:  637:    case outpost:
        6:  638:      return 5;
        -:  639:    case salvager:
        6:  640:      return 4;
        -:  641:    case sea_hag:
        6:  642:      return 4;
        -:  643:    case treasure_map:
        6:  644:      return 4;
        -:  645:    }
        -:  646:	
       12:  647:  return -1;
        -:  648:}
        -:  649:
function cardEffect called 26 returned 100% blocks executed 4%
       26:  650:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  651:{
        -:  652:  int i;
        -:  653:  int j;
        -:  654:  int k;
        -:  655:  int x;
        -:  656:  int index;
       26:  657:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       26:  658:  int nextPlayer = currentPlayer + 1;
        -:  659:
       26:  660:  int tributeRevealedCards[2] = {-1, -1};
        -:  661:  int temphand[MAX_HAND];// moved above the if statement
       26:  662:  int drawntreasure=0;
        -:  663:  int cardDrawn;
       26:  664:  int z = 0;// this is the counter for the temp hand
       26:  665:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 42% (fallthrough)
branch  1 taken 58%
       11:  666:    nextPlayer = 0;
        -:  667:  }
        -:  668:  
        -:  669:	
        -:  670:  //uses switch to select card and perform actions
       26:  671:  switch( card ) 
branch  0 taken 38%
branch  1 taken 15%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 27%
branch  7 taken 19%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  672:    {
        -:  673:    case adventurer:
       10:  674:       return callAdventureCard(temphand, state, z, cardDrawn, drawntreasure, currentPlayer);
call    0 returned 100%
        -:  675:		
        -:  676:    case council_room:
        4:  677:      return callCouncilRoom(currentPlayer, state, handPos);
call    0 returned 100%
        -:  678:			
        -:  679:    case feast:
        -:  680:      //gain card with cost up to 5
        -:  681:      //Backup hand
    #####:  682:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  683:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  684:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  685:      }
        -:  686:      //Backup hand
        -:  687:
        -:  688:      //Update Coins for Buy
    #####:  689:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  690:      x = 1;//Condition to loop on
    #####:  691:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  692:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  693:	  if (DEBUG)
        -:  694:	    printf("None of that card left, sorry!\n");
        -:  695:
        -:  696:	  if (DEBUG){
        -:  697:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  698:	  }
        -:  699:	}
    #####:  700:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  701:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  702:
        -:  703:	  if (DEBUG){
        -:  704:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  705:	  }
        -:  706:	}
        -:  707:	else{
        -:  708:
        -:  709:	  if (DEBUG){
        -:  710:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  711:	  }
        -:  712:
    #####:  713:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  714:	  x = 0;//No more buying cards
        -:  715:
        -:  716:	  if (DEBUG){
        -:  717:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  718:	  }
        -:  719:
        -:  720:	}
        -:  721:      }     
        -:  722:
        -:  723:      //Reset Hand
    #####:  724:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  725:	state->hand[currentPlayer][i] = temphand[i];
    #####:  726:	temphand[i] = -1;
        -:  727:      }
        -:  728:      //Reset Hand
        -:  729:      			
    #####:  730:      return 0;
        -:  731:			
        -:  732:    case gardens:
    #####:  733:      return -1;
        -:  734:			
        -:  735:    case mine:
    #####:  736:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  737:
    #####:  738:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  739:	{
    #####:  740:	  return -1;
        -:  741:	}
        -:  742:		
    #####:  743:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  744:	{
    #####:  745:	  return -1;
        -:  746:	}
        -:  747:
    #####:  748:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  749:	{
    #####:  750:	  return -1;
        -:  751:	}
        -:  752:
    #####:  753:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  754:
        -:  755:      //discard card from hand
    #####:  756:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  757:
        -:  758:      //discard trashed card
    #####:  759:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  760:	{
    #####:  761:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  762:	    {
    #####:  763:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  764:	      break;
        -:  765:	    }
        -:  766:	}
        -:  767:			
    #####:  768:      return 0;
        -:  769:			
        -:  770:    case remodel:
        -:  771:	    
    #####:  772:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  773:
    #####:  774:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )  //error found, should be <
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  775:	{
    #####:  776:	  return -1;
        -:  777:	}
        -:  778:
    #####:  779:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  780:
        -:  781:      //discard card from hand
    #####:  782:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  783:
        -:  784:      //discard trashed card
    #####:  785:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  786:	{
    #####:  787:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  788:	    {
    #####:  789:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  790:	      break;
        -:  791:	    }
        -:  792:	}
        -:  793:
        -:  794:
    #####:  795:      return 0;
        -:  796:		
        -:  797:    case smithy:
        7:  798:      return callSmithyCard(currentPlayer, state, handPos);
call    0 returned 100%
        -:  799:	  
        -:  800:    case village:
        5:  801:	return callVillageCard(currentPlayer, state, handPos);
call    0 returned 100%
        -:  802:	
        -:  803:    case baron:
    #####:  804:      state->numBuys++;//Increase buys by 1!
    #####:  805:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  806:	int p = 0;//Iterator for hand!
    #####:  807:	int card_not_discarded = 1;//Flag for discard set!
    #####:  808:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  809:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  810:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  811:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  812:	    state->discardCount[currentPlayer]++;
    #####:  813:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  814:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  815:	    }
    #####:  816:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  817:	    state->handCount[currentPlayer]--;
    #####:  818:	    card_not_discarded = 0;//Exit the loop
        -:  819:	  }
    #####:  820:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  821:	    if(DEBUG) {
        -:  822:	      printf("No estate cards in your hand, invalid choice\n");
        -:  823:	      printf("Must gain an estate if there are any\n");
        -:  824:	    }
    #####:  825:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  826:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  827:	      state->supplyCount[estate]--;//Decrement estates
    #####:  828:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  829:		isGameOver(state);
call    0 never executed
        -:  830:	      }
        -:  831:	    }
    #####:  832:	    card_not_discarded = 0;//Exit the loop
        -:  833:	  }
        -:  834:			    
        -:  835:	  else{
    #####:  836:	    p++;//Next card
        -:  837:	  }
        -:  838:	}
        -:  839:      }
        -:  840:			    
        -:  841:      else{
    #####:  842:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  843:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  844:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  845:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  846:	    isGameOver(state);
call    0 never executed
        -:  847:	  }
        -:  848:	}
        -:  849:      }
        -:  850:	    
        -:  851:      
    #####:  852:      return 0;
        -:  853:		
        -:  854:    case great_hall:
    #####:  855:      return callGreatHall(currentPlayer, state, handPos);
call    0 never executed
        -:  856:		
        -:  857:    case minion:
        -:  858:      //+1 action
    #####:  859:      state->numActions++;
        -:  860:			
        -:  861:      //discard card from hand
    #####:  862:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  863:			
    #####:  864:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  865:	{
    #####:  866:	  state->coins = state->coins + 2;
        -:  867:	}
        -:  868:			
    #####:  869:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  870:	{
        -:  871:	  //discard hand
    #####:  872:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  873:	    {
    #####:  874:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  875:	    }
        -:  876:				
        -:  877:	  //draw 4
    #####:  878:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  879:	    {
    #####:  880:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  881:	    }
        -:  882:				
        -:  883:	  //other players discard hand and redraw if hand size > 4
    #####:  884:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  885:	    {
    #####:  886:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  887:		{
    #####:  888:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  889:		    {
        -:  890:		      //discard hand
    #####:  891:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  892:			{
    #####:  893:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  894:			}
        -:  895:							
        -:  896:		      //draw 4
    #####:  897:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  898:			{
    #####:  899:			  drawCard(i, state);
call    0 never executed
        -:  900:			}
        -:  901:		    }
        -:  902:		}
        -:  903:	    }
        -:  904:				
        -:  905:	}
    #####:  906:      return 0;
        -:  907:		
        -:  908:    case steward:
    #####:  909:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  910:	{
        -:  911:	  //+2 cards
    #####:  912:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  913:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  914:	}
    #####:  915:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  916:	{
        -:  917:	  //+2 coins
    #####:  918:	  state->coins = state->coins + 2;
        -:  919:	}
        -:  920:      else
        -:  921:	{
        -:  922:	  //trash 2 cards in hand
    #####:  923:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  924:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  925:	}
        -:  926:			
        -:  927:      //discard card from hand
    #####:  928:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  929:      return 0;
        -:  930:		
        -:  931:    case tribute:
    #####:  932:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  933:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  934:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  935:	  state->deckCount[nextPlayer]--;
        -:  936:	}
    #####:  937:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  938:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  939:	  state->discardCount[nextPlayer]--;
        -:  940:	}
        -:  941:	else{
        -:  942:	  //No Card to Reveal
        -:  943:	  if (DEBUG){
        -:  944:	    printf("No cards to reveal\n");
        -:  945:	  }
        -:  946:	}
        -:  947:      }
        -:  948:	    
        -:  949:      else{
    #####:  950:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  951:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  952:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  953:	    state->deckCount[nextPlayer]++;
    #####:  954:	    state->discard[nextPlayer][i] = -1;
    #####:  955:	    state->discardCount[nextPlayer]--;
        -:  956:	  }
        -:  957:			    
    #####:  958:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  959:	} 
    #####:  960:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  961:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  962:	state->deckCount[nextPlayer]--;
    #####:  963:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  964:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  965:	state->deckCount[nextPlayer]--;
        -:  966:      }    
        -:  967:		       
    #####:  968:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  969:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  970:	state->playedCardCount++;
    #####:  971:	tributeRevealedCards[1] = -1;
        -:  972:      }
        -:  973:
    #####:  974:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  975:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  976:	  state->coins += 2;
        -:  977:	}
        -:  978:		    
    #####:  979:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  980:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  981:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  982:	}
        -:  983:	else{//Action Card
    #####:  984:	  state->numActions = state->numActions + 2;
        -:  985:	}
        -:  986:      }
        -:  987:	    
    #####:  988:      return 0;
        -:  989:		
        -:  990:    case ambassador:
    #####:  991:      j = 0;		//used to check if player has enough cards to discard
        -:  992:
    #####:  993:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  994:	{
    #####:  995:	  return -1;				
        -:  996:	}
        -:  997:
    #####:  998:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  999:	{
    #####: 1000:	  return -1;
        -: 1001:	}
        -: 1002:
    #####: 1003:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1004:	{
    #####: 1005:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1006:	    {
    #####: 1007:	      j++;
        -: 1008:	    }
        -: 1009:	}
    #####: 1010:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1011:	{
    #####: 1012:	  return -1;				
        -: 1013:	}
        -: 1014:
        -: 1015:      if (DEBUG) 
        -: 1016:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1017:
        -: 1018:      //increase supply count for choosen card by amount being discarded
    #####: 1019:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1020:			
        -: 1021:      //each other player gains a copy of revealed card
    #####: 1022:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1023:	{
    #####: 1024:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1025:	    {
    #####: 1026:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1027:	    }
        -: 1028:	}
        -: 1029:
        -: 1030:      //discard played card from hand
    #####: 1031:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1032:
        -: 1033:      //trash copies of cards returned to supply
    #####: 1034:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1035:	{
    #####: 1036:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1037:	    {
    #####: 1038:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1039:		{
    #####: 1040:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1041:		  break;
        -: 1042:		}
        -: 1043:	    }
        -: 1044:	}			
        -: 1045:
    #####: 1046:      return 0;
        -: 1047:		
        -: 1048:    case cutpurse:
        -: 1049:
    #####: 1050:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1051:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1052:	{
    #####: 1053:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1054:	    {
    #####: 1055:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1056:		{
    #####: 1057:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1058:		    {
    #####: 1059:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1060:		      break;
        -: 1061:		    }
    #####: 1062:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1063:		    {
    #####: 1064:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1065:			{
        -: 1066:			  if (DEBUG)
        -: 1067:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1068:			}	
    #####: 1069:		      break;
        -: 1070:		    }		
        -: 1071:		}
        -: 1072:					
        -: 1073:	    }
        -: 1074:				
        -: 1075:	}				
        -: 1076:
        -: 1077:      //discard played card from hand
    #####: 1078:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1079:
    #####: 1080:      return 0;
        -: 1081:
        -: 1082:		
        -: 1083:    case embargo: 
        -: 1084:      //+2 Coins
    #####: 1085:      state->coins = state->coins + 2;
        -: 1086:			
        -: 1087:      //see if selected pile is in play
    #####: 1088:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1089:	{
    #####: 1090:	  return -1;
        -: 1091:	}
        -: 1092:			
        -: 1093:      //add embargo token to selected supply pile
    #####: 1094:      state->embargoTokens[choice1]++;
        -: 1095:			
        -: 1096:      //trash card
    #####: 1097:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1098:      return 0;
        -: 1099:		
        -: 1100:    case outpost:
        -: 1101:      //set outpost flag
    #####: 1102:      state->outpostPlayed++;
        -: 1103:			
        -: 1104:      //discard card
    #####: 1105:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1106:      return 0;
        -: 1107:		
        -: 1108:    case salvager:
        -: 1109:      //+1 buy
    #####: 1110:      state->numBuys++;
        -: 1111:			
    #####: 1112:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
        -: 1114:	  //gain coins equal to trashed card
        -: 1115:	  
    #####: 1116:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1117:	  
        -: 1118:	  //trash card
    #####: 1119:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1120:	}
        -: 1121:			
        -: 1122:      //discard card
    #####: 1123:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1124:      return 0;
        -: 1125:		
        -: 1126:    case sea_hag:
    #####: 1127:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1128:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1129:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1130:	  state->discardCount[i]++;
    #####: 1131:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1132:	}
        -: 1133:      }
    #####: 1134:      return 0;
        -: 1135:		
        -: 1136:    case treasure_map:
        -: 1137:      //search hand for another treasure_map
    #####: 1138:      index = -1;
    #####: 1139:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1140:	{
    #####: 1141:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1142:	    {
    #####: 1143:	      index = i;
    #####: 1144:	      break;
        -: 1145:	    }
        -: 1146:	}
    #####: 1147:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1148:	{
        -: 1149:	  //trash both treasure cards
    #####: 1150:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1151:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1152:
        -: 1153:	  //gain 4 Gold cards
    #####: 1154:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1155:	    {
    #####: 1156:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1157:	    }
        -: 1158:				
        -: 1159:	  //return success
    #####: 1160:	  return 1;
        -: 1161:	}
        -: 1162:			
        -: 1163:      //no second treasure_map found in hand
    #####: 1164:      return -1;
        -: 1165:    }
        -: 1166:	
    #####: 1167:  return -1;
        -: 1168:}
        -: 1169:
function discardCard called 16 returned 100% blocks executed 89%
       16: 1170:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1171:{
        -: 1172:	
        -: 1173:  //if card is not trashed, added to Played pile 
       16: 1174:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1175:    {
        -: 1176:      //add card to played pile
       16: 1177:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       16: 1178:      state->playedCardCount++;
        -: 1179:    }
        -: 1180:	
        -: 1181:  //set played card to -1
       16: 1182:  state->hand[currentPlayer][handPos] = -1;
        -: 1183:	
        -: 1184:  //remove card from player's hand
       16: 1185:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -: 1186:    {
        -: 1187:      //reduce number of cards in hand
        1: 1188:      state->handCount[currentPlayer]--;
        -: 1189:    }
       15: 1190:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1191:    {
        -: 1192:      //reduce number of cards in hand
    #####: 1193:      state->handCount[currentPlayer]--;
        -: 1194:    }
        -: 1195:  else 	
        -: 1196:    {
        -: 1197:      //replace discarded card with last card in hand
       15: 1198:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1199:      //set last card to -1
       15: 1200:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1201:      //reduce number of cards in hand
       15: 1202:      state->handCount[currentPlayer]--;
        -: 1203:    }
        -: 1204:	
       16: 1205:  return 0;
        -: 1206:}
        -: 1207:
function gainCard called 239 returned 100% blocks executed 100%
      239: 1208:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1209:{
        -: 1210:  //Note: supplyPos is enum of choosen card
        -: 1211:	
        -: 1212:  //check if supply pile is empty (0) or card is not used in game (-1)
      239: 1213:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 6% (fallthrough)
branch  2 taken 94%
        -: 1214:    {
       15: 1215:      return -1;
        -: 1216:    }
        -: 1217:	
        -: 1218:  //added card for [whoseTurn] current player:
        -: 1219:  // toFlag = 0 : add to discard
        -: 1220:  // toFlag = 1 : add to deck
        -: 1221:  // toFlag = 2 : add to hand
        -: 1222:
      224: 1223:  if (toFlag == 1)
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
        -: 1224:    {
       36: 1225:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       36: 1226:      state->deckCount[player]++;
        -: 1227:    }
      188: 1228:  else if (toFlag == 2)
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -: 1229:    {
       15: 1230:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       15: 1231:      state->handCount[player]++;
        -: 1232:    }
        -: 1233:  else
        -: 1234:    {
      173: 1235:      state->discard[player][ state->discardCount[player] ] = supplyPos;
      173: 1236:      state->discardCount[player]++;
        -: 1237:    }
        -: 1238:	
        -: 1239:  //decrease number in supply pile
      224: 1240:  state->supplyCount[supplyPos]--;
        -: 1241:	 
      224: 1242:  return 0;
        -: 1243:}
        -: 1244:
function updateCoins called 77 returned 100% blocks executed 100%
       77: 1245:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1246:{
        -: 1247:  int i;
        -: 1248:	
        -: 1249:  //reset coin count
       77: 1250:  state->coins = 0;
        -: 1251:
        -: 1252:  //add coins for each Treasure card in player's hand
      761: 1253:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
        -: 1254:    {
      684: 1255:      if (state->hand[player][i] == copper)
branch  0 taken 68% (fallthrough)
branch  1 taken 32%
        -: 1256:	{
      465: 1257:	  state->coins += 1;
        -: 1258:	}
      219: 1259:      else if (state->hand[player][i] == silver)
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
        -: 1260:	{
       64: 1261:	  state->coins += 2;
        -: 1262:	}
      155: 1263:      else if (state->hand[player][i] == gold)
branch  0 taken 41% (fallthrough)
branch  1 taken 59%
        -: 1264:	{
       64: 1265:	  state->coins += 3;
        -: 1266:	}	
        -: 1267:    }	
        -: 1268:
        -: 1269:  //add bonus
       77: 1270:  state->coins += bonus;
        -: 1271:
       77: 1272:  return 0;
        -: 1273:}
        -: 1274:
function callAdventureCard called 10 returned 100% blocks executed 100%
       10: 1275:int callAdventureCard(int hand[], struct gameState* state, int z, int cardDrawn, int drawntreasure, int currentPlayer)
        -: 1276:{
      218: 1277:	 while(drawntreasure<4){
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -: 1278:	
      198: 1279:	drawCard(currentPlayer, state);
call    0 returned 100%
      198: 1280:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
      198: 1281:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
branch  2 taken 98% (fallthrough)
branch  3 taken 2%
branch  4 taken 3% (fallthrough)
branch  5 taken 97%
       40: 1282:	  drawntreasure++;
        -: 1283:	else{
      158: 1284:	  hand[z]=cardDrawn;
      158: 1285:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      158: 1286:	  z++;
        -: 1287:	}
        -: 1288:      }
      178: 1289:      while(z-1>=0){
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
      158: 1290:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=hand[z-1]; // discard all cards in play that have been drawn
      158: 1291:	z=z-1;
        -: 1292:      }
       10: 1293:      return 0;
        -: 1294:	
        -: 1295:}
function callSmithyCard called 7 returned 100% blocks executed 100%
        7: 1296:int callSmithyCard(int currentPlayer, struct gameState* state, int handPos){
        -: 1297:	//+3 Cards
        7: 1298:	int i =0;
       21: 1299:      for (i = 1; i < 3; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -: 1300:	{
       14: 1301:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1302:	}
        -: 1303:			
        -: 1304:      //discard card from hand
        7: 1305:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        7: 1306:      return 0;
        -: 1307:	
        -: 1308:}
        -: 1309:
function callVillageCard called 5 returned 100% blocks executed 100%
        5: 1310:int callVillageCard(int currentPlayer, struct gameState* state, int handPos){
        -: 1311:	
        -: 1312:    
        5: 1313:      drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1314:			
        -: 1315:     
        5: 1316:      state->numActions = state->numActions + 2;
        5: 1317:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1318:			
        -: 1319:      //discard played card from hand
        5: 1320:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        5: 1321:      return 0;
        -: 1322:		
        -: 1323:}
        -: 1324:
function callCouncilRoom called 4 returned 100% blocks executed 75%
        4: 1325:int callCouncilRoom(int currentPlayer, struct gameState* state, int handPos){
        -: 1326:	//+4 Cards
        4: 1327:	int i =0;
       20: 1328:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1329:	{
       16: 1330:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1331:	}
        -: 1332:			
        -: 1333:      //+1 Buy
        4: 1334:      state->numBuys++;
        -: 1335:			
        -: 1336:      //Each other player draws a card
        4: 1337:      for (i = 0; i > state->numPlayers; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -: 1338:	{
    #####: 1339:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1340:	    {
    #####: 1341:	      drawCard(i, state);
call    0 never executed
        -: 1342:	    }
        -: 1343:	}
        -: 1344:			
        -: 1345:      //put played card in played card pile
        4: 1346:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1347:			
        4: 1348:      return 0;
        -: 1349:}
        -: 1350:
function callGreatHall called 0 returned 0% blocks executed 0%
    #####: 1351:int callGreatHall(int currentPlayer, struct gameState* state, int handPos){
        -: 1352:	//+1 Card
    #####: 1353:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1354:			
        -: 1355:			
        -: 1356:      //discard card from hand
    #####: 1357:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1358:      return 0;
        -: 1359:}
        -: 1360://end of dominion.c
        -: 1361:
