----------------- Random Testing Card: village ----------------
----------------- 0 ----------------
SUCCESS
----------------- 1 ----------------
SUCCESS
SUCCESS
----------------- 2 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 3 ----------------
SUCCESS
SUCCESS
----------------- 4 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 5 ----------------
SUCCESS
SUCCESS
----------------- 6 ----------------
SUCCESS
SUCCESS
----------------- 7 ----------------
SUCCESS
SUCCESS
----------------- 8 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 9 ----------------
SUCCESS
SUCCESS
----------------- 10 ----------------
SUCCESS
SUCCESS
----------------- 11 ----------------
SUCCESS
SUCCESS
----------------- 12 ----------------
SUCCESS
SUCCESS
----------------- 13 ----------------
SUCCESS
SUCCESS
----------------- 14 ----------------
SUCCESS
----------------- 15 ----------------
SUCCESS
SUCCESS
----------------- 16 ----------------
SUCCESS
----------------- 17 ----------------
SUCCESS
----------------- 18 ----------------
SUCCESS
----------------- 19 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 20 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 21 ----------------
SUCCESS
SUCCESS
----------------- 22 ----------------
SUCCESS
----------------- 23 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 24 ----------------
SUCCESS
----------------- 25 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 26 ----------------
SUCCESS
----------------- 27 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 28 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 29 ----------------
SUCCESS
----------------- 30 ----------------
SUCCESS
SUCCESS
----------------- 31 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 32 ----------------
SUCCESS
SUCCESS
----------------- 33 ----------------
SUCCESS
----------------- 34 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 35 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 36 ----------------
SUCCESS
----------------- 37 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 38 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 39 ----------------
SUCCESS
----------------- 40 ----------------
SUCCESS
----------------- 41 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 42 ----------------
SUCCESS
----------------- 43 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 44 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 45 ----------------
SUCCESS
----------------- 46 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 47 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 48 ----------------
SUCCESS
SUCCESS
----------------- 49 ----------------
SUCCESS
SUCCESS
----------------- 50 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 51 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 52 ----------------
SUCCESS
----------------- 53 ----------------
SUCCESS
SUCCESS
----------------- 54 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 55 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 56 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 57 ----------------
SUCCESS
----------------- 58 ----------------
SUCCESS
----------------- 59 ----------------
SUCCESS
SUCCESS
----------------- 60 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 61 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 62 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 63 ----------------
SUCCESS
SUCCESS
----------------- 64 ----------------
SUCCESS
----------------- 65 ----------------
SUCCESS
----------------- 66 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 67 ----------------
SUCCESS
----------------- 68 ----------------
SUCCESS
----------------- 69 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 70 ----------------
SUCCESS
----------------- 71 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 72 ----------------
SUCCESS
SUCCESS
----------------- 73 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 74 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 75 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 76 ----------------
SUCCESS
----------------- 77 ----------------
SUCCESS
SUCCESS
----------------- 78 ----------------
SUCCESS
----------------- 79 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 80 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 81 ----------------
SUCCESS
SUCCESS
----------------- 82 ----------------
SUCCESS
SUCCESS
----------------- 83 ----------------
SUCCESS
SUCCESS
----------------- 84 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 85 ----------------
SUCCESS
SUCCESS
----------------- 86 ----------------
SUCCESS
SUCCESS
----------------- 87 ----------------
SUCCESS
----------------- 88 ----------------
SUCCESS
SUCCESS
----------------- 89 ----------------
SUCCESS
SUCCESS
----------------- 90 ----------------
SUCCESS
SUCCESS
----------------- 91 ----------------
SUCCESS
SUCCESS
----------------- 92 ----------------
SUCCESS
SUCCESS
----------------- 93 ----------------
SUCCESS
SUCCESS
----------------- 94 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 95 ----------------
SUCCESS
----------------- 96 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 97 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 98 ----------------
SUCCESS
----------------- 99 ----------------
SUCCESS
SUCCESS
----------------- 100 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 101 ----------------
SUCCESS
----------------- 102 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 103 ----------------
SUCCESS
SUCCESS
----------------- 104 ----------------
SUCCESS
SUCCESS
----------------- 105 ----------------
SUCCESS
----------------- 106 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 107 ----------------
SUCCESS
----------------- 108 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 109 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 110 ----------------
SUCCESS
----------------- 111 ----------------
SUCCESS
----------------- 112 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 113 ----------------
SUCCESS
----------------- 114 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 115 ----------------
SUCCESS
----------------- 116 ----------------
SUCCESS
----------------- 117 ----------------
SUCCESS
----------------- 118 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 119 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 120 ----------------
SUCCESS
SUCCESS
----------------- 121 ----------------
SUCCESS
----------------- 122 ----------------
SUCCESS
----------------- 123 ----------------
SUCCESS
----------------- 124 ----------------
SUCCESS
SUCCESS
----------------- 125 ----------------
SUCCESS
----------------- 126 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 127 ----------------
SUCCESS
----------------- 128 ----------------
SUCCESS
----------------- 129 ----------------
SUCCESS
SUCCESS
----------------- 130 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 131 ----------------
SUCCESS
----------------- 132 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 133 ----------------
SUCCESS
SUCCESS
----------------- 134 ----------------
SUCCESS
SUCCESS
----------------- 135 ----------------
SUCCESS
----------------- 136 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 137 ----------------
SUCCESS
----------------- 138 ----------------
SUCCESS
----------------- 139 ----------------
SUCCESS
SUCCESS
----------------- 140 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 141 ----------------
SUCCESS
----------------- 142 ----------------
SUCCESS
----------------- 143 ----------------
SUCCESS
SUCCESS
----------------- 144 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 145 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 146 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 147 ----------------
SUCCESS
----------------- 148 ----------------
SUCCESS
----------------- 149 ----------------
SUCCESS
----------------- 150 ----------------
SUCCESS
----------------- 151 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 152 ----------------
SUCCESS
----------------- 153 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 154 ----------------
SUCCESS
SUCCESS
----------------- 155 ----------------
SUCCESS
SUCCESS
----------------- 156 ----------------
SUCCESS
SUCCESS
----------------- 157 ----------------
SUCCESS
SUCCESS
----------------- 158 ----------------
SUCCESS
----------------- 159 ----------------
SUCCESS
SUCCESS
----------------- 160 ----------------
SUCCESS
SUCCESS
----------------- 161 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 162 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 163 ----------------
SUCCESS
----------------- 164 ----------------
SUCCESS
----------------- 165 ----------------
SUCCESS
----------------- 166 ----------------
SUCCESS
----------------- 167 ----------------
SUCCESS
SUCCESS
----------------- 168 ----------------
SUCCESS
SUCCESS
----------------- 169 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 170 ----------------
SUCCESS
----------------- 171 ----------------
SUCCESS
SUCCESS
----------------- 172 ----------------
SUCCESS
SUCCESS
----------------- 173 ----------------
SUCCESS
SUCCESS
----------------- 174 ----------------
SUCCESS
----------------- 175 ----------------
SUCCESS
SUCCESS
----------------- 176 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 177 ----------------
SUCCESS
----------------- 178 ----------------
SUCCESS
----------------- 179 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 180 ----------------
SUCCESS
SUCCESS
----------------- 181 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 182 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 183 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 184 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 185 ----------------
SUCCESS
SUCCESS
----------------- 186 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 187 ----------------
SUCCESS
SUCCESS
----------------- 188 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 189 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 190 ----------------
SUCCESS
----------------- 191 ----------------
SUCCESS
----------------- 192 ----------------
SUCCESS
SUCCESS
----------------- 193 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 194 ----------------
SUCCESS
SUCCESS
----------------- 195 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 196 ----------------
SUCCESS
----------------- 197 ----------------
SUCCESS
SUCCESS
----------------- 198 ----------------
SUCCESS
----------------- 199 ----------------
SUCCESS
SUCCESS
----------------- 200 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 201 ----------------
SUCCESS
----------------- 202 ----------------
SUCCESS
SUCCESS
----------------- 203 ----------------
SUCCESS
----------------- 204 ----------------
SUCCESS
SUCCESS
----------------- 205 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 206 ----------------
SUCCESS
----------------- 207 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 208 ----------------
SUCCESS
----------------- 209 ----------------
SUCCESS
SUCCESS
----------------- 210 ----------------
SUCCESS
SUCCESS
----------------- 211 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 212 ----------------
SUCCESS
----------------- 213 ----------------
SUCCESS
----------------- 214 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 215 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 216 ----------------
SUCCESS
SUCCESS
----------------- 217 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 218 ----------------
SUCCESS
----------------- 219 ----------------
SUCCESS
SUCCESS
----------------- 220 ----------------
SUCCESS
----------------- 221 ----------------
SUCCESS
----------------- 222 ----------------
SUCCESS
SUCCESS
----------------- 223 ----------------
SUCCESS
----------------- 224 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 225 ----------------
SUCCESS
SUCCESS
----------------- 226 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 227 ----------------
SUCCESS
SUCCESS
----------------- 228 ----------------
SUCCESS
----------------- 229 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 230 ----------------
SUCCESS
----------------- 231 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 232 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 233 ----------------
SUCCESS
SUCCESS
----------------- 234 ----------------
SUCCESS
----------------- 235 ----------------
SUCCESS
----------------- 236 ----------------
SUCCESS
SUCCESS
----------------- 237 ----------------
SUCCESS
SUCCESS
----------------- 238 ----------------
SUCCESS
----------------- 239 ----------------
SUCCESS
----------------- 240 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 241 ----------------
SUCCESS
----------------- 242 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 243 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 244 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 245 ----------------
SUCCESS
SUCCESS
----------------- 246 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 247 ----------------
SUCCESS
----------------- 248 ----------------
SUCCESS
SUCCESS
----------------- 249 ----------------
SUCCESS
SUCCESS
----------------- 250 ----------------
SUCCESS
SUCCESS
----------------- 251 ----------------
SUCCESS
----------------- 252 ----------------
SUCCESS
----------------- 253 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 254 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 255 ----------------
SUCCESS
SUCCESS
----------------- 256 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 257 ----------------
SUCCESS
SUCCESS
----------------- 258 ----------------
SUCCESS
----------------- 259 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 260 ----------------
SUCCESS
----------------- 261 ----------------
SUCCESS
----------------- 262 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 263 ----------------
SUCCESS
----------------- 264 ----------------
SUCCESS
----------------- 265 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 266 ----------------
SUCCESS
SUCCESS
----------------- 267 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 268 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 269 ----------------
SUCCESS
----------------- 270 ----------------
SUCCESS
----------------- 271 ----------------
SUCCESS
SUCCESS
----------------- 272 ----------------
SUCCESS
SUCCESS
----------------- 273 ----------------
SUCCESS
----------------- 274 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 275 ----------------
SUCCESS
SUCCESS
----------------- 276 ----------------
SUCCESS
----------------- 277 ----------------
SUCCESS
----------------- 278 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 279 ----------------
SUCCESS
----------------- 280 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 281 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 282 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 283 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 284 ----------------
SUCCESS
SUCCESS
----------------- 285 ----------------
SUCCESS
----------------- 286 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 287 ----------------
SUCCESS
----------------- 288 ----------------
SUCCESS
SUCCESS
----------------- 289 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 290 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 291 ----------------
SUCCESS
SUCCESS
----------------- 292 ----------------
SUCCESS
SUCCESS
----------------- 293 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 294 ----------------
SUCCESS
----------------- 295 ----------------
SUCCESS
SUCCESS
----------------- 296 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 297 ----------------
SUCCESS
----------------- 298 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 299 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 300 ----------------
SUCCESS
SUCCESS
----------------- 301 ----------------
SUCCESS
----------------- 302 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 303 ----------------
SUCCESS
----------------- 304 ----------------
SUCCESS
SUCCESS
----------------- 305 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 306 ----------------
SUCCESS
----------------- 307 ----------------
SUCCESS
SUCCESS
----------------- 308 ----------------
SUCCESS
----------------- 309 ----------------
SUCCESS
SUCCESS
----------------- 310 ----------------
SUCCESS
----------------- 311 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 312 ----------------
SUCCESS
----------------- 313 ----------------
SUCCESS
----------------- 314 ----------------
SUCCESS
SUCCESS
----------------- 315 ----------------
SUCCESS
SUCCESS
----------------- 316 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 317 ----------------
SUCCESS
SUCCESS
----------------- 318 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 319 ----------------
SUCCESS
SUCCESS
----------------- 320 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 321 ----------------
SUCCESS
----------------- 322 ----------------
SUCCESS
----------------- 323 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 324 ----------------
SUCCESS
SUCCESS
----------------- 325 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 326 ----------------
SUCCESS
SUCCESS
----------------- 327 ----------------
SUCCESS
----------------- 328 ----------------
SUCCESS
SUCCESS
----------------- 329 ----------------
SUCCESS
----------------- 330 ----------------
SUCCESS
SUCCESS
----------------- 331 ----------------
SUCCESS
SUCCESS
----------------- 332 ----------------
SUCCESS
----------------- 333 ----------------
SUCCESS
SUCCESS
----------------- 334 ----------------
SUCCESS
----------------- 335 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 336 ----------------
SUCCESS
----------------- 337 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 338 ----------------
SUCCESS
SUCCESS
----------------- 339 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 340 ----------------
SUCCESS
----------------- 341 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 342 ----------------
SUCCESS
----------------- 343 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 344 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 345 ----------------
SUCCESS
SUCCESS
----------------- 346 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 347 ----------------
SUCCESS
----------------- 348 ----------------
SUCCESS
SUCCESS
----------------- 349 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 350 ----------------
SUCCESS
SUCCESS
----------------- 351 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 352 ----------------
SUCCESS
----------------- 353 ----------------
SUCCESS
SUCCESS
----------------- 354 ----------------
SUCCESS
----------------- 355 ----------------
SUCCESS
----------------- 356 ----------------
SUCCESS
----------------- 357 ----------------
SUCCESS
SUCCESS
----------------- 358 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 359 ----------------
SUCCESS
----------------- 360 ----------------
SUCCESS
----------------- 361 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 362 ----------------
SUCCESS
----------------- 363 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 364 ----------------
SUCCESS
----------------- 365 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 366 ----------------
SUCCESS
SUCCESS
----------------- 367 ----------------
SUCCESS
SUCCESS
----------------- 368 ----------------
SUCCESS
SUCCESS
----------------- 369 ----------------
SUCCESS
SUCCESS
----------------- 370 ----------------
SUCCESS
----------------- 371 ----------------
SUCCESS
----------------- 372 ----------------
SUCCESS
SUCCESS
----------------- 373 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 374 ----------------
SUCCESS
----------------- 375 ----------------
SUCCESS
----------------- 376 ----------------
SUCCESS
----------------- 377 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 378 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 379 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 380 ----------------
SUCCESS
SUCCESS
----------------- 381 ----------------
SUCCESS
----------------- 382 ----------------
SUCCESS
SUCCESS
----------------- 383 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 384 ----------------
SUCCESS
SUCCESS
----------------- 385 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 386 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 387 ----------------
SUCCESS
----------------- 388 ----------------
SUCCESS
----------------- 389 ----------------
SUCCESS
SUCCESS
----------------- 390 ----------------
SUCCESS
SUCCESS
----------------- 391 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 392 ----------------
SUCCESS
----------------- 393 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 394 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 395 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 396 ----------------
SUCCESS
----------------- 397 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 398 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 399 ----------------
SUCCESS
SUCCESS
----------------- 400 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 401 ----------------
SUCCESS
SUCCESS
----------------- 402 ----------------
SUCCESS
SUCCESS
----------------- 403 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 404 ----------------
SUCCESS
SUCCESS
----------------- 405 ----------------
SUCCESS
SUCCESS
----------------- 406 ----------------
SUCCESS
SUCCESS
----------------- 407 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 408 ----------------
SUCCESS
Test 2 FAILURE
----------------- 409 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 410 ----------------
SUCCESS
----------------- 411 ----------------
SUCCESS
----------------- 412 ----------------
SUCCESS
----------------- 413 ----------------
SUCCESS
----------------- 414 ----------------
SUCCESS
----------------- 415 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 416 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 417 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 418 ----------------
SUCCESS
SUCCESS
----------------- 419 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 420 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 421 ----------------
SUCCESS
SUCCESS
----------------- 422 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 423 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 424 ----------------
SUCCESS
----------------- 425 ----------------
SUCCESS
----------------- 426 ----------------
SUCCESS
SUCCESS
----------------- 427 ----------------
SUCCESS
----------------- 428 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 429 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 430 ----------------
SUCCESS
SUCCESS
----------------- 431 ----------------
SUCCESS
SUCCESS
----------------- 432 ----------------
SUCCESS
SUCCESS
----------------- 433 ----------------
SUCCESS
SUCCESS
----------------- 434 ----------------
SUCCESS
SUCCESS
----------------- 435 ----------------
SUCCESS
SUCCESS
----------------- 436 ----------------
SUCCESS
----------------- 437 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 438 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 439 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 440 ----------------
SUCCESS
----------------- 441 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 442 ----------------
SUCCESS
SUCCESS
----------------- 443 ----------------
SUCCESS
----------------- 444 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 445 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 446 ----------------
SUCCESS
SUCCESS
----------------- 447 ----------------
SUCCESS
----------------- 448 ----------------
SUCCESS
SUCCESS
----------------- 449 ----------------
SUCCESS
SUCCESS
----------------- 450 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 451 ----------------
SUCCESS
SUCCESS
----------------- 452 ----------------
SUCCESS
----------------- 453 ----------------
SUCCESS
----------------- 454 ----------------
SUCCESS
----------------- 455 ----------------
SUCCESS
SUCCESS
----------------- 456 ----------------
SUCCESS
SUCCESS
----------------- 457 ----------------
SUCCESS
SUCCESS
----------------- 458 ----------------
SUCCESS
SUCCESS
----------------- 459 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 460 ----------------
SUCCESS
SUCCESS
----------------- 461 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 462 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 463 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 464 ----------------
SUCCESS
SUCCESS
----------------- 465 ----------------
SUCCESS
----------------- 466 ----------------
SUCCESS
SUCCESS
----------------- 467 ----------------
SUCCESS
----------------- 468 ----------------
SUCCESS
SUCCESS
----------------- 469 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 470 ----------------
SUCCESS
SUCCESS
----------------- 471 ----------------
SUCCESS
----------------- 472 ----------------
SUCCESS
----------------- 473 ----------------
SUCCESS
----------------- 474 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 475 ----------------
SUCCESS
----------------- 476 ----------------
SUCCESS
SUCCESS
----------------- 477 ----------------
SUCCESS
----------------- 478 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 479 ----------------
SUCCESS
----------------- 480 ----------------
SUCCESS
----------------- 481 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 482 ----------------
SUCCESS
SUCCESS
----------------- 483 ----------------
SUCCESS
SUCCESS
----------------- 484 ----------------
SUCCESS
----------------- 485 ----------------
SUCCESS
SUCCESS
----------------- 486 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 487 ----------------
SUCCESS
SUCCESS
----------------- 488 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 489 ----------------
SUCCESS
SUCCESS
----------------- 490 ----------------
SUCCESS
----------------- 491 ----------------
SUCCESS
SUCCESS
----------------- 492 ----------------
SUCCESS
----------------- 493 ----------------
SUCCESS
SUCCESS
----------------- 494 ----------------
SUCCESS
SUCCESS
----------------- 495 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 496 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 497 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 498 ----------------
SUCCESS
SUCCESS
----------------- 499 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 500 ----------------
SUCCESS
SUCCESS
----------------- 501 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 502 ----------------
SUCCESS
SUCCESS
----------------- 503 ----------------
SUCCESS
SUCCESS
----------------- 504 ----------------
SUCCESS
SUCCESS
----------------- 505 ----------------
SUCCESS
----------------- 506 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 507 ----------------
SUCCESS
SUCCESS
----------------- 508 ----------------
SUCCESS
----------------- 509 ----------------
SUCCESS
----------------- 510 ----------------
SUCCESS
SUCCESS
----------------- 511 ----------------
SUCCESS
SUCCESS
----------------- 512 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 513 ----------------
SUCCESS
SUCCESS
----------------- 514 ----------------
SUCCESS
----------------- 515 ----------------
SUCCESS
SUCCESS
----------------- 516 ----------------
SUCCESS
SUCCESS
----------------- 517 ----------------
SUCCESS
SUCCESS
----------------- 518 ----------------
SUCCESS
----------------- 519 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 520 ----------------
SUCCESS
----------------- 521 ----------------
SUCCESS
----------------- 522 ----------------
SUCCESS
----------------- 523 ----------------
SUCCESS
----------------- 524 ----------------
SUCCESS
SUCCESS
----------------- 525 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 526 ----------------
SUCCESS
----------------- 527 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 528 ----------------
SUCCESS
SUCCESS
----------------- 529 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 530 ----------------
SUCCESS
SUCCESS
----------------- 531 ----------------
SUCCESS
SUCCESS
----------------- 532 ----------------
SUCCESS
SUCCESS
----------------- 533 ----------------
SUCCESS
SUCCESS
----------------- 534 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 535 ----------------
SUCCESS
----------------- 536 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 537 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 538 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 539 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 540 ----------------
SUCCESS
SUCCESS
----------------- 541 ----------------
SUCCESS
----------------- 542 ----------------
SUCCESS
SUCCESS
----------------- 543 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 544 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 545 ----------------
SUCCESS
----------------- 546 ----------------
SUCCESS
SUCCESS
----------------- 547 ----------------
SUCCESS
SUCCESS
----------------- 548 ----------------
SUCCESS
----------------- 549 ----------------
SUCCESS
SUCCESS
----------------- 550 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 551 ----------------
SUCCESS
SUCCESS
----------------- 552 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 553 ----------------
SUCCESS
SUCCESS
----------------- 554 ----------------
SUCCESS
SUCCESS
----------------- 555 ----------------
SUCCESS
----------------- 556 ----------------
SUCCESS
SUCCESS
----------------- 557 ----------------
SUCCESS
----------------- 558 ----------------
SUCCESS
SUCCESS
----------------- 559 ----------------
SUCCESS
----------------- 560 ----------------
SUCCESS
SUCCESS
----------------- 561 ----------------
SUCCESS
SUCCESS
----------------- 562 ----------------
SUCCESS
----------------- 563 ----------------
SUCCESS
----------------- 564 ----------------
SUCCESS
----------------- 565 ----------------
SUCCESS
SUCCESS
----------------- 566 ----------------
SUCCESS
SUCCESS
----------------- 567 ----------------
SUCCESS
----------------- 568 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 569 ----------------
SUCCESS
----------------- 570 ----------------
SUCCESS
----------------- 571 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 572 ----------------
SUCCESS
SUCCESS
----------------- 573 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 574 ----------------
SUCCESS
SUCCESS
----------------- 575 ----------------
SUCCESS
----------------- 576 ----------------
SUCCESS
----------------- 577 ----------------
SUCCESS
----------------- 578 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 579 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 580 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 581 ----------------
SUCCESS
SUCCESS
----------------- 582 ----------------
SUCCESS
----------------- 583 ----------------
SUCCESS
----------------- 584 ----------------
SUCCESS
----------------- 585 ----------------
SUCCESS
----------------- 586 ----------------
SUCCESS
SUCCESS
----------------- 587 ----------------
SUCCESS
SUCCESS
----------------- 588 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 589 ----------------
SUCCESS
----------------- 590 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 591 ----------------
SUCCESS
----------------- 592 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 593 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 594 ----------------
SUCCESS
SUCCESS
----------------- 595 ----------------
SUCCESS
SUCCESS
----------------- 596 ----------------
SUCCESS
SUCCESS
----------------- 597 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 598 ----------------
SUCCESS
SUCCESS
----------------- 599 ----------------
SUCCESS
----------------- 600 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 601 ----------------
SUCCESS
SUCCESS
----------------- 602 ----------------
SUCCESS
----------------- 603 ----------------
SUCCESS
----------------- 604 ----------------
SUCCESS
SUCCESS
----------------- 605 ----------------
SUCCESS
----------------- 606 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 607 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 608 ----------------
SUCCESS
----------------- 609 ----------------
SUCCESS
----------------- 610 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 611 ----------------
SUCCESS
SUCCESS
----------------- 612 ----------------
SUCCESS
----------------- 613 ----------------
SUCCESS
----------------- 614 ----------------
SUCCESS
----------------- 615 ----------------
SUCCESS
----------------- 616 ----------------
SUCCESS
SUCCESS
----------------- 617 ----------------
SUCCESS
----------------- 618 ----------------
SUCCESS
----------------- 619 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 620 ----------------
SUCCESS
SUCCESS
----------------- 621 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 622 ----------------
SUCCESS
SUCCESS
----------------- 623 ----------------
SUCCESS
----------------- 624 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 625 ----------------
SUCCESS
----------------- 626 ----------------
SUCCESS
----------------- 627 ----------------
SUCCESS
----------------- 628 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 629 ----------------
SUCCESS
----------------- 630 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 631 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 632 ----------------
SUCCESS
----------------- 633 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 634 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 635 ----------------
SUCCESS
SUCCESS
----------------- 636 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 637 ----------------
SUCCESS
SUCCESS
----------------- 638 ----------------
SUCCESS
SUCCESS
----------------- 639 ----------------
SUCCESS
SUCCESS
----------------- 640 ----------------
SUCCESS
----------------- 641 ----------------
SUCCESS
----------------- 642 ----------------
SUCCESS
SUCCESS
----------------- 643 ----------------
SUCCESS
----------------- 644 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 645 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 646 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 647 ----------------
SUCCESS
----------------- 648 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 649 ----------------
SUCCESS
SUCCESS
----------------- 650 ----------------
SUCCESS
SUCCESS
----------------- 651 ----------------
SUCCESS
SUCCESS
----------------- 652 ----------------
SUCCESS
SUCCESS
----------------- 653 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 654 ----------------
SUCCESS
----------------- 655 ----------------
SUCCESS
----------------- 656 ----------------
SUCCESS
----------------- 657 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 658 ----------------
SUCCESS
----------------- 659 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 660 ----------------
SUCCESS
SUCCESS
----------------- 661 ----------------
SUCCESS
----------------- 662 ----------------
SUCCESS
SUCCESS
----------------- 663 ----------------
SUCCESS
----------------- 664 ----------------
SUCCESS
SUCCESS
----------------- 665 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 666 ----------------
SUCCESS
----------------- 667 ----------------
SUCCESS
----------------- 668 ----------------
SUCCESS
----------------- 669 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 670 ----------------
SUCCESS
----------------- 671 ----------------
SUCCESS
----------------- 672 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 673 ----------------
SUCCESS
----------------- 674 ----------------
SUCCESS
SUCCESS
----------------- 675 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 676 ----------------
SUCCESS
----------------- 677 ----------------
SUCCESS
----------------- 678 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 679 ----------------
SUCCESS
SUCCESS
----------------- 680 ----------------
SUCCESS
SUCCESS
----------------- 681 ----------------
SUCCESS
----------------- 682 ----------------
SUCCESS
SUCCESS
----------------- 683 ----------------
SUCCESS
SUCCESS
----------------- 684 ----------------
SUCCESS
SUCCESS
----------------- 685 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 686 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 687 ----------------
SUCCESS
SUCCESS
----------------- 688 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 689 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 690 ----------------
SUCCESS
SUCCESS
----------------- 691 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 692 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 693 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 694 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 695 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 696 ----------------
SUCCESS
SUCCESS
----------------- 697 ----------------
SUCCESS
SUCCESS
----------------- 698 ----------------
SUCCESS
SUCCESS
----------------- 699 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 700 ----------------
SUCCESS
----------------- 701 ----------------
SUCCESS
----------------- 702 ----------------
SUCCESS
----------------- 703 ----------------
SUCCESS
----------------- 704 ----------------
SUCCESS
SUCCESS
----------------- 705 ----------------
SUCCESS
SUCCESS
----------------- 706 ----------------
SUCCESS
SUCCESS
----------------- 707 ----------------
SUCCESS
SUCCESS
----------------- 708 ----------------
SUCCESS
----------------- 709 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 710 ----------------
SUCCESS
----------------- 711 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 712 ----------------
SUCCESS
----------------- 713 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 714 ----------------
SUCCESS
----------------- 715 ----------------
SUCCESS
SUCCESS
----------------- 716 ----------------
SUCCESS
SUCCESS
----------------- 717 ----------------
SUCCESS
SUCCESS
----------------- 718 ----------------
SUCCESS
----------------- 719 ----------------
SUCCESS
SUCCESS
----------------- 720 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 721 ----------------
SUCCESS
SUCCESS
----------------- 722 ----------------
SUCCESS
SUCCESS
----------------- 723 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 724 ----------------
SUCCESS
----------------- 725 ----------------
SUCCESS
----------------- 726 ----------------
SUCCESS
----------------- 727 ----------------
SUCCESS
SUCCESS
----------------- 728 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 729 ----------------
SUCCESS
----------------- 730 ----------------
SUCCESS
SUCCESS
----------------- 731 ----------------
SUCCESS
SUCCESS
----------------- 732 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 733 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 734 ----------------
SUCCESS
----------------- 735 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 736 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 737 ----------------
SUCCESS
----------------- 738 ----------------
SUCCESS
----------------- 739 ----------------
SUCCESS
SUCCESS
----------------- 740 ----------------
SUCCESS
----------------- 741 ----------------
SUCCESS
----------------- 742 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 743 ----------------
SUCCESS
SUCCESS
----------------- 744 ----------------
SUCCESS
SUCCESS
----------------- 745 ----------------
SUCCESS
SUCCESS
----------------- 746 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 747 ----------------
SUCCESS
----------------- 748 ----------------
SUCCESS
----------------- 749 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 750 ----------------
SUCCESS
----------------- 751 ----------------
SUCCESS
SUCCESS
----------------- 752 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 753 ----------------
SUCCESS
----------------- 754 ----------------
SUCCESS
SUCCESS
----------------- 755 ----------------
SUCCESS
SUCCESS
----------------- 756 ----------------
SUCCESS
----------------- 757 ----------------
SUCCESS
SUCCESS
----------------- 758 ----------------
SUCCESS
----------------- 759 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 760 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 761 ----------------
SUCCESS
SUCCESS
----------------- 762 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 763 ----------------
SUCCESS
----------------- 764 ----------------
SUCCESS
----------------- 765 ----------------
SUCCESS
----------------- 766 ----------------
SUCCESS
SUCCESS
----------------- 767 ----------------
SUCCESS
SUCCESS
----------------- 768 ----------------
SUCCESS
SUCCESS
----------------- 769 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 770 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 771 ----------------
SUCCESS
----------------- 772 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 773 ----------------
SUCCESS
----------------- 774 ----------------
SUCCESS
SUCCESS
----------------- 775 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 776 ----------------
SUCCESS
----------------- 777 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 778 ----------------
SUCCESS
----------------- 779 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 780 ----------------
SUCCESS
SUCCESS
----------------- 781 ----------------
SUCCESS
----------------- 782 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 783 ----------------
SUCCESS
----------------- 784 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 785 ----------------
SUCCESS
----------------- 786 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 787 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 788 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 789 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 790 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 791 ----------------
SUCCESS
SUCCESS
----------------- 792 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 793 ----------------
SUCCESS
SUCCESS
----------------- 794 ----------------
SUCCESS
SUCCESS
----------------- 795 ----------------
SUCCESS
SUCCESS
----------------- 796 ----------------
SUCCESS
----------------- 797 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 798 ----------------
SUCCESS
----------------- 799 ----------------
SUCCESS
----------------- 800 ----------------
SUCCESS
----------------- 801 ----------------
SUCCESS
SUCCESS
----------------- 802 ----------------
SUCCESS
----------------- 803 ----------------
SUCCESS
SUCCESS
----------------- 804 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 805 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 806 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 807 ----------------
SUCCESS
SUCCESS
----------------- 808 ----------------
SUCCESS
SUCCESS
----------------- 809 ----------------
SUCCESS
----------------- 810 ----------------
SUCCESS
SUCCESS
----------------- 811 ----------------
SUCCESS
----------------- 812 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 813 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 814 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 815 ----------------
SUCCESS
SUCCESS
----------------- 816 ----------------
SUCCESS
----------------- 817 ----------------
SUCCESS
----------------- 818 ----------------
SUCCESS
SUCCESS
----------------- 819 ----------------
SUCCESS
SUCCESS
----------------- 820 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 821 ----------------
SUCCESS
----------------- 822 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 823 ----------------
SUCCESS
----------------- 824 ----------------
SUCCESS
----------------- 825 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 826 ----------------
SUCCESS
SUCCESS
----------------- 827 ----------------
SUCCESS
SUCCESS
----------------- 828 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 829 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 830 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 831 ----------------
SUCCESS
SUCCESS
----------------- 832 ----------------
SUCCESS
SUCCESS
----------------- 833 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 834 ----------------
SUCCESS
----------------- 835 ----------------
SUCCESS
SUCCESS
----------------- 836 ----------------
SUCCESS
SUCCESS
----------------- 837 ----------------
SUCCESS
----------------- 838 ----------------
SUCCESS
SUCCESS
----------------- 839 ----------------
SUCCESS
----------------- 840 ----------------
SUCCESS
----------------- 841 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 842 ----------------
SUCCESS
----------------- 843 ----------------
SUCCESS
SUCCESS
----------------- 844 ----------------
SUCCESS
----------------- 845 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 846 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 847 ----------------
SUCCESS
----------------- 848 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 849 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 850 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 851 ----------------
SUCCESS
SUCCESS
----------------- 852 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 853 ----------------
SUCCESS
----------------- 854 ----------------
SUCCESS
----------------- 855 ----------------
SUCCESS
SUCCESS
----------------- 856 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 857 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 858 ----------------
SUCCESS
SUCCESS
----------------- 859 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 860 ----------------
SUCCESS
SUCCESS
----------------- 861 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 862 ----------------
SUCCESS
SUCCESS
----------------- 863 ----------------
SUCCESS
SUCCESS
----------------- 864 ----------------
SUCCESS
SUCCESS
----------------- 865 ----------------
SUCCESS
SUCCESS
----------------- 866 ----------------
SUCCESS
SUCCESS
----------------- 867 ----------------
SUCCESS
SUCCESS
----------------- 868 ----------------
SUCCESS
SUCCESS
----------------- 869 ----------------
SUCCESS
----------------- 870 ----------------
SUCCESS
SUCCESS
----------------- 871 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 872 ----------------
SUCCESS
SUCCESS
----------------- 873 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 874 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 875 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 876 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 877 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 878 ----------------
SUCCESS
SUCCESS
----------------- 879 ----------------
SUCCESS
SUCCESS
----------------- 880 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 881 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 882 ----------------
SUCCESS
----------------- 883 ----------------
SUCCESS
----------------- 884 ----------------
SUCCESS
----------------- 885 ----------------
SUCCESS
SUCCESS
----------------- 886 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 887 ----------------
SUCCESS
----------------- 888 ----------------
SUCCESS
SUCCESS
----------------- 889 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 890 ----------------
SUCCESS
SUCCESS
----------------- 891 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 892 ----------------
SUCCESS
SUCCESS
----------------- 893 ----------------
SUCCESS
----------------- 894 ----------------
SUCCESS
----------------- 895 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 896 ----------------
SUCCESS
----------------- 897 ----------------
SUCCESS
SUCCESS
----------------- 898 ----------------
SUCCESS
----------------- 899 ----------------
SUCCESS
SUCCESS
----------------- 900 ----------------
SUCCESS
SUCCESS
----------------- 901 ----------------
SUCCESS
SUCCESS
----------------- 902 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 903 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 904 ----------------
SUCCESS
SUCCESS
----------------- 905 ----------------
SUCCESS
----------------- 906 ----------------
SUCCESS
SUCCESS
----------------- 907 ----------------
SUCCESS
----------------- 908 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 909 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 910 ----------------
SUCCESS
SUCCESS
----------------- 911 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 912 ----------------
SUCCESS
----------------- 913 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 914 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 915 ----------------
SUCCESS
----------------- 916 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 917 ----------------
SUCCESS
SUCCESS
----------------- 918 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 919 ----------------
SUCCESS
----------------- 920 ----------------
SUCCESS
----------------- 921 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 922 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 923 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 924 ----------------
SUCCESS
----------------- 925 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 926 ----------------
SUCCESS
SUCCESS
----------------- 927 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 928 ----------------
SUCCESS
SUCCESS
----------------- 929 ----------------
SUCCESS
SUCCESS
----------------- 930 ----------------
SUCCESS
SUCCESS
----------------- 931 ----------------
SUCCESS
SUCCESS
----------------- 932 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 933 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 934 ----------------
SUCCESS
SUCCESS
----------------- 935 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 936 ----------------
SUCCESS
SUCCESS
----------------- 937 ----------------
SUCCESS
SUCCESS
----------------- 938 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 939 ----------------
SUCCESS
----------------- 940 ----------------
SUCCESS
SUCCESS
----------------- 941 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 942 ----------------
SUCCESS
----------------- 943 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 944 ----------------
SUCCESS
----------------- 945 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 946 ----------------
SUCCESS
SUCCESS
----------------- 947 ----------------
SUCCESS
----------------- 948 ----------------
SUCCESS
----------------- 949 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 950 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 951 ----------------
SUCCESS
SUCCESS
----------------- 952 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 953 ----------------
SUCCESS
----------------- 954 ----------------
SUCCESS
----------------- 955 ----------------
SUCCESS
----------------- 956 ----------------
SUCCESS
----------------- 957 ----------------
SUCCESS
SUCCESS
----------------- 958 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 959 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 960 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 961 ----------------
SUCCESS
----------------- 962 ----------------
SUCCESS
----------------- 963 ----------------
SUCCESS
SUCCESS
----------------- 964 ----------------
SUCCESS
----------------- 965 ----------------
SUCCESS
SUCCESS
----------------- 966 ----------------
SUCCESS
SUCCESS
----------------- 967 ----------------
SUCCESS
----------------- 968 ----------------
SUCCESS
----------------- 969 ----------------
SUCCESS
----------------- 970 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 971 ----------------
SUCCESS
SUCCESS
----------------- 972 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 973 ----------------
SUCCESS
----------------- 974 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 975 ----------------
SUCCESS
----------------- 976 ----------------
SUCCESS
----------------- 977 ----------------
SUCCESS
SUCCESS
----------------- 978 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 979 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 980 ----------------
SUCCESS
----------------- 981 ----------------
SUCCESS
----------------- 982 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 983 ----------------
SUCCESS
SUCCESS
----------------- 984 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 985 ----------------
SUCCESS
SUCCESS
----------------- 986 ----------------
SUCCESS
----------------- 987 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 988 ----------------
SUCCESS
----------------- 989 ----------------
SUCCESS
----------------- 990 ----------------
SUCCESS
----------------- 991 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 992 ----------------
SUCCESS
SUCCESS
----------------- 993 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 994 ----------------
SUCCESS
----------------- 995 ----------------
SUCCESS
SUCCESS
----------------- 996 ----------------
SUCCESS
SUCCESS
----------------- 997 ----------------
SUCCESS
SUCCESS
----------------- 998 ----------------
SUCCESS
SUCCESS
SUCCESS
----------------- 999 ----------------
SUCCESS
SUCCESS
SUCCESS
File 'dominion.c'
Lines executed:38.80% of 567
Branches executed:37.17% of 417
Taken at least once:29.98% of 417
Calls executed:33.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:44
        -:    0:Programs:10
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 6365808 returned 100% blocks executed 100%
  6365808:    8:int compare(const void* a, const void* b) {
  6365808:    8-block  0
  6365808:    9:  if (*(int*)a > *(int*)b)
  6365808:    9-block  0
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
   850546:   10:    return 1;
   850546:   10-block  0
  5515262:   11:  if (*(int*)a < *(int*)b)
  5515262:   11-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
    54002:   12:    return -1;
    54002:   12-block  0
  5461260:   13:  return 0;
  5461260:   13-block  0
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    $$$$$:   16-block  0
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
    $$$$$:   18-block  0
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   21-block  0
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
        -:   35:}
        -:   36:
function initializeGame called 4125 returned 100% blocks executed 94%
     4125:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
     4125:   37-block  0
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     4125:   44:  SelectStream(1);
     4125:   44-block  0
call    0 returned 100%
     4125:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     4125:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     4125:   48-block  0
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
    $$$$$:   50-block  0
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     4125:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    45375:   57:  for (i = 0; i < 10; i++)
     4125:   57-block  0
    41250:   57-block  1
    45375:   57-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   453750:   59:      for (j = 0; j < 10; j++)
    41250:   59-block  0
   412500:   59-block  1
   453750:   59-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   412500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
   412500:   61-block  0
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
   371250:   61-block  1
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
    $$$$$:   63-block  0
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     4125:   73:  if (numPlayers == 2)
     4125:   73-block  0
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        -:   74:    {
     1461:   75:      state->supplyCount[curse] = 10;
     1461:   75-block  0
        -:   76:    }
     2664:   77:  else if (numPlayers == 3)
     2664:   77-block  0
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
        -:   78:    {
     1309:   79:      state->supplyCount[curse] = 20;
     1309:   79-block  0
        -:   80:    }
        -:   81:  else
        -:   82:    {
     1355:   83:      state->supplyCount[curse] = 30;
     1355:   83-block  0
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     4125:   87:  if (numPlayers == 2)
     4125:   87-block  0
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        -:   88:    {
     1461:   89:      state->supplyCount[estate] = 8;
     1461:   90:      state->supplyCount[duchy] = 8;
     1461:   91:      state->supplyCount[province] = 8;
     1461:   91-block  0
        -:   92:    }
        -:   93:  else
        -:   94:    {
     2664:   95:      state->supplyCount[estate] = 12;
     2664:   96:      state->supplyCount[duchy] = 12;
     2664:   97:      state->supplyCount[province] = 12;
     2664:   97-block  0
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     4125:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     4125:  102:  state->supplyCount[silver] = 40;
     4125:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    86625:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
     4125:  106-block  0
    82500:  106-block  1
    86625:  106-block  2
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   680625:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
    82500:  108-block  0
   598125:  108-block  1
   680625:  108-block  2
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   639375:  110:	  if (kingdomCards[j] == i)
   639375:  110-block  0
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    41250:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
    41250:  113-block  0
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    41165:  113-block  1
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:  114:		{
      340:  115:		  if (numPlayers == 2){ 
      170:  115-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      170:  115-block  1
      170:  116:		    state->supplyCount[i] = 8; 
      170:  116-block  0
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  118-block  0
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    41080:  122:		  state->supplyCount[i] = 10;
    41080:  122-block  0
        -:  123:		}
    41250:  124:	      break;
    41250:  124-block  0
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   598125:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    16394:  138:  for (i = 0; i < numPlayers; i++)
     4125:  138-block  0
    12269:  138-block  1
    16394:  138-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:    {
    12269:  140:      state->deckCount[i] = 0;
    49076:  141:      for (j = 0; j < 3; j++)
    12269:  141-block  0
    36807:  141-block  1
    49076:  141-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
    36807:  143:	  state->deck[i][j] = estate;
    36807:  144:	  state->deckCount[i]++;
        -:  145:	}
    98152:  146:      for (j = 3; j < 10; j++)
    12269:  146-block  0
    85883:  146-block  1
    98152:  146-block  2
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    85883:  148:	  state->deck[i][j] = copper;	  state->deckCount[i]++;		
        -:  149:	}
        -:  150:    }
        -:  151:
        -:  152:  //shuffle player decks
    16394:  153:  for (i = 0; i < numPlayers; i++)
     4125:  153-block  0
    12269:  153-block  1
    16394:  153-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  154:    {
    12269:  155:      if ( shuffle(i, state) < 0 )
    12269:  155-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  156:	{
    #####:  157:	  return -1;
    $$$$$:  157-block  0
        -:  158:	}
        -:  159:    }
        -:  160:
        -:  161:  //draw player hands
    16394:  162:  for (i = 0; i < numPlayers; i++)
     4125:  162-block  0
    12269:  162-block  1
    16394:  162-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  163:    {  
        -:  164:      //initialize hand size to zero
    12269:  165:      state->handCount[i] = 0;
    12269:  166:      state->discardCount[i] = 0;
        -:  167:      //draw 5 cards
        -:  168:      // for (j = 0; j < 5; j++)
        -:  169:      //	{
        -:  170:      //	  drawCard(i, state);
        -:  171:      //	}
        -:  172:    }
        -:  173:  
        -:  174:  //set embargo tokens to 0 for all supply piles
   115500:  175:  for (i = 0; i <= treasure_map; i++)
     4125:  175-block  0
   111375:  175-block  1
   115500:  175-block  2
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  176:    {
   111375:  177:      state->embargoTokens[i] = 0;
        -:  178:    }
        -:  179:
        -:  180:  //initialize first player's turn
     4125:  181:  state->outpostPlayed = 0;
     4125:  182:  state->phase = 0;
     4125:  183:  state->numActions = 1;
     4125:  184:  state->numBuys = 1;
     4125:  185:  state->playedCardCount = 0;
     4125:  186:  state->whoseTurn = 0;
     4125:  187:  state->handCount[state->whoseTurn] = 0;
        -:  188:  //int it; move to top
        -:  189:
        -:  190:  //Moved draw cards to here, only drawing at the start of a turn
    24750:  191:  for (it = 0; it < 5; it++){
     4125:  191-block  0
    24750:  191-block  1
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    20625:  192:    drawCard(state->whoseTurn, state);
    20625:  192-block  0
call    0 returned 100%
        -:  193:  }
        -:  194:
     4125:  195:  updateCoins(state->whoseTurn, state, 0);
     4125:  195-block  0
call    0 returned 100%
        -:  196:
     4125:  197:  return 0;
        -:  198:}
        -:  199:
function shuffle called 1196890 returned 100% blocks executed 100%
  1196890:  200:int shuffle(int player, struct gameState *state) {
  1196890:  200-block  0
        -:  201: 
        -:  202:
        -:  203:  int newDeck[MAX_DECK];
  1196890:  204:  int newDeckPos = 0;
        -:  205:  int card;
        -:  206:  int i;
        -:  207:
  1196890:  208:  if (state->deckCount[player] < 1)
  1196890:  208-block  0
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
  1179343:  209:    return -1;
  1179343:  209-block  0
    17547:  210:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
    17547:  210-block  0
call    0 returned 100%
        -:  211:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  212:
  1484790:  213:  while (state->deckCount[player] > 0) {
  1484790:  213-block  0
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  1467243:  214:    card = floor(Random() * state->deckCount[player]);
  1467243:  214-block  0
call    0 returned 100%
  1467243:  215:    newDeck[newDeckPos] = state->deck[player][card];
  1467243:  216:    newDeckPos++;
114888833:  217:    for (i = card; i < state->deckCount[player]-1; i++) {
113421590:  217-block  0
114888833:  217-block  1
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
113421590:  218:      state->deck[player][i] = state->deck[player][i+1];
        -:  219:    }
  1467243:  220:    state->deckCount[player]--;
  1467243:  220-block  0
        -:  221:  }
  1484790:  222:  for (i = 0; i < newDeckPos; i++) {
    17547:  222-block  0
  1467243:  222-block  1
  1484790:  222-block  2
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  1467243:  223:    state->deck[player][i] = newDeck[i];
  1467243:  224:    state->deckCount[player]++;
        -:  225:  }
        -:  226:
  1196890:  227:  return 0;
    17547:  227-block  0
  1196890:  227-block  1
        -:  228:}
        -:  229:
function playCard called 0 returned 0% blocks executed 0%
    #####:  230:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
    $$$$$:  230-block  0
        -:  231:{	
        -:  232:  int card;
    #####:  233:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  234:
        -:  235:  //check if it is the right phase
    #####:  236:  if (state->phase != 0)
    $$$$$:  236-block  0
branch  0 never executed
branch  1 never executed
        -:  237:    {
    #####:  238:      return -1;
    $$$$$:  238-block  0
        -:  239:    }
        -:  240:	
        -:  241:  //check if player has enough actions
    #####:  242:  if ( state->numActions < 1 )
    $$$$$:  242-block  0
branch  0 never executed
branch  1 never executed
        -:  243:    {
    #####:  244:      return -1;
    $$$$$:  244-block  0
        -:  245:    }
        -:  246:	
        -:  247:  //get card played
    #####:  248:  card = handCard(handPos, state);
    $$$$$:  248-block  0
call    0 never executed
        -:  249:	
        -:  250:  //check if selected card is an action
    #####:  251:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  251-block  0
branch  2 never executed
branch  3 never executed
        -:  252:    {
    #####:  253:      return -1;
    $$$$$:  253-block  0
        -:  254:    }
        -:  255:	
        -:  256:  //play card
    #####:  257:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  257-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  258:    {
    #####:  259:      return -1;
    $$$$$:  259-block  0
        -:  260:    }
        -:  261:	
        -:  262:  //reduce number of actions
    #####:  263:  state->numActions--;
        -:  264:
        -:  265:  //update coins (Treasure cards may be added with card draws)
    #####:  266:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  266-block  0
call    0 never executed
        -:  267:	
    #####:  268:  return 0;
    $$$$$:  268-block  0
        -:  269:}
        -:  270:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  271:int buyCard(int supplyPos, struct gameState *state) {
    $$$$$:  271-block  0
    $$$$$:  271-block  1
        -:  272:  int who;
        -:  273:  if (DEBUG){
        -:  274:    printf("Entering buyCard...\n");
        -:  275:  }
        -:  276:
        -:  277:  // I don't know what to do about the phase thing.
        -:  278:
    #####:  279:  who = state->whoseTurn;
        -:  280:
    #####:  281:  if (state->numBuys < 1){
    $$$$$:  281-block  0
branch  0 never executed
branch  1 never executed
        -:  282:    if (DEBUG)
        -:  283:      printf("You do not have any buys left\n");
    #####:  284:    return -1;
    $$$$$:  284-block  0
    #####:  285:  } else if (supplyCount(supplyPos, state) <1){
    $$$$$:  285-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  286:    if (DEBUG)
        -:  287:      printf("There are not any of that type of card left\n");
    #####:  288:    return -1;
    $$$$$:  288-block  0
    #####:  289:  } else if (state->coins < getCost(supplyPos)){
    $$$$$:  289-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  290:    if (DEBUG) 
        -:  291:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  292:    return -1;
    $$$$$:  292-block  0
        -:  293:  } else {
    #####:  294:    state->phase=1;
        -:  295:    //state->supplyCount[supplyPos]--;
    #####:  296:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
    $$$$$:  296-block  0
call    0 never executed
        -:  297:  
    #####:  298:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  299:    state->numBuys--;
        -:  300:    if (DEBUG)
        -:  301:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  302:  }
        -:  303:
        -:  304:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  305:  //state->discardCount[who]++;
        -:  306:    
    #####:  307:  return 0;
    $$$$$:  307-block  0
        -:  308:}
        -:  309:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  310:int numHandCards(struct gameState *state) {
    $$$$$:  310-block  0
    #####:  311:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  311-block  0
call    0 never executed
        -:  312:}
        -:  313:
function handCard called 0 returned 0% blocks executed 0%
    #####:  314:int handCard(int handPos, struct gameState *state) {
    $$$$$:  314-block  0
    #####:  315:  int currentPlayer = whoseTurn(state);
    $$$$$:  315-block  0
call    0 never executed
    #####:  316:  return state->hand[currentPlayer][handPos];
        -:  317:}
        -:  318:
function supplyCount called 6050 returned 100% blocks executed 100%
     6050:  319:int supplyCount(int card, struct gameState *state) {
     6050:  319-block  0
     6050:  320:  return state->supplyCount[card];
     6050:  320-block  0
        -:  321:}
        -:  322:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  323:int fullDeckCount(int player, int card, struct gameState *state) {
    $$$$$:  323-block  0
        -:  324:  int i;
    #####:  325:  int count = 0;
        -:  326:
    #####:  327:  for (i = 0; i < state->deckCount[player]; i++)
    $$$$$:  327-block  0
    $$$$$:  327-block  1
    $$$$$:  327-block  2
branch  0 never executed
branch  1 never executed
        -:  328:    {
    #####:  329:      if (state->deck[player][i] == card) count++;
    $$$$$:  329-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  329-block  1
        -:  330:    }
        -:  331:
    #####:  332:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  332-block  0
    $$$$$:  332-block  1
    $$$$$:  332-block  2
branch  0 never executed
branch  1 never executed
        -:  333:    {
    #####:  334:      if (state->hand[player][i] == card) count++;
    $$$$$:  334-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  334-block  1
        -:  335:    }
        -:  336:
    #####:  337:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  337-block  0
    $$$$$:  337-block  1
    $$$$$:  337-block  2
branch  0 never executed
branch  1 never executed
        -:  338:    {
    #####:  339:      if (state->discard[player][i] == card) count++;
    $$$$$:  339-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  339-block  1
        -:  340:    }
        -:  341:
    #####:  342:  return count;
    $$$$$:  342-block  0
        -:  343:}
        -:  344:
function whoseTurn called 8070 returned 100% blocks executed 100%
     8070:  345:int whoseTurn(struct gameState *state) {
     8070:  345-block  0
     8070:  346:  return state->whoseTurn;
     8070:  346-block  0
        -:  347:}
        -:  348:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  349:int endTurn(struct gameState *state) {
    $$$$$:  349-block  0
        -:  350:  int k;
        -:  351:  int i;
    #####:  352:  int currentPlayer = whoseTurn(state);
    $$$$$:  352-block  0
call    0 never executed
        -:  353:  
        -:  354:  //Discard hand
    #####:  355:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  355-block  0
    $$$$$:  355-block  1
branch  0 never executed
branch  1 never executed
    #####:  356:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  357:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  358:  }
    #####:  359:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  360:    
        -:  361:  //Code for determining the player
    #####:  362:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  362-block  0
branch  0 never executed
branch  1 never executed
    #####:  363:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  363-block  0
        -:  364:  }
        -:  365:  else{
    #####:  366:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  366-block  0
        -:  367:  }
        -:  368:
    #####:  369:  state->outpostPlayed = 0;
    #####:  370:  state->phase = 0;
    #####:  371:  state->numActions = 1;
    #####:  372:  state->coins = 0;
    #####:  373:  state->numBuys = 1;
    #####:  374:  state->playedCardCount = 0;
    #####:  375:  state->handCount[state->whoseTurn] = 0;
        -:  376:
        -:  377:  //int k; move to top
        -:  378:  //Next player draws hand
    #####:  379:  for (k = 0; k < 5; k++){
    $$$$$:  379-block  0
    $$$$$:  379-block  1
branch  0 never executed
branch  1 never executed
    #####:  380:    drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  380-block  0
call    0 never executed
        -:  381:  }
        -:  382:
        -:  383:  //Update money
    #####:  384:  updateCoins(state->whoseTurn, state , 0);
    $$$$$:  384-block  0
call    0 never executed
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  389:int isGameOver(struct gameState *state) {
    $$$$$:  389-block  0
        -:  390:  int i;
        -:  391:  int j;
        -:  392:	
        -:  393:  //if stack of Province cards is empty, the game ends
    #####:  394:  if (state->supplyCount[province] == 0)
    $$$$$:  394-block  0
branch  0 never executed
branch  1 never executed
        -:  395:    {
    #####:  396:      return 1;
    $$$$$:  396-block  0
        -:  397:    }
        -:  398:
        -:  399:  //if three supply pile are at 0, the game ends
    #####:  400:  j = 0;
    #####:  401:  for (i = 0; i < 25; i++)
    $$$$$:  401-block  0
    $$$$$:  401-block  1
    $$$$$:  401-block  2
branch  0 never executed
branch  1 never executed
        -:  402:    {
    #####:  403:      if (state->supplyCount[i] == 0)
    $$$$$:  403-block  0
branch  0 never executed
branch  1 never executed
        -:  404:	{
    #####:  405:	  j++;
    $$$$$:  405-block  0
        -:  406:	}
        -:  407:    }
    #####:  408:  if ( j >= 3)
    $$$$$:  408-block  0
branch  0 never executed
branch  1 never executed
        -:  409:    {
    #####:  410:      return 1;
    $$$$$:  410-block  0
        -:  411:    }
        -:  412:
    #####:  413:  return 0;
    $$$$$:  413-block  0
        -:  414:}
        -:  415:
function scoreFor called 25 returned 100% blocks executed 38%
       25:  416:int scoreFor (int player, struct gameState *state) {
       25:  416-block  0
        -:  417:
        -:  418:  int i;
       25:  419:  int score = 0;
        -:  420:  //score from hand
      150:  421:  for (i = 0; i < state->handCount[player]; i++)
       25:  421-block  0
      125:  421-block  1
      150:  421-block  2
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  422:    {
      125:  423:      if (state->hand[player][i] == curse) { score = score - 1; };
      125:  423-block  0
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
       25:  423-block  1
      125:  424:      if (state->hand[player][i] == estate) { score = score + 1; };
      125:  424-block  0
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        5:  424-block  1
      125:  425:      if (state->hand[player][i] == duchy) { score = score + 3; };
      125:  425-block  0
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        5:  425-block  1
      125:  426:      if (state->hand[player][i] == province) { score = score + 6; };
      125:  426-block  0
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        5:  426-block  1
      125:  427:      if (state->hand[player][i] == great_hall) { score = score + 1; };
      125:  427-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    $$$$$:  427-block  1
      125:  428:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
      125:  428-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    $$$$$:  428-block  1
call    2 never executed
        -:  429:    }
        -:  430:
        -:  431:  //score from discard
       25:  432:  for (i = 0; i < state->discardCount[player]; i++)
       25:  432-block  0
    $$$$$:  432-block  1
       25:  432-block  2
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  433:    {
    #####:  434:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  434-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  434-block  1
    #####:  435:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
    #####:  436:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
    #####:  437:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
    #####:  438:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
    #####:  439:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
call    2 never executed
        -:  440:    }
        -:  441:
        -:  442:  //score from deck
       25:  443:  for (i = 0; i < state->discardCount[player]; i++)
       25:  443-block  0
    $$$$$:  443-block  1
       25:  443-block  2
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  444:    {
    #####:  445:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  445-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  445-block  1
    #####:  446:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
    #####:  447:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
    #####:  448:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
    #####:  449:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
    #####:  450:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
call    2 never executed
        -:  451:    }
        -:  452:
       25:  453:  return score;
       25:  453-block  0
        -:  454:}
        -:  455:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  456:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  456-block  0
        -:  457:  int i;	
        -:  458:  int j;
        -:  459:  int highScore;
        -:  460:  int currentPlayer;
        -:  461:
        -:  462:  //get score for each player
    #####:  463:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  463-block  0
    $$$$$:  463-block  1
    $$$$$:  463-block  2
branch  0 never executed
branch  1 never executed
        -:  464:    {
        -:  465:      //set unused player scores to -9999
    #####:  466:      if (i >= state->numPlayers)
    $$$$$:  466-block  0
branch  0 never executed
branch  1 never executed
        -:  467:	{
    #####:  468:	  players[i] = -9999;
    $$$$$:  468-block  0
        -:  469:	}
        -:  470:      else
        -:  471:	{
    #####:  472:	  players[i] = scoreFor (i, state);
    $$$$$:  472-block  0
call    0 never executed
        -:  473:	}
        -:  474:    }
        -:  475:
        -:  476:  //find highest score
    #####:  477:  j = 0;
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  478-block  0
    $$$$$:  478-block  1
    $$$$$:  478-block  2
branch  0 never executed
branch  1 never executed
        -:  479:    {
    #####:  480:      if (players[i] > players[j])
    $$$$$:  480-block  0
branch  0 never executed
branch  1 never executed
        -:  481:	{
    #####:  482:	  j = i;
    $$$$$:  482-block  0
        -:  483:	}
        -:  484:    }
    #####:  485:  highScore = players[j];
        -:  486:
        -:  487:  //add 1 to players who had less turns
    #####:  488:  currentPlayer = whoseTurn(state);
    $$$$$:  488-block  0
call    0 never executed
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  489-block  0
    $$$$$:  489-block  1
branch  0 never executed
branch  1 never executed
        -:  490:    {
    #####:  491:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  491-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  491-block  1
branch  2 never executed
branch  3 never executed
        -:  492:	{
    #####:  493:	  players[i]++;
    $$$$$:  493-block  0
        -:  494:	}
        -:  495:    }
        -:  496:
        -:  497:  //find new highest score
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  499-block  0
    $$$$$:  499-block  1
    $$$$$:  499-block  2
branch  0 never executed
branch  1 never executed
        -:  500:    {
    #####:  501:      if ( players[i] > players[j] )
    $$$$$:  501-block  0
branch  0 never executed
branch  1 never executed
        -:  502:	{
    #####:  503:	  j = i;
    $$$$$:  503-block  0
        -:  504:	}
        -:  505:    }
    #####:  506:  highScore = players[j];
        -:  507:
        -:  508:  //set winners in array to 1 and rest to 0
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  509-block  0
    $$$$$:  509-block  1
    $$$$$:  509-block  2
branch  0 never executed
branch  1 never executed
        -:  510:    {
    #####:  511:      if ( players[i] == highScore )
    $$$$$:  511-block  0
branch  0 never executed
branch  1 never executed
        -:  512:	{
    #####:  513:	  players[i] = 1;
    $$$$$:  513-block  0
        -:  514:	}
        -:  515:      else
        -:  516:	{
    #####:  517:	  players[i] = 0;
    $$$$$:  517-block  0
        -:  518:	}
        -:  519:    }
        -:  520:
    #####:  521:  return 0;
    $$$$$:  521-block  0
        -:  522:}
        -:  523:
function drawCard called 2143355 returned 100% blocks executed 100%
  2143355:  524:int drawCard(int player, struct gameState *state)
  2143355:  524-block  0
        -:  525:{	int count;
        -:  526:  int deckCounter;
  2143355:  527:  if (state->deckCount[player] <= 0){//Deck is empty
  2143355:  527-block  0
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
        -:  528:    
        -:  529:    //Step 1 Shuffle the discard pile back into a deck
        -:  530:    int i;
        -:  531:    //Move discard to deck
  1939145:  532:    for (i = 0; i < state->discardCount[player];i++){
   594592:  532-block  0
  1344553:  532-block  1
  1939145:  532-block  2
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
  1344553:  533:      state->deck[player][i] = state->discard[player][i];
  1344553:  534:      state->discard[player][i] = -1;
        -:  535:    }
        -:  536:
   594592:  537:    state->deckCount[player] = state->discardCount[player];
   594592:  538:    state->discardCount[player] = 0;//Reset discard
        -:  539:
        -:  540:    //Shufffle the deck
   594592:  541:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
   594592:  541-block  0
call    0 returned 100%
        -:  542:   
        -:  543:    if (DEBUG){//Debug statements
        -:  544:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  545:    }
        -:  546:    
   594592:  547:    state->discardCount[player] = 0;
        -:  548:
        -:  549:    //Step 2 Draw Card
   594592:  550:    count = state->handCount[player];//Get current player's hand count
        -:  551:    
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Current hand count: %d\n", count);
        -:  554:    }
        -:  555:    
   594592:  556:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  557:
   594592:  558:    if (deckCounter == 0)
   594592:  558-block  0
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
   589314:  559:      return -1;
   589314:  559-block  0
        -:  560:
     5278:  561:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     5278:  562:    state->deckCount[player]--;
     5278:  563:    state->handCount[player]++;//Increment hand count
     5278:  563-block  0
        -:  564:  }
        -:  565:
        -:  566:  else{
  1548763:  567:    int count = state->handCount[player];//Get current hand count for player
  1548763:  567-block  0
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
  1548763:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
  1548763:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  1548763:  575:    state->deckCount[player]--;
  1548763:  576:    state->handCount[player]++;//Increment hand count
  1548763:  576-block  0
        -:  577:  }
        -:  578:
  1554041:  579:  return 0;
  1554041:  579-block  0
        -:  580:}
        -:  581:
function getCost called 0 returned 0% blocks executed 0%
    #####:  582:int getCost(int cardNumber)
    $$$$$:  582-block  0
        -:  583:{
    #####:  584:  switch( cardNumber ) 
    $$$$$:  584-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  585:    {
        -:  586:    case curse:
    #####:  587:      return 0;
    $$$$$:  587-block  0
        -:  588:    case estate:
    #####:  589:      return 2;
    $$$$$:  589-block  0
        -:  590:    case duchy:
    #####:  591:      return 5;
    $$$$$:  591-block  0
        -:  592:    case province:
    #####:  593:      return 8;
    $$$$$:  593-block  0
        -:  594:    case copper:
    #####:  595:      return 0;
    $$$$$:  595-block  0
        -:  596:    case silver:
    #####:  597:      return 3;
    $$$$$:  597-block  0
        -:  598:    case gold:
    #####:  599:      return 6;
    $$$$$:  599-block  0
        -:  600:    case adventurer:
    #####:  601:      return 6;
    $$$$$:  601-block  0
        -:  602:    case council_room:
    #####:  603:      return 5;
    $$$$$:  603-block  0
        -:  604:    case feast:
    #####:  605:      return 4;
    $$$$$:  605-block  0
        -:  606:    case gardens:
    #####:  607:      return 4;
    $$$$$:  607-block  0
        -:  608:    case mine:
    #####:  609:      return 5;
    $$$$$:  609-block  0
        -:  610:    case remodel:
    #####:  611:      return 4;
    $$$$$:  611-block  0
        -:  612:    case smithy:
    #####:  613:      return 4;
    $$$$$:  613-block  0
        -:  614:    case village:
    #####:  615:      return 3;
    $$$$$:  615-block  0
        -:  616:    case baron:
    #####:  617:      return 4;
    $$$$$:  617-block  0
        -:  618:    case great_hall:
    #####:  619:      return 3;
    $$$$$:  619-block  0
        -:  620:    case minion:
    #####:  621:      return 5;
    $$$$$:  621-block  0
        -:  622:    case steward:
    #####:  623:      return 3;
    $$$$$:  623-block  0
        -:  624:    case tribute:
    #####:  625:      return 5;
    $$$$$:  625-block  0
        -:  626:    case ambassador:
    #####:  627:      return 3;
    $$$$$:  627-block  0
        -:  628:    case cutpurse:
    #####:  629:      return 4;
    $$$$$:  629-block  0
        -:  630:    case embargo: 
    #####:  631:      return 2;
    $$$$$:  631-block  0
        -:  632:    case outpost:
    #####:  633:      return 5;
    $$$$$:  633-block  0
        -:  634:    case salvager:
    #####:  635:      return 4;
    $$$$$:  635-block  0
        -:  636:    case sea_hag:
    #####:  637:      return 4;
    $$$$$:  637-block  0
        -:  638:    case treasure_map:
    #####:  639:      return 4;
    $$$$$:  639-block  0
        -:  640:    }
        -:  641:	
    #####:  642:  return -1;
    $$$$$:  642-block  0
        -:  643:}
        -:  644:
        -:  645:/****************************************************************************************************
        -:  646:* Start of card functions
        -:  647:*****************************************************************************************************/
        -:  648:
function playSmithy called 5 returned 100% blocks executed 100%
        5:  649:int playSmithy(struct gameState *state, int handPos) {
        5:  649-block  0
        -:  650:	//+3 Cards
        5:  651:	int currentPlayer = whoseTurn(state);
        5:  651-block  0
call    0 returned 100%
        -:  652:	int i;
       25:  653:    for (i = 0; i <= 3; i++)
       25:  653-block  0
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  654:	{
       20:  655:		drawCard(currentPlayer, state);
       20:  655-block  0
call    0 returned 100%
        -:  656:	}
        -:  657:			
        -:  658:	//discard card from hand
        5:  659:	discardCard(handPos, currentPlayer, state, 1);
        5:  659-block  0
call    0 returned 100%
        5:  660:	return 0;
        -:  661:}
        -:  662:
function playAdventurer called 2015 returned 100% blocks executed 100%
     2015:  663:int playAdventurer(struct gameState *state) {
     2015:  663-block  0
     2015:  664:	int currentPlayer = whoseTurn(state);
     2015:  664-block  0
call    0 returned 100%
     2015:  665:	int drawntreasure =0;
        -:  666:	int cardDrawn;
        -:  667:	int temphand[MAX_HAND]; 
     2015:  668:	int z = 0;
        -:  669:
  2110611:  670:	while(drawntreasure<2){
  2110611:  670-block  0
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  2108596:  671:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
  2108596:  671-block  0
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
   590029:  672:		  shuffle(currentPlayer, state);
   590029:  672-block  0
call    0 returned 100%
        -:  673:		}
  2108596:  674:		drawCard(currentPlayer, state);
  2108596:  674-block  0
call    0 returned 100%
  2108596:  675:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-2];//top card of hand is most recently drawn card.
  2108596:  676:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
  2104640:  676-block  0
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
  2104596:  676-block  1
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
     4030:  677:		  drawntreasure++;
     4030:  677-block  0
        -:  678:    }
        -:  679:		else{
  2104566:  680:      z++;
  2104566:  681:		  temphand[z]=cardDrawn;
  2104566:  682:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
  2104566:  682-block  0
        -:  683:    }
        -:  684:  }
   519828:  685:  while(z>=0){
     2015:  685-block  0
   519828:  685-block  1
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   517813:  686:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
   517813:  687:    z=z-1;
   517813:  687-block  0
        -:  688:  }
     2015:  689:  return 0;
     2015:  689-block  0
        -:  690:}
        -:  691:
function playMine called 0 returned 0% blocks executed 0%
    #####:  692:int playMine(struct gameState *state, int choice1, int choice2, int handPos) {
    $$$$$:  692-block  0
    #####:  693:	int currentPlayer = whoseTurn(state);
    $$$$$:  693-block  0
call    0 never executed
        -:  694:	int i, j;
    #####:  695:	int z = 0;
    #####:  696:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  697:
    #####:  698:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
    $$$$$:  698-block  0
branch  2 never executed
branch  3 never executed
        -:  699:	{
    #####:  700:	  return -1;
    $$$$$:  700-block  0
        -:  701:	}
        -:  702:
    #####:  703:	if (choice2 > z || choice2 < curse)
    $$$$$:  703-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  703-block  1
branch  2 never executed
branch  3 never executed
        -:  704:	{
    #####:  705:		return -1;
    $$$$$:  705-block  0
        -:  706:	}
        -:  707:
    #####:  708:	if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  708-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  709:	{
    #####:  710:		return -1;
    $$$$$:  710-block  0
        -:  711:	}
        -:  712:
    #####:  713:	gainCard(choice1, state, 2, currentPlayer);
    $$$$$:  713-block  0
call    0 never executed
        -:  714:
        -:  715:	//discard card from hand
    #####:  716:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  717:
        -:  718:	//discard trashed card
    #####:  719:	for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  719-block  0
    $$$$$:  719-block  1
branch  0 never executed
branch  1 never executed
        -:  720:	{
    #####:  721:		if (state->hand[currentPlayer][i] == j)
    $$$$$:  721-block  0
branch  0 never executed
branch  1 never executed
        -:  722:		{
    #####:  723:			discardCard(i, currentPlayer, state, 0);			
    $$$$$:  723-block  0
call    0 never executed
    #####:  724:			break;
        -:  725:		}
        -:  726:	}
        -:  727:		
    #####:  728:	return 0;
    $$$$$:  728-block  0
        -:  729:}
        -:  730:
function playVillage called 2010 returned 100% blocks executed 100%
     2010:  731:int playVillage(struct gameState *state, int handPos) {
     2010:  731-block  0
     2010:  732:	int currentPlayer = whoseTurn(state);
     2010:  732-block  0
call    0 returned 100%
        -:  733:
        -:  734:	//+1 Card
     2010:  735:	drawCard(currentPlayer, state);
call    0 returned 100%
        -:  736:
        -:  737:	//+2 Actions
     2010:  738:	state->numActions = state->numActions + 2;
        -:  739:
        -:  740:	//discard played card from hand
     2010:  741:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     2010:  742:	return 0;
        -:  743:}
        -:  744:
function playRemodel called 0 returned 0% blocks executed 0%
    #####:  745:int playRemodel(struct gameState *state, int choice1, int choice2, int handPos) {
    $$$$$:  745-block  0
        -:  746:	int i, j;
    #####:  747:	int currentPlayer = whoseTurn(state);
    $$$$$:  747-block  0
call    0 never executed
        -:  748: 
        -:  749:
    #####:  750:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  751:
    #####:  752:	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  753:	{
    #####:  754:		return -1;
    $$$$$:  754-block  0
        -:  755:	}
        -:  756:
    #####:  757:	gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  757-block  0
call    0 never executed
        -:  758:
        -:  759:	//discard card from hand
    #####:  760:	discardCard(handPos+1, currentPlayer, state, 0);
call    0 never executed
        -:  761:
        -:  762:	//discard trashed card
    #####:  763:	for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  763-block  0
    $$$$$:  763-block  1
branch  0 never executed
branch  1 never executed
        -:  764:		{
    #####:  765:		if (state->hand[currentPlayer][i] == j)
    $$$$$:  765-block  0
branch  0 never executed
branch  1 never executed
        -:  766:		{
    #####:  767:			discardCard(i+1, currentPlayer, state, 0);			
    $$$$$:  767-block  0
call    0 never executed
    #####:  768:			break;
        -:  769:		}
        -:  770:	}
        -:  771:
    #####:  772:	return 0;
    $$$$$:  772-block  0
        -:  773:}
        -:  774:
function cardEffect called 4040 returned 100% blocks executed 17%
     4040:  775:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
     4040:  775-block  0
        -:  776:{
        -:  777:  int i;
        -:  778:  int j;
        -:  779:  int k;
        -:  780:  int x;
        -:  781:  int index;
     4040:  782:  int currentPlayer = whoseTurn(state);
     4040:  782-block  0
call    0 returned 100%
     4040:  783:  int nextPlayer = currentPlayer + 1;
        -:  784:
     4040:  785:  int tributeRevealedCards[2] = {-1, -1};
        -:  786:  int temphand[MAX_HAND];// moved above the if statement
     4040:  787:  int drawntreasure=0;
        -:  788:  int cardDrawn;
     4040:  789:  int z = 0;// this is the counter for the temp hand
     4040:  790:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
     1400:  791:    nextPlayer = 0;
     1400:  791-block  0
        -:  792:  }
        -:  793:  
        -:  794:	
        -:  795:  //uses switch to select card and perform actions
     4040:  796:  switch( card ) 
     4040:  796-block  0
branch  0 taken 50%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 1%
branch  7 taken 50%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 1%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  797:    {
        -:  798:    case adventurer:
     2015:  799:      playAdventurer(state);
     2015:  799-block  0
call    0 returned 100%
        -:  800:			
        -:  801:    case council_room:
        -:  802:      //+4 Cards
    10075:  803:      for (i = 0; i < 4; i++)
     2015:  803-block  0
    10075:  803-block  1
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  804:	{
     8060:  805:	  drawCard(currentPlayer, state);
     8060:  805-block  0
call    0 returned 100%
        -:  806:	}
        -:  807:			
        -:  808:      //+1 Buy
     2015:  809:      state->numBuys++;
        -:  810:			
        -:  811:      //Each other player draws a card
     8064:  812:      for (i = 0; i < state->numPlayers; i++)
     2015:  812-block  0
     6049:  812-block  1
     8064:  812-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  813:	{
     6049:  814:	  if ( i != currentPlayer )
     6049:  814-block  0
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  815:	    {
     4034:  816:	      drawCard(i, state);
     4034:  816-block  0
call    0 returned 100%
        -:  817:	    }
        -:  818:	}
        -:  819:			
        -:  820:      //put played card in played card pile
     2015:  821:      discardCard(handPos, currentPlayer, state, 0);
     2015:  821-block  0
call    0 returned 100%
        -:  822:			
     2015:  823:      return 0;
        -:  824:			
        -:  825:    case feast:
        -:  826:      //gain card with cost up to 5
        -:  827:      //Backup hand
    #####:  828:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  828-block  0
    $$$$$:  828-block  1
    $$$$$:  828-block  2
branch  0 never executed
branch  1 never executed
    #####:  829:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  830:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  831:      }
        -:  832:      //Backup hand
        -:  833:
        -:  834:      //Update Coins for Buy
    #####:  835:      updateCoins(currentPlayer, state, 5);
    $$$$$:  835-block  0
call    0 never executed
    #####:  836:      x = 1;//Condition to loop on
    #####:  837:      while( x == 1) {//Buy one card
    $$$$$:  837-block  0
branch  0 never executed
branch  1 never executed
    #####:  838:	if (supplyCount(choice1, state) <= 0){
    $$$$$:  838-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  839:	  if (DEBUG)
        -:  840:	    printf("None of that card left, sorry!\n");
        -:  841:
        -:  842:	  if (DEBUG){
        -:  843:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  844:	  }
        -:  845:	}
    #####:  846:	else if (state->coins < getCost(choice1)){
    $$$$$:  846-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  847:	  printf("That card is too expensive!\n");
    $$$$$:  847-block  0
call    0 never executed
        -:  848:
        -:  849:	  if (DEBUG){
        -:  850:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  851:	  }
        -:  852:	}
        -:  853:	else{
        -:  854:
        -:  855:	  if (DEBUG){
        -:  856:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  857:	  }
        -:  858:
    #####:  859:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  859-block  0
call    0 never executed
    #####:  860:	  x = 0;//No more buying cards
        -:  861:
        -:  862:	  if (DEBUG){
        -:  863:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  864:	  }
        -:  865:
        -:  866:	}
        -:  867:      }     
        -:  868:
        -:  869:      //Reset Hand
    #####:  870:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  870-block  0
    $$$$$:  870-block  1
    $$$$$:  870-block  2
branch  0 never executed
branch  1 never executed
    #####:  871:	state->hand[currentPlayer][i] = temphand[i];
    #####:  872:	temphand[i] = -1;
        -:  873:      }
        -:  874:      //Reset Hand
        -:  875:      			
    #####:  876:      return 0;
    $$$$$:  876-block  0
        -:  877:			
        -:  878:    case gardens:
    #####:  879:      return -1;
    $$$$$:  879-block  0
        -:  880:			
        -:  881:    case mine:
    #####:  882:   	  playMine(state, choice1, choice2, handPos);
    $$$$$:  882-block  0
call    0 never executed
        -:  883:			
        -:  884:    case remodel:
    #####:  885:      playRemodel(state, choice1, choice2, handPos);
    $$$$$:  885-block  0
call    0 never executed
        -:  886:		
        -:  887:    case smithy:
        5:  888:      playSmithy(state, handPos);
        5:  888-block  0
call    0 returned 100%
        -:  889:		
        -:  890:    case village:
     2010:  891:      playVillage(state, handPos);
     2010:  891-block  0
call    0 returned 100%
        -:  892:		
        -:  893:    case baron:
     2010:  894:      state->numBuys++;//Increase buys by 1!
     2010:  895:      if (choice1 > 0){//Boolean true or going to discard an estate
     2010:  895-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  896:	int p = 0;//Iterator for hand!
    #####:  897:	int card_not_discarded = 1;//Flag for discard set!
    #####:  898:	while(card_not_discarded){
    $$$$$:  898-block  0
    $$$$$:  898-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  898-block  2
    #####:  899:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  899-block  0
branch  0 never executed
branch  1 never executed
    #####:  900:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  901:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  902:	    state->discardCount[currentPlayer]++;
    #####:  903:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  903-block  0
    $$$$$:  903-block  1
    $$$$$:  903-block  2
branch  0 never executed
branch  1 never executed
    #####:  904:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  905:	    }
    #####:  906:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  907:	    state->handCount[currentPlayer]--;
    #####:  908:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  908-block  0
        -:  909:	  }
    #####:  910:	  else if (p > state->handCount[currentPlayer]){
    $$$$$:  910-block  0
branch  0 never executed
branch  1 never executed
        -:  911:	    if(DEBUG) {
        -:  912:	      printf("No estate cards in your hand, invalid choice\n");
        -:  913:	      printf("Must gain an estate if there are any\n");
        -:  914:	    }
    #####:  915:	    if (supplyCount(estate, state) > 0){
    $$$$$:  915-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  916:	      gainCard(estate, state, 0, currentPlayer);
    $$$$$:  916-block  0
call    0 never executed
    #####:  917:	      state->supplyCount[estate]--;//Decrement estates
    #####:  918:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  919:		isGameOver(state);
    $$$$$:  919-block  0
call    0 never executed
        -:  920:	      }
        -:  921:	    }
    #####:  922:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  922-block  0
        -:  923:	  }
        -:  924:			    
        -:  925:	  else{
    #####:  926:	    p++;//Next card
    $$$$$:  926-block  0
        -:  927:	  }
        -:  928:	}
        -:  929:      }
        -:  930:			    
        -:  931:      else{
     2010:  932:	if (supplyCount(estate, state) > 0){
     2010:  932-block  0
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     2010:  933:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
     2010:  933-block  0
call    0 returned 100%
     2010:  934:	  state->supplyCount[estate]--;//Decrement Estates
     2010:  935:	  if (supplyCount(estate, state) == 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  936:	    isGameOver(state);
    $$$$$:  936-block  0
call    0 never executed
        -:  937:	  }
        -:  938:	}
        -:  939:      }
        -:  940:	    
        -:  941:      
     2010:  942:      return 0;
     2010:  942-block  0
        -:  943:		
        -:  944:    case great_hall:
        -:  945:      //+1 Card
    #####:  946:      drawCard(currentPlayer, state);
    $$$$$:  946-block  0
call    0 never executed
        -:  947:			
        -:  948:      //+1 Actions
    #####:  949:      state->numActions++;
        -:  950:			
        -:  951:      //discard card from hand
    #####:  952:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  953:      return 0;
        -:  954:		
        -:  955:    case minion:
        -:  956:      //+1 action
    #####:  957:      state->numActions++;
        -:  958:			
        -:  959:      //discard card from hand
    #####:  960:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  960-block  0
call    0 never executed
        -:  961:			
    #####:  962:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  963:	{
    #####:  964:	  state->coins = state->coins + 2;
    $$$$$:  964-block  0
        -:  965:	}
        -:  966:			
    #####:  967:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  967-block  0
branch  0 never executed
branch  1 never executed
        -:  968:	{
        -:  969:	  //discard hand
    #####:  970:	  while(numHandCards(state) > 0)
    $$$$$:  970-block  0
    $$$$$:  970-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  971:	    {
    #####:  972:	      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  972-block  0
call    0 never executed
        -:  973:	    }
        -:  974:				
        -:  975:	  //draw 4
    #####:  976:	  for (i = 0; i < 4; i++)
    $$$$$:  976-block  0
    $$$$$:  976-block  1
branch  0 never executed
branch  1 never executed
        -:  977:	    {
    #####:  978:	      drawCard(currentPlayer, state);
    $$$$$:  978-block  0
call    0 never executed
        -:  979:	    }
        -:  980:				
        -:  981:	  //other players discard hand and redraw if hand size > 4
    #####:  982:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$:  982-block  0
    $$$$$:  982-block  1
    $$$$$:  982-block  2
branch  0 never executed
branch  1 never executed
        -:  983:	    {
    #####:  984:	      if (i != currentPlayer)
    $$$$$:  984-block  0
branch  0 never executed
branch  1 never executed
        -:  985:		{
    #####:  986:		  if ( state->handCount[i] > 4 )
    $$$$$:  986-block  0
branch  0 never executed
branch  1 never executed
        -:  987:		    {
        -:  988:		      //discard hand
    #####:  989:		      while( state->handCount[i] > 0 )
    $$$$$:  989-block  0
    $$$$$:  989-block  1
branch  0 never executed
branch  1 never executed
        -:  990:			{
    #####:  991:			  discardCard(handPos, i, state, 0);
    $$$$$:  991-block  0
call    0 never executed
        -:  992:			}
        -:  993:							
        -:  994:		      //draw 4
    #####:  995:		      for (j = 0; j < 4; j++)
    $$$$$:  995-block  0
    $$$$$:  995-block  1
branch  0 never executed
branch  1 never executed
        -:  996:			{
    #####:  997:			  drawCard(i, state);
    $$$$$:  997-block  0
call    0 never executed
        -:  998:			}
        -:  999:		    }
        -: 1000:		}
        -: 1001:	    }
        -: 1002:				
        -: 1003:	}
    #####: 1004:      return 0;
    $$$$$: 1004-block  0
        -: 1005:		
        -: 1006:    case steward:
       15: 1007:      if (choice1 == 1)
       15: 1007-block  0
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1008:	{
        -: 1009:	  //+2 cards
        5: 1010:	  drawCard(currentPlayer, state);
        5: 1010-block  0
call    0 returned 100%
        5: 1011:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1012:	}
       10: 1013:      else if (choice1 == 2)
       10: 1013-block  0
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1014:	{
        -: 1015:	  //+2 coins
        5: 1016:	  state->coins = state->coins + 2;
        5: 1016-block  0
        -: 1017:	}
        -: 1018:      else
        -: 1019:	{
        -: 1020:	  //trash 2 cards in hand
        5: 1021:	  discardCard(choice2, currentPlayer, state, 1);
        5: 1021-block  0
call    0 returned 100%
        5: 1022:	  discardCard(choice3, currentPlayer, state, 1);
call    0 returned 100%
        -: 1023:	}
        -: 1024:			
        -: 1025:      //discard card from hand
       15: 1026:      discardCard(handPos, currentPlayer, state, 0);
       15: 1026-block  0
call    0 returned 100%
       15: 1027:      return 0;
        -: 1028:		
        -: 1029:    case tribute:
    #####: 1030:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1030-block  0
branch  0 never executed
branch  1 never executed
    #####: 1031:	if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1031-block  0
branch  0 never executed
branch  1 never executed
    #####: 1032:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1033:	  state->deckCount[nextPlayer]--;
    $$$$$: 1033-block  0
        -: 1034:	}
    #####: 1035:	else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1035-block  0
branch  0 never executed
branch  1 never executed
    #####: 1036:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1037:	  state->discardCount[nextPlayer]--;
    $$$$$: 1037-block  0
        -: 1038:	}
        -: 1039:	else{
        -: 1040:	  //No Card to Reveal
        -: 1041:	  if (DEBUG){
        -: 1042:	    printf("No cards to reveal\n");
        -: 1043:	  }
        -: 1044:	}
        -: 1045:      }
        -: 1046:	    
        -: 1047:      else{
    #####: 1048:	if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1048-block  0
branch  0 never executed
branch  1 never executed
    #####: 1049:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1049-block  0
    $$$$$: 1049-block  1
    $$$$$: 1049-block  2
branch  0 never executed
branch  1 never executed
    #####: 1050:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1051:	    state->deckCount[nextPlayer]++;
    #####: 1052:	    state->discard[nextPlayer][i] = -1;
    #####: 1053:	    state->discardCount[nextPlayer]--;
        -: 1054:	  }
        -: 1055:			    
    #####: 1056:	  shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$: 1056-block  0
call    0 never executed
        -: 1057:	} 
    #####: 1058:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1059:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1060:	state->deckCount[nextPlayer]--;
    #####: 1061:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1062:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1063:	state->deckCount[nextPlayer]--;
    $$$$$: 1063-block  0
        -: 1064:      }    
        -: 1065:		       
    #####: 1066:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1066-block  0
branch  0 never executed
branch  1 never executed
    #####: 1067:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1068:	state->playedCardCount++;
    #####: 1069:	tributeRevealedCards[1] = -1;
    $$$$$: 1069-block  0
        -: 1070:      }
        -: 1071:
    #####: 1072:      for (i = 0; i <= 2; i ++){
    $$$$$: 1072-block  0
    $$$$$: 1072-block  1
    $$$$$: 1072-block  2
branch  0 never executed
branch  1 never executed
    #####: 1073:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1073-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1073-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1073-block  2
branch  4 never executed
branch  5 never executed
    #####: 1074:	  state->coins += 2;
    $$$$$: 1074-block  0
        -: 1075:	}
        -: 1076:		    
    #####: 1077:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1077-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1077-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1077-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1077-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1077-block  4
branch  8 never executed
branch  9 never executed
    #####: 1078:	  drawCard(currentPlayer, state);
    $$$$$: 1078-block  0
call    0 never executed
    #####: 1079:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1080:	}
        -: 1081:	else{//Action Card
    #####: 1082:	  state->numActions = state->numActions + 2;
    $$$$$: 1082-block  0
        -: 1083:	}
        -: 1084:      }
        -: 1085:	    
    #####: 1086:      return 0;
    $$$$$: 1086-block  0
        -: 1087:		
        -: 1088:    case ambassador:
    #####: 1089:      j = 0;		//used to check if player has enough cards to discard
        -: 1090:
    #####: 1091:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1091-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1091-block  1
branch  2 never executed
branch  3 never executed
        -: 1092:	{
    #####: 1093:	  return -1;				
    $$$$$: 1093-block  0
        -: 1094:	}
        -: 1095:
    #####: 1096:      if (choice1 == handPos)
    $$$$$: 1096-block  0
branch  0 never executed
branch  1 never executed
        -: 1097:	{
    #####: 1098:	  return -1;
    $$$$$: 1098-block  0
        -: 1099:	}
        -: 1100:
    #####: 1101:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1101-block  0
    $$$$$: 1101-block  1
    $$$$$: 1101-block  2
branch  0 never executed
branch  1 never executed
        -: 1102:	{
    #####: 1103:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1103-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1103-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1103-block  2
branch  4 never executed
branch  5 never executed
        -: 1104:	    {
    #####: 1105:	      j++;
    $$$$$: 1105-block  0
        -: 1106:	    }
        -: 1107:	}
    #####: 1108:      if (j < choice2)
    $$$$$: 1108-block  0
branch  0 never executed
branch  1 never executed
        -: 1109:	{
    #####: 1110:	  return -1;				
    $$$$$: 1110-block  0
        -: 1111:	}
        -: 1112:
        -: 1113:      if (DEBUG) 
        -: 1114:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1115:
        -: 1116:      //increase supply count for choosen card by amount being discarded
    #####: 1117:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1118:			
        -: 1119:      //each other player gains a copy of revealed card
    #####: 1120:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1120-block  0
    $$$$$: 1120-block  1
    $$$$$: 1120-block  2
branch  0 never executed
branch  1 never executed
        -: 1121:	{
    #####: 1122:	  if (i != currentPlayer)
    $$$$$: 1122-block  0
branch  0 never executed
branch  1 never executed
        -: 1123:	    {
    #####: 1124:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1124-block  0
call    0 never executed
        -: 1125:	    }
        -: 1126:	}
        -: 1127:
        -: 1128:      //discard played card from hand
    #####: 1129:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1129-block  0
call    0 never executed
        -: 1130:
        -: 1131:      //trash copies of cards returned to supply
    #####: 1132:      for (j = 0; j < choice2; j++)
    $$$$$: 1132-block  0
    $$$$$: 1132-block  1
branch  0 never executed
branch  1 never executed
        -: 1133:	{
    #####: 1134:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1134-block  0
    $$$$$: 1134-block  1
    $$$$$: 1134-block  2
branch  0 never executed
branch  1 never executed
        -: 1135:	    {
    #####: 1136:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1136-block  0
branch  0 never executed
branch  1 never executed
        -: 1137:		{
    #####: 1138:		  discardCard(i, currentPlayer, state, 1);
    $$$$$: 1138-block  0
call    0 never executed
    #####: 1139:		  break;
        -: 1140:		}
        -: 1141:	    }
        -: 1142:	}			
        -: 1143:
    #####: 1144:      return 0;
    $$$$$: 1144-block  0
        -: 1145:		
        -: 1146:    case cutpurse:
        -: 1147:
    #####: 1148:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1148-block  0
call    0 never executed
    #####: 1149:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1149-block  0
    $$$$$: 1149-block  1
branch  0 never executed
branch  1 never executed
        -: 1150:	{
    #####: 1151:	  if (i != currentPlayer)
    $$$$$: 1151-block  0
branch  0 never executed
branch  1 never executed
        -: 1152:	    {
    #####: 1153:	      for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1153-block  0
    $$$$$: 1153-block  1
    $$$$$: 1153-block  2
branch  0 never executed
branch  1 never executed
        -: 1154:		{
    #####: 1155:		  if (state->hand[i][j] == copper)
    $$$$$: 1155-block  0
branch  0 never executed
branch  1 never executed
        -: 1156:		    {
    #####: 1157:		      discardCard(j, i, state, 0);
    $$$$$: 1157-block  0
call    0 never executed
    #####: 1158:		      break;
        -: 1159:		    }
    #####: 1160:		  if (j == state->handCount[i])
    $$$$$: 1160-block  0
branch  0 never executed
branch  1 never executed
        -: 1161:		    {
    #####: 1162:		      for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1162-block  0
    $$$$$: 1162-block  1
    $$$$$: 1162-block  2
branch  0 never executed
branch  1 never executed
        -: 1163:			{
        -: 1164:			  if (DEBUG)
        -: 1165:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1166:			}	
    #####: 1167:		      break;
    $$$$$: 1167-block  0
        -: 1168:		    }		
        -: 1169:		}
        -: 1170:					
        -: 1171:	    }
        -: 1172:				
        -: 1173:	}				
        -: 1174:
        -: 1175:      //discard played card from hand
    #####: 1176:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1176-block  0
call    0 never executed
        -: 1177:
    #####: 1178:      return 0;
        -: 1179:
        -: 1180:		
        -: 1181:    case embargo: 
        -: 1182:      //+2 Coins
    #####: 1183:      state->coins = state->coins + 2;
        -: 1184:			
        -: 1185:      //see if selected pile is in play
    #####: 1186:      if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1186-block  0
branch  0 never executed
branch  1 never executed
        -: 1187:	{
    #####: 1188:	  return -1;
    $$$$$: 1188-block  0
        -: 1189:	}
        -: 1190:			
        -: 1191:      //add embargo token to selected supply pile
    #####: 1192:      state->embargoTokens[choice1]++;
        -: 1193:			
        -: 1194:      //trash card
    #####: 1195:      discardCard(handPos, currentPlayer, state, 1);		
    $$$$$: 1195-block  0
call    0 never executed
    #####: 1196:      return 0;
        -: 1197:		
        -: 1198:    case outpost:
        -: 1199:      //set outpost flag
    #####: 1200:      state->outpostPlayed++;
        -: 1201:			
        -: 1202:      //discard card
    #####: 1203:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1203-block  0
call    0 never executed
    #####: 1204:      return 0;
        -: 1205:		
        -: 1206:    case salvager:
        -: 1207:      //+1 buy
    #####: 1208:      state->numBuys++;
        -: 1209:			
    #####: 1210:      if (choice1)
    $$$$$: 1210-block  0
branch  0 never executed
branch  1 never executed
        -: 1211:	{
        -: 1212:	  //gain coins equal to trashed card
    #####: 1213:	  state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1213-block  0
call    0 never executed
call    1 never executed
        -: 1214:	  //trash card
    #####: 1215:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1216:	}
        -: 1217:			
        -: 1218:      //discard card
    #####: 1219:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1219-block  0
call    0 never executed
    #####: 1220:      return 0;
        -: 1221:		
        -: 1222:    case sea_hag:
    #####: 1223:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1223-block  0
    $$$$$: 1223-block  1
    $$$$$: 1223-block  2
branch  0 never executed
branch  1 never executed
    #####: 1224:	if (i != currentPlayer){
    $$$$$: 1224-block  0
branch  0 never executed
branch  1 never executed
    #####: 1225:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1226:	  state->discardCount[i]++;
    #####: 1227:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1227-block  0
        -: 1228:	}
        -: 1229:      }
    #####: 1230:      return 0;
    $$$$$: 1230-block  0
        -: 1231:		
        -: 1232:    case treasure_map:
        -: 1233:      //search hand for another treasure_map
    #####: 1234:      index = -1;
    #####: 1235:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1235-block  0
    $$$$$: 1235-block  1
    $$$$$: 1235-block  2
branch  0 never executed
branch  1 never executed
        -: 1236:	{
    #####: 1237:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1237-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1237-block  1
branch  2 never executed
branch  3 never executed
        -: 1238:	    {
    #####: 1239:	      index = i;
    #####: 1240:	      break;
    $$$$$: 1240-block  0
        -: 1241:	    }
        -: 1242:	}
    #####: 1243:      if (index > -1)
    $$$$$: 1243-block  0
branch  0 never executed
branch  1 never executed
        -: 1244:	{
        -: 1245:	  //trash both treasure cards
    #####: 1246:	  discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1246-block  0
call    0 never executed
    #####: 1247:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1248:
        -: 1249:	  //gain 4 Gold cards
    #####: 1250:	  for (i = 0; i < 4; i++)
    $$$$$: 1250-block  0
branch  0 never executed
branch  1 never executed
        -: 1251:	    {
    #####: 1252:	      gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1252-block  0
call    0 never executed
        -: 1253:	    }
        -: 1254:				
        -: 1255:	  //return success
    #####: 1256:	  return 1;
    $$$$$: 1256-block  0
        -: 1257:	}
        -: 1258:			
        -: 1259:      //no second treasure_map found in hand
    #####: 1260:      return -1;
    $$$$$: 1260-block  0
        -: 1261:    }
        -: 1262:	
     4040: 1263:  return -1;
    $$$$$: 1263-block  0
     4040: 1263-block  1
        -: 1264:}
        -: 1265:
function discardCard called 4095 returned 100% blocks executed 89%
     4095: 1266:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
     4095: 1266-block  0
        -: 1267:{
        -: 1268:	
        -: 1269:  //if card is not trashed, added to Played pile 
     4095: 1270:  if (trashFlag < 1)
     4095: 1270-block  0
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -: 1271:    {
        -: 1272:      //add card to played pile
     4075: 1273:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     4075: 1274:      state->playedCardCount++;
     4075: 1274-block  0
        -: 1275:    }
        -: 1276:	
        -: 1277:  //set played card to -1
     4095: 1278:  state->hand[currentPlayer][handPos] = -1;
        -: 1279:	
        -: 1280:  //remove card from player's hand
     4095: 1281:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
     4095: 1281-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1282:    {
        -: 1283:      //reduce number of cards in hand
       12: 1284:      state->handCount[currentPlayer]--;
       12: 1284-block  0
        -: 1285:    }
     4083: 1286:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
     4083: 1286-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1287:    {
        -: 1288:      //reduce number of cards in hand
    #####: 1289:      state->handCount[currentPlayer]--;
    $$$$$: 1289-block  0
        -: 1290:    }
        -: 1291:  else 	
        -: 1292:    {
        -: 1293:      //replace discarded card with last card in hand
     4083: 1294:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1295:      //set last card to -1
     4083: 1296:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1297:      //reduce number of cards in hand
     4083: 1298:      state->handCount[currentPlayer]--;
     4083: 1298-block  0
        -: 1299:    }
        -: 1300:	
     4095: 1301:  return 0;
     4095: 1301-block  0
        -: 1302:}
        -: 1303:
function gainCard called 2030 returned 100% blocks executed 100%
     2030: 1304:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
     2030: 1304-block  0
        -: 1305:{
        -: 1306:  //Note: supplyPos is enum of choosen card
        -: 1307:	
        -: 1308:  //check if supply pile is empty (0) or card is not used in game (-1)
     2030: 1309:  if ( supplyCount(supplyPos, state) < 1 )
     2030: 1309-block  0
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        -: 1310:    {
        5: 1311:      return -1;
        5: 1311-block  0
        -: 1312:    }
        -: 1313:	
        -: 1314:  //added card for [whoseTurn] current player:
        -: 1315:  // toFlag = 0 : add to discard
        -: 1316:  // toFlag = 1 : add to deck
        -: 1317:  // toFlag = 2 : add to hand
        -: 1318:
     2025: 1319:  if (toFlag == 1)
     2025: 1319-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1320:    {
        5: 1321:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        5: 1322:      state->deckCount[player]++;
        5: 1322-block  0
        -: 1323:    }
     2020: 1324:  else if (toFlag == 2)
     2020: 1324-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1325:    {
        5: 1326:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        5: 1327:      state->handCount[player]++;
        5: 1327-block  0
        -: 1328:    }
        -: 1329:  else
        -: 1330:    {
     2015: 1331:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     2015: 1332:      state->discardCount[player]++;
     2015: 1332-block  0
        -: 1333:    }
        -: 1334:	
        -: 1335:  //decrease number in supply pile
     2025: 1336:  state->supplyCount[supplyPos]--;
        -: 1337:	 
     2025: 1338:  return 0;
     2025: 1338-block  0
        -: 1339:}
        -: 1340:
function updateCoins called 4145 returned 100% blocks executed 100%
     4145: 1341:int updateCoins(int player, struct gameState *state, int bonus)
     4145: 1341-block  0
        -: 1342:{
        -: 1343:  int i;
        -: 1344:	
        -: 1345:  //reset coin count
     4145: 1346:  state->coins = 0;
        -: 1347:
        -: 1348:  //add coins for each Treasure card in player's hand
    24870: 1349:  for (i = 0; i < state->handCount[player]; i++)
     4145: 1349-block  0
    20725: 1349-block  1
    24870: 1349-block  2
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1350:    {
    20725: 1351:      if (state->hand[player][i] == copper)
    20725: 1351-block  0
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
        -: 1352:	{
    14599: 1353:	  state->coins += 1;
    14599: 1353-block  0
        -: 1354:	}
     6126: 1355:      else if (state->hand[player][i] == silver)
     6126: 1355-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1356:	{
       25: 1357:	  state->coins += 2;
       25: 1357-block  0
        -: 1358:	}
     6101: 1359:      else if (state->hand[player][i] == gold)
     6101: 1359-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1360:	{
       25: 1361:	  state->coins += 3;
       25: 1361-block  0
        -: 1362:	}	
        -: 1363:    }	
        -: 1364:
        -: 1365:  //add bonus
     4145: 1366:  state->coins += bonus;
        -: 1367:
     4145: 1368:  return 0;
     4145: 1368-block  0
        -: 1369:}
        -: 1370:
        -: 1371:
        -: 1372:/************************************************
        -: 1373:Start of function unit tests
        -: 1374:*************************************************/
        -: 1375:
function testUpdateCoins called 0 returned 0% blocks executed 0%
    #####: 1376:int testUpdateCoins(int player, struct gameState *state, int bonus) {
    $$$$$: 1376-block  0
        -: 1377:  
    #####: 1378:}
        -: 1379:
        -: 1380:
        -: 1381://end of dominion.c
        -: 1382:
----------------- Random Testing Card: village ----------------
----------------- 0 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 1 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 2 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 3 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 4 ----------------
SUCCESS
FAILURE
----------------- 5 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 6 ----------------
SUCCESS
FAILURE
----------------- 7 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 8 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 9 ----------------
SUCCESS
FAILURE
----------------- 10 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 11 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 12 ----------------
SUCCESS
FAILURE
----------------- 13 ----------------
SUCCESS
FAILURE
----------------- 14 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 15 ----------------
SUCCESS
FAILURE
----------------- 16 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 17 ----------------
SUCCESS
FAILURE
----------------- 18 ----------------
SUCCESS
FAILURE
----------------- 19 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 20 ----------------
SUCCESS
FAILURE
----------------- 21 ----------------
SUCCESS
FAILURE
----------------- 22 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 23 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 24 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 25 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 26 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 27 ----------------
SUCCESS
FAILURE
----------------- 28 ----------------
SUCCESS
FAILURE
----------------- 29 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 30 ----------------
SUCCESS
FAILURE
----------------- 31 ----------------
SUCCESS
FAILURE
----------------- 32 ----------------
SUCCESS
FAILURE
----------------- 33 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 34 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 35 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 36 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 37 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 38 ----------------
SUCCESS
FAILURE
----------------- 39 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 40 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 41 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 42 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 43 ----------------
SUCCESS
FAILURE
----------------- 44 ----------------
SUCCESS
FAILURE
----------------- 45 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 46 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 47 ----------------
SUCCESS
FAILURE
----------------- 48 ----------------
SUCCESS
FAILURE
----------------- 49 ----------------
SUCCESS
FAILURE
----------------- 50 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 51 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 52 ----------------
SUCCESS
FAILURE
----------------- 53 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 54 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 55 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 56 ----------------
SUCCESS
FAILURE
----------------- 57 ----------------
SUCCESS
FAILURE
----------------- 58 ----------------
SUCCESS
FAILURE
----------------- 59 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 60 ----------------
SUCCESS
FAILURE
----------------- 61 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 62 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 63 ----------------
SUCCESS
FAILURE
----------------- 64 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 65 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 66 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 67 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 68 ----------------
SUCCESS
FAILURE
----------------- 69 ----------------
SUCCESS
FAILURE
----------------- 70 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 71 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 72 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 73 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 74 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 75 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 76 ----------------
SUCCESS
FAILURE
----------------- 77 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 78 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 79 ----------------
SUCCESS
FAILURE
----------------- 80 ----------------
SUCCESS
FAILURE
----------------- 81 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 82 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 83 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 84 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 85 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 86 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 87 ----------------
SUCCESS
FAILURE
----------------- 88 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 89 ----------------
SUCCESS
FAILURE
----------------- 90 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 91 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 92 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 93 ----------------
SUCCESS
FAILURE
----------------- 94 ----------------
SUCCESS
FAILURE
----------------- 95 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 96 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 97 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 98 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 99 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 100 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 101 ----------------
SUCCESS
FAILURE
----------------- 102 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 103 ----------------
SUCCESS
FAILURE
----------------- 104 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 105 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 106 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 107 ----------------
SUCCESS
FAILURE
----------------- 108 ----------------
SUCCESS
FAILURE
----------------- 109 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 110 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 111 ----------------
SUCCESS
FAILURE
----------------- 112 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 113 ----------------
SUCCESS
FAILURE
----------------- 114 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 115 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 116 ----------------
SUCCESS
FAILURE
----------------- 117 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 118 ----------------
SUCCESS
FAILURE
----------------- 119 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 120 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 121 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 122 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 123 ----------------
SUCCESS
FAILURE
----------------- 124 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 125 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 126 ----------------
SUCCESS
FAILURE
----------------- 127 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 128 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 129 ----------------
SUCCESS
FAILURE
----------------- 130 ----------------
SUCCESS
FAILURE
----------------- 131 ----------------
SUCCESS
FAILURE
----------------- 132 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 133 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 134 ----------------
SUCCESS
FAILURE
----------------- 135 ----------------
SUCCESS
FAILURE
----------------- 136 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 137 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 138 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 139 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 140 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 141 ----------------
SUCCESS
FAILURE
----------------- 142 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 143 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 144 ----------------
SUCCESS
FAILURE
----------------- 145 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 146 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 147 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 148 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 149 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 150 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 151 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 152 ----------------
SUCCESS
FAILURE
----------------- 153 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 154 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 155 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 156 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 157 ----------------
SUCCESS
FAILURE
----------------- 158 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 159 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 160 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 161 ----------------
SUCCESS
FAILURE
----------------- 162 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 163 ----------------
SUCCESS
FAILURE
----------------- 164 ----------------
SUCCESS
FAILURE
----------------- 165 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 166 ----------------
SUCCESS
FAILURE
----------------- 167 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 168 ----------------
SUCCESS
FAILURE
----------------- 169 ----------------
SUCCESS
FAILURE
----------------- 170 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 171 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 172 ----------------
SUCCESS
FAILURE
----------------- 173 ----------------
SUCCESS
FAILURE
----------------- 174 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 175 ----------------
SUCCESS
FAILURE
----------------- 176 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 177 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 178 ----------------
SUCCESS
FAILURE
----------------- 179 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 180 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 181 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 182 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 183 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 184 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 185 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 186 ----------------
SUCCESS
FAILURE
----------------- 187 ----------------
SUCCESS
FAILURE
----------------- 188 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 189 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 190 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 191 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 192 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 193 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 194 ----------------
SUCCESS
FAILURE
----------------- 195 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 196 ----------------
SUCCESS
FAILURE
----------------- 197 ----------------
SUCCESS
FAILURE
----------------- 198 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 199 ----------------
SUCCESS
FAILURE
----------------- 200 ----------------
SUCCESS
FAILURE
----------------- 201 ----------------
SUCCESS
FAILURE
----------------- 202 ----------------
SUCCESS
FAILURE
----------------- 203 ----------------
SUCCESS
FAILURE
----------------- 204 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 205 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 206 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 207 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 208 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 209 ----------------
SUCCESS
FAILURE
----------------- 210 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 211 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 212 ----------------
SUCCESS
FAILURE
----------------- 213 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 214 ----------------
SUCCESS
FAILURE
----------------- 215 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 216 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 217 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 218 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 219 ----------------
SUCCESS
FAILURE
----------------- 220 ----------------
SUCCESS
FAILURE
----------------- 221 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 222 ----------------
SUCCESS
FAILURE
----------------- 223 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 224 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 225 ----------------
SUCCESS
FAILURE
----------------- 226 ----------------
SUCCESS
FAILURE
----------------- 227 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 228 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 229 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 230 ----------------
SUCCESS
FAILURE
----------------- 231 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 232 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 233 ----------------
SUCCESS
FAILURE
----------------- 234 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 235 ----------------
SUCCESS
FAILURE
----------------- 236 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 237 ----------------
SUCCESS
FAILURE
----------------- 238 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 239 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 240 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 241 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 242 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 243 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 244 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 245 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 246 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 247 ----------------
SUCCESS
FAILURE
----------------- 248 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 249 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 250 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 251 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 252 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 253 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 254 ----------------
SUCCESS
FAILURE
----------------- 255 ----------------
SUCCESS
FAILURE
----------------- 256 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 257 ----------------
SUCCESS
FAILURE
----------------- 258 ----------------
SUCCESS
FAILURE
----------------- 259 ----------------
SUCCESS
FAILURE
----------------- 260 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 261 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 262 ----------------
SUCCESS
FAILURE
----------------- 263 ----------------
SUCCESS
FAILURE
----------------- 264 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 265 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 266 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 267 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 268 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 269 ----------------
SUCCESS
FAILURE
----------------- 270 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 271 ----------------
SUCCESS
FAILURE
----------------- 272 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 273 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 274 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 275 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 276 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 277 ----------------
SUCCESS
FAILURE
----------------- 278 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 279 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 280 ----------------
SUCCESS
FAILURE
----------------- 281 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 282 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 283 ----------------
SUCCESS
FAILURE
----------------- 284 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 285 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 286 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 287 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 288 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 289 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 290 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 291 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 292 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 293 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 294 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 295 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 296 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 297 ----------------
SUCCESS
FAILURE
----------------- 298 ----------------
SUCCESS
FAILURE
----------------- 299 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 300 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 301 ----------------
SUCCESS
FAILURE
----------------- 302 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 303 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 304 ----------------
SUCCESS
FAILURE
----------------- 305 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 306 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 307 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 308 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 309 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 310 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 311 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 312 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 313 ----------------
SUCCESS
FAILURE
----------------- 314 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 315 ----------------
SUCCESS
FAILURE
----------------- 316 ----------------
SUCCESS
FAILURE
----------------- 317 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 318 ----------------
SUCCESS
FAILURE
----------------- 319 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 320 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 321 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 322 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 323 ----------------
SUCCESS
FAILURE
----------------- 324 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 325 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 326 ----------------
SUCCESS
FAILURE
----------------- 327 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 328 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 329 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 330 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 331 ----------------
SUCCESS
FAILURE
----------------- 332 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 333 ----------------
SUCCESS
FAILURE
----------------- 334 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 335 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 336 ----------------
SUCCESS
FAILURE
----------------- 337 ----------------
SUCCESS
FAILURE
----------------- 338 ----------------
SUCCESS
FAILURE
----------------- 339 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 340 ----------------
SUCCESS
FAILURE
----------------- 341 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 342 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 343 ----------------
SUCCESS
FAILURE
----------------- 344 ----------------
SUCCESS
FAILURE
----------------- 345 ----------------
SUCCESS
FAILURE
----------------- 346 ----------------
SUCCESS
FAILURE
----------------- 347 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 348 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 349 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 350 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 351 ----------------
SUCCESS
FAILURE
----------------- 352 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 353 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 354 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 355 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 356 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 357 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 358 ----------------
SUCCESS
FAILURE
----------------- 359 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 360 ----------------
SUCCESS
FAILURE
----------------- 361 ----------------
SUCCESS
FAILURE
----------------- 362 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 363 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 364 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 365 ----------------
SUCCESS
FAILURE
----------------- 366 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 367 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 368 ----------------
SUCCESS
FAILURE
----------------- 369 ----------------
SUCCESS
FAILURE
----------------- 370 ----------------
SUCCESS
FAILURE
----------------- 371 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 372 ----------------
SUCCESS
FAILURE
----------------- 373 ----------------
SUCCESS
FAILURE
----------------- 374 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 375 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 376 ----------------
SUCCESS
FAILURE
----------------- 377 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 378 ----------------
SUCCESS
FAILURE
----------------- 379 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 380 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 381 ----------------
SUCCESS
FAILURE
----------------- 382 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 383 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 384 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 385 ----------------
SUCCESS
FAILURE
----------------- 386 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 387 ----------------
SUCCESS
FAILURE
----------------- 388 ----------------
SUCCESS
FAILURE
----------------- 389 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 390 ----------------
SUCCESS
FAILURE
----------------- 391 ----------------
SUCCESS
FAILURE
----------------- 392 ----------------
SUCCESS
FAILURE
----------------- 393 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 394 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 395 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 396 ----------------
SUCCESS
FAILURE
----------------- 397 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 398 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 399 ----------------
SUCCESS
FAILURE
----------------- 400 ----------------
SUCCESS
FAILURE
----------------- 401 ----------------
SUCCESS
FAILURE
----------------- 402 ----------------
SUCCESS
FAILURE
----------------- 403 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 404 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 405 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 406 ----------------
SUCCESS
FAILURE
----------------- 407 ----------------
SUCCESS
FAILURE
----------------- 408 ----------------
SUCCESS
FAILURE
----------------- 409 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 410 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 411 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 412 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 413 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 414 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 415 ----------------
SUCCESS
FAILURE
----------------- 416 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 417 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 418 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 419 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 420 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 421 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 422 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 423 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 424 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 425 ----------------
SUCCESS
FAILURE
----------------- 426 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 427 ----------------
SUCCESS
FAILURE
----------------- 428 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 429 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 430 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 431 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 432 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 433 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 434 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 435 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 436 ----------------
SUCCESS
FAILURE
----------------- 437 ----------------
SUCCESS
FAILURE
----------------- 438 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 439 ----------------
SUCCESS
FAILURE
----------------- 440 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 441 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 442 ----------------
SUCCESS
FAILURE
----------------- 443 ----------------
SUCCESS
FAILURE
----------------- 444 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 445 ----------------
SUCCESS
FAILURE
----------------- 446 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 447 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 448 ----------------
SUCCESS
FAILURE
----------------- 449 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 450 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 451 ----------------
SUCCESS
FAILURE
----------------- 452 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 453 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 454 ----------------
SUCCESS
FAILURE
----------------- 455 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 456 ----------------
SUCCESS
FAILURE
----------------- 457 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 458 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 459 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 460 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 461 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 462 ----------------
SUCCESS
FAILURE
----------------- 463 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 464 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 465 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 466 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 467 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 468 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 469 ----------------
SUCCESS
FAILURE
----------------- 470 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 471 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 472 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 473 ----------------
SUCCESS
FAILURE
----------------- 474 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 475 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 476 ----------------
SUCCESS
FAILURE
----------------- 477 ----------------
SUCCESS
FAILURE
----------------- 478 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 479 ----------------
SUCCESS
FAILURE
----------------- 480 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 481 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 482 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 483 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 484 ----------------
SUCCESS
FAILURE
----------------- 485 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 486 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 487 ----------------
SUCCESS
FAILURE
----------------- 488 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 489 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 490 ----------------
SUCCESS
FAILURE
----------------- 491 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 492 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 493 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 494 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 495 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 496 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 497 ----------------
SUCCESS
FAILURE
----------------- 498 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 499 ----------------
SUCCESS
FAILURE
----------------- 500 ----------------
SUCCESS
FAILURE
----------------- 501 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 502 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 503 ----------------
SUCCESS
FAILURE
----------------- 504 ----------------
SUCCESS
FAILURE
----------------- 505 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 506 ----------------
SUCCESS
FAILURE
----------------- 507 ----------------
SUCCESS
FAILURE
----------------- 508 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 509 ----------------
SUCCESS
FAILURE
----------------- 510 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 511 ----------------
SUCCESS
FAILURE
----------------- 512 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 513 ----------------
SUCCESS
FAILURE
----------------- 514 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 515 ----------------
SUCCESS
FAILURE
----------------- 516 ----------------
SUCCESS
FAILURE
----------------- 517 ----------------
SUCCESS
FAILURE
----------------- 518 ----------------
SUCCESS
FAILURE
----------------- 519 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 520 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 521 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 522 ----------------
SUCCESS
FAILURE
----------------- 523 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 524 ----------------
SUCCESS
FAILURE
----------------- 525 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 526 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 527 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 528 ----------------
SUCCESS
FAILURE
----------------- 529 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 530 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 531 ----------------
SUCCESS
FAILURE
----------------- 532 ----------------
SUCCESS
FAILURE
----------------- 533 ----------------
SUCCESS
FAILURE
----------------- 534 ----------------
SUCCESS
FAILURE
----------------- 535 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 536 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 537 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 538 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 539 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 540 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 541 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 542 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 543 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 544 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 545 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 546 ----------------
SUCCESS
FAILURE
----------------- 547 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 548 ----------------
SUCCESS
FAILURE
----------------- 549 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 550 ----------------
SUCCESS
FAILURE
----------------- 551 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 552 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 553 ----------------
SUCCESS
FAILURE
----------------- 554 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 555 ----------------
SUCCESS
FAILURE
----------------- 556 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 557 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 558 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 559 ----------------
SUCCESS
FAILURE
----------------- 560 ----------------
SUCCESS
FAILURE
----------------- 561 ----------------
SUCCESS
FAILURE
----------------- 562 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 563 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 564 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 565 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 566 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 567 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 568 ----------------
SUCCESS
FAILURE
----------------- 569 ----------------
SUCCESS
FAILURE
----------------- 570 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 571 ----------------
SUCCESS
FAILURE
----------------- 572 ----------------
SUCCESS
FAILURE
----------------- 573 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 574 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 575 ----------------
SUCCESS
FAILURE
----------------- 576 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 577 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 578 ----------------
SUCCESS
FAILURE
----------------- 579 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 580 ----------------
SUCCESS
FAILURE
----------------- 581 ----------------
SUCCESS
FAILURE
----------------- 582 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 583 ----------------
SUCCESS
FAILURE
----------------- 584 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 585 ----------------
SUCCESS
FAILURE
----------------- 586 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 587 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 588 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 589 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 590 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 591 ----------------
SUCCESS
FAILURE
----------------- 592 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 593 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 594 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 595 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 596 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 597 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 598 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 599 ----------------
SUCCESS
FAILURE
----------------- 600 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 601 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 602 ----------------
SUCCESS
FAILURE
----------------- 603 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 604 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 605 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 606 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 607 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 608 ----------------
SUCCESS
FAILURE
----------------- 609 ----------------
SUCCESS
FAILURE
----------------- 610 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 611 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 612 ----------------
SUCCESS
FAILURE
----------------- 613 ----------------
SUCCESS
FAILURE
----------------- 614 ----------------
SUCCESS
FAILURE
----------------- 615 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 616 ----------------
SUCCESS
FAILURE
----------------- 617 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 618 ----------------
SUCCESS
FAILURE
----------------- 619 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 620 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 621 ----------------
SUCCESS
FAILURE
----------------- 622 ----------------
SUCCESS
FAILURE
----------------- 623 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 624 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 625 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 626 ----------------
SUCCESS
FAILURE
----------------- 627 ----------------
SUCCESS
FAILURE
----------------- 628 ----------------
SUCCESS
FAILURE
----------------- 629 ----------------
SUCCESS
FAILURE
----------------- 630 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 631 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 632 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 633 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 634 ----------------
SUCCESS
FAILURE
----------------- 635 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 636 ----------------
SUCCESS
FAILURE
----------------- 637 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 638 ----------------
SUCCESS
FAILURE
----------------- 639 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 640 ----------------
SUCCESS
FAILURE
----------------- 641 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 642 ----------------
SUCCESS
FAILURE
----------------- 643 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 644 ----------------
SUCCESS
FAILURE
----------------- 645 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 646 ----------------
SUCCESS
FAILURE
----------------- 647 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 648 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 649 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 650 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 651 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 652 ----------------
SUCCESS
FAILURE
----------------- 653 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 654 ----------------
SUCCESS
FAILURE
----------------- 655 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 656 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 657 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 658 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 659 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 660 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 661 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 662 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 663 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 664 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 665 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 666 ----------------
SUCCESS
FAILURE
----------------- 667 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 668 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 669 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 670 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 671 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 672 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 673 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 674 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 675 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 676 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 677 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 678 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 679 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 680 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 681 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 682 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 683 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 684 ----------------
SUCCESS
FAILURE
----------------- 685 ----------------
SUCCESS
FAILURE
----------------- 686 ----------------
SUCCESS
FAILURE
----------------- 687 ----------------
SUCCESS
FAILURE
----------------- 688 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 689 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 690 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 691 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 692 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 693 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 694 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 695 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 696 ----------------
SUCCESS
FAILURE
----------------- 697 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 698 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 699 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 700 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 701 ----------------
SUCCESS
FAILURE
----------------- 702 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 703 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 704 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 705 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 706 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 707 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 708 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 709 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 710 ----------------
SUCCESS
FAILURE
----------------- 711 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 712 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 713 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 714 ----------------
SUCCESS
FAILURE
----------------- 715 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 716 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 717 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 718 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 719 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 720 ----------------
SUCCESS
FAILURE
----------------- 721 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 722 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 723 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 724 ----------------
SUCCESS
FAILURE
----------------- 725 ----------------
SUCCESS
FAILURE
----------------- 726 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 727 ----------------
SUCCESS
FAILURE
----------------- 728 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 729 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 730 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 731 ----------------
SUCCESS
FAILURE
----------------- 732 ----------------
SUCCESS
FAILURE
----------------- 733 ----------------
SUCCESS
FAILURE
----------------- 734 ----------------
SUCCESS
FAILURE
----------------- 735 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 736 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 737 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 738 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 739 ----------------
SUCCESS
FAILURE
----------------- 740 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 741 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 742 ----------------
SUCCESS
FAILURE
----------------- 743 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 744 ----------------
SUCCESS
FAILURE
----------------- 745 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 746 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 747 ----------------
SUCCESS
FAILURE
----------------- 748 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 749 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 750 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 751 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 752 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 753 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 754 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 755 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 756 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 757 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 758 ----------------
SUCCESS
FAILURE
----------------- 759 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 760 ----------------
SUCCESS
FAILURE
----------------- 761 ----------------
SUCCESS
FAILURE
----------------- 762 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 763 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 764 ----------------
SUCCESS
FAILURE
----------------- 765 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 766 ----------------
SUCCESS
FAILURE
----------------- 767 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 768 ----------------
SUCCESS
FAILURE
----------------- 769 ----------------
SUCCESS
FAILURE
----------------- 770 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 771 ----------------
SUCCESS
FAILURE
----------------- 772 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 773 ----------------
SUCCESS
FAILURE
----------------- 774 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 775 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 776 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 777 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 778 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 779 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 780 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 781 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 782 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 783 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 784 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 785 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 786 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 787 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 788 ----------------
SUCCESS
FAILURE
----------------- 789 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 790 ----------------
SUCCESS
FAILURE
----------------- 791 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 792 ----------------
SUCCESS
FAILURE
----------------- 793 ----------------
SUCCESS
FAILURE
----------------- 794 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 795 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 796 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 797 ----------------
SUCCESS
FAILURE
----------------- 798 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 799 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 800 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 801 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 802 ----------------
SUCCESS
FAILURE
----------------- 803 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 804 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 805 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 806 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 807 ----------------
SUCCESS
FAILURE
----------------- 808 ----------------
SUCCESS
FAILURE
----------------- 809 ----------------
SUCCESS
FAILURE
----------------- 810 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 811 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 812 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 813 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 814 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 815 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 816 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 817 ----------------
SUCCESS
FAILURE
----------------- 818 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 819 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 820 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 821 ----------------
SUCCESS
FAILURE
----------------- 822 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 823 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 824 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 825 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 826 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 827 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 828 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 829 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 830 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 831 ----------------
SUCCESS
FAILURE
----------------- 832 ----------------
SUCCESS
FAILURE
----------------- 833 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 834 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 835 ----------------
SUCCESS
FAILURE
----------------- 836 ----------------
SUCCESS
FAILURE
----------------- 837 ----------------
SUCCESS
FAILURE
----------------- 838 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 839 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 840 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 841 ----------------
SUCCESS
FAILURE
----------------- 842 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 843 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 844 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 845 ----------------
SUCCESS
FAILURE
----------------- 846 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 847 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 848 ----------------
SUCCESS
FAILURE
----------------- 849 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 850 ----------------
SUCCESS
FAILURE
----------------- 851 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 852 ----------------
SUCCESS
FAILURE
----------------- 853 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 854 ----------------
SUCCESS
FAILURE
----------------- 855 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 856 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 857 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 858 ----------------
SUCCESS
FAILURE
----------------- 859 ----------------
SUCCESS
FAILURE
----------------- 860 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 861 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 862 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 863 ----------------
SUCCESS
FAILURE
----------------- 864 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 865 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 866 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 867 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 868 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 869 ----------------
SUCCESS
FAILURE
----------------- 870 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 871 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 872 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 873 ----------------
SUCCESS
FAILURE
----------------- 874 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 875 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 876 ----------------
SUCCESS
FAILURE
----------------- 877 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 878 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 879 ----------------
SUCCESS
FAILURE
----------------- 880 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 881 ----------------
SUCCESS
FAILURE
----------------- 882 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 883 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 884 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 885 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 886 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 887 ----------------
SUCCESS
FAILURE
----------------- 888 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 889 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 890 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 891 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 892 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 893 ----------------
SUCCESS
FAILURE
----------------- 894 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 895 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 896 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 897 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 898 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 899 ----------------
SUCCESS
FAILURE
----------------- 900 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 901 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 902 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 903 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 904 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 905 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 906 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 907 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 908 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 909 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 910 ----------------
SUCCESS
FAILURE
----------------- 911 ----------------
SUCCESS
FAILURE
----------------- 912 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 913 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 914 ----------------
SUCCESS
FAILURE
----------------- 915 ----------------
SUCCESS
FAILURE
----------------- 916 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 917 ----------------
SUCCESS
FAILURE
----------------- 918 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 919 ----------------
SUCCESS
FAILURE
----------------- 920 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 921 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 922 ----------------
SUCCESS
FAILURE
----------------- 923 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 924 ----------------
SUCCESS
FAILURE
----------------- 925 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 926 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 927 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 928 ----------------
SUCCESS
FAILURE
----------------- 929 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 930 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 931 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 932 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 933 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 934 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 935 ----------------
SUCCESS
FAILURE
----------------- 936 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 937 ----------------
SUCCESS
FAILURE
----------------- 938 ----------------
SUCCESS
FAILURE
----------------- 939 ----------------
SUCCESS
FAILURE
----------------- 940 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 941 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 942 ----------------
SUCCESS
FAILURE
----------------- 943 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 944 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 945 ----------------
SUCCESS
FAILURE
----------------- 946 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 947 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 948 ----------------
SUCCESS
FAILURE
----------------- 949 ----------------
SUCCESS
FAILURE
----------------- 950 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 951 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 952 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 953 ----------------
SUCCESS
FAILURE
----------------- 954 ----------------
SUCCESS
FAILURE
----------------- 955 ----------------
SUCCESS
FAILURE
----------------- 956 ----------------
SUCCESS
FAILURE
----------------- 957 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 958 ----------------
SUCCESS
FAILURE
----------------- 959 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 960 ----------------
SUCCESS
Test 2 FAILURE
FAILURE
----------------- 961 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 962 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 963 ----------------
SUCCESS
FAILURE
----------------- 964 ----------------
SUCCESS
FAILURE
----------------- 965 ----------------
SUCCESS
FAILURE
----------------- 966 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 967 ----------------
SUCCESS
FAILURE
----------------- 968 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 969 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 970 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 971 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 972 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 973 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 974 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 975 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 976 ----------------
SUCCESS
FAILURE
----------------- 977 ----------------
SUCCESS
FAILURE
----------------- 978 ----------------
SUCCESS
FAILURE
----------------- 979 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 980 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 981 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 982 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 983 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 984 ----------------
SUCCESS
FAILURE
----------------- 985 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 986 ----------------
SUCCESS
FAILURE
----------------- 987 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 988 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 989 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 990 ----------------
SUCCESS
FAILURE
----------------- 991 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 992 ----------------
SUCCESS
FAILURE
----------------- 993 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 994 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 995 ----------------
SUCCESS
FAILURE
----------------- 996 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 997 ----------------
SUCCESS
FAILURE
----------------- 998 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 999 ----------------
SUCCESS
FAILURE
File 'dominion.c'
Lines executed:38.80% of 567
Branches executed:37.17% of 417
Taken at least once:29.98% of 417
Calls executed:33.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:54
        -:    0:Programs:13
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 9457695 returned 100% blocks executed 100%
  9457695:    8:int compare(const void* a, const void* b) {
  9457695:    8-block  0
  9457695:    9:  if (*(int*)a > *(int*)b)
  9457695:    9-block  0
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
  1260230:   10:    return 1;
  1260230:   10-block  0
  8197465:   11:  if (*(int*)a < *(int*)b)
  8197465:   11-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
    80495:   12:    return -1;
    80495:   12-block  0
  8116970:   13:  return 0;
  8116970:   13-block  0
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    $$$$$:   16-block  0
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
    $$$$$:   18-block  0
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   21-block  0
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
        -:   35:}
        -:   36:
function initializeGame called 6150 returned 100% blocks executed 94%
     6150:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
     6150:   37-block  0
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     6150:   44:  SelectStream(1);
     6150:   44-block  0
call    0 returned 100%
     6150:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     6150:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     6150:   48-block  0
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
    $$$$$:   50-block  0
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     6150:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    67650:   57:  for (i = 0; i < 10; i++)
     6150:   57-block  0
    61500:   57-block  1
    67650:   57-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   676500:   59:      for (j = 0; j < 10; j++)
    61500:   59-block  0
   615000:   59-block  1
   676500:   59-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   615000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
   615000:   61-block  0
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
   553500:   61-block  1
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
    $$$$$:   63-block  0
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     6150:   73:  if (numPlayers == 2)
     6150:   73-block  0
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        -:   74:    {
     2137:   75:      state->supplyCount[curse] = 10;
     2137:   75-block  0
        -:   76:    }
     4013:   77:  else if (numPlayers == 3)
     4013:   77-block  0
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
        -:   78:    {
     1980:   79:      state->supplyCount[curse] = 20;
     1980:   79-block  0
        -:   80:    }
        -:   81:  else
        -:   82:    {
     2033:   83:      state->supplyCount[curse] = 30;
     2033:   83-block  0
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     6150:   87:  if (numPlayers == 2)
     6150:   87-block  0
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        -:   88:    {
     2137:   89:      state->supplyCount[estate] = 8;
     2137:   90:      state->supplyCount[duchy] = 8;
     2137:   91:      state->supplyCount[province] = 8;
     2137:   91-block  0
        -:   92:    }
        -:   93:  else
        -:   94:    {
     4013:   95:      state->supplyCount[estate] = 12;
     4013:   96:      state->supplyCount[duchy] = 12;
     4013:   97:      state->supplyCount[province] = 12;
     4013:   97-block  0
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     6150:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     6150:  102:  state->supplyCount[silver] = 40;
     6150:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   129150:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
     6150:  106-block  0
   123000:  106-block  1
   129150:  106-block  2
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
  1014750:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
   123000:  108-block  0
   891750:  108-block  1
  1014750:  108-block  2
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   953250:  110:	  if (kingdomCards[j] == i)
   953250:  110-block  0
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    61500:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
    61500:  113-block  0
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    61398:  113-block  1
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:  114:		{
      408:  115:		  if (numPlayers == 2){ 
      204:  115-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      204:  115-block  1
      204:  116:		    state->supplyCount[i] = 8; 
      204:  116-block  0
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  118-block  0
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    61296:  122:		  state->supplyCount[i] = 10;
    61296:  122-block  0
        -:  123:		}
    61500:  124:	      break;
    61500:  124-block  0
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   891750:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    24496:  138:  for (i = 0; i < numPlayers; i++)
     6150:  138-block  0
    18346:  138-block  1
    24496:  138-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:    {
    18346:  140:      state->deckCount[i] = 0;
    73384:  141:      for (j = 0; j < 3; j++)
    18346:  141-block  0
    55038:  141-block  1
    73384:  141-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
    55038:  143:	  state->deck[i][j] = estate;
    55038:  144:	  state->deckCount[i]++;
        -:  145:	}
   146768:  146:      for (j = 3; j < 10; j++)
    18346:  146-block  0
   128422:  146-block  1
   146768:  146-block  2
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
   128422:  148:	  state->deck[i][j] = copper;	  state->deckCount[i]++;		
        -:  149:	}
        -:  150:    }
        -:  151:
        -:  152:  //shuffle player decks
    24496:  153:  for (i = 0; i < numPlayers; i++)
     6150:  153-block  0
    18346:  153-block  1
    24496:  153-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  154:    {
    18346:  155:      if ( shuffle(i, state) < 0 )
    18346:  155-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  156:	{
    #####:  157:	  return -1;
    $$$$$:  157-block  0
        -:  158:	}
        -:  159:    }
        -:  160:
        -:  161:  //draw player hands
    24496:  162:  for (i = 0; i < numPlayers; i++)
     6150:  162-block  0
    18346:  162-block  1
    24496:  162-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  163:    {  
        -:  164:      //initialize hand size to zero
    18346:  165:      state->handCount[i] = 0;
    18346:  166:      state->discardCount[i] = 0;
        -:  167:      //draw 5 cards
        -:  168:      // for (j = 0; j < 5; j++)
        -:  169:      //	{
        -:  170:      //	  drawCard(i, state);
        -:  171:      //	}
        -:  172:    }
        -:  173:  
        -:  174:  //set embargo tokens to 0 for all supply piles
   172200:  175:  for (i = 0; i <= treasure_map; i++)
     6150:  175-block  0
   166050:  175-block  1
   172200:  175-block  2
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  176:    {
   166050:  177:      state->embargoTokens[i] = 0;
        -:  178:    }
        -:  179:
        -:  180:  //initialize first player's turn
     6150:  181:  state->outpostPlayed = 0;
     6150:  182:  state->phase = 0;
     6150:  183:  state->numActions = 1;
     6150:  184:  state->numBuys = 1;
     6150:  185:  state->playedCardCount = 0;
     6150:  186:  state->whoseTurn = 0;
     6150:  187:  state->handCount[state->whoseTurn] = 0;
        -:  188:  //int it; move to top
        -:  189:
        -:  190:  //Moved draw cards to here, only drawing at the start of a turn
    36900:  191:  for (it = 0; it < 5; it++){
     6150:  191-block  0
    36900:  191-block  1
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    30750:  192:    drawCard(state->whoseTurn, state);
    30750:  192-block  0
call    0 returned 100%
        -:  193:  }
        -:  194:
     6150:  195:  updateCoins(state->whoseTurn, state, 0);
     6150:  195-block  0
call    0 returned 100%
        -:  196:
     6150:  197:  return 0;
        -:  198:}
        -:  199:
function shuffle called 1811413 returned 100% blocks executed 100%
  1811413:  200:int shuffle(int player, struct gameState *state) {
  1811413:  200-block  0
        -:  201: 
        -:  202:
        -:  203:  int newDeck[MAX_DECK];
  1811413:  204:  int newDeckPos = 0;
        -:  205:  int card;
        -:  206:  int i;
        -:  207:
  1811413:  208:  if (state->deckCount[player] < 1)
  1811413:  208-block  0
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
  1785172:  209:    return -1;
  1785172:  209-block  0
    26241:  210:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
    26241:  210-block  0
call    0 returned 100%
        -:  211:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  212:
  2209278:  213:  while (state->deckCount[player] > 0) {
  2209278:  213-block  0
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  2183037:  214:    card = floor(Random() * state->deckCount[player]);
  2183037:  214-block  0
call    0 returned 100%
  2183037:  215:    newDeck[newDeckPos] = state->deck[player][card];
  2183037:  216:    newDeckPos++;
170261050:  217:    for (i = card; i < state->deckCount[player]-1; i++) {
168078013:  217-block  0
170261050:  217-block  1
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
168078013:  218:      state->deck[player][i] = state->deck[player][i+1];
        -:  219:    }
  2183037:  220:    state->deckCount[player]--;
  2183037:  220-block  0
        -:  221:  }
  2209278:  222:  for (i = 0; i < newDeckPos; i++) {
    26241:  222-block  0
  2183037:  222-block  1
  2209278:  222-block  2
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  2183037:  223:    state->deck[player][i] = newDeck[i];
  2183037:  224:    state->deckCount[player]++;
        -:  225:  }
        -:  226:
  1811413:  227:  return 0;
    26241:  227-block  0
  1811413:  227-block  1
        -:  228:}
        -:  229:
function playCard called 0 returned 0% blocks executed 0%
    #####:  230:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
    $$$$$:  230-block  0
        -:  231:{	
        -:  232:  int card;
    #####:  233:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  234:
        -:  235:  //check if it is the right phase
    #####:  236:  if (state->phase != 0)
    $$$$$:  236-block  0
branch  0 never executed
branch  1 never executed
        -:  237:    {
    #####:  238:      return -1;
    $$$$$:  238-block  0
        -:  239:    }
        -:  240:	
        -:  241:  //check if player has enough actions
    #####:  242:  if ( state->numActions < 1 )
    $$$$$:  242-block  0
branch  0 never executed
branch  1 never executed
        -:  243:    {
    #####:  244:      return -1;
    $$$$$:  244-block  0
        -:  245:    }
        -:  246:	
        -:  247:  //get card played
    #####:  248:  card = handCard(handPos, state);
    $$$$$:  248-block  0
call    0 never executed
        -:  249:	
        -:  250:  //check if selected card is an action
    #####:  251:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  251-block  0
branch  2 never executed
branch  3 never executed
        -:  252:    {
    #####:  253:      return -1;
    $$$$$:  253-block  0
        -:  254:    }
        -:  255:	
        -:  256:  //play card
    #####:  257:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  257-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  258:    {
    #####:  259:      return -1;
    $$$$$:  259-block  0
        -:  260:    }
        -:  261:	
        -:  262:  //reduce number of actions
    #####:  263:  state->numActions--;
        -:  264:
        -:  265:  //update coins (Treasure cards may be added with card draws)
    #####:  266:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  266-block  0
call    0 never executed
        -:  267:	
    #####:  268:  return 0;
    $$$$$:  268-block  0
        -:  269:}
        -:  270:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  271:int buyCard(int supplyPos, struct gameState *state) {
    $$$$$:  271-block  0
    $$$$$:  271-block  1
        -:  272:  int who;
        -:  273:  if (DEBUG){
        -:  274:    printf("Entering buyCard...\n");
        -:  275:  }
        -:  276:
        -:  277:  // I don't know what to do about the phase thing.
        -:  278:
    #####:  279:  who = state->whoseTurn;
        -:  280:
    #####:  281:  if (state->numBuys < 1){
    $$$$$:  281-block  0
branch  0 never executed
branch  1 never executed
        -:  282:    if (DEBUG)
        -:  283:      printf("You do not have any buys left\n");
    #####:  284:    return -1;
    $$$$$:  284-block  0
    #####:  285:  } else if (supplyCount(supplyPos, state) <1){
    $$$$$:  285-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  286:    if (DEBUG)
        -:  287:      printf("There are not any of that type of card left\n");
    #####:  288:    return -1;
    $$$$$:  288-block  0
    #####:  289:  } else if (state->coins < getCost(supplyPos)){
    $$$$$:  289-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  290:    if (DEBUG) 
        -:  291:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  292:    return -1;
    $$$$$:  292-block  0
        -:  293:  } else {
    #####:  294:    state->phase=1;
        -:  295:    //state->supplyCount[supplyPos]--;
    #####:  296:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
    $$$$$:  296-block  0
call    0 never executed
        -:  297:  
    #####:  298:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  299:    state->numBuys--;
        -:  300:    if (DEBUG)
        -:  301:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  302:  }
        -:  303:
        -:  304:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  305:  //state->discardCount[who]++;
        -:  306:    
    #####:  307:  return 0;
    $$$$$:  307-block  0
        -:  308:}
        -:  309:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  310:int numHandCards(struct gameState *state) {
    $$$$$:  310-block  0
    #####:  311:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  311-block  0
call    0 never executed
        -:  312:}
        -:  313:
function handCard called 0 returned 0% blocks executed 0%
    #####:  314:int handCard(int handPos, struct gameState *state) {
    $$$$$:  314-block  0
    #####:  315:  int currentPlayer = whoseTurn(state);
    $$$$$:  315-block  0
call    0 never executed
    #####:  316:  return state->hand[currentPlayer][handPos];
        -:  317:}
        -:  318:
function supplyCount called 9060 returned 100% blocks executed 100%
     9060:  319:int supplyCount(int card, struct gameState *state) {
     9060:  319-block  0
     9060:  320:  return state->supplyCount[card];
     9060:  320-block  0
        -:  321:}
        -:  322:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  323:int fullDeckCount(int player, int card, struct gameState *state) {
    $$$$$:  323-block  0
        -:  324:  int i;
    #####:  325:  int count = 0;
        -:  326:
    #####:  327:  for (i = 0; i < state->deckCount[player]; i++)
    $$$$$:  327-block  0
    $$$$$:  327-block  1
    $$$$$:  327-block  2
branch  0 never executed
branch  1 never executed
        -:  328:    {
    #####:  329:      if (state->deck[player][i] == card) count++;
    $$$$$:  329-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  329-block  1
        -:  330:    }
        -:  331:
    #####:  332:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  332-block  0
    $$$$$:  332-block  1
    $$$$$:  332-block  2
branch  0 never executed
branch  1 never executed
        -:  333:    {
    #####:  334:      if (state->hand[player][i] == card) count++;
    $$$$$:  334-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  334-block  1
        -:  335:    }
        -:  336:
    #####:  337:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  337-block  0
    $$$$$:  337-block  1
    $$$$$:  337-block  2
branch  0 never executed
branch  1 never executed
        -:  338:    {
    #####:  339:      if (state->discard[player][i] == card) count++;
    $$$$$:  339-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  339-block  1
        -:  340:    }
        -:  341:
    #####:  342:  return count;
    $$$$$:  342-block  0
        -:  343:}
        -:  344:
function whoseTurn called 12084 returned 100% blocks executed 100%
    12084:  345:int whoseTurn(struct gameState *state) {
    12084:  345-block  0
    12084:  346:  return state->whoseTurn;
    12084:  346-block  0
        -:  347:}
        -:  348:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  349:int endTurn(struct gameState *state) {
    $$$$$:  349-block  0
        -:  350:  int k;
        -:  351:  int i;
    #####:  352:  int currentPlayer = whoseTurn(state);
    $$$$$:  352-block  0
call    0 never executed
        -:  353:  
        -:  354:  //Discard hand
    #####:  355:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  355-block  0
    $$$$$:  355-block  1
branch  0 never executed
branch  1 never executed
    #####:  356:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  357:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  358:  }
    #####:  359:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  360:    
        -:  361:  //Code for determining the player
    #####:  362:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  362-block  0
branch  0 never executed
branch  1 never executed
    #####:  363:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  363-block  0
        -:  364:  }
        -:  365:  else{
    #####:  366:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  366-block  0
        -:  367:  }
        -:  368:
    #####:  369:  state->outpostPlayed = 0;
    #####:  370:  state->phase = 0;
    #####:  371:  state->numActions = 1;
    #####:  372:  state->coins = 0;
    #####:  373:  state->numBuys = 1;
    #####:  374:  state->playedCardCount = 0;
    #####:  375:  state->handCount[state->whoseTurn] = 0;
        -:  376:
        -:  377:  //int k; move to top
        -:  378:  //Next player draws hand
    #####:  379:  for (k = 0; k < 5; k++){
    $$$$$:  379-block  0
    $$$$$:  379-block  1
branch  0 never executed
branch  1 never executed
    #####:  380:    drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  380-block  0
call    0 never executed
        -:  381:  }
        -:  382:
        -:  383:  //Update money
    #####:  384:  updateCoins(state->whoseTurn, state , 0);
    $$$$$:  384-block  0
call    0 never executed
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  389:int isGameOver(struct gameState *state) {
    $$$$$:  389-block  0
        -:  390:  int i;
        -:  391:  int j;
        -:  392:	
        -:  393:  //if stack of Province cards is empty, the game ends
    #####:  394:  if (state->supplyCount[province] == 0)
    $$$$$:  394-block  0
branch  0 never executed
branch  1 never executed
        -:  395:    {
    #####:  396:      return 1;
    $$$$$:  396-block  0
        -:  397:    }
        -:  398:
        -:  399:  //if three supply pile are at 0, the game ends
    #####:  400:  j = 0;
    #####:  401:  for (i = 0; i < 25; i++)
    $$$$$:  401-block  0
    $$$$$:  401-block  1
    $$$$$:  401-block  2
branch  0 never executed
branch  1 never executed
        -:  402:    {
    #####:  403:      if (state->supplyCount[i] == 0)
    $$$$$:  403-block  0
branch  0 never executed
branch  1 never executed
        -:  404:	{
    #####:  405:	  j++;
    $$$$$:  405-block  0
        -:  406:	}
        -:  407:    }
    #####:  408:  if ( j >= 3)
    $$$$$:  408-block  0
branch  0 never executed
branch  1 never executed
        -:  409:    {
    #####:  410:      return 1;
    $$$$$:  410-block  0
        -:  411:    }
        -:  412:
    #####:  413:  return 0;
    $$$$$:  413-block  0
        -:  414:}
        -:  415:
function scoreFor called 30 returned 100% blocks executed 38%
       30:  416:int scoreFor (int player, struct gameState *state) {
       30:  416-block  0
        -:  417:
        -:  418:  int i;
       30:  419:  int score = 0;
        -:  420:  //score from hand
      180:  421:  for (i = 0; i < state->handCount[player]; i++)
       30:  421-block  0
      150:  421-block  1
      180:  421-block  2
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  422:    {
      150:  423:      if (state->hand[player][i] == curse) { score = score - 1; };
      150:  423-block  0
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
       30:  423-block  1
      150:  424:      if (state->hand[player][i] == estate) { score = score + 1; };
      150:  424-block  0
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        6:  424-block  1
      150:  425:      if (state->hand[player][i] == duchy) { score = score + 3; };
      150:  425-block  0
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        6:  425-block  1
      150:  426:      if (state->hand[player][i] == province) { score = score + 6; };
      150:  426-block  0
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        6:  426-block  1
      150:  427:      if (state->hand[player][i] == great_hall) { score = score + 1; };
      150:  427-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    $$$$$:  427-block  1
      150:  428:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
      150:  428-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    $$$$$:  428-block  1
call    2 never executed
        -:  429:    }
        -:  430:
        -:  431:  //score from discard
       30:  432:  for (i = 0; i < state->discardCount[player]; i++)
       30:  432-block  0
    $$$$$:  432-block  1
       30:  432-block  2
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  433:    {
    #####:  434:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  434-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  434-block  1
    #####:  435:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
    #####:  436:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
    #####:  437:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
    #####:  438:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
    #####:  439:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
call    2 never executed
        -:  440:    }
        -:  441:
        -:  442:  //score from deck
       30:  443:  for (i = 0; i < state->discardCount[player]; i++)
       30:  443-block  0
    $$$$$:  443-block  1
       30:  443-block  2
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  444:    {
    #####:  445:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  445-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  445-block  1
    #####:  446:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
    #####:  447:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
    #####:  448:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
    #####:  449:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
    #####:  450:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
call    2 never executed
        -:  451:    }
        -:  452:
       30:  453:  return score;
       30:  453-block  0
        -:  454:}
        -:  455:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  456:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  456-block  0
        -:  457:  int i;	
        -:  458:  int j;
        -:  459:  int highScore;
        -:  460:  int currentPlayer;
        -:  461:
        -:  462:  //get score for each player
    #####:  463:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  463-block  0
    $$$$$:  463-block  1
    $$$$$:  463-block  2
branch  0 never executed
branch  1 never executed
        -:  464:    {
        -:  465:      //set unused player scores to -9999
    #####:  466:      if (i >= state->numPlayers)
    $$$$$:  466-block  0
branch  0 never executed
branch  1 never executed
        -:  467:	{
    #####:  468:	  players[i] = -9999;
    $$$$$:  468-block  0
        -:  469:	}
        -:  470:      else
        -:  471:	{
    #####:  472:	  players[i] = scoreFor (i, state);
    $$$$$:  472-block  0
call    0 never executed
        -:  473:	}
        -:  474:    }
        -:  475:
        -:  476:  //find highest score
    #####:  477:  j = 0;
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  478-block  0
    $$$$$:  478-block  1
    $$$$$:  478-block  2
branch  0 never executed
branch  1 never executed
        -:  479:    {
    #####:  480:      if (players[i] > players[j])
    $$$$$:  480-block  0
branch  0 never executed
branch  1 never executed
        -:  481:	{
    #####:  482:	  j = i;
    $$$$$:  482-block  0
        -:  483:	}
        -:  484:    }
    #####:  485:  highScore = players[j];
        -:  486:
        -:  487:  //add 1 to players who had less turns
    #####:  488:  currentPlayer = whoseTurn(state);
    $$$$$:  488-block  0
call    0 never executed
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  489-block  0
    $$$$$:  489-block  1
branch  0 never executed
branch  1 never executed
        -:  490:    {
    #####:  491:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  491-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  491-block  1
branch  2 never executed
branch  3 never executed
        -:  492:	{
    #####:  493:	  players[i]++;
    $$$$$:  493-block  0
        -:  494:	}
        -:  495:    }
        -:  496:
        -:  497:  //find new highest score
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  499-block  0
    $$$$$:  499-block  1
    $$$$$:  499-block  2
branch  0 never executed
branch  1 never executed
        -:  500:    {
    #####:  501:      if ( players[i] > players[j] )
    $$$$$:  501-block  0
branch  0 never executed
branch  1 never executed
        -:  502:	{
    #####:  503:	  j = i;
    $$$$$:  503-block  0
        -:  504:	}
        -:  505:    }
    #####:  506:  highScore = players[j];
        -:  507:
        -:  508:  //set winners in array to 1 and rest to 0
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  509-block  0
    $$$$$:  509-block  1
    $$$$$:  509-block  2
branch  0 never executed
branch  1 never executed
        -:  510:    {
    #####:  511:      if ( players[i] == highScore )
    $$$$$:  511-block  0
branch  0 never executed
branch  1 never executed
        -:  512:	{
    #####:  513:	  players[i] = 1;
    $$$$$:  513-block  0
        -:  514:	}
        -:  515:      else
        -:  516:	{
    #####:  517:	  players[i] = 0;
    $$$$$:  517-block  0
        -:  518:	}
        -:  519:    }
        -:  520:
    #####:  521:  return 0;
    $$$$$:  521-block  0
        -:  522:}
        -:  523:
function drawCard called 3219988 returned 100% blocks executed 100%
  3219988:  524:int drawCard(int player, struct gameState *state)
  3219988:  524-block  0
        -:  525:{	int count;
        -:  526:  int deckCounter;
  3219988:  527:  if (state->deckCount[player] <= 0){//Deck is empty
  3219988:  527-block  0
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
        -:  528:    
        -:  529:    //Step 1 Shuffle the discard pile back into a deck
        -:  530:    int i;
        -:  531:    //Move discard to deck
  2899505:  532:    for (i = 0; i < state->discardCount[player];i++){
   899928:  532-block  0
  1999577:  532-block  1
  2899505:  532-block  2
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
  1999577:  533:      state->deck[player][i] = state->discard[player][i];
  1999577:  534:      state->discard[player][i] = -1;
        -:  535:    }
        -:  536:
   899928:  537:    state->deckCount[player] = state->discardCount[player];
   899928:  538:    state->discardCount[player] = 0;//Reset discard
        -:  539:
        -:  540:    //Shufffle the deck
   899928:  541:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
   899928:  541-block  0
call    0 returned 100%
        -:  542:   
        -:  543:    if (DEBUG){//Debug statements
        -:  544:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  545:    }
        -:  546:    
   899928:  547:    state->discardCount[player] = 0;
        -:  548:
        -:  549:    //Step 2 Draw Card
   899928:  550:    count = state->handCount[player];//Get current player's hand count
        -:  551:    
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Current hand count: %d\n", count);
        -:  554:    }
        -:  555:    
   899928:  556:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  557:
   899928:  558:    if (deckCounter == 0)
   899928:  558-block  0
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
   892033:  559:      return -1;
   892033:  559-block  0
        -:  560:
     7895:  561:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     7895:  562:    state->deckCount[player]--;
     7895:  563:    state->handCount[player]++;//Increment hand count
     7895:  563-block  0
        -:  564:  }
        -:  565:
        -:  566:  else{
  2320060:  567:    int count = state->handCount[player];//Get current hand count for player
  2320060:  567-block  0
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
  2320060:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
  2320060:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  2320060:  575:    state->deckCount[player]--;
  2320060:  576:    state->handCount[player]++;//Increment hand count
  2320060:  576-block  0
        -:  577:  }
        -:  578:
  2327955:  579:  return 0;
  2327955:  579-block  0
        -:  580:}
        -:  581:
function getCost called 0 returned 0% blocks executed 0%
    #####:  582:int getCost(int cardNumber)
    $$$$$:  582-block  0
        -:  583:{
    #####:  584:  switch( cardNumber ) 
    $$$$$:  584-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  585:    {
        -:  586:    case curse:
    #####:  587:      return 0;
    $$$$$:  587-block  0
        -:  588:    case estate:
    #####:  589:      return 2;
    $$$$$:  589-block  0
        -:  590:    case duchy:
    #####:  591:      return 5;
    $$$$$:  591-block  0
        -:  592:    case province:
    #####:  593:      return 8;
    $$$$$:  593-block  0
        -:  594:    case copper:
    #####:  595:      return 0;
    $$$$$:  595-block  0
        -:  596:    case silver:
    #####:  597:      return 3;
    $$$$$:  597-block  0
        -:  598:    case gold:
    #####:  599:      return 6;
    $$$$$:  599-block  0
        -:  600:    case adventurer:
    #####:  601:      return 6;
    $$$$$:  601-block  0
        -:  602:    case council_room:
    #####:  603:      return 5;
    $$$$$:  603-block  0
        -:  604:    case feast:
    #####:  605:      return 4;
    $$$$$:  605-block  0
        -:  606:    case gardens:
    #####:  607:      return 4;
    $$$$$:  607-block  0
        -:  608:    case mine:
    #####:  609:      return 5;
    $$$$$:  609-block  0
        -:  610:    case remodel:
    #####:  611:      return 4;
    $$$$$:  611-block  0
        -:  612:    case smithy:
    #####:  613:      return 4;
    $$$$$:  613-block  0
        -:  614:    case village:
    #####:  615:      return 3;
    $$$$$:  615-block  0
        -:  616:    case baron:
    #####:  617:      return 4;
    $$$$$:  617-block  0
        -:  618:    case great_hall:
    #####:  619:      return 3;
    $$$$$:  619-block  0
        -:  620:    case minion:
    #####:  621:      return 5;
    $$$$$:  621-block  0
        -:  622:    case steward:
    #####:  623:      return 3;
    $$$$$:  623-block  0
        -:  624:    case tribute:
    #####:  625:      return 5;
    $$$$$:  625-block  0
        -:  626:    case ambassador:
    #####:  627:      return 3;
    $$$$$:  627-block  0
        -:  628:    case cutpurse:
    #####:  629:      return 4;
    $$$$$:  629-block  0
        -:  630:    case embargo: 
    #####:  631:      return 2;
    $$$$$:  631-block  0
        -:  632:    case outpost:
    #####:  633:      return 5;
    $$$$$:  633-block  0
        -:  634:    case salvager:
    #####:  635:      return 4;
    $$$$$:  635-block  0
        -:  636:    case sea_hag:
    #####:  637:      return 4;
    $$$$$:  637-block  0
        -:  638:    case treasure_map:
    #####:  639:      return 4;
    $$$$$:  639-block  0
        -:  640:    }
        -:  641:	
    #####:  642:  return -1;
    $$$$$:  642-block  0
        -:  643:}
        -:  644:
        -:  645:/****************************************************************************************************
        -:  646:* Start of card functions
        -:  647:*****************************************************************************************************/
        -:  648:
function playSmithy called 6 returned 100% blocks executed 100%
        6:  649:int playSmithy(struct gameState *state, int handPos) {
        6:  649-block  0
        -:  650:	//+3 Cards
        6:  651:	int currentPlayer = whoseTurn(state);
        6:  651-block  0
call    0 returned 100%
        -:  652:	int i;
       30:  653:    for (i = 0; i <= 3; i++)
       30:  653-block  0
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  654:	{
       24:  655:		drawCard(currentPlayer, state);
       24:  655-block  0
call    0 returned 100%
        -:  656:	}
        -:  657:			
        -:  658:	//discard card from hand
        6:  659:	discardCard(handPos, currentPlayer, state, 1);
        6:  659-block  0
call    0 returned 100%
        6:  660:	return 0;
        -:  661:}
        -:  662:
function playAdventurer called 3018 returned 100% blocks executed 100%
     3018:  663:int playAdventurer(struct gameState *state) {
     3018:  663-block  0
     3018:  664:	int currentPlayer = whoseTurn(state);
     3018:  664-block  0
call    0 returned 100%
     3018:  665:	int drawntreasure =0;
        -:  666:	int cardDrawn;
        -:  667:	int temphand[MAX_HAND]; 
     3018:  668:	int z = 0;
        -:  669:
  3171086:  670:	while(drawntreasure<2){
  3171086:  670-block  0
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  3168068:  671:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
  3168068:  671-block  0
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
   893139:  672:		  shuffle(currentPlayer, state);
   893139:  672-block  0
call    0 returned 100%
        -:  673:		}
  3168068:  674:		drawCard(currentPlayer, state);
  3168068:  674-block  0
call    0 returned 100%
  3168068:  675:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-2];//top card of hand is most recently drawn card.
  3168068:  676:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
  3162134:  676-block  0
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
  3162066:  676-block  1
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
     6036:  677:		  drawntreasure++;
     6036:  677-block  0
        -:  678:    }
        -:  679:		else{
  3162032:  680:      z++;
  3162032:  681:		  temphand[z]=cardDrawn;
  3162032:  682:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
  3162032:  682-block  0
        -:  683:    }
        -:  684:  }
   772174:  685:  while(z>=0){
     3018:  685-block  0
   772174:  685-block  1
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   769156:  686:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
   769156:  687:    z=z-1;
   769156:  687-block  0
        -:  688:  }
     3018:  689:  return 0;
     3018:  689-block  0
        -:  690:}
        -:  691:
function playMine called 0 returned 0% blocks executed 0%
    #####:  692:int playMine(struct gameState *state, int choice1, int choice2, int handPos) {
    $$$$$:  692-block  0
    #####:  693:	int currentPlayer = whoseTurn(state);
    $$$$$:  693-block  0
call    0 never executed
        -:  694:	int i, j;
    #####:  695:	int z = 0;
    #####:  696:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  697:
    #####:  698:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
    $$$$$:  698-block  0
branch  2 never executed
branch  3 never executed
        -:  699:	{
    #####:  700:	  return -1;
    $$$$$:  700-block  0
        -:  701:	}
        -:  702:
    #####:  703:	if (choice2 > z || choice2 < curse)
    $$$$$:  703-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  703-block  1
branch  2 never executed
branch  3 never executed
        -:  704:	{
    #####:  705:		return -1;
    $$$$$:  705-block  0
        -:  706:	}
        -:  707:
    #####:  708:	if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  708-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  709:	{
    #####:  710:		return -1;
    $$$$$:  710-block  0
        -:  711:	}
        -:  712:
    #####:  713:	gainCard(choice1, state, 2, currentPlayer);
    $$$$$:  713-block  0
call    0 never executed
        -:  714:
        -:  715:	//discard card from hand
    #####:  716:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  717:
        -:  718:	//discard trashed card
    #####:  719:	for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  719-block  0
    $$$$$:  719-block  1
branch  0 never executed
branch  1 never executed
        -:  720:	{
    #####:  721:		if (state->hand[currentPlayer][i] == j)
    $$$$$:  721-block  0
branch  0 never executed
branch  1 never executed
        -:  722:		{
    #####:  723:			discardCard(i, currentPlayer, state, 0);			
    $$$$$:  723-block  0
call    0 never executed
    #####:  724:			break;
        -:  725:		}
        -:  726:	}
        -:  727:		
    #####:  728:	return 0;
    $$$$$:  728-block  0
        -:  729:}
        -:  730:
function playVillage called 3012 returned 100% blocks executed 100%
     3012:  731:int playVillage(struct gameState *state, int handPos) {
     3012:  731-block  0
     3012:  732:	int currentPlayer = whoseTurn(state);
     3012:  732-block  0
call    0 returned 100%
        -:  733:
        -:  734:	//+1 Card
     3012:  735:	drawCard(currentPlayer, state);
call    0 returned 100%
        -:  736:
        -:  737:	//+2 Actions
     3012:  738:	state->numActions = state->numActions + 2;
        -:  739:
        -:  740:	//discard played card from hand
     3012:  741:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     3012:  742:	return 0;
        -:  743:}
        -:  744:
function playRemodel called 0 returned 0% blocks executed 0%
    #####:  745:int playRemodel(struct gameState *state, int choice1, int choice2, int handPos) {
    $$$$$:  745-block  0
        -:  746:	int i, j;
    #####:  747:	int currentPlayer = whoseTurn(state);
    $$$$$:  747-block  0
call    0 never executed
        -:  748: 
        -:  749:
    #####:  750:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  751:
    #####:  752:	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  753:	{
    #####:  754:		return -1;
    $$$$$:  754-block  0
        -:  755:	}
        -:  756:
    #####:  757:	gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  757-block  0
call    0 never executed
        -:  758:
        -:  759:	//discard card from hand
    #####:  760:	discardCard(handPos+1, currentPlayer, state, 0);
call    0 never executed
        -:  761:
        -:  762:	//discard trashed card
    #####:  763:	for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  763-block  0
    $$$$$:  763-block  1
branch  0 never executed
branch  1 never executed
        -:  764:		{
    #####:  765:		if (state->hand[currentPlayer][i] == j)
    $$$$$:  765-block  0
branch  0 never executed
branch  1 never executed
        -:  766:		{
    #####:  767:			discardCard(i+1, currentPlayer, state, 0);			
    $$$$$:  767-block  0
call    0 never executed
    #####:  768:			break;
        -:  769:		}
        -:  770:	}
        -:  771:
    #####:  772:	return 0;
    $$$$$:  772-block  0
        -:  773:}
        -:  774:
function cardEffect called 6048 returned 100% blocks executed 17%
     6048:  775:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
     6048:  775-block  0
        -:  776:{
        -:  777:  int i;
        -:  778:  int j;
        -:  779:  int k;
        -:  780:  int x;
        -:  781:  int index;
     6048:  782:  int currentPlayer = whoseTurn(state);
     6048:  782-block  0
call    0 returned 100%
     6048:  783:  int nextPlayer = currentPlayer + 1;
        -:  784:
     6048:  785:  int tributeRevealedCards[2] = {-1, -1};
        -:  786:  int temphand[MAX_HAND];// moved above the if statement
     6048:  787:  int drawntreasure=0;
        -:  788:  int cardDrawn;
     6048:  789:  int z = 0;// this is the counter for the temp hand
     6048:  790:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
     2105:  791:    nextPlayer = 0;
     2105:  791-block  0
        -:  792:  }
        -:  793:  
        -:  794:	
        -:  795:  //uses switch to select card and perform actions
     6048:  796:  switch( card ) 
     6048:  796-block  0
branch  0 taken 50%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 1%
branch  7 taken 50%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 1%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  797:    {
        -:  798:    case adventurer:
     3018:  799:      playAdventurer(state);
     3018:  799-block  0
call    0 returned 100%
        -:  800:			
        -:  801:    case council_room:
        -:  802:      //+4 Cards
    15090:  803:      for (i = 0; i < 4; i++)
     3018:  803-block  0
    15090:  803-block  1
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  804:	{
    12072:  805:	  drawCard(currentPlayer, state);
    12072:  805-block  0
call    0 returned 100%
        -:  806:	}
        -:  807:			
        -:  808:      //+1 Buy
     3018:  809:      state->numBuys++;
        -:  810:			
        -:  811:      //Each other player draws a card
    12086:  812:      for (i = 0; i < state->numPlayers; i++)
     3018:  812-block  0
     9068:  812-block  1
    12086:  812-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  813:	{
     9068:  814:	  if ( i != currentPlayer )
     9068:  814-block  0
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  815:	    {
     6050:  816:	      drawCard(i, state);
     6050:  816-block  0
call    0 returned 100%
        -:  817:	    }
        -:  818:	}
        -:  819:			
        -:  820:      //put played card in played card pile
     3018:  821:      discardCard(handPos, currentPlayer, state, 0);
     3018:  821-block  0
call    0 returned 100%
        -:  822:			
     3018:  823:      return 0;
        -:  824:			
        -:  825:    case feast:
        -:  826:      //gain card with cost up to 5
        -:  827:      //Backup hand
    #####:  828:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  828-block  0
    $$$$$:  828-block  1
    $$$$$:  828-block  2
branch  0 never executed
branch  1 never executed
    #####:  829:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  830:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  831:      }
        -:  832:      //Backup hand
        -:  833:
        -:  834:      //Update Coins for Buy
    #####:  835:      updateCoins(currentPlayer, state, 5);
    $$$$$:  835-block  0
call    0 never executed
    #####:  836:      x = 1;//Condition to loop on
    #####:  837:      while( x == 1) {//Buy one card
    $$$$$:  837-block  0
branch  0 never executed
branch  1 never executed
    #####:  838:	if (supplyCount(choice1, state) <= 0){
    $$$$$:  838-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  839:	  if (DEBUG)
        -:  840:	    printf("None of that card left, sorry!\n");
        -:  841:
        -:  842:	  if (DEBUG){
        -:  843:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  844:	  }
        -:  845:	}
    #####:  846:	else if (state->coins < getCost(choice1)){
    $$$$$:  846-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  847:	  printf("That card is too expensive!\n");
    $$$$$:  847-block  0
call    0 never executed
        -:  848:
        -:  849:	  if (DEBUG){
        -:  850:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  851:	  }
        -:  852:	}
        -:  853:	else{
        -:  854:
        -:  855:	  if (DEBUG){
        -:  856:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  857:	  }
        -:  858:
    #####:  859:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  859-block  0
call    0 never executed
    #####:  860:	  x = 0;//No more buying cards
        -:  861:
        -:  862:	  if (DEBUG){
        -:  863:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  864:	  }
        -:  865:
        -:  866:	}
        -:  867:      }     
        -:  868:
        -:  869:      //Reset Hand
    #####:  870:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  870-block  0
    $$$$$:  870-block  1
    $$$$$:  870-block  2
branch  0 never executed
branch  1 never executed
    #####:  871:	state->hand[currentPlayer][i] = temphand[i];
    #####:  872:	temphand[i] = -1;
        -:  873:      }
        -:  874:      //Reset Hand
        -:  875:      			
    #####:  876:      return 0;
    $$$$$:  876-block  0
        -:  877:			
        -:  878:    case gardens:
    #####:  879:      return -1;
    $$$$$:  879-block  0
        -:  880:			
        -:  881:    case mine:
    #####:  882:   	  playMine(state, choice1, choice2, handPos);
    $$$$$:  882-block  0
call    0 never executed
        -:  883:			
        -:  884:    case remodel:
    #####:  885:      playRemodel(state, choice1, choice2, handPos);
    $$$$$:  885-block  0
call    0 never executed
        -:  886:		
        -:  887:    case smithy:
        6:  888:      playSmithy(state, handPos);
        6:  888-block  0
call    0 returned 100%
        -:  889:		
        -:  890:    case village:
     3012:  891:      playVillage(state, handPos);
     3012:  891-block  0
call    0 returned 100%
        -:  892:		
        -:  893:    case baron:
     3012:  894:      state->numBuys++;//Increase buys by 1!
     3012:  895:      if (choice1 > 0){//Boolean true or going to discard an estate
     3012:  895-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  896:	int p = 0;//Iterator for hand!
    #####:  897:	int card_not_discarded = 1;//Flag for discard set!
    #####:  898:	while(card_not_discarded){
    $$$$$:  898-block  0
    $$$$$:  898-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  898-block  2
    #####:  899:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  899-block  0
branch  0 never executed
branch  1 never executed
    #####:  900:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  901:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  902:	    state->discardCount[currentPlayer]++;
    #####:  903:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  903-block  0
    $$$$$:  903-block  1
    $$$$$:  903-block  2
branch  0 never executed
branch  1 never executed
    #####:  904:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  905:	    }
    #####:  906:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  907:	    state->handCount[currentPlayer]--;
    #####:  908:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  908-block  0
        -:  909:	  }
    #####:  910:	  else if (p > state->handCount[currentPlayer]){
    $$$$$:  910-block  0
branch  0 never executed
branch  1 never executed
        -:  911:	    if(DEBUG) {
        -:  912:	      printf("No estate cards in your hand, invalid choice\n");
        -:  913:	      printf("Must gain an estate if there are any\n");
        -:  914:	    }
    #####:  915:	    if (supplyCount(estate, state) > 0){
    $$$$$:  915-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  916:	      gainCard(estate, state, 0, currentPlayer);
    $$$$$:  916-block  0
call    0 never executed
    #####:  917:	      state->supplyCount[estate]--;//Decrement estates
    #####:  918:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  919:		isGameOver(state);
    $$$$$:  919-block  0
call    0 never executed
        -:  920:	      }
        -:  921:	    }
    #####:  922:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  922-block  0
        -:  923:	  }
        -:  924:			    
        -:  925:	  else{
    #####:  926:	    p++;//Next card
    $$$$$:  926-block  0
        -:  927:	  }
        -:  928:	}
        -:  929:      }
        -:  930:			    
        -:  931:      else{
     3012:  932:	if (supplyCount(estate, state) > 0){
     3012:  932-block  0
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     3012:  933:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
     3012:  933-block  0
call    0 returned 100%
     3012:  934:	  state->supplyCount[estate]--;//Decrement Estates
     3012:  935:	  if (supplyCount(estate, state) == 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  936:	    isGameOver(state);
    $$$$$:  936-block  0
call    0 never executed
        -:  937:	  }
        -:  938:	}
        -:  939:      }
        -:  940:	    
        -:  941:      
     3012:  942:      return 0;
     3012:  942-block  0
        -:  943:		
        -:  944:    case great_hall:
        -:  945:      //+1 Card
    #####:  946:      drawCard(currentPlayer, state);
    $$$$$:  946-block  0
call    0 never executed
        -:  947:			
        -:  948:      //+1 Actions
    #####:  949:      state->numActions++;
        -:  950:			
        -:  951:      //discard card from hand
    #####:  952:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  953:      return 0;
        -:  954:		
        -:  955:    case minion:
        -:  956:      //+1 action
    #####:  957:      state->numActions++;
        -:  958:			
        -:  959:      //discard card from hand
    #####:  960:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  960-block  0
call    0 never executed
        -:  961:			
    #####:  962:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  963:	{
    #####:  964:	  state->coins = state->coins + 2;
    $$$$$:  964-block  0
        -:  965:	}
        -:  966:			
    #####:  967:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  967-block  0
branch  0 never executed
branch  1 never executed
        -:  968:	{
        -:  969:	  //discard hand
    #####:  970:	  while(numHandCards(state) > 0)
    $$$$$:  970-block  0
    $$$$$:  970-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  971:	    {
    #####:  972:	      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  972-block  0
call    0 never executed
        -:  973:	    }
        -:  974:				
        -:  975:	  //draw 4
    #####:  976:	  for (i = 0; i < 4; i++)
    $$$$$:  976-block  0
    $$$$$:  976-block  1
branch  0 never executed
branch  1 never executed
        -:  977:	    {
    #####:  978:	      drawCard(currentPlayer, state);
    $$$$$:  978-block  0
call    0 never executed
        -:  979:	    }
        -:  980:				
        -:  981:	  //other players discard hand and redraw if hand size > 4
    #####:  982:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$:  982-block  0
    $$$$$:  982-block  1
    $$$$$:  982-block  2
branch  0 never executed
branch  1 never executed
        -:  983:	    {
    #####:  984:	      if (i != currentPlayer)
    $$$$$:  984-block  0
branch  0 never executed
branch  1 never executed
        -:  985:		{
    #####:  986:		  if ( state->handCount[i] > 4 )
    $$$$$:  986-block  0
branch  0 never executed
branch  1 never executed
        -:  987:		    {
        -:  988:		      //discard hand
    #####:  989:		      while( state->handCount[i] > 0 )
    $$$$$:  989-block  0
    $$$$$:  989-block  1
branch  0 never executed
branch  1 never executed
        -:  990:			{
    #####:  991:			  discardCard(handPos, i, state, 0);
    $$$$$:  991-block  0
call    0 never executed
        -:  992:			}
        -:  993:							
        -:  994:		      //draw 4
    #####:  995:		      for (j = 0; j < 4; j++)
    $$$$$:  995-block  0
    $$$$$:  995-block  1
branch  0 never executed
branch  1 never executed
        -:  996:			{
    #####:  997:			  drawCard(i, state);
    $$$$$:  997-block  0
call    0 never executed
        -:  998:			}
        -:  999:		    }
        -: 1000:		}
        -: 1001:	    }
        -: 1002:				
        -: 1003:	}
    #####: 1004:      return 0;
    $$$$$: 1004-block  0
        -: 1005:		
        -: 1006:    case steward:
       18: 1007:      if (choice1 == 1)
       18: 1007-block  0
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1008:	{
        -: 1009:	  //+2 cards
        6: 1010:	  drawCard(currentPlayer, state);
        6: 1010-block  0
call    0 returned 100%
        6: 1011:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1012:	}
       12: 1013:      else if (choice1 == 2)
       12: 1013-block  0
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1014:	{
        -: 1015:	  //+2 coins
        6: 1016:	  state->coins = state->coins + 2;
        6: 1016-block  0
        -: 1017:	}
        -: 1018:      else
        -: 1019:	{
        -: 1020:	  //trash 2 cards in hand
        6: 1021:	  discardCard(choice2, currentPlayer, state, 1);
        6: 1021-block  0
call    0 returned 100%
        6: 1022:	  discardCard(choice3, currentPlayer, state, 1);
call    0 returned 100%
        -: 1023:	}
        -: 1024:			
        -: 1025:      //discard card from hand
       18: 1026:      discardCard(handPos, currentPlayer, state, 0);
       18: 1026-block  0
call    0 returned 100%
       18: 1027:      return 0;
        -: 1028:		
        -: 1029:    case tribute:
    #####: 1030:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1030-block  0
branch  0 never executed
branch  1 never executed
    #####: 1031:	if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1031-block  0
branch  0 never executed
branch  1 never executed
    #####: 1032:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1033:	  state->deckCount[nextPlayer]--;
    $$$$$: 1033-block  0
        -: 1034:	}
    #####: 1035:	else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1035-block  0
branch  0 never executed
branch  1 never executed
    #####: 1036:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1037:	  state->discardCount[nextPlayer]--;
    $$$$$: 1037-block  0
        -: 1038:	}
        -: 1039:	else{
        -: 1040:	  //No Card to Reveal
        -: 1041:	  if (DEBUG){
        -: 1042:	    printf("No cards to reveal\n");
        -: 1043:	  }
        -: 1044:	}
        -: 1045:      }
        -: 1046:	    
        -: 1047:      else{
    #####: 1048:	if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1048-block  0
branch  0 never executed
branch  1 never executed
    #####: 1049:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1049-block  0
    $$$$$: 1049-block  1
    $$$$$: 1049-block  2
branch  0 never executed
branch  1 never executed
    #####: 1050:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1051:	    state->deckCount[nextPlayer]++;
    #####: 1052:	    state->discard[nextPlayer][i] = -1;
    #####: 1053:	    state->discardCount[nextPlayer]--;
        -: 1054:	  }
        -: 1055:			    
    #####: 1056:	  shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$: 1056-block  0
call    0 never executed
        -: 1057:	} 
    #####: 1058:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1059:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1060:	state->deckCount[nextPlayer]--;
    #####: 1061:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1062:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1063:	state->deckCount[nextPlayer]--;
    $$$$$: 1063-block  0
        -: 1064:      }    
        -: 1065:		       
    #####: 1066:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1066-block  0
branch  0 never executed
branch  1 never executed
    #####: 1067:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1068:	state->playedCardCount++;
    #####: 1069:	tributeRevealedCards[1] = -1;
    $$$$$: 1069-block  0
        -: 1070:      }
        -: 1071:
    #####: 1072:      for (i = 0; i <= 2; i ++){
    $$$$$: 1072-block  0
    $$$$$: 1072-block  1
    $$$$$: 1072-block  2
branch  0 never executed
branch  1 never executed
    #####: 1073:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1073-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1073-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1073-block  2
branch  4 never executed
branch  5 never executed
    #####: 1074:	  state->coins += 2;
    $$$$$: 1074-block  0
        -: 1075:	}
        -: 1076:		    
    #####: 1077:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1077-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1077-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1077-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1077-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1077-block  4
branch  8 never executed
branch  9 never executed
    #####: 1078:	  drawCard(currentPlayer, state);
    $$$$$: 1078-block  0
call    0 never executed
    #####: 1079:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1080:	}
        -: 1081:	else{//Action Card
    #####: 1082:	  state->numActions = state->numActions + 2;
    $$$$$: 1082-block  0
        -: 1083:	}
        -: 1084:      }
        -: 1085:	    
    #####: 1086:      return 0;
    $$$$$: 1086-block  0
        -: 1087:		
        -: 1088:    case ambassador:
    #####: 1089:      j = 0;		//used to check if player has enough cards to discard
        -: 1090:
    #####: 1091:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1091-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1091-block  1
branch  2 never executed
branch  3 never executed
        -: 1092:	{
    #####: 1093:	  return -1;				
    $$$$$: 1093-block  0
        -: 1094:	}
        -: 1095:
    #####: 1096:      if (choice1 == handPos)
    $$$$$: 1096-block  0
branch  0 never executed
branch  1 never executed
        -: 1097:	{
    #####: 1098:	  return -1;
    $$$$$: 1098-block  0
        -: 1099:	}
        -: 1100:
    #####: 1101:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1101-block  0
    $$$$$: 1101-block  1
    $$$$$: 1101-block  2
branch  0 never executed
branch  1 never executed
        -: 1102:	{
    #####: 1103:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1103-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1103-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1103-block  2
branch  4 never executed
branch  5 never executed
        -: 1104:	    {
    #####: 1105:	      j++;
    $$$$$: 1105-block  0
        -: 1106:	    }
        -: 1107:	}
    #####: 1108:      if (j < choice2)
    $$$$$: 1108-block  0
branch  0 never executed
branch  1 never executed
        -: 1109:	{
    #####: 1110:	  return -1;				
    $$$$$: 1110-block  0
        -: 1111:	}
        -: 1112:
        -: 1113:      if (DEBUG) 
        -: 1114:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1115:
        -: 1116:      //increase supply count for choosen card by amount being discarded
    #####: 1117:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1118:			
        -: 1119:      //each other player gains a copy of revealed card
    #####: 1120:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1120-block  0
    $$$$$: 1120-block  1
    $$$$$: 1120-block  2
branch  0 never executed
branch  1 never executed
        -: 1121:	{
    #####: 1122:	  if (i != currentPlayer)
    $$$$$: 1122-block  0
branch  0 never executed
branch  1 never executed
        -: 1123:	    {
    #####: 1124:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1124-block  0
call    0 never executed
        -: 1125:	    }
        -: 1126:	}
        -: 1127:
        -: 1128:      //discard played card from hand
    #####: 1129:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1129-block  0
call    0 never executed
        -: 1130:
        -: 1131:      //trash copies of cards returned to supply
    #####: 1132:      for (j = 0; j < choice2; j++)
    $$$$$: 1132-block  0
    $$$$$: 1132-block  1
branch  0 never executed
branch  1 never executed
        -: 1133:	{
    #####: 1134:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1134-block  0
    $$$$$: 1134-block  1
    $$$$$: 1134-block  2
branch  0 never executed
branch  1 never executed
        -: 1135:	    {
    #####: 1136:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1136-block  0
branch  0 never executed
branch  1 never executed
        -: 1137:		{
    #####: 1138:		  discardCard(i, currentPlayer, state, 1);
    $$$$$: 1138-block  0
call    0 never executed
    #####: 1139:		  break;
        -: 1140:		}
        -: 1141:	    }
        -: 1142:	}			
        -: 1143:
    #####: 1144:      return 0;
    $$$$$: 1144-block  0
        -: 1145:		
        -: 1146:    case cutpurse:
        -: 1147:
    #####: 1148:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1148-block  0
call    0 never executed
    #####: 1149:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1149-block  0
    $$$$$: 1149-block  1
branch  0 never executed
branch  1 never executed
        -: 1150:	{
    #####: 1151:	  if (i != currentPlayer)
    $$$$$: 1151-block  0
branch  0 never executed
branch  1 never executed
        -: 1152:	    {
    #####: 1153:	      for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1153-block  0
    $$$$$: 1153-block  1
    $$$$$: 1153-block  2
branch  0 never executed
branch  1 never executed
        -: 1154:		{
    #####: 1155:		  if (state->hand[i][j] == copper)
    $$$$$: 1155-block  0
branch  0 never executed
branch  1 never executed
        -: 1156:		    {
    #####: 1157:		      discardCard(j, i, state, 0);
    $$$$$: 1157-block  0
call    0 never executed
    #####: 1158:		      break;
        -: 1159:		    }
    #####: 1160:		  if (j == state->handCount[i])
    $$$$$: 1160-block  0
branch  0 never executed
branch  1 never executed
        -: 1161:		    {
    #####: 1162:		      for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1162-block  0
    $$$$$: 1162-block  1
    $$$$$: 1162-block  2
branch  0 never executed
branch  1 never executed
        -: 1163:			{
        -: 1164:			  if (DEBUG)
        -: 1165:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1166:			}	
    #####: 1167:		      break;
    $$$$$: 1167-block  0
        -: 1168:		    }		
        -: 1169:		}
        -: 1170:					
        -: 1171:	    }
        -: 1172:				
        -: 1173:	}				
        -: 1174:
        -: 1175:      //discard played card from hand
    #####: 1176:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1176-block  0
call    0 never executed
        -: 1177:
    #####: 1178:      return 0;
        -: 1179:
        -: 1180:		
        -: 1181:    case embargo: 
        -: 1182:      //+2 Coins
    #####: 1183:      state->coins = state->coins + 2;
        -: 1184:			
        -: 1185:      //see if selected pile is in play
    #####: 1186:      if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1186-block  0
branch  0 never executed
branch  1 never executed
        -: 1187:	{
    #####: 1188:	  return -1;
    $$$$$: 1188-block  0
        -: 1189:	}
        -: 1190:			
        -: 1191:      //add embargo token to selected supply pile
    #####: 1192:      state->embargoTokens[choice1]++;
        -: 1193:			
        -: 1194:      //trash card
    #####: 1195:      discardCard(handPos, currentPlayer, state, 1);		
    $$$$$: 1195-block  0
call    0 never executed
    #####: 1196:      return 0;
        -: 1197:		
        -: 1198:    case outpost:
        -: 1199:      //set outpost flag
    #####: 1200:      state->outpostPlayed++;
        -: 1201:			
        -: 1202:      //discard card
    #####: 1203:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1203-block  0
call    0 never executed
    #####: 1204:      return 0;
        -: 1205:		
        -: 1206:    case salvager:
        -: 1207:      //+1 buy
    #####: 1208:      state->numBuys++;
        -: 1209:			
    #####: 1210:      if (choice1)
    $$$$$: 1210-block  0
branch  0 never executed
branch  1 never executed
        -: 1211:	{
        -: 1212:	  //gain coins equal to trashed card
    #####: 1213:	  state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1213-block  0
call    0 never executed
call    1 never executed
        -: 1214:	  //trash card
    #####: 1215:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1216:	}
        -: 1217:			
        -: 1218:      //discard card
    #####: 1219:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1219-block  0
call    0 never executed
    #####: 1220:      return 0;
        -: 1221:		
        -: 1222:    case sea_hag:
    #####: 1223:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1223-block  0
    $$$$$: 1223-block  1
    $$$$$: 1223-block  2
branch  0 never executed
branch  1 never executed
    #####: 1224:	if (i != currentPlayer){
    $$$$$: 1224-block  0
branch  0 never executed
branch  1 never executed
    #####: 1225:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1226:	  state->discardCount[i]++;
    #####: 1227:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1227-block  0
        -: 1228:	}
        -: 1229:      }
    #####: 1230:      return 0;
    $$$$$: 1230-block  0
        -: 1231:		
        -: 1232:    case treasure_map:
        -: 1233:      //search hand for another treasure_map
    #####: 1234:      index = -1;
    #####: 1235:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1235-block  0
    $$$$$: 1235-block  1
    $$$$$: 1235-block  2
branch  0 never executed
branch  1 never executed
        -: 1236:	{
    #####: 1237:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1237-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1237-block  1
branch  2 never executed
branch  3 never executed
        -: 1238:	    {
    #####: 1239:	      index = i;
    #####: 1240:	      break;
    $$$$$: 1240-block  0
        -: 1241:	    }
        -: 1242:	}
    #####: 1243:      if (index > -1)
    $$$$$: 1243-block  0
branch  0 never executed
branch  1 never executed
        -: 1244:	{
        -: 1245:	  //trash both treasure cards
    #####: 1246:	  discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1246-block  0
call    0 never executed
    #####: 1247:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1248:
        -: 1249:	  //gain 4 Gold cards
    #####: 1250:	  for (i = 0; i < 4; i++)
    $$$$$: 1250-block  0
branch  0 never executed
branch  1 never executed
        -: 1251:	    {
    #####: 1252:	      gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1252-block  0
call    0 never executed
        -: 1253:	    }
        -: 1254:				
        -: 1255:	  //return success
    #####: 1256:	  return 1;
    $$$$$: 1256-block  0
        -: 1257:	}
        -: 1258:			
        -: 1259:      //no second treasure_map found in hand
    #####: 1260:      return -1;
    $$$$$: 1260-block  0
        -: 1261:    }
        -: 1262:	
     6048: 1263:  return -1;
    $$$$$: 1263-block  0
     6048: 1263-block  1
        -: 1264:}
        -: 1265:
function discardCard called 6114 returned 100% blocks executed 89%
     6114: 1266:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
     6114: 1266-block  0
        -: 1267:{
        -: 1268:	
        -: 1269:  //if card is not trashed, added to Played pile 
     6114: 1270:  if (trashFlag < 1)
     6114: 1270-block  0
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -: 1271:    {
        -: 1272:      //add card to played pile
     6090: 1273:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     6090: 1274:      state->playedCardCount++;
     6090: 1274-block  0
        -: 1275:    }
        -: 1276:	
        -: 1277:  //set played card to -1
     6114: 1278:  state->hand[currentPlayer][handPos] = -1;
        -: 1279:	
        -: 1280:  //remove card from player's hand
     6114: 1281:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
     6114: 1281-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1282:    {
        -: 1283:      //reduce number of cards in hand
       16: 1284:      state->handCount[currentPlayer]--;
       16: 1284-block  0
        -: 1285:    }
     6098: 1286:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
     6098: 1286-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1287:    {
        -: 1288:      //reduce number of cards in hand
    #####: 1289:      state->handCount[currentPlayer]--;
    $$$$$: 1289-block  0
        -: 1290:    }
        -: 1291:  else 	
        -: 1292:    {
        -: 1293:      //replace discarded card with last card in hand
     6098: 1294:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1295:      //set last card to -1
     6098: 1296:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1297:      //reduce number of cards in hand
     6098: 1298:      state->handCount[currentPlayer]--;
     6098: 1298-block  0
        -: 1299:    }
        -: 1300:	
     6114: 1301:  return 0;
     6114: 1301-block  0
        -: 1302:}
        -: 1303:
function gainCard called 3036 returned 100% blocks executed 100%
     3036: 1304:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
     3036: 1304-block  0
        -: 1305:{
        -: 1306:  //Note: supplyPos is enum of choosen card
        -: 1307:	
        -: 1308:  //check if supply pile is empty (0) or card is not used in game (-1)
     3036: 1309:  if ( supplyCount(supplyPos, state) < 1 )
     3036: 1309-block  0
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        -: 1310:    {
        6: 1311:      return -1;
        6: 1311-block  0
        -: 1312:    }
        -: 1313:	
        -: 1314:  //added card for [whoseTurn] current player:
        -: 1315:  // toFlag = 0 : add to discard
        -: 1316:  // toFlag = 1 : add to deck
        -: 1317:  // toFlag = 2 : add to hand
        -: 1318:
     3030: 1319:  if (toFlag == 1)
     3030: 1319-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1320:    {
        6: 1321:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        6: 1322:      state->deckCount[player]++;
        6: 1322-block  0
        -: 1323:    }
     3024: 1324:  else if (toFlag == 2)
     3024: 1324-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1325:    {
        6: 1326:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        6: 1327:      state->handCount[player]++;
        6: 1327-block  0
        -: 1328:    }
        -: 1329:  else
        -: 1330:    {
     3018: 1331:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     3018: 1332:      state->discardCount[player]++;
     3018: 1332-block  0
        -: 1333:    }
        -: 1334:	
        -: 1335:  //decrease number in supply pile
     3030: 1336:  state->supplyCount[supplyPos]--;
        -: 1337:	 
     3030: 1338:  return 0;
     3030: 1338-block  0
        -: 1339:}
        -: 1340:
function updateCoins called 6174 returned 100% blocks executed 100%
     6174: 1341:int updateCoins(int player, struct gameState *state, int bonus)
     6174: 1341-block  0
        -: 1342:{
        -: 1343:  int i;
        -: 1344:	
        -: 1345:  //reset coin count
     6174: 1346:  state->coins = 0;
        -: 1347:
        -: 1348:  //add coins for each Treasure card in player's hand
    37044: 1349:  for (i = 0; i < state->handCount[player]; i++)
     6174: 1349-block  0
    30870: 1349-block  1
    37044: 1349-block  2
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1350:    {
    30870: 1351:      if (state->hand[player][i] == copper)
    30870: 1351-block  0
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
        -: 1352:	{
    21738: 1353:	  state->coins += 1;
    21738: 1353-block  0
        -: 1354:	}
     9132: 1355:      else if (state->hand[player][i] == silver)
     9132: 1355-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1356:	{
       30: 1357:	  state->coins += 2;
       30: 1357-block  0
        -: 1358:	}
     9102: 1359:      else if (state->hand[player][i] == gold)
     9102: 1359-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1360:	{
       30: 1361:	  state->coins += 3;
       30: 1361-block  0
        -: 1362:	}	
        -: 1363:    }	
        -: 1364:
        -: 1365:  //add bonus
     6174: 1366:  state->coins += bonus;
        -: 1367:
     6174: 1368:  return 0;
     6174: 1368-block  0
        -: 1369:}
        -: 1370:
        -: 1371:
        -: 1372:/************************************************
        -: 1373:Start of function unit tests
        -: 1374:*************************************************/
        -: 1375:
function testUpdateCoins called 0 returned 0% blocks executed 0%
    #####: 1376:int testUpdateCoins(int player, struct gameState *state, int bonus) {
    $$$$$: 1376-block  0
        -: 1377:  
    #####: 1378:}
        -: 1379:
        -: 1380:
        -: 1381://end of dominion.c
        -: 1382:
----------------- Random Testing Card: village ----------------
----------------- 0 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 1 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 2 ----------------
SUCCESS
FAILURE
----------------- 3 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 4 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 5 ----------------
SUCCESS
FAILURE
----------------- 6 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 7 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 8 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 9 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 10 ----------------
SUCCESS
FAILURE
----------------- 11 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 12 ----------------
SUCCESS
FAILURE
----------------- 13 ----------------
SUCCESS
FAILURE
----------------- 14 ----------------
SUCCESS
FAILURE
----------------- 15 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 16 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 17 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 18 ----------------
SUCCESS
FAILURE
----------------- 19 ----------------
SUCCESS
FAILURE
----------------- 20 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 21 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 22 ----------------
SUCCESS
FAILURE
----------------- 23 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 24 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 25 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 26 ----------------
SUCCESS
FAILURE
----------------- 27 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 28 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 29 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 30 ----------------
SUCCESS
FAILURE
----------------- 31 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 32 ----------------
SUCCESS
FAILURE
----------------- 33 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 34 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 35 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 36 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 37 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 38 ----------------
SUCCESS
FAILURE
----------------- 39 ----------------
SUCCESS
FAILURE
----------------- 40 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 41 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 42 ----------------
SUCCESS
FAILURE
----------------- 43 ----------------
SUCCESS
FAILURE
----------------- 44 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 45 ----------------
SUCCESS
FAILURE
----------------- 46 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 47 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 48 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 49 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 50 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 51 ----------------
SUCCESS
FAILURE
----------------- 52 ----------------
SUCCESS
FAILURE
----------------- 53 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 54 ----------------
SUCCESS
FAILURE
----------------- 55 ----------------
SUCCESS
FAILURE
----------------- 56 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 57 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 58 ----------------
SUCCESS
FAILURE
----------------- 59 ----------------
SUCCESS
FAILURE
----------------- 60 ----------------
SUCCESS
FAILURE
----------------- 61 ----------------
SUCCESS
FAILURE
----------------- 62 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 63 ----------------
SUCCESS
FAILURE
----------------- 64 ----------------
SUCCESS
FAILURE
----------------- 65 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 66 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 67 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 68 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 69 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 70 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 71 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 72 ----------------
SUCCESS
FAILURE
----------------- 73 ----------------
SUCCESS
FAILURE
----------------- 74 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 75 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 76 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 77 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 78 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 79 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 80 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 81 ----------------
SUCCESS
FAILURE
----------------- 82 ----------------
SUCCESS
FAILURE
----------------- 83 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 84 ----------------
SUCCESS
FAILURE
----------------- 85 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 86 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 87 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 88 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 89 ----------------
SUCCESS
FAILURE
----------------- 90 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 91 ----------------
SUCCESS
FAILURE
----------------- 92 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 93 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 94 ----------------
SUCCESS
FAILURE
----------------- 95 ----------------
SUCCESS
FAILURE
----------------- 96 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 97 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 98 ----------------
SUCCESS
FAILURE
----------------- 99 ----------------
SUCCESS
FAILURE
----------------- 100 ----------------
SUCCESS
FAILURE
----------------- 101 ----------------
SUCCESS
FAILURE
----------------- 102 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 103 ----------------
SUCCESS
FAILURE
----------------- 104 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 105 ----------------
SUCCESS
FAILURE
----------------- 106 ----------------
SUCCESS
FAILURE
----------------- 107 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 108 ----------------
SUCCESS
FAILURE
----------------- 109 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 110 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 111 ----------------
SUCCESS
FAILURE
----------------- 112 ----------------
SUCCESS
FAILURE
----------------- 113 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 114 ----------------
SUCCESS
FAILURE
----------------- 115 ----------------
SUCCESS
FAILURE
----------------- 116 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 117 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 118 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 119 ----------------
SUCCESS
FAILURE
----------------- 120 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 121 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 122 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 123 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 124 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 125 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 126 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 127 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 128 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 129 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 130 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 131 ----------------
SUCCESS
FAILURE
----------------- 132 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 133 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 134 ----------------
SUCCESS
FAILURE
----------------- 135 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 136 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 137 ----------------
SUCCESS
FAILURE
----------------- 138 ----------------
SUCCESS
FAILURE
----------------- 139 ----------------
SUCCESS
FAILURE
----------------- 140 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 141 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 142 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 143 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 144 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 145 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 146 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 147 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 148 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 149 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 150 ----------------
SUCCESS
FAILURE
----------------- 151 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 152 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 153 ----------------
SUCCESS
FAILURE
----------------- 154 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 155 ----------------
SUCCESS
FAILURE
----------------- 156 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 157 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 158 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 159 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 160 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 161 ----------------
SUCCESS
FAILURE
----------------- 162 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 163 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 164 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 165 ----------------
SUCCESS
FAILURE
----------------- 166 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 167 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 168 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 169 ----------------
SUCCESS
FAILURE
----------------- 170 ----------------
SUCCESS
FAILURE
----------------- 171 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 172 ----------------
SUCCESS
FAILURE
----------------- 173 ----------------
SUCCESS
FAILURE
----------------- 174 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 175 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 176 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 177 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 178 ----------------
SUCCESS
FAILURE
----------------- 179 ----------------
SUCCESS
FAILURE
----------------- 180 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 181 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 182 ----------------
SUCCESS
FAILURE
----------------- 183 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 184 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 185 ----------------
SUCCESS
FAILURE
----------------- 186 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 187 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 188 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 189 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 190 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 191 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 192 ----------------
SUCCESS
FAILURE
----------------- 193 ----------------
SUCCESS
FAILURE
----------------- 194 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 195 ----------------
SUCCESS
FAILURE
----------------- 196 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 197 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 198 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 199 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 200 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 201 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 202 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 203 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 204 ----------------
SUCCESS
FAILURE
----------------- 205 ----------------
SUCCESS
FAILURE
----------------- 206 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 207 ----------------
SUCCESS
FAILURE
----------------- 208 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 209 ----------------
SUCCESS
FAILURE
----------------- 210 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 211 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 212 ----------------
SUCCESS
FAILURE
----------------- 213 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 214 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 215 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 216 ----------------
SUCCESS
FAILURE
----------------- 217 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 218 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 219 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 220 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 221 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 222 ----------------
SUCCESS
FAILURE
----------------- 223 ----------------
SUCCESS
FAILURE
----------------- 224 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 225 ----------------
SUCCESS
FAILURE
----------------- 226 ----------------
SUCCESS
FAILURE
----------------- 227 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 228 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 229 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 230 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 231 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 232 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 233 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 234 ----------------
SUCCESS
FAILURE
----------------- 235 ----------------
SUCCESS
FAILURE
----------------- 236 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 237 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 238 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 239 ----------------
SUCCESS
FAILURE
----------------- 240 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 241 ----------------
SUCCESS
FAILURE
----------------- 242 ----------------
SUCCESS
FAILURE
----------------- 243 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 244 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 245 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 246 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 247 ----------------
SUCCESS
FAILURE
----------------- 248 ----------------
SUCCESS
FAILURE
----------------- 249 ----------------
SUCCESS
FAILURE
----------------- 250 ----------------
SUCCESS
FAILURE
----------------- 251 ----------------
SUCCESS
FAILURE
----------------- 252 ----------------
SUCCESS
FAILURE
----------------- 253 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 254 ----------------
SUCCESS
FAILURE
----------------- 255 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 256 ----------------
SUCCESS
FAILURE
----------------- 257 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 258 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 259 ----------------
SUCCESS
FAILURE
----------------- 260 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 261 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 262 ----------------
SUCCESS
FAILURE
----------------- 263 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 264 ----------------
SUCCESS
FAILURE
----------------- 265 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 266 ----------------
SUCCESS
FAILURE
----------------- 267 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 268 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 269 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 270 ----------------
SUCCESS
FAILURE
----------------- 271 ----------------
SUCCESS
FAILURE
----------------- 272 ----------------
SUCCESS
FAILURE
----------------- 273 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 274 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 275 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 276 ----------------
SUCCESS
FAILURE
----------------- 277 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 278 ----------------
SUCCESS
FAILURE
----------------- 279 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 280 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 281 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 282 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 283 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 284 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 285 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 286 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 287 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 288 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 289 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 290 ----------------
SUCCESS
FAILURE
----------------- 291 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 292 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 293 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 294 ----------------
SUCCESS
FAILURE
----------------- 295 ----------------
SUCCESS
FAILURE
----------------- 296 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 297 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 298 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 299 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 300 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 301 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 302 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 303 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 304 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 305 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 306 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 307 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 308 ----------------
SUCCESS
FAILURE
----------------- 309 ----------------
SUCCESS
FAILURE
----------------- 310 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 311 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 312 ----------------
SUCCESS
FAILURE
----------------- 313 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 314 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 315 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 316 ----------------
SUCCESS
FAILURE
----------------- 317 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 318 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 319 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 320 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 321 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 322 ----------------
SUCCESS
FAILURE
----------------- 323 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 324 ----------------
SUCCESS
FAILURE
----------------- 325 ----------------
SUCCESS
FAILURE
----------------- 326 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 327 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 328 ----------------
SUCCESS
FAILURE
----------------- 329 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 330 ----------------
SUCCESS
FAILURE
----------------- 331 ----------------
SUCCESS
FAILURE
----------------- 332 ----------------
SUCCESS
FAILURE
----------------- 333 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 334 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 335 ----------------
SUCCESS
FAILURE
----------------- 336 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 337 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 338 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 339 ----------------
SUCCESS
FAILURE
----------------- 340 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 341 ----------------
SUCCESS
FAILURE
----------------- 342 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 343 ----------------
SUCCESS
FAILURE
----------------- 344 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 345 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 346 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 347 ----------------
SUCCESS
FAILURE
----------------- 348 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 349 ----------------
SUCCESS
FAILURE
----------------- 350 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 351 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 352 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 353 ----------------
SUCCESS
FAILURE
----------------- 354 ----------------
SUCCESS
FAILURE
----------------- 355 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 356 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 357 ----------------
SUCCESS
FAILURE
----------------- 358 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 359 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 360 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 361 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 362 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 363 ----------------
SUCCESS
FAILURE
----------------- 364 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 365 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 366 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 367 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 368 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 369 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 370 ----------------
SUCCESS
FAILURE
----------------- 371 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 372 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 373 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 374 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 375 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 376 ----------------
SUCCESS
FAILURE
----------------- 377 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 378 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 379 ----------------
SUCCESS
FAILURE
----------------- 380 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 381 ----------------
SUCCESS
FAILURE
----------------- 382 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 383 ----------------
SUCCESS
FAILURE
----------------- 384 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 385 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 386 ----------------
SUCCESS
FAILURE
----------------- 387 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 388 ----------------
SUCCESS
FAILURE
----------------- 389 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 390 ----------------
SUCCESS
FAILURE
----------------- 391 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 392 ----------------
SUCCESS
FAILURE
----------------- 393 ----------------
SUCCESS
FAILURE
----------------- 394 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 395 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 396 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 397 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 398 ----------------
SUCCESS
FAILURE
----------------- 399 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 400 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 401 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 402 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 403 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 404 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 405 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 406 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 407 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 408 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 409 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 410 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 411 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 412 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 413 ----------------
SUCCESS
FAILURE
----------------- 414 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 415 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 416 ----------------
SUCCESS
FAILURE
----------------- 417 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 418 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 419 ----------------
SUCCESS
FAILURE
----------------- 420 ----------------
SUCCESS
FAILURE
----------------- 421 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 422 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 423 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 424 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 425 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 426 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 427 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 428 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 429 ----------------
SUCCESS
FAILURE
----------------- 430 ----------------
SUCCESS
FAILURE
----------------- 431 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 432 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 433 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 434 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 435 ----------------
SUCCESS
FAILURE
----------------- 436 ----------------
SUCCESS
FAILURE
----------------- 437 ----------------
SUCCESS
FAILURE
----------------- 438 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 439 ----------------
SUCCESS
FAILURE
----------------- 440 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 441 ----------------
SUCCESS
FAILURE
----------------- 442 ----------------
SUCCESS
FAILURE
----------------- 443 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 444 ----------------
SUCCESS
FAILURE
----------------- 445 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 446 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 447 ----------------
SUCCESS
FAILURE
----------------- 448 ----------------
SUCCESS
FAILURE
----------------- 449 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 450 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 451 ----------------
SUCCESS
FAILURE
----------------- 452 ----------------
SUCCESS
FAILURE
----------------- 453 ----------------
SUCCESS
FAILURE
----------------- 454 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 455 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 456 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 457 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 458 ----------------
SUCCESS
FAILURE
----------------- 459 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 460 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 461 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 462 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 463 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 464 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 465 ----------------
SUCCESS
FAILURE
----------------- 466 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 467 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 468 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 469 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 470 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 471 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 472 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 473 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 474 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 475 ----------------
SUCCESS
FAILURE
----------------- 476 ----------------
SUCCESS
FAILURE
----------------- 477 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 478 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 479 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 480 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 481 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 482 ----------------
SUCCESS
FAILURE
----------------- 483 ----------------
SUCCESS
FAILURE
----------------- 484 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 485 ----------------
SUCCESS
FAILURE
----------------- 486 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 487 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 488 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 489 ----------------
SUCCESS
FAILURE
----------------- 490 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 491 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 492 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 493 ----------------
SUCCESS
FAILURE
----------------- 494 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 495 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 496 ----------------
SUCCESS
FAILURE
----------------- 497 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 498 ----------------
SUCCESS
FAILURE
----------------- 499 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 500 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 501 ----------------
SUCCESS
FAILURE
----------------- 502 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 503 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 504 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 505 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 506 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 507 ----------------
SUCCESS
FAILURE
----------------- 508 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 509 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 510 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 511 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 512 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 513 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 514 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 515 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 516 ----------------
SUCCESS
FAILURE
----------------- 517 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 518 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 519 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 520 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 521 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 522 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 523 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 524 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 525 ----------------
SUCCESS
FAILURE
----------------- 526 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 527 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 528 ----------------
SUCCESS
FAILURE
----------------- 529 ----------------
SUCCESS
FAILURE
----------------- 530 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 531 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 532 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 533 ----------------
SUCCESS
FAILURE
----------------- 534 ----------------
SUCCESS
FAILURE
----------------- 535 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 536 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 537 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 538 ----------------
SUCCESS
FAILURE
----------------- 539 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 540 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 541 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 542 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 543 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 544 ----------------
SUCCESS
FAILURE
----------------- 545 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 546 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 547 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 548 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 549 ----------------
SUCCESS
FAILURE
----------------- 550 ----------------
SUCCESS
FAILURE
----------------- 551 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 552 ----------------
SUCCESS
FAILURE
----------------- 553 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 554 ----------------
SUCCESS
FAILURE
----------------- 555 ----------------
SUCCESS
FAILURE
----------------- 556 ----------------
SUCCESS
FAILURE
----------------- 557 ----------------
SUCCESS
FAILURE
----------------- 558 ----------------
SUCCESS
FAILURE
----------------- 559 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 560 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 561 ----------------
SUCCESS
FAILURE
----------------- 562 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 563 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 564 ----------------
SUCCESS
FAILURE
----------------- 565 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 566 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 567 ----------------
SUCCESS
FAILURE
----------------- 568 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 569 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 570 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 571 ----------------
SUCCESS
FAILURE
----------------- 572 ----------------
SUCCESS
FAILURE
----------------- 573 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 574 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 575 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 576 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 577 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 578 ----------------
SUCCESS
FAILURE
----------------- 579 ----------------
SUCCESS
FAILURE
----------------- 580 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 581 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 582 ----------------
SUCCESS
FAILURE
----------------- 583 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 584 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 585 ----------------
SUCCESS
FAILURE
----------------- 586 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 587 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 588 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 589 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 590 ----------------
SUCCESS
FAILURE
----------------- 591 ----------------
SUCCESS
FAILURE
----------------- 592 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 593 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 594 ----------------
SUCCESS
FAILURE
----------------- 595 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 596 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 597 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 598 ----------------
SUCCESS
FAILURE
----------------- 599 ----------------
SUCCESS
FAILURE
----------------- 600 ----------------
SUCCESS
FAILURE
----------------- 601 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 602 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 603 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 604 ----------------
SUCCESS
FAILURE
----------------- 605 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 606 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 607 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 608 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 609 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 610 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 611 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 612 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 613 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 614 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 615 ----------------
SUCCESS
FAILURE
----------------- 616 ----------------
SUCCESS
FAILURE
----------------- 617 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 618 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 619 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 620 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 621 ----------------
SUCCESS
FAILURE
----------------- 622 ----------------
SUCCESS
FAILURE
----------------- 623 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 624 ----------------
SUCCESS
FAILURE
----------------- 625 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 626 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 627 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 628 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 629 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 630 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 631 ----------------
SUCCESS
FAILURE
----------------- 632 ----------------
SUCCESS
FAILURE
----------------- 633 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 634 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 635 ----------------
SUCCESS
FAILURE
----------------- 636 ----------------
SUCCESS
FAILURE
----------------- 637 ----------------
SUCCESS
FAILURE
----------------- 638 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 639 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 640 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 641 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 642 ----------------
SUCCESS
FAILURE
----------------- 643 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 644 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 645 ----------------
SUCCESS
FAILURE
----------------- 646 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 647 ----------------
SUCCESS
FAILURE
----------------- 648 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 649 ----------------
SUCCESS
FAILURE
----------------- 650 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 651 ----------------
SUCCESS
FAILURE
----------------- 652 ----------------
SUCCESS
FAILURE
----------------- 653 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 654 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 655 ----------------
SUCCESS
FAILURE
----------------- 656 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 657 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 658 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 659 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 660 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 661 ----------------
SUCCESS
FAILURE
----------------- 662 ----------------
SUCCESS
FAILURE
----------------- 663 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 664 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 665 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 666 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 667 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 668 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 669 ----------------
SUCCESS
FAILURE
----------------- 670 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 671 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 672 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 673 ----------------
SUCCESS
FAILURE
----------------- 674 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 675 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 676 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 677 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 678 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 679 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 680 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 681 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 682 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 683 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 684 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 685 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 686 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 687 ----------------
SUCCESS
FAILURE
----------------- 688 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 689 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 690 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 691 ----------------
SUCCESS
FAILURE
----------------- 692 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 693 ----------------
SUCCESS
FAILURE
----------------- 694 ----------------
SUCCESS
FAILURE
----------------- 695 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 696 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 697 ----------------
SUCCESS
FAILURE
----------------- 698 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 699 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 700 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 701 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 702 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 703 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 704 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 705 ----------------
SUCCESS
FAILURE
----------------- 706 ----------------
SUCCESS
FAILURE
----------------- 707 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 708 ----------------
SUCCESS
FAILURE
----------------- 709 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 710 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 711 ----------------
SUCCESS
FAILURE
----------------- 712 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 713 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 714 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 715 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 716 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 717 ----------------
SUCCESS
FAILURE
----------------- 718 ----------------
SUCCESS
FAILURE
----------------- 719 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 720 ----------------
SUCCESS
FAILURE
----------------- 721 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 722 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 723 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 724 ----------------
SUCCESS
FAILURE
----------------- 725 ----------------
SUCCESS
FAILURE
----------------- 726 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 727 ----------------
SUCCESS
FAILURE
----------------- 728 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 729 ----------------
SUCCESS
FAILURE
----------------- 730 ----------------
SUCCESS
FAILURE
----------------- 731 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 732 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 733 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 734 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 735 ----------------
SUCCESS
FAILURE
----------------- 736 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 737 ----------------
SUCCESS
FAILURE
----------------- 738 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 739 ----------------
SUCCESS
FAILURE
----------------- 740 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 741 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 742 ----------------
SUCCESS
FAILURE
----------------- 743 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 744 ----------------
SUCCESS
FAILURE
----------------- 745 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 746 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 747 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 748 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 749 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 750 ----------------
SUCCESS
FAILURE
----------------- 751 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 752 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 753 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 754 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 755 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 756 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 757 ----------------
SUCCESS
FAILURE
----------------- 758 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 759 ----------------
SUCCESS
SUCCESS
SUCCESS
Test 2 FAILURE
FAILURE
----------------- 760 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 761 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 762 ----------------
SUCCESS
FAILURE
----------------- 763 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 764 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 765 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 766 ----------------
SUCCESS
FAILURE
----------------- 767 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 768 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 769 ----------------
SUCCESS
FAILURE
----------------- 770 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 771 ----------------
SUCCESS
FAILURE
----------------- 772 ----------------
SUCCESS
FAILURE
----------------- 773 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 774 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 775 ----------------
SUCCESS
FAILURE
----------------- 776 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 777 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 778 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 779 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 780 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 781 ----------------
SUCCESS
FAILURE
----------------- 782 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 783 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 784 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 785 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 786 ----------------
SUCCESS
FAILURE
----------------- 787 ----------------
SUCCESS
FAILURE
----------------- 788 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 789 ----------------
SUCCESS
FAILURE
----------------- 790 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 791 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 792 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 793 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 794 ----------------
SUCCESS
FAILURE
----------------- 795 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 796 ----------------
SUCCESS
FAILURE
----------------- 797 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 798 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 799 ----------------
SUCCESS
FAILURE
----------------- 800 ----------------
SUCCESS
FAILURE
----------------- 801 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 802 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 803 ----------------
SUCCESS
FAILURE
----------------- 804 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 805 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 806 ----------------
SUCCESS
FAILURE
----------------- 807 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 808 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 809 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 810 ----------------
SUCCESS
FAILURE
----------------- 811 ----------------
SUCCESS
FAILURE
----------------- 812 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 813 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 814 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 815 ----------------
SUCCESS
FAILURE
----------------- 816 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 817 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 818 ----------------
SUCCESS
FAILURE
----------------- 819 ----------------
SUCCESS
FAILURE
----------------- 820 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 821 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 822 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 823 ----------------
SUCCESS
FAILURE
----------------- 824 ----------------
SUCCESS
FAILURE
----------------- 825 ----------------
SUCCESS
FAILURE
----------------- 826 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 827 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 828 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 829 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 830 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 831 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 832 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 833 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 834 ----------------
SUCCESS
FAILURE
----------------- 835 ----------------
SUCCESS
FAILURE
----------------- 836 ----------------
SUCCESS
FAILURE
----------------- 837 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 838 ----------------
SUCCESS
FAILURE
----------------- 839 ----------------
SUCCESS
FAILURE
----------------- 840 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 841 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 842 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 843 ----------------
SUCCESS
FAILURE
----------------- 844 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 845 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 846 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 847 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 848 ----------------
SUCCESS
FAILURE
----------------- 849 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 850 ----------------
SUCCESS
FAILURE
----------------- 851 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 852 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 853 ----------------
SUCCESS
FAILURE
----------------- 854 ----------------
SUCCESS
FAILURE
----------------- 855 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 856 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 857 ----------------
SUCCESS
FAILURE
----------------- 858 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 859 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 860 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 861 ----------------
SUCCESS
FAILURE
----------------- 862 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 863 ----------------
SUCCESS
FAILURE
----------------- 864 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 865 ----------------
SUCCESS
FAILURE
----------------- 866 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 867 ----------------
SUCCESS
FAILURE
----------------- 868 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 869 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 870 ----------------
SUCCESS
FAILURE
----------------- 871 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 872 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 873 ----------------
SUCCESS
FAILURE
----------------- 874 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 875 ----------------
SUCCESS
FAILURE
----------------- 876 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 877 ----------------
SUCCESS
FAILURE
----------------- 878 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 879 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 880 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 881 ----------------
SUCCESS
FAILURE
----------------- 882 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 883 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 884 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 885 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 886 ----------------
SUCCESS
FAILURE
----------------- 887 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 888 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 889 ----------------
SUCCESS
FAILURE
----------------- 890 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 891 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 892 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 893 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 894 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 895 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 896 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 897 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 898 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 899 ----------------
SUCCESS
FAILURE
----------------- 900 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 901 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 902 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 903 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 904 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 905 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 906 ----------------
SUCCESS
FAILURE
----------------- 907 ----------------
SUCCESS
FAILURE
----------------- 908 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 909 ----------------
SUCCESS
FAILURE
----------------- 910 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 911 ----------------
SUCCESS
FAILURE
----------------- 912 ----------------
SUCCESS
FAILURE
----------------- 913 ----------------
SUCCESS
FAILURE
----------------- 914 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 915 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 916 ----------------
SUCCESS
FAILURE
----------------- 917 ----------------
SUCCESS
FAILURE
----------------- 918 ----------------
SUCCESS
FAILURE
----------------- 919 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 920 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 921 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 922 ----------------
SUCCESS
FAILURE
----------------- 923 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 924 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 925 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 926 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 927 ----------------
SUCCESS
FAILURE
----------------- 928 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 929 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 930 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 931 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 932 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 933 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 934 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 935 ----------------
SUCCESS
FAILURE
----------------- 936 ----------------
SUCCESS
FAILURE
----------------- 937 ----------------
SUCCESS
FAILURE
----------------- 938 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 939 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 940 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 941 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 942 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 943 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 944 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 945 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 946 ----------------
SUCCESS
FAILURE
----------------- 947 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 948 ----------------
SUCCESS
FAILURE
----------------- 949 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 950 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 951 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 952 ----------------
SUCCESS
FAILURE
----------------- 953 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 954 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 955 ----------------
SUCCESS
FAILURE
----------------- 956 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 957 ----------------
SUCCESS
FAILURE
----------------- 958 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 959 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 960 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 961 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 962 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 963 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 964 ----------------
SUCCESS
FAILURE
----------------- 965 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 966 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 967 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 968 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 969 ----------------
SUCCESS
FAILURE
----------------- 970 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 971 ----------------
SUCCESS
FAILURE
----------------- 972 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 973 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 974 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 975 ----------------
SUCCESS
FAILURE
----------------- 976 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 977 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 978 ----------------
SUCCESS
FAILURE
----------------- 979 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 980 ----------------
SUCCESS
FAILURE
----------------- 981 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 982 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 983 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 984 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 985 ----------------
SUCCESS
FAILURE
----------------- 986 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 987 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 988 ----------------
SUCCESS
FAILURE
----------------- 989 ----------------
SUCCESS
FAILURE
----------------- 990 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 991 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 992 ----------------
SUCCESS
FAILURE
----------------- 993 ----------------
SUCCESS
FAILURE
----------------- 994 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 995 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 996 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 997 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 998 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 999 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
File 'dominion.c'
Lines executed:38.80% of 567
Branches executed:37.17% of 417
Taken at least once:29.98% of 417
Calls executed:33.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:64
        -:    0:Programs:13
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 12548130 returned 100% blocks executed 100%
 12548130:    8:int compare(const void* a, const void* b) {
 12548130:    8-block  0
 12548130:    9:  if (*(int*)a > *(int*)b)
 12548130:    9-block  0
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
  1671845:   10:    return 1;
  1671845:   10-block  0
 10876285:   11:  if (*(int*)a < *(int*)b)
 10876285:   11-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
   107370:   12:    return -1;
   107370:   12-block  0
 10768915:   13:  return 0;
 10768915:   13-block  0
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    $$$$$:   16-block  0
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
    $$$$$:   18-block  0
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   21-block  0
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
        -:   35:}
        -:   36:
function initializeGame called 8175 returned 100% blocks executed 94%
     8175:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
     8175:   37-block  0
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     8175:   44:  SelectStream(1);
     8175:   44-block  0
call    0 returned 100%
     8175:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     8175:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     8175:   48-block  0
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
    $$$$$:   50-block  0
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     8175:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    89925:   57:  for (i = 0; i < 10; i++)
     8175:   57-block  0
    81750:   57-block  1
    89925:   57-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   899250:   59:      for (j = 0; j < 10; j++)
    81750:   59-block  0
   817500:   59-block  1
   899250:   59-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   817500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
   817500:   61-block  0
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
   735750:   61-block  1
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
    $$$$$:   63-block  0
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     8175:   73:  if (numPlayers == 2)
     8175:   73-block  0
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
        -:   74:    {
     2806:   75:      state->supplyCount[curse] = 10;
     2806:   75-block  0
        -:   76:    }
     5369:   77:  else if (numPlayers == 3)
     5369:   77-block  0
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
        -:   78:    {
     2648:   79:      state->supplyCount[curse] = 20;
     2648:   79-block  0
        -:   80:    }
        -:   81:  else
        -:   82:    {
     2721:   83:      state->supplyCount[curse] = 30;
     2721:   83-block  0
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     8175:   87:  if (numPlayers == 2)
     8175:   87-block  0
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
        -:   88:    {
     2806:   89:      state->supplyCount[estate] = 8;
     2806:   90:      state->supplyCount[duchy] = 8;
     2806:   91:      state->supplyCount[province] = 8;
     2806:   91-block  0
        -:   92:    }
        -:   93:  else
        -:   94:    {
     5369:   95:      state->supplyCount[estate] = 12;
     5369:   96:      state->supplyCount[duchy] = 12;
     5369:   97:      state->supplyCount[province] = 12;
     5369:   97-block  0
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     8175:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     8175:  102:  state->supplyCount[silver] = 40;
     8175:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   171675:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
     8175:  106-block  0
   163500:  106-block  1
   171675:  106-block  2
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
  1348875:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
   163500:  108-block  0
  1185375:  108-block  1
  1348875:  108-block  2
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
  1267125:  110:	  if (kingdomCards[j] == i)
  1267125:  110-block  0
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    81750:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
    81750:  113-block  0
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    81631:  113-block  1
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:  114:		{
      476:  115:		  if (numPlayers == 2){ 
      238:  115-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      238:  115-block  1
      238:  116:		    state->supplyCount[i] = 8; 
      238:  116-block  0
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  118-block  0
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    81512:  122:		  state->supplyCount[i] = 10;
    81512:  122-block  0
        -:  123:		}
    81750:  124:	      break;
    81750:  124-block  0
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  1185375:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    32615:  138:  for (i = 0; i < numPlayers; i++)
     8175:  138-block  0
    24440:  138-block  1
    32615:  138-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:    {
    24440:  140:      state->deckCount[i] = 0;
    97760:  141:      for (j = 0; j < 3; j++)
    24440:  141-block  0
    73320:  141-block  1
    97760:  141-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
    73320:  143:	  state->deck[i][j] = estate;
    73320:  144:	  state->deckCount[i]++;
        -:  145:	}
   195520:  146:      for (j = 3; j < 10; j++)
    24440:  146-block  0
   171080:  146-block  1
   195520:  146-block  2
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
   171080:  148:	  state->deck[i][j] = copper;	  state->deckCount[i]++;		
        -:  149:	}
        -:  150:    }
        -:  151:
        -:  152:  //shuffle player decks
    32615:  153:  for (i = 0; i < numPlayers; i++)
     8175:  153-block  0
    24440:  153-block  1
    32615:  153-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  154:    {
    24440:  155:      if ( shuffle(i, state) < 0 )
    24440:  155-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  156:	{
    #####:  157:	  return -1;
    $$$$$:  157-block  0
        -:  158:	}
        -:  159:    }
        -:  160:
        -:  161:  //draw player hands
    32615:  162:  for (i = 0; i < numPlayers; i++)
     8175:  162-block  0
    24440:  162-block  1
    32615:  162-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  163:    {  
        -:  164:      //initialize hand size to zero
    24440:  165:      state->handCount[i] = 0;
    24440:  166:      state->discardCount[i] = 0;
        -:  167:      //draw 5 cards
        -:  168:      // for (j = 0; j < 5; j++)
        -:  169:      //	{
        -:  170:      //	  drawCard(i, state);
        -:  171:      //	}
        -:  172:    }
        -:  173:  
        -:  174:  //set embargo tokens to 0 for all supply piles
   228900:  175:  for (i = 0; i <= treasure_map; i++)
     8175:  175-block  0
   220725:  175-block  1
   228900:  175-block  2
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  176:    {
   220725:  177:      state->embargoTokens[i] = 0;
        -:  178:    }
        -:  179:
        -:  180:  //initialize first player's turn
     8175:  181:  state->outpostPlayed = 0;
     8175:  182:  state->phase = 0;
     8175:  183:  state->numActions = 1;
     8175:  184:  state->numBuys = 1;
     8175:  185:  state->playedCardCount = 0;
     8175:  186:  state->whoseTurn = 0;
     8175:  187:  state->handCount[state->whoseTurn] = 0;
        -:  188:  //int it; move to top
        -:  189:
        -:  190:  //Moved draw cards to here, only drawing at the start of a turn
    49050:  191:  for (it = 0; it < 5; it++){
     8175:  191-block  0
    49050:  191-block  1
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    40875:  192:    drawCard(state->whoseTurn, state);
    40875:  192-block  0
call    0 returned 100%
        -:  193:  }
        -:  194:
     8175:  195:  updateCoins(state->whoseTurn, state, 0);
     8175:  195-block  0
call    0 returned 100%
        -:  196:
     8175:  197:  return 0;
        -:  198:}
        -:  199:
function shuffle called 2410296 returned 100% blocks executed 100%
  2410296:  200:int shuffle(int player, struct gameState *state) {
  2410296:  200-block  0
        -:  201: 
        -:  202:
        -:  203:  int newDeck[MAX_DECK];
  2410296:  204:  int newDeckPos = 0;
        -:  205:  int card;
        -:  206:  int i;
        -:  207:
  2410296:  208:  if (state->deckCount[player] < 1)
  2410296:  208-block  0
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
  2375319:  209:    return -1;
  2375319:  209-block  0
    34977:  210:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
    34977:  210-block  0
call    0 returned 100%
        -:  211:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  212:
  2934753:  213:  while (state->deckCount[player] > 0) {
  2934753:  213-block  0
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  2899776:  214:    card = floor(Random() * state->deckCount[player]);
  2899776:  214-block  0
call    0 returned 100%
  2899776:  215:    newDeck[newDeckPos] = state->deck[player][card];
  2899776:  216:    newDeckPos++;
225222184:  217:    for (i = card; i < state->deckCount[player]-1; i++) {
222322408:  217-block  0
225222184:  217-block  1
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
222322408:  218:      state->deck[player][i] = state->deck[player][i+1];
        -:  219:    }
  2899776:  220:    state->deckCount[player]--;
  2899776:  220-block  0
        -:  221:  }
  2934753:  222:  for (i = 0; i < newDeckPos; i++) {
    34977:  222-block  0
  2899776:  222-block  1
  2934753:  222-block  2
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  2899776:  223:    state->deck[player][i] = newDeck[i];
  2899776:  224:    state->deckCount[player]++;
        -:  225:  }
        -:  226:
  2410296:  227:  return 0;
    34977:  227-block  0
  2410296:  227-block  1
        -:  228:}
        -:  229:
function playCard called 0 returned 0% blocks executed 0%
    #####:  230:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
    $$$$$:  230-block  0
        -:  231:{	
        -:  232:  int card;
    #####:  233:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  234:
        -:  235:  //check if it is the right phase
    #####:  236:  if (state->phase != 0)
    $$$$$:  236-block  0
branch  0 never executed
branch  1 never executed
        -:  237:    {
    #####:  238:      return -1;
    $$$$$:  238-block  0
        -:  239:    }
        -:  240:	
        -:  241:  //check if player has enough actions
    #####:  242:  if ( state->numActions < 1 )
    $$$$$:  242-block  0
branch  0 never executed
branch  1 never executed
        -:  243:    {
    #####:  244:      return -1;
    $$$$$:  244-block  0
        -:  245:    }
        -:  246:	
        -:  247:  //get card played
    #####:  248:  card = handCard(handPos, state);
    $$$$$:  248-block  0
call    0 never executed
        -:  249:	
        -:  250:  //check if selected card is an action
    #####:  251:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  251-block  0
branch  2 never executed
branch  3 never executed
        -:  252:    {
    #####:  253:      return -1;
    $$$$$:  253-block  0
        -:  254:    }
        -:  255:	
        -:  256:  //play card
    #####:  257:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  257-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  258:    {
    #####:  259:      return -1;
    $$$$$:  259-block  0
        -:  260:    }
        -:  261:	
        -:  262:  //reduce number of actions
    #####:  263:  state->numActions--;
        -:  264:
        -:  265:  //update coins (Treasure cards may be added with card draws)
    #####:  266:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  266-block  0
call    0 never executed
        -:  267:	
    #####:  268:  return 0;
    $$$$$:  268-block  0
        -:  269:}
        -:  270:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  271:int buyCard(int supplyPos, struct gameState *state) {
    $$$$$:  271-block  0
    $$$$$:  271-block  1
        -:  272:  int who;
        -:  273:  if (DEBUG){
        -:  274:    printf("Entering buyCard...\n");
        -:  275:  }
        -:  276:
        -:  277:  // I don't know what to do about the phase thing.
        -:  278:
    #####:  279:  who = state->whoseTurn;
        -:  280:
    #####:  281:  if (state->numBuys < 1){
    $$$$$:  281-block  0
branch  0 never executed
branch  1 never executed
        -:  282:    if (DEBUG)
        -:  283:      printf("You do not have any buys left\n");
    #####:  284:    return -1;
    $$$$$:  284-block  0
    #####:  285:  } else if (supplyCount(supplyPos, state) <1){
    $$$$$:  285-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  286:    if (DEBUG)
        -:  287:      printf("There are not any of that type of card left\n");
    #####:  288:    return -1;
    $$$$$:  288-block  0
    #####:  289:  } else if (state->coins < getCost(supplyPos)){
    $$$$$:  289-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  290:    if (DEBUG) 
        -:  291:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  292:    return -1;
    $$$$$:  292-block  0
        -:  293:  } else {
    #####:  294:    state->phase=1;
        -:  295:    //state->supplyCount[supplyPos]--;
    #####:  296:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
    $$$$$:  296-block  0
call    0 never executed
        -:  297:  
    #####:  298:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  299:    state->numBuys--;
        -:  300:    if (DEBUG)
        -:  301:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  302:  }
        -:  303:
        -:  304:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  305:  //state->discardCount[who]++;
        -:  306:    
    #####:  307:  return 0;
    $$$$$:  307-block  0
        -:  308:}
        -:  309:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  310:int numHandCards(struct gameState *state) {
    $$$$$:  310-block  0
    #####:  311:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  311-block  0
call    0 never executed
        -:  312:}
        -:  313:
function handCard called 0 returned 0% blocks executed 0%
    #####:  314:int handCard(int handPos, struct gameState *state) {
    $$$$$:  314-block  0
    #####:  315:  int currentPlayer = whoseTurn(state);
    $$$$$:  315-block  0
call    0 never executed
    #####:  316:  return state->hand[currentPlayer][handPos];
        -:  317:}
        -:  318:
function supplyCount called 12070 returned 100% blocks executed 100%
    12070:  319:int supplyCount(int card, struct gameState *state) {
    12070:  319-block  0
    12070:  320:  return state->supplyCount[card];
    12070:  320-block  0
        -:  321:}
        -:  322:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  323:int fullDeckCount(int player, int card, struct gameState *state) {
    $$$$$:  323-block  0
        -:  324:  int i;
    #####:  325:  int count = 0;
        -:  326:
    #####:  327:  for (i = 0; i < state->deckCount[player]; i++)
    $$$$$:  327-block  0
    $$$$$:  327-block  1
    $$$$$:  327-block  2
branch  0 never executed
branch  1 never executed
        -:  328:    {
    #####:  329:      if (state->deck[player][i] == card) count++;
    $$$$$:  329-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  329-block  1
        -:  330:    }
        -:  331:
    #####:  332:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  332-block  0
    $$$$$:  332-block  1
    $$$$$:  332-block  2
branch  0 never executed
branch  1 never executed
        -:  333:    {
    #####:  334:      if (state->hand[player][i] == card) count++;
    $$$$$:  334-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  334-block  1
        -:  335:    }
        -:  336:
    #####:  337:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  337-block  0
    $$$$$:  337-block  1
    $$$$$:  337-block  2
branch  0 never executed
branch  1 never executed
        -:  338:    {
    #####:  339:      if (state->discard[player][i] == card) count++;
    $$$$$:  339-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  339-block  1
        -:  340:    }
        -:  341:
    #####:  342:  return count;
    $$$$$:  342-block  0
        -:  343:}
        -:  344:
function whoseTurn called 16098 returned 100% blocks executed 100%
    16098:  345:int whoseTurn(struct gameState *state) {
    16098:  345-block  0
    16098:  346:  return state->whoseTurn;
    16098:  346-block  0
        -:  347:}
        -:  348:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  349:int endTurn(struct gameState *state) {
    $$$$$:  349-block  0
        -:  350:  int k;
        -:  351:  int i;
    #####:  352:  int currentPlayer = whoseTurn(state);
    $$$$$:  352-block  0
call    0 never executed
        -:  353:  
        -:  354:  //Discard hand
    #####:  355:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  355-block  0
    $$$$$:  355-block  1
branch  0 never executed
branch  1 never executed
    #####:  356:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  357:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  358:  }
    #####:  359:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  360:    
        -:  361:  //Code for determining the player
    #####:  362:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  362-block  0
branch  0 never executed
branch  1 never executed
    #####:  363:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  363-block  0
        -:  364:  }
        -:  365:  else{
    #####:  366:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  366-block  0
        -:  367:  }
        -:  368:
    #####:  369:  state->outpostPlayed = 0;
    #####:  370:  state->phase = 0;
    #####:  371:  state->numActions = 1;
    #####:  372:  state->coins = 0;
    #####:  373:  state->numBuys = 1;
    #####:  374:  state->playedCardCount = 0;
    #####:  375:  state->handCount[state->whoseTurn] = 0;
        -:  376:
        -:  377:  //int k; move to top
        -:  378:  //Next player draws hand
    #####:  379:  for (k = 0; k < 5; k++){
    $$$$$:  379-block  0
    $$$$$:  379-block  1
branch  0 never executed
branch  1 never executed
    #####:  380:    drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  380-block  0
call    0 never executed
        -:  381:  }
        -:  382:
        -:  383:  //Update money
    #####:  384:  updateCoins(state->whoseTurn, state , 0);
    $$$$$:  384-block  0
call    0 never executed
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  389:int isGameOver(struct gameState *state) {
    $$$$$:  389-block  0
        -:  390:  int i;
        -:  391:  int j;
        -:  392:	
        -:  393:  //if stack of Province cards is empty, the game ends
    #####:  394:  if (state->supplyCount[province] == 0)
    $$$$$:  394-block  0
branch  0 never executed
branch  1 never executed
        -:  395:    {
    #####:  396:      return 1;
    $$$$$:  396-block  0
        -:  397:    }
        -:  398:
        -:  399:  //if three supply pile are at 0, the game ends
    #####:  400:  j = 0;
    #####:  401:  for (i = 0; i < 25; i++)
    $$$$$:  401-block  0
    $$$$$:  401-block  1
    $$$$$:  401-block  2
branch  0 never executed
branch  1 never executed
        -:  402:    {
    #####:  403:      if (state->supplyCount[i] == 0)
    $$$$$:  403-block  0
branch  0 never executed
branch  1 never executed
        -:  404:	{
    #####:  405:	  j++;
    $$$$$:  405-block  0
        -:  406:	}
        -:  407:    }
    #####:  408:  if ( j >= 3)
    $$$$$:  408-block  0
branch  0 never executed
branch  1 never executed
        -:  409:    {
    #####:  410:      return 1;
    $$$$$:  410-block  0
        -:  411:    }
        -:  412:
    #####:  413:  return 0;
    $$$$$:  413-block  0
        -:  414:}
        -:  415:
function scoreFor called 35 returned 100% blocks executed 38%
       35:  416:int scoreFor (int player, struct gameState *state) {
       35:  416-block  0
        -:  417:
        -:  418:  int i;
       35:  419:  int score = 0;
        -:  420:  //score from hand
      210:  421:  for (i = 0; i < state->handCount[player]; i++)
       35:  421-block  0
      175:  421-block  1
      210:  421-block  2
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  422:    {
      175:  423:      if (state->hand[player][i] == curse) { score = score - 1; };
      175:  423-block  0
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
       35:  423-block  1
      175:  424:      if (state->hand[player][i] == estate) { score = score + 1; };
      175:  424-block  0
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        7:  424-block  1
      175:  425:      if (state->hand[player][i] == duchy) { score = score + 3; };
      175:  425-block  0
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        7:  425-block  1
      175:  426:      if (state->hand[player][i] == province) { score = score + 6; };
      175:  426-block  0
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        7:  426-block  1
      175:  427:      if (state->hand[player][i] == great_hall) { score = score + 1; };
      175:  427-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    $$$$$:  427-block  1
      175:  428:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
      175:  428-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    $$$$$:  428-block  1
call    2 never executed
        -:  429:    }
        -:  430:
        -:  431:  //score from discard
       35:  432:  for (i = 0; i < state->discardCount[player]; i++)
       35:  432-block  0
    $$$$$:  432-block  1
       35:  432-block  2
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  433:    {
    #####:  434:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  434-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  434-block  1
    #####:  435:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
    #####:  436:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
    #####:  437:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
    #####:  438:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
    #####:  439:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
call    2 never executed
        -:  440:    }
        -:  441:
        -:  442:  //score from deck
       35:  443:  for (i = 0; i < state->discardCount[player]; i++)
       35:  443-block  0
    $$$$$:  443-block  1
       35:  443-block  2
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  444:    {
    #####:  445:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  445-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  445-block  1
    #####:  446:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
    #####:  447:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
    #####:  448:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
    #####:  449:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
    #####:  450:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
call    2 never executed
        -:  451:    }
        -:  452:
       35:  453:  return score;
       35:  453-block  0
        -:  454:}
        -:  455:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  456:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  456-block  0
        -:  457:  int i;	
        -:  458:  int j;
        -:  459:  int highScore;
        -:  460:  int currentPlayer;
        -:  461:
        -:  462:  //get score for each player
    #####:  463:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  463-block  0
    $$$$$:  463-block  1
    $$$$$:  463-block  2
branch  0 never executed
branch  1 never executed
        -:  464:    {
        -:  465:      //set unused player scores to -9999
    #####:  466:      if (i >= state->numPlayers)
    $$$$$:  466-block  0
branch  0 never executed
branch  1 never executed
        -:  467:	{
    #####:  468:	  players[i] = -9999;
    $$$$$:  468-block  0
        -:  469:	}
        -:  470:      else
        -:  471:	{
    #####:  472:	  players[i] = scoreFor (i, state);
    $$$$$:  472-block  0
call    0 never executed
        -:  473:	}
        -:  474:    }
        -:  475:
        -:  476:  //find highest score
    #####:  477:  j = 0;
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  478-block  0
    $$$$$:  478-block  1
    $$$$$:  478-block  2
branch  0 never executed
branch  1 never executed
        -:  479:    {
    #####:  480:      if (players[i] > players[j])
    $$$$$:  480-block  0
branch  0 never executed
branch  1 never executed
        -:  481:	{
    #####:  482:	  j = i;
    $$$$$:  482-block  0
        -:  483:	}
        -:  484:    }
    #####:  485:  highScore = players[j];
        -:  486:
        -:  487:  //add 1 to players who had less turns
    #####:  488:  currentPlayer = whoseTurn(state);
    $$$$$:  488-block  0
call    0 never executed
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  489-block  0
    $$$$$:  489-block  1
branch  0 never executed
branch  1 never executed
        -:  490:    {
    #####:  491:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  491-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  491-block  1
branch  2 never executed
branch  3 never executed
        -:  492:	{
    #####:  493:	  players[i]++;
    $$$$$:  493-block  0
        -:  494:	}
        -:  495:    }
        -:  496:
        -:  497:  //find new highest score
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  499-block  0
    $$$$$:  499-block  1
    $$$$$:  499-block  2
branch  0 never executed
branch  1 never executed
        -:  500:    {
    #####:  501:      if ( players[i] > players[j] )
    $$$$$:  501-block  0
branch  0 never executed
branch  1 never executed
        -:  502:	{
    #####:  503:	  j = i;
    $$$$$:  503-block  0
        -:  504:	}
        -:  505:    }
    #####:  506:  highScore = players[j];
        -:  507:
        -:  508:  //set winners in array to 1 and rest to 0
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  509-block  0
    $$$$$:  509-block  1
    $$$$$:  509-block  2
branch  0 never executed
branch  1 never executed
        -:  510:    {
    #####:  511:      if ( players[i] == highScore )
    $$$$$:  511-block  0
branch  0 never executed
branch  1 never executed
        -:  512:	{
    #####:  513:	  players[i] = 1;
    $$$$$:  513-block  0
        -:  514:	}
        -:  515:      else
        -:  516:	{
    #####:  517:	  players[i] = 0;
    $$$$$:  517-block  0
        -:  518:	}
        -:  519:    }
        -:  520:
    #####:  521:  return 0;
    $$$$$:  521-block  0
        -:  522:}
        -:  523:
function drawCard called 4299022 returned 100% blocks executed 100%
  4299022:  524:int drawCard(int player, struct gameState *state)
  4299022:  524-block  0
        -:  525:{	int count;
        -:  526:  int deckCounter;
  4299022:  527:  if (state->deckCount[player] <= 0){//Deck is empty
  4299022:  527-block  0
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
        -:  528:    
        -:  529:    //Step 1 Shuffle the discard pile back into a deck
        -:  530:    int i;
        -:  531:    //Move discard to deck
  3852828:  532:    for (i = 0; i < state->discardCount[player];i++){
  1197452:  532-block  0
  2655376:  532-block  1
  3852828:  532-block  2
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
  2655376:  533:      state->deck[player][i] = state->discard[player][i];
  2655376:  534:      state->discard[player][i] = -1;
        -:  535:    }
        -:  536:
  1197452:  537:    state->deckCount[player] = state->discardCount[player];
  1197452:  538:    state->discardCount[player] = 0;//Reset discard
        -:  539:
        -:  540:    //Shufffle the deck
  1197452:  541:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
  1197452:  541-block  0
call    0 returned 100%
        -:  542:   
        -:  543:    if (DEBUG){//Debug statements
        -:  544:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  545:    }
        -:  546:    
  1197452:  547:    state->discardCount[player] = 0;
        -:  548:
        -:  549:    //Step 2 Draw Card
  1197452:  550:    count = state->handCount[player];//Get current player's hand count
        -:  551:    
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Current hand count: %d\n", count);
        -:  554:    }
        -:  555:    
  1197452:  556:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  557:
  1197452:  558:    if (deckCounter == 0)
  1197452:  558-block  0
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
  1186915:  559:      return -1;
  1186915:  559-block  0
        -:  560:
    10537:  561:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    10537:  562:    state->deckCount[player]--;
    10537:  563:    state->handCount[player]++;//Increment hand count
    10537:  563-block  0
        -:  564:  }
        -:  565:
        -:  566:  else{
  3101570:  567:    int count = state->handCount[player];//Get current hand count for player
  3101570:  567-block  0
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
  3101570:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
  3101570:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  3101570:  575:    state->deckCount[player]--;
  3101570:  576:    state->handCount[player]++;//Increment hand count
  3101570:  576-block  0
        -:  577:  }
        -:  578:
  3112107:  579:  return 0;
  3112107:  579-block  0
        -:  580:}
        -:  581:
function getCost called 0 returned 0% blocks executed 0%
    #####:  582:int getCost(int cardNumber)
    $$$$$:  582-block  0
        -:  583:{
    #####:  584:  switch( cardNumber ) 
    $$$$$:  584-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  585:    {
        -:  586:    case curse:
    #####:  587:      return 0;
    $$$$$:  587-block  0
        -:  588:    case estate:
    #####:  589:      return 2;
    $$$$$:  589-block  0
        -:  590:    case duchy:
    #####:  591:      return 5;
    $$$$$:  591-block  0
        -:  592:    case province:
    #####:  593:      return 8;
    $$$$$:  593-block  0
        -:  594:    case copper:
    #####:  595:      return 0;
    $$$$$:  595-block  0
        -:  596:    case silver:
    #####:  597:      return 3;
    $$$$$:  597-block  0
        -:  598:    case gold:
    #####:  599:      return 6;
    $$$$$:  599-block  0
        -:  600:    case adventurer:
    #####:  601:      return 6;
    $$$$$:  601-block  0
        -:  602:    case council_room:
    #####:  603:      return 5;
    $$$$$:  603-block  0
        -:  604:    case feast:
    #####:  605:      return 4;
    $$$$$:  605-block  0
        -:  606:    case gardens:
    #####:  607:      return 4;
    $$$$$:  607-block  0
        -:  608:    case mine:
    #####:  609:      return 5;
    $$$$$:  609-block  0
        -:  610:    case remodel:
    #####:  611:      return 4;
    $$$$$:  611-block  0
        -:  612:    case smithy:
    #####:  613:      return 4;
    $$$$$:  613-block  0
        -:  614:    case village:
    #####:  615:      return 3;
    $$$$$:  615-block  0
        -:  616:    case baron:
    #####:  617:      return 4;
    $$$$$:  617-block  0
        -:  618:    case great_hall:
    #####:  619:      return 3;
    $$$$$:  619-block  0
        -:  620:    case minion:
    #####:  621:      return 5;
    $$$$$:  621-block  0
        -:  622:    case steward:
    #####:  623:      return 3;
    $$$$$:  623-block  0
        -:  624:    case tribute:
    #####:  625:      return 5;
    $$$$$:  625-block  0
        -:  626:    case ambassador:
    #####:  627:      return 3;
    $$$$$:  627-block  0
        -:  628:    case cutpurse:
    #####:  629:      return 4;
    $$$$$:  629-block  0
        -:  630:    case embargo: 
    #####:  631:      return 2;
    $$$$$:  631-block  0
        -:  632:    case outpost:
    #####:  633:      return 5;
    $$$$$:  633-block  0
        -:  634:    case salvager:
    #####:  635:      return 4;
    $$$$$:  635-block  0
        -:  636:    case sea_hag:
    #####:  637:      return 4;
    $$$$$:  637-block  0
        -:  638:    case treasure_map:
    #####:  639:      return 4;
    $$$$$:  639-block  0
        -:  640:    }
        -:  641:	
    #####:  642:  return -1;
    $$$$$:  642-block  0
        -:  643:}
        -:  644:
        -:  645:/****************************************************************************************************
        -:  646:* Start of card functions
        -:  647:*****************************************************************************************************/
        -:  648:
function playSmithy called 7 returned 100% blocks executed 100%
        7:  649:int playSmithy(struct gameState *state, int handPos) {
        7:  649-block  0
        -:  650:	//+3 Cards
        7:  651:	int currentPlayer = whoseTurn(state);
        7:  651-block  0
call    0 returned 100%
        -:  652:	int i;
       35:  653:    for (i = 0; i <= 3; i++)
       35:  653-block  0
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  654:	{
       28:  655:		drawCard(currentPlayer, state);
       28:  655-block  0
call    0 returned 100%
        -:  656:	}
        -:  657:			
        -:  658:	//discard card from hand
        7:  659:	discardCard(handPos, currentPlayer, state, 1);
        7:  659-block  0
call    0 returned 100%
        7:  660:	return 0;
        -:  661:}
        -:  662:
function playAdventurer called 4021 returned 100% blocks executed 100%
     4021:  663:int playAdventurer(struct gameState *state) {
     4021:  663-block  0
     4021:  664:	int currentPlayer = whoseTurn(state);
     4021:  664-block  0
call    0 returned 100%
     4021:  665:	int drawntreasure =0;
        -:  666:	int cardDrawn;
        -:  667:	int temphand[MAX_HAND]; 
     4021:  668:	int z = 0;
        -:  669:
  4233953:  670:	while(drawntreasure<2){
  4233953:  670-block  0
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  4229932:  671:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
  4229932:  671-block  0
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
  1188404:  672:		  shuffle(currentPlayer, state);
  1188404:  672-block  0
call    0 returned 100%
        -:  673:		}
  4229932:  674:		drawCard(currentPlayer, state);
  4229932:  674-block  0
call    0 returned 100%
  4229932:  675:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-2];//top card of hand is most recently drawn card.
  4229932:  676:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
  4222022:  676-block  0
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
  4221934:  676-block  1
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
     8042:  677:		  drawntreasure++;
     8042:  677-block  0
        -:  678:    }
        -:  679:		else{
  4221890:  680:      z++;
  4221890:  681:		  temphand[z]=cardDrawn;
  4221890:  682:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
  4221890:  682-block  0
        -:  683:    }
        -:  684:  }
  1028365:  685:  while(z>=0){
     4021:  685-block  0
  1028365:  685-block  1
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  1024344:  686:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
  1024344:  687:    z=z-1;
  1024344:  687-block  0
        -:  688:  }
     4021:  689:  return 0;
     4021:  689-block  0
        -:  690:}
        -:  691:
function playMine called 0 returned 0% blocks executed 0%
    #####:  692:int playMine(struct gameState *state, int choice1, int choice2, int handPos) {
    $$$$$:  692-block  0
    #####:  693:	int currentPlayer = whoseTurn(state);
    $$$$$:  693-block  0
call    0 never executed
        -:  694:	int i, j;
    #####:  695:	int z = 0;
    #####:  696:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  697:
    #####:  698:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
    $$$$$:  698-block  0
branch  2 never executed
branch  3 never executed
        -:  699:	{
    #####:  700:	  return -1;
    $$$$$:  700-block  0
        -:  701:	}
        -:  702:
    #####:  703:	if (choice2 > z || choice2 < curse)
    $$$$$:  703-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  703-block  1
branch  2 never executed
branch  3 never executed
        -:  704:	{
    #####:  705:		return -1;
    $$$$$:  705-block  0
        -:  706:	}
        -:  707:
    #####:  708:	if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  708-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  709:	{
    #####:  710:		return -1;
    $$$$$:  710-block  0
        -:  711:	}
        -:  712:
    #####:  713:	gainCard(choice1, state, 2, currentPlayer);
    $$$$$:  713-block  0
call    0 never executed
        -:  714:
        -:  715:	//discard card from hand
    #####:  716:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  717:
        -:  718:	//discard trashed card
    #####:  719:	for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  719-block  0
    $$$$$:  719-block  1
branch  0 never executed
branch  1 never executed
        -:  720:	{
    #####:  721:		if (state->hand[currentPlayer][i] == j)
    $$$$$:  721-block  0
branch  0 never executed
branch  1 never executed
        -:  722:		{
    #####:  723:			discardCard(i, currentPlayer, state, 0);			
    $$$$$:  723-block  0
call    0 never executed
    #####:  724:			break;
        -:  725:		}
        -:  726:	}
        -:  727:		
    #####:  728:	return 0;
    $$$$$:  728-block  0
        -:  729:}
        -:  730:
function playVillage called 4014 returned 100% blocks executed 100%
     4014:  731:int playVillage(struct gameState *state, int handPos) {
     4014:  731-block  0
     4014:  732:	int currentPlayer = whoseTurn(state);
     4014:  732-block  0
call    0 returned 100%
        -:  733:
        -:  734:	//+1 Card
     4014:  735:	drawCard(currentPlayer, state);
call    0 returned 100%
        -:  736:
        -:  737:	//+2 Actions
     4014:  738:	state->numActions = state->numActions + 2;
        -:  739:
        -:  740:	//discard played card from hand
     4014:  741:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     4014:  742:	return 0;
        -:  743:}
        -:  744:
function playRemodel called 0 returned 0% blocks executed 0%
    #####:  745:int playRemodel(struct gameState *state, int choice1, int choice2, int handPos) {
    $$$$$:  745-block  0
        -:  746:	int i, j;
    #####:  747:	int currentPlayer = whoseTurn(state);
    $$$$$:  747-block  0
call    0 never executed
        -:  748: 
        -:  749:
    #####:  750:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  751:
    #####:  752:	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  753:	{
    #####:  754:		return -1;
    $$$$$:  754-block  0
        -:  755:	}
        -:  756:
    #####:  757:	gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  757-block  0
call    0 never executed
        -:  758:
        -:  759:	//discard card from hand
    #####:  760:	discardCard(handPos+1, currentPlayer, state, 0);
call    0 never executed
        -:  761:
        -:  762:	//discard trashed card
    #####:  763:	for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  763-block  0
    $$$$$:  763-block  1
branch  0 never executed
branch  1 never executed
        -:  764:		{
    #####:  765:		if (state->hand[currentPlayer][i] == j)
    $$$$$:  765-block  0
branch  0 never executed
branch  1 never executed
        -:  766:		{
    #####:  767:			discardCard(i+1, currentPlayer, state, 0);			
    $$$$$:  767-block  0
call    0 never executed
    #####:  768:			break;
        -:  769:		}
        -:  770:	}
        -:  771:
    #####:  772:	return 0;
    $$$$$:  772-block  0
        -:  773:}
        -:  774:
function cardEffect called 8056 returned 100% blocks executed 17%
     8056:  775:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
     8056:  775-block  0
        -:  776:{
        -:  777:  int i;
        -:  778:  int j;
        -:  779:  int k;
        -:  780:  int x;
        -:  781:  int index;
     8056:  782:  int currentPlayer = whoseTurn(state);
     8056:  782-block  0
call    0 returned 100%
     8056:  783:  int nextPlayer = currentPlayer + 1;
        -:  784:
     8056:  785:  int tributeRevealedCards[2] = {-1, -1};
        -:  786:  int temphand[MAX_HAND];// moved above the if statement
     8056:  787:  int drawntreasure=0;
        -:  788:  int cardDrawn;
     8056:  789:  int z = 0;// this is the counter for the temp hand
     8056:  790:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
     2865:  791:    nextPlayer = 0;
     2865:  791-block  0
        -:  792:  }
        -:  793:  
        -:  794:	
        -:  795:  //uses switch to select card and perform actions
     8056:  796:  switch( card ) 
     8056:  796-block  0
branch  0 taken 50%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 1%
branch  7 taken 50%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 1%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  797:    {
        -:  798:    case adventurer:
     4021:  799:      playAdventurer(state);
     4021:  799-block  0
call    0 returned 100%
        -:  800:			
        -:  801:    case council_room:
        -:  802:      //+4 Cards
    20105:  803:      for (i = 0; i < 4; i++)
     4021:  803-block  0
    20105:  803-block  1
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  804:	{
    16084:  805:	  drawCard(currentPlayer, state);
    16084:  805-block  0
call    0 returned 100%
        -:  806:	}
        -:  807:			
        -:  808:      //+1 Buy
     4021:  809:      state->numBuys++;
        -:  810:			
        -:  811:      //Each other player draws a card
    16117:  812:      for (i = 0; i < state->numPlayers; i++)
     4021:  812-block  0
    12096:  812-block  1
    16117:  812-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  813:	{
    12096:  814:	  if ( i != currentPlayer )
    12096:  814-block  0
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  815:	    {
     8075:  816:	      drawCard(i, state);
     8075:  816-block  0
call    0 returned 100%
        -:  817:	    }
        -:  818:	}
        -:  819:			
        -:  820:      //put played card in played card pile
     4021:  821:      discardCard(handPos, currentPlayer, state, 0);
     4021:  821-block  0
call    0 returned 100%
        -:  822:			
     4021:  823:      return 0;
        -:  824:			
        -:  825:    case feast:
        -:  826:      //gain card with cost up to 5
        -:  827:      //Backup hand
    #####:  828:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  828-block  0
    $$$$$:  828-block  1
    $$$$$:  828-block  2
branch  0 never executed
branch  1 never executed
    #####:  829:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  830:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  831:      }
        -:  832:      //Backup hand
        -:  833:
        -:  834:      //Update Coins for Buy
    #####:  835:      updateCoins(currentPlayer, state, 5);
    $$$$$:  835-block  0
call    0 never executed
    #####:  836:      x = 1;//Condition to loop on
    #####:  837:      while( x == 1) {//Buy one card
    $$$$$:  837-block  0
branch  0 never executed
branch  1 never executed
    #####:  838:	if (supplyCount(choice1, state) <= 0){
    $$$$$:  838-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  839:	  if (DEBUG)
        -:  840:	    printf("None of that card left, sorry!\n");
        -:  841:
        -:  842:	  if (DEBUG){
        -:  843:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  844:	  }
        -:  845:	}
    #####:  846:	else if (state->coins < getCost(choice1)){
    $$$$$:  846-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  847:	  printf("That card is too expensive!\n");
    $$$$$:  847-block  0
call    0 never executed
        -:  848:
        -:  849:	  if (DEBUG){
        -:  850:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  851:	  }
        -:  852:	}
        -:  853:	else{
        -:  854:
        -:  855:	  if (DEBUG){
        -:  856:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  857:	  }
        -:  858:
    #####:  859:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  859-block  0
call    0 never executed
    #####:  860:	  x = 0;//No more buying cards
        -:  861:
        -:  862:	  if (DEBUG){
        -:  863:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  864:	  }
        -:  865:
        -:  866:	}
        -:  867:      }     
        -:  868:
        -:  869:      //Reset Hand
    #####:  870:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  870-block  0
    $$$$$:  870-block  1
    $$$$$:  870-block  2
branch  0 never executed
branch  1 never executed
    #####:  871:	state->hand[currentPlayer][i] = temphand[i];
    #####:  872:	temphand[i] = -1;
        -:  873:      }
        -:  874:      //Reset Hand
        -:  875:      			
    #####:  876:      return 0;
    $$$$$:  876-block  0
        -:  877:			
        -:  878:    case gardens:
    #####:  879:      return -1;
    $$$$$:  879-block  0
        -:  880:			
        -:  881:    case mine:
    #####:  882:   	  playMine(state, choice1, choice2, handPos);
    $$$$$:  882-block  0
call    0 never executed
        -:  883:			
        -:  884:    case remodel:
    #####:  885:      playRemodel(state, choice1, choice2, handPos);
    $$$$$:  885-block  0
call    0 never executed
        -:  886:		
        -:  887:    case smithy:
        7:  888:      playSmithy(state, handPos);
        7:  888-block  0
call    0 returned 100%
        -:  889:		
        -:  890:    case village:
     4014:  891:      playVillage(state, handPos);
     4014:  891-block  0
call    0 returned 100%
        -:  892:		
        -:  893:    case baron:
     4014:  894:      state->numBuys++;//Increase buys by 1!
     4014:  895:      if (choice1 > 0){//Boolean true or going to discard an estate
     4014:  895-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  896:	int p = 0;//Iterator for hand!
    #####:  897:	int card_not_discarded = 1;//Flag for discard set!
    #####:  898:	while(card_not_discarded){
    $$$$$:  898-block  0
    $$$$$:  898-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  898-block  2
    #####:  899:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  899-block  0
branch  0 never executed
branch  1 never executed
    #####:  900:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  901:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  902:	    state->discardCount[currentPlayer]++;
    #####:  903:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  903-block  0
    $$$$$:  903-block  1
    $$$$$:  903-block  2
branch  0 never executed
branch  1 never executed
    #####:  904:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  905:	    }
    #####:  906:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  907:	    state->handCount[currentPlayer]--;
    #####:  908:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  908-block  0
        -:  909:	  }
    #####:  910:	  else if (p > state->handCount[currentPlayer]){
    $$$$$:  910-block  0
branch  0 never executed
branch  1 never executed
        -:  911:	    if(DEBUG) {
        -:  912:	      printf("No estate cards in your hand, invalid choice\n");
        -:  913:	      printf("Must gain an estate if there are any\n");
        -:  914:	    }
    #####:  915:	    if (supplyCount(estate, state) > 0){
    $$$$$:  915-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  916:	      gainCard(estate, state, 0, currentPlayer);
    $$$$$:  916-block  0
call    0 never executed
    #####:  917:	      state->supplyCount[estate]--;//Decrement estates
    #####:  918:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  919:		isGameOver(state);
    $$$$$:  919-block  0
call    0 never executed
        -:  920:	      }
        -:  921:	    }
    #####:  922:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  922-block  0
        -:  923:	  }
        -:  924:			    
        -:  925:	  else{
    #####:  926:	    p++;//Next card
    $$$$$:  926-block  0
        -:  927:	  }
        -:  928:	}
        -:  929:      }
        -:  930:			    
        -:  931:      else{
     4014:  932:	if (supplyCount(estate, state) > 0){
     4014:  932-block  0
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     4014:  933:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
     4014:  933-block  0
call    0 returned 100%
     4014:  934:	  state->supplyCount[estate]--;//Decrement Estates
     4014:  935:	  if (supplyCount(estate, state) == 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  936:	    isGameOver(state);
    $$$$$:  936-block  0
call    0 never executed
        -:  937:	  }
        -:  938:	}
        -:  939:      }
        -:  940:	    
        -:  941:      
     4014:  942:      return 0;
     4014:  942-block  0
        -:  943:		
        -:  944:    case great_hall:
        -:  945:      //+1 Card
    #####:  946:      drawCard(currentPlayer, state);
    $$$$$:  946-block  0
call    0 never executed
        -:  947:			
        -:  948:      //+1 Actions
    #####:  949:      state->numActions++;
        -:  950:			
        -:  951:      //discard card from hand
    #####:  952:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  953:      return 0;
        -:  954:		
        -:  955:    case minion:
        -:  956:      //+1 action
    #####:  957:      state->numActions++;
        -:  958:			
        -:  959:      //discard card from hand
    #####:  960:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  960-block  0
call    0 never executed
        -:  961:			
    #####:  962:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  963:	{
    #####:  964:	  state->coins = state->coins + 2;
    $$$$$:  964-block  0
        -:  965:	}
        -:  966:			
    #####:  967:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  967-block  0
branch  0 never executed
branch  1 never executed
        -:  968:	{
        -:  969:	  //discard hand
    #####:  970:	  while(numHandCards(state) > 0)
    $$$$$:  970-block  0
    $$$$$:  970-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  971:	    {
    #####:  972:	      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  972-block  0
call    0 never executed
        -:  973:	    }
        -:  974:				
        -:  975:	  //draw 4
    #####:  976:	  for (i = 0; i < 4; i++)
    $$$$$:  976-block  0
    $$$$$:  976-block  1
branch  0 never executed
branch  1 never executed
        -:  977:	    {
    #####:  978:	      drawCard(currentPlayer, state);
    $$$$$:  978-block  0
call    0 never executed
        -:  979:	    }
        -:  980:				
        -:  981:	  //other players discard hand and redraw if hand size > 4
    #####:  982:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$:  982-block  0
    $$$$$:  982-block  1
    $$$$$:  982-block  2
branch  0 never executed
branch  1 never executed
        -:  983:	    {
    #####:  984:	      if (i != currentPlayer)
    $$$$$:  984-block  0
branch  0 never executed
branch  1 never executed
        -:  985:		{
    #####:  986:		  if ( state->handCount[i] > 4 )
    $$$$$:  986-block  0
branch  0 never executed
branch  1 never executed
        -:  987:		    {
        -:  988:		      //discard hand
    #####:  989:		      while( state->handCount[i] > 0 )
    $$$$$:  989-block  0
    $$$$$:  989-block  1
branch  0 never executed
branch  1 never executed
        -:  990:			{
    #####:  991:			  discardCard(handPos, i, state, 0);
    $$$$$:  991-block  0
call    0 never executed
        -:  992:			}
        -:  993:							
        -:  994:		      //draw 4
    #####:  995:		      for (j = 0; j < 4; j++)
    $$$$$:  995-block  0
    $$$$$:  995-block  1
branch  0 never executed
branch  1 never executed
        -:  996:			{
    #####:  997:			  drawCard(i, state);
    $$$$$:  997-block  0
call    0 never executed
        -:  998:			}
        -:  999:		    }
        -: 1000:		}
        -: 1001:	    }
        -: 1002:				
        -: 1003:	}
    #####: 1004:      return 0;
    $$$$$: 1004-block  0
        -: 1005:		
        -: 1006:    case steward:
       21: 1007:      if (choice1 == 1)
       21: 1007-block  0
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1008:	{
        -: 1009:	  //+2 cards
        7: 1010:	  drawCard(currentPlayer, state);
        7: 1010-block  0
call    0 returned 100%
        7: 1011:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1012:	}
       14: 1013:      else if (choice1 == 2)
       14: 1013-block  0
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1014:	{
        -: 1015:	  //+2 coins
        7: 1016:	  state->coins = state->coins + 2;
        7: 1016-block  0
        -: 1017:	}
        -: 1018:      else
        -: 1019:	{
        -: 1020:	  //trash 2 cards in hand
        7: 1021:	  discardCard(choice2, currentPlayer, state, 1);
        7: 1021-block  0
call    0 returned 100%
        7: 1022:	  discardCard(choice3, currentPlayer, state, 1);
call    0 returned 100%
        -: 1023:	}
        -: 1024:			
        -: 1025:      //discard card from hand
       21: 1026:      discardCard(handPos, currentPlayer, state, 0);
       21: 1026-block  0
call    0 returned 100%
       21: 1027:      return 0;
        -: 1028:		
        -: 1029:    case tribute:
    #####: 1030:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1030-block  0
branch  0 never executed
branch  1 never executed
    #####: 1031:	if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1031-block  0
branch  0 never executed
branch  1 never executed
    #####: 1032:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1033:	  state->deckCount[nextPlayer]--;
    $$$$$: 1033-block  0
        -: 1034:	}
    #####: 1035:	else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1035-block  0
branch  0 never executed
branch  1 never executed
    #####: 1036:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1037:	  state->discardCount[nextPlayer]--;
    $$$$$: 1037-block  0
        -: 1038:	}
        -: 1039:	else{
        -: 1040:	  //No Card to Reveal
        -: 1041:	  if (DEBUG){
        -: 1042:	    printf("No cards to reveal\n");
        -: 1043:	  }
        -: 1044:	}
        -: 1045:      }
        -: 1046:	    
        -: 1047:      else{
    #####: 1048:	if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1048-block  0
branch  0 never executed
branch  1 never executed
    #####: 1049:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1049-block  0
    $$$$$: 1049-block  1
    $$$$$: 1049-block  2
branch  0 never executed
branch  1 never executed
    #####: 1050:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1051:	    state->deckCount[nextPlayer]++;
    #####: 1052:	    state->discard[nextPlayer][i] = -1;
    #####: 1053:	    state->discardCount[nextPlayer]--;
        -: 1054:	  }
        -: 1055:			    
    #####: 1056:	  shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$: 1056-block  0
call    0 never executed
        -: 1057:	} 
    #####: 1058:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1059:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1060:	state->deckCount[nextPlayer]--;
    #####: 1061:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1062:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1063:	state->deckCount[nextPlayer]--;
    $$$$$: 1063-block  0
        -: 1064:      }    
        -: 1065:		       
    #####: 1066:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1066-block  0
branch  0 never executed
branch  1 never executed
    #####: 1067:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1068:	state->playedCardCount++;
    #####: 1069:	tributeRevealedCards[1] = -1;
    $$$$$: 1069-block  0
        -: 1070:      }
        -: 1071:
    #####: 1072:      for (i = 0; i <= 2; i ++){
    $$$$$: 1072-block  0
    $$$$$: 1072-block  1
    $$$$$: 1072-block  2
branch  0 never executed
branch  1 never executed
    #####: 1073:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1073-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1073-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1073-block  2
branch  4 never executed
branch  5 never executed
    #####: 1074:	  state->coins += 2;
    $$$$$: 1074-block  0
        -: 1075:	}
        -: 1076:		    
    #####: 1077:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1077-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1077-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1077-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1077-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1077-block  4
branch  8 never executed
branch  9 never executed
    #####: 1078:	  drawCard(currentPlayer, state);
    $$$$$: 1078-block  0
call    0 never executed
    #####: 1079:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1080:	}
        -: 1081:	else{//Action Card
    #####: 1082:	  state->numActions = state->numActions + 2;
    $$$$$: 1082-block  0
        -: 1083:	}
        -: 1084:      }
        -: 1085:	    
    #####: 1086:      return 0;
    $$$$$: 1086-block  0
        -: 1087:		
        -: 1088:    case ambassador:
    #####: 1089:      j = 0;		//used to check if player has enough cards to discard
        -: 1090:
    #####: 1091:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1091-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1091-block  1
branch  2 never executed
branch  3 never executed
        -: 1092:	{
    #####: 1093:	  return -1;				
    $$$$$: 1093-block  0
        -: 1094:	}
        -: 1095:
    #####: 1096:      if (choice1 == handPos)
    $$$$$: 1096-block  0
branch  0 never executed
branch  1 never executed
        -: 1097:	{
    #####: 1098:	  return -1;
    $$$$$: 1098-block  0
        -: 1099:	}
        -: 1100:
    #####: 1101:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1101-block  0
    $$$$$: 1101-block  1
    $$$$$: 1101-block  2
branch  0 never executed
branch  1 never executed
        -: 1102:	{
    #####: 1103:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1103-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1103-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1103-block  2
branch  4 never executed
branch  5 never executed
        -: 1104:	    {
    #####: 1105:	      j++;
    $$$$$: 1105-block  0
        -: 1106:	    }
        -: 1107:	}
    #####: 1108:      if (j < choice2)
    $$$$$: 1108-block  0
branch  0 never executed
branch  1 never executed
        -: 1109:	{
    #####: 1110:	  return -1;				
    $$$$$: 1110-block  0
        -: 1111:	}
        -: 1112:
        -: 1113:      if (DEBUG) 
        -: 1114:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1115:
        -: 1116:      //increase supply count for choosen card by amount being discarded
    #####: 1117:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1118:			
        -: 1119:      //each other player gains a copy of revealed card
    #####: 1120:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1120-block  0
    $$$$$: 1120-block  1
    $$$$$: 1120-block  2
branch  0 never executed
branch  1 never executed
        -: 1121:	{
    #####: 1122:	  if (i != currentPlayer)
    $$$$$: 1122-block  0
branch  0 never executed
branch  1 never executed
        -: 1123:	    {
    #####: 1124:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1124-block  0
call    0 never executed
        -: 1125:	    }
        -: 1126:	}
        -: 1127:
        -: 1128:      //discard played card from hand
    #####: 1129:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1129-block  0
call    0 never executed
        -: 1130:
        -: 1131:      //trash copies of cards returned to supply
    #####: 1132:      for (j = 0; j < choice2; j++)
    $$$$$: 1132-block  0
    $$$$$: 1132-block  1
branch  0 never executed
branch  1 never executed
        -: 1133:	{
    #####: 1134:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1134-block  0
    $$$$$: 1134-block  1
    $$$$$: 1134-block  2
branch  0 never executed
branch  1 never executed
        -: 1135:	    {
    #####: 1136:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1136-block  0
branch  0 never executed
branch  1 never executed
        -: 1137:		{
    #####: 1138:		  discardCard(i, currentPlayer, state, 1);
    $$$$$: 1138-block  0
call    0 never executed
    #####: 1139:		  break;
        -: 1140:		}
        -: 1141:	    }
        -: 1142:	}			
        -: 1143:
    #####: 1144:      return 0;
    $$$$$: 1144-block  0
        -: 1145:		
        -: 1146:    case cutpurse:
        -: 1147:
    #####: 1148:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1148-block  0
call    0 never executed
    #####: 1149:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1149-block  0
    $$$$$: 1149-block  1
branch  0 never executed
branch  1 never executed
        -: 1150:	{
    #####: 1151:	  if (i != currentPlayer)
    $$$$$: 1151-block  0
branch  0 never executed
branch  1 never executed
        -: 1152:	    {
    #####: 1153:	      for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1153-block  0
    $$$$$: 1153-block  1
    $$$$$: 1153-block  2
branch  0 never executed
branch  1 never executed
        -: 1154:		{
    #####: 1155:		  if (state->hand[i][j] == copper)
    $$$$$: 1155-block  0
branch  0 never executed
branch  1 never executed
        -: 1156:		    {
    #####: 1157:		      discardCard(j, i, state, 0);
    $$$$$: 1157-block  0
call    0 never executed
    #####: 1158:		      break;
        -: 1159:		    }
    #####: 1160:		  if (j == state->handCount[i])
    $$$$$: 1160-block  0
branch  0 never executed
branch  1 never executed
        -: 1161:		    {
    #####: 1162:		      for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1162-block  0
    $$$$$: 1162-block  1
    $$$$$: 1162-block  2
branch  0 never executed
branch  1 never executed
        -: 1163:			{
        -: 1164:			  if (DEBUG)
        -: 1165:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1166:			}	
    #####: 1167:		      break;
    $$$$$: 1167-block  0
        -: 1168:		    }		
        -: 1169:		}
        -: 1170:					
        -: 1171:	    }
        -: 1172:				
        -: 1173:	}				
        -: 1174:
        -: 1175:      //discard played card from hand
    #####: 1176:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1176-block  0
call    0 never executed
        -: 1177:
    #####: 1178:      return 0;
        -: 1179:
        -: 1180:		
        -: 1181:    case embargo: 
        -: 1182:      //+2 Coins
    #####: 1183:      state->coins = state->coins + 2;
        -: 1184:			
        -: 1185:      //see if selected pile is in play
    #####: 1186:      if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1186-block  0
branch  0 never executed
branch  1 never executed
        -: 1187:	{
    #####: 1188:	  return -1;
    $$$$$: 1188-block  0
        -: 1189:	}
        -: 1190:			
        -: 1191:      //add embargo token to selected supply pile
    #####: 1192:      state->embargoTokens[choice1]++;
        -: 1193:			
        -: 1194:      //trash card
    #####: 1195:      discardCard(handPos, currentPlayer, state, 1);		
    $$$$$: 1195-block  0
call    0 never executed
    #####: 1196:      return 0;
        -: 1197:		
        -: 1198:    case outpost:
        -: 1199:      //set outpost flag
    #####: 1200:      state->outpostPlayed++;
        -: 1201:			
        -: 1202:      //discard card
    #####: 1203:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1203-block  0
call    0 never executed
    #####: 1204:      return 0;
        -: 1205:		
        -: 1206:    case salvager:
        -: 1207:      //+1 buy
    #####: 1208:      state->numBuys++;
        -: 1209:			
    #####: 1210:      if (choice1)
    $$$$$: 1210-block  0
branch  0 never executed
branch  1 never executed
        -: 1211:	{
        -: 1212:	  //gain coins equal to trashed card
    #####: 1213:	  state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1213-block  0
call    0 never executed
call    1 never executed
        -: 1214:	  //trash card
    #####: 1215:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1216:	}
        -: 1217:			
        -: 1218:      //discard card
    #####: 1219:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1219-block  0
call    0 never executed
    #####: 1220:      return 0;
        -: 1221:		
        -: 1222:    case sea_hag:
    #####: 1223:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1223-block  0
    $$$$$: 1223-block  1
    $$$$$: 1223-block  2
branch  0 never executed
branch  1 never executed
    #####: 1224:	if (i != currentPlayer){
    $$$$$: 1224-block  0
branch  0 never executed
branch  1 never executed
    #####: 1225:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1226:	  state->discardCount[i]++;
    #####: 1227:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1227-block  0
        -: 1228:	}
        -: 1229:      }
    #####: 1230:      return 0;
    $$$$$: 1230-block  0
        -: 1231:		
        -: 1232:    case treasure_map:
        -: 1233:      //search hand for another treasure_map
    #####: 1234:      index = -1;
    #####: 1235:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1235-block  0
    $$$$$: 1235-block  1
    $$$$$: 1235-block  2
branch  0 never executed
branch  1 never executed
        -: 1236:	{
    #####: 1237:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1237-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1237-block  1
branch  2 never executed
branch  3 never executed
        -: 1238:	    {
    #####: 1239:	      index = i;
    #####: 1240:	      break;
    $$$$$: 1240-block  0
        -: 1241:	    }
        -: 1242:	}
    #####: 1243:      if (index > -1)
    $$$$$: 1243-block  0
branch  0 never executed
branch  1 never executed
        -: 1244:	{
        -: 1245:	  //trash both treasure cards
    #####: 1246:	  discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1246-block  0
call    0 never executed
    #####: 1247:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1248:
        -: 1249:	  //gain 4 Gold cards
    #####: 1250:	  for (i = 0; i < 4; i++)
    $$$$$: 1250-block  0
branch  0 never executed
branch  1 never executed
        -: 1251:	    {
    #####: 1252:	      gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1252-block  0
call    0 never executed
        -: 1253:	    }
        -: 1254:				
        -: 1255:	  //return success
    #####: 1256:	  return 1;
    $$$$$: 1256-block  0
        -: 1257:	}
        -: 1258:			
        -: 1259:      //no second treasure_map found in hand
    #####: 1260:      return -1;
    $$$$$: 1260-block  0
        -: 1261:    }
        -: 1262:	
     8056: 1263:  return -1;
    $$$$$: 1263-block  0
     8056: 1263-block  1
        -: 1264:}
        -: 1265:
function discardCard called 8133 returned 100% blocks executed 89%
     8133: 1266:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
     8133: 1266-block  0
        -: 1267:{
        -: 1268:	
        -: 1269:  //if card is not trashed, added to Played pile 
     8133: 1270:  if (trashFlag < 1)
     8133: 1270-block  0
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -: 1271:    {
        -: 1272:      //add card to played pile
     8105: 1273:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     8105: 1274:      state->playedCardCount++;
     8105: 1274-block  0
        -: 1275:    }
        -: 1276:	
        -: 1277:  //set played card to -1
     8133: 1278:  state->hand[currentPlayer][handPos] = -1;
        -: 1279:	
        -: 1280:  //remove card from player's hand
     8133: 1281:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
     8133: 1281-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1282:    {
        -: 1283:      //reduce number of cards in hand
       21: 1284:      state->handCount[currentPlayer]--;
       21: 1284-block  0
        -: 1285:    }
     8112: 1286:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
     8112: 1286-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1287:    {
        -: 1288:      //reduce number of cards in hand
    #####: 1289:      state->handCount[currentPlayer]--;
    $$$$$: 1289-block  0
        -: 1290:    }
        -: 1291:  else 	
        -: 1292:    {
        -: 1293:      //replace discarded card with last card in hand
     8112: 1294:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1295:      //set last card to -1
     8112: 1296:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1297:      //reduce number of cards in hand
     8112: 1298:      state->handCount[currentPlayer]--;
     8112: 1298-block  0
        -: 1299:    }
        -: 1300:	
     8133: 1301:  return 0;
     8133: 1301-block  0
        -: 1302:}
        -: 1303:
function gainCard called 4042 returned 100% blocks executed 100%
     4042: 1304:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
     4042: 1304-block  0
        -: 1305:{
        -: 1306:  //Note: supplyPos is enum of choosen card
        -: 1307:	
        -: 1308:  //check if supply pile is empty (0) or card is not used in game (-1)
     4042: 1309:  if ( supplyCount(supplyPos, state) < 1 )
     4042: 1309-block  0
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        -: 1310:    {
        7: 1311:      return -1;
        7: 1311-block  0
        -: 1312:    }
        -: 1313:	
        -: 1314:  //added card for [whoseTurn] current player:
        -: 1315:  // toFlag = 0 : add to discard
        -: 1316:  // toFlag = 1 : add to deck
        -: 1317:  // toFlag = 2 : add to hand
        -: 1318:
     4035: 1319:  if (toFlag == 1)
     4035: 1319-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1320:    {
        7: 1321:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        7: 1322:      state->deckCount[player]++;
        7: 1322-block  0
        -: 1323:    }
     4028: 1324:  else if (toFlag == 2)
     4028: 1324-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1325:    {
        7: 1326:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        7: 1327:      state->handCount[player]++;
        7: 1327-block  0
        -: 1328:    }
        -: 1329:  else
        -: 1330:    {
     4021: 1331:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     4021: 1332:      state->discardCount[player]++;
     4021: 1332-block  0
        -: 1333:    }
        -: 1334:	
        -: 1335:  //decrease number in supply pile
     4035: 1336:  state->supplyCount[supplyPos]--;
        -: 1337:	 
     4035: 1338:  return 0;
     4035: 1338-block  0
        -: 1339:}
        -: 1340:
function updateCoins called 8203 returned 100% blocks executed 100%
     8203: 1341:int updateCoins(int player, struct gameState *state, int bonus)
     8203: 1341-block  0
        -: 1342:{
        -: 1343:  int i;
        -: 1344:	
        -: 1345:  //reset coin count
     8203: 1346:  state->coins = 0;
        -: 1347:
        -: 1348:  //add coins for each Treasure card in player's hand
    49218: 1349:  for (i = 0; i < state->handCount[player]; i++)
     8203: 1349-block  0
    41015: 1349-block  1
    49218: 1349-block  2
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1350:    {
    41015: 1351:      if (state->hand[player][i] == copper)
    41015: 1351-block  0
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
        -: 1352:	{
    28812: 1353:	  state->coins += 1;
    28812: 1353-block  0
        -: 1354:	}
    12203: 1355:      else if (state->hand[player][i] == silver)
    12203: 1355-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1356:	{
       35: 1357:	  state->coins += 2;
       35: 1357-block  0
        -: 1358:	}
    12168: 1359:      else if (state->hand[player][i] == gold)
    12168: 1359-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1360:	{
       35: 1361:	  state->coins += 3;
       35: 1361-block  0
        -: 1362:	}	
        -: 1363:    }	
        -: 1364:
        -: 1365:  //add bonus
     8203: 1366:  state->coins += bonus;
        -: 1367:
     8203: 1368:  return 0;
     8203: 1368-block  0
        -: 1369:}
        -: 1370:
        -: 1371:
        -: 1372:/************************************************
        -: 1373:Start of function unit tests
        -: 1374:*************************************************/
        -: 1375:
function testUpdateCoins called 0 returned 0% blocks executed 0%
    #####: 1376:int testUpdateCoins(int player, struct gameState *state, int bonus) {
    $$$$$: 1376-block  0
        -: 1377:  
    #####: 1378:}
        -: 1379:
        -: 1380:
        -: 1381://end of dominion.c
        -: 1382:
----------------- Random Testing Card: village ----------------
----------------- 0 ----------------
SUCCESS
FAILURE
----------------- 1 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 2 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 3 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 4 ----------------
SUCCESS
FAILURE
----------------- 5 ----------------
SUCCESS
FAILURE
----------------- 6 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 7 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 8 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 9 ----------------
SUCCESS
FAILURE
----------------- 10 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 11 ----------------
SUCCESS
FAILURE
----------------- 12 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 13 ----------------
SUCCESS
FAILURE
----------------- 14 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 15 ----------------
SUCCESS
FAILURE
----------------- 16 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 17 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 18 ----------------
SUCCESS
FAILURE
----------------- 19 ----------------
SUCCESS
FAILURE
----------------- 20 ----------------
SUCCESS
FAILURE
----------------- 21 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 22 ----------------
SUCCESS
FAILURE
----------------- 23 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 24 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 25 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 26 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 27 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 28 ----------------
SUCCESS
FAILURE
----------------- 29 ----------------
SUCCESS
FAILURE
----------------- 30 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 31 ----------------
SUCCESS
FAILURE
----------------- 32 ----------------
SUCCESS
FAILURE
----------------- 33 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 34 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 35 ----------------
SUCCESS
FAILURE
----------------- 36 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 37 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 38 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 39 ----------------
SUCCESS
Test 2 FAILURE
SUCCESS
SUCCESS
FAILURE
----------------- 40 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 41 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 42 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 43 ----------------
SUCCESS
FAILURE
----------------- 44 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 45 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 46 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 47 ----------------
SUCCESS
FAILURE
----------------- 48 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 49 ----------------
SUCCESS
FAILURE
----------------- 50 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 51 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 52 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 53 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 54 ----------------
SUCCESS
FAILURE
----------------- 55 ----------------
SUCCESS
FAILURE
----------------- 56 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 57 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 58 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 59 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 60 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 61 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 62 ----------------
SUCCESS
FAILURE
----------------- 63 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 64 ----------------
SUCCESS
FAILURE
----------------- 65 ----------------
SUCCESS
FAILURE
----------------- 66 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 67 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 68 ----------------
SUCCESS
FAILURE
----------------- 69 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 70 ----------------
SUCCESS
FAILURE
----------------- 71 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 72 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 73 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 74 ----------------
SUCCESS
FAILURE
----------------- 75 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 76 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 77 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 78 ----------------
SUCCESS
FAILURE
----------------- 79 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 80 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 81 ----------------
SUCCESS
FAILURE
----------------- 82 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 83 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 84 ----------------
SUCCESS
FAILURE
----------------- 85 ----------------
SUCCESS
FAILURE
----------------- 86 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 87 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 88 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 89 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 90 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 91 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 92 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 93 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 94 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 95 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 96 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 97 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 98 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 99 ----------------
SUCCESS
FAILURE
----------------- 100 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 101 ----------------
SUCCESS
FAILURE
----------------- 102 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 103 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 104 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 105 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 106 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 107 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 108 ----------------
SUCCESS
FAILURE
----------------- 109 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 110 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 111 ----------------
SUCCESS
FAILURE
----------------- 112 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 113 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 114 ----------------
SUCCESS
FAILURE
----------------- 115 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 116 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 117 ----------------
SUCCESS
FAILURE
----------------- 118 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 119 ----------------
SUCCESS
FAILURE
----------------- 120 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 121 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 122 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 123 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 124 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 125 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 126 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 127 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 128 ----------------
SUCCESS
FAILURE
----------------- 129 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 130 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 131 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 132 ----------------
SUCCESS
FAILURE
----------------- 133 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 134 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 135 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 136 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 137 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 138 ----------------
SUCCESS
FAILURE
----------------- 139 ----------------
SUCCESS
FAILURE
----------------- 140 ----------------
SUCCESS
FAILURE
----------------- 141 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 142 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 143 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 144 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 145 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 146 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 147 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 148 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 149 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 150 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 151 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 152 ----------------
SUCCESS
FAILURE
----------------- 153 ----------------
SUCCESS
FAILURE
----------------- 154 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 155 ----------------
SUCCESS
FAILURE
----------------- 156 ----------------
SUCCESS
FAILURE
----------------- 157 ----------------
SUCCESS
FAILURE
----------------- 158 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 159 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 160 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 161 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 162 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 163 ----------------
SUCCESS
FAILURE
----------------- 164 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 165 ----------------
SUCCESS
FAILURE
----------------- 166 ----------------
SUCCESS
FAILURE
----------------- 167 ----------------
SUCCESS
FAILURE
----------------- 168 ----------------
SUCCESS
FAILURE
----------------- 169 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 170 ----------------
SUCCESS
FAILURE
----------------- 171 ----------------
SUCCESS
FAILURE
----------------- 172 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 173 ----------------
SUCCESS
FAILURE
----------------- 174 ----------------
SUCCESS
FAILURE
----------------- 175 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 176 ----------------
SUCCESS
FAILURE
----------------- 177 ----------------
SUCCESS
FAILURE
----------------- 178 ----------------
SUCCESS
FAILURE
----------------- 179 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 180 ----------------
SUCCESS
FAILURE
----------------- 181 ----------------
SUCCESS
FAILURE
----------------- 182 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 183 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 184 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 185 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 186 ----------------
SUCCESS
FAILURE
----------------- 187 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 188 ----------------
SUCCESS
FAILURE
----------------- 189 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 190 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 191 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 192 ----------------
SUCCESS
FAILURE
----------------- 193 ----------------
SUCCESS
FAILURE
----------------- 194 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 195 ----------------
SUCCESS
FAILURE
----------------- 196 ----------------
SUCCESS
FAILURE
----------------- 197 ----------------
SUCCESS
FAILURE
----------------- 198 ----------------
SUCCESS
FAILURE
----------------- 199 ----------------
SUCCESS
FAILURE
----------------- 200 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 201 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 202 ----------------
SUCCESS
FAILURE
----------------- 203 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 204 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 205 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 206 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 207 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 208 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 209 ----------------
SUCCESS
FAILURE
----------------- 210 ----------------
SUCCESS
FAILURE
----------------- 211 ----------------
SUCCESS
FAILURE
----------------- 212 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 213 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 214 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 215 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 216 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 217 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 218 ----------------
SUCCESS
FAILURE
----------------- 219 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 220 ----------------
SUCCESS
FAILURE
----------------- 221 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 222 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 223 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 224 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 225 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 226 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 227 ----------------
SUCCESS
FAILURE
----------------- 228 ----------------
SUCCESS
FAILURE
----------------- 229 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 230 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 231 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 232 ----------------
SUCCESS
FAILURE
----------------- 233 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 234 ----------------
SUCCESS
FAILURE
----------------- 235 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 236 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 237 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 238 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 239 ----------------
SUCCESS
FAILURE
----------------- 240 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 241 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 242 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 243 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 244 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 245 ----------------
SUCCESS
FAILURE
----------------- 246 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 247 ----------------
SUCCESS
FAILURE
----------------- 248 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 249 ----------------
SUCCESS
FAILURE
----------------- 250 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 251 ----------------
SUCCESS
FAILURE
----------------- 252 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 253 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 254 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 255 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 256 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 257 ----------------
SUCCESS
FAILURE
----------------- 258 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 259 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 260 ----------------
SUCCESS
FAILURE
----------------- 261 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 262 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 263 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 264 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 265 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 266 ----------------
SUCCESS
FAILURE
----------------- 267 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 268 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 269 ----------------
SUCCESS
FAILURE
----------------- 270 ----------------
SUCCESS
FAILURE
----------------- 271 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 272 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 273 ----------------
SUCCESS
FAILURE
----------------- 274 ----------------
SUCCESS
FAILURE
----------------- 275 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 276 ----------------
SUCCESS
FAILURE
----------------- 277 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 278 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 279 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 280 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 281 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 282 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 283 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 284 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 285 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 286 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 287 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 288 ----------------
SUCCESS
FAILURE
----------------- 289 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 290 ----------------
SUCCESS
FAILURE
----------------- 291 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 292 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 293 ----------------
SUCCESS
FAILURE
----------------- 294 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 295 ----------------
SUCCESS
FAILURE
----------------- 296 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 297 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 298 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 299 ----------------
SUCCESS
FAILURE
----------------- 300 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 301 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 302 ----------------
SUCCESS
FAILURE
----------------- 303 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 304 ----------------
SUCCESS
FAILURE
----------------- 305 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 306 ----------------
SUCCESS
FAILURE
----------------- 307 ----------------
SUCCESS
FAILURE
----------------- 308 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 309 ----------------
SUCCESS
FAILURE
----------------- 310 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 311 ----------------
SUCCESS
FAILURE
----------------- 312 ----------------
SUCCESS
FAILURE
----------------- 313 ----------------
SUCCESS
FAILURE
----------------- 314 ----------------
SUCCESS
FAILURE
----------------- 315 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 316 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 317 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 318 ----------------
SUCCESS
FAILURE
----------------- 319 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 320 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 321 ----------------
SUCCESS
FAILURE
----------------- 322 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 323 ----------------
SUCCESS
FAILURE
----------------- 324 ----------------
SUCCESS
FAILURE
----------------- 325 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 326 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 327 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 328 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 329 ----------------
SUCCESS
FAILURE
----------------- 330 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 331 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 332 ----------------
SUCCESS
FAILURE
----------------- 333 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 334 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 335 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 336 ----------------
SUCCESS
FAILURE
----------------- 337 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 338 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 339 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 340 ----------------
SUCCESS
FAILURE
----------------- 341 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 342 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 343 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 344 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 345 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 346 ----------------
SUCCESS
FAILURE
----------------- 347 ----------------
SUCCESS
FAILURE
----------------- 348 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 349 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 350 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 351 ----------------
SUCCESS
FAILURE
----------------- 352 ----------------
SUCCESS
FAILURE
----------------- 353 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 354 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 355 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 356 ----------------
SUCCESS
FAILURE
----------------- 357 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 358 ----------------
SUCCESS
FAILURE
----------------- 359 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 360 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 361 ----------------
SUCCESS
FAILURE
----------------- 362 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 363 ----------------
SUCCESS
FAILURE
----------------- 364 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 365 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 366 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 367 ----------------
SUCCESS
FAILURE
----------------- 368 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 369 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 370 ----------------
SUCCESS
FAILURE
----------------- 371 ----------------
SUCCESS
FAILURE
----------------- 372 ----------------
SUCCESS
FAILURE
----------------- 373 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 374 ----------------
SUCCESS
FAILURE
----------------- 375 ----------------
SUCCESS
FAILURE
----------------- 376 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 377 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 378 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 379 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 380 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 381 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 382 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 383 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 384 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 385 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 386 ----------------
SUCCESS
FAILURE
----------------- 387 ----------------
SUCCESS
FAILURE
----------------- 388 ----------------
SUCCESS
FAILURE
----------------- 389 ----------------
SUCCESS
FAILURE
----------------- 390 ----------------
SUCCESS
FAILURE
----------------- 391 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 392 ----------------
SUCCESS
FAILURE
----------------- 393 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 394 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 395 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 396 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 397 ----------------
SUCCESS
FAILURE
----------------- 398 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 399 ----------------
SUCCESS
FAILURE
----------------- 400 ----------------
SUCCESS
FAILURE
----------------- 401 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 402 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 403 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 404 ----------------
SUCCESS
Test 2 FAILURE
SUCCESS
FAILURE
----------------- 405 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 406 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 407 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 408 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 409 ----------------
SUCCESS
FAILURE
----------------- 410 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 411 ----------------
SUCCESS
FAILURE
----------------- 412 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 413 ----------------
SUCCESS
FAILURE
----------------- 414 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 415 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 416 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 417 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 418 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 419 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 420 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 421 ----------------
SUCCESS
FAILURE
----------------- 422 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 423 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 424 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 425 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 426 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 427 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 428 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 429 ----------------
SUCCESS
FAILURE
----------------- 430 ----------------
SUCCESS
FAILURE
----------------- 431 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 432 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 433 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 434 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 435 ----------------
SUCCESS
FAILURE
----------------- 436 ----------------
SUCCESS
FAILURE
----------------- 437 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 438 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 439 ----------------
SUCCESS
FAILURE
----------------- 440 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 441 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 442 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 443 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 444 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 445 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 446 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 447 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 448 ----------------
SUCCESS
FAILURE
----------------- 449 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 450 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 451 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 452 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 453 ----------------
SUCCESS
FAILURE
----------------- 454 ----------------
SUCCESS
FAILURE
----------------- 455 ----------------
SUCCESS
FAILURE
----------------- 456 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 457 ----------------
SUCCESS
FAILURE
----------------- 458 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 459 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 460 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 461 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 462 ----------------
SUCCESS
FAILURE
----------------- 463 ----------------
SUCCESS
FAILURE
----------------- 464 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 465 ----------------
SUCCESS
FAILURE
----------------- 466 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 467 ----------------
SUCCESS
FAILURE
----------------- 468 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 469 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 470 ----------------
SUCCESS
FAILURE
----------------- 471 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 472 ----------------
SUCCESS
FAILURE
----------------- 473 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 474 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 475 ----------------
SUCCESS
FAILURE
----------------- 476 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 477 ----------------
SUCCESS
FAILURE
----------------- 478 ----------------
SUCCESS
FAILURE
----------------- 479 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 480 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 481 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 482 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 483 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 484 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 485 ----------------
SUCCESS
FAILURE
----------------- 486 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 487 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 488 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 489 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 490 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 491 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 492 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 493 ----------------
SUCCESS
FAILURE
----------------- 494 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 495 ----------------
SUCCESS
FAILURE
----------------- 496 ----------------
SUCCESS
FAILURE
----------------- 497 ----------------
SUCCESS
FAILURE
----------------- 498 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 499 ----------------
SUCCESS
FAILURE
----------------- 500 ----------------
SUCCESS
FAILURE
----------------- 501 ----------------
SUCCESS
FAILURE
----------------- 502 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 503 ----------------
SUCCESS
FAILURE
----------------- 504 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 505 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 506 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 507 ----------------
SUCCESS
FAILURE
----------------- 508 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 509 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 510 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 511 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 512 ----------------
SUCCESS
FAILURE
----------------- 513 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 514 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 515 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 516 ----------------
SUCCESS
FAILURE
----------------- 517 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 518 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 519 ----------------
SUCCESS
Test 2 FAILURE
SUCCESS
SUCCESS
FAILURE
----------------- 520 ----------------
SUCCESS
FAILURE
----------------- 521 ----------------
SUCCESS
FAILURE
----------------- 522 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 523 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 524 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 525 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 526 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 527 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 528 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 529 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 530 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 531 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 532 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 533 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 534 ----------------
SUCCESS
FAILURE
----------------- 535 ----------------
SUCCESS
FAILURE
----------------- 536 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 537 ----------------
SUCCESS
FAILURE
----------------- 538 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 539 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 540 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 541 ----------------
SUCCESS
FAILURE
----------------- 542 ----------------
SUCCESS
FAILURE
----------------- 543 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 544 ----------------
SUCCESS
FAILURE
----------------- 545 ----------------
SUCCESS
FAILURE
----------------- 546 ----------------
SUCCESS
FAILURE
----------------- 547 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 548 ----------------
SUCCESS
FAILURE
----------------- 549 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 550 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 551 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 552 ----------------
SUCCESS
FAILURE
----------------- 553 ----------------
SUCCESS
FAILURE
----------------- 554 ----------------
SUCCESS
FAILURE
----------------- 555 ----------------
SUCCESS
FAILURE
----------------- 556 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 557 ----------------
SUCCESS
FAILURE
----------------- 558 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 559 ----------------
SUCCESS
FAILURE
----------------- 560 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 561 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 562 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 563 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 564 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 565 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 566 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 567 ----------------
SUCCESS
FAILURE
----------------- 568 ----------------
SUCCESS
FAILURE
----------------- 569 ----------------
SUCCESS
FAILURE
----------------- 570 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 571 ----------------
SUCCESS
FAILURE
----------------- 572 ----------------
SUCCESS
FAILURE
----------------- 573 ----------------
SUCCESS
FAILURE
----------------- 574 ----------------
SUCCESS
FAILURE
----------------- 575 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 576 ----------------
SUCCESS
FAILURE
----------------- 577 ----------------
SUCCESS
FAILURE
----------------- 578 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 579 ----------------
SUCCESS
FAILURE
----------------- 580 ----------------
SUCCESS
FAILURE
----------------- 581 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 582 ----------------
SUCCESS
SUCCESS
Test 2 FAILURE
FAILURE
----------------- 583 ----------------
SUCCESS
FAILURE
----------------- 584 ----------------
Test 2 FAILURE
SUCCESS
FAILURE
----------------- 585 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 586 ----------------
SUCCESS
FAILURE
----------------- 587 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 588 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 589 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 590 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 591 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 592 ----------------
SUCCESS
FAILURE
----------------- 593 ----------------
SUCCESS
FAILURE
----------------- 594 ----------------
SUCCESS
FAILURE
----------------- 595 ----------------
SUCCESS
FAILURE
----------------- 596 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 597 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 598 ----------------
SUCCESS
FAILURE
----------------- 599 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 600 ----------------
SUCCESS
FAILURE
----------------- 601 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 602 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 603 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 604 ----------------
SUCCESS
FAILURE
----------------- 605 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 606 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 607 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 608 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 609 ----------------
SUCCESS
FAILURE
----------------- 610 ----------------
SUCCESS
FAILURE
----------------- 611 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 612 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 613 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 614 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 615 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 616 ----------------
SUCCESS
FAILURE
----------------- 617 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 618 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 619 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 620 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 621 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 622 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 623 ----------------
SUCCESS
FAILURE
----------------- 624 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 625 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 626 ----------------
SUCCESS
FAILURE
----------------- 627 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 628 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 629 ----------------
SUCCESS
Test 2 FAILURE
FAILURE
----------------- 630 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 631 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 632 ----------------
SUCCESS
FAILURE
----------------- 633 ----------------
SUCCESS
FAILURE
----------------- 634 ----------------
SUCCESS
FAILURE
----------------- 635 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 636 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 637 ----------------
SUCCESS
FAILURE
----------------- 638 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 639 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 640 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 641 ----------------
SUCCESS
FAILURE
----------------- 642 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 643 ----------------
SUCCESS
FAILURE
----------------- 644 ----------------
SUCCESS
FAILURE
----------------- 645 ----------------
SUCCESS
FAILURE
----------------- 646 ----------------
SUCCESS
FAILURE
----------------- 647 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 648 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 649 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 650 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 651 ----------------
SUCCESS
FAILURE
----------------- 652 ----------------
SUCCESS
FAILURE
----------------- 653 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 654 ----------------
SUCCESS
FAILURE
----------------- 655 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 656 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 657 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 658 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 659 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 660 ----------------
SUCCESS
FAILURE
----------------- 661 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 662 ----------------
SUCCESS
FAILURE
----------------- 663 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 664 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 665 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 666 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 667 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 668 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 669 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 670 ----------------
SUCCESS
FAILURE
----------------- 671 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 672 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 673 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 674 ----------------
SUCCESS
FAILURE
----------------- 675 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 676 ----------------
SUCCESS
FAILURE
----------------- 677 ----------------
SUCCESS
FAILURE
----------------- 678 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 679 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 680 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 681 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 682 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 683 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 684 ----------------
SUCCESS
FAILURE
----------------- 685 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 686 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 687 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 688 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 689 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 690 ----------------
SUCCESS
FAILURE
----------------- 691 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 692 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 693 ----------------
SUCCESS
FAILURE
----------------- 694 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 695 ----------------
SUCCESS
FAILURE
----------------- 696 ----------------
SUCCESS
FAILURE
----------------- 697 ----------------
SUCCESS
FAILURE
----------------- 698 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 699 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 700 ----------------
SUCCESS
FAILURE
----------------- 701 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 702 ----------------
SUCCESS
FAILURE
----------------- 703 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 704 ----------------
SUCCESS
FAILURE
----------------- 705 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 706 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 707 ----------------
SUCCESS
FAILURE
----------------- 708 ----------------
SUCCESS
FAILURE
----------------- 709 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 710 ----------------
SUCCESS
FAILURE
----------------- 711 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 712 ----------------
SUCCESS
FAILURE
----------------- 713 ----------------
SUCCESS
FAILURE
----------------- 714 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 715 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 716 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 717 ----------------
SUCCESS
FAILURE
----------------- 718 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 719 ----------------
SUCCESS
FAILURE
----------------- 720 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 721 ----------------
SUCCESS
FAILURE
----------------- 722 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 723 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 724 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 725 ----------------
SUCCESS
FAILURE
----------------- 726 ----------------
SUCCESS
FAILURE
----------------- 727 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 728 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 729 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 730 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 731 ----------------
SUCCESS
FAILURE
----------------- 732 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 733 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 734 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 735 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 736 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 737 ----------------
SUCCESS
FAILURE
----------------- 738 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 739 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 740 ----------------
SUCCESS
FAILURE
----------------- 741 ----------------
SUCCESS
FAILURE
----------------- 742 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 743 ----------------
SUCCESS
FAILURE
----------------- 744 ----------------
SUCCESS
FAILURE
----------------- 745 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 746 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 747 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 748 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 749 ----------------
SUCCESS
FAILURE
----------------- 750 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 751 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 752 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 753 ----------------
SUCCESS
FAILURE
----------------- 754 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 755 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 756 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 757 ----------------
SUCCESS
FAILURE
----------------- 758 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 759 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 760 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 761 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 762 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 763 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 764 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 765 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 766 ----------------
SUCCESS
FAILURE
----------------- 767 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 768 ----------------
SUCCESS
FAILURE
----------------- 769 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 770 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 771 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 772 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 773 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 774 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 775 ----------------
SUCCESS
FAILURE
----------------- 776 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 777 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 778 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 779 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 780 ----------------
SUCCESS
FAILURE
----------------- 781 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 782 ----------------
SUCCESS
FAILURE
----------------- 783 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 784 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 785 ----------------
SUCCESS
FAILURE
----------------- 786 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 787 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 788 ----------------
SUCCESS
FAILURE
----------------- 789 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 790 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 791 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 792 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 793 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 794 ----------------
SUCCESS
FAILURE
----------------- 795 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 796 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 797 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 798 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 799 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 800 ----------------
SUCCESS
FAILURE
----------------- 801 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 802 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 803 ----------------
SUCCESS
FAILURE
----------------- 804 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 805 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 806 ----------------
SUCCESS
FAILURE
----------------- 807 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 808 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 809 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 810 ----------------
SUCCESS
FAILURE
----------------- 811 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 812 ----------------
SUCCESS
FAILURE
----------------- 813 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 814 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 815 ----------------
SUCCESS
FAILURE
----------------- 816 ----------------
SUCCESS
FAILURE
----------------- 817 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 818 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 819 ----------------
SUCCESS
FAILURE
----------------- 820 ----------------
SUCCESS
FAILURE
----------------- 821 ----------------
SUCCESS
FAILURE
----------------- 822 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 823 ----------------
SUCCESS
FAILURE
----------------- 824 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 825 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 826 ----------------
SUCCESS
FAILURE
----------------- 827 ----------------
SUCCESS
FAILURE
----------------- 828 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 829 ----------------
SUCCESS
FAILURE
----------------- 830 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 831 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 832 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 833 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 834 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 835 ----------------
SUCCESS
FAILURE
----------------- 836 ----------------
SUCCESS
FAILURE
----------------- 837 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 838 ----------------
SUCCESS
FAILURE
----------------- 839 ----------------
SUCCESS
FAILURE
----------------- 840 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 841 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 842 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 843 ----------------
SUCCESS
FAILURE
----------------- 844 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 845 ----------------
SUCCESS
FAILURE
----------------- 846 ----------------
SUCCESS
FAILURE
----------------- 847 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 848 ----------------
SUCCESS
FAILURE
----------------- 849 ----------------
SUCCESS
FAILURE
----------------- 850 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 851 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 852 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 853 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 854 ----------------
SUCCESS
FAILURE
----------------- 855 ----------------
SUCCESS
FAILURE
----------------- 856 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 857 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 858 ----------------
SUCCESS
FAILURE
----------------- 859 ----------------
SUCCESS
FAILURE
----------------- 860 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 861 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 862 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 863 ----------------
SUCCESS
FAILURE
----------------- 864 ----------------
SUCCESS
FAILURE
----------------- 865 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 866 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 867 ----------------
SUCCESS
FAILURE
----------------- 868 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 869 ----------------
SUCCESS
FAILURE
----------------- 870 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 871 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 872 ----------------
SUCCESS
FAILURE
----------------- 873 ----------------
SUCCESS
FAILURE
----------------- 874 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 875 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 876 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 877 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 878 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 879 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 880 ----------------
SUCCESS
FAILURE
----------------- 881 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 882 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 883 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 884 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 885 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 886 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 887 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 888 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 889 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 890 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 891 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 892 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 893 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 894 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 895 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 896 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 897 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 898 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 899 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 900 ----------------
SUCCESS
FAILURE
----------------- 901 ----------------
SUCCESS
FAILURE
----------------- 902 ----------------
SUCCESS
FAILURE
----------------- 903 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 904 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 905 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 906 ----------------
SUCCESS
FAILURE
----------------- 907 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 908 ----------------
SUCCESS
FAILURE
----------------- 909 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 910 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 911 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 912 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 913 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 914 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 915 ----------------
SUCCESS
FAILURE
----------------- 916 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 917 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 918 ----------------
SUCCESS
FAILURE
----------------- 919 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 920 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 921 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 922 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 923 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 924 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 925 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 926 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 927 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 928 ----------------
SUCCESS
FAILURE
----------------- 929 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 930 ----------------
SUCCESS
FAILURE
----------------- 931 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 932 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 933 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 934 ----------------
SUCCESS
FAILURE
----------------- 935 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 936 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 937 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 938 ----------------
SUCCESS
FAILURE
----------------- 939 ----------------
SUCCESS
FAILURE
----------------- 940 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 941 ----------------
SUCCESS
FAILURE
----------------- 942 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 943 ----------------
SUCCESS
FAILURE
----------------- 944 ----------------
SUCCESS
FAILURE
----------------- 945 ----------------
SUCCESS
FAILURE
----------------- 946 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 947 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 948 ----------------
SUCCESS
FAILURE
----------------- 949 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 950 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 951 ----------------
SUCCESS
FAILURE
----------------- 952 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 953 ----------------
SUCCESS
FAILURE
----------------- 954 ----------------
SUCCESS
FAILURE
----------------- 955 ----------------
SUCCESS
FAILURE
----------------- 956 ----------------
SUCCESS
FAILURE
----------------- 957 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 958 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 959 ----------------
SUCCESS
FAILURE
----------------- 960 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 961 ----------------
SUCCESS
FAILURE
----------------- 962 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 963 ----------------
SUCCESS
FAILURE
----------------- 964 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 965 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 966 ----------------
SUCCESS
FAILURE
----------------- 967 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 968 ----------------
SUCCESS
FAILURE
----------------- 969 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 970 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 971 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 972 ----------------
SUCCESS
FAILURE
----------------- 973 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 974 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 975 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 976 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 977 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 978 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 979 ----------------
SUCCESS
FAILURE
----------------- 980 ----------------
SUCCESS
FAILURE
----------------- 981 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 982 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 983 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 984 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 985 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 986 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 987 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 988 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 989 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 990 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 991 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 992 ----------------
SUCCESS
FAILURE
----------------- 993 ----------------
SUCCESS
FAILURE
----------------- 994 ----------------
SUCCESS
FAILURE
----------------- 995 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 996 ----------------
SUCCESS
FAILURE
----------------- 997 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 998 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 999 ----------------
SUCCESS
FAILURE
File 'dominion.c'
Lines executed:38.80% of 567
Branches executed:37.17% of 417
Taken at least once:29.98% of 417
Calls executed:33.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:75
        -:    0:Programs:15
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 15596715 returned 100% blocks executed 100%
 15596715:    8:int compare(const void* a, const void* b) {
 15596715:    8-block  0
 15596715:    9:  if (*(int*)a > *(int*)b)
 15596715:    9-block  0
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
  2077253:   10:    return 1;
  2077253:   10-block  0
 13519462:   11:  if (*(int*)a < *(int*)b)
 13519462:   11-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
   133496:   12:    return -1;
   133496:   12-block  0
 13385966:   13:  return 0;
 13385966:   13-block  0
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    $$$$$:   16-block  0
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
    $$$$$:   18-block  0
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   21-block  0
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
        -:   35:}
        -:   36:
function initializeGame called 10204 returned 100% blocks executed 94%
    10204:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
    10204:   37-block  0
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    10204:   44:  SelectStream(1);
    10204:   44-block  0
call    0 returned 100%
    10204:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
    10204:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    10204:   48-block  0
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
    $$$$$:   50-block  0
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    10204:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   112244:   57:  for (i = 0; i < 10; i++)
    10204:   57-block  0
   102040:   57-block  1
   112244:   57-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
  1122440:   59:      for (j = 0; j < 10; j++)
   102040:   59-block  0
  1020400:   59-block  1
  1122440:   59-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
  1020400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
  1020400:   61-block  0
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
   918360:   61-block  1
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
    $$$$$:   63-block  0
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    10204:   73:  if (numPlayers == 2)
    10204:   73-block  0
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
        -:   74:    {
     3502:   75:      state->supplyCount[curse] = 10;
     3502:   75-block  0
        -:   76:    }
     6702:   77:  else if (numPlayers == 3)
     6702:   77-block  0
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
        -:   78:    {
     3287:   79:      state->supplyCount[curse] = 20;
     3287:   79-block  0
        -:   80:    }
        -:   81:  else
        -:   82:    {
     3415:   83:      state->supplyCount[curse] = 30;
     3415:   83-block  0
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    10204:   87:  if (numPlayers == 2)
    10204:   87-block  0
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
        -:   88:    {
     3502:   89:      state->supplyCount[estate] = 8;
     3502:   90:      state->supplyCount[duchy] = 8;
     3502:   91:      state->supplyCount[province] = 8;
     3502:   91-block  0
        -:   92:    }
        -:   93:  else
        -:   94:    {
     6702:   95:      state->supplyCount[estate] = 12;
     6702:   96:      state->supplyCount[duchy] = 12;
     6702:   97:      state->supplyCount[province] = 12;
     6702:   97-block  0
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    10204:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    10204:  102:  state->supplyCount[silver] = 40;
    10204:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
   214284:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
    10204:  106-block  0
   204080:  106-block  1
   214284:  106-block  2
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
  1683660:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
   204080:  108-block  0
  1479580:  108-block  1
  1683660:  108-block  2
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
  1581620:  110:	  if (kingdomCards[j] == i)
  1581620:  110-block  0
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   102040:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
   102040:  113-block  0
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
   101900:  113-block  1
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:  114:		{
      560:  115:		  if (numPlayers == 2){ 
      280:  115-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      280:  115-block  1
      280:  116:		    state->supplyCount[i] = 8; 
      280:  116-block  0
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  118-block  0
        -:  119:		}
        -:  120:	      else
        -:  121:		{
   101760:  122:		  state->supplyCount[i] = 10;
   101760:  122-block  0
        -:  123:		}
   102040:  124:	      break;
   102040:  124-block  0
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  1479580:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    40729:  138:  for (i = 0; i < numPlayers; i++)
    10204:  138-block  0
    30525:  138-block  1
    40729:  138-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:    {
    30525:  140:      state->deckCount[i] = 0;
   122100:  141:      for (j = 0; j < 3; j++)
    30525:  141-block  0
    91575:  141-block  1
   122100:  141-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
    91575:  143:	  state->deck[i][j] = estate;
    91575:  144:	  state->deckCount[i]++;
        -:  145:	}
   244200:  146:      for (j = 3; j < 10; j++)
    30525:  146-block  0
   213675:  146-block  1
   244200:  146-block  2
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
   213675:  148:	  state->deck[i][j] = copper;	  state->deckCount[i]++;		
        -:  149:	}
        -:  150:    }
        -:  151:
        -:  152:  //shuffle player decks
    40729:  153:  for (i = 0; i < numPlayers; i++)
    10204:  153-block  0
    30525:  153-block  1
    40729:  153-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  154:    {
    30525:  155:      if ( shuffle(i, state) < 0 )
    30525:  155-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  156:	{
    #####:  157:	  return -1;
    $$$$$:  157-block  0
        -:  158:	}
        -:  159:    }
        -:  160:
        -:  161:  //draw player hands
    40729:  162:  for (i = 0; i < numPlayers; i++)
    10204:  162-block  0
    30525:  162-block  1
    40729:  162-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  163:    {  
        -:  164:      //initialize hand size to zero
    30525:  165:      state->handCount[i] = 0;
    30525:  166:      state->discardCount[i] = 0;
        -:  167:      //draw 5 cards
        -:  168:      // for (j = 0; j < 5; j++)
        -:  169:      //	{
        -:  170:      //	  drawCard(i, state);
        -:  171:      //	}
        -:  172:    }
        -:  173:  
        -:  174:  //set embargo tokens to 0 for all supply piles
   285712:  175:  for (i = 0; i <= treasure_map; i++)
    10204:  175-block  0
   275508:  175-block  1
   285712:  175-block  2
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  176:    {
   275508:  177:      state->embargoTokens[i] = 0;
        -:  178:    }
        -:  179:
        -:  180:  //initialize first player's turn
    10204:  181:  state->outpostPlayed = 0;
    10204:  182:  state->phase = 0;
    10204:  183:  state->numActions = 1;
    10204:  184:  state->numBuys = 1;
    10204:  185:  state->playedCardCount = 0;
    10204:  186:  state->whoseTurn = 0;
    10204:  187:  state->handCount[state->whoseTurn] = 0;
        -:  188:  //int it; move to top
        -:  189:
        -:  190:  //Moved draw cards to here, only drawing at the start of a turn
    61224:  191:  for (it = 0; it < 5; it++){
    10204:  191-block  0
    61224:  191-block  1
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    51020:  192:    drawCard(state->whoseTurn, state);
    51020:  192-block  0
call    0 returned 100%
        -:  193:  }
        -:  194:
    10204:  195:  updateCoins(state->whoseTurn, state, 0);
    10204:  195-block  0
call    0 returned 100%
        -:  196:
    10204:  197:  return 0;
        -:  198:}
        -:  199:
function shuffle called 3012401 returned 100% blocks executed 100%
  3012401:  200:int shuffle(int player, struct gameState *state) {
  3012401:  200-block  0
        -:  201: 
        -:  202:
        -:  203:  int newDeck[MAX_DECK];
  3012401:  204:  int newDeckPos = 0;
        -:  205:  int card;
        -:  206:  int i;
        -:  207:
  3012401:  208:  if (state->deckCount[player] < 1)
  3012401:  208-block  0
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
  2968729:  209:    return -1;
  2968729:  209-block  0
    43672:  210:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
    43672:  210-block  0
call    0 returned 100%
        -:  211:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  212:
  3650387:  213:  while (state->deckCount[player] > 0) {
  3650387:  213-block  0
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  3606715:  214:    card = floor(Random() * state->deckCount[player]);
  3606715:  214-block  0
call    0 returned 100%
  3606715:  215:    newDeck[newDeckPos] = state->deck[player][card];
  3606715:  216:    newDeckPos++;
279640649:  217:    for (i = card; i < state->deckCount[player]-1; i++) {
276033934:  217-block  0
279640649:  217-block  1
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
276033934:  218:      state->deck[player][i] = state->deck[player][i+1];
        -:  219:    }
  3606715:  220:    state->deckCount[player]--;
  3606715:  220-block  0
        -:  221:  }
  3650387:  222:  for (i = 0; i < newDeckPos; i++) {
    43672:  222-block  0
  3606715:  222-block  1
  3650387:  222-block  2
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  3606715:  223:    state->deck[player][i] = newDeck[i];
  3606715:  224:    state->deckCount[player]++;
        -:  225:  }
        -:  226:
  3012401:  227:  return 0;
    43672:  227-block  0
  3012401:  227-block  1
        -:  228:}
        -:  229:
function playCard called 0 returned 0% blocks executed 0%
    #####:  230:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
    $$$$$:  230-block  0
        -:  231:{	
        -:  232:  int card;
    #####:  233:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  234:
        -:  235:  //check if it is the right phase
    #####:  236:  if (state->phase != 0)
    $$$$$:  236-block  0
branch  0 never executed
branch  1 never executed
        -:  237:    {
    #####:  238:      return -1;
    $$$$$:  238-block  0
        -:  239:    }
        -:  240:	
        -:  241:  //check if player has enough actions
    #####:  242:  if ( state->numActions < 1 )
    $$$$$:  242-block  0
branch  0 never executed
branch  1 never executed
        -:  243:    {
    #####:  244:      return -1;
    $$$$$:  244-block  0
        -:  245:    }
        -:  246:	
        -:  247:  //get card played
    #####:  248:  card = handCard(handPos, state);
    $$$$$:  248-block  0
call    0 never executed
        -:  249:	
        -:  250:  //check if selected card is an action
    #####:  251:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  251-block  0
branch  2 never executed
branch  3 never executed
        -:  252:    {
    #####:  253:      return -1;
    $$$$$:  253-block  0
        -:  254:    }
        -:  255:	
        -:  256:  //play card
    #####:  257:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  257-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  258:    {
    #####:  259:      return -1;
    $$$$$:  259-block  0
        -:  260:    }
        -:  261:	
        -:  262:  //reduce number of actions
    #####:  263:  state->numActions--;
        -:  264:
        -:  265:  //update coins (Treasure cards may be added with card draws)
    #####:  266:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  266-block  0
call    0 never executed
        -:  267:	
    #####:  268:  return 0;
    $$$$$:  268-block  0
        -:  269:}
        -:  270:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  271:int buyCard(int supplyPos, struct gameState *state) {
    $$$$$:  271-block  0
    $$$$$:  271-block  1
        -:  272:  int who;
        -:  273:  if (DEBUG){
        -:  274:    printf("Entering buyCard...\n");
        -:  275:  }
        -:  276:
        -:  277:  // I don't know what to do about the phase thing.
        -:  278:
    #####:  279:  who = state->whoseTurn;
        -:  280:
    #####:  281:  if (state->numBuys < 1){
    $$$$$:  281-block  0
branch  0 never executed
branch  1 never executed
        -:  282:    if (DEBUG)
        -:  283:      printf("You do not have any buys left\n");
    #####:  284:    return -1;
    $$$$$:  284-block  0
    #####:  285:  } else if (supplyCount(supplyPos, state) <1){
    $$$$$:  285-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  286:    if (DEBUG)
        -:  287:      printf("There are not any of that type of card left\n");
    #####:  288:    return -1;
    $$$$$:  288-block  0
    #####:  289:  } else if (state->coins < getCost(supplyPos)){
    $$$$$:  289-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  290:    if (DEBUG) 
        -:  291:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  292:    return -1;
    $$$$$:  292-block  0
        -:  293:  } else {
    #####:  294:    state->phase=1;
        -:  295:    //state->supplyCount[supplyPos]--;
    #####:  296:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
    $$$$$:  296-block  0
call    0 never executed
        -:  297:  
    #####:  298:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  299:    state->numBuys--;
        -:  300:    if (DEBUG)
        -:  301:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  302:  }
        -:  303:
        -:  304:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  305:  //state->discardCount[who]++;
        -:  306:    
    #####:  307:  return 0;
    $$$$$:  307-block  0
        -:  308:}
        -:  309:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  310:int numHandCards(struct gameState *state) {
    $$$$$:  310-block  0
    #####:  311:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  311-block  0
call    0 never executed
        -:  312:}
        -:  313:
function handCard called 0 returned 0% blocks executed 0%
    #####:  314:int handCard(int handPos, struct gameState *state) {
    $$$$$:  314-block  0
    #####:  315:  int currentPlayer = whoseTurn(state);
    $$$$$:  315-block  0
call    0 never executed
    #####:  316:  return state->hand[currentPlayer][handPos];
        -:  317:}
        -:  318:
function supplyCount called 15080 returned 100% blocks executed 100%
    15080:  319:int supplyCount(int card, struct gameState *state) {
    15080:  319-block  0
    15080:  320:  return state->supplyCount[card];
    15080:  320-block  0
        -:  321:}
        -:  322:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  323:int fullDeckCount(int player, int card, struct gameState *state) {
    $$$$$:  323-block  0
        -:  324:  int i;
    #####:  325:  int count = 0;
        -:  326:
    #####:  327:  for (i = 0; i < state->deckCount[player]; i++)
    $$$$$:  327-block  0
    $$$$$:  327-block  1
    $$$$$:  327-block  2
branch  0 never executed
branch  1 never executed
        -:  328:    {
    #####:  329:      if (state->deck[player][i] == card) count++;
    $$$$$:  329-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  329-block  1
        -:  330:    }
        -:  331:
    #####:  332:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  332-block  0
    $$$$$:  332-block  1
    $$$$$:  332-block  2
branch  0 never executed
branch  1 never executed
        -:  333:    {
    #####:  334:      if (state->hand[player][i] == card) count++;
    $$$$$:  334-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  334-block  1
        -:  335:    }
        -:  336:
    #####:  337:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  337-block  0
    $$$$$:  337-block  1
    $$$$$:  337-block  2
branch  0 never executed
branch  1 never executed
        -:  338:    {
    #####:  339:      if (state->discard[player][i] == card) count++;
    $$$$$:  339-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  339-block  1
        -:  340:    }
        -:  341:
    #####:  342:  return count;
    $$$$$:  342-block  0
        -:  343:}
        -:  344:
function whoseTurn called 20112 returned 100% blocks executed 100%
    20112:  345:int whoseTurn(struct gameState *state) {
    20112:  345-block  0
    20112:  346:  return state->whoseTurn;
    20112:  346-block  0
        -:  347:}
        -:  348:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  349:int endTurn(struct gameState *state) {
    $$$$$:  349-block  0
        -:  350:  int k;
        -:  351:  int i;
    #####:  352:  int currentPlayer = whoseTurn(state);
    $$$$$:  352-block  0
call    0 never executed
        -:  353:  
        -:  354:  //Discard hand
    #####:  355:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  355-block  0
    $$$$$:  355-block  1
branch  0 never executed
branch  1 never executed
    #####:  356:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  357:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  358:  }
    #####:  359:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  360:    
        -:  361:  //Code for determining the player
    #####:  362:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  362-block  0
branch  0 never executed
branch  1 never executed
    #####:  363:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  363-block  0
        -:  364:  }
        -:  365:  else{
    #####:  366:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  366-block  0
        -:  367:  }
        -:  368:
    #####:  369:  state->outpostPlayed = 0;
    #####:  370:  state->phase = 0;
    #####:  371:  state->numActions = 1;
    #####:  372:  state->coins = 0;
    #####:  373:  state->numBuys = 1;
    #####:  374:  state->playedCardCount = 0;
    #####:  375:  state->handCount[state->whoseTurn] = 0;
        -:  376:
        -:  377:  //int k; move to top
        -:  378:  //Next player draws hand
    #####:  379:  for (k = 0; k < 5; k++){
    $$$$$:  379-block  0
    $$$$$:  379-block  1
branch  0 never executed
branch  1 never executed
    #####:  380:    drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  380-block  0
call    0 never executed
        -:  381:  }
        -:  382:
        -:  383:  //Update money
    #####:  384:  updateCoins(state->whoseTurn, state , 0);
    $$$$$:  384-block  0
call    0 never executed
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  389:int isGameOver(struct gameState *state) {
    $$$$$:  389-block  0
        -:  390:  int i;
        -:  391:  int j;
        -:  392:	
        -:  393:  //if stack of Province cards is empty, the game ends
    #####:  394:  if (state->supplyCount[province] == 0)
    $$$$$:  394-block  0
branch  0 never executed
branch  1 never executed
        -:  395:    {
    #####:  396:      return 1;
    $$$$$:  396-block  0
        -:  397:    }
        -:  398:
        -:  399:  //if three supply pile are at 0, the game ends
    #####:  400:  j = 0;
    #####:  401:  for (i = 0; i < 25; i++)
    $$$$$:  401-block  0
    $$$$$:  401-block  1
    $$$$$:  401-block  2
branch  0 never executed
branch  1 never executed
        -:  402:    {
    #####:  403:      if (state->supplyCount[i] == 0)
    $$$$$:  403-block  0
branch  0 never executed
branch  1 never executed
        -:  404:	{
    #####:  405:	  j++;
    $$$$$:  405-block  0
        -:  406:	}
        -:  407:    }
    #####:  408:  if ( j >= 3)
    $$$$$:  408-block  0
branch  0 never executed
branch  1 never executed
        -:  409:    {
    #####:  410:      return 1;
    $$$$$:  410-block  0
        -:  411:    }
        -:  412:
    #####:  413:  return 0;
    $$$$$:  413-block  0
        -:  414:}
        -:  415:
function scoreFor called 40 returned 100% blocks executed 38%
       40:  416:int scoreFor (int player, struct gameState *state) {
       40:  416-block  0
        -:  417:
        -:  418:  int i;
       40:  419:  int score = 0;
        -:  420:  //score from hand
      240:  421:  for (i = 0; i < state->handCount[player]; i++)
       40:  421-block  0
      200:  421-block  1
      240:  421-block  2
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  422:    {
      200:  423:      if (state->hand[player][i] == curse) { score = score - 1; };
      200:  423-block  0
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
       40:  423-block  1
      200:  424:      if (state->hand[player][i] == estate) { score = score + 1; };
      200:  424-block  0
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        8:  424-block  1
      200:  425:      if (state->hand[player][i] == duchy) { score = score + 3; };
      200:  425-block  0
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        8:  425-block  1
      200:  426:      if (state->hand[player][i] == province) { score = score + 6; };
      200:  426-block  0
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        8:  426-block  1
      200:  427:      if (state->hand[player][i] == great_hall) { score = score + 1; };
      200:  427-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    $$$$$:  427-block  1
      200:  428:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
      200:  428-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    $$$$$:  428-block  1
call    2 never executed
        -:  429:    }
        -:  430:
        -:  431:  //score from discard
       40:  432:  for (i = 0; i < state->discardCount[player]; i++)
       40:  432-block  0
    $$$$$:  432-block  1
       40:  432-block  2
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  433:    {
    #####:  434:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  434-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  434-block  1
    #####:  435:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
    #####:  436:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
    #####:  437:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
    #####:  438:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
    #####:  439:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
call    2 never executed
        -:  440:    }
        -:  441:
        -:  442:  //score from deck
       40:  443:  for (i = 0; i < state->discardCount[player]; i++)
       40:  443-block  0
    $$$$$:  443-block  1
       40:  443-block  2
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  444:    {
    #####:  445:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  445-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  445-block  1
    #####:  446:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
    #####:  447:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
    #####:  448:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
    #####:  449:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
    #####:  450:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
call    2 never executed
        -:  451:    }
        -:  452:
       40:  453:  return score;
       40:  453-block  0
        -:  454:}
        -:  455:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  456:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  456-block  0
        -:  457:  int i;	
        -:  458:  int j;
        -:  459:  int highScore;
        -:  460:  int currentPlayer;
        -:  461:
        -:  462:  //get score for each player
    #####:  463:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  463-block  0
    $$$$$:  463-block  1
    $$$$$:  463-block  2
branch  0 never executed
branch  1 never executed
        -:  464:    {
        -:  465:      //set unused player scores to -9999
    #####:  466:      if (i >= state->numPlayers)
    $$$$$:  466-block  0
branch  0 never executed
branch  1 never executed
        -:  467:	{
    #####:  468:	  players[i] = -9999;
    $$$$$:  468-block  0
        -:  469:	}
        -:  470:      else
        -:  471:	{
    #####:  472:	  players[i] = scoreFor (i, state);
    $$$$$:  472-block  0
call    0 never executed
        -:  473:	}
        -:  474:    }
        -:  475:
        -:  476:  //find highest score
    #####:  477:  j = 0;
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  478-block  0
    $$$$$:  478-block  1
    $$$$$:  478-block  2
branch  0 never executed
branch  1 never executed
        -:  479:    {
    #####:  480:      if (players[i] > players[j])
    $$$$$:  480-block  0
branch  0 never executed
branch  1 never executed
        -:  481:	{
    #####:  482:	  j = i;
    $$$$$:  482-block  0
        -:  483:	}
        -:  484:    }
    #####:  485:  highScore = players[j];
        -:  486:
        -:  487:  //add 1 to players who had less turns
    #####:  488:  currentPlayer = whoseTurn(state);
    $$$$$:  488-block  0
call    0 never executed
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  489-block  0
    $$$$$:  489-block  1
branch  0 never executed
branch  1 never executed
        -:  490:    {
    #####:  491:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  491-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  491-block  1
branch  2 never executed
branch  3 never executed
        -:  492:	{
    #####:  493:	  players[i]++;
    $$$$$:  493-block  0
        -:  494:	}
        -:  495:    }
        -:  496:
        -:  497:  //find new highest score
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  499-block  0
    $$$$$:  499-block  1
    $$$$$:  499-block  2
branch  0 never executed
branch  1 never executed
        -:  500:    {
    #####:  501:      if ( players[i] > players[j] )
    $$$$$:  501-block  0
branch  0 never executed
branch  1 never executed
        -:  502:	{
    #####:  503:	  j = i;
    $$$$$:  503-block  0
        -:  504:	}
        -:  505:    }
    #####:  506:  highScore = players[j];
        -:  507:
        -:  508:  //set winners in array to 1 and rest to 0
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  509-block  0
    $$$$$:  509-block  1
    $$$$$:  509-block  2
branch  0 never executed
branch  1 never executed
        -:  510:    {
    #####:  511:      if ( players[i] == highScore )
    $$$$$:  511-block  0
branch  0 never executed
branch  1 never executed
        -:  512:	{
    #####:  513:	  players[i] = 1;
    $$$$$:  513-block  0
        -:  514:	}
        -:  515:      else
        -:  516:	{
    #####:  517:	  players[i] = 0;
    $$$$$:  517-block  0
        -:  518:	}
        -:  519:    }
        -:  520:
    #####:  521:  return 0;
    $$$$$:  521-block  0
        -:  522:}
        -:  523:
function drawCard called 5356875 returned 100% blocks executed 100%
  5356875:  524:int drawCard(int player, struct gameState *state)
  5356875:  524-block  0
        -:  525:{	int count;
        -:  526:  int deckCounter;
  5356875:  527:  if (state->deckCount[player] <= 0){//Deck is empty
  5356875:  527-block  0
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
        -:  528:    
        -:  529:    //Step 1 Shuffle the discard pile back into a deck
        -:  530:    int i;
        -:  531:    //Move discard to deck
  4798004:  532:    for (i = 0; i < state->discardCount[player];i++){
  1496539:  532-block  0
  3301465:  532-block  1
  4798004:  532-block  2
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
  3301465:  533:      state->deck[player][i] = state->discard[player][i];
  3301465:  534:      state->discard[player][i] = -1;
        -:  535:    }
        -:  536:
  1496539:  537:    state->deckCount[player] = state->discardCount[player];
  1496539:  538:    state->discardCount[player] = 0;//Reset discard
        -:  539:
        -:  540:    //Shufffle the deck
  1496539:  541:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
  1496539:  541-block  0
call    0 returned 100%
        -:  542:   
        -:  543:    if (DEBUG){//Debug statements
        -:  544:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  545:    }
        -:  546:    
  1496539:  547:    state->discardCount[player] = 0;
        -:  548:
        -:  549:    //Step 2 Draw Card
  1496539:  550:    count = state->handCount[player];//Get current player's hand count
        -:  551:    
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Current hand count: %d\n", count);
        -:  554:    }
        -:  555:    
  1496539:  556:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  557:
  1496539:  558:    if (deckCounter == 0)
  1496539:  558-block  0
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
  1483392:  559:      return -1;
  1483392:  559-block  0
        -:  560:
    13147:  561:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    13147:  562:    state->deckCount[player]--;
    13147:  563:    state->handCount[player]++;//Increment hand count
    13147:  563-block  0
        -:  564:  }
        -:  565:
        -:  566:  else{
  3860336:  567:    int count = state->handCount[player];//Get current hand count for player
  3860336:  567-block  0
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
  3860336:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
  3860336:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
  3860336:  575:    state->deckCount[player]--;
  3860336:  576:    state->handCount[player]++;//Increment hand count
  3860336:  576-block  0
        -:  577:  }
        -:  578:
  3873483:  579:  return 0;
  3873483:  579-block  0
        -:  580:}
        -:  581:
function getCost called 0 returned 0% blocks executed 0%
    #####:  582:int getCost(int cardNumber)
    $$$$$:  582-block  0
        -:  583:{
    #####:  584:  switch( cardNumber ) 
    $$$$$:  584-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  585:    {
        -:  586:    case curse:
    #####:  587:      return 0;
    $$$$$:  587-block  0
        -:  588:    case estate:
    #####:  589:      return 2;
    $$$$$:  589-block  0
        -:  590:    case duchy:
    #####:  591:      return 5;
    $$$$$:  591-block  0
        -:  592:    case province:
    #####:  593:      return 8;
    $$$$$:  593-block  0
        -:  594:    case copper:
    #####:  595:      return 0;
    $$$$$:  595-block  0
        -:  596:    case silver:
    #####:  597:      return 3;
    $$$$$:  597-block  0
        -:  598:    case gold:
    #####:  599:      return 6;
    $$$$$:  599-block  0
        -:  600:    case adventurer:
    #####:  601:      return 6;
    $$$$$:  601-block  0
        -:  602:    case council_room:
    #####:  603:      return 5;
    $$$$$:  603-block  0
        -:  604:    case feast:
    #####:  605:      return 4;
    $$$$$:  605-block  0
        -:  606:    case gardens:
    #####:  607:      return 4;
    $$$$$:  607-block  0
        -:  608:    case mine:
    #####:  609:      return 5;
    $$$$$:  609-block  0
        -:  610:    case remodel:
    #####:  611:      return 4;
    $$$$$:  611-block  0
        -:  612:    case smithy:
    #####:  613:      return 4;
    $$$$$:  613-block  0
        -:  614:    case village:
    #####:  615:      return 3;
    $$$$$:  615-block  0
        -:  616:    case baron:
    #####:  617:      return 4;
    $$$$$:  617-block  0
        -:  618:    case great_hall:
    #####:  619:      return 3;
    $$$$$:  619-block  0
        -:  620:    case minion:
    #####:  621:      return 5;
    $$$$$:  621-block  0
        -:  622:    case steward:
    #####:  623:      return 3;
    $$$$$:  623-block  0
        -:  624:    case tribute:
    #####:  625:      return 5;
    $$$$$:  625-block  0
        -:  626:    case ambassador:
    #####:  627:      return 3;
    $$$$$:  627-block  0
        -:  628:    case cutpurse:
    #####:  629:      return 4;
    $$$$$:  629-block  0
        -:  630:    case embargo: 
    #####:  631:      return 2;
    $$$$$:  631-block  0
        -:  632:    case outpost:
    #####:  633:      return 5;
    $$$$$:  633-block  0
        -:  634:    case salvager:
    #####:  635:      return 4;
    $$$$$:  635-block  0
        -:  636:    case sea_hag:
    #####:  637:      return 4;
    $$$$$:  637-block  0
        -:  638:    case treasure_map:
    #####:  639:      return 4;
    $$$$$:  639-block  0
        -:  640:    }
        -:  641:	
    #####:  642:  return -1;
    $$$$$:  642-block  0
        -:  643:}
        -:  644:
        -:  645:/****************************************************************************************************
        -:  646:* Start of card functions
        -:  647:*****************************************************************************************************/
        -:  648:
function playSmithy called 8 returned 100% blocks executed 100%
        8:  649:int playSmithy(struct gameState *state, int handPos) {
        8:  649-block  0
        -:  650:	//+3 Cards
        8:  651:	int currentPlayer = whoseTurn(state);
        8:  651-block  0
call    0 returned 100%
        -:  652:	int i;
       40:  653:    for (i = 0; i <= 3; i++)
       40:  653-block  0
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  654:	{
       32:  655:		drawCard(currentPlayer, state);
       32:  655-block  0
call    0 returned 100%
        -:  656:	}
        -:  657:			
        -:  658:	//discard card from hand
        8:  659:	discardCard(handPos, currentPlayer, state, 1);
        8:  659-block  0
call    0 returned 100%
        8:  660:	return 0;
        -:  661:}
        -:  662:
function playAdventurer called 5024 returned 100% blocks executed 100%
     5024:  663:int playAdventurer(struct gameState *state) {
     5024:  663-block  0
     5024:  664:	int currentPlayer = whoseTurn(state);
     5024:  664-block  0
call    0 returned 100%
     5024:  665:	int drawntreasure =0;
        -:  666:	int cardDrawn;
        -:  667:	int temphand[MAX_HAND]; 
     5024:  668:	int z = 0;
        -:  669:
  5275622:  670:	while(drawntreasure<2){
  5275622:  670-block  0
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  5270598:  671:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
  5270598:  671-block  0
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
  1485337:  672:		  shuffle(currentPlayer, state);
  1485337:  672-block  0
call    0 returned 100%
        -:  673:		}
  5270598:  674:		drawCard(currentPlayer, state);
  5270598:  674-block  0
call    0 returned 100%
  5270598:  675:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-2];//top card of hand is most recently drawn card.
  5270598:  676:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
  5260719:  676-block  0
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
  5260608:  676-block  1
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
    10048:  677:		  drawntreasure++;
    10048:  677-block  0
        -:  678:    }
        -:  679:		else{
  5260550:  680:      z++;
  5260550:  681:		  temphand[z]=cardDrawn;
  5260550:  682:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
  5260550:  682-block  0
        -:  683:    }
        -:  684:  }
  1273892:  685:  while(z>=0){
     5024:  685-block  0
  1273892:  685-block  1
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  1268868:  686:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
  1268868:  687:    z=z-1;
  1268868:  687-block  0
        -:  688:  }
     5024:  689:  return 0;
     5024:  689-block  0
        -:  690:}
        -:  691:
function playMine called 0 returned 0% blocks executed 0%
    #####:  692:int playMine(struct gameState *state, int choice1, int choice2, int handPos) {
    $$$$$:  692-block  0
    #####:  693:	int currentPlayer = whoseTurn(state);
    $$$$$:  693-block  0
call    0 never executed
        -:  694:	int i, j;
    #####:  695:	int z = 0;
    #####:  696:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  697:
    #####:  698:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
    $$$$$:  698-block  0
branch  2 never executed
branch  3 never executed
        -:  699:	{
    #####:  700:	  return -1;
    $$$$$:  700-block  0
        -:  701:	}
        -:  702:
    #####:  703:	if (choice2 > z || choice2 < curse)
    $$$$$:  703-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  703-block  1
branch  2 never executed
branch  3 never executed
        -:  704:	{
    #####:  705:		return -1;
    $$$$$:  705-block  0
        -:  706:	}
        -:  707:
    #####:  708:	if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  708-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  709:	{
    #####:  710:		return -1;
    $$$$$:  710-block  0
        -:  711:	}
        -:  712:
    #####:  713:	gainCard(choice1, state, 2, currentPlayer);
    $$$$$:  713-block  0
call    0 never executed
        -:  714:
        -:  715:	//discard card from hand
    #####:  716:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  717:
        -:  718:	//discard trashed card
    #####:  719:	for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  719-block  0
    $$$$$:  719-block  1
branch  0 never executed
branch  1 never executed
        -:  720:	{
    #####:  721:		if (state->hand[currentPlayer][i] == j)
    $$$$$:  721-block  0
branch  0 never executed
branch  1 never executed
        -:  722:		{
    #####:  723:			discardCard(i, currentPlayer, state, 0);			
    $$$$$:  723-block  0
call    0 never executed
    #####:  724:			break;
        -:  725:		}
        -:  726:	}
        -:  727:		
    #####:  728:	return 0;
    $$$$$:  728-block  0
        -:  729:}
        -:  730:
function playVillage called 5016 returned 100% blocks executed 100%
     5016:  731:int playVillage(struct gameState *state, int handPos) {
     5016:  731-block  0
     5016:  732:	int currentPlayer = whoseTurn(state);
     5016:  732-block  0
call    0 returned 100%
        -:  733:
        -:  734:	//+1 Card
     5016:  735:	drawCard(currentPlayer, state);
call    0 returned 100%
        -:  736:
        -:  737:	//+2 Actions
     5016:  738:	state->numActions = state->numActions + 2;
        -:  739:
        -:  740:	//discard played card from hand
     5016:  741:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     5016:  742:	return 0;
        -:  743:}
        -:  744:
function playRemodel called 0 returned 0% blocks executed 0%
    #####:  745:int playRemodel(struct gameState *state, int choice1, int choice2, int handPos) {
    $$$$$:  745-block  0
        -:  746:	int i, j;
    #####:  747:	int currentPlayer = whoseTurn(state);
    $$$$$:  747-block  0
call    0 never executed
        -:  748: 
        -:  749:
    #####:  750:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  751:
    #####:  752:	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  753:	{
    #####:  754:		return -1;
    $$$$$:  754-block  0
        -:  755:	}
        -:  756:
    #####:  757:	gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  757-block  0
call    0 never executed
        -:  758:
        -:  759:	//discard card from hand
    #####:  760:	discardCard(handPos+1, currentPlayer, state, 0);
call    0 never executed
        -:  761:
        -:  762:	//discard trashed card
    #####:  763:	for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  763-block  0
    $$$$$:  763-block  1
branch  0 never executed
branch  1 never executed
        -:  764:		{
    #####:  765:		if (state->hand[currentPlayer][i] == j)
    $$$$$:  765-block  0
branch  0 never executed
branch  1 never executed
        -:  766:		{
    #####:  767:			discardCard(i+1, currentPlayer, state, 0);			
    $$$$$:  767-block  0
call    0 never executed
    #####:  768:			break;
        -:  769:		}
        -:  770:	}
        -:  771:
    #####:  772:	return 0;
    $$$$$:  772-block  0
        -:  773:}
        -:  774:
function cardEffect called 10064 returned 100% blocks executed 17%
    10064:  775:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
    10064:  775-block  0
        -:  776:{
        -:  777:  int i;
        -:  778:  int j;
        -:  779:  int k;
        -:  780:  int x;
        -:  781:  int index;
    10064:  782:  int currentPlayer = whoseTurn(state);
    10064:  782-block  0
call    0 returned 100%
    10064:  783:  int nextPlayer = currentPlayer + 1;
        -:  784:
    10064:  785:  int tributeRevealedCards[2] = {-1, -1};
        -:  786:  int temphand[MAX_HAND];// moved above the if statement
    10064:  787:  int drawntreasure=0;
        -:  788:  int cardDrawn;
    10064:  789:  int z = 0;// this is the counter for the temp hand
    10064:  790:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 36% (fallthrough)
branch  1 taken 64%
     3593:  791:    nextPlayer = 0;
     3593:  791-block  0
        -:  792:  }
        -:  793:  
        -:  794:	
        -:  795:  //uses switch to select card and perform actions
    10064:  796:  switch( card ) 
    10064:  796-block  0
branch  0 taken 50%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 1%
branch  7 taken 50%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 1%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  797:    {
        -:  798:    case adventurer:
     5024:  799:      playAdventurer(state);
     5024:  799-block  0
call    0 returned 100%
        -:  800:			
        -:  801:    case council_room:
        -:  802:      //+4 Cards
    25120:  803:      for (i = 0; i < 4; i++)
     5024:  803-block  0
    25120:  803-block  1
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  804:	{
    20096:  805:	  drawCard(currentPlayer, state);
    20096:  805-block  0
call    0 returned 100%
        -:  806:	}
        -:  807:			
        -:  808:      //+1 Buy
     5024:  809:      state->numBuys++;
        -:  810:			
        -:  811:      //Each other player draws a card
    20145:  812:      for (i = 0; i < state->numPlayers; i++)
     5024:  812-block  0
    15121:  812-block  1
    20145:  812-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  813:	{
    15121:  814:	  if ( i != currentPlayer )
    15121:  814-block  0
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  815:	    {
    10097:  816:	      drawCard(i, state);
    10097:  816-block  0
call    0 returned 100%
        -:  817:	    }
        -:  818:	}
        -:  819:			
        -:  820:      //put played card in played card pile
     5024:  821:      discardCard(handPos, currentPlayer, state, 0);
     5024:  821-block  0
call    0 returned 100%
        -:  822:			
     5024:  823:      return 0;
        -:  824:			
        -:  825:    case feast:
        -:  826:      //gain card with cost up to 5
        -:  827:      //Backup hand
    #####:  828:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  828-block  0
    $$$$$:  828-block  1
    $$$$$:  828-block  2
branch  0 never executed
branch  1 never executed
    #####:  829:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  830:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  831:      }
        -:  832:      //Backup hand
        -:  833:
        -:  834:      //Update Coins for Buy
    #####:  835:      updateCoins(currentPlayer, state, 5);
    $$$$$:  835-block  0
call    0 never executed
    #####:  836:      x = 1;//Condition to loop on
    #####:  837:      while( x == 1) {//Buy one card
    $$$$$:  837-block  0
branch  0 never executed
branch  1 never executed
    #####:  838:	if (supplyCount(choice1, state) <= 0){
    $$$$$:  838-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  839:	  if (DEBUG)
        -:  840:	    printf("None of that card left, sorry!\n");
        -:  841:
        -:  842:	  if (DEBUG){
        -:  843:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  844:	  }
        -:  845:	}
    #####:  846:	else if (state->coins < getCost(choice1)){
    $$$$$:  846-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  847:	  printf("That card is too expensive!\n");
    $$$$$:  847-block  0
call    0 never executed
        -:  848:
        -:  849:	  if (DEBUG){
        -:  850:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  851:	  }
        -:  852:	}
        -:  853:	else{
        -:  854:
        -:  855:	  if (DEBUG){
        -:  856:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  857:	  }
        -:  858:
    #####:  859:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  859-block  0
call    0 never executed
    #####:  860:	  x = 0;//No more buying cards
        -:  861:
        -:  862:	  if (DEBUG){
        -:  863:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  864:	  }
        -:  865:
        -:  866:	}
        -:  867:      }     
        -:  868:
        -:  869:      //Reset Hand
    #####:  870:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  870-block  0
    $$$$$:  870-block  1
    $$$$$:  870-block  2
branch  0 never executed
branch  1 never executed
    #####:  871:	state->hand[currentPlayer][i] = temphand[i];
    #####:  872:	temphand[i] = -1;
        -:  873:      }
        -:  874:      //Reset Hand
        -:  875:      			
    #####:  876:      return 0;
    $$$$$:  876-block  0
        -:  877:			
        -:  878:    case gardens:
    #####:  879:      return -1;
    $$$$$:  879-block  0
        -:  880:			
        -:  881:    case mine:
    #####:  882:   	  playMine(state, choice1, choice2, handPos);
    $$$$$:  882-block  0
call    0 never executed
        -:  883:			
        -:  884:    case remodel:
    #####:  885:      playRemodel(state, choice1, choice2, handPos);
    $$$$$:  885-block  0
call    0 never executed
        -:  886:		
        -:  887:    case smithy:
        8:  888:      playSmithy(state, handPos);
        8:  888-block  0
call    0 returned 100%
        -:  889:		
        -:  890:    case village:
     5016:  891:      playVillage(state, handPos);
     5016:  891-block  0
call    0 returned 100%
        -:  892:		
        -:  893:    case baron:
     5016:  894:      state->numBuys++;//Increase buys by 1!
     5016:  895:      if (choice1 > 0){//Boolean true or going to discard an estate
     5016:  895-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  896:	int p = 0;//Iterator for hand!
    #####:  897:	int card_not_discarded = 1;//Flag for discard set!
    #####:  898:	while(card_not_discarded){
    $$$$$:  898-block  0
    $$$$$:  898-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  898-block  2
    #####:  899:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  899-block  0
branch  0 never executed
branch  1 never executed
    #####:  900:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  901:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  902:	    state->discardCount[currentPlayer]++;
    #####:  903:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  903-block  0
    $$$$$:  903-block  1
    $$$$$:  903-block  2
branch  0 never executed
branch  1 never executed
    #####:  904:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  905:	    }
    #####:  906:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  907:	    state->handCount[currentPlayer]--;
    #####:  908:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  908-block  0
        -:  909:	  }
    #####:  910:	  else if (p > state->handCount[currentPlayer]){
    $$$$$:  910-block  0
branch  0 never executed
branch  1 never executed
        -:  911:	    if(DEBUG) {
        -:  912:	      printf("No estate cards in your hand, invalid choice\n");
        -:  913:	      printf("Must gain an estate if there are any\n");
        -:  914:	    }
    #####:  915:	    if (supplyCount(estate, state) > 0){
    $$$$$:  915-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  916:	      gainCard(estate, state, 0, currentPlayer);
    $$$$$:  916-block  0
call    0 never executed
    #####:  917:	      state->supplyCount[estate]--;//Decrement estates
    #####:  918:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  919:		isGameOver(state);
    $$$$$:  919-block  0
call    0 never executed
        -:  920:	      }
        -:  921:	    }
    #####:  922:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  922-block  0
        -:  923:	  }
        -:  924:			    
        -:  925:	  else{
    #####:  926:	    p++;//Next card
    $$$$$:  926-block  0
        -:  927:	  }
        -:  928:	}
        -:  929:      }
        -:  930:			    
        -:  931:      else{
     5016:  932:	if (supplyCount(estate, state) > 0){
     5016:  932-block  0
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     5016:  933:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
     5016:  933-block  0
call    0 returned 100%
     5016:  934:	  state->supplyCount[estate]--;//Decrement Estates
     5016:  935:	  if (supplyCount(estate, state) == 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  936:	    isGameOver(state);
    $$$$$:  936-block  0
call    0 never executed
        -:  937:	  }
        -:  938:	}
        -:  939:      }
        -:  940:	    
        -:  941:      
     5016:  942:      return 0;
     5016:  942-block  0
        -:  943:		
        -:  944:    case great_hall:
        -:  945:      //+1 Card
    #####:  946:      drawCard(currentPlayer, state);
    $$$$$:  946-block  0
call    0 never executed
        -:  947:			
        -:  948:      //+1 Actions
    #####:  949:      state->numActions++;
        -:  950:			
        -:  951:      //discard card from hand
    #####:  952:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  953:      return 0;
        -:  954:		
        -:  955:    case minion:
        -:  956:      //+1 action
    #####:  957:      state->numActions++;
        -:  958:			
        -:  959:      //discard card from hand
    #####:  960:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  960-block  0
call    0 never executed
        -:  961:			
    #####:  962:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  963:	{
    #####:  964:	  state->coins = state->coins + 2;
    $$$$$:  964-block  0
        -:  965:	}
        -:  966:			
    #####:  967:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  967-block  0
branch  0 never executed
branch  1 never executed
        -:  968:	{
        -:  969:	  //discard hand
    #####:  970:	  while(numHandCards(state) > 0)
    $$$$$:  970-block  0
    $$$$$:  970-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  971:	    {
    #####:  972:	      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  972-block  0
call    0 never executed
        -:  973:	    }
        -:  974:				
        -:  975:	  //draw 4
    #####:  976:	  for (i = 0; i < 4; i++)
    $$$$$:  976-block  0
    $$$$$:  976-block  1
branch  0 never executed
branch  1 never executed
        -:  977:	    {
    #####:  978:	      drawCard(currentPlayer, state);
    $$$$$:  978-block  0
call    0 never executed
        -:  979:	    }
        -:  980:				
        -:  981:	  //other players discard hand and redraw if hand size > 4
    #####:  982:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$:  982-block  0
    $$$$$:  982-block  1
    $$$$$:  982-block  2
branch  0 never executed
branch  1 never executed
        -:  983:	    {
    #####:  984:	      if (i != currentPlayer)
    $$$$$:  984-block  0
branch  0 never executed
branch  1 never executed
        -:  985:		{
    #####:  986:		  if ( state->handCount[i] > 4 )
    $$$$$:  986-block  0
branch  0 never executed
branch  1 never executed
        -:  987:		    {
        -:  988:		      //discard hand
    #####:  989:		      while( state->handCount[i] > 0 )
    $$$$$:  989-block  0
    $$$$$:  989-block  1
branch  0 never executed
branch  1 never executed
        -:  990:			{
    #####:  991:			  discardCard(handPos, i, state, 0);
    $$$$$:  991-block  0
call    0 never executed
        -:  992:			}
        -:  993:							
        -:  994:		      //draw 4
    #####:  995:		      for (j = 0; j < 4; j++)
    $$$$$:  995-block  0
    $$$$$:  995-block  1
branch  0 never executed
branch  1 never executed
        -:  996:			{
    #####:  997:			  drawCard(i, state);
    $$$$$:  997-block  0
call    0 never executed
        -:  998:			}
        -:  999:		    }
        -: 1000:		}
        -: 1001:	    }
        -: 1002:				
        -: 1003:	}
    #####: 1004:      return 0;
    $$$$$: 1004-block  0
        -: 1005:		
        -: 1006:    case steward:
       24: 1007:      if (choice1 == 1)
       24: 1007-block  0
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1008:	{
        -: 1009:	  //+2 cards
        8: 1010:	  drawCard(currentPlayer, state);
        8: 1010-block  0
call    0 returned 100%
        8: 1011:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1012:	}
       16: 1013:      else if (choice1 == 2)
       16: 1013-block  0
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1014:	{
        -: 1015:	  //+2 coins
        8: 1016:	  state->coins = state->coins + 2;
        8: 1016-block  0
        -: 1017:	}
        -: 1018:      else
        -: 1019:	{
        -: 1020:	  //trash 2 cards in hand
        8: 1021:	  discardCard(choice2, currentPlayer, state, 1);
        8: 1021-block  0
call    0 returned 100%
        8: 1022:	  discardCard(choice3, currentPlayer, state, 1);
call    0 returned 100%
        -: 1023:	}
        -: 1024:			
        -: 1025:      //discard card from hand
       24: 1026:      discardCard(handPos, currentPlayer, state, 0);
       24: 1026-block  0
call    0 returned 100%
       24: 1027:      return 0;
        -: 1028:		
        -: 1029:    case tribute:
    #####: 1030:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1030-block  0
branch  0 never executed
branch  1 never executed
    #####: 1031:	if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1031-block  0
branch  0 never executed
branch  1 never executed
    #####: 1032:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1033:	  state->deckCount[nextPlayer]--;
    $$$$$: 1033-block  0
        -: 1034:	}
    #####: 1035:	else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1035-block  0
branch  0 never executed
branch  1 never executed
    #####: 1036:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1037:	  state->discardCount[nextPlayer]--;
    $$$$$: 1037-block  0
        -: 1038:	}
        -: 1039:	else{
        -: 1040:	  //No Card to Reveal
        -: 1041:	  if (DEBUG){
        -: 1042:	    printf("No cards to reveal\n");
        -: 1043:	  }
        -: 1044:	}
        -: 1045:      }
        -: 1046:	    
        -: 1047:      else{
    #####: 1048:	if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1048-block  0
branch  0 never executed
branch  1 never executed
    #####: 1049:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1049-block  0
    $$$$$: 1049-block  1
    $$$$$: 1049-block  2
branch  0 never executed
branch  1 never executed
    #####: 1050:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1051:	    state->deckCount[nextPlayer]++;
    #####: 1052:	    state->discard[nextPlayer][i] = -1;
    #####: 1053:	    state->discardCount[nextPlayer]--;
        -: 1054:	  }
        -: 1055:			    
    #####: 1056:	  shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$: 1056-block  0
call    0 never executed
        -: 1057:	} 
    #####: 1058:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1059:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1060:	state->deckCount[nextPlayer]--;
    #####: 1061:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1062:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1063:	state->deckCount[nextPlayer]--;
    $$$$$: 1063-block  0
        -: 1064:      }    
        -: 1065:		       
    #####: 1066:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1066-block  0
branch  0 never executed
branch  1 never executed
    #####: 1067:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1068:	state->playedCardCount++;
    #####: 1069:	tributeRevealedCards[1] = -1;
    $$$$$: 1069-block  0
        -: 1070:      }
        -: 1071:
    #####: 1072:      for (i = 0; i <= 2; i ++){
    $$$$$: 1072-block  0
    $$$$$: 1072-block  1
    $$$$$: 1072-block  2
branch  0 never executed
branch  1 never executed
    #####: 1073:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1073-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1073-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1073-block  2
branch  4 never executed
branch  5 never executed
    #####: 1074:	  state->coins += 2;
    $$$$$: 1074-block  0
        -: 1075:	}
        -: 1076:		    
    #####: 1077:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1077-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1077-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1077-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1077-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1077-block  4
branch  8 never executed
branch  9 never executed
    #####: 1078:	  drawCard(currentPlayer, state);
    $$$$$: 1078-block  0
call    0 never executed
    #####: 1079:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1080:	}
        -: 1081:	else{//Action Card
    #####: 1082:	  state->numActions = state->numActions + 2;
    $$$$$: 1082-block  0
        -: 1083:	}
        -: 1084:      }
        -: 1085:	    
    #####: 1086:      return 0;
    $$$$$: 1086-block  0
        -: 1087:		
        -: 1088:    case ambassador:
    #####: 1089:      j = 0;		//used to check if player has enough cards to discard
        -: 1090:
    #####: 1091:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1091-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1091-block  1
branch  2 never executed
branch  3 never executed
        -: 1092:	{
    #####: 1093:	  return -1;				
    $$$$$: 1093-block  0
        -: 1094:	}
        -: 1095:
    #####: 1096:      if (choice1 == handPos)
    $$$$$: 1096-block  0
branch  0 never executed
branch  1 never executed
        -: 1097:	{
    #####: 1098:	  return -1;
    $$$$$: 1098-block  0
        -: 1099:	}
        -: 1100:
    #####: 1101:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1101-block  0
    $$$$$: 1101-block  1
    $$$$$: 1101-block  2
branch  0 never executed
branch  1 never executed
        -: 1102:	{
    #####: 1103:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1103-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1103-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1103-block  2
branch  4 never executed
branch  5 never executed
        -: 1104:	    {
    #####: 1105:	      j++;
    $$$$$: 1105-block  0
        -: 1106:	    }
        -: 1107:	}
    #####: 1108:      if (j < choice2)
    $$$$$: 1108-block  0
branch  0 never executed
branch  1 never executed
        -: 1109:	{
    #####: 1110:	  return -1;				
    $$$$$: 1110-block  0
        -: 1111:	}
        -: 1112:
        -: 1113:      if (DEBUG) 
        -: 1114:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1115:
        -: 1116:      //increase supply count for choosen card by amount being discarded
    #####: 1117:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1118:			
        -: 1119:      //each other player gains a copy of revealed card
    #####: 1120:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1120-block  0
    $$$$$: 1120-block  1
    $$$$$: 1120-block  2
branch  0 never executed
branch  1 never executed
        -: 1121:	{
    #####: 1122:	  if (i != currentPlayer)
    $$$$$: 1122-block  0
branch  0 never executed
branch  1 never executed
        -: 1123:	    {
    #####: 1124:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1124-block  0
call    0 never executed
        -: 1125:	    }
        -: 1126:	}
        -: 1127:
        -: 1128:      //discard played card from hand
    #####: 1129:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1129-block  0
call    0 never executed
        -: 1130:
        -: 1131:      //trash copies of cards returned to supply
    #####: 1132:      for (j = 0; j < choice2; j++)
    $$$$$: 1132-block  0
    $$$$$: 1132-block  1
branch  0 never executed
branch  1 never executed
        -: 1133:	{
    #####: 1134:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1134-block  0
    $$$$$: 1134-block  1
    $$$$$: 1134-block  2
branch  0 never executed
branch  1 never executed
        -: 1135:	    {
    #####: 1136:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1136-block  0
branch  0 never executed
branch  1 never executed
        -: 1137:		{
    #####: 1138:		  discardCard(i, currentPlayer, state, 1);
    $$$$$: 1138-block  0
call    0 never executed
    #####: 1139:		  break;
        -: 1140:		}
        -: 1141:	    }
        -: 1142:	}			
        -: 1143:
    #####: 1144:      return 0;
    $$$$$: 1144-block  0
        -: 1145:		
        -: 1146:    case cutpurse:
        -: 1147:
    #####: 1148:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1148-block  0
call    0 never executed
    #####: 1149:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1149-block  0
    $$$$$: 1149-block  1
branch  0 never executed
branch  1 never executed
        -: 1150:	{
    #####: 1151:	  if (i != currentPlayer)
    $$$$$: 1151-block  0
branch  0 never executed
branch  1 never executed
        -: 1152:	    {
    #####: 1153:	      for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1153-block  0
    $$$$$: 1153-block  1
    $$$$$: 1153-block  2
branch  0 never executed
branch  1 never executed
        -: 1154:		{
    #####: 1155:		  if (state->hand[i][j] == copper)
    $$$$$: 1155-block  0
branch  0 never executed
branch  1 never executed
        -: 1156:		    {
    #####: 1157:		      discardCard(j, i, state, 0);
    $$$$$: 1157-block  0
call    0 never executed
    #####: 1158:		      break;
        -: 1159:		    }
    #####: 1160:		  if (j == state->handCount[i])
    $$$$$: 1160-block  0
branch  0 never executed
branch  1 never executed
        -: 1161:		    {
    #####: 1162:		      for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1162-block  0
    $$$$$: 1162-block  1
    $$$$$: 1162-block  2
branch  0 never executed
branch  1 never executed
        -: 1163:			{
        -: 1164:			  if (DEBUG)
        -: 1165:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1166:			}	
    #####: 1167:		      break;
    $$$$$: 1167-block  0
        -: 1168:		    }		
        -: 1169:		}
        -: 1170:					
        -: 1171:	    }
        -: 1172:				
        -: 1173:	}				
        -: 1174:
        -: 1175:      //discard played card from hand
    #####: 1176:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1176-block  0
call    0 never executed
        -: 1177:
    #####: 1178:      return 0;
        -: 1179:
        -: 1180:		
        -: 1181:    case embargo: 
        -: 1182:      //+2 Coins
    #####: 1183:      state->coins = state->coins + 2;
        -: 1184:			
        -: 1185:      //see if selected pile is in play
    #####: 1186:      if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1186-block  0
branch  0 never executed
branch  1 never executed
        -: 1187:	{
    #####: 1188:	  return -1;
    $$$$$: 1188-block  0
        -: 1189:	}
        -: 1190:			
        -: 1191:      //add embargo token to selected supply pile
    #####: 1192:      state->embargoTokens[choice1]++;
        -: 1193:			
        -: 1194:      //trash card
    #####: 1195:      discardCard(handPos, currentPlayer, state, 1);		
    $$$$$: 1195-block  0
call    0 never executed
    #####: 1196:      return 0;
        -: 1197:		
        -: 1198:    case outpost:
        -: 1199:      //set outpost flag
    #####: 1200:      state->outpostPlayed++;
        -: 1201:			
        -: 1202:      //discard card
    #####: 1203:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1203-block  0
call    0 never executed
    #####: 1204:      return 0;
        -: 1205:		
        -: 1206:    case salvager:
        -: 1207:      //+1 buy
    #####: 1208:      state->numBuys++;
        -: 1209:			
    #####: 1210:      if (choice1)
    $$$$$: 1210-block  0
branch  0 never executed
branch  1 never executed
        -: 1211:	{
        -: 1212:	  //gain coins equal to trashed card
    #####: 1213:	  state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1213-block  0
call    0 never executed
call    1 never executed
        -: 1214:	  //trash card
    #####: 1215:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1216:	}
        -: 1217:			
        -: 1218:      //discard card
    #####: 1219:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1219-block  0
call    0 never executed
    #####: 1220:      return 0;
        -: 1221:		
        -: 1222:    case sea_hag:
    #####: 1223:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1223-block  0
    $$$$$: 1223-block  1
    $$$$$: 1223-block  2
branch  0 never executed
branch  1 never executed
    #####: 1224:	if (i != currentPlayer){
    $$$$$: 1224-block  0
branch  0 never executed
branch  1 never executed
    #####: 1225:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1226:	  state->discardCount[i]++;
    #####: 1227:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1227-block  0
        -: 1228:	}
        -: 1229:      }
    #####: 1230:      return 0;
    $$$$$: 1230-block  0
        -: 1231:		
        -: 1232:    case treasure_map:
        -: 1233:      //search hand for another treasure_map
    #####: 1234:      index = -1;
    #####: 1235:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1235-block  0
    $$$$$: 1235-block  1
    $$$$$: 1235-block  2
branch  0 never executed
branch  1 never executed
        -: 1236:	{
    #####: 1237:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1237-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1237-block  1
branch  2 never executed
branch  3 never executed
        -: 1238:	    {
    #####: 1239:	      index = i;
    #####: 1240:	      break;
    $$$$$: 1240-block  0
        -: 1241:	    }
        -: 1242:	}
    #####: 1243:      if (index > -1)
    $$$$$: 1243-block  0
branch  0 never executed
branch  1 never executed
        -: 1244:	{
        -: 1245:	  //trash both treasure cards
    #####: 1246:	  discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1246-block  0
call    0 never executed
    #####: 1247:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1248:
        -: 1249:	  //gain 4 Gold cards
    #####: 1250:	  for (i = 0; i < 4; i++)
    $$$$$: 1250-block  0
branch  0 never executed
branch  1 never executed
        -: 1251:	    {
    #####: 1252:	      gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1252-block  0
call    0 never executed
        -: 1253:	    }
        -: 1254:				
        -: 1255:	  //return success
    #####: 1256:	  return 1;
    $$$$$: 1256-block  0
        -: 1257:	}
        -: 1258:			
        -: 1259:      //no second treasure_map found in hand
    #####: 1260:      return -1;
    $$$$$: 1260-block  0
        -: 1261:    }
        -: 1262:	
    10064: 1263:  return -1;
    $$$$$: 1263-block  0
    10064: 1263-block  1
        -: 1264:}
        -: 1265:
function discardCard called 10151 returned 100% blocks executed 89%
    10151: 1266:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
    10151: 1266-block  0
        -: 1267:{
        -: 1268:	
        -: 1269:  //if card is not trashed, added to Played pile 
    10151: 1270:  if (trashFlag < 1)
    10151: 1270-block  0
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -: 1271:    {
        -: 1272:      //add card to played pile
    10119: 1273:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    10119: 1274:      state->playedCardCount++;
    10119: 1274-block  0
        -: 1275:    }
        -: 1276:	
        -: 1277:  //set played card to -1
    10151: 1278:  state->hand[currentPlayer][handPos] = -1;
        -: 1279:	
        -: 1280:  //remove card from player's hand
    10151: 1281:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
    10151: 1281-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1282:    {
        -: 1283:      //reduce number of cards in hand
       26: 1284:      state->handCount[currentPlayer]--;
       26: 1284-block  0
        -: 1285:    }
    10125: 1286:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
    10125: 1286-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1287:    {
        -: 1288:      //reduce number of cards in hand
    #####: 1289:      state->handCount[currentPlayer]--;
    $$$$$: 1289-block  0
        -: 1290:    }
        -: 1291:  else 	
        -: 1292:    {
        -: 1293:      //replace discarded card with last card in hand
    10125: 1294:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1295:      //set last card to -1
    10125: 1296:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1297:      //reduce number of cards in hand
    10125: 1298:      state->handCount[currentPlayer]--;
    10125: 1298-block  0
        -: 1299:    }
        -: 1300:	
    10151: 1301:  return 0;
    10151: 1301-block  0
        -: 1302:}
        -: 1303:
function gainCard called 5048 returned 100% blocks executed 100%
     5048: 1304:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
     5048: 1304-block  0
        -: 1305:{
        -: 1306:  //Note: supplyPos is enum of choosen card
        -: 1307:	
        -: 1308:  //check if supply pile is empty (0) or card is not used in game (-1)
     5048: 1309:  if ( supplyCount(supplyPos, state) < 1 )
     5048: 1309-block  0
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        -: 1310:    {
        8: 1311:      return -1;
        8: 1311-block  0
        -: 1312:    }
        -: 1313:	
        -: 1314:  //added card for [whoseTurn] current player:
        -: 1315:  // toFlag = 0 : add to discard
        -: 1316:  // toFlag = 1 : add to deck
        -: 1317:  // toFlag = 2 : add to hand
        -: 1318:
     5040: 1319:  if (toFlag == 1)
     5040: 1319-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1320:    {
        8: 1321:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        8: 1322:      state->deckCount[player]++;
        8: 1322-block  0
        -: 1323:    }
     5032: 1324:  else if (toFlag == 2)
     5032: 1324-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1325:    {
        8: 1326:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        8: 1327:      state->handCount[player]++;
        8: 1327-block  0
        -: 1328:    }
        -: 1329:  else
        -: 1330:    {
     5024: 1331:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     5024: 1332:      state->discardCount[player]++;
     5024: 1332-block  0
        -: 1333:    }
        -: 1334:	
        -: 1335:  //decrease number in supply pile
     5040: 1336:  state->supplyCount[supplyPos]--;
        -: 1337:	 
     5040: 1338:  return 0;
     5040: 1338-block  0
        -: 1339:}
        -: 1340:
function updateCoins called 10240 returned 100% blocks executed 100%
    10240: 1341:int updateCoins(int player, struct gameState *state, int bonus)
    10240: 1341-block  0
        -: 1342:{
        -: 1343:  int i;
        -: 1344:	
        -: 1345:  //reset coin count
    10240: 1346:  state->coins = 0;
        -: 1347:
        -: 1348:  //add coins for each Treasure card in player's hand
    61440: 1349:  for (i = 0; i < state->handCount[player]; i++)
    10240: 1349-block  0
    51200: 1349-block  1
    61440: 1349-block  2
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1350:    {
    51200: 1351:      if (state->hand[player][i] == copper)
    51200: 1351-block  0
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
        -: 1352:	{
    35873: 1353:	  state->coins += 1;
    35873: 1353-block  0
        -: 1354:	}
    15327: 1355:      else if (state->hand[player][i] == silver)
    15327: 1355-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1356:	{
       45: 1357:	  state->coins += 2;
       45: 1357-block  0
        -: 1358:	}
    15282: 1359:      else if (state->hand[player][i] == gold)
    15282: 1359-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1360:	{
       45: 1361:	  state->coins += 3;
       45: 1361-block  0
        -: 1362:	}	
        -: 1363:    }	
        -: 1364:
        -: 1365:  //add bonus
    10240: 1366:  state->coins += bonus;
        -: 1367:
    10240: 1368:  return 0;
    10240: 1368-block  0
        -: 1369:}
        -: 1370:
        -: 1371:
        -: 1372:/************************************************
        -: 1373:Start of function unit tests
        -: 1374:*************************************************/
        -: 1375:
function testUpdateCoins called 0 returned 0% blocks executed 0%
    #####: 1376:int testUpdateCoins(int player, struct gameState *state, int bonus) {
    $$$$$: 1376-block  0
        -: 1377:  
    #####: 1378:}
        -: 1379:
        -: 1380:
        -: 1381://end of dominion.c
        -: 1382:
----------------- Random Testing Card: village ----------------
----------------- 0 ----------------
SUCCESS
FAILURE
----------------- 1 ----------------
SUCCESS
FAILURE
----------------- 2 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 3 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 4 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 5 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 6 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 7 ----------------
SUCCESS
FAILURE
----------------- 8 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 9 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 10 ----------------
SUCCESS
FAILURE
----------------- 11 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 12 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 13 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 14 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 15 ----------------
SUCCESS
FAILURE
----------------- 16 ----------------
SUCCESS
FAILURE
----------------- 17 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 18 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 19 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 20 ----------------
SUCCESS
FAILURE
----------------- 21 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 22 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 23 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 24 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 25 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 26 ----------------
SUCCESS
FAILURE
----------------- 27 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 28 ----------------
SUCCESS
FAILURE
----------------- 29 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 30 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 31 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 32 ----------------
SUCCESS
FAILURE
----------------- 33 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 34 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 35 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 36 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 37 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 38 ----------------
SUCCESS
FAILURE
----------------- 39 ----------------
SUCCESS
FAILURE
----------------- 40 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 41 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 42 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 43 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 44 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 45 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 46 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 47 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 48 ----------------
SUCCESS
FAILURE
----------------- 49 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 50 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 51 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 52 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 53 ----------------
SUCCESS
FAILURE
----------------- 54 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 55 ----------------
SUCCESS
FAILURE
----------------- 56 ----------------
SUCCESS
FAILURE
----------------- 57 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 58 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 59 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 60 ----------------
SUCCESS
FAILURE
----------------- 61 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 62 ----------------
SUCCESS
FAILURE
----------------- 63 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 64 ----------------
SUCCESS
FAILURE
----------------- 65 ----------------
SUCCESS
FAILURE
----------------- 66 ----------------
SUCCESS
FAILURE
----------------- 67 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 68 ----------------
SUCCESS
FAILURE
----------------- 69 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 70 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 71 ----------------
SUCCESS
FAILURE
----------------- 72 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 73 ----------------
SUCCESS
FAILURE
----------------- 74 ----------------
SUCCESS
FAILURE
----------------- 75 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 76 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 77 ----------------
SUCCESS
FAILURE
----------------- 78 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 79 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 80 ----------------
SUCCESS
FAILURE
----------------- 81 ----------------
SUCCESS
FAILURE
----------------- 82 ----------------
SUCCESS
FAILURE
----------------- 83 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 84 ----------------
SUCCESS
FAILURE
----------------- 85 ----------------
SUCCESS
FAILURE
----------------- 86 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 87 ----------------
SUCCESS
FAILURE
----------------- 88 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 89 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 90 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 91 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 92 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 93 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 94 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 95 ----------------
SUCCESS
FAILURE
----------------- 96 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 97 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 98 ----------------
SUCCESS
FAILURE
----------------- 99 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 100 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 101 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 102 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 103 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 104 ----------------
SUCCESS
FAILURE
----------------- 105 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 106 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 107 ----------------
SUCCESS
FAILURE
----------------- 108 ----------------
SUCCESS
FAILURE
----------------- 109 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 110 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 111 ----------------
SUCCESS
FAILURE
----------------- 112 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 113 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 114 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 115 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 116 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 117 ----------------
SUCCESS
FAILURE
----------------- 118 ----------------
SUCCESS
FAILURE
----------------- 119 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 120 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 121 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 122 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 123 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 124 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 125 ----------------
SUCCESS
FAILURE
----------------- 126 ----------------
SUCCESS
FAILURE
----------------- 127 ----------------
SUCCESS
FAILURE
----------------- 128 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 129 ----------------
SUCCESS
FAILURE
----------------- 130 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 131 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 132 ----------------
SUCCESS
FAILURE
----------------- 133 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 134 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 135 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 136 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 137 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 138 ----------------
SUCCESS
FAILURE
----------------- 139 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 140 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 141 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 142 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 143 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 144 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 145 ----------------
SUCCESS
FAILURE
----------------- 146 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 147 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 148 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 149 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 150 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 151 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 152 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 153 ----------------
SUCCESS
FAILURE
----------------- 154 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 155 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 156 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 157 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 158 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 159 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 160 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 161 ----------------
SUCCESS
FAILURE
----------------- 162 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 163 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 164 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 165 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 166 ----------------
SUCCESS
FAILURE
----------------- 167 ----------------
SUCCESS
FAILURE
----------------- 168 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 169 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 170 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 171 ----------------
Test 2 FAILURE
SUCCESS
SUCCESS
FAILURE
----------------- 172 ----------------
SUCCESS
FAILURE
----------------- 173 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 174 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 175 ----------------
SUCCESS
FAILURE
----------------- 176 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 177 ----------------
SUCCESS
FAILURE
----------------- 178 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 179 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 180 ----------------
SUCCESS
FAILURE
----------------- 181 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 182 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 183 ----------------
SUCCESS
FAILURE
----------------- 184 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 185 ----------------
SUCCESS
FAILURE
----------------- 186 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 187 ----------------
SUCCESS
FAILURE
----------------- 188 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 189 ----------------
SUCCESS
FAILURE
----------------- 190 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 191 ----------------
SUCCESS
FAILURE
----------------- 192 ----------------
SUCCESS
FAILURE
----------------- 193 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 194 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 195 ----------------
SUCCESS
FAILURE
----------------- 196 ----------------
SUCCESS
FAILURE
----------------- 197 ----------------
SUCCESS
FAILURE
----------------- 198 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 199 ----------------
SUCCESS
FAILURE
----------------- 200 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 201 ----------------
SUCCESS
FAILURE
----------------- 202 ----------------
SUCCESS
FAILURE
----------------- 203 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 204 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 205 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 206 ----------------
SUCCESS
FAILURE
----------------- 207 ----------------
SUCCESS
FAILURE
----------------- 208 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 209 ----------------
SUCCESS
FAILURE
----------------- 210 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 211 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 212 ----------------
SUCCESS
FAILURE
----------------- 213 ----------------
SUCCESS
FAILURE
----------------- 214 ----------------
SUCCESS
FAILURE
----------------- 215 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 216 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 217 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 218 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 219 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 220 ----------------
SUCCESS
FAILURE
----------------- 221 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 222 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 223 ----------------
SUCCESS
FAILURE
----------------- 224 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 225 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 226 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 227 ----------------
SUCCESS
FAILURE
----------------- 228 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 229 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 230 ----------------
SUCCESS
FAILURE
----------------- 231 ----------------
SUCCESS
FAILURE
----------------- 232 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 233 ----------------
SUCCESS
FAILURE
----------------- 234 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 235 ----------------
SUCCESS
FAILURE
----------------- 236 ----------------
SUCCESS
FAILURE
----------------- 237 ----------------
SUCCESS
FAILURE
----------------- 238 ----------------
SUCCESS
FAILURE
----------------- 239 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 240 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 241 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 242 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 243 ----------------
SUCCESS
FAILURE
----------------- 244 ----------------
SUCCESS
FAILURE
----------------- 245 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 246 ----------------
SUCCESS
FAILURE
----------------- 247 ----------------
SUCCESS
FAILURE
----------------- 248 ----------------
SUCCESS
FAILURE
----------------- 249 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 250 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 251 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 252 ----------------
SUCCESS
FAILURE
----------------- 253 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 254 ----------------
SUCCESS
FAILURE
----------------- 255 ----------------
SUCCESS
FAILURE
----------------- 256 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 257 ----------------
SUCCESS
FAILURE
----------------- 258 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 259 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 260 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 261 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 262 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 263 ----------------
SUCCESS
FAILURE
----------------- 264 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 265 ----------------
SUCCESS
FAILURE
----------------- 266 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 267 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 268 ----------------
SUCCESS
FAILURE
----------------- 269 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 270 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 271 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 272 ----------------
SUCCESS
FAILURE
----------------- 273 ----------------
SUCCESS
FAILURE
----------------- 274 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 275 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 276 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 277 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 278 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 279 ----------------
SUCCESS
FAILURE
----------------- 280 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 281 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 282 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 283 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 284 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 285 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 286 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 287 ----------------
SUCCESS
FAILURE
----------------- 288 ----------------
SUCCESS
FAILURE
----------------- 289 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 290 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 291 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 292 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 293 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 294 ----------------
SUCCESS
FAILURE
----------------- 295 ----------------
SUCCESS
FAILURE
----------------- 296 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 297 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 298 ----------------
SUCCESS
FAILURE
----------------- 299 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 300 ----------------
SUCCESS
FAILURE
----------------- 301 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 302 ----------------
SUCCESS
FAILURE
----------------- 303 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 304 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 305 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 306 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 307 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 308 ----------------
SUCCESS
FAILURE
----------------- 309 ----------------
SUCCESS
FAILURE
----------------- 310 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 311 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 312 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 313 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 314 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 315 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 316 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 317 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 318 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 319 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 320 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 321 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 322 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 323 ----------------
SUCCESS
FAILURE
----------------- 324 ----------------
SUCCESS
FAILURE
----------------- 325 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 326 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 327 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 328 ----------------
SUCCESS
FAILURE
----------------- 329 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 330 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 331 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 332 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 333 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 334 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 335 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 336 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 337 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 338 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 339 ----------------
SUCCESS
FAILURE
----------------- 340 ----------------
SUCCESS
FAILURE
----------------- 341 ----------------
SUCCESS
FAILURE
----------------- 342 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 343 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 344 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 345 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 346 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 347 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 348 ----------------
SUCCESS
FAILURE
----------------- 349 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 350 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 351 ----------------
SUCCESS
FAILURE
----------------- 352 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 353 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 354 ----------------
SUCCESS
FAILURE
----------------- 355 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 356 ----------------
SUCCESS
FAILURE
----------------- 357 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 358 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 359 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 360 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 361 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 362 ----------------
SUCCESS
FAILURE
----------------- 363 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 364 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 365 ----------------
SUCCESS
FAILURE
----------------- 366 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 367 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 368 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 369 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 370 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 371 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 372 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 373 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 374 ----------------
SUCCESS
FAILURE
----------------- 375 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 376 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 377 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 378 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 379 ----------------
SUCCESS
FAILURE
----------------- 380 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 381 ----------------
SUCCESS
FAILURE
----------------- 382 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 383 ----------------
SUCCESS
FAILURE
----------------- 384 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 385 ----------------
SUCCESS
FAILURE
----------------- 386 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 387 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 388 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 389 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 390 ----------------
SUCCESS
FAILURE
----------------- 391 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 392 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 393 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 394 ----------------
SUCCESS
FAILURE
----------------- 395 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 396 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 397 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 398 ----------------
SUCCESS
FAILURE
----------------- 399 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 400 ----------------
SUCCESS
FAILURE
----------------- 401 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 402 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 403 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 404 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 405 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 406 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 407 ----------------
SUCCESS
FAILURE
----------------- 408 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 409 ----------------
SUCCESS
FAILURE
----------------- 410 ----------------
SUCCESS
FAILURE
----------------- 411 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 412 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 413 ----------------
SUCCESS
FAILURE
----------------- 414 ----------------
SUCCESS
FAILURE
----------------- 415 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 416 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 417 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 418 ----------------
SUCCESS
FAILURE
----------------- 419 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 420 ----------------
SUCCESS
FAILURE
----------------- 421 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 422 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 423 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 424 ----------------
SUCCESS
FAILURE
----------------- 425 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 426 ----------------
SUCCESS
FAILURE
----------------- 427 ----------------
SUCCESS
FAILURE
----------------- 428 ----------------
SUCCESS
FAILURE
----------------- 429 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 430 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 431 ----------------
SUCCESS
FAILURE
----------------- 432 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 433 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 434 ----------------
SUCCESS
FAILURE
----------------- 435 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 436 ----------------
SUCCESS
FAILURE
----------------- 437 ----------------
SUCCESS
FAILURE
----------------- 438 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 439 ----------------
SUCCESS
FAILURE
----------------- 440 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 441 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 442 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 443 ----------------
SUCCESS
FAILURE
----------------- 444 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 445 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 446 ----------------
SUCCESS
FAILURE
----------------- 447 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 448 ----------------
SUCCESS
FAILURE
----------------- 449 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 450 ----------------
SUCCESS
FAILURE
----------------- 451 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 452 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 453 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 454 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 455 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 456 ----------------
SUCCESS
FAILURE
----------------- 457 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 458 ----------------
SUCCESS
FAILURE
----------------- 459 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 460 ----------------
SUCCESS
FAILURE
----------------- 461 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 462 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 463 ----------------
SUCCESS
FAILURE
----------------- 464 ----------------
SUCCESS
FAILURE
----------------- 465 ----------------
SUCCESS
FAILURE
----------------- 466 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 467 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 468 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 469 ----------------
SUCCESS
FAILURE
----------------- 470 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 471 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 472 ----------------
SUCCESS
FAILURE
----------------- 473 ----------------
SUCCESS
FAILURE
----------------- 474 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 475 ----------------
SUCCESS
FAILURE
----------------- 476 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 477 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 478 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 479 ----------------
SUCCESS
FAILURE
----------------- 480 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 481 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 482 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 483 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 484 ----------------
SUCCESS
FAILURE
----------------- 485 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 486 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 487 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 488 ----------------
SUCCESS
FAILURE
----------------- 489 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 490 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 491 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 492 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 493 ----------------
SUCCESS
FAILURE
----------------- 494 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 495 ----------------
SUCCESS
FAILURE
----------------- 496 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 497 ----------------
SUCCESS
FAILURE
----------------- 498 ----------------
SUCCESS
FAILURE
----------------- 499 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 500 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 501 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 502 ----------------
SUCCESS
FAILURE
----------------- 503 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 504 ----------------
SUCCESS
FAILURE
----------------- 505 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 506 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 507 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 508 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 509 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 510 ----------------
SUCCESS
FAILURE
----------------- 511 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 512 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 513 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 514 ----------------
SUCCESS
FAILURE
----------------- 515 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 516 ----------------
SUCCESS
FAILURE
----------------- 517 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 518 ----------------
SUCCESS
FAILURE
----------------- 519 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 520 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 521 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 522 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 523 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 524 ----------------
SUCCESS
FAILURE
----------------- 525 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 526 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 527 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 528 ----------------
SUCCESS
FAILURE
----------------- 529 ----------------
SUCCESS
FAILURE
----------------- 530 ----------------
SUCCESS
FAILURE
----------------- 531 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 532 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 533 ----------------
SUCCESS
FAILURE
----------------- 534 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 535 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 536 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 537 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 538 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 539 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 540 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 541 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 542 ----------------
SUCCESS
FAILURE
----------------- 543 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 544 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 545 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 546 ----------------
SUCCESS
FAILURE
----------------- 547 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 548 ----------------
SUCCESS
FAILURE
----------------- 549 ----------------
SUCCESS
FAILURE
----------------- 550 ----------------
SUCCESS
FAILURE
----------------- 551 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 552 ----------------
SUCCESS
FAILURE
----------------- 553 ----------------
SUCCESS
FAILURE
----------------- 554 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 555 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 556 ----------------
SUCCESS
FAILURE
----------------- 557 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 558 ----------------
SUCCESS
FAILURE
----------------- 559 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 560 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 561 ----------------
SUCCESS
FAILURE
----------------- 562 ----------------
SUCCESS
FAILURE
----------------- 563 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 564 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 565 ----------------
SUCCESS
FAILURE
----------------- 566 ----------------
SUCCESS
FAILURE
----------------- 567 ----------------
SUCCESS
FAILURE
----------------- 568 ----------------
SUCCESS
FAILURE
----------------- 569 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 570 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 571 ----------------
SUCCESS
FAILURE
----------------- 572 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 573 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 574 ----------------
SUCCESS
FAILURE
----------------- 575 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 576 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 577 ----------------
SUCCESS
FAILURE
----------------- 578 ----------------
SUCCESS
FAILURE
----------------- 579 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 580 ----------------
SUCCESS
FAILURE
----------------- 581 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 582 ----------------
SUCCESS
FAILURE
----------------- 583 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 584 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 585 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 586 ----------------
SUCCESS
SUCCESS
Test 2 FAILURE
SUCCESS
FAILURE
----------------- 587 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 588 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 589 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 590 ----------------
SUCCESS
FAILURE
----------------- 591 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 592 ----------------
SUCCESS
FAILURE
----------------- 593 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 594 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 595 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 596 ----------------
SUCCESS
FAILURE
----------------- 597 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 598 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 599 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 600 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 601 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 602 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 603 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 604 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 605 ----------------
SUCCESS
FAILURE
----------------- 606 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 607 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 608 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 609 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 610 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 611 ----------------
SUCCESS
FAILURE
----------------- 612 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 613 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 614 ----------------
SUCCESS
FAILURE
----------------- 615 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 616 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 617 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 618 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 619 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 620 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 621 ----------------
Test 2 FAILURE
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 622 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 623 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 624 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 625 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 626 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 627 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 628 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 629 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 630 ----------------
SUCCESS
FAILURE
----------------- 631 ----------------
SUCCESS
FAILURE
----------------- 632 ----------------
SUCCESS
FAILURE
----------------- 633 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 634 ----------------
SUCCESS
FAILURE
----------------- 635 ----------------
SUCCESS
FAILURE
----------------- 636 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 637 ----------------
SUCCESS
FAILURE
----------------- 638 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 639 ----------------
SUCCESS
FAILURE
----------------- 640 ----------------
SUCCESS
FAILURE
----------------- 641 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 642 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 643 ----------------
SUCCESS
FAILURE
----------------- 644 ----------------
SUCCESS
FAILURE
----------------- 645 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 646 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 647 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 648 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 649 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 650 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 651 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 652 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 653 ----------------
SUCCESS
FAILURE
----------------- 654 ----------------
SUCCESS
FAILURE
----------------- 655 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 656 ----------------
SUCCESS
FAILURE
----------------- 657 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 658 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 659 ----------------
SUCCESS
FAILURE
----------------- 660 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 661 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 662 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 663 ----------------
SUCCESS
FAILURE
----------------- 664 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 665 ----------------
SUCCESS
FAILURE
----------------- 666 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 667 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 668 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 669 ----------------
SUCCESS
FAILURE
----------------- 670 ----------------
SUCCESS
FAILURE
----------------- 671 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 672 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 673 ----------------
SUCCESS
FAILURE
----------------- 674 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 675 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 676 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 677 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 678 ----------------
SUCCESS
FAILURE
----------------- 679 ----------------
SUCCESS
FAILURE
----------------- 680 ----------------
SUCCESS
FAILURE
----------------- 681 ----------------
SUCCESS
FAILURE
----------------- 682 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 683 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 684 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 685 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 686 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 687 ----------------
SUCCESS
FAILURE
----------------- 688 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 689 ----------------
SUCCESS
FAILURE
----------------- 690 ----------------
SUCCESS
FAILURE
----------------- 691 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 692 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 693 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 694 ----------------
SUCCESS
FAILURE
----------------- 695 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 696 ----------------
SUCCESS
FAILURE
----------------- 697 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 698 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 699 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 700 ----------------
SUCCESS
FAILURE
----------------- 701 ----------------
SUCCESS
FAILURE
----------------- 702 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 703 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 704 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 705 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 706 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 707 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 708 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 709 ----------------
SUCCESS
FAILURE
----------------- 710 ----------------
SUCCESS
FAILURE
----------------- 711 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 712 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 713 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 714 ----------------
SUCCESS
FAILURE
----------------- 715 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 716 ----------------
SUCCESS
FAILURE
----------------- 717 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 718 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 719 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 720 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 721 ----------------
SUCCESS
FAILURE
----------------- 722 ----------------
SUCCESS
FAILURE
----------------- 723 ----------------
SUCCESS
FAILURE
----------------- 724 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 725 ----------------
SUCCESS
FAILURE
----------------- 726 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 727 ----------------
SUCCESS
FAILURE
----------------- 728 ----------------
SUCCESS
FAILURE
----------------- 729 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 730 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 731 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 732 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 733 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 734 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 735 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 736 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 737 ----------------
SUCCESS
FAILURE
----------------- 738 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 739 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 740 ----------------
SUCCESS
FAILURE
----------------- 741 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 742 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 743 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 744 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 745 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 746 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 747 ----------------
SUCCESS
FAILURE
----------------- 748 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 749 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 750 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 751 ----------------
SUCCESS
FAILURE
----------------- 752 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 753 ----------------
SUCCESS
FAILURE
----------------- 754 ----------------
SUCCESS
FAILURE
----------------- 755 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 756 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 757 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 758 ----------------
SUCCESS
FAILURE
----------------- 759 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 760 ----------------
SUCCESS
FAILURE
----------------- 761 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 762 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 763 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 764 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 765 ----------------
SUCCESS
FAILURE
----------------- 766 ----------------
SUCCESS
FAILURE
----------------- 767 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 768 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 769 ----------------
SUCCESS
FAILURE
----------------- 770 ----------------
SUCCESS
FAILURE
----------------- 771 ----------------
SUCCESS
FAILURE
----------------- 772 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 773 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 774 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 775 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 776 ----------------
SUCCESS
FAILURE
----------------- 777 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 778 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 779 ----------------
SUCCESS
FAILURE
----------------- 780 ----------------
SUCCESS
FAILURE
----------------- 781 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 782 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 783 ----------------
SUCCESS
FAILURE
----------------- 784 ----------------
SUCCESS
FAILURE
----------------- 785 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 786 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 787 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 788 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 789 ----------------
SUCCESS
FAILURE
----------------- 790 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 791 ----------------
SUCCESS
FAILURE
----------------- 792 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 793 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 794 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 795 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 796 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 797 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 798 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 799 ----------------
SUCCESS
FAILURE
----------------- 800 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 801 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 802 ----------------
SUCCESS
FAILURE
----------------- 803 ----------------
SUCCESS
FAILURE
----------------- 804 ----------------
SUCCESS
FAILURE
----------------- 805 ----------------
SUCCESS
FAILURE
----------------- 806 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 807 ----------------
SUCCESS
FAILURE
----------------- 808 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 809 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 810 ----------------
SUCCESS
FAILURE
----------------- 811 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 812 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 813 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 814 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 815 ----------------
SUCCESS
FAILURE
----------------- 816 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 817 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 818 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 819 ----------------
SUCCESS
FAILURE
----------------- 820 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 821 ----------------
SUCCESS
FAILURE
----------------- 822 ----------------
SUCCESS
FAILURE
----------------- 823 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 824 ----------------
SUCCESS
FAILURE
----------------- 825 ----------------
SUCCESS
FAILURE
----------------- 826 ----------------
SUCCESS
FAILURE
----------------- 827 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 828 ----------------
SUCCESS
FAILURE
----------------- 829 ----------------
SUCCESS
FAILURE
----------------- 830 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 831 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 832 ----------------
SUCCESS
FAILURE
----------------- 833 ----------------
SUCCESS
FAILURE
----------------- 834 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 835 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 836 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 837 ----------------
SUCCESS
FAILURE
----------------- 838 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 839 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 840 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 841 ----------------
SUCCESS
FAILURE
----------------- 842 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 843 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 844 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 845 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 846 ----------------
SUCCESS
FAILURE
----------------- 847 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 848 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 849 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 850 ----------------
SUCCESS
FAILURE
----------------- 851 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 852 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 853 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 854 ----------------
SUCCESS
FAILURE
----------------- 855 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 856 ----------------
SUCCESS
FAILURE
----------------- 857 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 858 ----------------
SUCCESS
FAILURE
----------------- 859 ----------------
SUCCESS
FAILURE
----------------- 860 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 861 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 862 ----------------
SUCCESS
FAILURE
----------------- 863 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 864 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 865 ----------------
SUCCESS
FAILURE
----------------- 866 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 867 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 868 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 869 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 870 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 871 ----------------
SUCCESS
FAILURE
----------------- 872 ----------------
SUCCESS
FAILURE
----------------- 873 ----------------
SUCCESS
FAILURE
----------------- 874 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 875 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 876 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 877 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 878 ----------------
SUCCESS
FAILURE
----------------- 879 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 880 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 881 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 882 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 883 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 884 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 885 ----------------
SUCCESS
FAILURE
----------------- 886 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 887 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 888 ----------------
SUCCESS
FAILURE
----------------- 889 ----------------
SUCCESS
FAILURE
----------------- 890 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 891 ----------------
SUCCESS
FAILURE
----------------- 892 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 893 ----------------
SUCCESS
FAILURE
----------------- 894 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 895 ----------------
SUCCESS
FAILURE
----------------- 896 ----------------
SUCCESS
FAILURE
----------------- 897 ----------------
SUCCESS
FAILURE
----------------- 898 ----------------
SUCCESS
FAILURE
----------------- 899 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 900 ----------------
SUCCESS
FAILURE
----------------- 901 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 902 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 903 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 904 ----------------
SUCCESS
FAILURE
----------------- 905 ----------------
SUCCESS
FAILURE
----------------- 906 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 907 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 908 ----------------
SUCCESS
FAILURE
----------------- 909 ----------------
SUCCESS
FAILURE
----------------- 910 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 911 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 912 ----------------
SUCCESS
FAILURE
----------------- 913 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 914 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 915 ----------------
SUCCESS
FAILURE
----------------- 916 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 917 ----------------
SUCCESS
FAILURE
----------------- 918 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 919 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 920 ----------------
SUCCESS
FAILURE
----------------- 921 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 922 ----------------
SUCCESS
FAILURE
----------------- 923 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 924 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 925 ----------------
SUCCESS
FAILURE
----------------- 926 ----------------
SUCCESS
FAILURE
----------------- 927 ----------------
SUCCESS
FAILURE
----------------- 928 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 929 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 930 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 931 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 932 ----------------
SUCCESS
FAILURE
----------------- 933 ----------------
SUCCESS
FAILURE
----------------- 934 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 935 ----------------
SUCCESS
FAILURE
----------------- 936 ----------------
SUCCESS
FAILURE
----------------- 937 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 938 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 939 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 940 ----------------
SUCCESS
FAILURE
----------------- 941 ----------------
SUCCESS
FAILURE
----------------- 942 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 943 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 944 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 945 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 946 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 947 ----------------
SUCCESS
FAILURE
----------------- 948 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 949 ----------------
SUCCESS
FAILURE
----------------- 950 ----------------
SUCCESS
FAILURE
----------------- 951 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 952 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 953 ----------------
SUCCESS
FAILURE
----------------- 954 ----------------
SUCCESS
FAILURE
----------------- 955 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 956 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 957 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 958 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 959 ----------------
SUCCESS
FAILURE
----------------- 960 ----------------
SUCCESS
FAILURE
----------------- 961 ----------------
SUCCESS
FAILURE
----------------- 962 ----------------
SUCCESS
FAILURE
----------------- 963 ----------------
SUCCESS
SUCCESS
Test 2 FAILURE
FAILURE
----------------- 964 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 965 ----------------
SUCCESS
FAILURE
----------------- 966 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 967 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 968 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 969 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 970 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 971 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 972 ----------------
SUCCESS
FAILURE
----------------- 973 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 974 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 975 ----------------
SUCCESS
FAILURE
----------------- 976 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 977 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 978 ----------------
SUCCESS
FAILURE
----------------- 979 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 980 ----------------
SUCCESS
FAILURE
----------------- 981 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 982 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 983 ----------------
SUCCESS
FAILURE
----------------- 984 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 985 ----------------
SUCCESS
FAILURE
----------------- 986 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 987 ----------------
SUCCESS
FAILURE
----------------- 988 ----------------
SUCCESS
FAILURE
----------------- 989 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 990 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 991 ----------------
SUCCESS
FAILURE
----------------- 992 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 993 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 994 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 995 ----------------
SUCCESS
FAILURE
----------------- 996 ----------------
SUCCESS
FAILURE
----------------- 997 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 998 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 999 ----------------
SUCCESS
SUCCESS
FAILURE
File 'dominion.c'
Lines executed:41.62% of 567
Branches executed:45.32% of 417
Taken at least once:31.41% of 417
Calls executed:40.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:11
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 127225 returned 100% blocks executed 100%
   127225:    8:int compare(const void* a, const void* b) {
   127225:    8-block  0
   127225:    9:  if (*(int*)a > *(int*)b)
   127225:    9-block  0
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
     7548:   10:    return 1;
     7548:   10-block  0
   119677:   11:  if (*(int*)a < *(int*)b)
   119677:   11-block  0
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
    24148:   12:    return -1;
    24148:   12-block  0
    95529:   13:  return 0;
    95529:   13-block  0
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    $$$$$:   16-block  0
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
    $$$$$:   18-block  0
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   21-block  0
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
        -:   35:}
        -:   36:
function initializeGame called 2026 returned 100% blocks executed 94%
     2026:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
     2026:   37-block  0
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     2026:   44:  SelectStream(1);
     2026:   44-block  0
call    0 returned 100%
     2026:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     2026:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     2026:   48-block  0
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
    $$$$$:   50-block  0
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     2026:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    22286:   57:  for (i = 0; i < 10; i++)
     2026:   57-block  0
    20260:   57-block  1
    22286:   57-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   222860:   59:      for (j = 0; j < 10; j++)
    20260:   59-block  0
   202600:   59-block  1
   222860:   59-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   202600:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
   202600:   61-block  0
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
   182340:   61-block  1
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
    $$$$$:   63-block  0
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     2026:   73:  if (numPlayers == 2)
     2026:   73-block  0
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        -:   74:    {
      714:   75:      state->supplyCount[curse] = 10;
      714:   75-block  0
        -:   76:    }
     1312:   77:  else if (numPlayers == 3)
     1312:   77-block  0
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
        -:   78:    {
      646:   79:      state->supplyCount[curse] = 20;
      646:   79-block  0
        -:   80:    }
        -:   81:  else
        -:   82:    {
      666:   83:      state->supplyCount[curse] = 30;
      666:   83-block  0
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     2026:   87:  if (numPlayers == 2)
     2026:   87-block  0
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        -:   88:    {
      714:   89:      state->supplyCount[estate] = 8;
      714:   90:      state->supplyCount[duchy] = 8;
      714:   91:      state->supplyCount[province] = 8;
      714:   91-block  0
        -:   92:    }
        -:   93:  else
        -:   94:    {
     1312:   95:      state->supplyCount[estate] = 12;
     1312:   96:      state->supplyCount[duchy] = 12;
     1312:   97:      state->supplyCount[province] = 12;
     1312:   97-block  0
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     2026:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     2026:  102:  state->supplyCount[silver] = 40;
     2026:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    42546:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
     2026:  106-block  0
    40520:  106-block  1
    42546:  106-block  2
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   334290:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
    40520:  108-block  0
   293770:  108-block  1
   334290:  108-block  2
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   314030:  110:	  if (kingdomCards[j] == i)
   314030:  110-block  0
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    20260:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
    20260:  113-block  0
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    20243:  113-block  1
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:  114:		{
       68:  115:		  if (numPlayers == 2){ 
       34:  115-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       34:  115-block  1
       34:  116:		    state->supplyCount[i] = 8; 
       34:  116-block  0
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  118-block  0
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    20226:  122:		  state->supplyCount[i] = 10;
    20226:  122-block  0
        -:  123:		}
    20260:  124:	      break;
    20260:  124-block  0
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   293770:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     8056:  138:  for (i = 0; i < numPlayers; i++)
     2026:  138-block  0
     6030:  138-block  1
     8056:  138-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:    {
     6030:  140:      state->deckCount[i] = 0;
    24120:  141:      for (j = 0; j < 3; j++)
     6030:  141-block  0
    18090:  141-block  1
    24120:  141-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
    18090:  143:	  state->deck[i][j] = estate;
    18090:  144:	  state->deckCount[i]++;
        -:  145:	}
    48240:  146:      for (j = 3; j < 10; j++)
     6030:  146-block  0
    42210:  146-block  1
    48240:  146-block  2
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    42210:  148:	  state->deck[i][j] = copper;	  state->deckCount[i]++;		
        -:  149:	}
        -:  150:    }
        -:  151:
        -:  152:  //shuffle player decks
     8056:  153:  for (i = 0; i < numPlayers; i++)
     2026:  153-block  0
     6030:  153-block  1
     8056:  153-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  154:    {
     6030:  155:      if ( shuffle(i, state) < 0 )
     6030:  155-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  156:	{
    #####:  157:	  return -1;
    $$$$$:  157-block  0
        -:  158:	}
        -:  159:    }
        -:  160:
        -:  161:  //draw player hands
     8056:  162:  for (i = 0; i < numPlayers; i++)
     2026:  162-block  0
     6030:  162-block  1
     8056:  162-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  163:    {  
        -:  164:      //initialize hand size to zero
     6030:  165:      state->handCount[i] = 0;
     6030:  166:      state->discardCount[i] = 0;
        -:  167:      //draw 5 cards
        -:  168:      // for (j = 0; j < 5; j++)
        -:  169:      //	{
        -:  170:      //	  drawCard(i, state);
        -:  171:      //	}
        -:  172:    }
        -:  173:  
        -:  174:  //set embargo tokens to 0 for all supply piles
    56728:  175:  for (i = 0; i <= treasure_map; i++)
     2026:  175-block  0
    54702:  175-block  1
    56728:  175-block  2
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  176:    {
    54702:  177:      state->embargoTokens[i] = 0;
        -:  178:    }
        -:  179:
        -:  180:  //initialize first player's turn
     2026:  181:  state->outpostPlayed = 0;
     2026:  182:  state->phase = 0;
     2026:  183:  state->numActions = 1;
     2026:  184:  state->numBuys = 1;
     2026:  185:  state->playedCardCount = 0;
     2026:  186:  state->whoseTurn = 0;
     2026:  187:  state->handCount[state->whoseTurn] = 0;
        -:  188:  //int it; move to top
        -:  189:
        -:  190:  //Moved draw cards to here, only drawing at the start of a turn
    12156:  191:  for (it = 0; it < 5; it++){
     2026:  191-block  0
    12156:  191-block  1
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    10130:  192:    drawCard(state->whoseTurn, state);
    10130:  192-block  0
call    0 returned 100%
        -:  193:  }
        -:  194:
     2026:  195:  updateCoins(state->whoseTurn, state, 0);
     2026:  195-block  0
call    0 returned 100%
        -:  196:
     2026:  197:  return 0;
        -:  198:}
        -:  199:
function shuffle called 9637 returned 100% blocks executed 100%
     9637:  200:int shuffle(int player, struct gameState *state) {
     9637:  200-block  0
        -:  201: 
        -:  202:
        -:  203:  int newDeck[MAX_DECK];
     9637:  204:  int newDeckPos = 0;
        -:  205:  int card;
        -:  206:  int i;
        -:  207:
     9637:  208:  if (state->deckCount[player] < 1)
     9637:  208-block  0
branch  0 taken 37% (fallthrough)
branch  1 taken 63%
     3577:  209:    return -1;
     3577:  209-block  0
     6060:  210:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
     6060:  210-block  0
call    0 returned 100%
        -:  211:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  212:
    73680:  213:  while (state->deckCount[player] > 0) {
    73680:  213-block  0
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
    67620:  214:    card = floor(Random() * state->deckCount[player]);
    67620:  214-block  0
call    0 returned 100%
    67620:  215:    newDeck[newDeckPos] = state->deck[player][card];
    67620:  216:    newDeckPos++;
   837561:  217:    for (i = card; i < state->deckCount[player]-1; i++) {
   769941:  217-block  0
   837561:  217-block  1
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
   769941:  218:      state->deck[player][i] = state->deck[player][i+1];
        -:  219:    }
    67620:  220:    state->deckCount[player]--;
    67620:  220-block  0
        -:  221:  }
    73680:  222:  for (i = 0; i < newDeckPos; i++) {
     6060:  222-block  0
    67620:  222-block  1
    73680:  222-block  2
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
    67620:  223:    state->deck[player][i] = newDeck[i];
    67620:  224:    state->deckCount[player]++;
        -:  225:  }
        -:  226:
     9637:  227:  return 0;
     6060:  227-block  0
     9637:  227-block  1
        -:  228:}
        -:  229:
function playCard called 0 returned 0% blocks executed 0%
    #####:  230:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
    $$$$$:  230-block  0
        -:  231:{	
        -:  232:  int card;
    #####:  233:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  234:
        -:  235:  //check if it is the right phase
    #####:  236:  if (state->phase != 0)
    $$$$$:  236-block  0
branch  0 never executed
branch  1 never executed
        -:  237:    {
    #####:  238:      return -1;
    $$$$$:  238-block  0
        -:  239:    }
        -:  240:	
        -:  241:  //check if player has enough actions
    #####:  242:  if ( state->numActions < 1 )
    $$$$$:  242-block  0
branch  0 never executed
branch  1 never executed
        -:  243:    {
    #####:  244:      return -1;
    $$$$$:  244-block  0
        -:  245:    }
        -:  246:	
        -:  247:  //get card played
    #####:  248:  card = handCard(handPos, state);
    $$$$$:  248-block  0
call    0 never executed
        -:  249:	
        -:  250:  //check if selected card is an action
    #####:  251:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  251-block  0
branch  2 never executed
branch  3 never executed
        -:  252:    {
    #####:  253:      return -1;
    $$$$$:  253-block  0
        -:  254:    }
        -:  255:	
        -:  256:  //play card
    #####:  257:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  257-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  258:    {
    #####:  259:      return -1;
    $$$$$:  259-block  0
        -:  260:    }
        -:  261:	
        -:  262:  //reduce number of actions
    #####:  263:  state->numActions--;
        -:  264:
        -:  265:  //update coins (Treasure cards may be added with card draws)
    #####:  266:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  266-block  0
call    0 never executed
        -:  267:	
    #####:  268:  return 0;
    $$$$$:  268-block  0
        -:  269:}
        -:  270:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  271:int buyCard(int supplyPos, struct gameState *state) {
    $$$$$:  271-block  0
    $$$$$:  271-block  1
        -:  272:  int who;
        -:  273:  if (DEBUG){
        -:  274:    printf("Entering buyCard...\n");
        -:  275:  }
        -:  276:
        -:  277:  // I don't know what to do about the phase thing.
        -:  278:
    #####:  279:  who = state->whoseTurn;
        -:  280:
    #####:  281:  if (state->numBuys < 1){
    $$$$$:  281-block  0
branch  0 never executed
branch  1 never executed
        -:  282:    if (DEBUG)
        -:  283:      printf("You do not have any buys left\n");
    #####:  284:    return -1;
    $$$$$:  284-block  0
    #####:  285:  } else if (supplyCount(supplyPos, state) <1){
    $$$$$:  285-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  286:    if (DEBUG)
        -:  287:      printf("There are not any of that type of card left\n");
    #####:  288:    return -1;
    $$$$$:  288-block  0
    #####:  289:  } else if (state->coins < getCost(supplyPos)){
    $$$$$:  289-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  290:    if (DEBUG) 
        -:  291:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  292:    return -1;
    $$$$$:  292-block  0
        -:  293:  } else {
    #####:  294:    state->phase=1;
        -:  295:    //state->supplyCount[supplyPos]--;
    #####:  296:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
    $$$$$:  296-block  0
call    0 never executed
        -:  297:  
    #####:  298:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  299:    state->numBuys--;
        -:  300:    if (DEBUG)
        -:  301:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  302:  }
        -:  303:
        -:  304:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  305:  //state->discardCount[who]++;
        -:  306:    
    #####:  307:  return 0;
    $$$$$:  307-block  0
        -:  308:}
        -:  309:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  310:int numHandCards(struct gameState *state) {
    $$$$$:  310-block  0
    #####:  311:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  311-block  0
call    0 never executed
        -:  312:}
        -:  313:
function handCard called 0 returned 0% blocks executed 0%
    #####:  314:int handCard(int handPos, struct gameState *state) {
    $$$$$:  314-block  0
    #####:  315:  int currentPlayer = whoseTurn(state);
    $$$$$:  315-block  0
call    0 never executed
    #####:  316:  return state->hand[currentPlayer][handPos];
        -:  317:}
        -:  318:
function supplyCount called 3014 returned 100% blocks executed 100%
     3014:  319:int supplyCount(int card, struct gameState *state) {
     3014:  319-block  0
     3014:  320:  return state->supplyCount[card];
     3014:  320-block  0
        -:  321:}
        -:  322:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  323:int fullDeckCount(int player, int card, struct gameState *state) {
    $$$$$:  323-block  0
        -:  324:  int i;
    #####:  325:  int count = 0;
        -:  326:
    #####:  327:  for (i = 0; i < state->deckCount[player]; i++)
    $$$$$:  327-block  0
    $$$$$:  327-block  1
    $$$$$:  327-block  2
branch  0 never executed
branch  1 never executed
        -:  328:    {
    #####:  329:      if (state->deck[player][i] == card) count++;
    $$$$$:  329-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  329-block  1
        -:  330:    }
        -:  331:
    #####:  332:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  332-block  0
    $$$$$:  332-block  1
    $$$$$:  332-block  2
branch  0 never executed
branch  1 never executed
        -:  333:    {
    #####:  334:      if (state->hand[player][i] == card) count++;
    $$$$$:  334-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  334-block  1
        -:  335:    }
        -:  336:
    #####:  337:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  337-block  0
    $$$$$:  337-block  1
    $$$$$:  337-block  2
branch  0 never executed
branch  1 never executed
        -:  338:    {
    #####:  339:      if (state->discard[player][i] == card) count++;
    $$$$$:  339-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  339-block  1
        -:  340:    }
        -:  341:
    #####:  342:  return count;
    $$$$$:  342-block  0
        -:  343:}
        -:  344:
function whoseTurn called 4018 returned 100% blocks executed 100%
     4018:  345:int whoseTurn(struct gameState *state) {
     4018:  345-block  0
     4018:  346:  return state->whoseTurn;
     4018:  346-block  0
        -:  347:}
        -:  348:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  349:int endTurn(struct gameState *state) {
    $$$$$:  349-block  0
        -:  350:  int k;
        -:  351:  int i;
    #####:  352:  int currentPlayer = whoseTurn(state);
    $$$$$:  352-block  0
call    0 never executed
        -:  353:  
        -:  354:  //Discard hand
    #####:  355:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  355-block  0
    $$$$$:  355-block  1
branch  0 never executed
branch  1 never executed
    #####:  356:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  357:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  358:  }
    #####:  359:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  360:    
        -:  361:  //Code for determining the player
    #####:  362:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  362-block  0
branch  0 never executed
branch  1 never executed
    #####:  363:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  363-block  0
        -:  364:  }
        -:  365:  else{
    #####:  366:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  366-block  0
        -:  367:  }
        -:  368:
    #####:  369:  state->outpostPlayed = 0;
    #####:  370:  state->phase = 0;
    #####:  371:  state->numActions = 1;
    #####:  372:  state->coins = 0;
    #####:  373:  state->numBuys = 1;
    #####:  374:  state->playedCardCount = 0;
    #####:  375:  state->handCount[state->whoseTurn] = 0;
        -:  376:
        -:  377:  //int k; move to top
        -:  378:  //Next player draws hand
    #####:  379:  for (k = 0; k < 5; k++){
    $$$$$:  379-block  0
    $$$$$:  379-block  1
branch  0 never executed
branch  1 never executed
    #####:  380:    drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  380-block  0
call    0 never executed
        -:  381:  }
        -:  382:
        -:  383:  //Update money
    #####:  384:  updateCoins(state->whoseTurn, state , 0);
    $$$$$:  384-block  0
call    0 never executed
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  389:int isGameOver(struct gameState *state) {
    $$$$$:  389-block  0
        -:  390:  int i;
        -:  391:  int j;
        -:  392:	
        -:  393:  //if stack of Province cards is empty, the game ends
    #####:  394:  if (state->supplyCount[province] == 0)
    $$$$$:  394-block  0
branch  0 never executed
branch  1 never executed
        -:  395:    {
    #####:  396:      return 1;
    $$$$$:  396-block  0
        -:  397:    }
        -:  398:
        -:  399:  //if three supply pile are at 0, the game ends
    #####:  400:  j = 0;
    #####:  401:  for (i = 0; i < 25; i++)
    $$$$$:  401-block  0
    $$$$$:  401-block  1
    $$$$$:  401-block  2
branch  0 never executed
branch  1 never executed
        -:  402:    {
    #####:  403:      if (state->supplyCount[i] == 0)
    $$$$$:  403-block  0
branch  0 never executed
branch  1 never executed
        -:  404:	{
    #####:  405:	  j++;
    $$$$$:  405-block  0
        -:  406:	}
        -:  407:    }
    #####:  408:  if ( j >= 3)
    $$$$$:  408-block  0
branch  0 never executed
branch  1 never executed
        -:  409:    {
    #####:  410:      return 1;
    $$$$$:  410-block  0
        -:  411:    }
        -:  412:
    #####:  413:  return 0;
    $$$$$:  413-block  0
        -:  414:}
        -:  415:
function scoreFor called 5 returned 100% blocks executed 38%
        5:  416:int scoreFor (int player, struct gameState *state) {
        5:  416-block  0
        -:  417:
        -:  418:  int i;
        5:  419:  int score = 0;
        -:  420:  //score from hand
       30:  421:  for (i = 0; i < state->handCount[player]; i++)
        5:  421-block  0
       25:  421-block  1
       30:  421-block  2
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  422:    {
       25:  423:      if (state->hand[player][i] == curse) { score = score - 1; };
       25:  423-block  0
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        5:  423-block  1
       25:  424:      if (state->hand[player][i] == estate) { score = score + 1; };
       25:  424-block  0
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        1:  424-block  1
       25:  425:      if (state->hand[player][i] == duchy) { score = score + 3; };
       25:  425-block  0
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        1:  425-block  1
       25:  426:      if (state->hand[player][i] == province) { score = score + 6; };
       25:  426-block  0
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        1:  426-block  1
       25:  427:      if (state->hand[player][i] == great_hall) { score = score + 1; };
       25:  427-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    $$$$$:  427-block  1
       25:  428:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       25:  428-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    $$$$$:  428-block  1
call    2 never executed
        -:  429:    }
        -:  430:
        -:  431:  //score from discard
        5:  432:  for (i = 0; i < state->discardCount[player]; i++)
        5:  432-block  0
    $$$$$:  432-block  1
        5:  432-block  2
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  433:    {
    #####:  434:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  434-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  434-block  1
    #####:  435:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
    #####:  436:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
    #####:  437:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
    #####:  438:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
    #####:  439:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
call    2 never executed
        -:  440:    }
        -:  441:
        -:  442:  //score from deck
        5:  443:  for (i = 0; i < state->discardCount[player]; i++)
        5:  443-block  0
    $$$$$:  443-block  1
        5:  443-block  2
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  444:    {
    #####:  445:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  445-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  445-block  1
    #####:  446:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
    #####:  447:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
    #####:  448:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
    #####:  449:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
    #####:  450:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
call    2 never executed
        -:  451:    }
        -:  452:
        5:  453:  return score;
        5:  453-block  0
        -:  454:}
        -:  455:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  456:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  456-block  0
        -:  457:  int i;	
        -:  458:  int j;
        -:  459:  int highScore;
        -:  460:  int currentPlayer;
        -:  461:
        -:  462:  //get score for each player
    #####:  463:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  463-block  0
    $$$$$:  463-block  1
    $$$$$:  463-block  2
branch  0 never executed
branch  1 never executed
        -:  464:    {
        -:  465:      //set unused player scores to -9999
    #####:  466:      if (i >= state->numPlayers)
    $$$$$:  466-block  0
branch  0 never executed
branch  1 never executed
        -:  467:	{
    #####:  468:	  players[i] = -9999;
    $$$$$:  468-block  0
        -:  469:	}
        -:  470:      else
        -:  471:	{
    #####:  472:	  players[i] = scoreFor (i, state);
    $$$$$:  472-block  0
call    0 never executed
        -:  473:	}
        -:  474:    }
        -:  475:
        -:  476:  //find highest score
    #####:  477:  j = 0;
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  478-block  0
    $$$$$:  478-block  1
    $$$$$:  478-block  2
branch  0 never executed
branch  1 never executed
        -:  479:    {
    #####:  480:      if (players[i] > players[j])
    $$$$$:  480-block  0
branch  0 never executed
branch  1 never executed
        -:  481:	{
    #####:  482:	  j = i;
    $$$$$:  482-block  0
        -:  483:	}
        -:  484:    }
    #####:  485:  highScore = players[j];
        -:  486:
        -:  487:  //add 1 to players who had less turns
    #####:  488:  currentPlayer = whoseTurn(state);
    $$$$$:  488-block  0
call    0 never executed
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  489-block  0
    $$$$$:  489-block  1
branch  0 never executed
branch  1 never executed
        -:  490:    {
    #####:  491:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  491-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  491-block  1
branch  2 never executed
branch  3 never executed
        -:  492:	{
    #####:  493:	  players[i]++;
    $$$$$:  493-block  0
        -:  494:	}
        -:  495:    }
        -:  496:
        -:  497:  //find new highest score
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  499-block  0
    $$$$$:  499-block  1
    $$$$$:  499-block  2
branch  0 never executed
branch  1 never executed
        -:  500:    {
    #####:  501:      if ( players[i] > players[j] )
    $$$$$:  501-block  0
branch  0 never executed
branch  1 never executed
        -:  502:	{
    #####:  503:	  j = i;
    $$$$$:  503-block  0
        -:  504:	}
        -:  505:    }
    #####:  506:  highScore = players[j];
        -:  507:
        -:  508:  //set winners in array to 1 and rest to 0
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  509-block  0
    $$$$$:  509-block  1
    $$$$$:  509-block  2
branch  0 never executed
branch  1 never executed
        -:  510:    {
    #####:  511:      if ( players[i] == highScore )
    $$$$$:  511-block  0
branch  0 never executed
branch  1 never executed
        -:  512:	{
    #####:  513:	  players[i] = 1;
    $$$$$:  513-block  0
        -:  514:	}
        -:  515:      else
        -:  516:	{
    #####:  517:	  players[i] = 0;
    $$$$$:  517-block  0
        -:  518:	}
        -:  519:    }
        -:  520:
    #####:  521:  return 0;
    $$$$$:  521-block  0
        -:  522:}
        -:  523:
function drawCard called 266584 returned 100% blocks executed 100%
   266584:  524:int drawCard(int player, struct gameState *state)
   266584:  524-block  0
        -:  525:{	int count;
        -:  526:  int deckCounter;
   266584:  527:  if (state->deckCount[player] <= 0){//Deck is empty
   266584:  527-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  528:    
        -:  529:    //Step 1 Shuffle the discard pile back into a deck
        -:  530:    int i;
        -:  531:    //Move discard to deck
     9143:  532:    for (i = 0; i < state->discardCount[player];i++){
     1823:  532-block  0
     7320:  532-block  1
     9143:  532-block  2
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
     7320:  533:      state->deck[player][i] = state->discard[player][i];
     7320:  534:      state->discard[player][i] = -1;
        -:  535:    }
        -:  536:
     1823:  537:    state->deckCount[player] = state->discardCount[player];
     1823:  538:    state->discardCount[player] = 0;//Reset discard
        -:  539:
        -:  540:    //Shufffle the deck
     1823:  541:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
     1823:  541-block  0
call    0 returned 100%
        -:  542:   
        -:  543:    if (DEBUG){//Debug statements
        -:  544:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  545:    }
        -:  546:    
     1823:  547:    state->discardCount[player] = 0;
        -:  548:
        -:  549:    //Step 2 Draw Card
     1823:  550:    count = state->handCount[player];//Get current player's hand count
        -:  551:    
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Current hand count: %d\n", count);
        -:  554:    }
        -:  555:    
     1823:  556:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  557:
     1823:  558:    if (deckCounter == 0)
     1823:  558-block  0
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
     1793:  559:      return -1;
     1793:  559-block  0
        -:  560:
       30:  561:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       30:  562:    state->deckCount[player]--;
       30:  563:    state->handCount[player]++;//Increment hand count
       30:  563-block  0
        -:  564:  }
        -:  565:
        -:  566:  else{
   264761:  567:    int count = state->handCount[player];//Get current hand count for player
   264761:  567-block  0
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
   264761:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
   264761:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   264761:  575:    state->deckCount[player]--;
   264761:  576:    state->handCount[player]++;//Increment hand count
   264761:  576-block  0
        -:  577:  }
        -:  578:
   264791:  579:  return 0;
   264791:  579-block  0
        -:  580:}
        -:  581:
function getCost called 2 returned 100% blocks executed 13%
        2:  582:int getCost(int cardNumber)
        2:  582-block  0
        -:  583:{
        2:  584:  switch( cardNumber ) 
        2:  584-block  0
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 50%
branch  5 taken 0%
branch  6 taken 50%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  585:    {
        -:  586:    case curse:
    #####:  587:      return 0;
    $$$$$:  587-block  0
        -:  588:    case estate:
    #####:  589:      return 2;
    $$$$$:  589-block  0
        -:  590:    case duchy:
    #####:  591:      return 5;
    $$$$$:  591-block  0
        -:  592:    case province:
    #####:  593:      return 8;
    $$$$$:  593-block  0
        -:  594:    case copper:
        1:  595:      return 0;
        1:  595-block  0
        -:  596:    case silver:
    #####:  597:      return 3;
    $$$$$:  597-block  0
        -:  598:    case gold:
        1:  599:      return 6;
        1:  599-block  0
        -:  600:    case adventurer:
    #####:  601:      return 6;
    $$$$$:  601-block  0
        -:  602:    case council_room:
    #####:  603:      return 5;
    $$$$$:  603-block  0
        -:  604:    case feast:
    #####:  605:      return 4;
    $$$$$:  605-block  0
        -:  606:    case gardens:
    #####:  607:      return 4;
    $$$$$:  607-block  0
        -:  608:    case mine:
    #####:  609:      return 5;
    $$$$$:  609-block  0
        -:  610:    case remodel:
    #####:  611:      return 4;
    $$$$$:  611-block  0
        -:  612:    case smithy:
    #####:  613:      return 4;
    $$$$$:  613-block  0
        -:  614:    case village:
    #####:  615:      return 3;
    $$$$$:  615-block  0
        -:  616:    case baron:
    #####:  617:      return 4;
    $$$$$:  617-block  0
        -:  618:    case great_hall:
    #####:  619:      return 3;
    $$$$$:  619-block  0
        -:  620:    case minion:
    #####:  621:      return 5;
    $$$$$:  621-block  0
        -:  622:    case steward:
    #####:  623:      return 3;
    $$$$$:  623-block  0
        -:  624:    case tribute:
    #####:  625:      return 5;
    $$$$$:  625-block  0
        -:  626:    case ambassador:
    #####:  627:      return 3;
    $$$$$:  627-block  0
        -:  628:    case cutpurse:
    #####:  629:      return 4;
    $$$$$:  629-block  0
        -:  630:    case embargo: 
    #####:  631:      return 2;
    $$$$$:  631-block  0
        -:  632:    case outpost:
    #####:  633:      return 5;
    $$$$$:  633-block  0
        -:  634:    case salvager:
    #####:  635:      return 4;
    $$$$$:  635-block  0
        -:  636:    case sea_hag:
    #####:  637:      return 4;
    $$$$$:  637-block  0
        -:  638:    case treasure_map:
    #####:  639:      return 4;
    $$$$$:  639-block  0
        -:  640:    }
        -:  641:	
    #####:  642:  return -1;
    $$$$$:  642-block  0
        -:  643:}
        -:  644:
        -:  645:/****************************************************************************************************
        -:  646:* Start of card functions
        -:  647:*****************************************************************************************************/
        -:  648:
function playSmithy called 2 returned 100% blocks executed 100%
        2:  649:int playSmithy(struct gameState *state, int handPos) {
        2:  649-block  0
        -:  650:	//+3 Cards
        2:  651:	int currentPlayer = whoseTurn(state);
        2:  651-block  0
call    0 returned 100%
        -:  652:	int i;
        8:  653:    for (i = 0; i < 3; i++)
        8:  653-block  0
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  654:	{
        6:  655:		drawCard(currentPlayer, state);
        6:  655-block  0
call    0 returned 100%
        -:  656:	}
        -:  657:			
        -:  658:	//discard card from hand
        2:  659:	discardCard(handPos, currentPlayer, state, 1);
        2:  659-block  0
call    0 returned 100%
        2:  660:	return 0;
        -:  661:}
        -:  662:
function playAdventurer called 1003 returned 100% blocks executed 100%
     1003:  663:int playAdventurer(struct gameState *state) {
     1003:  663-block  0
     1003:  664:	int currentPlayer = whoseTurn(state);
     1003:  664-block  0
call    0 returned 100%
     1003:  665:	int drawntreasure =0;
        -:  666:	int cardDrawn;
        -:  667:	int temphand[MAX_HAND]; 
     1003:  668:	int z = 0;
        -:  669:
   250442:  670:	while(drawntreasure<2){
   250442:  670-block  0
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   249439:  671:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
   249439:  671-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
     1784:  672:		  shuffle(currentPlayer, state);
     1784:  672-block  0
call    0 returned 100%
        -:  673:		}
   249439:  674:		drawCard(currentPlayer, state);
   249439:  674-block  0
call    0 returned 100%
   249439:  675:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
   249439:  676:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
   247443:  676-block  0
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
   247436:  676-block  1
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
     2006:  677:		  drawntreasure++;
     2006:  677-block  0
        -:  678:    }
        -:  679:		else{  
   247433:  680:		  temphand[z]=cardDrawn;
   247433:  681:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   247433:  682:      z++;
   247433:  682-block  0
        -:  683:    }
        -:  684:  }
   244922:  685:  while(z-1>=0){
     1003:  685-block  0
   244922:  685-block  1
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   243919:  686:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
   243919:  687:    z=z-1;
   243919:  687-block  0
        -:  688:  }
     1003:  689:  return 0;
     1003:  689-block  0
        -:  690:}
        -:  691:
function playMine called 0 returned 0% blocks executed 0%
    #####:  692:int playMine(struct gameState *state, int choice1, int choice2, int handPos) {
    $$$$$:  692-block  0
    #####:  693:	int currentPlayer = whoseTurn(state);
    $$$$$:  693-block  0
call    0 never executed
        -:  694:	int i, j;
    #####:  695:	int z = 0;
    #####:  696:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  697:
    #####:  698:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
    $$$$$:  698-block  0
branch  2 never executed
branch  3 never executed
        -:  699:	{
    #####:  700:	  return -1;
    $$$$$:  700-block  0
        -:  701:	}
        -:  702:
    #####:  703:	if (choice2 > z || choice2 < curse)
    $$$$$:  703-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  703-block  1
branch  2 never executed
branch  3 never executed
        -:  704:	{
    #####:  705:		return -1;
    $$$$$:  705-block  0
        -:  706:	}
        -:  707:
    #####:  708:	if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  708-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  709:	{
    #####:  710:		return -1;
    $$$$$:  710-block  0
        -:  711:	}
        -:  712:
    #####:  713:	gainCard(choice1, state, 2, currentPlayer);
    $$$$$:  713-block  0
call    0 never executed
        -:  714:
        -:  715:	//discard card from hand
    #####:  716:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  717:
        -:  718:	//discard trashed card
    #####:  719:	for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  719-block  0
    $$$$$:  719-block  1
branch  0 never executed
branch  1 never executed
        -:  720:	{
    #####:  721:		if (state->hand[currentPlayer][i] == j)
    $$$$$:  721-block  0
branch  0 never executed
branch  1 never executed
        -:  722:		{
    #####:  723:			discardCard(i, currentPlayer, state, 0);			
    $$$$$:  723-block  0
call    0 never executed
    #####:  724:			break;
        -:  725:		}
        -:  726:	}
        -:  727:		
    #####:  728:	return 0;
    $$$$$:  728-block  0
        -:  729:}
        -:  730:
function playVillage called 1003 returned 100% blocks executed 100%
     1003:  731:int playVillage(struct gameState *state, int handPos) {
     1003:  731-block  0
     1003:  732:	int currentPlayer = whoseTurn(state);
     1003:  732-block  0
call    0 returned 100%
        -:  733:
        -:  734:	//+1 Card
     1003:  735:	drawCard(currentPlayer, state);
call    0 returned 100%
        -:  736:
        -:  737:	//+2 Actions
     1003:  738:	state->numActions = state->numActions + 2;
        -:  739:
        -:  740:	//discard played card from hand
     1003:  741:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     1003:  742:	return 0;
        -:  743:}
        -:  744:
function playRemodel called 1 returned 100% blocks executed 87%
        1:  745:int playRemodel(struct gameState *state, int choice1, int choice2, int handPos) {
        1:  745-block  0
        -:  746:	int i, j;
        1:  747:	int currentPlayer = whoseTurn(state);
        1:  747-block  0
call    0 returned 100%
        -:  748: 
        -:  749:
        1:  750:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  751:
        1:  752:	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  753:	{
    #####:  754:		return -1;
    $$$$$:  754-block  0
        -:  755:	}
        -:  756:
        1:  757:	gainCard(choice2, state, 0, currentPlayer);
        1:  757-block  0
call    0 returned 100%
        -:  758:
        -:  759:	//discard card from hand
        1:  760:	discardCard(handPos+1, currentPlayer, state, 0);
call    0 returned 100%
        -:  761:
        -:  762:	//discard trashed card
        1:  763:	for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  763-block  0
        1:  763-block  1
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  764:		{
        1:  765:		if (state->hand[currentPlayer][i] == j)
        1:  765-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  766:		{
        1:  767:			discardCard(i+1, currentPlayer, state, 0);			
        1:  767-block  0
call    0 returned 100%
        1:  768:			break;
        -:  769:		}
        -:  770:	}
        -:  771:
        1:  772:	return 0;
        1:  772-block  0
        -:  773:}
        -:  774:
function cardEffect called 2009 returned 100% blocks executed 17%
     2009:  775:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
     2009:  775-block  0
        -:  776:{
        -:  777:  int i;
        -:  778:  int j;
        -:  779:  int k;
        -:  780:  int x;
        -:  781:  int index;
     2009:  782:  int currentPlayer = whoseTurn(state);
     2009:  782-block  0
call    0 returned 100%
     2009:  783:  int nextPlayer = currentPlayer + 1;
        -:  784:
     2009:  785:  int tributeRevealedCards[2] = {-1, -1};
        -:  786:  int temphand[MAX_HAND];// moved above the if statement
     2009:  787:  int drawntreasure=0;
        -:  788:  int cardDrawn;
     2009:  789:  int z = 0;// this is the counter for the temp hand
     2009:  790:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 37% (fallthrough)
branch  1 taken 63%
      734:  791:    nextPlayer = 0;
      734:  791-block  0
        -:  792:  }
        -:  793:  
        -:  794:	
        -:  795:  //uses switch to select card and perform actions
     2009:  796:  switch( card ) 
     2009:  796-block  0
branch  0 taken 50%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 1%
branch  6 taken 1%
branch  7 taken 50%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 1%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  797:    {
        -:  798:    case adventurer:
     1003:  799:      playAdventurer(state);
     1003:  799-block  0
call    0 returned 100%
        -:  800:			
        -:  801:    case council_room:
        -:  802:      //+4 Cards
     5015:  803:      for (i = 0; i < 4; i++)
     1003:  803-block  0
     5015:  803-block  1
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  804:	{
     4012:  805:	  drawCard(currentPlayer, state);
     4012:  805-block  0
call    0 returned 100%
        -:  806:	}
        -:  807:			
        -:  808:      //+1 Buy
     1003:  809:      state->numBuys++;
        -:  810:			
        -:  811:      //Each other player draws a card
     3998:  812:      for (i = 0; i < state->numPlayers; i++)
     1003:  812-block  0
     2995:  812-block  1
     3998:  812-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  813:	{
     2995:  814:	  if ( i != currentPlayer )
     2995:  814-block  0
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  815:	    {
     1992:  816:	      drawCard(i, state);
     1992:  816-block  0
call    0 returned 100%
        -:  817:	    }
        -:  818:	}
        -:  819:			
        -:  820:      //put played card in played card pile
     1003:  821:      discardCard(handPos, currentPlayer, state, 0);
     1003:  821-block  0
call    0 returned 100%
        -:  822:			
     1003:  823:      return 0;
        -:  824:			
        -:  825:    case feast:
        -:  826:      //gain card with cost up to 5
        -:  827:      //Backup hand
    #####:  828:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  828-block  0
    $$$$$:  828-block  1
    $$$$$:  828-block  2
branch  0 never executed
branch  1 never executed
    #####:  829:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  830:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  831:      }
        -:  832:      //Backup hand
        -:  833:
        -:  834:      //Update Coins for Buy
    #####:  835:      updateCoins(currentPlayer, state, 5);
    $$$$$:  835-block  0
call    0 never executed
    #####:  836:      x = 1;//Condition to loop on
    #####:  837:      while( x == 1) {//Buy one card
    $$$$$:  837-block  0
branch  0 never executed
branch  1 never executed
    #####:  838:	if (supplyCount(choice1, state) <= 0){
    $$$$$:  838-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  839:	  if (DEBUG)
        -:  840:	    printf("None of that card left, sorry!\n");
        -:  841:
        -:  842:	  if (DEBUG){
        -:  843:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  844:	  }
        -:  845:	}
    #####:  846:	else if (state->coins < getCost(choice1)){
    $$$$$:  846-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  847:	  printf("That card is too expensive!\n");
    $$$$$:  847-block  0
call    0 never executed
        -:  848:
        -:  849:	  if (DEBUG){
        -:  850:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  851:	  }
        -:  852:	}
        -:  853:	else{
        -:  854:
        -:  855:	  if (DEBUG){
        -:  856:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  857:	  }
        -:  858:
    #####:  859:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  859-block  0
call    0 never executed
    #####:  860:	  x = 0;//No more buying cards
        -:  861:
        -:  862:	  if (DEBUG){
        -:  863:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  864:	  }
        -:  865:
        -:  866:	}
        -:  867:      }     
        -:  868:
        -:  869:      //Reset Hand
    #####:  870:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  870-block  0
    $$$$$:  870-block  1
    $$$$$:  870-block  2
branch  0 never executed
branch  1 never executed
    #####:  871:	state->hand[currentPlayer][i] = temphand[i];
    #####:  872:	temphand[i] = -1;
        -:  873:      }
        -:  874:      //Reset Hand
        -:  875:      			
    #####:  876:      return 0;
    $$$$$:  876-block  0
        -:  877:			
        -:  878:    case gardens:
    #####:  879:      return -1;
    $$$$$:  879-block  0
        -:  880:			
        -:  881:    case mine:
    #####:  882:   	  playMine(state, choice1, choice2, handPos);
    $$$$$:  882-block  0
call    0 never executed
        -:  883:			
        -:  884:    case remodel:
        1:  885:      playRemodel(state, choice1, choice2, handPos);
        1:  885-block  0
call    0 returned 100%
        -:  886:		
        -:  887:    case smithy:
        2:  888:      playSmithy(state, handPos);
        2:  888-block  0
call    0 returned 100%
        -:  889:		
        -:  890:    case village:
     1003:  891:      playVillage(state, handPos);
     1003:  891-block  0
call    0 returned 100%
        -:  892:		
        -:  893:    case baron:
     1003:  894:      state->numBuys++;//Increase buys by 1!
     1003:  895:      if (choice1 > 0){//Boolean true or going to discard an estate
     1003:  895-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  896:	int p = 0;//Iterator for hand!
    #####:  897:	int card_not_discarded = 1;//Flag for discard set!
    #####:  898:	while(card_not_discarded){
    $$$$$:  898-block  0
    $$$$$:  898-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  898-block  2
    #####:  899:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  899-block  0
branch  0 never executed
branch  1 never executed
    #####:  900:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  901:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  902:	    state->discardCount[currentPlayer]++;
    #####:  903:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  903-block  0
    $$$$$:  903-block  1
    $$$$$:  903-block  2
branch  0 never executed
branch  1 never executed
    #####:  904:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  905:	    }
    #####:  906:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  907:	    state->handCount[currentPlayer]--;
    #####:  908:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  908-block  0
        -:  909:	  }
    #####:  910:	  else if (p > state->handCount[currentPlayer]){
    $$$$$:  910-block  0
branch  0 never executed
branch  1 never executed
        -:  911:	    if(DEBUG) {
        -:  912:	      printf("No estate cards in your hand, invalid choice\n");
        -:  913:	      printf("Must gain an estate if there are any\n");
        -:  914:	    }
    #####:  915:	    if (supplyCount(estate, state) > 0){
    $$$$$:  915-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  916:	      gainCard(estate, state, 0, currentPlayer);
    $$$$$:  916-block  0
call    0 never executed
    #####:  917:	      state->supplyCount[estate]--;//Decrement estates
    #####:  918:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  919:		isGameOver(state);
    $$$$$:  919-block  0
call    0 never executed
        -:  920:	      }
        -:  921:	    }
    #####:  922:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  922-block  0
        -:  923:	  }
        -:  924:			    
        -:  925:	  else{
    #####:  926:	    p++;//Next card
    $$$$$:  926-block  0
        -:  927:	  }
        -:  928:	}
        -:  929:      }
        -:  930:			    
        -:  931:      else{
     1003:  932:	if (supplyCount(estate, state) > 0){
     1003:  932-block  0
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     1003:  933:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
     1003:  933-block  0
call    0 returned 100%
     1003:  934:	  state->supplyCount[estate]--;//Decrement Estates
     1003:  935:	  if (supplyCount(estate, state) == 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  936:	    isGameOver(state);
    $$$$$:  936-block  0
call    0 never executed
        -:  937:	  }
        -:  938:	}
        -:  939:      }
        -:  940:	    
        -:  941:      
     1003:  942:      return 0;
     1003:  942-block  0
        -:  943:		
        -:  944:    case great_hall:
        -:  945:      //+1 Card
    #####:  946:      drawCard(currentPlayer, state);
    $$$$$:  946-block  0
call    0 never executed
        -:  947:			
        -:  948:      //+1 Actions
    #####:  949:      state->numActions++;
        -:  950:			
        -:  951:      //discard card from hand
    #####:  952:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  953:      return 0;
        -:  954:		
        -:  955:    case minion:
        -:  956:      //+1 action
    #####:  957:      state->numActions++;
        -:  958:			
        -:  959:      //discard card from hand
    #####:  960:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  960-block  0
call    0 never executed
        -:  961:			
    #####:  962:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  963:	{
    #####:  964:	  state->coins = state->coins + 2;
    $$$$$:  964-block  0
        -:  965:	}
        -:  966:			
    #####:  967:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  967-block  0
branch  0 never executed
branch  1 never executed
        -:  968:	{
        -:  969:	  //discard hand
    #####:  970:	  while(numHandCards(state) > 0)
    $$$$$:  970-block  0
    $$$$$:  970-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  971:	    {
    #####:  972:	      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  972-block  0
call    0 never executed
        -:  973:	    }
        -:  974:				
        -:  975:	  //draw 4
    #####:  976:	  for (i = 0; i < 4; i++)
    $$$$$:  976-block  0
    $$$$$:  976-block  1
branch  0 never executed
branch  1 never executed
        -:  977:	    {
    #####:  978:	      drawCard(currentPlayer, state);
    $$$$$:  978-block  0
call    0 never executed
        -:  979:	    }
        -:  980:				
        -:  981:	  //other players discard hand and redraw if hand size > 4
    #####:  982:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$:  982-block  0
    $$$$$:  982-block  1
    $$$$$:  982-block  2
branch  0 never executed
branch  1 never executed
        -:  983:	    {
    #####:  984:	      if (i != currentPlayer)
    $$$$$:  984-block  0
branch  0 never executed
branch  1 never executed
        -:  985:		{
    #####:  986:		  if ( state->handCount[i] > 4 )
    $$$$$:  986-block  0
branch  0 never executed
branch  1 never executed
        -:  987:		    {
        -:  988:		      //discard hand
    #####:  989:		      while( state->handCount[i] > 0 )
    $$$$$:  989-block  0
    $$$$$:  989-block  1
branch  0 never executed
branch  1 never executed
        -:  990:			{
    #####:  991:			  discardCard(handPos, i, state, 0);
    $$$$$:  991-block  0
call    0 never executed
        -:  992:			}
        -:  993:							
        -:  994:		      //draw 4
    #####:  995:		      for (j = 0; j < 4; j++)
    $$$$$:  995-block  0
    $$$$$:  995-block  1
branch  0 never executed
branch  1 never executed
        -:  996:			{
    #####:  997:			  drawCard(i, state);
    $$$$$:  997-block  0
call    0 never executed
        -:  998:			}
        -:  999:		    }
        -: 1000:		}
        -: 1001:	    }
        -: 1002:				
        -: 1003:	}
    #####: 1004:      return 0;
    $$$$$: 1004-block  0
        -: 1005:		
        -: 1006:    case steward:
        3: 1007:      if (choice1 == 1)
        3: 1007-block  0
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1008:	{
        -: 1009:	  //+2 cards
        1: 1010:	  drawCard(currentPlayer, state);
        1: 1010-block  0
call    0 returned 100%
        1: 1011:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1012:	}
        2: 1013:      else if (choice1 == 2)
        2: 1013-block  0
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1014:	{
        -: 1015:	  //+2 coins
        1: 1016:	  state->coins = state->coins + 2;
        1: 1016-block  0
        -: 1017:	}
        -: 1018:      else
        -: 1019:	{
        -: 1020:	  //trash 2 cards in hand
        1: 1021:	  discardCard(choice2, currentPlayer, state, 1);
        1: 1021-block  0
call    0 returned 100%
        1: 1022:	  discardCard(choice3, currentPlayer, state, 1);
call    0 returned 100%
        -: 1023:	}
        -: 1024:			
        -: 1025:      //discard card from hand
        3: 1026:      discardCard(handPos, currentPlayer, state, 0);
        3: 1026-block  0
call    0 returned 100%
        3: 1027:      return 0;
        -: 1028:		
        -: 1029:    case tribute:
    #####: 1030:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1030-block  0
branch  0 never executed
branch  1 never executed
    #####: 1031:	if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1031-block  0
branch  0 never executed
branch  1 never executed
    #####: 1032:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1033:	  state->deckCount[nextPlayer]--;
    $$$$$: 1033-block  0
        -: 1034:	}
    #####: 1035:	else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1035-block  0
branch  0 never executed
branch  1 never executed
    #####: 1036:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1037:	  state->discardCount[nextPlayer]--;
    $$$$$: 1037-block  0
        -: 1038:	}
        -: 1039:	else{
        -: 1040:	  //No Card to Reveal
        -: 1041:	  if (DEBUG){
        -: 1042:	    printf("No cards to reveal\n");
        -: 1043:	  }
        -: 1044:	}
        -: 1045:      }
        -: 1046:	    
        -: 1047:      else{
    #####: 1048:	if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1048-block  0
branch  0 never executed
branch  1 never executed
    #####: 1049:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1049-block  0
    $$$$$: 1049-block  1
    $$$$$: 1049-block  2
branch  0 never executed
branch  1 never executed
    #####: 1050:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1051:	    state->deckCount[nextPlayer]++;
    #####: 1052:	    state->discard[nextPlayer][i] = -1;
    #####: 1053:	    state->discardCount[nextPlayer]--;
        -: 1054:	  }
        -: 1055:			    
    #####: 1056:	  shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$: 1056-block  0
call    0 never executed
        -: 1057:	} 
    #####: 1058:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1059:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1060:	state->deckCount[nextPlayer]--;
    #####: 1061:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1062:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1063:	state->deckCount[nextPlayer]--;
    $$$$$: 1063-block  0
        -: 1064:      }    
        -: 1065:		       
    #####: 1066:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1066-block  0
branch  0 never executed
branch  1 never executed
    #####: 1067:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1068:	state->playedCardCount++;
    #####: 1069:	tributeRevealedCards[1] = -1;
    $$$$$: 1069-block  0
        -: 1070:      }
        -: 1071:
    #####: 1072:      for (i = 0; i <= 2; i ++){
    $$$$$: 1072-block  0
    $$$$$: 1072-block  1
    $$$$$: 1072-block  2
branch  0 never executed
branch  1 never executed
    #####: 1073:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1073-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1073-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1073-block  2
branch  4 never executed
branch  5 never executed
    #####: 1074:	  state->coins += 2;
    $$$$$: 1074-block  0
        -: 1075:	}
        -: 1076:		    
    #####: 1077:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1077-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1077-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1077-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1077-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1077-block  4
branch  8 never executed
branch  9 never executed
    #####: 1078:	  drawCard(currentPlayer, state);
    $$$$$: 1078-block  0
call    0 never executed
    #####: 1079:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1080:	}
        -: 1081:	else{//Action Card
    #####: 1082:	  state->numActions = state->numActions + 2;
    $$$$$: 1082-block  0
        -: 1083:	}
        -: 1084:      }
        -: 1085:	    
    #####: 1086:      return 0;
    $$$$$: 1086-block  0
        -: 1087:		
        -: 1088:    case ambassador:
    #####: 1089:      j = 0;		//used to check if player has enough cards to discard
        -: 1090:
    #####: 1091:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1091-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1091-block  1
branch  2 never executed
branch  3 never executed
        -: 1092:	{
    #####: 1093:	  return -1;				
    $$$$$: 1093-block  0
        -: 1094:	}
        -: 1095:
    #####: 1096:      if (choice1 == handPos)
    $$$$$: 1096-block  0
branch  0 never executed
branch  1 never executed
        -: 1097:	{
    #####: 1098:	  return -1;
    $$$$$: 1098-block  0
        -: 1099:	}
        -: 1100:
    #####: 1101:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1101-block  0
    $$$$$: 1101-block  1
    $$$$$: 1101-block  2
branch  0 never executed
branch  1 never executed
        -: 1102:	{
    #####: 1103:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1103-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1103-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1103-block  2
branch  4 never executed
branch  5 never executed
        -: 1104:	    {
    #####: 1105:	      j++;
    $$$$$: 1105-block  0
        -: 1106:	    }
        -: 1107:	}
    #####: 1108:      if (j < choice2)
    $$$$$: 1108-block  0
branch  0 never executed
branch  1 never executed
        -: 1109:	{
    #####: 1110:	  return -1;				
    $$$$$: 1110-block  0
        -: 1111:	}
        -: 1112:
        -: 1113:      if (DEBUG) 
        -: 1114:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1115:
        -: 1116:      //increase supply count for choosen card by amount being discarded
    #####: 1117:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1118:			
        -: 1119:      //each other player gains a copy of revealed card
    #####: 1120:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1120-block  0
    $$$$$: 1120-block  1
    $$$$$: 1120-block  2
branch  0 never executed
branch  1 never executed
        -: 1121:	{
    #####: 1122:	  if (i != currentPlayer)
    $$$$$: 1122-block  0
branch  0 never executed
branch  1 never executed
        -: 1123:	    {
    #####: 1124:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1124-block  0
call    0 never executed
        -: 1125:	    }
        -: 1126:	}
        -: 1127:
        -: 1128:      //discard played card from hand
    #####: 1129:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1129-block  0
call    0 never executed
        -: 1130:
        -: 1131:      //trash copies of cards returned to supply
    #####: 1132:      for (j = 0; j < choice2; j++)
    $$$$$: 1132-block  0
    $$$$$: 1132-block  1
branch  0 never executed
branch  1 never executed
        -: 1133:	{
    #####: 1134:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1134-block  0
    $$$$$: 1134-block  1
    $$$$$: 1134-block  2
branch  0 never executed
branch  1 never executed
        -: 1135:	    {
    #####: 1136:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1136-block  0
branch  0 never executed
branch  1 never executed
        -: 1137:		{
    #####: 1138:		  discardCard(i, currentPlayer, state, 1);
    $$$$$: 1138-block  0
call    0 never executed
    #####: 1139:		  break;
        -: 1140:		}
        -: 1141:	    }
        -: 1142:	}			
        -: 1143:
    #####: 1144:      return 0;
    $$$$$: 1144-block  0
        -: 1145:		
        -: 1146:    case cutpurse:
        -: 1147:
    #####: 1148:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1148-block  0
call    0 never executed
    #####: 1149:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1149-block  0
    $$$$$: 1149-block  1
branch  0 never executed
branch  1 never executed
        -: 1150:	{
    #####: 1151:	  if (i != currentPlayer)
    $$$$$: 1151-block  0
branch  0 never executed
branch  1 never executed
        -: 1152:	    {
    #####: 1153:	      for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1153-block  0
    $$$$$: 1153-block  1
    $$$$$: 1153-block  2
branch  0 never executed
branch  1 never executed
        -: 1154:		{
    #####: 1155:		  if (state->hand[i][j] == copper)
    $$$$$: 1155-block  0
branch  0 never executed
branch  1 never executed
        -: 1156:		    {
    #####: 1157:		      discardCard(j, i, state, 0);
    $$$$$: 1157-block  0
call    0 never executed
    #####: 1158:		      break;
        -: 1159:		    }
    #####: 1160:		  if (j == state->handCount[i])
    $$$$$: 1160-block  0
branch  0 never executed
branch  1 never executed
        -: 1161:		    {
    #####: 1162:		      for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1162-block  0
    $$$$$: 1162-block  1
    $$$$$: 1162-block  2
branch  0 never executed
branch  1 never executed
        -: 1163:			{
        -: 1164:			  if (DEBUG)
        -: 1165:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1166:			}	
    #####: 1167:		      break;
    $$$$$: 1167-block  0
        -: 1168:		    }		
        -: 1169:		}
        -: 1170:					
        -: 1171:	    }
        -: 1172:				
        -: 1173:	}				
        -: 1174:
        -: 1175:      //discard played card from hand
    #####: 1176:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1176-block  0
call    0 never executed
        -: 1177:
    #####: 1178:      return 0;
        -: 1179:
        -: 1180:		
        -: 1181:    case embargo: 
        -: 1182:      //+2 Coins
    #####: 1183:      state->coins = state->coins + 2;
        -: 1184:			
        -: 1185:      //see if selected pile is in play
    #####: 1186:      if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1186-block  0
branch  0 never executed
branch  1 never executed
        -: 1187:	{
    #####: 1188:	  return -1;
    $$$$$: 1188-block  0
        -: 1189:	}
        -: 1190:			
        -: 1191:      //add embargo token to selected supply pile
    #####: 1192:      state->embargoTokens[choice1]++;
        -: 1193:			
        -: 1194:      //trash card
    #####: 1195:      discardCard(handPos, currentPlayer, state, 1);		
    $$$$$: 1195-block  0
call    0 never executed
    #####: 1196:      return 0;
        -: 1197:		
        -: 1198:    case outpost:
        -: 1199:      //set outpost flag
    #####: 1200:      state->outpostPlayed++;
        -: 1201:			
        -: 1202:      //discard card
    #####: 1203:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1203-block  0
call    0 never executed
    #####: 1204:      return 0;
        -: 1205:		
        -: 1206:    case salvager:
        -: 1207:      //+1 buy
    #####: 1208:      state->numBuys++;
        -: 1209:			
    #####: 1210:      if (choice1)
    $$$$$: 1210-block  0
branch  0 never executed
branch  1 never executed
        -: 1211:	{
        -: 1212:	  //gain coins equal to trashed card
    #####: 1213:	  state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1213-block  0
call    0 never executed
call    1 never executed
        -: 1214:	  //trash card
    #####: 1215:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1216:	}
        -: 1217:			
        -: 1218:      //discard card
    #####: 1219:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1219-block  0
call    0 never executed
    #####: 1220:      return 0;
        -: 1221:		
        -: 1222:    case sea_hag:
    #####: 1223:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1223-block  0
    $$$$$: 1223-block  1
    $$$$$: 1223-block  2
branch  0 never executed
branch  1 never executed
    #####: 1224:	if (i != currentPlayer){
    $$$$$: 1224-block  0
branch  0 never executed
branch  1 never executed
    #####: 1225:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1226:	  state->discardCount[i]++;
    #####: 1227:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1227-block  0
        -: 1228:	}
        -: 1229:      }
    #####: 1230:      return 0;
    $$$$$: 1230-block  0
        -: 1231:		
        -: 1232:    case treasure_map:
        -: 1233:      //search hand for another treasure_map
    #####: 1234:      index = -1;
    #####: 1235:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1235-block  0
    $$$$$: 1235-block  1
    $$$$$: 1235-block  2
branch  0 never executed
branch  1 never executed
        -: 1236:	{
    #####: 1237:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1237-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1237-block  1
branch  2 never executed
branch  3 never executed
        -: 1238:	    {
    #####: 1239:	      index = i;
    #####: 1240:	      break;
    $$$$$: 1240-block  0
        -: 1241:	    }
        -: 1242:	}
    #####: 1243:      if (index > -1)
    $$$$$: 1243-block  0
branch  0 never executed
branch  1 never executed
        -: 1244:	{
        -: 1245:	  //trash both treasure cards
    #####: 1246:	  discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1246-block  0
call    0 never executed
    #####: 1247:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1248:
        -: 1249:	  //gain 4 Gold cards
    #####: 1250:	  for (i = 0; i < 4; i++)
    $$$$$: 1250-block  0
branch  0 never executed
branch  1 never executed
        -: 1251:	    {
    #####: 1252:	      gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1252-block  0
call    0 never executed
        -: 1253:	    }
        -: 1254:				
        -: 1255:	  //return success
    #####: 1256:	  return 1;
    $$$$$: 1256-block  0
        -: 1257:	}
        -: 1258:			
        -: 1259:      //no second treasure_map found in hand
    #####: 1260:      return -1;
    $$$$$: 1260-block  0
        -: 1261:    }
        -: 1262:	
     2009: 1263:  return -1;
    $$$$$: 1263-block  0
     2009: 1263-block  1
        -: 1264:}
        -: 1265:
function discardCard called 2022 returned 100% blocks executed 89%
     2022: 1266:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
     2022: 1266-block  0
        -: 1267:{
        -: 1268:	
        -: 1269:  //if card is not trashed, added to Played pile 
     2022: 1270:  if (trashFlag < 1)
     2022: 1270-block  0
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -: 1271:    {
        -: 1272:      //add card to played pile
     2017: 1273:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     2017: 1274:      state->playedCardCount++;
     2017: 1274-block  0
        -: 1275:    }
        -: 1276:	
        -: 1277:  //set played card to -1
     2022: 1278:  state->hand[currentPlayer][handPos] = -1;
        -: 1279:	
        -: 1280:  //remove card from player's hand
     2022: 1281:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
     2022: 1281-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1282:    {
        -: 1283:      //reduce number of cards in hand
        6: 1284:      state->handCount[currentPlayer]--;
        6: 1284-block  0
        -: 1285:    }
     2016: 1286:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
     2016: 1286-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1287:    {
        -: 1288:      //reduce number of cards in hand
    #####: 1289:      state->handCount[currentPlayer]--;
    $$$$$: 1289-block  0
        -: 1290:    }
        -: 1291:  else 	
        -: 1292:    {
        -: 1293:      //replace discarded card with last card in hand
     2016: 1294:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1295:      //set last card to -1
     2016: 1296:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1297:      //reduce number of cards in hand
     2016: 1298:      state->handCount[currentPlayer]--;
     2016: 1298-block  0
        -: 1299:    }
        -: 1300:	
     2022: 1301:  return 0;
     2022: 1301-block  0
        -: 1302:}
        -: 1303:
function gainCard called 1008 returned 100% blocks executed 100%
     1008: 1304:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
     1008: 1304-block  0
        -: 1305:{
        -: 1306:  //Note: supplyPos is enum of choosen card
        -: 1307:	
        -: 1308:  //check if supply pile is empty (0) or card is not used in game (-1)
     1008: 1309:  if ( supplyCount(supplyPos, state) < 1 )
     1008: 1309-block  0
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        -: 1310:    {
        1: 1311:      return -1;
        1: 1311-block  0
        -: 1312:    }
        -: 1313:	
        -: 1314:  //added card for [whoseTurn] current player:
        -: 1315:  // toFlag = 0 : add to discard
        -: 1316:  // toFlag = 1 : add to deck
        -: 1317:  // toFlag = 2 : add to hand
        -: 1318:
     1007: 1319:  if (toFlag == 1)
     1007: 1319-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1320:    {
        1: 1321:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1322:      state->deckCount[player]++;
        1: 1322-block  0
        -: 1323:    }
     1006: 1324:  else if (toFlag == 2)
     1006: 1324-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1325:    {
        1: 1326:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1327:      state->handCount[player]++;
        1: 1327-block  0
        -: 1328:    }
        -: 1329:  else
        -: 1330:    {
     1005: 1331:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     1005: 1332:      state->discardCount[player]++;
     1005: 1332-block  0
        -: 1333:    }
        -: 1334:	
        -: 1335:  //decrease number in supply pile
     1007: 1336:  state->supplyCount[supplyPos]--;
        -: 1337:	 
     1007: 1338:  return 0;
     1007: 1338-block  0
        -: 1339:}
        -: 1340:
function updateCoins called 2030 returned 100% blocks executed 100%
     2030: 1341:int updateCoins(int player, struct gameState *state, int bonus)
     2030: 1341-block  0
        -: 1342:{
        -: 1343:  int i;
        -: 1344:	
        -: 1345:  //reset coin count
     2030: 1346:  state->coins = 0;
        -: 1347:
        -: 1348:  //add coins for each Treasure card in player's hand
    12180: 1349:  for (i = 0; i < state->handCount[player]; i++)
     2030: 1349-block  0
    10150: 1349-block  1
    12180: 1349-block  2
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1350:    {
    10150: 1351:      if (state->hand[player][i] == copper)
    10150: 1351-block  0
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
        -: 1352:	{
     7056: 1353:	  state->coins += 1;
     7056: 1353-block  0
        -: 1354:	}
     3094: 1355:      else if (state->hand[player][i] == silver)
     3094: 1355-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1356:	{
        5: 1357:	  state->coins += 2;
        5: 1357-block  0
        -: 1358:	}
     3089: 1359:      else if (state->hand[player][i] == gold)
     3089: 1359-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1360:	{
        5: 1361:	  state->coins += 3;
        5: 1361-block  0
        -: 1362:	}	
        -: 1363:    }	
        -: 1364:
        -: 1365:  //add bonus
     2030: 1366:  state->coins += bonus;
        -: 1367:
     2030: 1368:  return 0;
     2030: 1368-block  0
        -: 1369:}
        -: 1370:
        -: 1371:
        -: 1372:/************************************************
        -: 1373:Start of function unit tests
        -: 1374:*************************************************/
        -: 1375:
function testUpdateCoins called 0 returned 0% blocks executed 0%
    #####: 1376:int testUpdateCoins(int player, struct gameState *state, int bonus) {
    $$$$$: 1376-block  0
        -: 1377:  
    #####: 1378:}
        -: 1379:
        -: 1380:
        -: 1381://end of dominion.c
        -: 1382:
----------------- Random Testing Card: village ----------------
----------------- 0 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 1 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 2 ----------------
SUCCESS
FAILURE
----------------- 3 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 4 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 5 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 6 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 7 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 8 ----------------
SUCCESS
FAILURE
----------------- 9 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 10 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 11 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 12 ----------------
SUCCESS
FAILURE
----------------- 13 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 14 ----------------
SUCCESS
FAILURE
----------------- 15 ----------------
SUCCESS
FAILURE
----------------- 16 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 17 ----------------
SUCCESS
FAILURE
----------------- 18 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 19 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 20 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 21 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 22 ----------------
SUCCESS
FAILURE
----------------- 23 ----------------
SUCCESS
FAILURE
----------------- 24 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 25 ----------------
SUCCESS
FAILURE
----------------- 26 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 27 ----------------
SUCCESS
FAILURE
----------------- 28 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 29 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 30 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 31 ----------------
SUCCESS
FAILURE
----------------- 32 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 33 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 34 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 35 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 36 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 37 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 38 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 39 ----------------
SUCCESS
FAILURE
----------------- 40 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 41 ----------------
SUCCESS
FAILURE
----------------- 42 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 43 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 44 ----------------
SUCCESS
FAILURE
----------------- 45 ----------------
SUCCESS
FAILURE
----------------- 46 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 47 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 48 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 49 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 50 ----------------
SUCCESS
FAILURE
----------------- 51 ----------------
SUCCESS
FAILURE
----------------- 52 ----------------
SUCCESS
FAILURE
----------------- 53 ----------------
SUCCESS
FAILURE
----------------- 54 ----------------
SUCCESS
FAILURE
----------------- 55 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 56 ----------------
SUCCESS
FAILURE
----------------- 57 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 58 ----------------
SUCCESS
FAILURE
----------------- 59 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 60 ----------------
SUCCESS
FAILURE
----------------- 61 ----------------
SUCCESS
FAILURE
----------------- 62 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 63 ----------------
SUCCESS
FAILURE
----------------- 64 ----------------
SUCCESS
FAILURE
----------------- 65 ----------------
SUCCESS
FAILURE
----------------- 66 ----------------
SUCCESS
FAILURE
----------------- 67 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 68 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 69 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 70 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 71 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 72 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 73 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 74 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 75 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 76 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 77 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 78 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 79 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 80 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 81 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 82 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 83 ----------------
SUCCESS
FAILURE
----------------- 84 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 85 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 86 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 87 ----------------
SUCCESS
FAILURE
----------------- 88 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 89 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 90 ----------------
SUCCESS
FAILURE
----------------- 91 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 92 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 93 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 94 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 95 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 96 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 97 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 98 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 99 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 100 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 101 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 102 ----------------
SUCCESS
FAILURE
----------------- 103 ----------------
SUCCESS
FAILURE
----------------- 104 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 105 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 106 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 107 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 108 ----------------
SUCCESS
FAILURE
----------------- 109 ----------------
SUCCESS
FAILURE
----------------- 110 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 111 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 112 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 113 ----------------
SUCCESS
FAILURE
----------------- 114 ----------------
SUCCESS
FAILURE
----------------- 115 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 116 ----------------
SUCCESS
FAILURE
----------------- 117 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 118 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 119 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 120 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 121 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 122 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 123 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 124 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 125 ----------------
SUCCESS
FAILURE
----------------- 126 ----------------
SUCCESS
FAILURE
----------------- 127 ----------------
SUCCESS
FAILURE
----------------- 128 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 129 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 130 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 131 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 132 ----------------
SUCCESS
FAILURE
----------------- 133 ----------------
SUCCESS
FAILURE
----------------- 134 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 135 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 136 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 137 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 138 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 139 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 140 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 141 ----------------
SUCCESS
FAILURE
----------------- 142 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 143 ----------------
SUCCESS
FAILURE
----------------- 144 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 145 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 146 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 147 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 148 ----------------
SUCCESS
FAILURE
----------------- 149 ----------------
SUCCESS
FAILURE
----------------- 150 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 151 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 152 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 153 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 154 ----------------
SUCCESS
FAILURE
----------------- 155 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 156 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 157 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 158 ----------------
SUCCESS
FAILURE
----------------- 159 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 160 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 161 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 162 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 163 ----------------
SUCCESS
FAILURE
----------------- 164 ----------------
SUCCESS
FAILURE
----------------- 165 ----------------
SUCCESS
FAILURE
----------------- 166 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 167 ----------------
SUCCESS
FAILURE
----------------- 168 ----------------
SUCCESS
FAILURE
----------------- 169 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 170 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 171 ----------------
SUCCESS
FAILURE
----------------- 172 ----------------
SUCCESS
FAILURE
----------------- 173 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 174 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 175 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 176 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 177 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 178 ----------------
SUCCESS
FAILURE
----------------- 179 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 180 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 181 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 182 ----------------
SUCCESS
FAILURE
----------------- 183 ----------------
SUCCESS
FAILURE
----------------- 184 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 185 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 186 ----------------
SUCCESS
FAILURE
----------------- 187 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 188 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 189 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 190 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 191 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 192 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 193 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 194 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 195 ----------------
SUCCESS
FAILURE
----------------- 196 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 197 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 198 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 199 ----------------
SUCCESS
FAILURE
----------------- 200 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 201 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 202 ----------------
SUCCESS
FAILURE
----------------- 203 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 204 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 205 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 206 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 207 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 208 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 209 ----------------
SUCCESS
FAILURE
----------------- 210 ----------------
SUCCESS
FAILURE
----------------- 211 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 212 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 213 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 214 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 215 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 216 ----------------
SUCCESS
FAILURE
----------------- 217 ----------------
SUCCESS
FAILURE
----------------- 218 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 219 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 220 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 221 ----------------
SUCCESS
FAILURE
----------------- 222 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 223 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 224 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 225 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 226 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 227 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 228 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 229 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 230 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 231 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 232 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 233 ----------------
SUCCESS
FAILURE
----------------- 234 ----------------
SUCCESS
FAILURE
----------------- 235 ----------------
SUCCESS
FAILURE
----------------- 236 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 237 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 238 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 239 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 240 ----------------
SUCCESS
FAILURE
----------------- 241 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 242 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 243 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 244 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 245 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 246 ----------------
SUCCESS
FAILURE
----------------- 247 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 248 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 249 ----------------
SUCCESS
FAILURE
----------------- 250 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 251 ----------------
SUCCESS
FAILURE
----------------- 252 ----------------
SUCCESS
FAILURE
----------------- 253 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 254 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 255 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 256 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 257 ----------------
SUCCESS
FAILURE
----------------- 258 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 259 ----------------
SUCCESS
FAILURE
----------------- 260 ----------------
SUCCESS
FAILURE
----------------- 261 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 262 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 263 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 264 ----------------
SUCCESS
FAILURE
----------------- 265 ----------------
SUCCESS
FAILURE
----------------- 266 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 267 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 268 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 269 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 270 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 271 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 272 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 273 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 274 ----------------
SUCCESS
FAILURE
----------------- 275 ----------------
SUCCESS
FAILURE
----------------- 276 ----------------
SUCCESS
FAILURE
----------------- 277 ----------------
SUCCESS
FAILURE
----------------- 278 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 279 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 280 ----------------
SUCCESS
FAILURE
----------------- 281 ----------------
SUCCESS
FAILURE
----------------- 282 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 283 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 284 ----------------
SUCCESS
FAILURE
----------------- 285 ----------------
SUCCESS
FAILURE
----------------- 286 ----------------
SUCCESS
FAILURE
----------------- 287 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 288 ----------------
SUCCESS
FAILURE
----------------- 289 ----------------
SUCCESS
FAILURE
----------------- 290 ----------------
SUCCESS
FAILURE
----------------- 291 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 292 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 293 ----------------
SUCCESS
FAILURE
----------------- 294 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 295 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 296 ----------------
SUCCESS
FAILURE
----------------- 297 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 298 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 299 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 300 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 301 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 302 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 303 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 304 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 305 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 306 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 307 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 308 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 309 ----------------
SUCCESS
FAILURE
----------------- 310 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 311 ----------------
SUCCESS
FAILURE
----------------- 312 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 313 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 314 ----------------
SUCCESS
FAILURE
----------------- 315 ----------------
SUCCESS
FAILURE
----------------- 316 ----------------
SUCCESS
FAILURE
----------------- 317 ----------------
SUCCESS
FAILURE
----------------- 318 ----------------
SUCCESS
FAILURE
----------------- 319 ----------------
SUCCESS
FAILURE
----------------- 320 ----------------
SUCCESS
FAILURE
----------------- 321 ----------------
SUCCESS
FAILURE
----------------- 322 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 323 ----------------
SUCCESS
FAILURE
----------------- 324 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 325 ----------------
SUCCESS
FAILURE
----------------- 326 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 327 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 328 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 329 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 330 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 331 ----------------
SUCCESS
FAILURE
----------------- 332 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 333 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 334 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 335 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 336 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 337 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 338 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 339 ----------------
SUCCESS
FAILURE
----------------- 340 ----------------
SUCCESS
FAILURE
----------------- 341 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 342 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 343 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 344 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 345 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 346 ----------------
SUCCESS
FAILURE
----------------- 347 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 348 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 349 ----------------
SUCCESS
FAILURE
----------------- 350 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 351 ----------------
SUCCESS
FAILURE
----------------- 352 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 353 ----------------
SUCCESS
FAILURE
----------------- 354 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 355 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 356 ----------------
SUCCESS
FAILURE
----------------- 357 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 358 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 359 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 360 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 361 ----------------
SUCCESS
FAILURE
----------------- 362 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 363 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 364 ----------------
SUCCESS
FAILURE
----------------- 365 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 366 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 367 ----------------
SUCCESS
FAILURE
----------------- 368 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 369 ----------------
SUCCESS
FAILURE
----------------- 370 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 371 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 372 ----------------
SUCCESS
FAILURE
----------------- 373 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 374 ----------------
SUCCESS
FAILURE
----------------- 375 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 376 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 377 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 378 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 379 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 380 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 381 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 382 ----------------
SUCCESS
FAILURE
----------------- 383 ----------------
SUCCESS
FAILURE
----------------- 384 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 385 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 386 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 387 ----------------
SUCCESS
FAILURE
----------------- 388 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 389 ----------------
SUCCESS
FAILURE
----------------- 390 ----------------
SUCCESS
FAILURE
----------------- 391 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 392 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 393 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 394 ----------------
SUCCESS
FAILURE
----------------- 395 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 396 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 397 ----------------
SUCCESS
FAILURE
----------------- 398 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 399 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 400 ----------------
SUCCESS
FAILURE
----------------- 401 ----------------
SUCCESS
FAILURE
----------------- 402 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 403 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 404 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 405 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 406 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 407 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 408 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 409 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 410 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 411 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 412 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 413 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 414 ----------------
SUCCESS
FAILURE
----------------- 415 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 416 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 417 ----------------
SUCCESS
FAILURE
----------------- 418 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 419 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 420 ----------------
SUCCESS
FAILURE
----------------- 421 ----------------
SUCCESS
FAILURE
----------------- 422 ----------------
SUCCESS
FAILURE
----------------- 423 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 424 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 425 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 426 ----------------
SUCCESS
FAILURE
----------------- 427 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 428 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 429 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 430 ----------------
SUCCESS
FAILURE
----------------- 431 ----------------
SUCCESS
FAILURE
----------------- 432 ----------------
SUCCESS
FAILURE
----------------- 433 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 434 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 435 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 436 ----------------
SUCCESS
FAILURE
----------------- 437 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 438 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 439 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 440 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 441 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 442 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 443 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 444 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 445 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 446 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 447 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 448 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 449 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 450 ----------------
SUCCESS
FAILURE
----------------- 451 ----------------
SUCCESS
FAILURE
----------------- 452 ----------------
SUCCESS
FAILURE
----------------- 453 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 454 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 455 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 456 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 457 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 458 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 459 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 460 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 461 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 462 ----------------
SUCCESS
FAILURE
----------------- 463 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 464 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 465 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 466 ----------------
SUCCESS
FAILURE
----------------- 467 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 468 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 469 ----------------
SUCCESS
FAILURE
----------------- 470 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 471 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 472 ----------------
SUCCESS
FAILURE
----------------- 473 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 474 ----------------
SUCCESS
FAILURE
----------------- 475 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 476 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 477 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 478 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 479 ----------------
SUCCESS
FAILURE
----------------- 480 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 481 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 482 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 483 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 484 ----------------
SUCCESS
FAILURE
----------------- 485 ----------------
SUCCESS
FAILURE
----------------- 486 ----------------
SUCCESS
FAILURE
----------------- 487 ----------------
SUCCESS
FAILURE
----------------- 488 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 489 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 490 ----------------
SUCCESS
FAILURE
----------------- 491 ----------------
SUCCESS
FAILURE
----------------- 492 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 493 ----------------
SUCCESS
FAILURE
----------------- 494 ----------------
SUCCESS
FAILURE
----------------- 495 ----------------
SUCCESS
FAILURE
----------------- 496 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 497 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 498 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 499 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 500 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 501 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 502 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 503 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 504 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 505 ----------------
SUCCESS
FAILURE
----------------- 506 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 507 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 508 ----------------
SUCCESS
FAILURE
----------------- 509 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 510 ----------------
SUCCESS
FAILURE
----------------- 511 ----------------
SUCCESS
FAILURE
----------------- 512 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 513 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 514 ----------------
SUCCESS
FAILURE
----------------- 515 ----------------
SUCCESS
FAILURE
----------------- 516 ----------------
SUCCESS
FAILURE
----------------- 517 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 518 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 519 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 520 ----------------
SUCCESS
FAILURE
----------------- 521 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 522 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 523 ----------------
SUCCESS
FAILURE
----------------- 524 ----------------
SUCCESS
FAILURE
----------------- 525 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 526 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 527 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 528 ----------------
SUCCESS
FAILURE
----------------- 529 ----------------
SUCCESS
FAILURE
----------------- 530 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 531 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 532 ----------------
SUCCESS
FAILURE
----------------- 533 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 534 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 535 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 536 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 537 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 538 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 539 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 540 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 541 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 542 ----------------
SUCCESS
FAILURE
----------------- 543 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 544 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 545 ----------------
SUCCESS
FAILURE
----------------- 546 ----------------
SUCCESS
FAILURE
----------------- 547 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 548 ----------------
SUCCESS
FAILURE
----------------- 549 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 550 ----------------
SUCCESS
FAILURE
----------------- 551 ----------------
SUCCESS
FAILURE
----------------- 552 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 553 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 554 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 555 ----------------
SUCCESS
FAILURE
----------------- 556 ----------------
SUCCESS
FAILURE
----------------- 557 ----------------
SUCCESS
FAILURE
----------------- 558 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 559 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 560 ----------------
SUCCESS
FAILURE
----------------- 561 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 562 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 563 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 564 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 565 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 566 ----------------
SUCCESS
FAILURE
----------------- 567 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 568 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 569 ----------------
SUCCESS
FAILURE
----------------- 570 ----------------
SUCCESS
FAILURE
----------------- 571 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 572 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 573 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 574 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 575 ----------------
SUCCESS
FAILURE
----------------- 576 ----------------
SUCCESS
FAILURE
----------------- 577 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 578 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 579 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 580 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 581 ----------------
SUCCESS
FAILURE
----------------- 582 ----------------
SUCCESS
FAILURE
----------------- 583 ----------------
SUCCESS
FAILURE
----------------- 584 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 585 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 586 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 587 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 588 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 589 ----------------
SUCCESS
FAILURE
----------------- 590 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 591 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 592 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 593 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 594 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 595 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 596 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 597 ----------------
SUCCESS
FAILURE
----------------- 598 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 599 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 600 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 601 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 602 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 603 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 604 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 605 ----------------
SUCCESS
FAILURE
----------------- 606 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 607 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 608 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 609 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 610 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 611 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 612 ----------------
SUCCESS
FAILURE
----------------- 613 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 614 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 615 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 616 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 617 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 618 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 619 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 620 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 621 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 622 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 623 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 624 ----------------
SUCCESS
FAILURE
----------------- 625 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 626 ----------------
SUCCESS
FAILURE
----------------- 627 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 628 ----------------
SUCCESS
FAILURE
----------------- 629 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 630 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 631 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 632 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 633 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 634 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 635 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 636 ----------------
SUCCESS
FAILURE
----------------- 637 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 638 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 639 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 640 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 641 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 642 ----------------
SUCCESS
FAILURE
----------------- 643 ----------------
SUCCESS
FAILURE
----------------- 644 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 645 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 646 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 647 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 648 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 649 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 650 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 651 ----------------
SUCCESS
FAILURE
----------------- 652 ----------------
SUCCESS
FAILURE
----------------- 653 ----------------
SUCCESS
FAILURE
----------------- 654 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 655 ----------------
SUCCESS
FAILURE
----------------- 656 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 657 ----------------
SUCCESS
FAILURE
----------------- 658 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 659 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 660 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 661 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 662 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 663 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 664 ----------------
SUCCESS
FAILURE
----------------- 665 ----------------
SUCCESS
FAILURE
----------------- 666 ----------------
SUCCESS
FAILURE
----------------- 667 ----------------
SUCCESS
FAILURE
----------------- 668 ----------------
SUCCESS
FAILURE
----------------- 669 ----------------
SUCCESS
FAILURE
----------------- 670 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 671 ----------------
SUCCESS
FAILURE
----------------- 672 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 673 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 674 ----------------
SUCCESS
FAILURE
----------------- 675 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 676 ----------------
SUCCESS
FAILURE
----------------- 677 ----------------
SUCCESS
FAILURE
----------------- 678 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 679 ----------------
SUCCESS
FAILURE
----------------- 680 ----------------
SUCCESS
FAILURE
----------------- 681 ----------------
SUCCESS
FAILURE
----------------- 682 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 683 ----------------
SUCCESS
FAILURE
----------------- 684 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 685 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 686 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 687 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 688 ----------------
SUCCESS
FAILURE
----------------- 689 ----------------
SUCCESS
FAILURE
----------------- 690 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 691 ----------------
SUCCESS
FAILURE
----------------- 692 ----------------
SUCCESS
FAILURE
----------------- 693 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 694 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 695 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 696 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 697 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 698 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 699 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 700 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 701 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 702 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 703 ----------------
SUCCESS
FAILURE
----------------- 704 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 705 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 706 ----------------
SUCCESS
FAILURE
----------------- 707 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 708 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 709 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 710 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 711 ----------------
SUCCESS
FAILURE
----------------- 712 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 713 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 714 ----------------
SUCCESS
FAILURE
----------------- 715 ----------------
SUCCESS
FAILURE
----------------- 716 ----------------
SUCCESS
FAILURE
----------------- 717 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 718 ----------------
SUCCESS
FAILURE
----------------- 719 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 720 ----------------
SUCCESS
FAILURE
----------------- 721 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 722 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 723 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 724 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 725 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 726 ----------------
SUCCESS
FAILURE
----------------- 727 ----------------
SUCCESS
FAILURE
----------------- 728 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 729 ----------------
SUCCESS
FAILURE
----------------- 730 ----------------
SUCCESS
FAILURE
----------------- 731 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 732 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 733 ----------------
SUCCESS
FAILURE
----------------- 734 ----------------
SUCCESS
FAILURE
----------------- 735 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 736 ----------------
SUCCESS
FAILURE
----------------- 737 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 738 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 739 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 740 ----------------
SUCCESS
FAILURE
----------------- 741 ----------------
SUCCESS
FAILURE
----------------- 742 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 743 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 744 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 745 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 746 ----------------
SUCCESS
FAILURE
----------------- 747 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 748 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 749 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 750 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 751 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 752 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 753 ----------------
SUCCESS
FAILURE
----------------- 754 ----------------
SUCCESS
FAILURE
----------------- 755 ----------------
SUCCESS
FAILURE
----------------- 756 ----------------
SUCCESS
FAILURE
----------------- 757 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 758 ----------------
SUCCESS
FAILURE
----------------- 759 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 760 ----------------
SUCCESS
FAILURE
----------------- 761 ----------------
SUCCESS
FAILURE
----------------- 762 ----------------
SUCCESS
FAILURE
----------------- 763 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 764 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 765 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 766 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 767 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 768 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 769 ----------------
SUCCESS
FAILURE
----------------- 770 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 771 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 772 ----------------
SUCCESS
FAILURE
----------------- 773 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 774 ----------------
SUCCESS
FAILURE
----------------- 775 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 776 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 777 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 778 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 779 ----------------
SUCCESS
FAILURE
----------------- 780 ----------------
SUCCESS
FAILURE
----------------- 781 ----------------
SUCCESS
FAILURE
----------------- 782 ----------------
SUCCESS
FAILURE
----------------- 783 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 784 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 785 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 786 ----------------
SUCCESS
FAILURE
----------------- 787 ----------------
SUCCESS
FAILURE
----------------- 788 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 789 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 790 ----------------
SUCCESS
FAILURE
----------------- 791 ----------------
SUCCESS
FAILURE
----------------- 792 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 793 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 794 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 795 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 796 ----------------
SUCCESS
FAILURE
----------------- 797 ----------------
SUCCESS
FAILURE
----------------- 798 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 799 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 800 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 801 ----------------
SUCCESS
FAILURE
----------------- 802 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 803 ----------------
SUCCESS
FAILURE
----------------- 804 ----------------
SUCCESS
FAILURE
----------------- 805 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 806 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 807 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 808 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 809 ----------------
SUCCESS
FAILURE
----------------- 810 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 811 ----------------
SUCCESS
FAILURE
----------------- 812 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 813 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 814 ----------------
SUCCESS
FAILURE
----------------- 815 ----------------
SUCCESS
FAILURE
----------------- 816 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 817 ----------------
SUCCESS
FAILURE
----------------- 818 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 819 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 820 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 821 ----------------
SUCCESS
FAILURE
----------------- 822 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 823 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 824 ----------------
SUCCESS
FAILURE
----------------- 825 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 826 ----------------
SUCCESS
FAILURE
----------------- 827 ----------------
SUCCESS
FAILURE
----------------- 828 ----------------
SUCCESS
FAILURE
----------------- 829 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 830 ----------------
SUCCESS
FAILURE
----------------- 831 ----------------
SUCCESS
FAILURE
----------------- 832 ----------------
SUCCESS
FAILURE
----------------- 833 ----------------
SUCCESS
FAILURE
----------------- 834 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 835 ----------------
SUCCESS
FAILURE
----------------- 836 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 837 ----------------
SUCCESS
FAILURE
----------------- 838 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 839 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 840 ----------------
SUCCESS
FAILURE
----------------- 841 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 842 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 843 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 844 ----------------
SUCCESS
FAILURE
----------------- 845 ----------------
SUCCESS
FAILURE
----------------- 846 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 847 ----------------
SUCCESS
FAILURE
----------------- 848 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 849 ----------------
SUCCESS
FAILURE
----------------- 850 ----------------
SUCCESS
FAILURE
----------------- 851 ----------------
SUCCESS
SUCCESS
Test 2 FAILURE
FAILURE
----------------- 852 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 853 ----------------
SUCCESS
FAILURE
----------------- 854 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 855 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 856 ----------------
SUCCESS
FAILURE
----------------- 857 ----------------
SUCCESS
FAILURE
----------------- 858 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 859 ----------------
SUCCESS
FAILURE
----------------- 860 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 861 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 862 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 863 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 864 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 865 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 866 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 867 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 868 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 869 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 870 ----------------
SUCCESS
FAILURE
----------------- 871 ----------------
SUCCESS
FAILURE
----------------- 872 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 873 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 874 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 875 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 876 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 877 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 878 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 879 ----------------
SUCCESS
FAILURE
----------------- 880 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 881 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 882 ----------------
SUCCESS
FAILURE
----------------- 883 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 884 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 885 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 886 ----------------
SUCCESS
FAILURE
----------------- 887 ----------------
SUCCESS
FAILURE
----------------- 888 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 889 ----------------
SUCCESS
FAILURE
----------------- 890 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 891 ----------------
SUCCESS
FAILURE
----------------- 892 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 893 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 894 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 895 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 896 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 897 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 898 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 899 ----------------
SUCCESS
FAILURE
----------------- 900 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 901 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 902 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 903 ----------------
SUCCESS
FAILURE
----------------- 904 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 905 ----------------
SUCCESS
FAILURE
----------------- 906 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 907 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 908 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 909 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 910 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 911 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 912 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 913 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 914 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 915 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 916 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 917 ----------------
SUCCESS
FAILURE
----------------- 918 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 919 ----------------
SUCCESS
FAILURE
----------------- 920 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 921 ----------------
SUCCESS
FAILURE
----------------- 922 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 923 ----------------
SUCCESS
FAILURE
----------------- 924 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 925 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 926 ----------------
SUCCESS
FAILURE
----------------- 927 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 928 ----------------
SUCCESS
FAILURE
----------------- 929 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 930 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 931 ----------------
SUCCESS
FAILURE
----------------- 932 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 933 ----------------
SUCCESS
FAILURE
----------------- 934 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 935 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 936 ----------------
SUCCESS
FAILURE
----------------- 937 ----------------
SUCCESS
FAILURE
----------------- 938 ----------------
SUCCESS
FAILURE
----------------- 939 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 940 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 941 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 942 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 943 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 944 ----------------
SUCCESS
FAILURE
----------------- 945 ----------------
SUCCESS
FAILURE
----------------- 946 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 947 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 948 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 949 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 950 ----------------
SUCCESS
FAILURE
----------------- 951 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 952 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 953 ----------------
SUCCESS
FAILURE
----------------- 954 ----------------
SUCCESS
FAILURE
----------------- 955 ----------------
SUCCESS
FAILURE
----------------- 956 ----------------
SUCCESS
FAILURE
----------------- 957 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 958 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 959 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 960 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 961 ----------------
SUCCESS
FAILURE
----------------- 962 ----------------
SUCCESS
FAILURE
----------------- 963 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 964 ----------------
SUCCESS
FAILURE
----------------- 965 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 966 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 967 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 968 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 969 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 970 ----------------
SUCCESS
FAILURE
----------------- 971 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 972 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 973 ----------------
SUCCESS
FAILURE
----------------- 974 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 975 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 976 ----------------
SUCCESS
FAILURE
----------------- 977 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 978 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 979 ----------------
SUCCESS
FAILURE
----------------- 980 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 981 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 982 ----------------
SUCCESS
FAILURE
----------------- 983 ----------------
SUCCESS
FAILURE
----------------- 984 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 985 ----------------
SUCCESS
FAILURE
----------------- 986 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 987 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 988 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 989 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 990 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 991 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 992 ----------------
SUCCESS
FAILURE
----------------- 993 ----------------
SUCCESS
FAILURE
----------------- 994 ----------------
SUCCESS
SUCCESS
SUCCESS
FAILURE
----------------- 995 ----------------
SUCCESS
FAILURE
----------------- 996 ----------------
SUCCESS
FAILURE
----------------- 997 ----------------
SUCCESS
FAILURE
----------------- 998 ----------------
SUCCESS
SUCCESS
FAILURE
----------------- 999 ----------------
SUCCESS
SUCCESS
FAILURE
File 'dominion.c'
Lines executed:43.74% of 567
Branches executed:46.76% of 417
Taken at least once:32.85% of 417
Calls executed:40.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:23
        -:    0:Programs:12
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 249586 returned 100% blocks executed 100%
   249586:    8:int compare(const void* a, const void* b) {
   249586:    8-block  0
   249586:    9:  if (*(int*)a > *(int*)b)
   249586:    9-block  0
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
    12788:   10:    return 1;
    12788:   10-block  0
   236798:   11:  if (*(int*)a < *(int*)b)
   236798:   11-block  0
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
    48437:   12:    return -1;
    48437:   12-block  0
   188361:   13:  return 0;
   188361:   13-block  0
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    $$$$$:   16-block  0
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
    $$$$$:   18-block  0
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:   21-block  0
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
        -:   35:}
        -:   36:
function initializeGame called 4053 returned 100% blocks executed 94%
     4053:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
     4053:   37-block  0
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     4053:   44:  SelectStream(1);
     4053:   44-block  0
call    0 returned 100%
     4053:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     4053:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     4053:   48-block  0
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
    $$$$$:   50-block  0
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     4053:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    44583:   57:  for (i = 0; i < 10; i++)
     4053:   57-block  0
    40530:   57-block  1
    44583:   57-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   445830:   59:      for (j = 0; j < 10; j++)
    40530:   59-block  0
   405300:   59-block  1
   445830:   59-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   405300:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
   405300:   61-block  0
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
   364770:   61-block  1
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
    $$$$$:   63-block  0
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     4053:   73:  if (numPlayers == 2)
     4053:   73-block  0
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        -:   74:    {
     1409:   75:      state->supplyCount[curse] = 10;
     1409:   75-block  0
        -:   76:    }
     2644:   77:  else if (numPlayers == 3)
     2644:   77-block  0
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
        -:   78:    {
     1304:   79:      state->supplyCount[curse] = 20;
     1304:   79-block  0
        -:   80:    }
        -:   81:  else
        -:   82:    {
     1340:   83:      state->supplyCount[curse] = 30;
     1340:   83-block  0
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     4053:   87:  if (numPlayers == 2)
     4053:   87-block  0
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
        -:   88:    {
     1409:   89:      state->supplyCount[estate] = 8;
     1409:   90:      state->supplyCount[duchy] = 8;
     1409:   91:      state->supplyCount[province] = 8;
     1409:   91-block  0
        -:   92:    }
        -:   93:  else
        -:   94:    {
     2644:   95:      state->supplyCount[estate] = 12;
     2644:   96:      state->supplyCount[duchy] = 12;
     2644:   97:      state->supplyCount[province] = 12;
     2644:   97-block  0
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     4053:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     4053:  102:  state->supplyCount[silver] = 40;
     4053:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    85113:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
     4053:  106-block  0
    81060:  106-block  1
    85113:  106-block  2
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   668745:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
    81060:  108-block  0
   587685:  108-block  1
   668745:  108-block  2
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   628215:  110:	  if (kingdomCards[j] == i)
   628215:  110-block  0
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    40530:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
    40530:  113-block  0
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    40496:  113-block  1
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        -:  114:		{
      136:  115:		  if (numPlayers == 2){ 
       68:  115-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       68:  115-block  1
       68:  116:		    state->supplyCount[i] = 8; 
       68:  116-block  0
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  118-block  0
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    40462:  122:		  state->supplyCount[i] = 10;
    40462:  122-block  0
        -:  123:		}
    40530:  124:	      break;
    40530:  124-block  0
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   587685:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    16143:  138:  for (i = 0; i < numPlayers; i++)
     4053:  138-block  0
    12090:  138-block  1
    16143:  138-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  139:    {
    12090:  140:      state->deckCount[i] = 0;
    48360:  141:      for (j = 0; j < 3; j++)
    12090:  141-block  0
    36270:  141-block  1
    48360:  141-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
    36270:  143:	  state->deck[i][j] = estate;
    36270:  144:	  state->deckCount[i]++;
        -:  145:	}
    96720:  146:      for (j = 3; j < 10; j++)
    12090:  146-block  0
    84630:  146-block  1
    96720:  146-block  2
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    84630:  148:	  state->deck[i][j] = copper;	  state->deckCount[i]++;		
        -:  149:	}
        -:  150:    }
        -:  151:
        -:  152:  //shuffle player decks
    16143:  153:  for (i = 0; i < numPlayers; i++)
     4053:  153-block  0
    12090:  153-block  1
    16143:  153-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  154:    {
    12090:  155:      if ( shuffle(i, state) < 0 )
    12090:  155-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  156:	{
    #####:  157:	  return -1;
    $$$$$:  157-block  0
        -:  158:	}
        -:  159:    }
        -:  160:
        -:  161:  //draw player hands
    16143:  162:  for (i = 0; i < numPlayers; i++)
     4053:  162-block  0
    12090:  162-block  1
    16143:  162-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  163:    {  
        -:  164:      //initialize hand size to zero
    12090:  165:      state->handCount[i] = 0;
    12090:  166:      state->discardCount[i] = 0;
        -:  167:      //draw 5 cards
        -:  168:      // for (j = 0; j < 5; j++)
        -:  169:      //	{
        -:  170:      //	  drawCard(i, state);
        -:  171:      //	}
        -:  172:    }
        -:  173:  
        -:  174:  //set embargo tokens to 0 for all supply piles
   113484:  175:  for (i = 0; i <= treasure_map; i++)
     4053:  175-block  0
   109431:  175-block  1
   113484:  175-block  2
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  176:    {
   109431:  177:      state->embargoTokens[i] = 0;
        -:  178:    }
        -:  179:
        -:  180:  //initialize first player's turn
     4053:  181:  state->outpostPlayed = 0;
     4053:  182:  state->phase = 0;
     4053:  183:  state->numActions = 1;
     4053:  184:  state->numBuys = 1;
     4053:  185:  state->playedCardCount = 0;
     4053:  186:  state->whoseTurn = 0;
     4053:  187:  state->handCount[state->whoseTurn] = 0;
        -:  188:  //int it; move to top
        -:  189:
        -:  190:  //Moved draw cards to here, only drawing at the start of a turn
    24318:  191:  for (it = 0; it < 5; it++){
     4053:  191-block  0
    24318:  191-block  1
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    20265:  192:    drawCard(state->whoseTurn, state);
    20265:  192-block  0
call    0 returned 100%
        -:  193:  }
        -:  194:
     4053:  195:  updateCoins(state->whoseTurn, state, 0);
     4053:  195-block  0
call    0 returned 100%
        -:  196:
     4053:  197:  return 0;
        -:  198:}
        -:  199:
function shuffle called 16931 returned 100% blocks executed 100%
    16931:  200:int shuffle(int player, struct gameState *state) {
    16931:  200-block  0
        -:  201: 
        -:  202:
        -:  203:  int newDeck[MAX_DECK];
    16931:  204:  int newDeckPos = 0;
        -:  205:  int card;
        -:  206:  int i;
        -:  207:
    16931:  208:  if (state->deckCount[player] < 1)
    16931:  208-block  0
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
     4782:  209:    return -1;
     4782:  209-block  0
    12149:  210:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
    12149:  210-block  0
call    0 returned 100%
        -:  211:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  212:
   147045:  213:  while (state->deckCount[player] > 0) {
   147045:  213-block  0
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
   134896:  214:    card = floor(Random() * state->deckCount[player]);
   134896:  214-block  0
call    0 returned 100%
   134896:  215:    newDeck[newDeckPos] = state->deck[player][card];
   134896:  216:    newDeckPos++;
  1602073:  217:    for (i = card; i < state->deckCount[player]-1; i++) {
  1467177:  217-block  0
  1602073:  217-block  1
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
  1467177:  218:      state->deck[player][i] = state->deck[player][i+1];
        -:  219:    }
   134896:  220:    state->deckCount[player]--;
   134896:  220-block  0
        -:  221:  }
   147045:  222:  for (i = 0; i < newDeckPos; i++) {
    12149:  222-block  0
   134896:  222-block  1
   147045:  222-block  2
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
   134896:  223:    state->deck[player][i] = newDeck[i];
   134896:  224:    state->deckCount[player]++;
        -:  225:  }
        -:  226:
    16931:  227:  return 0;
    12149:  227-block  0
    16931:  227-block  1
        -:  228:}
        -:  229:
function playCard called 0 returned 0% blocks executed 0%
    #####:  230:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
    $$$$$:  230-block  0
        -:  231:{	
        -:  232:  int card;
    #####:  233:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  234:
        -:  235:  //check if it is the right phase
    #####:  236:  if (state->phase != 0)
    $$$$$:  236-block  0
branch  0 never executed
branch  1 never executed
        -:  237:    {
    #####:  238:      return -1;
    $$$$$:  238-block  0
        -:  239:    }
        -:  240:	
        -:  241:  //check if player has enough actions
    #####:  242:  if ( state->numActions < 1 )
    $$$$$:  242-block  0
branch  0 never executed
branch  1 never executed
        -:  243:    {
    #####:  244:      return -1;
    $$$$$:  244-block  0
        -:  245:    }
        -:  246:	
        -:  247:  //get card played
    #####:  248:  card = handCard(handPos, state);
    $$$$$:  248-block  0
call    0 never executed
        -:  249:	
        -:  250:  //check if selected card is an action
    #####:  251:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  251-block  0
branch  2 never executed
branch  3 never executed
        -:  252:    {
    #####:  253:      return -1;
    $$$$$:  253-block  0
        -:  254:    }
        -:  255:	
        -:  256:  //play card
    #####:  257:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  257-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  258:    {
    #####:  259:      return -1;
    $$$$$:  259-block  0
        -:  260:    }
        -:  261:	
        -:  262:  //reduce number of actions
    #####:  263:  state->numActions--;
        -:  264:
        -:  265:  //update coins (Treasure cards may be added with card draws)
    #####:  266:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  266-block  0
call    0 never executed
        -:  267:	
    #####:  268:  return 0;
    $$$$$:  268-block  0
        -:  269:}
        -:  270:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  271:int buyCard(int supplyPos, struct gameState *state) {
    $$$$$:  271-block  0
    $$$$$:  271-block  1
        -:  272:  int who;
        -:  273:  if (DEBUG){
        -:  274:    printf("Entering buyCard...\n");
        -:  275:  }
        -:  276:
        -:  277:  // I don't know what to do about the phase thing.
        -:  278:
    #####:  279:  who = state->whoseTurn;
        -:  280:
    #####:  281:  if (state->numBuys < 1){
    $$$$$:  281-block  0
branch  0 never executed
branch  1 never executed
        -:  282:    if (DEBUG)
        -:  283:      printf("You do not have any buys left\n");
    #####:  284:    return -1;
    $$$$$:  284-block  0
    #####:  285:  } else if (supplyCount(supplyPos, state) <1){
    $$$$$:  285-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  286:    if (DEBUG)
        -:  287:      printf("There are not any of that type of card left\n");
    #####:  288:    return -1;
    $$$$$:  288-block  0
    #####:  289:  } else if (state->coins < getCost(supplyPos)){
    $$$$$:  289-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  290:    if (DEBUG) 
        -:  291:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  292:    return -1;
    $$$$$:  292-block  0
        -:  293:  } else {
    #####:  294:    state->phase=1;
        -:  295:    //state->supplyCount[supplyPos]--;
    #####:  296:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
    $$$$$:  296-block  0
call    0 never executed
        -:  297:  
    #####:  298:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  299:    state->numBuys--;
        -:  300:    if (DEBUG)
        -:  301:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  302:  }
        -:  303:
        -:  304:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  305:  //state->discardCount[who]++;
        -:  306:    
    #####:  307:  return 0;
    $$$$$:  307-block  0
        -:  308:}
        -:  309:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  310:int numHandCards(struct gameState *state) {
    $$$$$:  310-block  0
    #####:  311:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  311-block  0
call    0 never executed
        -:  312:}
        -:  313:
function handCard called 0 returned 0% blocks executed 0%
    #####:  314:int handCard(int handPos, struct gameState *state) {
    $$$$$:  314-block  0
    #####:  315:  int currentPlayer = whoseTurn(state);
    $$$$$:  315-block  0
call    0 never executed
    #####:  316:  return state->hand[currentPlayer][handPos];
        -:  317:}
        -:  318:
function supplyCount called 6029 returned 100% blocks executed 100%
     6029:  319:int supplyCount(int card, struct gameState *state) {
     6029:  319-block  0
     6029:  320:  return state->supplyCount[card];
     6029:  320-block  0
        -:  321:}
        -:  322:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  323:int fullDeckCount(int player, int card, struct gameState *state) {
    $$$$$:  323-block  0
        -:  324:  int i;
    #####:  325:  int count = 0;
        -:  326:
    #####:  327:  for (i = 0; i < state->deckCount[player]; i++)
    $$$$$:  327-block  0
    $$$$$:  327-block  1
    $$$$$:  327-block  2
branch  0 never executed
branch  1 never executed
        -:  328:    {
    #####:  329:      if (state->deck[player][i] == card) count++;
    $$$$$:  329-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  329-block  1
        -:  330:    }
        -:  331:
    #####:  332:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  332-block  0
    $$$$$:  332-block  1
    $$$$$:  332-block  2
branch  0 never executed
branch  1 never executed
        -:  333:    {
    #####:  334:      if (state->hand[player][i] == card) count++;
    $$$$$:  334-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  334-block  1
        -:  335:    }
        -:  336:
    #####:  337:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  337-block  0
    $$$$$:  337-block  1
    $$$$$:  337-block  2
branch  0 never executed
branch  1 never executed
        -:  338:    {
    #####:  339:      if (state->discard[player][i] == card) count++;
    $$$$$:  339-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  339-block  1
        -:  340:    }
        -:  341:
    #####:  342:  return count;
    $$$$$:  342-block  0
        -:  343:}
        -:  344:
function whoseTurn called 8040 returned 100% blocks executed 100%
     8040:  345:int whoseTurn(struct gameState *state) {
     8040:  345-block  0
     8040:  346:  return state->whoseTurn;
     8040:  346-block  0
        -:  347:}
        -:  348:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  349:int endTurn(struct gameState *state) {
    $$$$$:  349-block  0
        -:  350:  int k;
        -:  351:  int i;
    #####:  352:  int currentPlayer = whoseTurn(state);
    $$$$$:  352-block  0
call    0 never executed
        -:  353:  
        -:  354:  //Discard hand
    #####:  355:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  355-block  0
    $$$$$:  355-block  1
branch  0 never executed
branch  1 never executed
    #####:  356:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  357:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  358:  }
    #####:  359:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  360:    
        -:  361:  //Code for determining the player
    #####:  362:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  362-block  0
branch  0 never executed
branch  1 never executed
    #####:  363:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  363-block  0
        -:  364:  }
        -:  365:  else{
    #####:  366:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  366-block  0
        -:  367:  }
        -:  368:
    #####:  369:  state->outpostPlayed = 0;
    #####:  370:  state->phase = 0;
    #####:  371:  state->numActions = 1;
    #####:  372:  state->coins = 0;
    #####:  373:  state->numBuys = 1;
    #####:  374:  state->playedCardCount = 0;
    #####:  375:  state->handCount[state->whoseTurn] = 0;
        -:  376:
        -:  377:  //int k; move to top
        -:  378:  //Next player draws hand
    #####:  379:  for (k = 0; k < 5; k++){
    $$$$$:  379-block  0
    $$$$$:  379-block  1
branch  0 never executed
branch  1 never executed
    #####:  380:    drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  380-block  0
call    0 never executed
        -:  381:  }
        -:  382:
        -:  383:  //Update money
    #####:  384:  updateCoins(state->whoseTurn, state , 0);
    $$$$$:  384-block  0
call    0 never executed
        -:  385:
    #####:  386:  return 0;
        -:  387:}
        -:  388:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  389:int isGameOver(struct gameState *state) {
    $$$$$:  389-block  0
        -:  390:  int i;
        -:  391:  int j;
        -:  392:	
        -:  393:  //if stack of Province cards is empty, the game ends
    #####:  394:  if (state->supplyCount[province] == 0)
    $$$$$:  394-block  0
branch  0 never executed
branch  1 never executed
        -:  395:    {
    #####:  396:      return 1;
    $$$$$:  396-block  0
        -:  397:    }
        -:  398:
        -:  399:  //if three supply pile are at 0, the game ends
    #####:  400:  j = 0;
    #####:  401:  for (i = 0; i < 25; i++)
    $$$$$:  401-block  0
    $$$$$:  401-block  1
    $$$$$:  401-block  2
branch  0 never executed
branch  1 never executed
        -:  402:    {
    #####:  403:      if (state->supplyCount[i] == 0)
    $$$$$:  403-block  0
branch  0 never executed
branch  1 never executed
        -:  404:	{
    #####:  405:	  j++;
    $$$$$:  405-block  0
        -:  406:	}
        -:  407:    }
    #####:  408:  if ( j >= 3)
    $$$$$:  408-block  0
branch  0 never executed
branch  1 never executed
        -:  409:    {
    #####:  410:      return 1;
    $$$$$:  410-block  0
        -:  411:    }
        -:  412:
    #####:  413:  return 0;
    $$$$$:  413-block  0
        -:  414:}
        -:  415:
function scoreFor called 10 returned 100% blocks executed 38%
       10:  416:int scoreFor (int player, struct gameState *state) {
       10:  416-block  0
        -:  417:
        -:  418:  int i;
       10:  419:  int score = 0;
        -:  420:  //score from hand
       60:  421:  for (i = 0; i < state->handCount[player]; i++)
       10:  421-block  0
       50:  421-block  1
       60:  421-block  2
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  422:    {
       50:  423:      if (state->hand[player][i] == curse) { score = score - 1; };
       50:  423-block  0
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
       10:  423-block  1
       50:  424:      if (state->hand[player][i] == estate) { score = score + 1; };
       50:  424-block  0
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        2:  424-block  1
       50:  425:      if (state->hand[player][i] == duchy) { score = score + 3; };
       50:  425-block  0
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        2:  425-block  1
       50:  426:      if (state->hand[player][i] == province) { score = score + 6; };
       50:  426-block  0
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        2:  426-block  1
       50:  427:      if (state->hand[player][i] == great_hall) { score = score + 1; };
       50:  427-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    $$$$$:  427-block  1
       50:  428:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       50:  428-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    $$$$$:  428-block  1
call    2 never executed
        -:  429:    }
        -:  430:
        -:  431:  //score from discard
       10:  432:  for (i = 0; i < state->discardCount[player]; i++)
       10:  432-block  0
    $$$$$:  432-block  1
       10:  432-block  2
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  433:    {
    #####:  434:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  434-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  434-block  1
    #####:  435:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
    #####:  436:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
    #####:  437:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
    #####:  438:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
    #####:  439:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  439-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  439-block  1
call    2 never executed
        -:  440:    }
        -:  441:
        -:  442:  //score from deck
       10:  443:  for (i = 0; i < state->discardCount[player]; i++)
       10:  443-block  0
    $$$$$:  443-block  1
       10:  443-block  2
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  444:    {
    #####:  445:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  445-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  445-block  1
    #####:  446:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  446-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  446-block  1
    #####:  447:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  447-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  447-block  1
    #####:  448:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  448-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  448-block  1
    #####:  449:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  449-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  449-block  1
    #####:  450:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  450-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  450-block  1
call    2 never executed
        -:  451:    }
        -:  452:
       10:  453:  return score;
       10:  453-block  0
        -:  454:}
        -:  455:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  456:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  456-block  0
        -:  457:  int i;	
        -:  458:  int j;
        -:  459:  int highScore;
        -:  460:  int currentPlayer;
        -:  461:
        -:  462:  //get score for each player
    #####:  463:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  463-block  0
    $$$$$:  463-block  1
    $$$$$:  463-block  2
branch  0 never executed
branch  1 never executed
        -:  464:    {
        -:  465:      //set unused player scores to -9999
    #####:  466:      if (i >= state->numPlayers)
    $$$$$:  466-block  0
branch  0 never executed
branch  1 never executed
        -:  467:	{
    #####:  468:	  players[i] = -9999;
    $$$$$:  468-block  0
        -:  469:	}
        -:  470:      else
        -:  471:	{
    #####:  472:	  players[i] = scoreFor (i, state);
    $$$$$:  472-block  0
call    0 never executed
        -:  473:	}
        -:  474:    }
        -:  475:
        -:  476:  //find highest score
    #####:  477:  j = 0;
    #####:  478:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  478-block  0
    $$$$$:  478-block  1
    $$$$$:  478-block  2
branch  0 never executed
branch  1 never executed
        -:  479:    {
    #####:  480:      if (players[i] > players[j])
    $$$$$:  480-block  0
branch  0 never executed
branch  1 never executed
        -:  481:	{
    #####:  482:	  j = i;
    $$$$$:  482-block  0
        -:  483:	}
        -:  484:    }
    #####:  485:  highScore = players[j];
        -:  486:
        -:  487:  //add 1 to players who had less turns
    #####:  488:  currentPlayer = whoseTurn(state);
    $$$$$:  488-block  0
call    0 never executed
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  489-block  0
    $$$$$:  489-block  1
branch  0 never executed
branch  1 never executed
        -:  490:    {
    #####:  491:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  491-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  491-block  1
branch  2 never executed
branch  3 never executed
        -:  492:	{
    #####:  493:	  players[i]++;
    $$$$$:  493-block  0
        -:  494:	}
        -:  495:    }
        -:  496:
        -:  497:  //find new highest score
    #####:  498:  j = 0;
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  499-block  0
    $$$$$:  499-block  1
    $$$$$:  499-block  2
branch  0 never executed
branch  1 never executed
        -:  500:    {
    #####:  501:      if ( players[i] > players[j] )
    $$$$$:  501-block  0
branch  0 never executed
branch  1 never executed
        -:  502:	{
    #####:  503:	  j = i;
    $$$$$:  503-block  0
        -:  504:	}
        -:  505:    }
    #####:  506:  highScore = players[j];
        -:  507:
        -:  508:  //set winners in array to 1 and rest to 0
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  509-block  0
    $$$$$:  509-block  1
    $$$$$:  509-block  2
branch  0 never executed
branch  1 never executed
        -:  510:    {
    #####:  511:      if ( players[i] == highScore )
    $$$$$:  511-block  0
branch  0 never executed
branch  1 never executed
        -:  512:	{
    #####:  513:	  players[i] = 1;
    $$$$$:  513-block  0
        -:  514:	}
        -:  515:      else
        -:  516:	{
    #####:  517:	  players[i] = 0;
    $$$$$:  517-block  0
        -:  518:	}
        -:  519:    }
        -:  520:
    #####:  521:  return 0;
    $$$$$:  521-block  0
        -:  522:}
        -:  523:
function drawCard called 529846 returned 100% blocks executed 100%
   529846:  524:int drawCard(int player, struct gameState *state)
   529846:  524-block  0
        -:  525:{	int count;
        -:  526:  int deckCounter;
   529846:  527:  if (state->deckCount[player] <= 0){//Deck is empty
   529846:  527-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  528:    
        -:  529:    //Step 1 Shuffle the discard pile back into a deck
        -:  530:    int i;
        -:  531:    //Move discard to deck
    16451:  532:    for (i = 0; i < state->discardCount[player];i++){
     2455:  532-block  0
    13996:  532-block  1
    16451:  532-block  2
branch  0 taken 85%
branch  1 taken 15% (fallthrough)
    13996:  533:      state->deck[player][i] = state->discard[player][i];
    13996:  534:      state->discard[player][i] = -1;
        -:  535:    }
        -:  536:
     2455:  537:    state->deckCount[player] = state->discardCount[player];
     2455:  538:    state->discardCount[player] = 0;//Reset discard
        -:  539:
        -:  540:    //Shufffle the deck
     2455:  541:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
     2455:  541-block  0
call    0 returned 100%
        -:  542:   
        -:  543:    if (DEBUG){//Debug statements
        -:  544:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  545:    }
        -:  546:    
     2455:  547:    state->discardCount[player] = 0;
        -:  548:
        -:  549:    //Step 2 Draw Card
     2455:  550:    count = state->handCount[player];//Get current player's hand count
        -:  551:    
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Current hand count: %d\n", count);
        -:  554:    }
        -:  555:    
     2455:  556:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  557:
     2455:  558:    if (deckCounter == 0)
     2455:  558-block  0
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
     2396:  559:      return -1;
     2396:  559-block  0
        -:  560:
       59:  561:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       59:  562:    state->deckCount[player]--;
       59:  563:    state->handCount[player]++;//Increment hand count
       59:  563-block  0
        -:  564:  }
        -:  565:
        -:  566:  else{
   527391:  567:    int count = state->handCount[player];//Get current hand count for player
   527391:  567-block  0
        -:  568:    int deckCounter;
        -:  569:    if (DEBUG){//Debug statements
        -:  570:      printf("Current hand count: %d\n", count);
        -:  571:    }
        -:  572:
   527391:  573:    deckCounter = state->deckCount[player];//Create holder for the deck count
   527391:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   527391:  575:    state->deckCount[player]--;
   527391:  576:    state->handCount[player]++;//Increment hand count
   527391:  576-block  0
        -:  577:  }
        -:  578:
   527450:  579:  return 0;
   527450:  579-block  0
        -:  580:}
        -:  581:
function getCost called 6 returned 100% blocks executed 13%
        6:  582:int getCost(int cardNumber)
        6:  582-block  0
        -:  583:{
        6:  584:  switch( cardNumber ) 
        6:  584-block  0
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 50%
branch  5 taken 0%
branch  6 taken 50%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  585:    {
        -:  586:    case curse:
    #####:  587:      return 0;
    $$$$$:  587-block  0
        -:  588:    case estate:
    #####:  589:      return 2;
    $$$$$:  589-block  0
        -:  590:    case duchy:
    #####:  591:      return 5;
    $$$$$:  591-block  0
        -:  592:    case province:
    #####:  593:      return 8;
    $$$$$:  593-block  0
        -:  594:    case copper:
        3:  595:      return 0;
        3:  595-block  0
        -:  596:    case silver:
    #####:  597:      return 3;
    $$$$$:  597-block  0
        -:  598:    case gold:
        3:  599:      return 6;
        3:  599-block  0
        -:  600:    case adventurer:
    #####:  601:      return 6;
    $$$$$:  601-block  0
        -:  602:    case council_room:
    #####:  603:      return 5;
    $$$$$:  603-block  0
        -:  604:    case feast:
    #####:  605:      return 4;
    $$$$$:  605-block  0
        -:  606:    case gardens:
    #####:  607:      return 4;
    $$$$$:  607-block  0
        -:  608:    case mine:
    #####:  609:      return 5;
    $$$$$:  609-block  0
        -:  610:    case remodel:
    #####:  611:      return 4;
    $$$$$:  611-block  0
        -:  612:    case smithy:
    #####:  613:      return 4;
    $$$$$:  613-block  0
        -:  614:    case village:
    #####:  615:      return 3;
    $$$$$:  615-block  0
        -:  616:    case baron:
    #####:  617:      return 4;
    $$$$$:  617-block  0
        -:  618:    case great_hall:
    #####:  619:      return 3;
    $$$$$:  619-block  0
        -:  620:    case minion:
    #####:  621:      return 5;
    $$$$$:  621-block  0
        -:  622:    case steward:
    #####:  623:      return 3;
    $$$$$:  623-block  0
        -:  624:    case tribute:
    #####:  625:      return 5;
    $$$$$:  625-block  0
        -:  626:    case ambassador:
    #####:  627:      return 3;
    $$$$$:  627-block  0
        -:  628:    case cutpurse:
    #####:  629:      return 4;
    $$$$$:  629-block  0
        -:  630:    case embargo: 
    #####:  631:      return 2;
    $$$$$:  631-block  0
        -:  632:    case outpost:
    #####:  633:      return 5;
    $$$$$:  633-block  0
        -:  634:    case salvager:
    #####:  635:      return 4;
    $$$$$:  635-block  0
        -:  636:    case sea_hag:
    #####:  637:      return 4;
    $$$$$:  637-block  0
        -:  638:    case treasure_map:
    #####:  639:      return 4;
    $$$$$:  639-block  0
        -:  640:    }
        -:  641:	
    #####:  642:  return -1;
    $$$$$:  642-block  0
        -:  643:}
        -:  644:
        -:  645:/****************************************************************************************************
        -:  646:* Start of card functions
        -:  647:*****************************************************************************************************/
        -:  648:
function playSmithy called 5 returned 100% blocks executed 100%
        5:  649:int playSmithy(struct gameState *state, int handPos) {
        5:  649-block  0
        -:  650:	//+3 Cards
        5:  651:	int currentPlayer = whoseTurn(state);
        5:  651-block  0
call    0 returned 100%
        -:  652:	int i;
       20:  653:    for (i = 0; i < 3; i++)
       20:  653-block  0
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  654:	{
       15:  655:		drawCard(currentPlayer, state);
       15:  655-block  0
call    0 returned 100%
        -:  656:	}
        -:  657:			
        -:  658:	//discard card from hand
        5:  659:	discardCard(handPos, currentPlayer, state, 1);
        5:  659-block  0
call    0 returned 100%
        5:  660:	return 0;
        -:  661:}
        -:  662:
function playAdventurer called 2006 returned 100% blocks executed 100%
     2006:  663:int playAdventurer(struct gameState *state) {
     2006:  663-block  0
     2006:  664:	int currentPlayer = whoseTurn(state);
     2006:  664-block  0
call    0 returned 100%
     2006:  665:	int drawntreasure =0;
        -:  666:	int cardDrawn;
        -:  667:	int temphand[MAX_HAND]; 
     2006:  668:	int z = 0;
        -:  669:
   497539:  670:	while(drawntreasure<2){
   497539:  670-block  0
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   495533:  671:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
   495533:  671-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
     2386:  672:		  shuffle(currentPlayer, state);
     2386:  672-block  0
call    0 returned 100%
        -:  673:		}
   495533:  674:		drawCard(currentPlayer, state);
   495533:  674-block  0
call    0 returned 100%
   495533:  675:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
   495533:  676:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
   491539:  676-block  0
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
   491528:  676-block  1
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
     4012:  677:		  drawntreasure++;
     4012:  677-block  0
        -:  678:    }
        -:  679:		else{  
   491521:  680:		  temphand[z]=cardDrawn;
   491521:  681:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   491521:  682:      z++;
   491521:  682-block  0
        -:  683:    }
        -:  684:  }
   488507:  685:  while(z-1>=0){
     2006:  685-block  0
   488507:  685-block  1
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   486501:  686:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
   486501:  687:    z=z-1;
   486501:  687-block  0
        -:  688:  }
     2006:  689:  return 0;
     2006:  689-block  0
        -:  690:}
        -:  691:
function playMine called 0 returned 0% blocks executed 0%
    #####:  692:int playMine(struct gameState *state, int choice1, int choice2, int handPos) {
    $$$$$:  692-block  0
    #####:  693:	int currentPlayer = whoseTurn(state);
    $$$$$:  693-block  0
call    0 never executed
        -:  694:	int i, j;
    #####:  695:	int z = 0;
    #####:  696:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  697:
    #####:  698:	if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
    $$$$$:  698-block  0
branch  2 never executed
branch  3 never executed
        -:  699:	{
    #####:  700:	  return -1;
    $$$$$:  700-block  0
        -:  701:	}
        -:  702:
    #####:  703:	if (choice2 > z || choice2 < curse)
    $$$$$:  703-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  703-block  1
branch  2 never executed
branch  3 never executed
        -:  704:	{
    #####:  705:		return -1;
    $$$$$:  705-block  0
        -:  706:	}
        -:  707:
    #####:  708:	if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  708-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  709:	{
    #####:  710:		return -1;
    $$$$$:  710-block  0
        -:  711:	}
        -:  712:
    #####:  713:	gainCard(choice1, state, 2, currentPlayer);
    $$$$$:  713-block  0
call    0 never executed
        -:  714:
        -:  715:	//discard card from hand
    #####:  716:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  717:
        -:  718:	//discard trashed card
    #####:  719:	for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  719-block  0
    $$$$$:  719-block  1
branch  0 never executed
branch  1 never executed
        -:  720:	{
    #####:  721:		if (state->hand[currentPlayer][i] == j)
    $$$$$:  721-block  0
branch  0 never executed
branch  1 never executed
        -:  722:		{
    #####:  723:			discardCard(i, currentPlayer, state, 0);			
    $$$$$:  723-block  0
call    0 never executed
    #####:  724:			break;
        -:  725:		}
        -:  726:	}
        -:  727:		
    #####:  728:	return 0;
    $$$$$:  728-block  0
        -:  729:}
        -:  730:
function playVillage called 2007 returned 100% blocks executed 100%
     2007:  731:int playVillage(struct gameState *state, int handPos) {
     2007:  731-block  0
     2007:  732:	int currentPlayer = whoseTurn(state);
     2007:  732-block  0
call    0 returned 100%
        -:  733:
        -:  734:	//+1 Card
     2007:  735:	drawCard(currentPlayer, state);
call    0 returned 100%
        -:  736:
        -:  737:	//+2 Actions
     2007:  738:	state->numActions = state->numActions + 2;
        -:  739:
        -:  740:	//discard played card from hand
     2007:  741:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     2007:  742:	return 0;
        -:  743:}
        -:  744:
function playRemodel called 3 returned 100% blocks executed 87%
        3:  745:int playRemodel(struct gameState *state, int choice1, int choice2, int handPos) {
        3:  745-block  0
        -:  746:	int i, j;
        3:  747:	int currentPlayer = whoseTurn(state);
        3:  747-block  0
call    0 returned 100%
        -:  748: 
        -:  749:
        3:  750:	j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  751:
        3:  752:	if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  753:	{
    #####:  754:		return -1;
    $$$$$:  754-block  0
        -:  755:	}
        -:  756:
        3:  757:	gainCard(choice2, state, 0, currentPlayer);
        3:  757-block  0
call    0 returned 100%
        -:  758:
        -:  759:	//discard card from hand
        3:  760:	discardCard(handPos+1, currentPlayer, state, 0);
call    0 returned 100%
        -:  761:
        -:  762:	//discard trashed card
        3:  763:	for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  763-block  0
        3:  763-block  1
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -:  764:		{
        3:  765:		if (state->hand[currentPlayer][i] == j)
        3:  765-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  766:		{
        3:  767:			discardCard(i+1, currentPlayer, state, 0);			
        3:  767-block  0
call    0 returned 100%
        3:  768:			break;
        -:  769:		}
        -:  770:	}
        -:  771:
        3:  772:	return 0;
        3:  772-block  0
        -:  773:}
        -:  774:
function cardEffect called 4019 returned 100% blocks executed 21%
     4019:  775:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
     4019:  775-block  0
        -:  776:{
        -:  777:  int i;
        -:  778:  int j;
        -:  779:  int k;
        -:  780:  int x;
        -:  781:  int index;
     4019:  782:  int currentPlayer = whoseTurn(state);
     4019:  782-block  0
call    0 returned 100%
     4019:  783:  int nextPlayer = currentPlayer + 1;
        -:  784:
     4019:  785:  int tributeRevealedCards[2] = {-1, -1};
        -:  786:  int temphand[MAX_HAND];// moved above the if statement
     4019:  787:  int drawntreasure=0;
        -:  788:  int cardDrawn;
     4019:  789:  int z = 0;// this is the counter for the temp hand
     4019:  790:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 35% (fallthrough)
branch  1 taken 65%
     1424:  791:    nextPlayer = 0;
     1424:  791-block  0
        -:  792:  }
        -:  793:  
        -:  794:	
        -:  795:  //uses switch to select card and perform actions
     4019:  796:  switch( card ) 
     4019:  796-block  0
branch  0 taken 50%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 1%
branch  6 taken 1%
branch  7 taken 50%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 1%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  797:    {
        -:  798:    case adventurer:
     2006:  799:      playAdventurer(state);
     2006:  799-block  0
call    0 returned 100%
        -:  800:			
        -:  801:    case council_room:
        -:  802:      //+4 Cards
    10030:  803:      for (i = 0; i < 4; i++)
     2006:  803-block  0
    10030:  803-block  1
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  804:	{
     8024:  805:	  drawCard(currentPlayer, state);
     8024:  805-block  0
call    0 returned 100%
        -:  806:	}
        -:  807:			
        -:  808:      //+1 Buy
     2006:  809:      state->numBuys++;
        -:  810:			
        -:  811:      //Each other player draws a card
     8010:  812:      for (i = 0; i < state->numPlayers; i++)
     2006:  812-block  0
     6004:  812-block  1
     8010:  812-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  813:	{
     6004:  814:	  if ( i != currentPlayer )
     6004:  814-block  0
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  815:	    {
     3998:  816:	      drawCard(i, state);
     3998:  816-block  0
call    0 returned 100%
        -:  817:	    }
        -:  818:	}
        -:  819:			
        -:  820:      //put played card in played card pile
     2006:  821:      discardCard(handPos, currentPlayer, state, 0);
     2006:  821-block  0
call    0 returned 100%
        -:  822:			
     2006:  823:      return 0;
        -:  824:			
        -:  825:    case feast:
        -:  826:      //gain card with cost up to 5
        -:  827:      //Backup hand
    #####:  828:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  828-block  0
    $$$$$:  828-block  1
    $$$$$:  828-block  2
branch  0 never executed
branch  1 never executed
    #####:  829:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  830:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  831:      }
        -:  832:      //Backup hand
        -:  833:
        -:  834:      //Update Coins for Buy
    #####:  835:      updateCoins(currentPlayer, state, 5);
    $$$$$:  835-block  0
call    0 never executed
    #####:  836:      x = 1;//Condition to loop on
    #####:  837:      while( x == 1) {//Buy one card
    $$$$$:  837-block  0
branch  0 never executed
branch  1 never executed
    #####:  838:	if (supplyCount(choice1, state) <= 0){
    $$$$$:  838-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  839:	  if (DEBUG)
        -:  840:	    printf("None of that card left, sorry!\n");
        -:  841:
        -:  842:	  if (DEBUG){
        -:  843:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  844:	  }
        -:  845:	}
    #####:  846:	else if (state->coins < getCost(choice1)){
    $$$$$:  846-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  847:	  printf("That card is too expensive!\n");
    $$$$$:  847-block  0
call    0 never executed
        -:  848:
        -:  849:	  if (DEBUG){
        -:  850:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  851:	  }
        -:  852:	}
        -:  853:	else{
        -:  854:
        -:  855:	  if (DEBUG){
        -:  856:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  857:	  }
        -:  858:
    #####:  859:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  859-block  0
call    0 never executed
    #####:  860:	  x = 0;//No more buying cards
        -:  861:
        -:  862:	  if (DEBUG){
        -:  863:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  864:	  }
        -:  865:
        -:  866:	}
        -:  867:      }     
        -:  868:
        -:  869:      //Reset Hand
    #####:  870:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  870-block  0
    $$$$$:  870-block  1
    $$$$$:  870-block  2
branch  0 never executed
branch  1 never executed
    #####:  871:	state->hand[currentPlayer][i] = temphand[i];
    #####:  872:	temphand[i] = -1;
        -:  873:      }
        -:  874:      //Reset Hand
        -:  875:      			
    #####:  876:      return 0;
    $$$$$:  876-block  0
        -:  877:			
        -:  878:    case gardens:
    #####:  879:      return -1;
    $$$$$:  879-block  0
        -:  880:			
        -:  881:    case mine:
    #####:  882:   	  playMine(state, choice1, choice2, handPos);
    $$$$$:  882-block  0
call    0 never executed
        -:  883:			
        -:  884:    case remodel:
        3:  885:      playRemodel(state, choice1, choice2, handPos);
        3:  885-block  0
call    0 returned 100%
        -:  886:		
        -:  887:    case smithy:
        5:  888:      playSmithy(state, handPos);
        5:  888-block  0
call    0 returned 100%
        -:  889:		
        -:  890:    case village:
     2007:  891:      playVillage(state, handPos);
     2007:  891-block  0
call    0 returned 100%
        -:  892:		
        -:  893:    case baron:
     2007:  894:      state->numBuys++;//Increase buys by 1!
     2007:  895:      if (choice1 > 0){//Boolean true or going to discard an estate
     2007:  895-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        1:  896:	int p = 0;//Iterator for hand!
        1:  897:	int card_not_discarded = 1;//Flag for discard set!
        2:  898:	while(card_not_discarded){
        1:  898-block  0
        2:  898-block  1
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
        1:  898-block  2
        1:  899:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
        1:  899-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  900:	    state->coins += 4;//Add 4 coins to the amount of coins
        1:  901:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        1:  902:	    state->discardCount[currentPlayer]++;
        6:  903:	    for (;p < state->handCount[currentPlayer]; p++){
        1:  903-block  0
        5:  903-block  1
        6:  903-block  2
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  904:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  905:	    }
        1:  906:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        1:  907:	    state->handCount[currentPlayer]--;
        1:  908:	    card_not_discarded = 0;//Exit the loop
        1:  908-block  0
        -:  909:	  }
    #####:  910:	  else if (p > state->handCount[currentPlayer]){
    $$$$$:  910-block  0
branch  0 never executed
branch  1 never executed
        -:  911:	    if(DEBUG) {
        -:  912:	      printf("No estate cards in your hand, invalid choice\n");
        -:  913:	      printf("Must gain an estate if there are any\n");
        -:  914:	    }
    #####:  915:	    if (supplyCount(estate, state) > 0){
    $$$$$:  915-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  916:	      gainCard(estate, state, 0, currentPlayer);
    $$$$$:  916-block  0
call    0 never executed
    #####:  917:	      state->supplyCount[estate]--;//Decrement estates
    #####:  918:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  919:		isGameOver(state);
    $$$$$:  919-block  0
call    0 never executed
        -:  920:	      }
        -:  921:	    }
    #####:  922:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  922-block  0
        -:  923:	  }
        -:  924:			    
        -:  925:	  else{
    #####:  926:	    p++;//Next card
    $$$$$:  926-block  0
        -:  927:	  }
        -:  928:	}
        -:  929:      }
        -:  930:			    
        -:  931:      else{
     2006:  932:	if (supplyCount(estate, state) > 0){
     2006:  932-block  0
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
     2006:  933:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
     2006:  933-block  0
call    0 returned 100%
     2006:  934:	  state->supplyCount[estate]--;//Decrement Estates
     2006:  935:	  if (supplyCount(estate, state) == 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  936:	    isGameOver(state);
    $$$$$:  936-block  0
call    0 never executed
        -:  937:	  }
        -:  938:	}
        -:  939:      }
        -:  940:	    
        -:  941:      
     2007:  942:      return 0;
     2007:  942-block  0
        -:  943:		
        -:  944:    case great_hall:
        -:  945:      //+1 Card
    #####:  946:      drawCard(currentPlayer, state);
    $$$$$:  946-block  0
call    0 never executed
        -:  947:			
        -:  948:      //+1 Actions
    #####:  949:      state->numActions++;
        -:  950:			
        -:  951:      //discard card from hand
    #####:  952:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  953:      return 0;
        -:  954:		
        -:  955:    case minion:
        -:  956:      //+1 action
    #####:  957:      state->numActions++;
        -:  958:			
        -:  959:      //discard card from hand
    #####:  960:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  960-block  0
call    0 never executed
        -:  961:			
    #####:  962:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  963:	{
    #####:  964:	  state->coins = state->coins + 2;
    $$$$$:  964-block  0
        -:  965:	}
        -:  966:			
    #####:  967:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  967-block  0
branch  0 never executed
branch  1 never executed
        -:  968:	{
        -:  969:	  //discard hand
    #####:  970:	  while(numHandCards(state) > 0)
    $$$$$:  970-block  0
    $$$$$:  970-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  971:	    {
    #####:  972:	      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  972-block  0
call    0 never executed
        -:  973:	    }
        -:  974:				
        -:  975:	  //draw 4
    #####:  976:	  for (i = 0; i < 4; i++)
    $$$$$:  976-block  0
    $$$$$:  976-block  1
branch  0 never executed
branch  1 never executed
        -:  977:	    {
    #####:  978:	      drawCard(currentPlayer, state);
    $$$$$:  978-block  0
call    0 never executed
        -:  979:	    }
        -:  980:				
        -:  981:	  //other players discard hand and redraw if hand size > 4
    #####:  982:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$:  982-block  0
    $$$$$:  982-block  1
    $$$$$:  982-block  2
branch  0 never executed
branch  1 never executed
        -:  983:	    {
    #####:  984:	      if (i != currentPlayer)
    $$$$$:  984-block  0
branch  0 never executed
branch  1 never executed
        -:  985:		{
    #####:  986:		  if ( state->handCount[i] > 4 )
    $$$$$:  986-block  0
branch  0 never executed
branch  1 never executed
        -:  987:		    {
        -:  988:		      //discard hand
    #####:  989:		      while( state->handCount[i] > 0 )
    $$$$$:  989-block  0
    $$$$$:  989-block  1
branch  0 never executed
branch  1 never executed
        -:  990:			{
    #####:  991:			  discardCard(handPos, i, state, 0);
    $$$$$:  991-block  0
call    0 never executed
        -:  992:			}
        -:  993:							
        -:  994:		      //draw 4
    #####:  995:		      for (j = 0; j < 4; j++)
    $$$$$:  995-block  0
    $$$$$:  995-block  1
branch  0 never executed
branch  1 never executed
        -:  996:			{
    #####:  997:			  drawCard(i, state);
    $$$$$:  997-block  0
call    0 never executed
        -:  998:			}
        -:  999:		    }
        -: 1000:		}
        -: 1001:	    }
        -: 1002:				
        -: 1003:	}
    #####: 1004:      return 0;
    $$$$$: 1004-block  0
        -: 1005:		
        -: 1006:    case steward:
        6: 1007:      if (choice1 == 1)
        6: 1007-block  0
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1008:	{
        -: 1009:	  //+2 cards
        2: 1010:	  drawCard(currentPlayer, state);
        2: 1010-block  0
call    0 returned 100%
        2: 1011:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1012:	}
        4: 1013:      else if (choice1 == 2)
        4: 1013-block  0
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1014:	{
        -: 1015:	  //+2 coins
        2: 1016:	  state->coins = state->coins + 2;
        2: 1016-block  0
        -: 1017:	}
        -: 1018:      else
        -: 1019:	{
        -: 1020:	  //trash 2 cards in hand
        2: 1021:	  discardCard(choice2, currentPlayer, state, 1);
        2: 1021-block  0
call    0 returned 100%
        2: 1022:	  discardCard(choice3, currentPlayer, state, 1);
call    0 returned 100%
        -: 1023:	}
        -: 1024:			
        -: 1025:      //discard card from hand
        6: 1026:      discardCard(handPos, currentPlayer, state, 0);
        6: 1026-block  0
call    0 returned 100%
        6: 1027:      return 0;
        -: 1028:		
        -: 1029:    case tribute:
    #####: 1030:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1030-block  0
branch  0 never executed
branch  1 never executed
    #####: 1031:	if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1031-block  0
branch  0 never executed
branch  1 never executed
    #####: 1032:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1033:	  state->deckCount[nextPlayer]--;
    $$$$$: 1033-block  0
        -: 1034:	}
    #####: 1035:	else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1035-block  0
branch  0 never executed
branch  1 never executed
    #####: 1036:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1037:	  state->discardCount[nextPlayer]--;
    $$$$$: 1037-block  0
        -: 1038:	}
        -: 1039:	else{
        -: 1040:	  //No Card to Reveal
        -: 1041:	  if (DEBUG){
        -: 1042:	    printf("No cards to reveal\n");
        -: 1043:	  }
        -: 1044:	}
        -: 1045:      }
        -: 1046:	    
        -: 1047:      else{
    #####: 1048:	if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1048-block  0
branch  0 never executed
branch  1 never executed
    #####: 1049:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1049-block  0
    $$$$$: 1049-block  1
    $$$$$: 1049-block  2
branch  0 never executed
branch  1 never executed
    #####: 1050:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1051:	    state->deckCount[nextPlayer]++;
    #####: 1052:	    state->discard[nextPlayer][i] = -1;
    #####: 1053:	    state->discardCount[nextPlayer]--;
        -: 1054:	  }
        -: 1055:			    
    #####: 1056:	  shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$: 1056-block  0
call    0 never executed
        -: 1057:	} 
    #####: 1058:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1059:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1060:	state->deckCount[nextPlayer]--;
    #####: 1061:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1062:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1063:	state->deckCount[nextPlayer]--;
    $$$$$: 1063-block  0
        -: 1064:      }    
        -: 1065:		       
    #####: 1066:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1066-block  0
branch  0 never executed
branch  1 never executed
    #####: 1067:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1068:	state->playedCardCount++;
    #####: 1069:	tributeRevealedCards[1] = -1;
    $$$$$: 1069-block  0
        -: 1070:      }
        -: 1071:
    #####: 1072:      for (i = 0; i <= 2; i ++){
    $$$$$: 1072-block  0
    $$$$$: 1072-block  1
    $$$$$: 1072-block  2
branch  0 never executed
branch  1 never executed
    #####: 1073:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1073-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1073-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1073-block  2
branch  4 never executed
branch  5 never executed
    #####: 1074:	  state->coins += 2;
    $$$$$: 1074-block  0
        -: 1075:	}
        -: 1076:		    
    #####: 1077:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1077-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1077-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1077-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1077-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1077-block  4
branch  8 never executed
branch  9 never executed
    #####: 1078:	  drawCard(currentPlayer, state);
    $$$$$: 1078-block  0
call    0 never executed
    #####: 1079:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1080:	}
        -: 1081:	else{//Action Card
    #####: 1082:	  state->numActions = state->numActions + 2;
    $$$$$: 1082-block  0
        -: 1083:	}
        -: 1084:      }
        -: 1085:	    
    #####: 1086:      return 0;
    $$$$$: 1086-block  0
        -: 1087:		
        -: 1088:    case ambassador:
    #####: 1089:      j = 0;		//used to check if player has enough cards to discard
        -: 1090:
    #####: 1091:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1091-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1091-block  1
branch  2 never executed
branch  3 never executed
        -: 1092:	{
    #####: 1093:	  return -1;				
    $$$$$: 1093-block  0
        -: 1094:	}
        -: 1095:
    #####: 1096:      if (choice1 == handPos)
    $$$$$: 1096-block  0
branch  0 never executed
branch  1 never executed
        -: 1097:	{
    #####: 1098:	  return -1;
    $$$$$: 1098-block  0
        -: 1099:	}
        -: 1100:
    #####: 1101:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1101-block  0
    $$$$$: 1101-block  1
    $$$$$: 1101-block  2
branch  0 never executed
branch  1 never executed
        -: 1102:	{
    #####: 1103:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1103-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1103-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1103-block  2
branch  4 never executed
branch  5 never executed
        -: 1104:	    {
    #####: 1105:	      j++;
    $$$$$: 1105-block  0
        -: 1106:	    }
        -: 1107:	}
    #####: 1108:      if (j < choice2)
    $$$$$: 1108-block  0
branch  0 never executed
branch  1 never executed
        -: 1109:	{
    #####: 1110:	  return -1;				
    $$$$$: 1110-block  0
        -: 1111:	}
        -: 1112:
        -: 1113:      if (DEBUG) 
        -: 1114:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1115:
        -: 1116:      //increase supply count for choosen card by amount being discarded
    #####: 1117:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1118:			
        -: 1119:      //each other player gains a copy of revealed card
    #####: 1120:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1120-block  0
    $$$$$: 1120-block  1
    $$$$$: 1120-block  2
branch  0 never executed
branch  1 never executed
        -: 1121:	{
    #####: 1122:	  if (i != currentPlayer)
    $$$$$: 1122-block  0
branch  0 never executed
branch  1 never executed
        -: 1123:	    {
    #####: 1124:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1124-block  0
call    0 never executed
        -: 1125:	    }
        -: 1126:	}
        -: 1127:
        -: 1128:      //discard played card from hand
    #####: 1129:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1129-block  0
call    0 never executed
        -: 1130:
        -: 1131:      //trash copies of cards returned to supply
    #####: 1132:      for (j = 0; j < choice2; j++)
    $$$$$: 1132-block  0
    $$$$$: 1132-block  1
branch  0 never executed
branch  1 never executed
        -: 1133:	{
    #####: 1134:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1134-block  0
    $$$$$: 1134-block  1
    $$$$$: 1134-block  2
branch  0 never executed
branch  1 never executed
        -: 1135:	    {
    #####: 1136:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1136-block  0
branch  0 never executed
branch  1 never executed
        -: 1137:		{
    #####: 1138:		  discardCard(i, currentPlayer, state, 1);
    $$$$$: 1138-block  0
call    0 never executed
    #####: 1139:		  break;
        -: 1140:		}
        -: 1141:	    }
        -: 1142:	}			
        -: 1143:
    #####: 1144:      return 0;
    $$$$$: 1144-block  0
        -: 1145:		
        -: 1146:    case cutpurse:
        -: 1147:
    #####: 1148:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1148-block  0
call    0 never executed
    #####: 1149:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1149-block  0
    $$$$$: 1149-block  1
branch  0 never executed
branch  1 never executed
        -: 1150:	{
    #####: 1151:	  if (i != currentPlayer)
    $$$$$: 1151-block  0
branch  0 never executed
branch  1 never executed
        -: 1152:	    {
    #####: 1153:	      for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1153-block  0
    $$$$$: 1153-block  1
    $$$$$: 1153-block  2
branch  0 never executed
branch  1 never executed
        -: 1154:		{
    #####: 1155:		  if (state->hand[i][j] == copper)
    $$$$$: 1155-block  0
branch  0 never executed
branch  1 never executed
        -: 1156:		    {
    #####: 1157:		      discardCard(j, i, state, 0);
    $$$$$: 1157-block  0
call    0 never executed
    #####: 1158:		      break;
        -: 1159:		    }
    #####: 1160:		  if (j == state->handCount[i])
    $$$$$: 1160-block  0
branch  0 never executed
branch  1 never executed
        -: 1161:		    {
    #####: 1162:		      for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1162-block  0
    $$$$$: 1162-block  1
    $$$$$: 1162-block  2
branch  0 never executed
branch  1 never executed
        -: 1163:			{
        -: 1164:			  if (DEBUG)
        -: 1165:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1166:			}	
    #####: 1167:		      break;
    $$$$$: 1167-block  0
        -: 1168:		    }		
        -: 1169:		}
        -: 1170:					
        -: 1171:	    }
        -: 1172:				
        -: 1173:	}				
        -: 1174:
        -: 1175:      //discard played card from hand
    #####: 1176:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1176-block  0
call    0 never executed
        -: 1177:
    #####: 1178:      return 0;
        -: 1179:
        -: 1180:		
        -: 1181:    case embargo: 
        -: 1182:      //+2 Coins
    #####: 1183:      state->coins = state->coins + 2;
        -: 1184:			
        -: 1185:      //see if selected pile is in play
    #####: 1186:      if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1186-block  0
branch  0 never executed
branch  1 never executed
        -: 1187:	{
    #####: 1188:	  return -1;
    $$$$$: 1188-block  0
        -: 1189:	}
        -: 1190:			
        -: 1191:      //add embargo token to selected supply pile
    #####: 1192:      state->embargoTokens[choice1]++;
        -: 1193:			
        -: 1194:      //trash card
    #####: 1195:      discardCard(handPos, currentPlayer, state, 1);		
    $$$$$: 1195-block  0
call    0 never executed
    #####: 1196:      return 0;
        -: 1197:		
        -: 1198:    case outpost:
        -: 1199:      //set outpost flag
    #####: 1200:      state->outpostPlayed++;
        -: 1201:			
        -: 1202:      //discard card
    #####: 1203:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1203-block  0
call    0 never executed
    #####: 1204:      return 0;
        -: 1205:		
        -: 1206:    case salvager:
        -: 1207:      //+1 buy
    #####: 1208:      state->numBuys++;
        -: 1209:			
    #####: 1210:      if (choice1)
    $$$$$: 1210-block  0
branch  0 never executed
branch  1 never executed
        -: 1211:	{
        -: 1212:	  //gain coins equal to trashed card
    #####: 1213:	  state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1213-block  0
call    0 never executed
call    1 never executed
        -: 1214:	  //trash card
    #####: 1215:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1216:	}
        -: 1217:			
        -: 1218:      //discard card
    #####: 1219:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1219-block  0
call    0 never executed
    #####: 1220:      return 0;
        -: 1221:		
        -: 1222:    case sea_hag:
    #####: 1223:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1223-block  0
    $$$$$: 1223-block  1
    $$$$$: 1223-block  2
branch  0 never executed
branch  1 never executed
    #####: 1224:	if (i != currentPlayer){
    $$$$$: 1224-block  0
branch  0 never executed
branch  1 never executed
    #####: 1225:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1226:	  state->discardCount[i]++;
    #####: 1227:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1227-block  0
        -: 1228:	}
        -: 1229:      }
    #####: 1230:      return 0;
    $$$$$: 1230-block  0
        -: 1231:		
        -: 1232:    case treasure_map:
        -: 1233:      //search hand for another treasure_map
    #####: 1234:      index = -1;
    #####: 1235:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1235-block  0
    $$$$$: 1235-block  1
    $$$$$: 1235-block  2
branch  0 never executed
branch  1 never executed
        -: 1236:	{
    #####: 1237:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1237-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1237-block  1
branch  2 never executed
branch  3 never executed
        -: 1238:	    {
    #####: 1239:	      index = i;
    #####: 1240:	      break;
    $$$$$: 1240-block  0
        -: 1241:	    }
        -: 1242:	}
    #####: 1243:      if (index > -1)
    $$$$$: 1243-block  0
branch  0 never executed
branch  1 never executed
        -: 1244:	{
        -: 1245:	  //trash both treasure cards
    #####: 1246:	  discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1246-block  0
call    0 never executed
    #####: 1247:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1248:
        -: 1249:	  //gain 4 Gold cards
    #####: 1250:	  for (i = 0; i < 4; i++)
    $$$$$: 1250-block  0
branch  0 never executed
branch  1 never executed
        -: 1251:	    {
    #####: 1252:	      gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1252-block  0
call    0 never executed
        -: 1253:	    }
        -: 1254:				
        -: 1255:	  //return success
    #####: 1256:	  return 1;
    $$$$$: 1256-block  0
        -: 1257:	}
        -: 1258:			
        -: 1259:      //no second treasure_map found in hand
    #####: 1260:      return -1;
    $$$$$: 1260-block  0
        -: 1261:    }
        -: 1262:	
     4019: 1263:  return -1;
    $$$$$: 1263-block  0
     4019: 1263-block  1
        -: 1264:}
        -: 1265:
function discardCard called 4048 returned 100% blocks executed 89%
     4048: 1266:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
     4048: 1266-block  0
        -: 1267:{
        -: 1268:	
        -: 1269:  //if card is not trashed, added to Played pile 
     4048: 1270:  if (trashFlag < 1)
     4048: 1270-block  0
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -: 1271:    {
        -: 1272:      //add card to played pile
     4037: 1273:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     4037: 1274:      state->playedCardCount++;
     4037: 1274-block  0
        -: 1275:    }
        -: 1276:	
        -: 1277:  //set played card to -1
     4048: 1278:  state->hand[currentPlayer][handPos] = -1;
        -: 1279:	
        -: 1280:  //remove card from player's hand
     4048: 1281:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
     4048: 1281-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1282:    {
        -: 1283:      //reduce number of cards in hand
       12: 1284:      state->handCount[currentPlayer]--;
       12: 1284-block  0
        -: 1285:    }
     4036: 1286:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
     4036: 1286-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1287:    {
        -: 1288:      //reduce number of cards in hand
    #####: 1289:      state->handCount[currentPlayer]--;
    $$$$$: 1289-block  0
        -: 1290:    }
        -: 1291:  else 	
        -: 1292:    {
        -: 1293:      //replace discarded card with last card in hand
     4036: 1294:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1295:      //set last card to -1
     4036: 1296:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1297:      //reduce number of cards in hand
     4036: 1298:      state->handCount[currentPlayer]--;
     4036: 1298-block  0
        -: 1299:    }
        -: 1300:	
     4048: 1301:  return 0;
     4048: 1301-block  0
        -: 1302:}
        -: 1303:
function gainCard called 2017 returned 100% blocks executed 100%
     2017: 1304:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
     2017: 1304-block  0
        -: 1305:{
        -: 1306:  //Note: supplyPos is enum of choosen card
        -: 1307:	
        -: 1308:  //check if supply pile is empty (0) or card is not used in game (-1)
     2017: 1309:  if ( supplyCount(supplyPos, state) < 1 )
     2017: 1309-block  0
call    0 returned 100%
branch  1 taken 1% (fallthrough)
branch  2 taken 99%
        -: 1310:    {
        2: 1311:      return -1;
        2: 1311-block  0
        -: 1312:    }
        -: 1313:	
        -: 1314:  //added card for [whoseTurn] current player:
        -: 1315:  // toFlag = 0 : add to discard
        -: 1316:  // toFlag = 1 : add to deck
        -: 1317:  // toFlag = 2 : add to hand
        -: 1318:
     2015: 1319:  if (toFlag == 1)
     2015: 1319-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1320:    {
        2: 1321:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        2: 1322:      state->deckCount[player]++;
        2: 1322-block  0
        -: 1323:    }
     2013: 1324:  else if (toFlag == 2)
     2013: 1324-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1325:    {
        2: 1326:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        2: 1327:      state->handCount[player]++;
        2: 1327-block  0
        -: 1328:    }
        -: 1329:  else
        -: 1330:    {
     2011: 1331:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     2011: 1332:      state->discardCount[player]++;
     2011: 1332-block  0
        -: 1333:    }
        -: 1334:	
        -: 1335:  //decrease number in supply pile
     2015: 1336:  state->supplyCount[supplyPos]--;
        -: 1337:	 
     2015: 1338:  return 0;
     2015: 1338-block  0
        -: 1339:}
        -: 1340:
function updateCoins called 4061 returned 100% blocks executed 100%
     4061: 1341:int updateCoins(int player, struct gameState *state, int bonus)
     4061: 1341-block  0
        -: 1342:{
        -: 1343:  int i;
        -: 1344:	
        -: 1345:  //reset coin count
     4061: 1346:  state->coins = 0;
        -: 1347:
        -: 1348:  //add coins for each Treasure card in player's hand
    24366: 1349:  for (i = 0; i < state->handCount[player]; i++)
     4061: 1349-block  0
    20305: 1349-block  1
    24366: 1349-block  2
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1350:    {
    20305: 1351:      if (state->hand[player][i] == copper)
    20305: 1351-block  0
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
        -: 1352:	{
    14156: 1353:	  state->coins += 1;
    14156: 1353-block  0
        -: 1354:	}
     6149: 1355:      else if (state->hand[player][i] == silver)
     6149: 1355-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1356:	{
       10: 1357:	  state->coins += 2;
       10: 1357-block  0
        -: 1358:	}
     6139: 1359:      else if (state->hand[player][i] == gold)
     6139: 1359-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1360:	{
       10: 1361:	  state->coins += 3;
       10: 1361-block  0
        -: 1362:	}	
        -: 1363:    }	
        -: 1364:
        -: 1365:  //add bonus
     4061: 1366:  state->coins += bonus;
        -: 1367:
     4061: 1368:  return 0;
     4061: 1368-block  0
        -: 1369:}
        -: 1370:
        -: 1371:
        -: 1372:/************************************************
        -: 1373:Start of function unit tests
        -: 1374:*************************************************/
        -: 1375:
function testUpdateCoins called 0 returned 0% blocks executed 0%
    #####: 1376:int testUpdateCoins(int player, struct gameState *state, int bonus) {
    $$$$$: 1376-block  0
        -: 1377:  
    #####: 1378:}
        -: 1379:
        -: 1380:
        -: 1381://end of dominion.c
        -: 1382:
