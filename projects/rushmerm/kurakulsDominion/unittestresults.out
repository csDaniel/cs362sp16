profiling:/nfs/stak/students/k/kurakuls/sp16/cs362sp16:Cannot create directory
profiling:/nfs/stak/students/k/kurakuls/sp16/cs362sp16/projects/kurakuls/dominion/rngs.gcda:Skip
----------------- Testing Card: smithy ----------------
TEST 1: Verify 3 Cards have been drawn
hand count = 8, expected = 7
FAILURE
TEST 2: Verify 3 Cards are from own deck
FAILURE
SUCCESS
TEST 3: Verify the other player's states have not changed
SUCCESS
SUCCESS
SUCCESS
SUCCESS
SUCCESS
SUCCESS
SUCCESS
SUCCESS
SUCCESS
SUCCESS
FAILURE

 >>>>> SUCCESS: Testing complete smithy <<<<<

----------------- Testing Card: adventurer ----------------
TEST 1: Verify 2 Cards have been drawn
hand count = 6, expected = 6
SUCCESS
TEST 2: Verify they are treasure Cards
SUCCESS
TEST 3: Verify the other player's states have not changed
SUCCESS
SUCCESS
SUCCESS
SUCCESS
SUCCESS
SUCCESS
SUCCESS
SUCCESS
SUCCESS
SUCCESS
FAILURE
TEST 4: Verify treasure cards are from own deck
FAILURE
SUCCESS
TEST 4: Test for 0 tresure cards in deck
FAILURE
TEST 5: Test for 1 treasure card in deckFAILURE

 >>>>> SUCCESS: Testing complete adventurer <<<<<

----------------- Testing Card: steward ----------------
TEST 1: choice 1. Verify 2 cards drawn
SUCCESS
TEST 2: choice 3. Verify 2 coins added
FAILURE
TEST 3: choice 3. Verify 2 cards trashed
FAILURE

 >>>>> SUCCESS: Testing complete steward <<<<<

----------------- Testing Card: village ----------------
TEST 1: Verify 1 card has been drawn
FAILURE
TEST 2: Verify card is from own deck and other decks are unchanged
FAILURE
FAILURE
TEST 3: Verify 2 actions have been added
SUCCESS

 >>>>> SUCCESS: Testing complete village <<<<<

----------------- Testing Function: updateCoins() ----------------
TEST 1: Verify 5 coins added for all coppers in hand
FAILURE
TEST 1: Verify 7 coins added for all coppers in hand and 2 bonus
FAILURE
TEST 3: Verify 10 coins added for all silvers in hand
FAILURE
TEST 4: Verify 15 coins added for all gold in hand
FAILURE

 >>>>> SUCCESS: Testing complete updateCoins() <<<<<

----------------- Testing Function: gainCard() ----------------
TEST 1: Return -1 if no cards in supply pile
SUCCESS
TEST 1: toFlag = 0. Card should discard
SUCCESS
TEST 3: toFlag = 1. Card should be added to deck 
SUCCESS
TEST 3: toFlag = 2. Card should be added to hand 
SUCCESS

 >>>>> SUCCESS: Testing complete gainCard() <<<<<

----------------- Testing Function: discardCard() ----------------
TEST 1: Test if trash flag is set
FAILURE
TEST 2: Discard last card in hand (card 5 out of 5)
SUCCESS
TEST 3: Discard only card in hand (1 of 1) 
FAILURE
TEST 4: Discard middle card in hand. Test it is replaced with last card 
FAILURE

 >>>>> SUCCESS: Testing complete discardCard() <<<<<

----------------- Testing Function: scoreFor() ----------------
TEST 1: No victory cards
SUCCESS
TEST 2: Victory cards in hand only
SUCCESS
TEST 3: Victory cards in deck only 
FAILURE
TEST 4:  Victory cards in discard only
FAILURE
TEST 5: Only curse cards. Negative value
FAILURE

 >>>>> SUCCESS: Testing complete scoreFor() <<<<<

File 'dominion.c'
Lines executed:34.40% of 561
Branches executed:33.81% of 417
Taken at least once:25.66% of 417
Calls executed:27.08% of 96
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:32
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function playMySmithy called 4 returned 100% blocks executed 100%
        4:    8:int playMySmithy(int i, int currentPlayer, struct gameState *state, int handPos) {
        4:    8-block  0
        -:    9:
        -:   10:
        -:   11:      //+3 Cards
       20:   12:      for (i = 0; i <= 3; i++)
        4:   12-block  0
       20:   12-block  1
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:   13:	{
       16:   14:	  drawCard(currentPlayer, state);
       16:   14-block  0
call    0 returned 100%
        -:   15:	}
        -:   16:  
        -:   17:  
        -:   18:      //discard card from hand
        4:   19:      discardCard(handPos, currentPlayer, state, 0);
        4:   19-block  0
call    0 returned 100%
        4:   20:      return 0;
        -:   21:
        -:   22:
        -:   23:}
        -:   24:
function playMyAdventurer called 12 returned 100% blocks executed 100%
       12:   25:int playMyAdventurer(int z, int cardDrawn, int drawntreasure, int temphand[], int currentPlayer, struct gameState *state, int handPos ) {
       12:   25-block  0
       56:   26:      while(drawntreasure<2){
       12:   26-block  0
       56:   26-block  1
branch  0 taken 79%
branch  1 taken 21% (fallthrough)
       44:   27:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
       44:   27-block  0
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
        4:   28:	  shuffle(currentPlayer, state);
        4:   28-block  0
call    0 returned 100%
        -:   29:	}
       44:   30:	drawCard(currentPlayer, state);
       44:   30-block  0
call    0 returned 100%
       44:   31:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       44:   32:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 82% (fallthrough)
branch  1 taken 18%
       36:   32-block  0
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
       36:   32-block  1
branch  4 taken 11% (fallthrough)
branch  5 taken 89%
       12:   33:	  drawntreasure+=2;
       12:   33-block  0
        -:   34:	else{
       32:   35:	  temphand[z]=cardDrawn;
       32:   36:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       32:   37:	  z++;
       32:   37-block  0
        -:   38:	}
        -:   39:      }
       44:   40:      while(z-1>=0){
       12:   40-block  0
       44:   40-block  1
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
       32:   41:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       32:   42:	z=z-1;
       32:   42-block  0
        -:   43:      }
       12:   44:      return 0;
       12:   44-block  0
        -:   45:
        -:   46:}
        -:   47:
function playMyGardens called 0 returned 0% blocks executed 0%
    #####:   48:int playMyGardens(){
    $$$$$:   48-block  0
        -:   49:
    #####:   50:  return -1;
    $$$$$:   50-block  0
        -:   51:    
        -:   52:}
        -:   53:    
function playMySteward called 12 returned 100% blocks executed 100%
       12:   54:int playMySteward(int choice1, int choice2, int choice3, int currentPlayer, struct gameState *state, int handPos) {
       12:   54-block  0
       12:   55:      if (choice1 == 1)
       12:   55-block  0
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:   56:	{
        -:   57:	  //+2 cards
        4:   58:	  drawCard(currentPlayer, state);
        4:   58-block  0
call    0 returned 100%
        4:   59:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:   60:	}
        8:   61:      else if (choice1 == 2)
        8:   61-block  0
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   62:	{
        -:   63:	  //+2 coins
        4:   64:	  state->coins = 2;
        4:   64-block  0
        -:   65:	}
        -:   66:      else
        -:   67:	{
        -:   68:	  //trash 2 cards in hand
        4:   69:	  discardCard(choice2, currentPlayer, state, 1);
        4:   69-block  0
call    0 returned 100%
        4:   70:	  discardCard(choice3, currentPlayer, state, 1);
call    0 returned 100%
        -:   71:	}
        -:   72:			
        -:   73:      //discard card from hand
       12:   74:      discardCard(handPos, currentPlayer, state, 0);
       12:   74-block  0
call    0 returned 100%
       12:   75:      return 0;
        -:   76:}    
        -:   77:    
        -:   78:    
function playMyVillage called 4 returned 100% blocks executed 100%
        4:   79:int playMyVillage(int currentPlayer, struct gameState *state, int handPos){
        4:   79-block  0
        -:   80:    
        -:   81:    
        -:   82:      //+1 Card
        4:   83:      drawCard(currentPlayer, state);
        4:   83-block  0
call    0 returned 100%
        4:   84:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:   85:			
        -:   86:      //+2 Actions
        4:   87:      state->numActions = state->numActions + 1;
        -:   88:			
        -:   89:      //discard played card from hand
        4:   90:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        4:   91:      return 0;
        -:   92:
        -:   93:}
        -:   94:
        -:   95:
function compare called 3000 returned 100% blocks executed 83%
     3000:   96:int compare(const void* a, const void* b) {
     3000:   96-block  0
     3000:   97:  if (*(int*)a > *(int*)b)
     3000:   97-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   98:    return 1;
    $$$$$:   98-block  0
     3000:   99:  if (*(int*)a < *(int*)b)
     3000:   99-block  0
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      800:  100:    return -1;
      800:  100-block  0
     2200:  101:  return 0;
     2200:  101-block  0
        -:  102:}
        -:  103:
function newGame called 0 returned 0% blocks executed 0%
    #####:  104:struct gameState* newGame() {
    $$$$$:  104-block  0
    #####:  105:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  106:  return g;
    $$$$$:  106-block  0
        -:  107:}
        -:  108:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:  109:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
    $$$$$:  109-block  0
        -:  110:		  int k8, int k9, int k10) {
    #####:  111:  int* k = malloc(10 * sizeof(int));
    #####:  112:  k[0] = k1;
    #####:  113:  k[1] = k2;
    #####:  114:  k[2] = k3;
    #####:  115:  k[3] = k4;
    #####:  116:  k[4] = k5;
    #####:  117:  k[5] = k6;
    #####:  118:  k[6] = k7;
    #####:  119:  k[7] = k8;
    #####:  120:  k[8] = k9;
    #####:  121:  k[9] = k10;
    #####:  122:  return k;
    $$$$$:  122-block  0
        -:  123:}
        -:  124:
function initializeGame called 100 returned 100% blocks executed 88%
      100:  125:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
      100:  125-block  0
        -:  126:		   struct gameState *state) {
        -:  127:
        -:  128:  int i;
        -:  129:  int j;
        -:  130:  int it;			
        -:  131:  //set up random number generator
      100:  132:  SelectStream(1);
      100:  132-block  0
call    0 returned 100%
      100:  133:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:  134:  
        -:  135:  //check number of players
      100:  136:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      100:  136-block  0
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  137:    {
    #####:  138:      return -1;
    $$$$$:  138-block  0
        -:  139:    }
        -:  140:
        -:  141:  //set number of players
      100:  142:  state->numPlayers = numPlayers;
        -:  143:
        -:  144:  //check selected kingdom cards are different
     1100:  145:  for (i = 0; i < 10; i++)
      100:  145-block  0
     1000:  145-block  1
     1100:  145-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  146:    {
    11000:  147:      for (j = 0; j < 10; j++)
     1000:  147-block  0
    10000:  147-block  1
    11000:  147-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  148:        {
    10000:  149:	  if (j != i && kingdomCards[j] == kingdomCards[i])
    10000:  149-block  0
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
     9000:  149-block  1
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  150:	    {
    #####:  151:	      return -1;
    $$$$$:  151-block  0
        -:  152:	    }
        -:  153:        }
        -:  154:    }
        -:  155:
        -:  156:
        -:  157:  //initialize supply
        -:  158:  ///////////////////////////////
        -:  159:
        -:  160:  //set number of Curse cards
      100:  161:  if (numPlayers == 2)
      100:  161-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  162:    {
      100:  163:      state->supplyCount[curse] = 10;
      100:  163-block  0
        -:  164:    }
    #####:  165:  else if (numPlayers == 3)
    $$$$$:  165-block  0
branch  0 never executed
branch  1 never executed
        -:  166:    {
    #####:  167:      state->supplyCount[curse] = 20;
    $$$$$:  167-block  0
        -:  168:    }
        -:  169:  else
        -:  170:    {
    #####:  171:      state->supplyCount[curse] = 30;
    $$$$$:  171-block  0
        -:  172:    }
        -:  173:
        -:  174:  //set number of Victory cards
      100:  175:  if (numPlayers == 2)
      100:  175-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  176:    {
      100:  177:      state->supplyCount[estate] = 8;
      100:  178:      state->supplyCount[duchy] = 8;
      100:  179:      state->supplyCount[province] = 8;
      100:  179-block  0
        -:  180:    }
        -:  181:  else
        -:  182:    {
    #####:  183:      state->supplyCount[estate] = 12;
    #####:  184:      state->supplyCount[duchy] = 12;
    #####:  185:      state->supplyCount[province] = 12;
    $$$$$:  185-block  0
        -:  186:    }
        -:  187:
        -:  188:  //set number of Treasure cards
      100:  189:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      100:  190:  state->supplyCount[silver] = 40;
      100:  191:  state->supplyCount[gold] = 30;
        -:  192:
        -:  193:  //set number of Kingdom cards
     2100:  194:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
      100:  194-block  0
     2000:  194-block  1
     2100:  194-block  2
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  195:    {
    16500:  196:      for (j = 0; j < 10; j++)           		//loop chosen cards
     2000:  196-block  0
    14500:  196-block  1
    16500:  196-block  2
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  197:	{
    15500:  198:	  if (kingdomCards[j] == i)
    15500:  198-block  0
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  199:	    {
        -:  200:	      //check if card is a 'Victory' Kingdom card
     1000:  201:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
     1000:  201-block  0
branch  0 taken 93% (fallthrough)
branch  1 taken 7%
      932:  201-block  1
branch  2 taken 7% (fallthrough)
branch  3 taken 93%
        -:  202:		{
      272:  203:		  if (numPlayers == 2){ 
      136:  203-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      136:  203-block  1
      136:  204:		    state->supplyCount[i] = 8; 
      136:  204-block  0
        -:  205:		  }
    #####:  206:		  else{ state->supplyCount[i] = 12; }
    $$$$$:  206-block  0
        -:  207:		}
        -:  208:	      else
        -:  209:		{
      864:  210:		  state->supplyCount[i] = 10;
      864:  210-block  0
        -:  211:		}
     1000:  212:	      break;
     1000:  212-block  0
        -:  213:	    }
        -:  214:	  else    //card is not in the set choosen for the game
        -:  215:	    {
    14500:  216:	      state->supplyCount[i] = -1;
        -:  217:	    }
        -:  218:	}
        -:  219:
        -:  220:    }
        -:  221:
        -:  222:  ////////////////////////
        -:  223:  //supply intilization complete
        -:  224:
        -:  225:  //set player decks
      300:  226:  for (i = 0; i < numPlayers; i++)
      100:  226-block  0
      200:  226-block  1
      300:  226-block  2
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  227:    {
      200:  228:      state->deckCount[i] = 0;
      800:  229:      for (j = 0; j < 3; j++)
      200:  229-block  0
      600:  229-block  1
      800:  229-block  2
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  230:	{
      600:  231:	  state->deck[i][j] = estate;
      600:  232:	  state->deckCount[i]++;
        -:  233:	}
     1600:  234:      for (j = 3; j < 10; j++)
      200:  234-block  0
     1400:  234-block  1
     1600:  234-block  2
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  235:	{
     1400:  236:	  state->deck[i][j] = copper;
     1400:  237:	  state->deckCount[i]++;		
        -:  238:	}
        -:  239:    }
        -:  240:
        -:  241:  //shuffle player decks
      300:  242:  for (i = 0; i < numPlayers; i++)
      100:  242-block  0
      200:  242-block  1
      300:  242-block  2
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  243:    {
      200:  244:      if ( shuffle(i, state) < 0 )
      200:  244-block  0
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  245:	{
    #####:  246:	  return -1;
    $$$$$:  246-block  0
        -:  247:	}
        -:  248:    }
        -:  249:
        -:  250:  //draw player hands
      300:  251:  for (i = 0; i < numPlayers; i++)
      100:  251-block  0
      200:  251-block  1
      300:  251-block  2
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  252:    {  
        -:  253:      //initialize hand size to zero
      200:  254:      state->handCount[i] = 0;
      200:  255:      state->discardCount[i] = 0;
        -:  256:      //draw 5 cards
        -:  257:      // for (j = 0; j < 5; j++)
        -:  258:      //	{
        -:  259:      //	  drawCard(i, state);
        -:  260:      //	}
        -:  261:    }
        -:  262:  
        -:  263:  //set embargo tokens to 0 for all supply piles
     2800:  264:  for (i = 0; i <= treasure_map; i++)
      100:  264-block  0
     2700:  264-block  1
     2800:  264-block  2
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  265:    {
     2700:  266:      state->embargoTokens[i] = 0;
        -:  267:    }
        -:  268:
        -:  269:  //initialize first player's turn
      100:  270:  state->outpostPlayed = 0;
      100:  271:  state->phase = 0;
      100:  272:  state->numActions = 1;
      100:  273:  state->numBuys = 1;
      100:  274:  state->playedCardCount = 0;
      100:  275:  state->whoseTurn = 0;
      100:  276:  state->handCount[state->whoseTurn] = 0;
        -:  277:  //int it; move to top
        -:  278:
        -:  279:  //Moved draw cards to here, only drawing at the start of a turn
      600:  280:  for (it = 0; it < 5; it++){
      100:  280-block  0
      600:  280-block  1
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      500:  281:    drawCard(state->whoseTurn, state);
      500:  281-block  0
call    0 returned 100%
        -:  282:  }
        -:  283:
      100:  284:  updateCoins(state->whoseTurn, state, 0);
      100:  284-block  0
call    0 returned 100%
        -:  285:
      100:  286:  return 0;
        -:  287:}
        -:  288:
function shuffle called 208 returned 100% blocks executed 100%
      208:  289:int shuffle(int player, struct gameState *state) {
      208:  289-block  0
        -:  290: 
        -:  291:
        -:  292:  int newDeck[MAX_DECK];
      208:  293:  int newDeckPos = 0;
        -:  294:  int card;
        -:  295:  int i;
        -:  296:
      208:  297:  if (state->deckCount[player] < 1)
      208:  297-block  0
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        8:  298:    return -1;
        8:  298-block  0
      200:  299:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
      200:  299-block  0
call    0 returned 100%
        -:  300:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  301:
     2200:  302:  while (state->deckCount[player] > 0) {
     2200:  302-block  0
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2000:  303:    card = floor(Random() * state->deckCount[player]);
     2000:  303-block  0
call    0 returned 100%
     2000:  304:    newDeck[newDeckPos] = state->deck[player][card];
     2000:  305:    newDeckPos++;
     7000:  306:    for (i = card; i < state->deckCount[player]-1; i++) {
     5000:  306-block  0
     7000:  306-block  1
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
     5000:  307:      state->deck[player][i] = state->deck[player][i+1];
        -:  308:    }
     2000:  309:    state->deckCount[player]--;
     2000:  309-block  0
        -:  310:  }
     2200:  311:  for (i = 0; i < newDeckPos; i++) {
      200:  311-block  0
     2000:  311-block  1
     2200:  311-block  2
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     2000:  312:    state->deck[player][i] = newDeck[i];
     2000:  313:    state->deckCount[player]++;
        -:  314:  }
        -:  315:
      208:  316:  return 0;
      200:  316-block  0
      208:  316-block  1
        -:  317:}
        -:  318:
function playCard called 0 returned 0% blocks executed 0%
    #####:  319:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
    $$$$$:  319-block  0
        -:  320:{	
        -:  321:  int card;
    #####:  322:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  323:
        -:  324:  //check if it is the right phase
    #####:  325:  if (state->phase != 0)
    $$$$$:  325-block  0
branch  0 never executed
branch  1 never executed
        -:  326:    {
    #####:  327:      return -1;
    $$$$$:  327-block  0
        -:  328:    }
        -:  329:	
        -:  330:  //check if player has enough actions
    #####:  331:  if ( state->numActions < 1 )
    $$$$$:  331-block  0
branch  0 never executed
branch  1 never executed
        -:  332:    {
    #####:  333:      return -1;
    $$$$$:  333-block  0
        -:  334:    }
        -:  335:	
        -:  336:  //get card played
    #####:  337:  card = handCard(handPos, state);
    $$$$$:  337-block  0
call    0 never executed
        -:  338:	
        -:  339:  //check if selected card is an action
    #####:  340:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
    $$$$$:  340-block  0
branch  2 never executed
branch  3 never executed
        -:  341:    {
    #####:  342:      return -1;
    $$$$$:  342-block  0
        -:  343:    }
        -:  344:	
        -:  345:  //play card
    #####:  346:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  346-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  347:    {
    #####:  348:      return -1;
    $$$$$:  348-block  0
        -:  349:    }
        -:  350:	
        -:  351:  //reduce number of actions
    #####:  352:  state->numActions--;
        -:  353:
        -:  354:  //update coins (Treasure cards may be added with card draws)
    #####:  355:  updateCoins(state->whoseTurn, state, coin_bonus);
    $$$$$:  355-block  0
call    0 never executed
        -:  356:	
    #####:  357:  return 0;
    $$$$$:  357-block  0
        -:  358:}
        -:  359:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  360:int buyCard(int supplyPos, struct gameState *state) {
    $$$$$:  360-block  0
    $$$$$:  360-block  1
        -:  361:  int who;
        -:  362:  if (DEBUG){
        -:  363:    printf("Entering buyCard...\n");
        -:  364:  }
        -:  365:
        -:  366:  // I don't know what to do about the phase thing.
        -:  367:
    #####:  368:  who = state->whoseTurn;
        -:  369:
    #####:  370:  if (state->numBuys < 1){
    $$$$$:  370-block  0
branch  0 never executed
branch  1 never executed
        -:  371:    if (DEBUG)
        -:  372:      printf("You do not have any buys left\n");
    #####:  373:    return -1;
    $$$$$:  373-block  0
    #####:  374:  } else if (supplyCount(supplyPos, state) <1){
    $$$$$:  374-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  375:    if (DEBUG)
        -:  376:      printf("There are not any of that type of card left\n");
    #####:  377:    return -1;
    $$$$$:  377-block  0
    #####:  378:  } else if (state->coins < getCost(supplyPos)){
    $$$$$:  378-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  379:    if (DEBUG) 
        -:  380:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  381:    return -1;
    $$$$$:  381-block  0
        -:  382:  } else {
    #####:  383:    state->phase=1;
        -:  384:    //state->supplyCount[supplyPos]--;
    #####:  385:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
    $$$$$:  385-block  0
call    0 never executed
        -:  386:  
    #####:  387:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  388:    state->numBuys--;
        -:  389:    if (DEBUG)
        -:  390:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  391:  }
        -:  392:
        -:  393:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  394:  //state->discardCount[who]++;
        -:  395:    
    #####:  396:  return 0;
    $$$$$:  396-block  0
        -:  397:}
        -:  398:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  399:int numHandCards(struct gameState *state) {
    $$$$$:  399-block  0
    #####:  400:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  400-block  0
call    0 never executed
        -:  401:}
        -:  402:
function handCard called 0 returned 0% blocks executed 0%
    #####:  403:int handCard(int handPos, struct gameState *state) {
    $$$$$:  403-block  0
    #####:  404:  int currentPlayer = whoseTurn(state);
    $$$$$:  404-block  0
call    0 never executed
    #####:  405:  return state->hand[currentPlayer][handPos];
        -:  406:}
        -:  407:
function supplyCount called 16 returned 100% blocks executed 100%
       16:  408:int supplyCount(int card, struct gameState *state) {
       16:  408-block  0
       16:  409:  return state->supplyCount[card];
       16:  409-block  0
        -:  410:}
        -:  411:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  412:int fullDeckCount(int player, int card, struct gameState *state) {
    $$$$$:  412-block  0
        -:  413:  int i;
    #####:  414:  int count = 0;
        -:  415:
    #####:  416:  for (i = 0; i < state->deckCount[player]; i++)
    $$$$$:  416-block  0
    $$$$$:  416-block  1
    $$$$$:  416-block  2
branch  0 never executed
branch  1 never executed
        -:  417:    {
    #####:  418:      if (state->deck[player][i] == card) count++;
    $$$$$:  418-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  418-block  1
        -:  419:    }
        -:  420:
    #####:  421:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  421-block  0
    $$$$$:  421-block  1
    $$$$$:  421-block  2
branch  0 never executed
branch  1 never executed
        -:  422:    {
    #####:  423:      if (state->hand[player][i] == card) count++;
    $$$$$:  423-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  423-block  1
        -:  424:    }
        -:  425:
    #####:  426:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  426-block  0
    $$$$$:  426-block  1
    $$$$$:  426-block  2
branch  0 never executed
branch  1 never executed
        -:  427:    {
    #####:  428:      if (state->discard[player][i] == card) count++;
    $$$$$:  428-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  428-block  1
        -:  429:    }
        -:  430:
    #####:  431:  return count;
    $$$$$:  431-block  0
        -:  432:}
        -:  433:
function whoseTurn called 32 returned 100% blocks executed 100%
       32:  434:int whoseTurn(struct gameState *state) {
       32:  434-block  0
       32:  435:  return state->whoseTurn;
       32:  435-block  0
        -:  436:}
        -:  437:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  438:int endTurn(struct gameState *state) {
    $$$$$:  438-block  0
        -:  439:  int k;
        -:  440:  int i;
    #####:  441:  int currentPlayer = whoseTurn(state);
    $$$$$:  441-block  0
call    0 never executed
        -:  442:  
        -:  443:  //Discard hand
    #####:  444:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  444-block  0
    $$$$$:  444-block  1
branch  0 never executed
branch  1 never executed
    #####:  445:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  446:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  447:  }
    #####:  448:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  449:    
        -:  450:  //Code for determining the player
    #####:  451:  if (currentPlayer < (state->numPlayers - 1)){ 
    $$$$$:  451-block  0
branch  0 never executed
branch  1 never executed
    #####:  452:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    $$$$$:  452-block  0
        -:  453:  }
        -:  454:  else{
    #####:  455:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  455-block  0
        -:  456:  }
        -:  457:
    #####:  458:  state->outpostPlayed = 0;
    #####:  459:  state->phase = 0;
    #####:  460:  state->numActions = 1;
    #####:  461:  state->coins = 0;
    #####:  462:  state->numBuys = 1;
    #####:  463:  state->playedCardCount = 0;
    #####:  464:  state->handCount[state->whoseTurn] = 0;
        -:  465:
        -:  466:  //int k; move to top
        -:  467:  //Next player draws hand
    #####:  468:  for (k = 0; k < 5; k++){
    $$$$$:  468-block  0
    $$$$$:  468-block  1
branch  0 never executed
branch  1 never executed
    #####:  469:    drawCard(state->whoseTurn, state);//Draw a card
    $$$$$:  469-block  0
call    0 never executed
        -:  470:  }
        -:  471:
        -:  472:  //Update money
    #####:  473:  updateCoins(state->whoseTurn, state , 0);
    $$$$$:  473-block  0
call    0 never executed
        -:  474:
    #####:  475:  return 0;
        -:  476:}
        -:  477:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  478:int isGameOver(struct gameState *state) {
    $$$$$:  478-block  0
        -:  479:  int i;
        -:  480:  int j;
        -:  481:	
        -:  482:  //if stack of Province cards is empty, the game ends
    #####:  483:  if (state->supplyCount[province] == 0)
    $$$$$:  483-block  0
branch  0 never executed
branch  1 never executed
        -:  484:    {
    #####:  485:      return 1;
    $$$$$:  485-block  0
        -:  486:    }
        -:  487:
        -:  488:  //if three supply pile are at 0, the game ends
    #####:  489:  j = 0;
    #####:  490:  for (i = 0; i < 25; i++)
    $$$$$:  490-block  0
    $$$$$:  490-block  1
    $$$$$:  490-block  2
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if (state->supplyCount[i] == 0)
    $$$$$:  492-block  0
branch  0 never executed
branch  1 never executed
        -:  493:	{
    #####:  494:	  j++;
    $$$$$:  494-block  0
        -:  495:	}
        -:  496:    }
    #####:  497:  if ( j >= 3)
    $$$$$:  497-block  0
branch  0 never executed
branch  1 never executed
        -:  498:    {
    #####:  499:      return 1;
    $$$$$:  499-block  0
        -:  500:    }
        -:  501:
    #####:  502:  return 0;
    $$$$$:  502-block  0
        -:  503:}
        -:  504:
function scoreFor called 20 returned 100% blocks executed 38%
       20:  505:int scoreFor (int player, struct gameState *state) {
       20:  505-block  0
        -:  506:
        -:  507:  int i;
       20:  508:  int score = 0;
        -:  509:  //score from hand
      120:  510:  for (i = 0; i < state->handCount[player]; i++)
       20:  510-block  0
      100:  510-block  1
      120:  510-block  2
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  511:    {
      100:  512:      if (state->hand[player][i] == curse) { score = score - 1; };
      100:  512-block  0
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
       20:  512-block  1
      100:  513:      if (state->hand[player][i] == estate) { score = score + 1; };
      100:  513-block  0
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        4:  513-block  1
      100:  514:      if (state->hand[player][i] == duchy) { score = score + 3; };
      100:  514-block  0
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        4:  514-block  1
      100:  515:      if (state->hand[player][i] == province) { score = score + 6; };
      100:  515-block  0
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        4:  515-block  1
      100:  516:      if (state->hand[player][i] == great_hall) { score = score + 1; };
      100:  516-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    $$$$$:  516-block  1
      100:  517:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
      100:  517-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    $$$$$:  517-block  1
call    2 never executed
        -:  518:    }
        -:  519:
        -:  520:  //score from discard
       20:  521:  for (i = 0; i < state->discardCount[player]; i++)
       20:  521-block  0
    $$$$$:  521-block  1
       20:  521-block  2
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  522:    {
    #####:  523:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  523-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  523-block  1
    #####:  524:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  524-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  524-block  1
    #####:  525:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  525-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  525-block  1
    #####:  526:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  526-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  526-block  1
    #####:  527:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  527-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  527-block  1
    #####:  528:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  528-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  528-block  1
call    2 never executed
        -:  529:    }
        -:  530:
        -:  531:  //score from deck
       20:  532:  for (i = 0; i < state->discardCount[player]; i++)
       20:  532-block  0
    $$$$$:  532-block  1
       20:  532-block  2
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  533:    {
    #####:  534:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  534-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  534-block  1
    #####:  535:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  535-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  535-block  1
    #####:  536:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  536-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  536-block  1
    #####:  537:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  537-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  537-block  1
    #####:  538:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  538-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  538-block  1
    #####:  539:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  539-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  539-block  1
call    2 never executed
        -:  540:    }
        -:  541:
       20:  542:  return score;
       20:  542-block  0
        -:  543:}
        -:  544:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
    $$$$$:  545-block  0
        -:  546:  int i;	
        -:  547:  int j;
        -:  548:  int highScore;
        -:  549:  int currentPlayer;
        -:  550:
        -:  551:  //get score for each player
    #####:  552:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  552-block  0
    $$$$$:  552-block  1
    $$$$$:  552-block  2
branch  0 never executed
branch  1 never executed
        -:  553:    {
        -:  554:      //set unused player scores to -9999
    #####:  555:      if (i >= state->numPlayers)
    $$$$$:  555-block  0
branch  0 never executed
branch  1 never executed
        -:  556:	{
    #####:  557:	  players[i] = -9999;
    $$$$$:  557-block  0
        -:  558:	}
        -:  559:      else
        -:  560:	{
    #####:  561:	  players[i] = scoreFor (i, state);
    $$$$$:  561-block  0
call    0 never executed
        -:  562:	}
        -:  563:    }
        -:  564:
        -:  565:  //find highest score
    #####:  566:  j = 0;
    #####:  567:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  567-block  0
    $$$$$:  567-block  1
    $$$$$:  567-block  2
branch  0 never executed
branch  1 never executed
        -:  568:    {
    #####:  569:      if (players[i] > players[j])
    $$$$$:  569-block  0
branch  0 never executed
branch  1 never executed
        -:  570:	{
    #####:  571:	  j = i;
    $$$$$:  571-block  0
        -:  572:	}
        -:  573:    }
    #####:  574:  highScore = players[j];
        -:  575:
        -:  576:  //add 1 to players who had less turns
    #####:  577:  currentPlayer = whoseTurn(state);
    $$$$$:  577-block  0
call    0 never executed
    #####:  578:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  578-block  0
    $$$$$:  578-block  1
branch  0 never executed
branch  1 never executed
        -:  579:    {
    #####:  580:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  580-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  580-block  1
branch  2 never executed
branch  3 never executed
        -:  581:	{
    #####:  582:	  players[i]++;
    $$$$$:  582-block  0
        -:  583:	}
        -:  584:    }
        -:  585:
        -:  586:  //find new highest score
    #####:  587:  j = 0;
    #####:  588:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  588-block  0
    $$$$$:  588-block  1
    $$$$$:  588-block  2
branch  0 never executed
branch  1 never executed
        -:  589:    {
    #####:  590:      if ( players[i] > players[j] )
    $$$$$:  590-block  0
branch  0 never executed
branch  1 never executed
        -:  591:	{
    #####:  592:	  j = i;
    $$$$$:  592-block  0
        -:  593:	}
        -:  594:    }
    #####:  595:  highScore = players[j];
        -:  596:
        -:  597:  //set winners in array to 1 and rest to 0
    #####:  598:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  598-block  0
    $$$$$:  598-block  1
    $$$$$:  598-block  2
branch  0 never executed
branch  1 never executed
        -:  599:    {
    #####:  600:      if ( players[i] == highScore )
    $$$$$:  600-block  0
branch  0 never executed
branch  1 never executed
        -:  601:	{
    #####:  602:	  players[i] = 1;
    $$$$$:  602-block  0
        -:  603:	}
        -:  604:      else
        -:  605:	{
    #####:  606:	  players[i] = 0;
    $$$$$:  606-block  0
        -:  607:	}
        -:  608:    }
        -:  609:
    #####:  610:  return 0;
    $$$$$:  610-block  0
        -:  611:}
        -:  612:
function drawCard called 576 returned 100% blocks executed 85%
      576:  613:int drawCard(int player, struct gameState *state)
      576:  613-block  0
        -:  614:{	int count;
        -:  615:  int deckCounter;
      576:  616:  if (state->deckCount[player] <= 0){//Deck is empty
      576:  616-block  0
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  617:    
        -:  618:    //Step 1 Shuffle the discard pile back into a deck
        -:  619:    int i;
        -:  620:    //Move discard to deck
        4:  621:    for (i = 0; i < state->discardCount[player];i++){
        4:  621-block  0
    $$$$$:  621-block  1
        4:  621-block  2
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  622:      state->deck[player][i] = state->discard[player][i];
    #####:  623:      state->discard[player][i] = -1;
        -:  624:    }
        -:  625:
        4:  626:    state->deckCount[player] = state->discardCount[player];
        4:  627:    state->discardCount[player] = 0;//Reset discard
        -:  628:
        -:  629:    //Shufffle the deck
        4:  630:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        4:  630-block  0
call    0 returned 100%
        -:  631:   
        -:  632:    if (DEBUG){//Debug statements
        -:  633:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  634:    }
        -:  635:    
        4:  636:    state->discardCount[player] = 0;
        -:  637:
        -:  638:    //Step 2 Draw Card
        4:  639:    count = state->handCount[player];//Get current player's hand count
        -:  640:    
        -:  641:    if (DEBUG){//Debug statements
        -:  642:      printf("Current hand count: %d\n", count);
        -:  643:    }
        -:  644:    
        4:  645:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  646:
        4:  647:    if (deckCounter == 0)
        4:  647-block  0
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:  648:      return -1;
        4:  648-block  0
        -:  649:
    #####:  650:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  651:    state->deckCount[player]--;
    #####:  652:    state->handCount[player]++;//Increment hand count
    $$$$$:  652-block  0
        -:  653:  }
        -:  654:
        -:  655:  else{
      572:  656:    int count = state->handCount[player];//Get current hand count for player
      572:  656-block  0
        -:  657:    int deckCounter;
        -:  658:    if (DEBUG){//Debug statements
        -:  659:      printf("Current hand count: %d\n", count);
        -:  660:    }
        -:  661:
      572:  662:    deckCounter = state->deckCount[player];//Create holder for the deck count
      572:  663:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      572:  664:    state->deckCount[player]--;
      572:  665:    state->handCount[player]++;//Increment hand count
      572:  665-block  0
        -:  666:  }
        -:  667:
      572:  668:  return 0;
      572:  668-block  0
        -:  669:}
        -:  670:
function getCost called 0 returned 0% blocks executed 0%
    #####:  671:int getCost(int cardNumber)
    $$$$$:  671-block  0
        -:  672:{
    #####:  673:  switch( cardNumber ) 
    $$$$$:  673-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  674:    {
        -:  675:    case curse:
    #####:  676:      return 0;
    $$$$$:  676-block  0
        -:  677:    case estate:
    #####:  678:      return 2;
    $$$$$:  678-block  0
        -:  679:    case duchy:
    #####:  680:      return 5;
    $$$$$:  680-block  0
        -:  681:    case province:
    #####:  682:      return 8;
    $$$$$:  682-block  0
        -:  683:    case copper:
    #####:  684:      return 0;
    $$$$$:  684-block  0
        -:  685:    case silver:
    #####:  686:      return 3;
    $$$$$:  686-block  0
        -:  687:    case gold:
    #####:  688:      return 6;
    $$$$$:  688-block  0
        -:  689:    case adventurer:
    #####:  690:      return 6;
    $$$$$:  690-block  0
        -:  691:    case council_room:
    #####:  692:      return 5;
    $$$$$:  692-block  0
        -:  693:    case feast:
    #####:  694:      return 4;
    $$$$$:  694-block  0
        -:  695:    case gardens:
    #####:  696:      return 4;
    $$$$$:  696-block  0
        -:  697:    case mine:
    #####:  698:      return 5;
    $$$$$:  698-block  0
        -:  699:    case remodel:
    #####:  700:      return 4;
    $$$$$:  700-block  0
        -:  701:    case smithy:
    #####:  702:      return 4;
    $$$$$:  702-block  0
        -:  703:    case village:
    #####:  704:      return 3;
    $$$$$:  704-block  0
        -:  705:    case baron:
    #####:  706:      return 4;
    $$$$$:  706-block  0
        -:  707:    case great_hall:
    #####:  708:      return 3;
    $$$$$:  708-block  0
        -:  709:    case minion:
    #####:  710:      return 5;
    $$$$$:  710-block  0
        -:  711:    case steward:
    #####:  712:      return 3;
    $$$$$:  712-block  0
        -:  713:    case tribute:
    #####:  714:      return 5;
    $$$$$:  714-block  0
        -:  715:    case ambassador:
    #####:  716:      return 3;
    $$$$$:  716-block  0
        -:  717:    case cutpurse:
    #####:  718:      return 4;
    $$$$$:  718-block  0
        -:  719:    case embargo: 
    #####:  720:      return 2;
    $$$$$:  720-block  0
        -:  721:    case outpost:
    #####:  722:      return 5;
    $$$$$:  722-block  0
        -:  723:    case salvager:
    #####:  724:      return 4;
    $$$$$:  724-block  0
        -:  725:    case sea_hag:
    #####:  726:      return 4;
    $$$$$:  726-block  0
        -:  727:    case treasure_map:
    #####:  728:      return 4;
    $$$$$:  728-block  0
        -:  729:    }
        -:  730:	
    #####:  731:  return -1;
    $$$$$:  731-block  0
        -:  732:}
        -:  733:
function cardEffect called 32 returned 100% blocks executed 4%
       32:  734:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
       32:  734-block  0
        -:  735:{
       32:  736:  int i =0;
        -:  737:  int j;
        -:  738:  int k;
        -:  739:  int x;
        -:  740:  int index;
       32:  741:  int currentPlayer = whoseTurn(state);
       32:  741-block  0
call    0 returned 100%
       32:  742:  int nextPlayer = currentPlayer + 1;
        -:  743:
       32:  744:  int tributeRevealedCards[2] = {-1, -1};
        -:  745:  int temphand[MAX_HAND];// moved above the if statement
       32:  746:  int drawntreasure=0;
       32:  747:  int cardDrawn = 0;
       32:  748:  int z = 0;// this is the counter for the temp hand
       32:  749:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  750:    nextPlayer = 0;
    $$$$$:  750-block  0
        -:  751:  }
        -:  752:  
        -:  753:	
        -:  754:  //uses switch to select card and perform actions
       32:  755:  switch( card ) 
       32:  755-block  0
branch  0 taken 38%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 13%
branch  7 taken 13%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 38%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  756:    {
        -:  757:    case adventurer:
        -:  758:    
       12:  759:        return playMyAdventurer(z, cardDrawn, drawntreasure, temphand, currentPlayer, state, handPos );
       12:  759-block  0
call    0 returned 100%
        -:  760:        
        -:  761:    case council_room:
        -:  762:      //+4 Cards
    #####:  763:      for (i = 0; i < 4; i++)
    $$$$$:  763-block  0
    $$$$$:  763-block  1
branch  0 never executed
branch  1 never executed
        -:  764:	{
    #####:  765:	  drawCard(currentPlayer, state);
    $$$$$:  765-block  0
call    0 never executed
        -:  766:	}
        -:  767:			
        -:  768:      //+1 Buy
    #####:  769:      state->numBuys++;
        -:  770:			
        -:  771:      //Each other player draws a card
    #####:  772:      for (i = 0; i < state->numPlayers; i++)
    $$$$$:  772-block  0
    $$$$$:  772-block  1
    $$$$$:  772-block  2
branch  0 never executed
branch  1 never executed
        -:  773:	{
    #####:  774:	  if ( i != currentPlayer )
    $$$$$:  774-block  0
branch  0 never executed
branch  1 never executed
        -:  775:	    {
    #####:  776:	      drawCard(i, state);
    $$$$$:  776-block  0
call    0 never executed
        -:  777:	    }
        -:  778:	}
        -:  779:			
        -:  780:      //put played card in played card pile
    #####:  781:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  781-block  0
call    0 never executed
        -:  782:			
    #####:  783:      return 0;
        -:  784:			
        -:  785:    case feast:
        -:  786:      //gain card with cost up to 5
        -:  787:      //Backup hand
    #####:  788:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  788-block  0
    $$$$$:  788-block  1
    $$$$$:  788-block  2
branch  0 never executed
branch  1 never executed
    #####:  789:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  790:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  791:      }
        -:  792:      //Backup hand
        -:  793:
        -:  794:      //Update Coins for Buy
    #####:  795:      updateCoins(currentPlayer, state, 5);
    $$$$$:  795-block  0
call    0 never executed
    #####:  796:      x = 1;//Condition to loop on
    #####:  797:      while( x == 1) {//Buy one card
    $$$$$:  797-block  0
branch  0 never executed
branch  1 never executed
    #####:  798:	if (supplyCount(choice1, state) <= 0){
    $$$$$:  798-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  799:	  if (DEBUG)
        -:  800:	    printf("None of that card left, sorry!\n");
        -:  801:
        -:  802:	  if (DEBUG){
        -:  803:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  804:	  }
        -:  805:	}
    #####:  806:	else if (state->coins < getCost(choice1)){
    $$$$$:  806-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  807:	  printf("That card is too expensive!\n");
    $$$$$:  807-block  0
call    0 never executed
        -:  808:
        -:  809:	  if (DEBUG){
        -:  810:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  811:	  }
        -:  812:	}
        -:  813:	else{
        -:  814:
        -:  815:	  if (DEBUG){
        -:  816:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  817:	  }
        -:  818:
    #####:  819:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    $$$$$:  819-block  0
call    0 never executed
    #####:  820:	  x = 0;//No more buying cards
        -:  821:
        -:  822:	  if (DEBUG){
        -:  823:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  824:	  }
        -:  825:
        -:  826:	}
        -:  827:      }     
        -:  828:
        -:  829:      //Reset Hand
    #####:  830:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  830-block  0
    $$$$$:  830-block  1
    $$$$$:  830-block  2
branch  0 never executed
branch  1 never executed
    #####:  831:	state->hand[currentPlayer][i] = temphand[i];
    #####:  832:	temphand[i] = -1;
        -:  833:      }
        -:  834:      //Reset Hand
        -:  835:      			
    #####:  836:      return 0;
    $$$$$:  836-block  0
        -:  837:			
        -:  838:    case gardens:
    #####:  839:        return playMyGardens();
    $$$$$:  839-block  0
call    0 never executed
        -:  840: 
        -:  841:			
        -:  842:    case mine:
    #####:  843:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  844:
    #####:  845:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    $$$$$:  845-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  845-block  1
branch  2 never executed
branch  3 never executed
        -:  846:	{
    #####:  847:	  return -1;
    $$$$$:  847-block  0
        -:  848:	}
        -:  849:		
    #####:  850:      if (choice2 > treasure_map || choice2 < curse)
    $$$$$:  850-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  850-block  1
branch  2 never executed
branch  3 never executed
        -:  851:	{
    #####:  852:	  return -1;
    $$$$$:  852-block  0
        -:  853:	}
        -:  854:
    #####:  855:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
    $$$$$:  855-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  856:	{
    #####:  857:	  return -1;
    $$$$$:  857-block  0
        -:  858:	}
        -:  859:
    #####:  860:      gainCard(choice2, state, 2, currentPlayer);
    $$$$$:  860-block  0
call    0 never executed
        -:  861:
        -:  862:      //discard card from hand
    #####:  863:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  864:
        -:  865:      //discard trashed card
    #####:  866:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  866-block  0
    $$$$$:  866-block  1
branch  0 never executed
branch  1 never executed
        -:  867:	{
    #####:  868:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  868-block  0
branch  0 never executed
branch  1 never executed
        -:  869:	    {
    #####:  870:	      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  870-block  0
call    0 never executed
    #####:  871:	      break;
        -:  872:	    }
        -:  873:	}
        -:  874:			
    #####:  875:      return 0;
    $$$$$:  875-block  0
        -:  876:			
        -:  877:    case remodel:
    #####:  878:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  879:
    #####:  880:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
    $$$$$:  880-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  881:	{
    #####:  882:	  return -1;
    $$$$$:  882-block  0
        -:  883:	}
        -:  884:
    #####:  885:      gainCard(choice2, state, 0, currentPlayer);
    $$$$$:  885-block  0
call    0 never executed
        -:  886:
        -:  887:      //discard card from hand
    #####:  888:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  889:
        -:  890:      //discard trashed card
    #####:  891:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$:  891-block  0
    $$$$$:  891-block  1
branch  0 never executed
branch  1 never executed
        -:  892:	{
    #####:  893:	  if (state->hand[currentPlayer][i] == j)
    $$$$$:  893-block  0
branch  0 never executed
branch  1 never executed
        -:  894:	    {
    #####:  895:	      discardCard(i, currentPlayer, state, 0);			
    $$$$$:  895-block  0
call    0 never executed
    #####:  896:	      break;
        -:  897:	    }
        -:  898:	}
        -:  899:
        -:  900:
    #####:  901:      return 0;
    $$$$$:  901-block  0
        -:  902:		
        -:  903:    case smithy:
        -:  904:      
        4:  905:      return playMySmithy(i, currentPlayer, state, handPos);
        4:  905-block  0
call    0 returned 100%
        -:  906:
        -:  907:		
        -:  908:    case village:
        -:  909:    
        4:  910:      return playMyVillage(currentPlayer, state, handPos);
        4:  910-block  0
call    0 returned 100%
        -:  911:    
        -:  912:		
        -:  913:    case baron:
    #####:  914:      state->numBuys++;//Increase buys by 1!
    #####:  915:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  915-block  0
branch  0 never executed
branch  1 never executed
    #####:  916:	int p = 0;//Iterator for hand!
    #####:  917:	int card_not_discarded = 1;//Flag for discard set!
    #####:  918:	while(card_not_discarded){
    $$$$$:  918-block  0
    $$$$$:  918-block  1
branch  0 never executed
branch  1 never executed
    $$$$$:  918-block  2
    #####:  919:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  919-block  0
branch  0 never executed
branch  1 never executed
    #####:  920:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  921:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  922:	    state->discardCount[currentPlayer]++;
    #####:  923:	    for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  923-block  0
    $$$$$:  923-block  1
    $$$$$:  923-block  2
branch  0 never executed
branch  1 never executed
    #####:  924:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  925:	    }
    #####:  926:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  927:	    state->handCount[currentPlayer]--;
    #####:  928:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  928-block  0
        -:  929:	  }
    #####:  930:	  else if (p > state->handCount[currentPlayer]){
    $$$$$:  930-block  0
branch  0 never executed
branch  1 never executed
        -:  931:	    if(DEBUG) {
        -:  932:	      printf("No estate cards in your hand, invalid choice\n");
        -:  933:	      printf("Must gain an estate if there are any\n");
        -:  934:	    }
    #####:  935:	    if (supplyCount(estate, state) > 0){
    $$$$$:  935-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  936:	      gainCard(estate, state, 0, currentPlayer);
    $$$$$:  936-block  0
call    0 never executed
    #####:  937:	      state->supplyCount[estate]--;//Decrement estates
    #####:  938:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  939:		isGameOver(state);
    $$$$$:  939-block  0
call    0 never executed
        -:  940:	      }
        -:  941:	    }
    #####:  942:	    card_not_discarded = 0;//Exit the loop
    $$$$$:  942-block  0
        -:  943:	  }
        -:  944:			    
        -:  945:	  else{
    #####:  946:	    p++;//Next card
    $$$$$:  946-block  0
        -:  947:	  }
        -:  948:	}
        -:  949:      }
        -:  950:			    
        -:  951:      else{
    #####:  952:	if (supplyCount(estate, state) > 0){
    $$$$$:  952-block  0
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  953:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    $$$$$:  953-block  0
call    0 never executed
    #####:  954:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  955:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  956:	    isGameOver(state);
    $$$$$:  956-block  0
call    0 never executed
        -:  957:	  }
        -:  958:	}
        -:  959:      }
        -:  960:	    
        -:  961:      
    #####:  962:      return 0;
    $$$$$:  962-block  0
        -:  963:		
        -:  964:    case great_hall:
        -:  965:      //+1 Card
    #####:  966:      drawCard(currentPlayer, state);
    $$$$$:  966-block  0
call    0 never executed
        -:  967:			
        -:  968:      //+1 Actions
    #####:  969:      state->numActions++;
        -:  970:			
        -:  971:      //discard card from hand
    #####:  972:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  973:      return 0;
        -:  974:		
        -:  975:    case minion:
        -:  976:      //+1 action
    #####:  977:      state->numActions++;
        -:  978:			
        -:  979:      //discard card from hand
    #####:  980:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  980-block  0
call    0 never executed
        -:  981:			
    #####:  982:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  983:	{
    #####:  984:	  state->coins = state->coins + 2;
    $$$$$:  984-block  0
        -:  985:	}
        -:  986:			
    #####:  987:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
    $$$$$:  987-block  0
branch  0 never executed
branch  1 never executed
        -:  988:	{
        -:  989:	  //discard hand
    #####:  990:	  while(numHandCards(state) > 0)
    $$$$$:  990-block  0
    $$$$$:  990-block  1
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  991:	    {
    #####:  992:	      discardCard(handPos, currentPlayer, state, 0);
    $$$$$:  992-block  0
call    0 never executed
        -:  993:	    }
        -:  994:				
        -:  995:	  //draw 4
    #####:  996:	  for (i = 0; i < 4; i++)
    $$$$$:  996-block  0
    $$$$$:  996-block  1
branch  0 never executed
branch  1 never executed
        -:  997:	    {
    #####:  998:	      drawCard(currentPlayer, state);
    $$$$$:  998-block  0
call    0 never executed
        -:  999:	    }
        -: 1000:				
        -: 1001:	  //other players discard hand and redraw if hand size > 4
    #####: 1002:	  for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1002-block  0
    $$$$$: 1002-block  1
    $$$$$: 1002-block  2
branch  0 never executed
branch  1 never executed
        -: 1003:	    {
    #####: 1004:	      if (i != currentPlayer)
    $$$$$: 1004-block  0
branch  0 never executed
branch  1 never executed
        -: 1005:		{
    #####: 1006:		  if ( state->handCount[i] > 4 )
    $$$$$: 1006-block  0
branch  0 never executed
branch  1 never executed
        -: 1007:		    {
        -: 1008:		      //discard hand
    #####: 1009:		      while( state->handCount[i] > 0 )
    $$$$$: 1009-block  0
    $$$$$: 1009-block  1
branch  0 never executed
branch  1 never executed
        -: 1010:			{
    #####: 1011:			  discardCard(handPos, i, state, 0);
    $$$$$: 1011-block  0
call    0 never executed
        -: 1012:			}
        -: 1013:							
        -: 1014:		      //draw 4
    #####: 1015:		      for (j = 0; j < 4; j++)
    $$$$$: 1015-block  0
    $$$$$: 1015-block  1
branch  0 never executed
branch  1 never executed
        -: 1016:			{
    #####: 1017:			  drawCard(i, state);
    $$$$$: 1017-block  0
call    0 never executed
        -: 1018:			}
        -: 1019:		    }
        -: 1020:		}
        -: 1021:	    }
        -: 1022:				
        -: 1023:	}
    #####: 1024:      return 0;
    $$$$$: 1024-block  0
        -: 1025:		
        -: 1026:    case steward:
        -: 1027:    
       12: 1028:        return playMySteward(choice1, choice2, choice3, currentPlayer, state, handPos);
       12: 1028-block  0
call    0 returned 100%
        -: 1029:
        -: 1030:		
        -: 1031:    case tribute:
    #####: 1032:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$: 1032-block  0
branch  0 never executed
branch  1 never executed
    #####: 1033:	if (state->deckCount[nextPlayer] > 0){
    $$$$$: 1033-block  0
branch  0 never executed
branch  1 never executed
    #####: 1034:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1035:	  state->deckCount[nextPlayer]--;
    $$$$$: 1035-block  0
        -: 1036:	}
    #####: 1037:	else if (state->discardCount[nextPlayer] > 0){
    $$$$$: 1037-block  0
branch  0 never executed
branch  1 never executed
    #####: 1038:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1039:	  state->discardCount[nextPlayer]--;
    $$$$$: 1039-block  0
        -: 1040:	}
        -: 1041:	else{
        -: 1042:	  //No Card to Reveal
        -: 1043:	  if (DEBUG){
        -: 1044:	    printf("No cards to reveal\n");
        -: 1045:	  }
        -: 1046:	}
        -: 1047:      }
        -: 1048:	    
        -: 1049:      else{
    #####: 1050:	if (state->deckCount[nextPlayer] == 0){
    $$$$$: 1050-block  0
branch  0 never executed
branch  1 never executed
    #####: 1051:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$: 1051-block  0
    $$$$$: 1051-block  1
    $$$$$: 1051-block  2
branch  0 never executed
branch  1 never executed
    #####: 1052:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1053:	    state->deckCount[nextPlayer]++;
    #####: 1054:	    state->discard[nextPlayer][i] = -1;
    #####: 1055:	    state->discardCount[nextPlayer]--;
        -: 1056:	  }
        -: 1057:			    
    #####: 1058:	  shuffle(nextPlayer,state);//Shuffle the deck
    $$$$$: 1058-block  0
call    0 never executed
        -: 1059:	} 
    #####: 1060:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1061:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1062:	state->deckCount[nextPlayer]--;
    #####: 1063:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1064:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1065:	state->deckCount[nextPlayer]--;
    $$$$$: 1065-block  0
        -: 1066:      }    
        -: 1067:		       
    #####: 1068:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    $$$$$: 1068-block  0
branch  0 never executed
branch  1 never executed
    #####: 1069:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1070:	state->playedCardCount++;
    #####: 1071:	tributeRevealedCards[1] = -1;
    $$$$$: 1071-block  0
        -: 1072:      }
        -: 1073:
    #####: 1074:      for (i = 0; i <= 2; i ++){
    $$$$$: 1074-block  0
    $$$$$: 1074-block  1
    $$$$$: 1074-block  2
branch  0 never executed
branch  1 never executed
    #####: 1075:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$: 1075-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1075-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1075-block  2
branch  4 never executed
branch  5 never executed
    #####: 1076:	  state->coins += 2;
    $$$$$: 1076-block  0
        -: 1077:	}
        -: 1078:		    
    #####: 1079:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    $$$$$: 1079-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1079-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1079-block  2
branch  4 never executed
branch  5 never executed
    $$$$$: 1079-block  3
branch  6 never executed
branch  7 never executed
    $$$$$: 1079-block  4
branch  8 never executed
branch  9 never executed
    #####: 1080:	  drawCard(currentPlayer, state);
    $$$$$: 1080-block  0
call    0 never executed
    #####: 1081:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1082:	}
        -: 1083:	else{//Action Card
    #####: 1084:	  state->numActions = state->numActions + 2;
    $$$$$: 1084-block  0
        -: 1085:	}
        -: 1086:      }
        -: 1087:	    
    #####: 1088:      return 0;
    $$$$$: 1088-block  0
        -: 1089:		
        -: 1090:    case ambassador:
    #####: 1091:      j = 0;		//used to check if player has enough cards to discard
        -: 1092:
    #####: 1093:      if (choice2 > 2 || choice2 < 0)
    $$$$$: 1093-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1093-block  1
branch  2 never executed
branch  3 never executed
        -: 1094:	{
    #####: 1095:	  return -1;				
    $$$$$: 1095-block  0
        -: 1096:	}
        -: 1097:
    #####: 1098:      if (choice1 == handPos)
    $$$$$: 1098-block  0
branch  0 never executed
branch  1 never executed
        -: 1099:	{
    #####: 1100:	  return -1;
    $$$$$: 1100-block  0
        -: 1101:	}
        -: 1102:
    #####: 1103:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1103-block  0
    $$$$$: 1103-block  1
    $$$$$: 1103-block  2
branch  0 never executed
branch  1 never executed
        -: 1104:	{
    #####: 1105:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
    $$$$$: 1105-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1105-block  1
branch  2 never executed
branch  3 never executed
    $$$$$: 1105-block  2
branch  4 never executed
branch  5 never executed
        -: 1106:	    {
    #####: 1107:	      j++;
    $$$$$: 1107-block  0
        -: 1108:	    }
        -: 1109:	}
    #####: 1110:      if (j < choice2)
    $$$$$: 1110-block  0
branch  0 never executed
branch  1 never executed
        -: 1111:	{
    #####: 1112:	  return -1;				
    $$$$$: 1112-block  0
        -: 1113:	}
        -: 1114:
        -: 1115:      if (DEBUG) 
        -: 1116:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1117:
        -: 1118:      //increase supply count for choosen card by amount being discarded
    #####: 1119:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1120:			
        -: 1121:      //each other player gains a copy of revealed card
    #####: 1122:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1122-block  0
    $$$$$: 1122-block  1
    $$$$$: 1122-block  2
branch  0 never executed
branch  1 never executed
        -: 1123:	{
    #####: 1124:	  if (i != currentPlayer)
    $$$$$: 1124-block  0
branch  0 never executed
branch  1 never executed
        -: 1125:	    {
    #####: 1126:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    $$$$$: 1126-block  0
call    0 never executed
        -: 1127:	    }
        -: 1128:	}
        -: 1129:
        -: 1130:      //discard played card from hand
    #####: 1131:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1131-block  0
call    0 never executed
        -: 1132:
        -: 1133:      //trash copies of cards returned to supply
    #####: 1134:      for (j = 0; j < choice2; j++)
    $$$$$: 1134-block  0
    $$$$$: 1134-block  1
branch  0 never executed
branch  1 never executed
        -: 1135:	{
    #####: 1136:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1136-block  0
    $$$$$: 1136-block  1
    $$$$$: 1136-block  2
branch  0 never executed
branch  1 never executed
        -: 1137:	    {
    #####: 1138:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
    $$$$$: 1138-block  0
branch  0 never executed
branch  1 never executed
        -: 1139:		{
    #####: 1140:		  discardCard(i, currentPlayer, state, 1);
    $$$$$: 1140-block  0
call    0 never executed
    #####: 1141:		  break;
        -: 1142:		}
        -: 1143:	    }
        -: 1144:	}			
        -: 1145:
    #####: 1146:      return 0;
    $$$$$: 1146-block  0
        -: 1147:		
        -: 1148:    case cutpurse:
        -: 1149:
    #####: 1150:      updateCoins(currentPlayer, state, 2);
    $$$$$: 1150-block  0
call    0 never executed
    #####: 1151:      for (i = 0; i < state->numPlayers; i++)
    $$$$$: 1151-block  0
    $$$$$: 1151-block  1
branch  0 never executed
branch  1 never executed
        -: 1152:	{
    #####: 1153:	  if (i != currentPlayer)
    $$$$$: 1153-block  0
branch  0 never executed
branch  1 never executed
        -: 1154:	    {
    #####: 1155:	      for (j = 0; j < state->handCount[i]; j++)
    $$$$$: 1155-block  0
    $$$$$: 1155-block  1
    $$$$$: 1155-block  2
branch  0 never executed
branch  1 never executed
        -: 1156:		{
    #####: 1157:		  if (state->hand[i][j] == copper)
    $$$$$: 1157-block  0
branch  0 never executed
branch  1 never executed
        -: 1158:		    {
    #####: 1159:		      discardCard(j, i, state, 0);
    $$$$$: 1159-block  0
call    0 never executed
    #####: 1160:		      break;
        -: 1161:		    }
    #####: 1162:		  if (j == state->handCount[i])
    $$$$$: 1162-block  0
branch  0 never executed
branch  1 never executed
        -: 1163:		    {
    #####: 1164:		      for (k = 0; k < state->handCount[i]; k++)
    $$$$$: 1164-block  0
    $$$$$: 1164-block  1
    $$$$$: 1164-block  2
branch  0 never executed
branch  1 never executed
        -: 1165:			{
        -: 1166:			  if (DEBUG)
        -: 1167:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1168:			}	
    #####: 1169:		      break;
    $$$$$: 1169-block  0
        -: 1170:		    }		
        -: 1171:		}
        -: 1172:					
        -: 1173:	    }
        -: 1174:				
        -: 1175:	}				
        -: 1176:
        -: 1177:      //discard played card from hand
    #####: 1178:      discardCard(handPos, currentPlayer, state, 0);			
    $$$$$: 1178-block  0
call    0 never executed
        -: 1179:
    #####: 1180:      return 0;
        -: 1181:
        -: 1182:		
        -: 1183:    case embargo: 
        -: 1184:      //+2 Coins
    #####: 1185:      state->coins = state->coins + 2;
        -: 1186:			
        -: 1187:      //see if selected pile is in play
    #####: 1188:      if ( state->supplyCount[choice1] == -1 )
    $$$$$: 1188-block  0
branch  0 never executed
branch  1 never executed
        -: 1189:	{
    #####: 1190:	  return -1;
    $$$$$: 1190-block  0
        -: 1191:	}
        -: 1192:			
        -: 1193:      //add embargo token to selected supply pile
    #####: 1194:      state->embargoTokens[choice1]++;
        -: 1195:			
        -: 1196:      //trash card
    #####: 1197:      discardCard(handPos, currentPlayer, state, 1);		
    $$$$$: 1197-block  0
call    0 never executed
    #####: 1198:      return 0;
        -: 1199:		
        -: 1200:    case outpost:
        -: 1201:      //set outpost flag
    #####: 1202:      state->outpostPlayed++;
        -: 1203:			
        -: 1204:      //discard card
    #####: 1205:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1205-block  0
call    0 never executed
    #####: 1206:      return 0;
        -: 1207:		
        -: 1208:    case salvager:
        -: 1209:      //+1 buy
    #####: 1210:      state->numBuys++;
        -: 1211:			
    #####: 1212:      if (choice1)
    $$$$$: 1212-block  0
branch  0 never executed
branch  1 never executed
        -: 1213:	{
        -: 1214:	  //gain coins equal to trashed card
    #####: 1215:	  state->coins = state->coins + getCost( handCard(choice1, state) );
    $$$$$: 1215-block  0
call    0 never executed
call    1 never executed
        -: 1216:	  //trash card
    #####: 1217:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1218:	}
        -: 1219:			
        -: 1220:      //discard card
    #####: 1221:      discardCard(handPos, currentPlayer, state, 0);
    $$$$$: 1221-block  0
call    0 never executed
    #####: 1222:      return 0;
        -: 1223:		
        -: 1224:    case sea_hag:
    #####: 1225:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1225-block  0
    $$$$$: 1225-block  1
    $$$$$: 1225-block  2
branch  0 never executed
branch  1 never executed
    #####: 1226:	if (i != currentPlayer){
    $$$$$: 1226-block  0
branch  0 never executed
branch  1 never executed
    #####: 1227:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1228:	  state->discardCount[i]++;
    #####: 1229:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    $$$$$: 1229-block  0
        -: 1230:	}
        -: 1231:      }
    #####: 1232:      return 0;
    $$$$$: 1232-block  0
        -: 1233:		
        -: 1234:    case treasure_map:
        -: 1235:      //search hand for another treasure_map
    #####: 1236:      index = -1;
    #####: 1237:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    $$$$$: 1237-block  0
    $$$$$: 1237-block  1
    $$$$$: 1237-block  2
branch  0 never executed
branch  1 never executed
        -: 1238:	{
    #####: 1239:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
    $$$$$: 1239-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1239-block  1
branch  2 never executed
branch  3 never executed
        -: 1240:	    {
    #####: 1241:	      index = i;
    #####: 1242:	      break;
    $$$$$: 1242-block  0
        -: 1243:	    }
        -: 1244:	}
    #####: 1245:      if (index > -1)
    $$$$$: 1245-block  0
branch  0 never executed
branch  1 never executed
        -: 1246:	{
        -: 1247:	  //trash both treasure cards
    #####: 1248:	  discardCard(handPos, currentPlayer, state, 1);
    $$$$$: 1248-block  0
call    0 never executed
    #####: 1249:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1250:
        -: 1251:	  //gain 4 Gold cards
    #####: 1252:	  for (i = 0; i < 4; i++)
    $$$$$: 1252-block  0
branch  0 never executed
branch  1 never executed
        -: 1253:	    {
    #####: 1254:	      gainCard(gold, state, 1, currentPlayer);
    $$$$$: 1254-block  0
call    0 never executed
        -: 1255:	    }
        -: 1256:				
        -: 1257:	  //return success
    #####: 1258:	  return 1;
    $$$$$: 1258-block  0
        -: 1259:	}
        -: 1260:			
        -: 1261:      //no second treasure_map found in hand
    #####: 1262:      return -1;
    $$$$$: 1262-block  0
        -: 1263:    }
        -: 1264:	
       32: 1265:  return -1;
    $$$$$: 1265-block  0
       32: 1265-block  1
        -: 1266:}
        -: 1267:
function discardCard called 60 returned 100% blocks executed 89%
       60: 1268:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
       60: 1268-block  0
        -: 1269:{
        -: 1270:	
        -: 1271:  //if card is not trashed, added to Played pile 
       60: 1272:  if (trashFlag < 1)
       60: 1272-block  0
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1273:    {
        -: 1274:      //add card to played pile
       48: 1275:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       48: 1276:      state->playedCardCount++;
       48: 1276-block  0
        -: 1277:    }
        -: 1278:	
        -: 1279:  //set played card to -1
       60: 1280:  state->hand[currentPlayer][handPos] = -1;
        -: 1281:	
        -: 1282:  //remove card from player's hand
       60: 1283:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
       60: 1283-block  0
branch  0 taken 13% (fallthrough)
branch  1 taken 87%
        -: 1284:    {
        -: 1285:      //reduce number of cards in hand
        8: 1286:      state->handCount[currentPlayer]--;
        8: 1286-block  0
        -: 1287:    }
       52: 1288:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
       52: 1288-block  0
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1289:    {
        -: 1290:      //reduce number of cards in hand
    #####: 1291:      state->handCount[currentPlayer]--;
    $$$$$: 1291-block  0
        -: 1292:    }
        -: 1293:  else 	
        -: 1294:    {
        -: 1295:      //replace discarded card with last card in hand
       52: 1296:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1297:      //set last card to -1
       52: 1298:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1299:      //reduce number of cards in hand
       52: 1300:      state->handCount[currentPlayer]--;
       52: 1300-block  0
        -: 1301:    }
        -: 1302:	
       60: 1303:  return 0;
       60: 1303-block  0
        -: 1304:}
        -: 1305:
function gainCard called 16 returned 100% blocks executed 100%
       16: 1306:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
       16: 1306-block  0
        -: 1307:{
        -: 1308:  //Note: supplyPos is enum of choosen card
        -: 1309:	
        -: 1310:  //check if supply pile is empty (0) or card is not used in game (-1)
       16: 1311:  if ( supplyCount(supplyPos, state) < 1 )
       16: 1311-block  0
call    0 returned 100%
branch  1 taken 25% (fallthrough)
branch  2 taken 75%
        -: 1312:    {
        4: 1313:      return -1;
        4: 1313-block  0
        -: 1314:    }
        -: 1315:	
        -: 1316:  //added card for [whoseTurn] current player:
        -: 1317:  // toFlag = 0 : add to discard
        -: 1318:  // toFlag = 1 : add to deck
        -: 1319:  // toFlag = 2 : add to hand
        -: 1320:
       12: 1321:  if (toFlag == 1)
       12: 1321-block  0
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1322:    {
        4: 1323:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        4: 1324:      state->deckCount[player]++;
        4: 1324-block  0
        -: 1325:    }
        8: 1326:  else if (toFlag == 2)
        8: 1326-block  0
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1327:    {
        4: 1328:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        4: 1329:      state->handCount[player]++;
        4: 1329-block  0
        -: 1330:    }
        -: 1331:  else
        -: 1332:    {
        4: 1333:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1334:      state->discardCount[player]++;
        4: 1334-block  0
        -: 1335:    }
        -: 1336:	
        -: 1337:  //decrease number in supply pile
       12: 1338:  state->supplyCount[supplyPos]--;
        -: 1339:	 
       12: 1340:  return 0;
       12: 1340-block  0
        -: 1341:}
        -: 1342:
function updateCoins called 116 returned 100% blocks executed 100%
      116: 1343:int updateCoins(int player, struct gameState *state, int bonus)
      116: 1343-block  0
        -: 1344:{
        -: 1345:  int i;
        -: 1346:	
        -: 1347:  //reset coin count
      116: 1348:  state->coins = 0;
        -: 1349:
        -: 1350:  //add coins for each Treasure card in player's hand
      696: 1351:  for (i = 0; i < state->handCount[player]; i++)
      116: 1351-block  0
      580: 1351-block  1
      696: 1351-block  2
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1352:    {
      580: 1353:      if (state->hand[player][i] == copper)
      580: 1353-block  0
branch  0 taken 76% (fallthrough)
branch  1 taken 24%
        -: 1354:	{
      440: 1355:	  state->coins += 1;
      440: 1355-block  0
        -: 1356:	}
      140: 1357:      else if (state->hand[player][i] == silver)
      140: 1357-block  0
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -: 1358:	{
       20: 1359:	  state->coins += 2;
       20: 1359-block  0
        -: 1360:	}
      120: 1361:      else if (state->hand[player][i] == gold)
      120: 1361-block  0
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -: 1362:	{
       20: 1363:	  state->coins += 3;
       20: 1363-block  0
        -: 1364:	}	
        -: 1365:    }	
        -: 1366:
        -: 1367:  //add bonus
      116: 1368:  state->coins += bonus;
        -: 1369:
      116: 1370:  return 0;
      116: 1370-block  0
        -: 1371:}
        -: 1372:
        -: 1373:
        -: 1374:
        -: 1375://end of dominion.c
