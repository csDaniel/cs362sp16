For the purpose of validation, URLs are composed of 5 distinct parts--the scheme (e.g. http), the authority (e.g. a server hostname, like www.google.com), the port number (e.g. 80 for http), the path (to the resource requested), and the query (an extra string passed to the server).

testIsValid makes use of pre-defined collections of these distinct parts to generate the URLs it is testing. The predefined collections consist of 9 choices for scheme, 19 choices for authority, 7 choices for port, 10 choices for path, and 3 choices for query.

This is a total of 9 * 19 * 7 * 10 * 3 = 35910 permutations of URLs that it generates. Plus, before testIsValid starts generating URLs, it tests the following two URLs: http://www.google.com and http://www.google.com/

So in TOTAL, testIsValid is testing 35912 URLs (assuming no test fails and throws an exception that causes the testing to end).
For the purpose of validation, URLs are composed of 5 distinct parts--the scheme (e.g. http), the authority (e.g. a server hostname, like www.google.com), the port number (e.g. 80 for http), the path (to the resource requested), and the query (an extra string passed to the server).

testIsValid makes use of pre-defined collections of these distinct parts to generate the URLs it is testing. The predefined collections consist of 9 choices for scheme, 19 choices for authority, 7 choices for port, 10 choices for path, and 3 choices for query.

This is a total of 9 * 19 * 7 * 10 * 3 = 35910 permutations of URLs that it generates. Plus, before testIsValid starts generating URLs, it tests the following two URLs: http://www.google.com and http://www.google.com/

So in TOTAL, testIsValid is testing 35912 URLs (assuming no test fails and throws an exception that causes the testing to end).

testIsValid generates URLs simply by selecting one value from EACH of the collections of URL component parts (scheme, authority, port, path, and query) defined in the UrlValidatorTest.java class, and concatenating the values together into a single URL as follows: <scheme><authority><port><path><query>. Importantly, the pre-defined collections also include "" (blanks) that allow parts of the URL to be omitted.

In addition to generating the URL, testIsValid also determines whether each URL it generates should be valid. For the purpose of validation, a URL is valid if all of its component parts are valid. To that end, each of the URL component parts in the pre-defined collections of are associated with a value indicating whether the component part is valid or not (presumably this validity is based on knowledge from the specification for URLs). When testIsValid generates a URL by concatenating the component parts, it also ANDs together the validities of each of the components to determine the overall validity of the URL. This is the expected result that is used to validate the result returned by URLValidator.isValid.
