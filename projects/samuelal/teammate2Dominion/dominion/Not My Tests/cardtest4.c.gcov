        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:#include "testHelper.h"
        -:   10:
        -:   11:#define TESTCARD "Adventurer"
        -:   12:
function main called 2 returned 100% blocks executed 88%
        2:   13:int main() {
        2:   14:	int newCards = 0;
        2:   15:	int discarded = 1;
        2:   16:	int newCoins = 0;
        2:   17:	int shuffledCards = 0;
        -:   18:
        2:   19:	int a = 0, b = 0, c= 0;
        2:   20:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   21:	int remove1, remove2;
        2:   22:	int seed = 1000;
        2:   23:	int numPlayers = 2;
        2:   24:	int thisPlayer = 0;
        2:   25:	int otherPlayer = 1;
        -:   26:
        -:   27:	struct gameState G, testG;
        2:   28:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   29:		sea_hag, tribute, smithy, council_room};
        -:   30:	
        2:   31:	initializeGame(numPlayers, k, seed, &G);  
call    0 returned 100%
        2:   32:	printf("\t Testing Card: %s \n", TESTCARD);
call    0 returned 100%
        -:   33:	
        -:   34:	// boot up the perfect version
        2:   35:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   36:	
        -:   37:	// Test 01 -----------------------------------------------------------------
        -:   38:	// Coints += $2 
        2:   39:	printf("Test 01: draw cards until 2 treasures are found \n");
call    0 returned 100%
        -:   40:	
        -:   41:	// setup test environment
        2:   42:	memcpy(&testG, &G, sizeof(struct gameState));	
        -:   43:
        -:   44:	// insert 2 gold coins into the first blank spaces in the deck
       28:   45:	while ((a < MAX_DECK) && (b < 2)) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 92%
branch  3 taken 8% (fallthrough)
       24:   46:		if (testG.deck[thisPlayer][a] == 0) {
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        4:   47:			testG.deck[thisPlayer][a] = gold;
        4:   48:			b++;
        -:   49:		}
       24:   50:		a++;	
        -:   51:	}
        -:   52:
        -:   53:
        2:   54:	printf("Player hand = %d\n", testG.handCount[thisPlayer]);
call    0 returned 100%
        -:   55:
        2:   56:	cardEffect(adventurer, choice1, choice2, choice3, &testG, handpos, &bonus);
call    0 returned 100%
        -:   57:
        -:   58:	// Test 01	
        2:   59:	newCoins = 0;
        2:   60:	newCards = 2;
        2:   61:	printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], 
call    0 returned 100%
        2:   62:		G.handCount[thisPlayer] + newCards - discarded);
        2:   63:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], 
call    0 returned 100%
        2:   64:		G.deckCount[thisPlayer] - newCards + shuffledCards);
        2:   65:	printf("coins = %d, expected = %d\n", testG.coins, G.coins + newCoins);
call    0 returned 100%
        -:   66:
        2:   67:	if (testG.handCount[thisPlayer] != G.handCount[thisPlayer] + newCards- discarded) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   68:		errorMessage("handCount does not match");
call    0 never executed
        -:   69:	}
        2:   70:	if (testG.deckCount[thisPlayer] != G.deckCount[thisPlayer] - newCards + shuffledCards){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   71:		errorMessage("deckCount does not match");
call    0 never executed
        -:   72:  	}
        2:   73:	if (testG.coins != G.coins + newCoins) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   74:		errorMessage("coins do not match");
call    0 never executed
        -:   75:	}
        -:   76:	
        2:   77:	genericTest(G, testG, otherPlayer, c);
call    0 returned 100%
        -:   78:	
        2:   79:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
call    0 returned 100%
        -:   80:
        2:   81:  return 0;
        -:   82:}
        -:   83:
        -:   84:
