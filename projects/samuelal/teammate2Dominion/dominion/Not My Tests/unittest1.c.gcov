        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:#include <math.h>
        -:    9:
        -:   10:
        -:   11:#include "testHelper.h"
        -:   12:
        -:   13:#define TESTCARD "shuffle"
        -:   14:
function main called 2 returned 100% blocks executed 77%
        2:   15:int main() {
        -:   16:
        2:   17:	int newCards = 0;
        2:   18:	int discarded = 1;
        2:   19:	int newCoins = 0;
        2:   20:	int shuffledCards = 0;
        2:   21:	int a = 0, b = 0, c= 0;
        2:   22:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   23:	int remove1, remove2;
        2:   24:	int seed = 1000;
        2:   25:	int numPlayers = 2;
        2:   26:	int thisPlayer = 0;
        2:   27:	int otherPlayer = 1;
        2:   28:	int found = 0;
        -:   29:
        -:   30:	struct gameState G, testG;
        2:   31:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   32:		sea_hag, tribute, smithy, council_room};
        -:   33:	
        2:   34:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        2:   35:	printf("\t Testing Function: %s \n", TESTCARD);
call    0 returned 100%
        -:   36:
        -:   37:	// boot up the perfect version
        2:   38:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   39:	// Test 01 -----------------------------------------------------------------
        2:   40:	printf("Test 01: Run Shuffle and check positions \n");
call    0 returned 100%
        2:   41:	shuffle(thisPlayer, &testG);
call    0 returned 100%
        -:   42:	
        -:   43:	// testG.deck[thisPlayer][a]
        -:   44:
        2:   45:	printf("Testing Player 1 Deck Size...\t");
call    0 returned 100%
        2:   46:	if (testG.deckCount[thisPlayer] != G.deckCount[thisPlayer] ){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   47:		printf("ERROR\n");
call    0 never executed
    #####:   48:		printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], 
call    0 never executed
    #####:   49:			G.handCount[thisPlayer] - newCards + shuffledCards);
        -:   50:	} else { 
        2:   51:		printf("PASS\n");
call    0 returned 100%
        -:   52:	}
        -:   53:
        2:   54:	printf("Testing Player 1 deck integrity...\t");
call    0 returned 100%
        -:   55:	// Ensure cards are still in deck
        -:   56:	// sort deck cards into containers
        -:   57:	int GCont[MAX_DECK], testGCont[MAX_DECK];
       14:   58:	while (a < G.deckCount[thisPlayer]) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   59:		//sort into containers
       10:   60:		GCont[G.deck[thisPlayer][a]]++;
       10:   61:		testGCont[testG.deck[thisPlayer][a]]++;
       10:   62:		a++;
        -:   63:	}
     1004:   64:	while(b < MAX_DECK) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     1000:   65:		if (GCont[b] != testGCont[b]) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   66:			printf("ERROR\n");
call    0 never executed
    #####:   67:			printf("Card %d: count: %d, expected= %d\n", b, testGCont[b], GCont[b]);
call    0 never executed
    #####:   68:			found = 1;
        -:   69:		}
     1000:   70:		b++;
        -:   71:	}
        2:   72:	if (found == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2:   73:		printf("PASS\n");
call    0 returned 100%
        -:   74:	}
        2:   75:	printf("Testing Player 1 Hand Size...\t");
call    0 returned 100%
        2:   76:	if (testG.handCount[thisPlayer] != G.handCount[thisPlayer] ){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   77:		printf("ERROR\n");
call    0 never executed
    #####:   78:		printf("...");
call    0 never executed
        -:   79:	} else { 
        2:   80:		printf("PASS\n");
call    0 returned 100%
        -:   81:	}
        -:   82:
        2:   83:	genericTest(G, testG, otherPlayer, 0);
call    0 returned 100%
        2:   84:	return 0;
        -:   85:}
        -:   86:
