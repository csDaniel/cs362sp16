        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:#include <math.h>
        -:    9:
        -:   10:#include "testHelper.h"
        -:   11:
        -:   12:#define TESTCARD "updateCoinst"
        -:   13:
function main called 2 returned 100% blocks executed 83%
        2:   14:int main() {
        -:   15:
        2:   16:	int newCards = 0;
        2:   17:	int discarded = 1;
        2:   18:	int newCoins = 0;
        2:   19:	int shuffledCards = 0;
        2:   20:	int bonus = 0;
        2:   21:	int seed = 1000;
        2:   22:	int numPlayers = 2;
        2:   23:	int thisPlayer = 0;
        2:   24:	int otherPlayer = 1;
        2:   25:	int a = 0;
        -:   26:
        -:   27:	struct gameState G, testG;
        2:   28:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   29:		sea_hag, tribute, smithy, council_room};
        -:   30:	
        2:   31:	initializeGame(numPlayers, k, seed, &G);
call    0 returned 100%
        -:   32:	// set hand to estates:
        2:   33:	printf("handCount: %d\n", G.handCount[thisPlayer]);
call    0 returned 100%
       14:   34:	while (a < 5) {
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       10:   35:		G.hand[thisPlayer][a] = estate;
       10:   36:		a++;
        -:   37:	}
        2:   38:	updateCoins(thisPlayer, &G, 0);
call    0 returned 100%
        -:   39:
        2:   40:	printf("\t Testing Card: %s \n", TESTCARD);
call    0 returned 100%
        -:   41:	// boot up the perfect version
        2:   42:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   43:
        -:   44:
        -:   45://int updateCoins(int player, struct gameState *state, int bonus)
        -:   46:
        -:   47:	// Test 01 -----------------------------------------------------------------
        2:   48:	linePrint();
call    0 returned 100%
        2:   49:	printf("Test 01: one copper to hand\n");
call    0 returned 100%
        2:   50:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   51:
        2:   52:	newCoins = 1;
        2:   53:	testG.hand[thisPlayer][0] = copper;
        2:   54:	updateCoins(thisPlayer, &testG, 0);
call    0 returned 100%
        -:   55:	
        2:   56:	printf("Testing coin with one copper in hand...\t");
call    0 returned 100%
        2:   57:	if (testG.coins != (G.coins + newCoins)) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   58:		printf("ERROR\n");
call    0 never executed
    #####:   59:		printf("Player coins: %d, expected: %d\n", testG.coins, (G.coins + newCoins));
call    0 never executed
        -:   60:	} else {
        2:   61:		printf("PASS\n");
call    0 returned 100%
        -:   62:	}
        2:   63:	genericTest(G, testG, otherPlayer, 0);
call    0 returned 100%
        -:   64:
        -:   65:	// Test 02 -----------------------------------------------------------------
        2:   66:	linePrint();
call    0 returned 100%
        2:   67:	printf("Test 02: one silver to hand\n");
call    0 returned 100%
        2:   68:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   69:
        2:   70:	newCoins = 2;
        2:   71:	testG.hand[thisPlayer][0] = silver;
        2:   72:	updateCoins(thisPlayer, &testG, 0);
call    0 returned 100%
        -:   73:	
        2:   74:	printf("Testing coin with one silver in hand...\t");
call    0 returned 100%
        2:   75:	if (testG.coins != (G.coins + newCoins)) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   76:		printf("ERROR\n");
call    0 never executed
    #####:   77:		printf("Player coins: %d, expected: %d\n", testG.coins, (G.coins + newCoins));
call    0 never executed
        -:   78:	} else {
        2:   79:		printf("PASS\n");
call    0 returned 100%
        -:   80:	}
        2:   81:	genericTest(G, testG, otherPlayer, 0);
call    0 returned 100%
        -:   82:
        -:   83:
        -:   84:	// Test 03 -----------------------------------------------------------------
        2:   85:	linePrint();
call    0 returned 100%
        2:   86:	printf("Test 03: one gold to hand\n");
call    0 returned 100%
        2:   87:	memcpy(&testG, &G, sizeof(struct gameState));
        -:   88:
        2:   89:	newCoins = 3;
        2:   90:	testG.hand[thisPlayer][0] = gold;
        2:   91:	updateCoins(thisPlayer, &testG, 0);
call    0 returned 100%
        -:   92:	
        2:   93:	printf("Testing coin with one silver in hand...\t");
call    0 returned 100%
        2:   94:	if (testG.coins != (G.coins + newCoins)) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   95:		printf("ERROR\n");
call    0 never executed
    #####:   96:		printf("Player coins: %d, expected: %d\n", testG.coins, (G.coins + newCoins));
call    0 never executed
        -:   97:	} else {
        2:   98:		printf("PASS\n");
call    0 returned 100%
        -:   99:	}
        2:  100:	genericTest(G, testG, otherPlayer, 0);
call    0 returned 100%
        -:  101:
        -:  102:	// Test 04 -----------------------------------------------------------------
        2:  103:	linePrint();
call    0 returned 100%
        2:  104:	printf("Test 04: one gold to hand and -1 bonus\n");
call    0 returned 100%
        2:  105:	memcpy(&testG, &G, sizeof(struct gameState));
        -:  106:
        2:  107:	newCoins = 3;
        2:  108:	bonus = -1;
        2:  109:	testG.hand[thisPlayer][0] = gold;
        2:  110:	updateCoins(thisPlayer, &testG, bonus);
call    0 returned 100%
        -:  111:	
        2:  112:	printf("Testing coin with one silver in hand...\t");
call    0 returned 100%
        2:  113:	if (testG.coins != (G.coins + newCoins + bonus)) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  114:		printf("ERROR\n");
call    0 never executed
    #####:  115:		printf("Player coins: %d, expected: %d\n", testG.coins, (G.coins + newCoins + bonus));
call    0 never executed
        -:  116:	} else {
        2:  117:		printf("PASS\n");
call    0 returned 100%
        -:  118:	}
        2:  119:	genericTest(G, testG, otherPlayer, 0);
call    0 returned 100%
        -:  120:
        -:  121:
        -:  122:
        -:  123:
        -:  124:
        -:  125:
        2:  126:	printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
call    0 returned 100%
        2:  127:	return 0;
        -:  128:}
        -:  129:
        -:  130:
        -:  131:
        -:  132:
