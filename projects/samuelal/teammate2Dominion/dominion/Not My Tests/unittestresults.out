	 Testing Card: smithy 
Test 01: handCount = handCount + 3 (-1, smithy) 
initial hand count = 5
hand count = 8, expected = 7
deck count = 1, expected = 2
coins = 4, expected = 4
ERROR: handCount does not match ... TEST FAILED
ERROR: deckCount does not match ... TEST FAILED
Testing Player 2 hand count...		PASS
Testing Player 2 deck count... 		PASS
Testing state estate count... 		PASS
Testing state duchy count... 		PASS
Testing state province count...		PASS
Testing state cppper count... 		PASS
Testing state silver count..  		PASS
Testing state gold count... 		PASS

 >>>>> SUCCESS: Testing complete smithy <<<<<

	 Testing Card: Great_Hall 
Test 01: +1 card, +1 action 
hand count = 5, expected = 5
deck count = 4, expected = 4
coins = 4, expected = 4
player actions = 2, expected = 2
Testing Player 2 hand count...		PASS
Testing Player 2 deck count... 		PASS
Testing state estate count... 		PASS
Testing state duchy count... 		PASS
Testing state province count...		PASS
Testing state cppper count... 		PASS
Testing state silver count..  		PASS
Testing state gold count... 		PASS

 >>>>> SUCCESS: Testing complete Great_Hall <<<<<

	 Testing Card: Council Room 
Test 01: coins += 2, +1 buy 
hand count = 8, expected = 8
deck count = 1, expected = 1
coins = 4, expected = 4
Player Buys = 2, expected = 2
Testing Player 2 hand count...		PASS
Testing Player 2 deck count... 		PASS
Testing state estate count... 		PASS
Testing state duchy count... 		PASS
Testing state province count...		PASS
Testing state cppper count... 		PASS
Testing state silver count..  		PASS
Testing state gold count... 		PASS

 >>>>> SUCCESS: Testing complete Council Room <<<<<

	 Testing Card: Adventurer 
Test 01: draw cards until 2 treasures are found 
Player hand = 5
hand count = 6, expected = 6
deck count = 3, expected = 3
coins = 4, expected = 4
Testing Player 2 hand count...		PASS
Testing Player 2 deck count... 		PASS
Testing state estate count... 		PASS
Testing state duchy count... 		PASS
Testing state province count...		PASS
Testing state cppper count... 		PASS
Testing state silver count..  		PASS
Testing state gold count... 		PASS

 >>>>> SUCCESS: Testing complete Adventurer <<<<<

	 Testing Function: shuffle 
Test 01: Run Shuffle and check positions 
Testing Player 1 Deck Size...	PASS
Testing Player 1 deck integrity...	PASS
Testing Player 1 Hand Size...	PASS
Testing Player 2 hand count...		PASS
Testing Player 2 deck count... 		PASS
Testing state estate count... 		PASS
Testing state duchy count... 		PASS
Testing state province count...		PASS
Testing state cppper count... 		PASS
Testing state silver count..  		PASS
Testing state gold count... 		PASS
	 Testing Card: getCost 
Testing return values for all cards...	PASS
Testing Player 2 hand count...		PASS
Testing Player 2 deck count... 		PASS
Testing state estate count... 		PASS
Testing state duchy count... 		PASS
Testing state province count...		PASS
Testing state cppper count... 		PASS
Testing state silver count..  		PASS
Testing state gold count... 		PASS

 >>>>> SUCCESS: Testing complete getCost <<<<<

	 Testing Card: scoreFor() 

-------------------------------------------
Test 01: Curse in hand
Testing Score for Curse in hand...	PASS
Testing Player 2 hand count...		PASS
Testing Player 2 deck count... 		PASS
Testing state estate count... 		PASS
Testing state duchy count... 		PASS
Testing state province count...		PASS
Testing state cppper count... 		PASS
Testing state silver count..  		PASS
Testing state gold count... 		PASS

-------------------------------------------
Test 02: Curse in discard
Testing Score for curse in discard...	PASS
Testing Player 2 hand count...		PASS
Testing Player 2 deck count... 		PASS
Testing state estate count... 		PASS
Testing state duchy count... 		PASS
Testing state province count...		PASS
Testing state cppper count... 		PASS
Testing state silver count..  		PASS
Testing state gold count... 		PASS

-------------------------------------------
Test 03: Curse in deck
Testing Score for Curse in deck...	ERROR
Player score: 0, expected: -1
Testing Player 2 hand count...		PASS
Testing Player 2 deck count... 		PASS
Testing state estate count... 		PASS
Testing state duchy count... 		PASS
Testing state province count...		PASS
Testing state cppper count... 		PASS
Testing state silver count..  		PASS
Testing state gold count... 		PASS

-------------------------------------------
Test 04: estate in hand
Testing Score for Estate in hand...	PASS
Testing Player 2 hand count...		PASS
Testing Player 2 deck count... 		PASS
Testing state estate count... 		PASS
Testing state duchy count... 		PASS
Testing state province count...		PASS
Testing state cppper count... 		PASS
Testing state silver count..  		PASS
Testing state gold count... 		PASS

-------------------------------------------
Test 05: estate in discard
Testing Score for estate in discard...	PASS
Testing Player 2 hand count...		PASS
Testing Player 2 deck count... 		PASS
Testing state estate count... 		PASS
Testing state duchy count... 		PASS
Testing state province count...		PASS
Testing state cppper count... 		PASS
Testing state silver count..  		PASS
Testing state gold count... 		PASS

-------------------------------------------
Test 06: Estate in deck
Testing Score for estate in deck...	ERROR
Player score: 0, expected: 1
Testing Player 2 hand count...		PASS
Testing Player 2 deck count... 		PASS
Testing state estate count... 		PASS
Testing state duchy count... 		PASS
Testing state province count...		PASS
Testing state cppper count... 		PASS
Testing state silver count..  		PASS
Testing state gold count... 		PASS

-------------------------------------------
Test 07: duchy in hand
Testing Score for duchy in hand...	PASS
Testing Player 2 hand count...		PASS
Testing Player 2 deck count... 		PASS
Testing state estate count... 		PASS
Testing state duchy count... 		PASS
Testing state province count...		PASS
Testing state cppper count... 		PASS
Testing state silver count..  		PASS
Testing state gold count... 		PASS

-------------------------------------------
Test 08: Duchy in discard
Testing Score for duchy in discard...	PASS
Testing Player 2 hand count...		PASS
Testing Player 2 deck count... 		PASS
Testing state estate count... 		PASS
Testing state duchy count... 		PASS
Testing state province count...		PASS
Testing state cppper count... 		PASS
Testing state silver count..  		PASS
Testing state gold count... 		PASS

-------------------------------------------
Test 09: Duchy in deck
Testing Score for duchy in deck...	ERROR
Player score: 0, expected: 3
Testing Player 2 hand count...		PASS
Testing Player 2 deck count... 		PASS
Testing state estate count... 		PASS
Testing state duchy count... 		PASS
Testing state province count...		PASS
Testing state cppper count... 		PASS
Testing state silver count..  		PASS
Testing state gold count... 		PASS

-------------------------------------------
Test 10: Province in hand
Testing Score for province in hand...	PASS
Testing Player 2 hand count...		PASS
Testing Player 2 deck count... 		PASS
Testing state estate count... 		PASS
Testing state duchy count... 		PASS
Testing state province count...		PASS
Testing state cppper count... 		PASS
Testing state silver count..  		PASS
Testing state gold count... 		PASS

-------------------------------------------
Test 11: province in discard
Testing Score for province in discard...	PASS
Testing Player 2 hand count...		PASS
Testing Player 2 deck count... 		PASS
Testing state estate count... 		PASS
Testing state duchy count... 		PASS
Testing state province count...		PASS
Testing state cppper count... 		PASS
Testing state silver count..  		PASS
Testing state gold count... 		PASS

-------------------------------------------
Test 12: province in deck
Testing Score for province in deck...	ERROR
Player score: 0, expected: 6
Testing Player 2 hand count...		PASS
Testing Player 2 deck count... 		PASS
Testing state estate count... 		PASS
Testing state duchy count... 		PASS
Testing state province count...		PASS
Testing state cppper count... 		PASS
Testing state silver count..  		PASS
Testing state gold count... 		PASS

-------------------------------------------
Test 12: great_hall in hand
Testing Score for great_hall in hand...	PASS
Testing Player 2 hand count...		PASS
Testing Player 2 deck count... 		PASS
Testing state estate count... 		PASS
Testing state duchy count... 		PASS
Testing state province count...		PASS
Testing state cppper count... 		PASS
Testing state silver count..  		PASS
Testing state gold count... 		PASS

-------------------------------------------
Test 14: great_hall in discard
Testing Score for great_hall in discard...	PASS
Testing Player 2 hand count...		PASS
Testing Player 2 deck count... 		PASS
Testing state estate count... 		PASS
Testing state duchy count... 		PASS
Testing state province count...		PASS
Testing state cppper count... 		PASS
Testing state silver count..  		PASS
Testing state gold count... 		PASS

-------------------------------------------
Test 15: great_hall in deck
Testing Score for great_hall in deck...	ERROR
Player score: 0, expected: 1
Testing Player 2 hand count...		PASS
Testing Player 2 deck count... 		PASS
Testing state estate count... 		PASS
Testing state duchy count... 		PASS
Testing state province count...		PASS
Testing state cppper count... 		PASS
Testing state silver count..  		PASS
Testing state gold count... 		PASS

-------------------------------------------
Test 16: gardens in hand
Testing Score for gardens in hand...	ERROR
Player score: 4, expected: 5
Testing Player 2 hand count...		PASS
Testing Player 2 deck count... 		PASS
Testing state estate count... 		PASS
Testing state duchy count... 		PASS
Testing state province count...		PASS
Testing state cppper count... 		PASS
Testing state silver count..  		PASS
Testing state gold count... 		PASS

-------------------------------------------
Test 17: gardens in discard
Fulldeck = 0
Testing Score for gardens in discard...	ERROR
Player score: 0, expected: 5
Testing Player 2 hand count...		PASS
Testing Player 2 deck count... 		PASS
Testing state estate count... 		PASS
Testing state duchy count... 		PASS
Testing state province count...		PASS
Testing state cppper count... 		PASS
Testing state silver count..  		PASS
Testing state gold count... 		PASS

-------------------------------------------
Test 18: gardens in deck
Testing Score for gardens in deck...	ERROR
Player score: 0, expected: 5
Testing Player 2 hand count...		PASS
Testing Player 2 deck count... 		PASS
Testing state estate count... 		PASS
Testing state duchy count... 		PASS
Testing state province count...		PASS
Testing state cppper count... 		PASS
Testing state silver count..  		PASS
Testing state gold count... 		PASS

 >>>>> SUCCESS: Testing complete scoreFor() <<<<<

handCount: 5
	 Testing Card: updateCoinst 

-------------------------------------------
Test 01: one copper to hand
Testing coin with one copper in hand...	PASS
Testing Player 2 hand count...		PASS
Testing Player 2 deck count... 		PASS
Testing state estate count... 		PASS
Testing state duchy count... 		PASS
Testing state province count...		PASS
Testing state cppper count... 		PASS
Testing state silver count..  		PASS
Testing state gold count... 		PASS

-------------------------------------------
Test 02: one silver to hand
Testing coin with one silver in hand...	PASS
Testing Player 2 hand count...		PASS
Testing Player 2 deck count... 		PASS
Testing state estate count... 		PASS
Testing state duchy count... 		PASS
Testing state province count...		PASS
Testing state cppper count... 		PASS
Testing state silver count..  		PASS
Testing state gold count... 		PASS

-------------------------------------------
Test 03: one gold to hand
Testing coin with one silver in hand...	PASS
Testing Player 2 hand count...		PASS
Testing Player 2 deck count... 		PASS
Testing state estate count... 		PASS
Testing state duchy count... 		PASS
Testing state province count...		PASS
Testing state cppper count... 		PASS
Testing state silver count..  		PASS
Testing state gold count... 		PASS

-------------------------------------------
Test 04: one gold to hand and -1 bonus
Testing coin with one silver in hand...	PASS
Testing Player 2 hand count...		PASS
Testing Player 2 deck count... 		PASS
Testing state estate count... 		PASS
Testing state duchy count... 		PASS
Testing state province count...		PASS
Testing state cppper count... 		PASS
Testing state silver count..  		PASS
Testing state gold count... 		PASS

 >>>>> SUCCESS: Testing complete updateCoinst <<<<<

File 'dominion.c'
Lines executed:36.81% of 565
Branches executed:47.62% of 420
Taken at least once:36.43% of 420
Calls executed:20.83% of 96
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:16
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int _cardSeaHag(int currentPlayer, struct gameState *state);
        -:    9:int _cardAdventurer(int currentPlayer, struct gameState *state, int drawntreasure, int handPos, int num);
        -:   10:int _cardSteward(int currentPlayer, struct gameState *state, int handPos, int num, int choice1, int choice2, int choice3);
        -:   11:int _cardVillage(int currentPlayer, struct gameState *state, int handPos, int num);
        -:   12:int _cardSmithy(int currentPlayer, struct gameState *state, int handPos, int num);
        -:   13:
        -:   14:
function compare called 490 returned 100% blocks executed 83%
      490:   15:int compare(const void* a, const void* b) {
      490:   16:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   17:    return 1;
      490:   18:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      132:   19:    return -1;
      358:   20:  return 0;
        -:   21:}
        -:   22:
function newGame called 0 returned 0% blocks executed 0%
    #####:   23:struct gameState* newGame() {
    #####:   24:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   25:  return g;
        -:   26:}
        -:   27:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   28:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   29:		  int k8, int k9, int k10) {
    #####:   30:  int* k = malloc(10 * sizeof(int));
    #####:   31:  k[0] = k1;
    #####:   32:  k[1] = k2;
    #####:   33:  k[2] = k3;
    #####:   34:  k[3] = k4;
    #####:   35:  k[4] = k5;
    #####:   36:  k[5] = k6;
    #####:   37:  k[6] = k7;
    #####:   38:  k[7] = k8;
    #####:   39:  k[8] = k9;
    #####:   40:  k[9] = k10;
    #####:   41:  return k;
        -:   42:}
        -:   43:
function initializeGame called 16 returned 100% blocks executed 83%
       16:   44:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   45:		   struct gameState *state) {
        -:   46:
        -:   47:  int i;
        -:   48:  int j;
        -:   49:  int it;			
        -:   50:  //set up random number generator
       16:   51:  SelectStream(1);
call    0 returned 100%
       16:   52:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   53:  
        -:   54:  //check number of players
       16:   55:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   56:    {
    #####:   57:      return -1;
        -:   58:    }
        -:   59:
        -:   60:  //set number of players
       16:   61:  state->numPlayers = numPlayers;
        -:   62:
        -:   63:  //check selected kingdom cards are different
      176:   64:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   65:    {
     1760:   66:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   67:        {
     1600:   68:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   69:	    {
    #####:   70:	      return -1;
        -:   71:	    }
        -:   72:        }
        -:   73:    }
        -:   74:
        -:   75:
        -:   76:  //initialize supply
        -:   77:  ///////////////////////////////
        -:   78:
        -:   79:  //set number of Curse cards
       16:   80:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   81:    {
       16:   82:      state->supplyCount[curse] = 10;
        -:   83:    }
    #####:   84:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   85:    {
    #####:   86:      state->supplyCount[curse] = 20;
        -:   87:    }
        -:   88:  else
        -:   89:    {
    #####:   90:      state->supplyCount[curse] = 30;
        -:   91:    }
        -:   92:
        -:   93:  //set number of Victory cards
       16:   94:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   95:    {
       16:   96:      state->supplyCount[estate] = 8;
       16:   97:      state->supplyCount[duchy] = 8;
       16:   98:      state->supplyCount[province] = 8;
        -:   99:    }
        -:  100:  else
        -:  101:    {
    #####:  102:      state->supplyCount[estate] = 12;
    #####:  103:      state->supplyCount[duchy] = 12;
    #####:  104:      state->supplyCount[province] = 12;
        -:  105:    }
        -:  106:
        -:  107:  //set number of Treasure cards
       16:  108:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       16:  109:  state->supplyCount[silver] = 40;
       16:  110:  state->supplyCount[gold] = 30;
        -:  111:
        -:  112:  //set number of Kingdom cards
      336:  113:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  114:    {
     2640:  115:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  116:	{
     2480:  117:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  118:	    {
        -:  119:	      //check if card is a 'Victory' Kingdom card
      160:  120:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  121:		{
    #####:  122:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  123:		    state->supplyCount[i] = 8; 
        -:  124:		  }
    #####:  125:		  else{ state->supplyCount[i] = 12; }
        -:  126:		}
        -:  127:	      else
        -:  128:		{
      160:  129:		  state->supplyCount[i] = 10;
        -:  130:		}
      160:  131:	      break;
        -:  132:	    }
        -:  133:	  else    //card is not in the set choosen for the game
        -:  134:	    {
     2320:  135:	      state->supplyCount[i] = -1;
        -:  136:	    }
        -:  137:	}
        -:  138:
        -:  139:    }
        -:  140:
        -:  141:  ////////////////////////
        -:  142:  //supply intilization complete
        -:  143:
        -:  144:  //set player decks
       48:  145:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  146:    {
       32:  147:      state->deckCount[i] = 0;
      128:  148:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  149:	{
       96:  150:	  state->deck[i][j] = estate;
       96:  151:	  state->deckCount[i]++;
        -:  152:	}
      256:  153:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  154:	{
      224:  155:	  state->deck[i][j] = copper;
      224:  156:	  state->deckCount[i]++;		
        -:  157:	}
        -:  158:    }
        -:  159:
        -:  160:  //shuffle player decks
       48:  161:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  162:    {
       32:  163:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  164:	{
    #####:  165:	  return -1;
        -:  166:	}
        -:  167:    }
        -:  168:
        -:  169:  //draw player hands
       48:  170:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  171:    {  
        -:  172:      //initialize hand size to zero
       32:  173:      state->handCount[i] = 0;
       32:  174:      state->discardCount[i] = 0;
        -:  175:      //draw 5 cards
        -:  176:      // for (j = 0; j < 5; j++)
        -:  177:      //	{
        -:  178:      //	  drawCard(i, state);
        -:  179:      //	}
        -:  180:    }
        -:  181:  
        -:  182:  //set embargo tokens to 0 for all supply piles
      448:  183:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  184:    {
      432:  185:      state->embargoTokens[i] = 0;
        -:  186:    }
        -:  187:
        -:  188:  //initialize first player's turn
       16:  189:  state->outpostPlayed = 0;
       16:  190:  state->phase = 0;
       16:  191:  state->numActions = 1;
       16:  192:  state->numBuys = 1;
       16:  193:  state->playedCardCount = 0;
       16:  194:  state->whoseTurn = 0;
       16:  195:  state->handCount[state->whoseTurn] = 0;
        -:  196:  //int it; move to top
        -:  197:
        -:  198:  //Moved draw cards to here, only drawing at the start of a turn
       96:  199:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       80:  200:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  201:  }
        -:  202:
       16:  203:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  204:
       16:  205:  return 0;
        -:  206:}
        -:  207:
function shuffle called 34 returned 100% blocks executed 94%
       34:  208:int shuffle(int player, struct gameState *state) {
        -:  209: 
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
       34:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
       34:  216:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  217:    return -1;
       34:  218:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
      398:  221:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      330:  222:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      330:  223:    newDeck[newDeckPos] = state->deck[player][card];
      330:  224:    newDeckPos++;
     1146:  225:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      816:  226:      state->deck[player][i] = state->deck[player][i+1];
        -:  227:    }
      330:  228:    state->deckCount[player]--;
        -:  229:  }
      364:  230:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      330:  231:    state->deck[player][i] = newDeck[i];
      330:  232:    state->deckCount[player]++;
        -:  233:  }
        -:  234:
       34:  235:  return 0;
        -:  236:}
        -:  237:
function playCard called 0 returned 0% blocks executed 0%
    #####:  238:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  239:{	
        -:  240:  int card;
    #####:  241:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  242:
        -:  243:  //check if it is the right phase
    #####:  244:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //check if player has enough actions
    #####:  250:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  251:    {
    #####:  252:      return -1;
        -:  253:    }
        -:  254:	
        -:  255:  //get card played
    #####:  256:  card = handCard(handPos, state);
call    0 never executed
        -:  257:	
        -:  258:  //check if selected card is an action
    #####:  259:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //play card
    #####:  265:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  266:    {
    #####:  267:      return -1;
        -:  268:    }
        -:  269:	
        -:  270:  //reduce number of actions
    #####:  271:  state->numActions--;
        -:  272:
        -:  273:  //update coins (Treasure cards may be added with card draws)
    #####:  274:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  275:	
    #####:  276:  return 0;
        -:  277:}
        -:  278:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  279:int buyCard(int supplyPos, struct gameState *state) {
        -:  280:  int who;
        -:  281:  if (DEBUG){
        -:  282:    printf("Entering buyCard...\n");
        -:  283:  }
        -:  284:
        -:  285:  // I don't know what to do about the phase thing.
        -:  286:
    #####:  287:  who = state->whoseTurn;
        -:  288:
    #####:  289:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  290:    if (DEBUG)
        -:  291:      printf("You do not have any buys left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  294:    if (DEBUG)
        -:  295:      printf("There are not any of that type of card left\n");
    #####:  296:    return -1;
    #####:  297:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  298:    if (DEBUG) 
        -:  299:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  300:    return -1;
        -:  301:  } else {
    #####:  302:    state->phase=1;
        -:  303:    //state->supplyCount[supplyPos]--;
    #####:  304:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  305:  
    #####:  306:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  307:    state->numBuys--;
        -:  308:    if (DEBUG)
        -:  309:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  310:  }
        -:  311:
        -:  312:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  313:  //state->discardCount[who]++;
        -:  314:    
    #####:  315:  return 0;
        -:  316:}
        -:  317:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  318:int numHandCards(struct gameState *state) {
    #####:  319:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  320:}
        -:  321:
function handCard called 0 returned 0% blocks executed 0%
    #####:  322:int handCard(int handPos, struct gameState *state) {
    #####:  323:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  324:  return state->hand[currentPlayer][handPos];
        -:  325:}
        -:  326:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  327:int supplyCount(int card, struct gameState *state) {
    #####:  328:  return state->supplyCount[card];
        -:  329:}
        -:  330:
function fullDeckCount called 6 returned 100% blocks executed 82%
        6:  331:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  332:  int i;
        6:  333:  int count = 0;
        -:  334:
       36:  335:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  336:    {
       30:  337:      if (state->deck[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  338:    }
        -:  339:
       56:  340:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
        -:  341:    {
       50:  342:      if (state->hand[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  343:    }
        -:  344:
       16:  345:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 63%
branch  1 taken 38% (fallthrough)
        -:  346:    {
       10:  347:      if (state->discard[player][i] == card) count++;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  348:    }
        -:  349:
        6:  350:  return count;
        -:  351:}
        -:  352:
function whoseTurn called 8 returned 100% blocks executed 100%
        8:  353:int whoseTurn(struct gameState *state) {
        8:  354:  return state->whoseTurn;
        -:  355:}
        -:  356:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  357:int endTurn(struct gameState *state) {
        -:  358:  int k;
        -:  359:  int i;
    #####:  360:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  361:  
        -:  362:  //Discard hand
    #####:  363:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  364:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  365:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  366:  }
    #####:  367:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  368:    
        -:  369:  //Code for determining the player
    #####:  370:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  371:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  372:  }
        -:  373:  else{
    #####:  374:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  375:  }
        -:  376:
    #####:  377:  state->outpostPlayed = 0;
    #####:  378:  state->phase = 0;
    #####:  379:  state->numActions = 1;
    #####:  380:  state->coins = 0;
    #####:  381:  state->numBuys = 1;
    #####:  382:  state->playedCardCount = 0;
    #####:  383:  state->handCount[state->whoseTurn] = 0;
        -:  384:
        -:  385:  //int k; move to top
        -:  386:  //Next player draws hand
    #####:  387:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  388:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  389:  }
        -:  390:
        -:  391:  //Update money
    #####:  392:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  393:
    #####:  394:  return 0;
        -:  395:}
        -:  396:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  397:int isGameOver(struct gameState *state) {
        -:  398:  int i;
        -:  399:  int j;
        -:  400:	
        -:  401:  //if stack of Province cards is empty, the game ends
    #####:  402:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      return 1;
        -:  405:    }
        -:  406:
        -:  407:  //if three supply pile are at 0, the game ends
    #####:  408:  j = 0;
    #####:  409:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  412:	{
    #####:  413:	  j++;
        -:  414:	}
        -:  415:    }
    #####:  416:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  417:    {
    #####:  418:      return 1;
        -:  419:    }
        -:  420:
    #####:  421:  return 0;
        -:  422:}
        -:  423:
function scoreFor called 104 returned 100% blocks executed 82%
      104:  424:int scoreFor (int player, struct gameState *state) {
        -:  425:
        -:  426:  int i;
      104:  427:  int score = 0;
        -:  428:  //score from hand
      650:  429:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -:  430:    {
      546:  431:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      546:  432:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
      546:  433:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      546:  434:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      546:  435:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
      546:  436:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
call    2 returned 100%
        -:  437:    }
        -:  438:
        -:  439:  //score from discard
      134:  440:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 22%
branch  1 taken 78% (fallthrough)
        -:  441:    {
       30:  442:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
       30:  443:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
       30:  444:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
       30:  445:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
       30:  446:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
       30:  447:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  448:    }
        -:  449:
        -:  450:  //score from deck
      134:  451:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 22%
branch  1 taken 78% (fallthrough)
        -:  452:    {
       30:  453:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       30:  454:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       30:  455:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       30:  456:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       30:  457:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       30:  458:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  459:    }
        -:  460:
      104:  461:  return score;
        -:  462:}
        -:  463:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  464:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  465:  int i;	
        -:  466:  int j;
        -:  467:  int highScore;
        -:  468:  int currentPlayer;
        -:  469:
        -:  470:  //get score for each player
    #####:  471:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  472:    {
        -:  473:      //set unused player scores to -9999
    #####:  474:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  475:	{
    #####:  476:	  players[i] = -9999;
        -:  477:	}
        -:  478:      else
        -:  479:	{
    #####:  480:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  481:	}
        -:  482:    }
        -:  483:
        -:  484:  //find highest score
    #####:  485:  j = 0;
    #####:  486:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  487:    {
    #####:  488:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  489:	{
    #####:  490:	  j = i;
        -:  491:	}
        -:  492:    }
    #####:  493:  highScore = players[j];
        -:  494:
        -:  495:  //add 1 to players who had less turns
    #####:  496:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  497:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  498:    {
    #####:  499:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  500:	{
    #####:  501:	  players[i]++;
        -:  502:	}
        -:  503:    }
        -:  504:
        -:  505:  //find new highest score
    #####:  506:  j = 0;
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  508:    {
    #####:  509:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  510:	{
    #####:  511:	  j = i;
        -:  512:	}
        -:  513:    }
    #####:  514:  highScore = players[j];
        -:  515:
        -:  516:  //set winners in array to 1 and rest to 0
    #####:  517:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  518:    {
    #####:  519:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  520:	{
    #####:  521:	  players[i] = 1;
        -:  522:	}
        -:  523:      else
        -:  524:	{
    #####:  525:	  players[i] = 0;
        -:  526:	}
        -:  527:    }
        -:  528:
    #####:  529:  return 0;
        -:  530:}
        -:  531:
function drawCard called 104 returned 100% blocks executed 38%
      104:  532:int drawCard(int player, struct gameState *state)
        -:  533:{	int count;
        -:  534:  int deckCounter;
      104:  535:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  536:    
        -:  537:    //Step 1 Shuffle the discard pile back into a deck
        -:  538:    int i;
        -:  539:    //Move discard to deck
    #####:  540:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  541:      state->deck[player][i] = state->discard[player][i];
    #####:  542:      state->discard[player][i] = -1;
        -:  543:    }
        -:  544:
    #####:  545:    state->deckCount[player] = state->discardCount[player];
    #####:  546:    state->discardCount[player] = 0;//Reset discard
        -:  547:
        -:  548:    //Shufffle the deck
    #####:  549:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  550:   
        -:  551:    if (DEBUG){//Debug statements
        -:  552:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  553:    }
        -:  554:    
    #####:  555:    state->discardCount[player] = 0;
        -:  556:
        -:  557:    //Step 2 Draw Card
    #####:  558:    count = state->handCount[player];//Get current player's hand count
        -:  559:    
        -:  560:    if (DEBUG){//Debug statements
        -:  561:      printf("Current hand count: %d\n", count);
        -:  562:    }
        -:  563:    
    #####:  564:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  565:
    #####:  566:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  567:      return -1;
        -:  568:
    #####:  569:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  570:    state->deckCount[player]--;
    #####:  571:    state->handCount[player]++;//Increment hand count
        -:  572:  }
        -:  573:
        -:  574:  else{
      104:  575:    int count = state->handCount[player];//Get current hand count for player
        -:  576:    int deckCounter;
        -:  577:    if (DEBUG){//Debug statements
        -:  578:      printf("Current hand count: %d\n", count);
        -:  579:    }
        -:  580:
      104:  581:    deckCounter = state->deckCount[player];//Create holder for the deck count
      104:  582:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      104:  583:    state->deckCount[player]--;
      104:  584:    state->handCount[player]++;//Increment hand count
        -:  585:  }
        -:  586:
      104:  587:  return 0;
        -:  588:}
        -:  589:
function getCost called 54 returned 100% blocks executed 97%
       54:  590:int getCost(int cardNumber)
        -:  591:{
       54:  592:  switch( cardNumber ) 
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 0%
        -:  593:    {
        -:  594:    case curse:
        2:  595:      return 0;
        -:  596:    case estate:
        2:  597:      return 2;
        -:  598:    case duchy:
        2:  599:      return 5;
        -:  600:    case province:
        2:  601:      return 8;
        -:  602:    case copper:
        2:  603:      return 0;
        -:  604:    case silver:
        2:  605:      return 3;
        -:  606:    case gold:
        2:  607:      return 6;
        -:  608:    case adventurer:
        2:  609:      return 6;
        -:  610:    case council_room:
        2:  611:      return 5;
        -:  612:    case feast:
        2:  613:      return 4;
        -:  614:    case gardens:
        2:  615:      return 4;
        -:  616:    case mine:
        2:  617:      return 5;
        -:  618:    case remodel:
        2:  619:      return 4;
        -:  620:    case smithy:
        2:  621:      return 4;
        -:  622:    case village:
        2:  623:      return 3;
        -:  624:    case baron:
        2:  625:      return 4;
        -:  626:    case great_hall:
        2:  627:      return 3;
        -:  628:    case minion:
        2:  629:      return 5;
        -:  630:    case steward:
        2:  631:      return 3;
        -:  632:    case tribute:
        2:  633:      return 5;
        -:  634:    case ambassador:
        2:  635:      return 3;
        -:  636:    case cutpurse:
        2:  637:      return 4;
        -:  638:    case embargo: 
        2:  639:      return 2;
        -:  640:    case outpost:
        2:  641:      return 5;
        -:  642:    case salvager:
        2:  643:      return 4;
        -:  644:    case sea_hag:
        2:  645:      return 4;
        -:  646:    case treasure_map:
        2:  647:      return 4;
        -:  648:    }
        -:  649:	
    #####:  650:  return -1;
        -:  651:}
        -:  652:
function cardEffect called 8 returned 100% blocks executed 11%
        8:  653:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  654:{
        -:  655:  int i;
        -:  656:  int j;
        -:  657:  int k;
        -:  658:  int x;
        -:  659:  int index;
        8:  660:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        8:  661:  int nextPlayer = currentPlayer + 1;
        -:  662:
        8:  663:  int tributeRevealedCards[2] = {-1, -1};
        -:  664:  int temphand[MAX_HAND];// moved above the if statement
        8:  665:  int drawntreasure=0;
        -:  666:  int cardDrawn;
        8:  667:  int z = 0;// this is the counter for the temp hand
        8:  668:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  669:    nextPlayer = 0;
        -:  670:  }
        -:  671:  
        -:  672:
        -:  673:
        8:  674:	if (card == adventurer) {
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        2:  675:		_cardAdventurer(currentPlayer, state, drawntreasure, handPos, 0);
call    0 returned 100%
        6:  676:	} else if (card == smithy) {
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        2:  677:		_cardSmithy(currentPlayer, state, handPos, 0);
call    0 returned 100%
        4:  678:	} else if (card == village) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  679:		_cardVillage(currentPlayer, state, handPos, 0);
call    0 never executed
        4:  680:	} else if (card == steward) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  681:		_cardSteward(currentPlayer, state, handPos, 0, choice1, choice2, choice3);
call    0 never executed
        4:  682:	} else if (card == sea_hag) {
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  683:		_cardSeaHag(currentPlayer, state);
call    0 never executed
        -:  684:	}
        -:  685:	
        -:  686:  //uses switch to select card and perform actions
        8:  687:  switch( card ) 
branch  0 taken 25%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 50%
        -:  688:    {
        -:  689:/*
        -:  690:    case adventurer:
        -:  691:      while(drawntreasure<2){
        -:  692:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  693:	  shuffle(currentPlayer, state);
        -:  694:	}
        -:  695:	drawCard(currentPlayer, state);
        -:  696:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  697:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  698:	  drawntreasure++;
        -:  699:	else{
        -:  700:	  temphand[z]=cardDrawn;
        -:  701:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  702:	  z++;
        -:  703:	}
        -:  704:      }
        -:  705:      while(z-1>=0){
        -:  706:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  707:	z=z-1;
        -:  708:      }
        -:  709:      return 0;
        -:  710:*/			
        -:  711:    case council_room:
        -:  712:      //+4 Cards
       10:  713:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  714:	{
        8:  715:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  716:	}
        -:  717:			
        -:  718:      //+1 Buy
        2:  719:      state->numBuys++;
        -:  720:			
        -:  721:      //Each other player draws a card
        6:  722:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  723:	{
        4:  724:	  if ( i != currentPlayer )
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  725:	    {
        2:  726:	      drawCard(i, state);
call    0 returned 100%
        -:  727:	    }
        -:  728:	}
        -:  729:			
        -:  730:      //put played card in played card pile
        2:  731:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  732:			
        2:  733:      return 0;
        -:  734:			
        -:  735:    case feast:
        -:  736:      //gain card with cost up to 5
        -:  737:      //Backup hand
    #####:  738:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  739:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  740:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  741:      }
        -:  742:      //Backup hand
        -:  743:
        -:  744:      //Update Coins for Buy
    #####:  745:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  746:      x = 1;//Condition to loop on
    #####:  747:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  748:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  749:	  if (DEBUG)
        -:  750:	    printf("None of that card left, sorry!\n");
        -:  751:
        -:  752:	  if (DEBUG){
        -:  753:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  754:	  }
        -:  755:	}
    #####:  756:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  757:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  758:
        -:  759:	  if (DEBUG){
        -:  760:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  761:	  }
        -:  762:	}
        -:  763:	else{
        -:  764:
        -:  765:	  if (DEBUG){
        -:  766:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  767:	  }
        -:  768:
    #####:  769:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  770:	  x = 0;//No more buying cards
        -:  771:
        -:  772:	  if (DEBUG){
        -:  773:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  774:	  }
        -:  775:
        -:  776:	}
        -:  777:      }     
        -:  778:
        -:  779:      //Reset Hand
    #####:  780:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  781:	state->hand[currentPlayer][i] = temphand[i];
    #####:  782:	temphand[i] = -1;
        -:  783:      }
        -:  784:      //Reset Hand
        -:  785:      			
    #####:  786:      return 0;
        -:  787:			
        -:  788:    case gardens:
    #####:  789:      return -1;
        -:  790:			
        -:  791:    case mine:
    #####:  792:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  793:
    #####:  794:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  795:	{
    #####:  796:	  return -1;
        -:  797:	}
        -:  798:		
    #####:  799:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  800:	{
    #####:  801:	  return -1;
        -:  802:	}
        -:  803:
    #####:  804:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  805:	{
    #####:  806:	  return -1;
        -:  807:	}
        -:  808:
    #####:  809:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  810:
        -:  811:      //discard card from hand
    #####:  812:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  813:
        -:  814:      //discard trashed card
    #####:  815:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  816:	{
    #####:  817:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  818:	    {
    #####:  819:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  820:	      break;
        -:  821:	    }
        -:  822:	}
        -:  823:			
    #####:  824:      return 0;
        -:  825:			
        -:  826:    case remodel:
    #####:  827:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  828:
    #####:  829:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  830:	{
    #####:  831:	  return -1;
        -:  832:	}
        -:  833:
    #####:  834:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  835:
        -:  836:      //discard card from hand
    #####:  837:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  838:
        -:  839:      //discard trashed card
    #####:  840:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  841:	{
    #####:  842:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  843:	    {
    #####:  844:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  845:	      break;
        -:  846:	    }
        -:  847:	}
        -:  848:
        -:  849:
    #####:  850:      return 0;
        -:  851:/*		
        -:  852:    case smithy:
        -:  853:      //+3 Cards
        -:  854:      for (i = 0; i < 3; i++)
        -:  855:	{
        -:  856:	  drawCard(currentPlayer, state);
        -:  857:	}
        -:  858:			
        -:  859:      //discard card from hand
        -:  860:      discardCard(handPos, currentPlayer, state, 0);
        -:  861:      return 0;
        -:  862:*/		
        -:  863:/*
        -:  864:    case village:
        -:  865:      //+1 Card
        -:  866:      drawCard(currentPlayer, state);
        -:  867:			
        -:  868:      //+2 Actions
        -:  869:      state->numActions = state->numActions + 2;
        -:  870:			
        -:  871:      //discard played card from hand
        -:  872:      discardCard(handPos, currentPlayer, state, 0);
        -:  873:      return 0;
        -:  874:*/		
        -:  875:    case baron:
    #####:  876:      state->numBuys++;//Increase buys by 1!
    #####:  877:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  878:	int p = 0;//Iterator for hand!
    #####:  879:	int card_not_discarded = 1;//Flag for discard set!
    #####:  880:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  881:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  882:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  883:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  884:	    state->discardCount[currentPlayer]++;
    #####:  885:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  886:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  887:	    }
    #####:  888:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  889:	    state->handCount[currentPlayer]--;
    #####:  890:	    card_not_discarded = 0;//Exit the loop
        -:  891:	  }
    #####:  892:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  893:	    if(DEBUG) {
        -:  894:	      printf("No estate cards in your hand, invalid choice\n");
        -:  895:	      printf("Must gain an estate if there are any\n");
        -:  896:	    }
    #####:  897:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  898:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  899:	      state->supplyCount[estate]--;//Decrement estates
    #####:  900:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  901:		isGameOver(state);
call    0 never executed
        -:  902:	      }
        -:  903:	    }
    #####:  904:	    card_not_discarded = 0;//Exit the loop
        -:  905:	  }
        -:  906:			    
        -:  907:	  else{
    #####:  908:	    p++;//Next card
        -:  909:	  }
        -:  910:	}
        -:  911:      }
        -:  912:			    
        -:  913:      else{
    #####:  914:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  915:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  916:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  917:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  918:	    isGameOver(state);
call    0 never executed
        -:  919:	  }
        -:  920:	}
        -:  921:      }
        -:  922:	    
        -:  923:      
    #####:  924:      return 0;
        -:  925:		
        -:  926:    case great_hall:
        -:  927:      //+1 Card
        2:  928:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  929:			
        -:  930:      //+1 Actions
        2:  931:      state->numActions++;
        -:  932:			
        -:  933:      //discard card from hand
        2:  934:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:  935:      return 0;
        -:  936:		
        -:  937:    case minion:
        -:  938:      //+1 action
    #####:  939:      state->numActions++;
        -:  940:			
        -:  941:      //discard card from hand
    #####:  942:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  943:			
    #####:  944:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  945:	{
    #####:  946:	  state->coins = state->coins + 2;
        -:  947:	}
        -:  948:			
    #####:  949:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  950:	{
        -:  951:	  //discard hand
    #####:  952:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  953:	    {
    #####:  954:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  955:	    }
        -:  956:				
        -:  957:	  //draw 4
    #####:  958:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  959:	    {
    #####:  960:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  961:	    }
        -:  962:				
        -:  963:	  //other players discard hand and redraw if hand size > 4
    #####:  964:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  965:	    {
    #####:  966:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  967:		{
    #####:  968:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  969:		    {
        -:  970:		      //discard hand
    #####:  971:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  972:			{
    #####:  973:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  974:			}
        -:  975:							
        -:  976:		      //draw 4
    #####:  977:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  978:			{
    #####:  979:			  drawCard(i, state);
call    0 never executed
        -:  980:			}
        -:  981:		    }
        -:  982:		}
        -:  983:	    }
        -:  984:				
        -:  985:	}
    #####:  986:      return 0;
        -:  987:/*		
        -:  988:    case steward:
        -:  989:      if (choice1 == 1)
        -:  990:	{
        -:  991:	  //+2 cards
        -:  992:	  drawCard(currentPlayer, state);
        -:  993:	  drawCard(currentPlayer, state);
        -:  994:	}
        -:  995:      else if (choice1 == 2)
        -:  996:	{
        -:  997:	  //+2 coins
        -:  998:	  state->coins = state->coins + 2;
        -:  999:	}
        -: 1000:      else
        -: 1001:	{
        -: 1002:	  //trash 2 cards in hand
        -: 1003:	  discardCard(choice2, currentPlayer, state, 1);
        -: 1004:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1005:	}
        -: 1006:			
        -: 1007:      //discard card from hand
        -: 1008:      discardCard(handPos, currentPlayer, state, 0);
        -: 1009:      return 0;
        -: 1010:*/		
        -: 1011:    case tribute:
    #####: 1012:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1013:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1014:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1015:	  state->deckCount[nextPlayer]--;
        -: 1016:	}
    #####: 1017:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1018:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1019:	  state->discardCount[nextPlayer]--;
        -: 1020:	}
        -: 1021:	else{
        -: 1022:	  //No Card to Reveal
        -: 1023:	  if (DEBUG){
        -: 1024:	    printf("No cards to reveal\n");
        -: 1025:	  }
        -: 1026:	}
        -: 1027:      }
        -: 1028:	    
        -: 1029:      else{
    #####: 1030:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1031:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1032:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1033:	    state->deckCount[nextPlayer]++;
    #####: 1034:	    state->discard[nextPlayer][i] = -1;
    #####: 1035:	    state->discardCount[nextPlayer]--;
        -: 1036:	  }
        -: 1037:			    
    #####: 1038:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1039:	} 
    #####: 1040:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1041:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1042:	state->deckCount[nextPlayer]--;
    #####: 1043:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1044:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1045:	state->deckCount[nextPlayer]--;
        -: 1046:      }    
        -: 1047:		       
    #####: 1048:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1049:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1050:	state->playedCardCount++;
    #####: 1051:	tributeRevealedCards[1] = -1;
        -: 1052:      }
        -: 1053:
    #####: 1054:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1055:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1056:	  state->coins += 2;
        -: 1057:	}
        -: 1058:		    
    #####: 1059:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1060:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1061:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1062:	}
        -: 1063:	else{//Action Card
    #####: 1064:	  state->numActions = state->numActions + 2;
        -: 1065:	}
        -: 1066:      }
        -: 1067:	    
    #####: 1068:      return 0;
        -: 1069:		
        -: 1070:    case ambassador:
    #####: 1071:      j = 0;		//used to check if player has enough cards to discard
        -: 1072:
    #####: 1073:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1074:	{
    #####: 1075:	  return -1;				
        -: 1076:	}
        -: 1077:
    #####: 1078:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1079:	{
    #####: 1080:	  return -1;
        -: 1081:	}
        -: 1082:
    #####: 1083:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1084:	{
    #####: 1085:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1086:	    {
    #####: 1087:	      j++;
        -: 1088:	    }
        -: 1089:	}
    #####: 1090:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1091:	{
    #####: 1092:	  return -1;				
        -: 1093:	}
        -: 1094:
        -: 1095:      if (DEBUG) 
        -: 1096:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1097:
        -: 1098:      //increase supply count for choosen card by amount being discarded
    #####: 1099:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1100:			
        -: 1101:      //each other player gains a copy of revealed card
    #####: 1102:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1103:	{
    #####: 1104:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1105:	    {
    #####: 1106:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1107:	    }
        -: 1108:	}
        -: 1109:
        -: 1110:      //discard played card from hand
    #####: 1111:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1112:
        -: 1113:      //trash copies of cards returned to supply
    #####: 1114:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1115:	{
    #####: 1116:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1117:	    {
    #####: 1118:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1119:		{
    #####: 1120:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1121:		  break;
        -: 1122:		}
        -: 1123:	    }
        -: 1124:	}			
        -: 1125:
    #####: 1126:      return 0;
        -: 1127:		
        -: 1128:    case cutpurse:
        -: 1129:
    #####: 1130:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1131:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1132:	{
    #####: 1133:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1134:	    {
    #####: 1135:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1136:		{
    #####: 1137:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1138:		    {
    #####: 1139:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1140:		      break;
        -: 1141:		    }
    #####: 1142:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1143:		    {
    #####: 1144:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1145:			{
        -: 1146:			  if (DEBUG)
        -: 1147:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1148:			}	
    #####: 1149:		      break;
        -: 1150:		    }		
        -: 1151:		}
        -: 1152:					
        -: 1153:	    }
        -: 1154:				
        -: 1155:	}				
        -: 1156:
        -: 1157:      //discard played card from hand
    #####: 1158:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1159:
    #####: 1160:      return 0;
        -: 1161:
        -: 1162:		
        -: 1163:    case embargo: 
        -: 1164:      //+2 Coins
    #####: 1165:      state->coins = state->coins + 2;
        -: 1166:			
        -: 1167:      //see if selected pile is in play
    #####: 1168:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1169:	{
    #####: 1170:	  return -1;
        -: 1171:	}
        -: 1172:			
        -: 1173:      //add embargo token to selected supply pile
    #####: 1174:      state->embargoTokens[choice1]++;
        -: 1175:			
        -: 1176:      //trash card
    #####: 1177:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1178:      return 0;
        -: 1179:		
        -: 1180:    case outpost:
        -: 1181:      //set outpost flag
    #####: 1182:      state->outpostPlayed++;
        -: 1183:			
        -: 1184:      //discard card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:		
        -: 1188:    case salvager:
        -: 1189:      //+1 buy
    #####: 1190:      state->numBuys++;
        -: 1191:			
    #####: 1192:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1193:	{
        -: 1194:	  //gain coins equal to trashed card
    #####: 1195:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1196:	  //trash card
    #####: 1197:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1198:	}
        -: 1199:			
        -: 1200:      //discard card
    #####: 1201:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1202:      return 0;
        -: 1203:/*		
        -: 1204:    case sea_hag:
        -: 1205:      for (i = 0; i < state->numPlayers; i++){
        -: 1206:	if (i != currentPlayer){
        -: 1207:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        -: 1208:	  state->discardCount[i]++;
        -: 1209:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1210:	}
        -: 1211:      }
        -: 1212:      return 0;
        -: 1213:*/		
        -: 1214:    case treasure_map:
        -: 1215:      //search hand for another treasure_map
    #####: 1216:      index = -1;
    #####: 1217:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1218:	{
    #####: 1219:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1220:	    {
    #####: 1221:	      index = i;
    #####: 1222:	      break;
        -: 1223:	    }
        -: 1224:	}
    #####: 1225:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1226:	{
        -: 1227:	  //trash both treasure cards
    #####: 1228:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1229:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1230:
        -: 1231:	  //gain 4 Gold cards
    #####: 1232:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1233:	    {
    #####: 1234:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1235:	    }
        -: 1236:				
        -: 1237:	  //return success
    #####: 1238:	  return 1;
        -: 1239:	}
        -: 1240:			
        -: 1241:      //no second treasure_map found in hand
    #####: 1242:      return -1;
        -: 1243:    }
        -: 1244:	
        4: 1245:  return -1;
        -: 1246:}
        -: 1247:
function discardCard called 8 returned 100% blocks executed 78%
        8: 1248:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1249:{
        -: 1250:	
        -: 1251:  //if card is not trashed, added to Played pile 
        8: 1252:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1253:    {
        -: 1254:      //add card to played pile
        8: 1255:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        8: 1256:      state->playedCardCount++;
        -: 1257:    }
        -: 1258:	
        -: 1259:  //set played card to -1
        8: 1260:  state->hand[currentPlayer][handPos] = -1;
        -: 1261:	
        -: 1262:  //remove card from player's hand
        8: 1263:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1264:    {
        -: 1265:      //reduce number of cards in hand
    #####: 1266:      state->handCount[currentPlayer]--;
        -: 1267:    }
        8: 1268:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1269:    {
        -: 1270:      //reduce number of cards in hand
    #####: 1271:      state->handCount[currentPlayer]--;
        -: 1272:    }
        -: 1273:  else 	
        -: 1274:    {
        -: 1275:      //replace discarded card with last card in hand
        8: 1276:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1277:      //set last card to -1
        8: 1278:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1279:      //reduce number of cards in hand
        8: 1280:      state->handCount[currentPlayer]--;
        -: 1281:    }
        -: 1282:	
        8: 1283:  return 0;
        -: 1284:}
        -: 1285:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1286:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1287:{
        -: 1288:  //Note: supplyPos is enum of choosen card
        -: 1289:	
        -: 1290:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1291:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1292:    {
    #####: 1293:      return -1;
        -: 1294:    }
        -: 1295:	
        -: 1296:  //added card for [whoseTurn] current player:
        -: 1297:  // toFlag = 0 : add to discard
        -: 1298:  // toFlag = 1 : add to deck
        -: 1299:  // toFlag = 2 : add to hand
        -: 1300:
    #####: 1301:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1302:    {
    #####: 1303:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1304:      state->deckCount[player]++;
        -: 1305:    }
    #####: 1306:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1307:    {
    #####: 1308:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1309:      state->handCount[player]++;
        -: 1310:    }
        -: 1311:  else
        -: 1312:    {
    #####: 1313:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1314:      state->discardCount[player]++;
        -: 1315:    }
        -: 1316:	
        -: 1317:  //decrease number in supply pile
    #####: 1318:  state->supplyCount[supplyPos]--;
        -: 1319:	 
    #####: 1320:  return 0;
        -: 1321:}
        -: 1322:
function updateCoins called 26 returned 100% blocks executed 100%
       26: 1323:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1324:{
        -: 1325:  int i;
        -: 1326:	
        -: 1327:  //reset coin count
       26: 1328:  state->coins = 0;
        -: 1329:
        -: 1330:  //add coins for each Treasure card in player's hand
      156: 1331:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1332:    {
      130: 1333:      if (state->hand[player][i] == copper)
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
        -: 1334:	{
       66: 1335:	  state->coins += 1;
        -: 1336:	}
       64: 1337:      else if (state->hand[player][i] == silver)
branch  0 taken 3% (fallthrough)
branch  1 taken 97%
        -: 1338:	{
        2: 1339:	  state->coins += 2;
        -: 1340:	}
       62: 1341:      else if (state->hand[player][i] == gold)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -: 1342:	{
        4: 1343:	  state->coins += 3;
        -: 1344:	}	
        -: 1345:    }	
        -: 1346:
        -: 1347:  //add bonus
       26: 1348:  state->coins += bonus;
        -: 1349:
       26: 1350:  return 0;
        -: 1351:}
        -: 1352:
        -: 1353:// Card Implementation -----------------------------------------------------------------
        -: 1354:
        -: 1355:
function _cardSmithy called 2 returned 100% blocks executed 100%
        2: 1356:int _cardSmithy(int currentPlayer, struct gameState *state, int handPos, int num) {
        -: 1357:	int i;
       10: 1358:	for (i = 0; i < 4; i++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        8: 1359:		drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1360:	}
        -: 1361:	// discard card from hand
        2: 1362:	discardCard(handPos, currentPlayer, state, num);
call    0 returned 100%
        2: 1363:	return 0;
        -: 1364:}
        -: 1365:
function _cardVillage called 0 returned 0% blocks executed 0%
    #####: 1366:int _cardVillage(int currentPlayer, struct gameState *state, int handPos, int num) {
        -: 1367:
        -: 1368:	// +1 card
    #####: 1369:	drawCard(currentPlayer, state);
call    0 never executed
        -: 1370:
        -: 1371:	// +2 actions
    #####: 1372:	state->numActions = state->numActions - 2;
        -: 1373:
        -: 1374:	// discard played card from hand
    #####: 1375:	discardCard(handPos, currentPlayer, state, num);
call    0 never executed
        -: 1376:
    #####: 1377:	return 0;
        -: 1378:}
        -: 1379:
        -: 1380:
function _cardSteward called 0 returned 0% blocks executed 0%
    #####: 1381:int _cardSteward(int currentPlayer, struct gameState *state, int handPos, int num, int choice1, int choice2, int choice3) {
        -: 1382:
    #####: 1383:	if (choice1 == 1) {
branch  0 never executed
branch  1 never executed
        -: 1384:		//+2 cards
    #####: 1385:		drawCard(currentPlayer, state);
call    0 never executed
    #####: 1386:		 drawCard(currentPlayer, state);
call    0 never executed
    #####: 1387:	 } else if (choice1 != 2) {
branch  0 never executed
branch  1 never executed
        -: 1388:		//+2 coins
    #####: 1389:		state->coins = state->coins + 2;
        -: 1390:	} else {
        -: 1391:		// trash 2 cards in hand
    #####: 1392:		discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1393:		discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1394:	}
    #####: 1395:	return 0;
        -: 1396:}
        -: 1397:
        -: 1398:
function _cardAdventurer called 2 returned 100% blocks executed 76%
        2: 1399:int _cardAdventurer(int currentPlayer, struct gameState *state, int drawntreasure, int handPos, int num) {
        -: 1400:	int cardDrawn;
        -: 1401:	int temphand[MAX_HAND];
        2: 1402:	int z = 0;
        -: 1403:
        -: 1404:
        8: 1405:	while(drawntreasure<2){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        4: 1406:		if (state->deckCount[currentPlayer] <=1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1407:			//if the deck is empty we need to shuffle discard and add to deck
    #####: 1408:			shuffle(currentPlayer, state);
call    0 never executed
        -: 1409:		}
        4: 1410:		drawCard(currentPlayer, state);
call    0 returned 100%
        4: 1411:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
        -: 1412:		//top card of hand is most recently drawn card.
        -: 1413:
        4: 1414:		if (cardDrawn == silver || cardDrawn == gold || cardDrawn == copper) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 100% (fallthrough)
branch  5 taken 0%
        4: 1415:			drawntreasure++;
        -: 1416:		} else {
    #####: 1417:			temphand[z]=cardDrawn;
    #####: 1418:			state->handCount[currentPlayer]--; 
        -: 1419:			//this should just remove the top card (the most recently drawn one).
    #####: 1420:			z++;
        -: 1421:		}
        -: 1422:	}
        -: 1423:
        4: 1424:	while( z > 0 ){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -: 1425:		// discard all cards in play that have been drawn
    #####: 1426:		printf("discarding %d\n", temphand[z]);
call    0 never executed
    #####: 1427:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; 
    #####: 1428:		z--;
        -: 1429:	}
        -: 1430: 
        -: 1431: 	// discard card from hand
        2: 1432:	discardCard(handPos, currentPlayer, state, num);
call    0 returned 100%
        2: 1433:	return 0;
        -: 1434:}
        -: 1435:
function _cardSeaHag called 0 returned 0% blocks executed 0%
    #####: 1436:int _cardSeaHag(int currentPlayer, struct gameState *state) {
        -: 1437:
        -: 1438:	int i;
    #####: 1439:	for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1440:	state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];          
    #####: 1441:	state->deckCount[i]--;
    #####: 1442:	state->discardCount[i]++;
    #####: 1443:	state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1444:	}
    #####: 1445:	return 0;
        -: 1446:}
        -: 1447:
        -: 1448:
        -: 1449:
        -: 1450://end of dominion.c
        -: 1451:
