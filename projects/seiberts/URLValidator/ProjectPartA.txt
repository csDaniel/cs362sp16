CS 362
Group Project Part A
Spring 2016


Team Members:        
Shawn Seibert: seiberts@oregonstate.edu
Suyana Lozada: lozadas@oregonstate.edu
Ellard Gerritsen van der Hoop: gerritse@oregonstate.edu




 1.Explain testIsValid Function of UrlValidator test code:


The testIsValid function is a public void method that takes two arguments: an object array testObjects, and a long variable options. The general purpose of this function is to create a set of tests by tracking the testUrl arrays and running through all possible permutations of their combinations. When the testIsValid function is executed it creates UrlValidator object urlVal and asserts that two url addresses are valid by calling the functions urlVal.isValid. Subsequently, the function performs a do while loop which will be exited once the function incrementTestPartsIndex(testPartsIndex, testObjects) is false. Within the do while loop a StringBuffer object testBuffer is created and  a for loop builds all the url components. Once the for loop is exited test the string variable url is set equal to  testBuffer.toString(). The boolean variable result is set equal to  urlVal.isValid(url) which determines whether or not the variable url is valid. If url is valid result will be true and if invalid result will be equal to false. If the result is true, then the url will be printed to the screen and it will passed to the function assertEquals(url, expected, result). 




2.Give how many total number of urls it is testing:


At the bottom of the code, we see two Object arrays Object[] testUrlParts = {testUrlScheme, testUrlAuthority, testUrlPort, testPath, testUrlQuery};  and  Object[] testUrlPartsOptions = {testUrlScheme, testUrlAuthority, testUrlPort, testUrlPathOptions, testUrlQuery}; By looking at the ResultPair[] array’s, we can see that the URL is broken down into 5 different parts. These URL’s have a choice from 9 schemes, 19 authorities, 7 ports, 10 paths, and 3 queries. By multiplying each of the URL parts,  gives us a total of 35910 URL’s that can be tested using the testIsValid funciton. 












3.Explain how it is building all the urls:


The program is building all the URLs by breaking up the URL into the following pieces: scheme, authority, port, path, and query. Then the parts are each stored in  different ResultPair arrays which consist of elements with a string and boolean value. The function then has a loop that goes through each of the possible combinations of the ResultPair array values and matches this with the value of the boolean value of the array elements. So essentially it concatenates the pieces from the 5 categories to create the URL. 




4.Give an example of valid url being tested and an invalid url being tested by testIsValid() method:


An example of a valid url being tested is www.google.com.An invalid url can be any url which contains one or many invalid url components (i.e scheme, authority, port, path, and query). For instance, and invalid url could be: http://www.go.a1a.com this url contains an invalid authority component. 




5.Do you think that a real world test (URL Validator's testIsValid() test in this case) is very different than the unit tests and card tests that we wrote (in terms of concepts & complexity)? Explain in few lines:


The unit tests/card tests we wrote are not much different than the real world tests like the URL validator though the test case shown here covers much more than what we did with our individual function and card unit tests. That being said, both the real world tests and our tests follow the guidelines of finding out exactly what is needed to be tested, creating the tests(such as giving various possible inputs that could be expected), then seeing/knowing when a test should pass or fail. For instance, in our dominion card unit tests we tested the effect of the cards on the game state and compared the new game after the card effect was applied with a control game struct. In the same manner, the testIsValid function compared the test url with an expected url in order to determine if a given url is valid compared to the test control.