-----------------Unit Test 1-1 ----------------------
--------------- updateCoins() ----------------------
TEST 1: Copper coins equal to 1
Number of Copper Cards: 3
Copper coin total: 3
Test 1 passed.
-----------------Unit Test 1-2 ----------------------
--------------- updateCoins() ----------------------
TEST 2: Silver coins equal to 2
Number of Silver Cards: 3
Silver coin total: 6
Test 2 passed.
-----------------Unit Test 1-3 ----------------------
--------------- updateCoins() ----------------------
TEST 3: Gold coins equal to 3
Number of Gold Cards: 3
Gold coin total: 9
Test 3 passed.
-----------------Unit Test 1-4 ----------------------
--------------- updateCoins() ----------------------
TEST 4: Set copper to 5, silver to 10, gold to 15
Total number cards: 3
All coin total: 30
Test 4 passed.
File 'unittest1.c'
Lines executed:86.32% of 95
Creating 'unittest1.c.gcov'

File 'unittest1.c'
Lines executed:86.32% of 95
Branches executed:86.96% of 46
Taken at least once:63.04% of 46
Calls executed:85.71% of 28
Creating 'unittest1.c.gcov'

-----------------Unit Test 2-1 ----------------------
----------------- scoreFor() ----------------------
Test 1: Score From Hand with 10 estate cards
SCORE: 10
Calculated Score: 10
Test 1: Passed.
-----------------Unit Test 2-2 ----------------------
----------------- scoreFor() ----------------------
Test 2: Score From Discard with 10 province cards
Test SCORE: 60
Calculated Score: 60
Test 2: Passed.
-----------------Unit Test 2-3 ----------------------
----------------- scoreFor() ----------------------
Test 3: Score From Deck with 10 Great Hall cards
Test SCORE: 10
Calculated Score: 10
Test 3: Passed.
File 'unittest2.c'
Lines executed:95.45% of 66
Creating 'unittest2.c.gcov'

File 'unittest2.c'
Lines executed:95.45% of 66
Branches executed:100.00% of 54
Taken at least once:61.11% of 54
Calls executed:75.00% of 24
Creating 'unittest2.c.gcov'

-----------------Unit Test 3-1 ----------------------
--------------- discardCard() ----------------------
Test 1: Set players hand count to 10 cards and remove one
Current player hand count: 10
Remove 1 card.
Current player hand count: 9
Test 1: Passed.
-----------------Unit Test 3-2 ----------------------
--------------- discardCard() ----------------------
Test 2: Set players hand count to 1 cards and remove one
Current player hand count: 1
Remove last card.
Current player hand count: 0
Test 2: Passed.
File 'unittest3.c'
Lines executed:76.79% of 56
Creating 'unittest3.c.gcov'

File 'unittest3.c'
Lines executed:76.79% of 56
Branches executed:87.50% of 16
Taken at least once:43.75% of 16
Calls executed:80.00% of 20
Creating 'unittest3.c.gcov'

-----------------Unit Test 4-1 ----------------------
--------------- fullDeckCount() ----------------------
Test 1: Set deck count equal to 10.
COUNT: 10
Test 1: Passed.
-----------------Unit Test 4-2 ----------------------
--------------- fullDeckCount() ----------------------
Test 2: Set hand count equal to 6.
COUNT: 6
Test 2: Passed.
-----------------Unit Test 4-3 ----------------------
--------------- fullDeckCount() ----------------------
Test 3: Set discard count equal to 12.
COUNT: 12
Test 3: Passed.
File 'unittest4.c'
Lines executed:94.34% of 53
Creating 'unittest4.c.gcov'

File 'unittest4.c'
Lines executed:94.34% of 53
Branches executed:100.00% of 24
Taken at least once:75.00% of 24
Calls executed:83.33% of 18
Creating 'unittest4.c.gcov'

-------------------ADVENTURE CARD TEST ---------------------

Test 1: 
Test Passed: Card Drawn is top card.
COPPER 4 | SILVER 5 | GOLD 6 
Test Passed: Draw Treasure: 4

Test 2: 
Test Passed: Card Drawn is top card.
COPPER 4 | SILVER 5 | GOLD 6 
Test Failed: Draw Treasure: 5
File 'cardtest1.c'
Lines executed:80.43% of 46
Creating 'cardtest1.c.gcov'

File 'cardtest1.c'
Lines executed:80.43% of 46
Branches executed:88.89% of 18
Taken at least once:50.00% of 18
Calls executed:72.73% of 11
Creating 'cardtest1.c.gcov'

-------------------SMITHY CARD TEST---------------------
Drawing card: 1
Drawing Card from Draw Card()
Drawing card: 2
Drawing Card from Draw Card()
Test Failed: LoopCount = 2  |   Draw total should be: 3
File 'cardtest2.c'
Lines executed:95.45% of 22
Creating 'cardtest2.c.gcov'

File 'cardtest2.c'
Lines executed:95.45% of 22
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
Calls executed:85.71% of 7
Creating 'cardtest2.c.gcov'

-------------------COUNCIL ROOM CARD TEST---------------------
CHECKING CARD DRAW AMOUNT.
Drawing card: 1
Drawing card: 2
Drawing card: 3
Drawing card: 4
Test Passed: LoopCount = 4  |   Draw total should be: 4
CHECK BUY AMOUNT:
Number of buys before: 1
Number of buys after: 2
Test Passed: Buy amount increased by 1
CHECKING DISCARD.
Current player hand count: 4
Current player hand count: 3
Test Passed: Player discarded.
File 'cardtest3.c'
Lines executed:93.62% of 47
Creating 'cardtest3.c.gcov'

File 'cardtest3.c'
Lines executed:93.62% of 47
Branches executed:100.00% of 12
Taken at least once:75.00% of 12
Calls executed:84.21% of 19
Creating 'cardtest3.c.gcov'

-------------------MINION CARD TEST---------------------
CHECKING INCREASE IN ACTIONS.
Previous number of Actions 2
Increased number of Actions 2
Test passed: Number of actions increased by one.
CHECKING DISCARD.
Current player hand count: 4
Current player hand count: 3
Test Passed: Player discarded.
I TOTAL: 0
CHECKING COIN INCREASE
Current coin count 4.
New coin count 6.
Test Passed: Player coin increased by two.
I TOTAL: 1
CHECKING DISCARD.
Current player hand : 3
Test passed: Card count = 0.
CHECKING ADD 4 CARDS
Number of cards added: 0
Number of cards added: 1
Number of cards added: 2
Number of cards added: 3
Test passed: New card count = 4.
CHECKING OTHER PLAYERS ADDED CARDS
Number of cards added: 0
Number of cards added: 1
Number of cards added: 2
Number of cards added: 3
Test passed: New card count = 4.
File 'cardtest4.c'
Lines executed:92.94% of 85
Creating 'cardtest4.c.gcov'

File 'cardtest4.c'
Lines executed:92.94% of 85
Branches executed:100.00% of 34
Taken at least once:76.47% of 34
Calls executed:84.21% of 38
Creating 'cardtest4.c.gcov'

File 'dominion.c'
Lines executed:18.39% of 560
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       30:    8:int compare(const void* a, const void* b) {
       30:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
       30:   11:  if (*(int*)a < *(int*)b)
        8:   12:    return -1;
       22:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
        1:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       10:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
        5:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
        2:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        2:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        2:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
        2:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:  while (state->deckCount[player] > 0) {
       20:  215:    card = floor(Random() * state->deckCount[player]);
       20:  216:    newDeck[newDeckPos] = state->deck[player][card];
       20:  217:    newDeckPos++;
       72:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
       52:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       20:  221:    state->deckCount[player]--;
        -:  222:  }
       22:  223:  for (i = 0; i < newDeckPos; i++) {
       20:  224:    state->deck[player][i] = newDeck[i];
       20:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        2:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
      510:  311:int numHandCards(struct gameState *state) {
      510:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
      510:  346:int whoseTurn(struct gameState *state) {
      510:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       17:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
        -:  528:  
       17:  529:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  530:    
        -:  531:    //Step 1 Shuffle the discard pile back into a deck
        -:  532:    int i;
        -:  533:    //Move discard to deck
    #####:  534:    for (i = 0; i < state->discardCount[player];i++){
    #####:  535:      state->deck[player][i] = state->discard[player][i];
    #####:  536:      state->discard[player][i] = -1;
        -:  537:    }
        -:  538:
    #####:  539:    state->deckCount[player] = state->discardCount[player];
    #####:  540:    state->discardCount[player] = 0;//Reset discard
        -:  541:
        -:  542:    //Shufffle the deck
    #####:  543:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  544:   
        -:  545:    if (DEBUG){//Debug statements
        -:  546:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  547:    }
        -:  548:    
    #####:  549:    state->discardCount[player] = 0;
        -:  550:
        -:  551:    //Step 2 Draw Card
    #####:  552:    count = state->handCount[player];//Get current player's hand count
    #####:  553:    printf("Drawing Card from Draw Card()\n");
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Current hand count: %d\n", count);
        -:  556:    }
        -:  557:    
    #####:  558:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  559:
    #####:  560:    if (deckCounter == 0)
    #####:  561:      return -1;
        -:  562:
    #####:  563:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  564:    state->deckCount[player]--;
    #####:  565:    state->handCount[player]++;//Increment hand count
        -:  566:  }
        -:  567:
        -:  568:  else{
       17:  569:    int count = state->handCount[player];//Get current hand count for player
        -:  570:    int deckCounter;
        -:  571:    if (DEBUG){//Debug statements
        -:  572:      printf("Current hand count: %d\n", count);
        -:  573:    }
        -:  574:
       17:  575:    deckCounter = state->deckCount[player];//Create holder for the deck count
       17:  576:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       17:  577:    state->deckCount[player]--;
       17:  578:    state->handCount[player]++;//Increment hand count
        -:  579:  }
        -:  580:
       17:  581:  return 0;
        -:  582:}
        -:  583:
    #####:  584:int getCost(int cardNumber)
        -:  585:{
    #####:  586:  switch( cardNumber ) 
        -:  587:    {
        -:  588:    case curse:
    #####:  589:      return 0;
        -:  590:    case estate:
    #####:  591:      return 2;
        -:  592:    case duchy:
    #####:  593:      return 5;
        -:  594:    case province:
    #####:  595:      return 8;
        -:  596:    case copper:
    #####:  597:      return 0;
        -:  598:    case silver:
    #####:  599:      return 3;
        -:  600:    case gold:
    #####:  601:      return 6;
        -:  602:    case adventurer:
    #####:  603:      return 6;
        -:  604:    case council_room:
    #####:  605:      return 5;
        -:  606:    case feast:
    #####:  607:      return 4;
        -:  608:    case gardens:
    #####:  609:      return 4;
        -:  610:    case mine:
    #####:  611:      return 5;
        -:  612:    case remodel:
    #####:  613:      return 4;
        -:  614:    case smithy:
    #####:  615:      return 4;
        -:  616:    case village:
    #####:  617:      return 3;
        -:  618:    case baron:
    #####:  619:      return 4;
        -:  620:    case great_hall:
    #####:  621:      return 3;
        -:  622:    case minion:
    #####:  623:      return 5;
        -:  624:    case steward:
    #####:  625:      return 3;
        -:  626:    case tribute:
    #####:  627:      return 5;
        -:  628:    case ambassador:
    #####:  629:      return 3;
        -:  630:    case cutpurse:
    #####:  631:      return 4;
        -:  632:    case embargo: 
    #####:  633:      return 2;
        -:  634:    case outpost:
    #####:  635:      return 5;
        -:  636:    case salvager:
    #####:  637:      return 4;
        -:  638:    case sea_hag:
    #####:  639:      return 4;
        -:  640:    case treasure_map:
    #####:  641:      return 4;
        -:  642:    }
        -:  643:	
    #####:  644:  return -1;
        -:  645:}
        -:  646:
        -:  647:/*************
        -:  648: *Refactored Cards
        -:  649: *
        -:  650: * ***********/
        -:  651:
    #####:  652:int SmithyCardEffect(int currentPlayer, struct gameState *state, int handPos)
        -:  653:{
        -:  654:	int i;
        -:  655:	
        -:  656:	//+3 cards
    #####:  657:	for (i = 0; i < 2; i++)
        -:  658:	{
    #####:  659:		drawCard(currentPlayer, state);
        -:  660:	}
        -:  661:
        -:  662:	//discard card from hand
    #####:  663:	discardCard(handPos, currentPlayer, state, 0);
    #####:  664:	return 0;
        -:  665:}
        -:  666:
        -:  667:
        -:  668:
        -:  669:
    #####:  670:int AdventurerCardEffect(int currentPlayer, struct gameState *state, int drawntreasure, int temphand[MAX_HAND], int cardDrawn, int z)
        -:  671:{
    #####:  672:	cardDrawn = 0;
    #####:  673:	while(drawntreasure<2){
    #####:  674:		if (state->deckCount[currentPlayer] < 1){ //if the deck is empty we need to shuffle discard and add
    #####:  675:			shuffle(currentPlayer, state);
        -:  676:		}
        -:  677:
    #####:  678:		drawCard(currentPlayer, state);
    #####:  679:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] -1]; //top card of hand is most recently drawn card
        -:  680:		
    #####:  681:		if (cardDrawn == copper || cardDrawn == gold)
    #####:  682:			drawntreasure++;
        -:  683:		else{
    #####:  684:			temphand[z]=cardDrawn;
    #####:  685:			state->handCount[currentPlayer]--; //remove the top card
    #####:  686:			z++;
        -:  687:		}
        -:  688:	
        -:  689:	}
        -:  690:
    #####:  691:	while (z-1 >= 0){
    #####:  692:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1];
    #####:  693:		z=z-1;    //discard all cards in play that have been drawn 
        -:  694:		
        -:  695:	
        -:  696:	}
    #####:  697:	return 0;
        -:  698:
        -:  699:}
        -:  700:
        -:  701:
        -:  702:
    #####:  703:int FeastCardEffect(int currentPlayer, int temphand[MAX_HAND], struct gameState *state, int choice1)
        -:  704:{
    #####:  705:	int x = 0, i;
        -:  706:
        -:  707:	// gain card with cost up to 5
        -:  708:	// Backup hand
        -:  709:	
    #####:  710:	for (i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  711:	{
    #####:  712:		temphand[i] = state->hand[currentPlayer][i]; //Backup card
    #####:  713:		state->hand[currentPlayer][i] = -1; //Set to nothing
        -:  714:
        -:  715:	}
        -:  716:
        -:  717:	//Backup hand
        -:  718:	
        -:  719:	//Update coins for buy
    #####:  720:	updateCoins(currentPlayer, state, 5);
    #####:  721:	x = 2; //Condition to loop on
    #####:  722:	while (x >= 0){
    #####:  723:		if (supplyCount(choice1, state) <= 0){
        -:  724:			if (DEBUG)
        -:  725:				printf("None of that card left, sorry!\n");
        -:  726:			
        -:  727:			if(DEBUG){
        -:  728:				printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  729:			}
        -:  730:		}	
    #####:  731:		else if (state->coins < getCost(choice1)){
    #####:  732:			printf("That card is too expensive!\n");
        -:  733:
        -:  734:			if (DEBUG){
        -:  735:				printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  736:			}
        -:  737:		}
        -:  738:		else{
        -:  739:			if (DEBUG){
        -:  740:				printf("Deck count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  741:			}
        -:  742:
    #####:  743:			gainCard(choice1, state, 0, currentPlayer); // Gain card
    #####:  744:			x = x - 1; //Reduces x by 1 
        -:  745:
        -:  746:			if (DEBUG){
        -:  747:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  748:			}
        -:  749:		}	
        -:  750:
        -:  751:	}
        -:  752:	
        -:  753:	//reset hand
    #####:  754:	for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  755:		state->hand[currentPlayer][i] = temphand[i];
    #####:  756:		temphand[i] = -1;
        -:  757:	}
        -:  758:	//reset hand
        -:  759:	
    #####:  760:	return 0;
        -:  761:
        -:  762:
        -:  763:}
        -:  764:
        -:  765:
        -:  766:
        -:  767:
    #####:  768:int GreatHallCardEffect(int currentPlayer,struct gameState *state)
        -:  769:{
        -:  770:	//+1 card
    #####:  771:	drawCard(currentPlayer, state);
        -:  772:
        -:  773:	//+1 actions
    #####:  774:	state->numActions++;
        -:  775:	
        -:  776:	
    #####:  777:	return 0;
        -:  778:
        -:  779:
        -:  780:}
        -:  781:
        -:  782:
    #####:  783:int StewardCardEffect(int choice1, int choice2, int choice3, int currentPlayer, struct gameState *state, int handPos)
        -:  784:{
    #####:  785:	if (choice1 == 1)
        -:  786:	{
        -:  787:		//+2 cards
    #####:  788:		drawCard(currentPlayer, state);
    #####:  789:		drawCard(currentPlayer, state);
        -:  790:
        -:  791:	}
    #####:  792:	else if (choice1 == 2){
        -:  793:		//+2 coins
    #####:  794:		state->coins = state->coins + 2;
        -:  795:
        -:  796:	}
        -:  797:	
        -:  798:
        -:  799:	else{
        -:  800:		//trash 2 cards in hand
    #####:  801:		discardCard(choice2, currentPlayer, state, 1);
    #####:  802:		discardCard(choice3, currentPlayer, state, 1);
        -:  803:	}
        -:  804:	
        -:  805:	//discard card from hand
    #####:  806:	discardCard(handPos, currentPlayer, state, 0);
    #####:  807:	return 0;
        -:  808:
        -:  809:}
        -:  810:
        -:  811:
        -:  812:
    #####:  813:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  814:{
        -:  815:  int i;
        -:  816:  int j;
        -:  817:  int k;
        -:  818:  int x;
        -:  819:  int index;
    #####:  820:  int currentPlayer = whoseTurn(state);
    #####:  821:  int nextPlayer = currentPlayer + 1;
        -:  822:
    #####:  823:  int tributeRevealedCards[2] = {-1, -1};
        -:  824:  int temphand[MAX_HAND];// moved above the if statement
    #####:  825:  int drawntreasure=0;
        -:  826:  int cardDrawn;
    #####:  827:  int z = 0;// this is the counter for the temp hand
    #####:  828:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  829:    nextPlayer = 0;
        -:  830:  }
        -:  831:  
        -:  832:	
        -:  833:  //uses switch to select card and perform actions
    #####:  834:  switch( card ) 
        -:  835:    {
        -:  836:    case adventurer:
    #####:  837:	AdventurerCardEffect(currentPlayer, state, drawntreasure, temphand, cardDrawn, z);
        -:  838:
        -:  839:/***	Previous adventurer code
        -:  840:      while(drawntreasure<2){
        -:  841:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  842:	  shuffle(currentPlayer, state);
        -:  843:	}
        -:  844:	drawCard(currentPlayer, state);
        -:  845:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  846:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  847:	  drawntreasure++;
        -:  848:	else{
        -:  849:	  temphand[z]=cardDrawn;
        -:  850:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  851:	  z++;
        -:  852:	}
        -:  853:      }
        -:  854:      while(z-1>=0){
        -:  855:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  856:	z=z-1;
        -:  857:      }
        -:  858:      return 0;
        -:  859:***/
        -:  860:			
        -:  861:    case council_room:
        -:  862:      //+4 Cards
    #####:  863:      for (i = 0; i < 4; i++)
        -:  864:	{
    #####:  865:	  drawCard(currentPlayer, state);
        -:  866:	}
        -:  867:			
        -:  868:      //+1 Buy
    #####:  869:      state->numBuys++;
        -:  870:			
        -:  871:      //Each other player draws a card
    #####:  872:      for (i = 0; i < state->numPlayers; i++)
        -:  873:	{
    #####:  874:	  if ( i != currentPlayer )
        -:  875:	    {
    #####:  876:	      drawCard(i, state);
        -:  877:	    }
        -:  878:	}
        -:  879:			
        -:  880:      //put played card in played card pile
    #####:  881:      discardCard(handPos, currentPlayer, state, 0);
        -:  882:			
    #####:  883:      return 0;
        -:  884:			
        -:  885:    case feast:
    #####:  886:   	FeastCardEffect(currentPlayer, temphand, state, choice1);   
        -:  887:/**
        -:  888:	//gain card with cost up to 5
        -:  889:      //Backup hand
        -:  890:      
        -:  891:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -:  892:	temphand[i] = state->hand[currentPlayer][i];//Backup card
        -:  893:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  894:      }
        -:  895:      //Backup hand
        -:  896:
        -:  897:      //Update Coins for Buy
        -:  898:      updateCoins(currentPlayer, state, 5);
        -:  899:      x = 1;//Condition to loop on
        -:  900:      while( x == 1) {//Buy one card
        -:  901:	if (supplyCount(choice1, state) <= 0){
        -:  902:	  if (DEBUG)
        -:  903:	    printf("None of that card left, sorry!\n");
        -:  904:
        -:  905:	  if (DEBUG){
        -:  906:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  907:	  }
        -:  908:	}
        -:  909:	else if (state->coins < getCost(choice1)){
        -:  910:	  printf("That card is too expensive!\n");
        -:  911:
        -:  912:	  if (DEBUG){
        -:  913:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  914:	  }
        -:  915:	}
        -:  916:	else{
        -:  917:
        -:  918:	  if (DEBUG){
        -:  919:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  920:	  }
        -:  921:
        -:  922:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
        -:  923:	  x = 0;//No more buying cards
        -:  924:
        -:  925:	  if (DEBUG){
        -:  926:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  927:	  }
        -:  928:
        -:  929:	}
        -:  930:      }     
        -:  931:
        -:  932:      //Reset Hand
        -:  933:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -:  934:	state->hand[currentPlayer][i] = temphand[i];
        -:  935:	temphand[i] = -1;
        -:  936:      }
        -:  937:      //Reset Hand
        -:  938:      			
        -:  939:      return 0;
        -:  940:**/			
        -:  941:    case gardens:
    #####:  942:      return -1;
        -:  943:			
        -:  944:    case mine:
    #####:  945:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  946:
    #####:  947:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  948:	{
    #####:  949:	  return -1;
        -:  950:	}
        -:  951:		
    #####:  952:      if (choice2 > treasure_map || choice2 < curse)
        -:  953:	{
    #####:  954:	  return -1;
        -:  955:	}
        -:  956:
    #####:  957:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  958:	{
    #####:  959:	  return -1;
        -:  960:	}
        -:  961:
    #####:  962:      gainCard(choice2, state, 2, currentPlayer);
        -:  963:
        -:  964:      //discard card from hand
    #####:  965:      discardCard(handPos, currentPlayer, state, 0);
        -:  966:
        -:  967:      //discard trashed card
    #####:  968:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  969:	{
    #####:  970:	  if (state->hand[currentPlayer][i] == j)
        -:  971:	    {
    #####:  972:	      discardCard(i, currentPlayer, state, 0);			
    #####:  973:	      break;
        -:  974:	    }
        -:  975:	}
        -:  976:			
    #####:  977:      return 0;
        -:  978:			
        -:  979:    case remodel:
    #####:  980:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  981:
    #####:  982:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  983:	{
    #####:  984:	  return -1;
        -:  985:	}
        -:  986:
    #####:  987:      gainCard(choice2, state, 0, currentPlayer);
        -:  988:
        -:  989:      //discard card from hand
    #####:  990:      discardCard(handPos, currentPlayer, state, 0);
        -:  991:
        -:  992:      //discard trashed card
    #####:  993:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  994:	{
    #####:  995:	  if (state->hand[currentPlayer][i] == j)
        -:  996:	    {
    #####:  997:	      discardCard(i, currentPlayer, state, 0);			
    #####:  998:	      break;
        -:  999:	    }
        -: 1000:	}
        -: 1001:
        -: 1002:
    #####: 1003:      return 0;
        -: 1004:		
        -: 1005:    case smithy:
    #####: 1006:	SmithyCardEffect(currentPlayer, state, handPos);
        -: 1007:	/**
        -: 1008:      //+3 Cards
        -: 1009:      for (i = 0; i < 3; i++)
        -: 1010:	{
        -: 1011:	  drawCard(currentPlayer, state);
        -: 1012:	}
        -: 1013:			
        -: 1014:      //discard card from hand
        -: 1015:      discardCard(handPos, currentPlayer, state, 0);
        -: 1016:      return 0;
        -: 1017:	**/	
        -: 1018:    case village:
        -: 1019:      //+1 Card
    #####: 1020:      drawCard(currentPlayer, state);
        -: 1021:			
        -: 1022:      //+2 Actions
    #####: 1023:      state->numActions = state->numActions + 2;
        -: 1024:			
        -: 1025:      //discard played card from hand
    #####: 1026:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1027:      return 0;
        -: 1028:		
        -: 1029:    case baron:
    #####: 1030:      state->numBuys++;//Increase buys by 1!
    #####: 1031:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1032:	int p = 0;//Iterator for hand!
    #####: 1033:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1034:	while(card_not_discarded){
    #####: 1035:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1036:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1037:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1038:	    state->discardCount[currentPlayer]++;
    #####: 1039:	    for (;p < state->handCount[currentPlayer]; p++){
    #####: 1040:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1041:	    }
    #####: 1042:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1043:	    state->handCount[currentPlayer]--;
    #####: 1044:	    card_not_discarded = 0;//Exit the loop
        -: 1045:	  }
    #####: 1046:	  else if (p > state->handCount[currentPlayer]){
        -: 1047:	    if(DEBUG) {
        -: 1048:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1049:	      printf("Must gain an estate if there are any\n");
        -: 1050:	    }
    #####: 1051:	    if (supplyCount(estate, state) > 0){
    #####: 1052:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1053:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1054:	      if (supplyCount(estate, state) == 0){
    #####: 1055:		isGameOver(state);
        -: 1056:	      }
        -: 1057:	    }
    #####: 1058:	    card_not_discarded = 0;//Exit the loop
        -: 1059:	  }
        -: 1060:			    
        -: 1061:	  else{
    #####: 1062:	    p++;//Next card
        -: 1063:	  }
        -: 1064:	}
        -: 1065:      }
        -: 1066:			    
        -: 1067:      else{
    #####: 1068:	if (supplyCount(estate, state) > 0){
    #####: 1069:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1070:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1071:	  if (supplyCount(estate, state) == 0){
    #####: 1072:	    isGameOver(state);
        -: 1073:	  }
        -: 1074:	}
        -: 1075:      }
        -: 1076:	    
        -: 1077:      
    #####: 1078:      return 0;
        -: 1079:		
        -: 1080:    case great_hall:
    #####: 1081:	GreatHallCardEffect(currentPlayer, state);
        -: 1082:	/***
        -: 1083:      //+1 Card
        -: 1084:      drawCard(currentPlayer, state);
        -: 1085:			
        -: 1086:      //+1 Actions
        -: 1087:      state->numActions++;
        -: 1088:			
        -: 1089:      //discard card from hand
        -: 1090:      discardCard(handPos, currentPlayer, state, 0);
        -: 1091:      return 0;
        -: 1092:	**/	
        -: 1093:    case minion:
        -: 1094:      //+1 action
    #####: 1095:      state->numActions++;
        -: 1096:			
        -: 1097:      //discard card from hand
    #####: 1098:      discardCard(handPos, currentPlayer, state, 0);
        -: 1099:			
    #####: 1100:      if (choice1)		//+2 coins
        -: 1101:	{
    #####: 1102:	  state->coins = state->coins + 2;
        -: 1103:	}
        -: 1104:			
    #####: 1105:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1106:	{
        -: 1107:	  //discard hand
    #####: 1108:	  while(numHandCards(state) > 0)
        -: 1109:	    {
    #####: 1110:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1111:	    }
        -: 1112:				
        -: 1113:	  //draw 4
    #####: 1114:	  for (i = 0; i < 4; i++)
        -: 1115:	    {
    #####: 1116:	      drawCard(currentPlayer, state);
        -: 1117:	    }
        -: 1118:				
        -: 1119:	  //other players discard hand and redraw if hand size > 4
    #####: 1120:	  for (i = 0; i < state->numPlayers; i++)
        -: 1121:	    {
    #####: 1122:	      if (i != currentPlayer)
        -: 1123:		{
    #####: 1124:		  if ( state->handCount[i] > 4 )
        -: 1125:		    {
        -: 1126:		      //discard hand
    #####: 1127:		      while( state->handCount[i] > 0 )
        -: 1128:			{
    #####: 1129:			  discardCard(handPos, i, state, 0);
        -: 1130:			}
        -: 1131:							
        -: 1132:		      //draw 4
    #####: 1133:		      for (j = 0; j < 4; j++)
        -: 1134:			{
    #####: 1135:			  drawCard(i, state);
        -: 1136:			}
        -: 1137:		    }
        -: 1138:		}
        -: 1139:	    }
        -: 1140:				
        -: 1141:	}
    #####: 1142:      return 0;
        -: 1143:		
        -: 1144:    case steward:
    #####: 1145:	StewardCardEffect(choice1,choice2,choice3, currentPlayer,state,handPos);
        -: 1146:	/**
        -: 1147:      if (choice1 == 1)
        -: 1148:	{
        -: 1149:	  //+2 cards
        -: 1150:	  drawCard(currentPlayer, state);
        -: 1151:	  drawCard(currentPlayer, state);
        -: 1152:	}
        -: 1153:      else if (choice1 == 2)
        -: 1154:	{
        -: 1155:	  //+2 coins
        -: 1156:	  state->coins = state->coins + 2;
        -: 1157:	}
        -: 1158:      else
        -: 1159:	{
        -: 1160:	  //trash 2 cards in hand
        -: 1161:	  discardCard(choice2, currentPlayer, state, 1);
        -: 1162:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1163:	}
        -: 1164:			
        -: 1165:      //discard card from hand
        -: 1166:      discardCard(handPos, currentPlayer, state, 0);
        -: 1167:      return 0;
        -: 1168:	***/	
        -: 1169:    case tribute:
    #####: 1170:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1171:	if (state->deckCount[nextPlayer] > 0){
    #####: 1172:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1173:	  state->deckCount[nextPlayer]--;
        -: 1174:	}
    #####: 1175:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1176:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1177:	  state->discardCount[nextPlayer]--;
        -: 1178:	}
        -: 1179:	else{
        -: 1180:	  //No Card to Reveal
        -: 1181:	  if (DEBUG){
        -: 1182:	    printf("No cards to reveal\n");
        -: 1183:	  }
        -: 1184:	}
        -: 1185:      }
        -: 1186:	    
        -: 1187:      else{
    #####: 1188:	if (state->deckCount[nextPlayer] == 0){
    #####: 1189:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1190:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1191:	    state->deckCount[nextPlayer]++;
    #####: 1192:	    state->discard[nextPlayer][i] = -1;
    #####: 1193:	    state->discardCount[nextPlayer]--;
        -: 1194:	  }
        -: 1195:			    
    #####: 1196:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1197:	} 
    #####: 1198:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1199:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1200:	state->deckCount[nextPlayer]--;
    #####: 1201:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1202:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1203:	state->deckCount[nextPlayer]--;
        -: 1204:      }    
        -: 1205:		       
    #####: 1206:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1207:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1208:	state->playedCardCount++;
    #####: 1209:	tributeRevealedCards[1] = -1;
        -: 1210:      }
        -: 1211:
    #####: 1212:      for (i = 0; i <= 2; i ++){
    #####: 1213:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1214:	  state->coins += 2;
        -: 1215:	}
        -: 1216:		    
    #####: 1217:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1218:	  drawCard(currentPlayer, state);
    #####: 1219:	  drawCard(currentPlayer, state);
        -: 1220:	}
        -: 1221:	else{//Action Card
    #####: 1222:	  state->numActions = state->numActions + 2;
        -: 1223:	}
        -: 1224:      }
        -: 1225:	    
    #####: 1226:      return 0;
        -: 1227:		
        -: 1228:    case ambassador:
    #####: 1229:      j = 0;		//used to check if player has enough cards to discard
        -: 1230:
    #####: 1231:      if (choice2 > 2 || choice2 < 0)
        -: 1232:	{
    #####: 1233:	  return -1;				
        -: 1234:	}
        -: 1235:
    #####: 1236:      if (choice1 == handPos)
        -: 1237:	{
    #####: 1238:	  return -1;
        -: 1239:	}
        -: 1240:
    #####: 1241:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1242:	{
    #####: 1243:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1244:	    {
    #####: 1245:	      j++;
        -: 1246:	    }
        -: 1247:	}
    #####: 1248:      if (j < choice2)
        -: 1249:	{
    #####: 1250:	  return -1;				
        -: 1251:	}
        -: 1252:
        -: 1253:      if (DEBUG) 
        -: 1254:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1255:
        -: 1256:      //increase supply count for choosen card by amount being discarded
    #####: 1257:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1258:			
        -: 1259:      //each other player gains a copy of revealed card
    #####: 1260:      for (i = 0; i < state->numPlayers; i++)
        -: 1261:	{
    #####: 1262:	  if (i != currentPlayer)
        -: 1263:	    {
    #####: 1264:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1265:	    }
        -: 1266:	}
        -: 1267:
        -: 1268:      //discard played card from hand
    #####: 1269:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1270:
        -: 1271:      //trash copies of cards returned to supply
    #####: 1272:      for (j = 0; j < choice2; j++)
        -: 1273:	{
    #####: 1274:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1275:	    {
    #####: 1276:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1277:		{
    #####: 1278:		  discardCard(i, currentPlayer, state, 1);
    #####: 1279:		  break;
        -: 1280:		}
        -: 1281:	    }
        -: 1282:	}			
        -: 1283:
    #####: 1284:      return 0;
        -: 1285:		
        -: 1286:    case cutpurse:
        -: 1287:
    #####: 1288:      updateCoins(currentPlayer, state, 2);
    #####: 1289:      for (i = 0; i < state->numPlayers; i++)
        -: 1290:	{
    #####: 1291:	  if (i != currentPlayer)
        -: 1292:	    {
    #####: 1293:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1294:		{
    #####: 1295:		  if (state->hand[i][j] == copper)
        -: 1296:		    {
    #####: 1297:		      discardCard(j, i, state, 0);
    #####: 1298:		      break;
        -: 1299:		    }
    #####: 1300:		  if (j == state->handCount[i])
        -: 1301:		    {
    #####: 1302:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1303:			{
        -: 1304:			  if (DEBUG)
        -: 1305:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1306:			}	
    #####: 1307:		      break;
        -: 1308:		    }		
        -: 1309:		}
        -: 1310:					
        -: 1311:	    }
        -: 1312:				
        -: 1313:	}				
        -: 1314:
        -: 1315:      //discard played card from hand
    #####: 1316:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1317:
    #####: 1318:      return 0;
        -: 1319:
        -: 1320:		
        -: 1321:    case embargo: 
        -: 1322:      //+2 Coins
    #####: 1323:      state->coins = state->coins + 2;
        -: 1324:			
        -: 1325:      //see if selected pile is in play
    #####: 1326:      if ( state->supplyCount[choice1] == -1 )
        -: 1327:	{
    #####: 1328:	  return -1;
        -: 1329:	}
        -: 1330:			
        -: 1331:      //add embargo token to selected supply pile
    #####: 1332:      state->embargoTokens[choice1]++;
        -: 1333:			
        -: 1334:      //trash card
    #####: 1335:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1336:      return 0;
        -: 1337:		
        -: 1338:    case outpost:
        -: 1339:      //set outpost flag
    #####: 1340:      state->outpostPlayed++;
        -: 1341:			
        -: 1342:      //discard card
    #####: 1343:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1344:      return 0;
        -: 1345:		
        -: 1346:    case salvager:
        -: 1347:      //+1 buy
    #####: 1348:      state->numBuys++;
        -: 1349:			
    #####: 1350:      if (choice1)
        -: 1351:	{
        -: 1352:	  //gain coins equal to trashed card
    #####: 1353:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1354:	  //trash card
    #####: 1355:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1356:	}
        -: 1357:			
        -: 1358:      //discard card
    #####: 1359:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1360:      return 0;
        -: 1361:		
        -: 1362:    case sea_hag:
    #####: 1363:      for (i = 0; i < state->numPlayers; i++){
    #####: 1364:	if (i != currentPlayer){
    #####: 1365:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1366:	  state->discardCount[i]++;
    #####: 1367:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1368:	}
        -: 1369:      }
    #####: 1370:      return 0;
        -: 1371:		
        -: 1372:    case treasure_map:
        -: 1373:      //search hand for another treasure_map
    #####: 1374:      index = -1;
    #####: 1375:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1376:	{
    #####: 1377:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1378:	    {
    #####: 1379:	      index = i;
    #####: 1380:	      break;
        -: 1381:	    }
        -: 1382:	}
    #####: 1383:      if (index > -1)
        -: 1384:	{
        -: 1385:	  //trash both treasure cards
    #####: 1386:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1387:	  discardCard(index, currentPlayer, state, 1);
        -: 1388:
        -: 1389:	  //gain 4 Gold cards
    #####: 1390:	  for (i = 0; i < 4; i++)
        -: 1391:	    {
    #####: 1392:	      gainCard(gold, state, 1, currentPlayer);
        -: 1393:	    }
        -: 1394:				
        -: 1395:	  //return success
    #####: 1396:	  return 1;
        -: 1397:	}
        -: 1398:			
        -: 1399:      //no second treasure_map found in hand
    #####: 1400:      return -1;
        -: 1401:    }
        -: 1402:	
    #####: 1403:  return -1;
        -: 1404:}
        -: 1405:
      514: 1406:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1407:{
        -: 1408:	
        -: 1409:  //if card is not trashed, added to Played pile 
      514: 1410:  if (trashFlag < 1)
        -: 1411:    {
        -: 1412:      //add card to played pile
      514: 1413:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      514: 1414:      state->playedCardCount++;
        -: 1415:    }
        -: 1416:	
        -: 1417:  //set played card to -1
      514: 1418:  state->hand[currentPlayer][handPos] = -1;
        -: 1419:	
        -: 1420:  //remove card from player's hand
      514: 1421:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1422:    {
        -: 1423:      //reduce number of cards in hand
        2: 1424:      state->handCount[currentPlayer]--;
        -: 1425:    }
      512: 1426:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1427:    {
        -: 1428:      //reduce number of cards in hand
    #####: 1429:      state->handCount[currentPlayer]--;
        -: 1430:    }
        -: 1431:  else 	
        -: 1432:    {
        -: 1433:      //replace discarded card with last card in hand
      512: 1434:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1435:      //set last card to -1
      512: 1436:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1437:      //reduce number of cards in hand
      512: 1438:      state->handCount[currentPlayer]--;
        -: 1439:    }
        -: 1440:	
      514: 1441:  return 0;
        -: 1442:}
        -: 1443:
    #####: 1444:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1445:{
        -: 1446:  //Note: supplyPos is enum of choosen card
        -: 1447:	
        -: 1448:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1449:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1450:    {
    #####: 1451:      return -1;
        -: 1452:    }
        -: 1453:	
        -: 1454:  //added card for [whoseTurn] current player:
        -: 1455:  // toFlag = 0 : add to discard
        -: 1456:  // toFlag = 1 : add to deck
        -: 1457:  // toFlag = 2 : add to hand
        -: 1458:
    #####: 1459:  if (toFlag == 1)
        -: 1460:    {
    #####: 1461:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1462:      state->deckCount[player]++;
        -: 1463:    }
    #####: 1464:  else if (toFlag == 2)
        -: 1465:    {
    #####: 1466:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1467:      state->handCount[player]++;
        -: 1468:    }
        -: 1469:  else
        -: 1470:    {
    #####: 1471:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1472:      state->discardCount[player]++;
        -: 1473:    }
        -: 1474:	
        -: 1475:  //decrease number in supply pile
    #####: 1476:  state->supplyCount[supplyPos]--;
        -: 1477:	 
    #####: 1478:  return 0;
        -: 1479:}
        -: 1480:
        1: 1481:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1482:{
        -: 1483:  int i;
        -: 1484:	
        -: 1485:  //reset coin count
        1: 1486:  state->coins = 0;
        -: 1487:
        -: 1488:  //add coins for each Treasure card in player's hand
        6: 1489:  for (i = 0; i < state->handCount[player]; i++)
        -: 1490:    {
        5: 1491:      if (state->hand[player][i] == copper)
        -: 1492:	{
        4: 1493:	  state->coins += 1;
        -: 1494:	}
        1: 1495:      else if (state->hand[player][i] == silver)
        -: 1496:	{
    #####: 1497:	  state->coins += 2;
        -: 1498:	}
        1: 1499:      else if (state->hand[player][i] == gold)
        -: 1500:	{
    #####: 1501:	  state->coins += 3;
        -: 1502:	}	
        -: 1503:    }	
        -: 1504:
        -: 1505:  //add bonus
        1: 1506:  state->coins += bonus;
        -: 1507:
        1: 1508:  return 0;
        -: 1509:}
        -: 1510:
        -: 1511:
        -: 1512://end of dominion.c
        -: 1513:
