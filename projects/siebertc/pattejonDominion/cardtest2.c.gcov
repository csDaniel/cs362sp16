        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:/* ---------------------------------------------------------------------
        -:    2:* Jon Patterson
        -:    3:* Assignment 3
        -:    4:* cardtest2.c
        -:    5:* adventurer card tests
        -:    6:*---------------------------------------------------------------------*/
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <assert.h>
        -:   12:#include "rngs.h"
        -:   13:#include <time.h>
        -:   14:#include <stdlib.h>
        -:   15:
        -:   16:// set NOISY_TEST to 0 to remove printfs from output
        -:   17:#define NOISY_TEST 1
        -:   18:// set ASSERTS_ON to 0 to disable asserts for investigating gcov
        -:   19:#define ASSERTS_ON 0
        -:   20:
function main called 4 returned 100% blocks executed 93%
        4:   21:int main() {
        4:   22:    int seed = 1000;
        4:   23:    int numPlayer = 2;
        -:   24:    int p, r;
        4:   25:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   26:               , remodel, smithy, village, baron, great_hall};
        -:   27:    struct gameState G;
        -:   28:    int error;
        -:   29:
        4:   30:    memset(&G, 23, sizeof(struct gameState));
        4:   31:    r = initializeGame(numPlayer, k, seed, &G);
call    0 returned 100%
        -:   32:    // ensure that the values of all of the supply cards are are at least 2
        4:   33:    int j = 0;
      104:   34:    for(j = 0; j < 25; j++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
      100:   35:        G.supplyCount[j] = 2;
        -:   36:    }
        -:   37:
        4:   38:    printf ("Testing adventurer for playCard(0, 0, 0, 0, gamestate):\n");
call    0 returned 100%
        4:   39:    p = 0;
        4:   40:    printf("Testing for player %d:\n", p);
call    0 returned 100%
        4:   41:    int testActions = G.numActions;
        4:   42:    int testBuys = G.numBuys;
        4:   43:    int testHandCount = G.handCount[p];
        4:   44:    int numTreasures = 0;
        4:   45:    int numTreasuresPost = 0;
        -:   46:    int i;
        -:   47:    // first, we'll make a card in hand adventurer
        4:   48:    G.hand[p][0] = adventurer;
        4:   49:    printf("G.handcount is %d\n", G.handCount[p]);
call    0 returned 100%
       24:   50:    for (i = 0; i < G.handCount[p]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       20:   51:        if (G.hand[p][i] == copper || G.hand[p][i] == silver || G.hand[p][i] == gold){
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       12:   52:            numTreasures++;
        -:   53:        }
        -:   54:    }
        4:   55:    printf ("Number of treasures is %d before playing card.\n", numTreasures);
call    0 returned 100%
        4:   56:    printf ("Playing card...\n");
call    0 returned 100%
        -:   57:    // play it
        4:   58:    playCard(0, 0, 0, 0, &G);
call    0 returned 100%
        -:   59:    // we expect number of actions to be one less
        4:   60:    testActions--;
        -:   61:    // Reviewing the implementation of adventurer, we should always draw at least
        -:   62:    // 2 treasure cards. This is an error, but we can write the test anyway
        -:   63:    // Number of cards in hand should be net +1 after playing adventurer
        4:   64:    testHandCount++;
        -:   65:    // Check hand to verify the number of treasure cards has increased by 2
       32:   66:    for (i = 0; i < G.handCount[p]; i++){
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
       28:   67:        if (G.hand[p][i] == copper || G.hand[p][i] == silver || G.hand[p][i] == gold){
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       24:   68:            numTreasuresPost++;
        -:   69:        }
        -:   70:    }
        -:   71:
        -:   72:    #if (NOISY_TEST == 1)
        4:   73:    printf("Test actions updated correctly:\n");
call    0 returned 100%
        4:   74:    printf("Actions = %d, Expected = %d\n", G.numActions, testActions);
call    0 returned 100%
        4:   75:    printf("Test buys unchanged:\n");
call    0 returned 100%
        4:   76:    printf("Buys = %d, Expected = %d\n", G.numBuys, testBuys);
call    0 returned 100%
        4:   77:    printf("Test hand updated correctly:\n");
call    0 returned 100%
        4:   78:    printf("Hand = %d, Expected = %d\n", G.handCount[p], testHandCount);
call    0 returned 100%
        4:   79:    printf("Test number of treasures:\n");
call    0 returned 100%
        4:   80:    printf("numTreasuresPost = %d, Expected = %d\n", numTreasuresPost, numTreasures+2);
call    0 returned 100%
        -:   81:    #endif
        -:   82:    #if (ASSERTS_ON == 1)
        -:   83:    assert(G.numActions == testActions);
        -:   84:    assert(G.numBuys == testBuys);
        -:   85:    assert(G.handCount[p] == testHandCount);
        -:   86:    assert(numTreasuresPost == (numTreasures+2));
        -:   87:    #endif
        4:   88:    if (G.numActions != testActions) error = 1;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        4:   89:    if (G.numBuys != testBuys) error = 1;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        4:   90:    if (G.handCount[p] != testHandCount ) error = 1;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:   91:    if (numTreasuresPost != (numTreasures+2)) error = 1;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:   92:    if(error == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        4:   93:        printf("Errors were encountered.\n");
call    0 returned 100%
        4:   94:        return 1;
        -:   95:    }
        -:   96:
    #####:   97:    return 0;
        -:   98:}
