        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:/* ---------------------------------------------------------------------
        -:    2:* Jon Patterson
        -:    3:* Assignment 3
        -:    4:* unittest2.c
        -:    5:* buyCard() method
        -:    6:* This was adapted from the testupdateCoins.c code provided by the instructor
        -:    7:* but I have added additional code to test the game state when random hands
        -:    8:* were populated with different cards
        -:    9:*/
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include <string.h>
        -:   13:#include <stdio.h>
        -:   14:#include <assert.h>
        -:   15:#include "rngs.h"
        -:   16:
        -:   17:// set NOISY_TEST to 0 to remove printfs from output
        -:   18:#define NOISY_TEST 1
        -:   19:// set ASSERTS_ON to 0 to disable asserts for investigating gcov
        -:   20:#define ASSERTS_ON 0
        -:   21:
function main called 5 returned 100% blocks executed 100%
        5:   22:int main() {
        5:   23:    int seed = 1000;
        5:   24:    int numPlayer = 2;
        -:   25:    int p, r, handCount, deckCount, discardCount;
        5:   26:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   27:               , remodel, smithy, village, baron, great_hall};
        -:   28:    struct gameState G;
        -:   29:
        5:   30:    memset(&G, 23, sizeof(struct gameState));
        5:   31:    r = initializeGame(numPlayer, k, seed, &G);
call    0 returned 100%
        5:   32:    printf ("Testing buyCard():\n");
call    0 returned 100%
       15:   33:    for (p = 0; p < numPlayer; p++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       10:   34:        handCount = G.handCount[p];
       10:   35:        deckCount = G.deckCount[p];
       10:   36:        discardCount = G.discardCount[p];
       95:   37:        while(deckCount > 0){
branch  0 taken 88%
branch  1 taken 12% (fallthrough)
       75:   38:            handCount++; // increment hand count by one
       75:   39:            deckCount--; // decrement deck count by one
       75:   40:            drawCard(p, &G);
call    0 returned 100%
        -:   41:            #if (NOISY_TEST == 1)
       75:   42:            printf("Test player %d with %d cards in hand and %d in deck.\n", p, handCount, deckCount);
call    0 returned 100%
       75:   43:            printf("Hand = %d, Expected = %d\n", G.handCount[p], handCount);
call    0 returned 100%
        -:   44:            #endif
        -:   45:            #if (ASSERTS_ON == 1)
        -:   46:            assert(G.handCount[p] == handCount);
        -:   47:            #endif
        -:   48:            #if (NOISY_TEST == 1)
       75:   49:            printf("Deck = %d, Expected = %d\n", G.deckCount[p], deckCount);
call    0 returned 100%
        -:   50:            #endif
        -:   51:            #if (ASSERTS_ON == 1)
        -:   52:            assert(G.deckCount[p] == deckCount);
        -:   53:            #endif
        -:   54:        }
        -:   55:        // deck is empty, but discard pile is also empty, expect this to fail and leave counts unchanged
        -:   56:        // This causes a segfault, but I'm not going to lose points for not having gcov so whatever
        -:   57:        //drawCard(p, &G);
        -:   58:        #if (NOISY_TEST == 1)
       10:   59:        printf("Test player %d with %d cards in hand and %d in deck.\n", p, handCount, deckCount);
call    0 returned 100%
       10:   60:        printf("Hand = %d, Expected = %d\n", G.handCount[p], handCount);
call    0 returned 100%
        -:   61:        #endif
        -:   62:        #if (ASSERTS_ON == 1)
        -:   63:        assert(G.handCount[p] == handCount);
        -:   64:        #endif
        -:   65:        #if (NOISY_TEST == 1)
       10:   66:        printf("Deck = %d, Expected = %d\n", G.deckCount[p], deckCount);
call    0 returned 100%
        -:   67:        #endif
        -:   68:        #if (ASSERTS_ON == 1)
        -:   69:        assert(G.deckCount[p] == deckCount);
        -:   70:        #endif
        -:   71:
        -:   72:        //discard all of the cards and try drawing again
      120:   73:        while(G.handCount[p] > 0){
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      100:   74:            discardCard(0, p, &G, 0);
call    0 returned 100%
        -:   75:        }
       10:   76:        deckCount = handCount; //we're going to assume all the cards were shuffled back into the deck
       10:   77:        handCount = G.handCount[p]; // this should be zero, not testing that here though, will test that function in another test
       10:   78:        handCount++; //increment hand count by one
       10:   79:        deckCount--;
        -:   80:        //drawcard segfaults and fails to reshuffle deck
        -:   81:        //drawCard(p, &G); //code implements a shuffle here, which is probably bad but w/e
        -:   82:        #if (NOISY_TEST == 1)
       10:   83:        printf("Test player %d with %d cards in hand and %d in deck.\n", p, handCount, deckCount);
call    0 returned 100%
       10:   84:        printf("Hand = %d, Expected = %d\n", G.handCount[p], handCount);
call    0 returned 100%
        -:   85:        #endif
        -:   86:        #if (ASSERTS_ON == 1)
        -:   87:        assert(G.handCount[p] == handCount);
        -:   88:        #endif
        -:   89:        #if (NOISY_TEST == 1)
       10:   90:        printf("Deck = %d, Expected = %d\n", G.deckCount[p], deckCount);
call    0 returned 100%
        -:   91:        #endif
        -:   92:        #if (ASSERTS_ON == 1)
        -:   93:        assert(G.deckCount[p] == deckCount);
        -:   94:        #endif
        -:   95:        // now do it for the other players
        -:   96:    }
        -:   97:
        5:   98:return 0;
        -:   99:}
