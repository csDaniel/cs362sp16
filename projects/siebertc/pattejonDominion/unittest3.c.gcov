        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:/* ---------------------------------------------------------------------
        -:    2:* Jon Patterson
        -:    3:* Assignment 3
        -:    4:* unittest3.c
        -:    5:* discardCard() method
        -:    6:* This was adapted from the testupdateCoins.c code provided by the instructor
        -:    7:* but I have added additional code to test the game state when random hands
        -:    8:* were populated with different cards
        -:    9:*/
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include <string.h>
        -:   13:#include <stdio.h>
        -:   14:#include <assert.h>
        -:   15:#include "rngs.h"
        -:   16:
        -:   17:// set NOISY_TEST to 0 to remove printfs from output
        -:   18:#define NOISY_TEST 1
        -:   19:// set ASSERTS_ON to 0 to disable asserts for investigating gcov
        -:   20:#define ASSERTS_ON 0
        -:   21:
function main called 5 returned 100% blocks executed 84%
        5:   22:int main() {
        5:   23:    int seed = 1000;
        5:   24:    int numPlayer = 2;
        -:   25:    int p, r, handCount, playedCount;
        5:   26:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   27:               , remodel, smithy, village, baron, great_hall};
        -:   28:    struct gameState G;
        5:   29:    int error = 0;
        5:   30:    memset(&G, 23, sizeof(struct gameState));
        5:   31:    r = initializeGame(numPlayer, k, seed, &G);
call    0 returned 100%
        5:   32:    printf ("Testing discardCard():\n");
call    0 returned 100%
        5:   33:    for (p = 0; p < numPlayer; p++){
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        5:   34:        handCount = G.handCount[p];
        5:   35:        playedCount = G.playedCardCount;
       35:   36:        while(handCount > 0){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       25:   37:            handCount--;
       25:   38:            playedCount++;
       25:   39:            discardCard(0, p, &G, 0);
call    0 returned 100%
        -:   40:            #if (NOISY_TEST == 1)
       25:   41:            printf("Test player %d with %d cards in hand and %d played.\n", p, handCount, playedCount);
call    0 returned 100%
       25:   42:            printf("Hand = %d, Expected = %d\n", G.handCount[p], handCount);
call    0 returned 100%
       25:   43:            printf("Played = %d, Expected = %d\n", G.playedCardCount, playedCount);
call    0 returned 100%
        -:   44:            #endif
        -:   45:            #if (ASSERTS_ON == 1)
        -:   46:            assert(G.playedCardCount == playedCount);
        -:   47:            assert(G.handCount[p] == handCount);
        -:   48:            #endif
       25:   49:            if(G.playedCardCount != playedCount) error = 1;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       25:   50:            if(G.handCount[p] != handCount) error = 1;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   51:        }
        -:   52:        // hand should be empty now, try to discard a card again
        5:   53:        discardCard(0, p, &G, 0);
call    0 returned 100%
        -:   54:        #if (NOISY_TEST == 1)
        5:   55:        printf("Empty hand, played = %d, Expected = %d\n", G.playedCardCount, playedCount);
call    0 returned 100%
        -:   56:        #endif
        -:   57:        #if (ASSERTS_ON == 1)
        -:   58:        assert(G.playedCardCount == playedCount);
        -:   59:        #endif
        5:   60:        if(G.playedCardCount != playedCount) error = 1;
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        5:   61:        if(error == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        5:   62:            printf("Errors were encountered.\n");
call    0 returned 100%
        5:   63:            return 1;
        -:   64:        }
        -:   65:
        -:   66:    }
    #####:   67:    return 0;
        -:   68:}
