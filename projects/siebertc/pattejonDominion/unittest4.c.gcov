        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:7
        -:    0:Programs:1
        -:    1:/* ---------------------------------------------------------------------
        -:    2:* Jon Patterson
        -:    3:* Assignment 3
        -:    4:* unittest4.c
        -:    5:* isGameOver() method
        -:    6:* This was adapted from the testupdateCoins.c code provided by the instructor
        -:    7:* but I have added additional code to test the game state when random hands
        -:    8:* were populated with different cards
        -:    9:*/
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include <string.h>
        -:   13:#include <stdio.h>
        -:   14:#include <assert.h>
        -:   15:#include "rngs.h"
        -:   16:#include <time.h>
        -:   17:#include <stdlib.h>
        -:   18:
        -:   19:// set NOISY_TEST to 0 to remove printfs from output
        -:   20:#define NOISY_TEST 1
        -:   21:// set ASSERTS_ON to 0 to disable asserts for investigating gcov
        -:   22:#define ASSERTS_ON 1
        -:   23:
function main called 7 returned 100% blocks executed 90%
        7:   24:int main() {
        7:   25:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        7:   26:    int seed = 1000;
        7:   27:    int numPlayer = 2;
        -:   28:    int p, r, i, t, a, b, c;
        7:   29:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   30:               , remodel, smithy, village, baron, great_hall};
        -:   31:    struct gameState G;
        -:   32:
        7:   33:    memset(&G, 23, sizeof(struct gameState));
        7:   34:    r = initializeGame(numPlayer, k, seed, &G);
call    0 returned 100%
        -:   35:
        -:   36:    // ensure that the values of all of the supply cards are are at least 2
        7:   37:    int j = 0;
      182:   38:    for(j = 0; j < 25; j++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
      175:   39:        G.supplyCount[j] = 2;
        -:   40:    }
        7:   41:    printf ("Testing isGameOver():\n");
call    0 returned 100%
        -:   42:    // first test to see if the number of provinces is > 0
        7:   43:    G.supplyCount[province] = 1;
        7:   44:    i = isGameOver(&G);
call    0 returned 100%
        7:   45:    printf("Expect isGameOver = 0, actual = %d.\n", i);
call    0 returned 100%
        7:   46:    assert(i == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   47:    // test if provinces == 0 ends the game
        7:   48:    G.supplyCount[province] = 0;
        7:   49:    i = isGameOver(&G);
call    0 returned 100%
        7:   50:    printf("Expect isGameOver = 1, actual = %d.\n", i);
call    0 returned 100%
        7:   51:    assert(i == 1);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   52:    // Reset the province and try testing again
        7:   53:    G.supplyCount[province] = 1;
        7:   54:    i = isGameOver(&G);
call    0 returned 100%
        7:   55:    printf("Expect isGameOver = 0, actual = %d.\n", i);
call    0 returned 100%
        7:   56:    assert(i == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   57:
        -:   58:    // now we'll try setting just one supply to 0 and see if it causes the expected behavior
      707:   59:    for(t = 0; t < 100; t++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
      700:   60:    	printf("Starting random test %d of empty piles\n", t);
call    0 returned 100%
      700:   61:    	a = rand() % 25; // pick a random position
call    0 returned 100%
     1423:   62:    	while( a == 3){
branch  0 taken 3%
branch  1 taken 97% (fallthrough)
       23:   63:    		a = rand() % 25; //can't pick 3!
call    0 returned 100%
        -:   64:    	}
      700:   65:    	printf("Setting position %d to empty.\n", a);
call    0 returned 100%
      700:   66:    	G.supplyCount[a] = 0;	// set to 0
        -:   67:    	// Expect game to continue
      700:   68:    	i = isGameOver(&G);
call    0 returned 100%
      700:   69:    	printf("Expect isGameOver = 0, actual = %d.\n", i);
call    0 returned 100%
      700:   70:    	assert(i == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
      700:   71:    	b = rand() % 25;
call    0 returned 100%
     1451:   72:    	while(a == b || b == 3){
branch  0 taken 3%
branch  1 taken 97% (fallthrough)
branch  2 taken 4%
branch  3 taken 96% (fallthrough)
        -:   73:    		//rand until they are not
       51:   74:    		b = rand() % 25;
call    0 returned 100%
        -:   75:    	}
      700:   76:    	printf("Setting position %d to empty.\n", b);
call    0 returned 100%
      700:   77:    	G.supplyCount[b] = 0;
        -:   78:    	// Expect game to continue
      700:   79:    	i = isGameOver(&G);
call    0 returned 100%
      700:   80:    	printf("Expect isGameOver = 0, actual = %d.\n", i);
call    0 returned 100%
      700:   81:    	assert(i == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
      700:   82:    	c = rand() % 25;
call    0 returned 100%
     1494:   83:    	while(c == a || c == b || c == 3){
branch  0 taken 4%
branch  1 taken 96% (fallthrough)
branch  2 taken 4%
branch  3 taken 96% (fallthrough)
branch  4 taken 5%
branch  5 taken 95% (fallthrough)
       94:   84:    		c = rand() % 25;
call    0 returned 100%
        -:   85:    	}
      700:   86:    	printf("Setting position %d to empty.\n", c);
call    0 returned 100%
      700:   87:    	i = isGameOver(&G);
call    0 returned 100%
      700:   88:    	G.supplyCount[c] = 0;
        -:   89:    	// expect game to end
      700:   90:    	i = isGameOver(&G);
call    0 returned 100%
      700:   91:    	printf("Expect isGameOver = 1, actual = %d.\n", i);
call    0 returned 100%
      700:   92:    	assert(i == 1);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   93:    	// loop again
    18200:   94:    	for(j = 0; j < 25; j++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    17500:   95:        	G.supplyCount[j] = 2;
        -:   96:    	}
        -:   97:
        -:   98:    }
        -:   99:    
        7:  100:    return 0;
        -:  101:
        -:  102:}
