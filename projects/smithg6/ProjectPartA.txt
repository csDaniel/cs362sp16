Project Part A
Group Members:

Jessica Siano - Grant Smith - Michael Hueter

·   	Explain testIsValid function of UrlValidator test code.
	The testIsValid function is designed to check the validity of URL structure. It uses combinatorics to build many urls and then examines the resulting string to assert that it fits a url schema. It will use the printStatus variable to only print URLs that are valid, by having pieces of the url that are valid (like http://) have a printStatus of true, but pieces that are not valid (like 256.256.256.256) have a printStatus of false.  	

·   	Give how many total number of urls it is testing
	It is a counting principle instance of the number of choices for each part of the url that is being built.
9 schemes * 19 authorities * 7 ports * 10 paths * 3 queries = 35910 URLs

·   	explain how it is building all the urls
	It pulls an item from each of the 5 ResultPairs listed above, and puts one of each piece together, in order, to build a URL, checks if each part is valid, then asserts that isValid correctly identifies valid or invalid urls. More specifically, it goes through the following steps (starting on line 95):

	-A new StringBuffer() called testBuffer is instantiated, and expected is set to true by default
	-A for loop is set to iterate through each part of the url (scheme, authority, port, path, query)
	-Object combinations are grabbed from ResultPair and appended together in a testBuffer
	-Expected is updated based on the validity of the parts
	-testBuffer is cast as a string called url, which is then checked by the isValid() function
	-The result of isValid() is asserted against the expected result, thereby testing the output of the function

·   	Give an example of valid url being tested
	http://255.255.255.255:80/test1/file?action=view
	Scheme: http://  [valid=true]
	Authority: 255.255.255.255  [valid=true]
	Port: :80  [valid=true]
	Path: /test1/file  [valid=true]
	Query: ?action=view  [valid=true]

·   	Give an example of an invalid url being tested by testIsValid() method
	http://1.2.3.4.5:-1/test1/file?action=view
	Scheme: http://  [valid=true]
	Authority: 1.2.3.4.5  [valid=false]
	Port: :-1  [valid=false]
	Path: /test1/  [valid=true]
	Query: ?action=view  [valid=true]



·   	Answer: Do you think that a real world test for this is very different than the unit tests and card tests that we wrote with regard to concepts and complexity? (Explain in a few lines)

	No, there are a lot of similar concepts (known input/outputs, not using random testing, etc). In terms of complexity, this test is more thorough with the use of combinatorial testing than the dominion project was, as the dominion project only tested a few small, specific pieces, and this test randomizes through many different possibilities. 
	Also, it depends on the context of “real world test.” Many web applications do not have tests nearly as complex as this one due to business requirements not being as stringent. However, certain crucial systems such as aviation software would definitely be more thorough.
	
·        Submit a file called ProjectPartA.txt with your writeup