
Running tests!
Running tests!
Running tests!
Running tests!Test# 1
Function Tested: cardAdventurer(0, &state);
Cards in starting hand: 
11, 17, 1, 1, 12, 16, 1, 
Random Seed: 10000
Failed Item(s): 
Invalid draw from deck. 

Running tests!Test# 2
Function Tested: cardAdventurer(0, &state);
Cards in starting hand: 
3, 0, 17, 
Random Seed: 10001
Failed Item(s): 
Invalid draw from deck. 

Running tests!Test# 3
Function Tested: cardAdventurer(0, &state);
Cards in starting hand: 
22, 10, 10, 24, 7, 8, 3, 
Random Seed: 10002
Failed Item(s): 
Invalid draw from deck. 

Running tests!Test# 4
Function Tested: cardAdventurer(0, &state);
Cards in starting hand: 
18, 2, 3, 
Random Seed: 10003
Failed Item(s): 
Invalid draw from deck. 

Running tests!Test# 5
Function Tested: cardAdventurer(0, &state);
Cards in starting hand: 
9, 12, 14, 22, 5, 17, 
Random Seed: 10004
Failed Item(s): 
Invalid draw from deck. 

Total Tests: 2000
Total Passed: 0
Total Failed: 5
File 'dominion.c'
Lines executed:17.30% of 578
Branches executed:16.67% of 432
Taken at least once:14.12% of 432
Calls executed:7.37% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 135 returned 100% blocks executed 83%
      135:    8:int compare(const void* a, const void* b) {
      135:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      135:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       36:   12:    return -1;
       99:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 7 returned 100% blocks executed 95%
        7:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        7:   44:  SelectStream(1);
call    0 returned 100%
        7:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        7:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 86% (fallthrough)
branch  1 taken 14%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
        -:   49:    {
        3:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        4:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       44:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      440:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        4:   73:  if (numPlayers == 2)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -:   74:    {
        3:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        1:   77:  else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        4:   87:  if (numPlayers == 2)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -:   88:    {
        3:   89:      state->supplyCount[estate] = 8;
        3:   90:      state->supplyCount[duchy] = 8;
        3:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        1:   95:      state->supplyCount[estate] = 12;
        1:   96:      state->supplyCount[duchy] = 12;
        1:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        4:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        4:  102:  state->supplyCount[silver] = 40;
        4:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       84:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      660:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      620:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       40:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
        8:  115:		  if (numPlayers == 2){ 
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        3:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        1:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       36:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       40:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      580:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       13:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  139:    {
        9:  140:      state->deckCount[i] = 0;
       36:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       27:  143:	  state->deck[i][j] = estate;
       27:  144:	  state->deckCount[i]++;
        -:  145:	}
       72:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       63:  148:	  state->deck[i][j] = copper;
       63:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       13:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  155:    {
        9:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       13:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        9:  166:      state->handCount[i] = 0;
        9:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      112:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      108:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        4:  182:  state->outpostPlayed = 0;
        4:  183:  state->phase = 0;
        4:  184:  state->numActions = 1;
        4:  185:  state->numBuys = 1;
        4:  186:  state->playedCardCount = 0;
        4:  187:  state->whoseTurn = 0;
        4:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       24:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       20:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        4:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        4:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 9 returned 100% blocks executed 94%
        9:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        9:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        9:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
        9:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      108:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       90:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
       90:  216:    newDeck[newDeckPos] = state->deck[player][card];
       90:  217:    newDeckPos++;
      298:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
      208:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       90:  221:    state->deckCount[player]--;
        -:  222:  }
       99:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       90:  224:    state->deck[player][i] = newDeck[i];
       90:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        9:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 20 returned 100% blocks executed 38%
       20:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       20:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       20:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       20:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       20:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       20:  576:    state->deckCount[player]--;
       20:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       20:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        -:  658:  //int drawntreasure=0;
        -:  659:  //int cardDrawn;
        -:  660:  //int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
        -:  668:    {
        -:  669:						
        -:  670:    case feast:
        -:  671:      //gain card with cost up to 5
        -:  672:      //Backup hand
    #####:  673:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  674:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  675:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  676:      }
        -:  677:      //Backup hand
        -:  678:
        -:  679:      //Update Coins for Buy
    #####:  680:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  681:      x = 1;//Condition to loop on
    #####:  682:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  683:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  684:	  if (DEBUG)
        -:  685:	    printf("None of that card left, sorry!\n");
        -:  686:
        -:  687:	  if (DEBUG){
        -:  688:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  689:	  }
        -:  690:	}
    #####:  691:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  692:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  693:
        -:  694:	  if (DEBUG){
        -:  695:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  696:	  }
        -:  697:	}
        -:  698:	else{
        -:  699:
        -:  700:	  if (DEBUG){
        -:  701:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  702:	  }
        -:  703:
    #####:  704:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  705:	  x = 0;//No more buying cards
        -:  706:
        -:  707:	  if (DEBUG){
        -:  708:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  709:	  }
        -:  710:
        -:  711:	}
        -:  712:      }     
        -:  713:
        -:  714:      //Reset Hand
    #####:  715:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  716:	state->hand[currentPlayer][i] = temphand[i];
    #####:  717:	temphand[i] = -1;
        -:  718:      }
        -:  719:      //Reset Hand
        -:  720:      			
    #####:  721:      return 0;
        -:  722:			
        -:  723:    case gardens:
    #####:  724:      return -1;
        -:  725:			
        -:  726:    case mine:
    #####:  727:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  728:
    #####:  729:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  730:	{
    #####:  731:	  return -1;
        -:  732:	}
        -:  733:		
    #####:  734:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  735:	{
    #####:  736:	  return -1;
        -:  737:	}
        -:  738:
    #####:  739:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:
    #####:  744:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  745:
        -:  746:      //discard card from hand
    #####:  747:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  748:
        -:  749:      //discard trashed card
    #####:  750:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  751:	{
    #####:  752:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  753:	    {
    #####:  754:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  755:	      break;
        -:  756:	    }
        -:  757:	}
        -:  758:			
    #####:  759:      return 0;
        -:  760:			
        -:  761:    case remodel:
    #####:  762:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  763:
    #####:  764:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  765:	{
    #####:  766:	  return -1;
        -:  767:	}
        -:  768:
    #####:  769:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  770:
        -:  771:      //discard card from hand
    #####:  772:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  773:
        -:  774:      //discard trashed card
    #####:  775:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  776:	{
    #####:  777:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  778:	    {
    #####:  779:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  780:	      break;
        -:  781:	    }
        -:  782:	}
        -:  783:
        -:  784:
    #####:  785:      return 0;
        -:  786:		
        -:  787:    /*case smithy:
        -:  788:      //+3 Cards
        -:  789:      for (i = 0; i < 3; i++)
        -:  790:	{
        -:  791:	  drawCard(currentPlayer, state);
        -:  792:	}
        -:  793:			
        -:  794:      //discard card from hand
        -:  795:      discardCard(handPos, currentPlayer, state, 0);
        -:  796:      return 0;
        -:  797:	*/
        -:  798:		
        -:  799:    case baron:
    #####:  800:      state->numBuys++;//Increase buys by 1!
    #####:  801:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  802:	int p = 0;//Iterator for hand!
    #####:  803:	int card_not_discarded = 1;//Flag for discard set!
    #####:  804:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  805:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  806:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  807:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  808:	    state->discardCount[currentPlayer]++;
    #####:  809:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  810:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  811:	    }
    #####:  812:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  813:	    state->handCount[currentPlayer]--;
    #####:  814:	    card_not_discarded = 0;//Exit the loop
        -:  815:	  }
    #####:  816:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  817:	    if(DEBUG) {
        -:  818:	      printf("No estate cards in your hand, invalid choice\n");
        -:  819:	      printf("Must gain an estate if there are any\n");
        -:  820:	    }
    #####:  821:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  822:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  823:	      state->supplyCount[estate]--;//Decrement estates
    #####:  824:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  825:		isGameOver(state);
call    0 never executed
        -:  826:	      }
        -:  827:	    }
    #####:  828:	    card_not_discarded = 0;//Exit the loop
        -:  829:	  }
        -:  830:			    
        -:  831:	  else{
    #####:  832:	    p++;//Next card
        -:  833:	  }
        -:  834:	}
        -:  835:      }
        -:  836:			    
        -:  837:      else{
    #####:  838:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  839:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  840:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  841:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  842:	    isGameOver(state);
call    0 never executed
        -:  843:	  }
        -:  844:	}
        -:  845:      }
        -:  846:	    
        -:  847:      
    #####:  848:      return 0;
        -:  849:		
        -:  850:    case great_hall:
        -:  851:      //+1 Card
    #####:  852:      drawCard(currentPlayer, state);
call    0 never executed
        -:  853:			
        -:  854:      //+1 Actions
    #####:  855:      state->numActions++;
        -:  856:			
        -:  857:      //discard card from hand
    #####:  858:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  859:      return 0;
        -:  860:		
        -:  861:    case minion:
        -:  862:      //+1 action
    #####:  863:      state->numActions++;
        -:  864:			
        -:  865:      //discard card from hand
    #####:  866:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  867:			
    #####:  868:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  869:	{
    #####:  870:	  state->coins = state->coins + 2;
        -:  871:	}
        -:  872:			
    #####:  873:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  874:	{
        -:  875:	  //discard hand
    #####:  876:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  877:	    {
    #####:  878:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  879:	    }
        -:  880:				
        -:  881:	  //draw 4
    #####:  882:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  883:	    {
    #####:  884:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  885:	    }
        -:  886:				
        -:  887:	  //other players discard hand and redraw if hand size > 4
    #####:  888:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  889:	    {
    #####:  890:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  891:		{
    #####:  892:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  893:		    {
        -:  894:		      //discard hand
    #####:  895:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  896:			{
    #####:  897:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  898:			}
        -:  899:							
        -:  900:		      //draw 4
    #####:  901:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  902:			{
    #####:  903:			  drawCard(i, state);
call    0 never executed
        -:  904:			}
        -:  905:		    }
        -:  906:		}
        -:  907:	    }
        -:  908:				
        -:  909:	}
    #####:  910:      return 0;
        -:  911:		
        -:  912:    case steward:
    #####:  913:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  914:	{
        -:  915:	  //+2 cards
    #####:  916:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  917:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  918:	}
    #####:  919:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  920:	{
        -:  921:	  //+2 coins
    #####:  922:	  state->coins = state->coins + 2;
        -:  923:	}
        -:  924:      else
        -:  925:	{
        -:  926:	  //trash 2 cards in hand
    #####:  927:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  928:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  929:	}
        -:  930:			
        -:  931:      //discard card from hand
    #####:  932:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  933:      return 0;
        -:  934:		
        -:  935:    case tribute:
    #####:  936:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  937:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  938:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  939:	  state->deckCount[nextPlayer]--;
        -:  940:	}
    #####:  941:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  942:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  943:	  state->discardCount[nextPlayer]--;
        -:  944:	}
        -:  945:	else{
        -:  946:	  //No Card to Reveal
        -:  947:	  if (DEBUG){
        -:  948:	    printf("No cards to reveal\n");
        -:  949:	  }
        -:  950:	}
        -:  951:      }
        -:  952:	    
        -:  953:      else{
    #####:  954:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  955:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  956:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  957:	    state->deckCount[nextPlayer]++;
    #####:  958:	    state->discard[nextPlayer][i] = -1;
    #####:  959:	    state->discardCount[nextPlayer]--;
        -:  960:	  }
        -:  961:			    
    #####:  962:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  963:	} 
    #####:  964:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  965:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  966:	state->deckCount[nextPlayer]--;
    #####:  967:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  968:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  969:	state->deckCount[nextPlayer]--;
        -:  970:      }    
        -:  971:		       
    #####:  972:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  973:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  974:	state->playedCardCount++;
    #####:  975:	tributeRevealedCards[1] = -1;
        -:  976:      }
        -:  977:
    #####:  978:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  979:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  980:	  state->coins += 2;
        -:  981:	}
        -:  982:		    
    #####:  983:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  984:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  985:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  986:	}
        -:  987:	else{//Action Card
    #####:  988:	  state->numActions = state->numActions + 2;
        -:  989:	}
        -:  990:      }
        -:  991:	    
    #####:  992:      return 0;
        -:  993:		
        -:  994:    case ambassador:
    #####:  995:      j = 0;		//used to check if player has enough cards to discard
        -:  996:
    #####:  997:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  998:	{
    #####:  999:	  return -1;				
        -: 1000:	}
        -: 1001:
    #####: 1002:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1003:	{
    #####: 1004:	  return -1;
        -: 1005:	}
        -: 1006:
    #####: 1007:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1008:	{
    #####: 1009:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1010:	    {
    #####: 1011:	      j++;
        -: 1012:	    }
        -: 1013:	}
    #####: 1014:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1015:	{
    #####: 1016:	  return -1;				
        -: 1017:	}
        -: 1018:
        -: 1019:      if (DEBUG) 
        -: 1020:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1021:
        -: 1022:      //increase supply count for choosen card by amount being discarded
    #####: 1023:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1024:			
        -: 1025:      //each other player gains a copy of revealed card
    #####: 1026:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1027:	{
    #####: 1028:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1029:	    {
    #####: 1030:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1031:	    }
        -: 1032:	}
        -: 1033:
        -: 1034:      //discard played card from hand
    #####: 1035:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1036:
        -: 1037:      //trash copies of cards returned to supply
    #####: 1038:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1039:	{
    #####: 1040:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1041:	    {
    #####: 1042:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1043:		{
    #####: 1044:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1045:		  break;
        -: 1046:		}
        -: 1047:	    }
        -: 1048:	}			
        -: 1049:
    #####: 1050:      return 0;
        -: 1051:		
        -: 1052:    case cutpurse:
        -: 1053:
    #####: 1054:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1055:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1056:	{
    #####: 1057:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1058:	    {
    #####: 1059:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1060:		{
    #####: 1061:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1062:		    {
    #####: 1063:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1064:		      break;
        -: 1065:		    }
    #####: 1066:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1067:		    {
    #####: 1068:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1069:			{
        -: 1070:			  if (DEBUG)
        -: 1071:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1072:			}	
    #####: 1073:		      break;
        -: 1074:		    }		
        -: 1075:		}
        -: 1076:					
        -: 1077:	    }
        -: 1078:				
        -: 1079:	}				
        -: 1080:
        -: 1081:      //discard played card from hand
    #####: 1082:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1083:
    #####: 1084:      return 0;
        -: 1085:
        -: 1086:		
        -: 1087:    case embargo: 
        -: 1088:      //+2 Coins
    #####: 1089:      state->coins = state->coins + 2;
        -: 1090:			
        -: 1091:      //see if selected pile is in play
    #####: 1092:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1093:	{
    #####: 1094:	  return -1;
        -: 1095:	}
        -: 1096:			
        -: 1097:      //add embargo token to selected supply pile
    #####: 1098:      state->embargoTokens[choice1]++;
        -: 1099:			
        -: 1100:      //trash card
    #####: 1101:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1102:      return 0;
        -: 1103:		
        -: 1104:    case salvager:
        -: 1105:      //+1 buy
    #####: 1106:      state->numBuys++;
        -: 1107:			
    #####: 1108:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1109:	{
        -: 1110:	  //gain coins equal to trashed card
    #####: 1111:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1112:	  //trash card
    #####: 1113:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1114:	}
        -: 1115:			
        -: 1116:      //discard card
    #####: 1117:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1118:      return 0;
        -: 1119:		
        -: 1120:    case sea_hag:
    #####: 1121:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1122:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1123:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1124:	  state->discardCount[i]++;
    #####: 1125:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1126:	}
        -: 1127:      }
    #####: 1128:      return 0;
        -: 1129:		
        -: 1130:    case treasure_map:
        -: 1131:      //search hand for another treasure_map
    #####: 1132:      index = -1;
    #####: 1133:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1134:	{
    #####: 1135:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1136:	    {
    #####: 1137:	      index = i;
    #####: 1138:	      break;
        -: 1139:	    }
        -: 1140:	}
    #####: 1141:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1142:	{
        -: 1143:	  //trash both treasure cards
    #####: 1144:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1145:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1146:
        -: 1147:	  //gain 4 Gold cards
    #####: 1148:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1149:	    {
    #####: 1150:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1151:	    }
        -: 1152:				
        -: 1153:	  //return success
    #####: 1154:	  return 1;
        -: 1155:	}
        -: 1156:			
        -: 1157:      //no second treasure_map found in hand
    #####: 1158:      return -1;
        -: 1159:    }
        -: 1160:
        -: 1161:    //Add refactored functions for selected card enums
    #####: 1162:    if(card == smithy)
branch  0 never executed
branch  1 never executed
        -: 1163:    {
    #####: 1164:    	int result = cardSmithy(currentPlayer, state, handPos);
call    0 never executed
    #####: 1165:    	if ((result == 0))
branch  0 never executed
branch  1 never executed
        -: 1166:    	{
    #####: 1167:    		return 0;
        -: 1168:    	} else
        -: 1169:    		{
    #####: 1170:    			return -1;
        -: 1171:    		}
        -: 1172:    }
        -: 1173:
    #####: 1174:    if(card == adventurer)
branch  0 never executed
branch  1 never executed
        -: 1175:    {
    #####: 1176:    	int result = cardAdventurer(currentPlayer, state);
call    0 never executed
    #####: 1177:    	if ((result == 0))
branch  0 never executed
branch  1 never executed
        -: 1178:    	{
    #####: 1179:    		return 0;
        -: 1180:    	} else
        -: 1181:    		{
    #####: 1182:    			return -1;
        -: 1183:    		}
        -: 1184:    }
        -: 1185:	
    #####: 1186:	if(card == village)
branch  0 never executed
branch  1 never executed
        -: 1187:    {
    #####: 1188:    	int result = cardVillage(currentPlayer, state, handPos);
call    0 never executed
    #####: 1189:    	if ((result == 0))
branch  0 never executed
branch  1 never executed
        -: 1190:    	{
    #####: 1191:    		return 0;
        -: 1192:    	} else
        -: 1193:    		{
    #####: 1194:    			return -1;
        -: 1195:    		}
        -: 1196:    }
        -: 1197:	
    #####: 1198:	if(card == council_room)
branch  0 never executed
branch  1 never executed
        -: 1199:    {
    #####: 1200:    	int result = cardCouncil_room(currentPlayer, state, handPos);
call    0 never executed
    #####: 1201:    	if ((result == 0))
branch  0 never executed
branch  1 never executed
        -: 1202:    	{
    #####: 1203:    		return 0;
        -: 1204:    	} else
        -: 1205:    		{
    #####: 1206:    			return -1;
        -: 1207:    		}
        -: 1208:    }
        -: 1209:
    #####: 1210:    if(card == outpost)
branch  0 never executed
branch  1 never executed
        -: 1211:    {
    #####: 1212:    	int result = cardOutpost(currentPlayer, state, handPos);
call    0 never executed
    #####: 1213:    	if ((result == 0))
branch  0 never executed
branch  1 never executed
        -: 1214:    	{
    #####: 1215:    		return 0;
        -: 1216:    	} else
        -: 1217:    		{
    #####: 1218:    			return -1;
        -: 1219:    		}
        -: 1220:    }
        -: 1221:
    #####: 1222:  return -1;
        -: 1223:}
        -: 1224:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1225:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1226:{
        -: 1227:	
        -: 1228:  //if card is not trashed, added to Played pile 
    #####: 1229:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1230:    {
        -: 1231:      //add card to played pile
    #####: 1232:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1233:      state->playedCardCount++;
        -: 1234:    }
        -: 1235:	
        -: 1236:  //set played card to -1
    #####: 1237:  state->hand[currentPlayer][handPos] = -1;
        -: 1238:	
        -: 1239:  //remove card from player's hand
    #####: 1240:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1241:    {
        -: 1242:      //reduce number of cards in hand
    #####: 1243:      state->handCount[currentPlayer]--;
        -: 1244:    }
    #####: 1245:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1246:    {
        -: 1247:      //reduce number of cards in hand
    #####: 1248:      state->handCount[currentPlayer]--;
        -: 1249:    }
        -: 1250:  else 	
        -: 1251:    {
        -: 1252:      //replace discarded card with last card in hand
    #####: 1253:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1254:      //set last card to -1
    #####: 1255:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1256:      //reduce number of cards in hand
    #####: 1257:      state->handCount[currentPlayer]--;
        -: 1258:    }
        -: 1259:	
    #####: 1260:  return 0;
        -: 1261:}
        -: 1262:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1263:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1264:{
        -: 1265:  //Note: supplyPos is enum of choosen card
        -: 1266:	
        -: 1267:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1268:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1269:    {
    #####: 1270:      return -1;
        -: 1271:    }
        -: 1272:	
        -: 1273:  //added card for [whoseTurn] current player:
        -: 1274:  // toFlag = 0 : add to discard
        -: 1275:  // toFlag = 1 : add to deck
        -: 1276:  // toFlag = 2 : add to hand
        -: 1277:
    #####: 1278:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1279:    {
    #####: 1280:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1281:      state->deckCount[player]++;
        -: 1282:    }
    #####: 1283:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1284:    {
    #####: 1285:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1286:      state->handCount[player]++;
        -: 1287:    }
        -: 1288:  else
        -: 1289:    {
    #####: 1290:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1291:      state->discardCount[player]++;
        -: 1292:    }
        -: 1293:	
        -: 1294:  //decrease number in supply pile
    #####: 1295:  state->supplyCount[supplyPos]--;
        -: 1296:	 
    #####: 1297:  return 0;
        -: 1298:}
        -: 1299:
function updateCoins called 4 returned 100% blocks executed 82%
        4: 1300:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1301:{
        -: 1302:  int i;
        -: 1303:	
        -: 1304:  //reset coin count
        4: 1305:  state->coins = 0;
        -: 1306:
        -: 1307:  //add coins for each Treasure card in player's hand
       24: 1308:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1309:    {
       20: 1310:      if (state->hand[player][i] == copper)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -: 1311:	{
       15: 1312:	  state->coins += 1;
        -: 1313:	}
        5: 1314:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1315:	{
    #####: 1316:	  state->coins += 2;
        -: 1317:	}
        5: 1318:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1319:	{
    #####: 1320:	  state->coins += 3;
        -: 1321:	}	
        -: 1322:    }	
        -: 1323:
        -: 1324:  //add bonus
        4: 1325:  state->coins += bonus;
        -: 1326:
        4: 1327:  return 0;
        -: 1328:}
        -: 1329:
function cardSmithy called 0 returned 0% blocks executed 0%
    #####: 1330:int cardSmithy(int currentPlayer, struct gameState *state, int handPos)
        -: 1331:{
        -: 1332:	//+3 Cards in hand
        -: 1333:	int i;
    #####: 1334:	for(i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1335:	{
    #####: 1336:		drawCard(currentPlayer, state);
call    0 never executed
        -: 1337:	}
        -: 1338:
    #####: 1339:	discardCard(handPos, currentPlayer, state, i);
call    0 never executed
    #####: 1340:	return 0;
        -: 1341:}
        -: 1342:
function cardAdventurer called 5 returned 100% blocks executed 43%
        5: 1343:int cardAdventurer(int currentPlayer, struct gameState *state)
        -: 1344:{
        -: 1345:	int drawntreasure;
        -: 1346:	int cardDrawn;
        -: 1347:	int z;
        -: 1348:	int temphand[MAX_HAND];
        -: 1349:
       10: 1350:	while(drawntreasure<2)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -: 1351:	{
    #####: 1352:		if(state->deckCount[currentPlayer] < 1)
branch  0 never executed
branch  1 never executed
        -: 1353:			{
    #####: 1354:				shuffle(currentPlayer, state);
call    0 never executed
        -: 1355:			}
        -: 1356:
    #####: 1357:		drawCard(currentPlayer, state);
call    0 never executed
    #####: 1358:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
    #####: 1359:		if (cardDrawn == silver ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1360:			cardDrawn == copper)
        -: 1361:			{
    #####: 1362:				drawntreasure ++;
        -: 1363:			}
        -: 1364:		else{
    #####: 1365:			temphand[z] = cardDrawn;
    #####: 1366:			state->handCount[currentPlayer]--;
    #####: 1367:			z++;
        -: 1368:		}
        -: 1369:	}
        -: 1370:
       10: 1371:	while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####: 1372:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1];
    #####: 1373:		z=z-1;
        -: 1374:	}
        5: 1375:	return 0;
        -: 1376:}
        -: 1377:
function cardVillage called 0 returned 0% blocks executed 0%
    #####: 1378:int cardVillage(int currentPlayer, struct gameState *state, int handPos)
        -: 1379:{
        -: 1380:	//Draw one card
    #####: 1381:	drawCard(currentPlayer, state);
call    0 never executed
        -: 1382:
        -: 1383:	//Gain two actions
    #####: 1384:	state->numActions = state->numPlayers + 2;
        -: 1385:
        -: 1386:	//discard the played card from that hand
    #####: 1387:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1388:
    #####: 1389:	return 0;
        -: 1390:}
        -: 1391:
function cardCouncil_room called 0 returned 0% blocks executed 0%
    #####: 1392:int cardCouncil_room(int currentPlayer, struct gameState *state, int handPos)
        -: 1393:{
        -: 1394:	int i;
        -: 1395:	int p;
        -: 1396:	
        -: 1397:	//Draw 4 cards
    #####: 1398:	for(i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1399:	{
    #####: 1400:		drawCard(currentPlayer, state);
call    0 never executed
        -: 1401:	}
        -: 1402:
        -: 1403:	//+1 buy
    #####: 1404:	state->numBuys++;
        -: 1405:
        -: 1406:	//Each other player draws a card
    #####: 1407:	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1408:	{
    #####: 1409:		if(p != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1410:		{
    #####: 1411:			drawCard(i, state);
call    0 never executed
        -: 1412:		}
        -: 1413:	}
        -: 1414:
        -: 1415:	//put played card in discard pile
    #####: 1416:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1417:
    #####: 1418:	return 0;
        -: 1419:}
        -: 1420:
function cardOutpost called 0 returned 0% blocks executed 0%
    #####: 1421:int cardOutpost(int currentPlayer, struct gameState *state, int handPos)
        -: 1422:{
        -: 1423:	//check outpost flag
        -: 1424:	int i;
    #####: 1425:	i = state->outpostPlayed;
        -: 1426:
        -: 1427:	//set outpost flag
    #####: 1428:	if (i != NULL)
branch  0 never executed
branch  1 never executed
        -: 1429:	{
    #####: 1430:		state->outpostPlayed++;		
        -: 1431:	}
        -: 1432:
        -: 1433:	//discard card
    #####: 1434:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1435:	return 0;
        -: 1436:}
        -: 1437:
        -: 1438:
        -: 1439://end of dominion.c
        -: 1440:

Running tests!Test# 1
Function Tested: cardAdventurer(0, &state);
Cards in starting hand: 
11, 17, 1, 1, 12, 16, 1, 
Random Seed: 10000
Failed Item(s): 
Invalid draw from deck. 

Running tests!Test# 2
Function Tested: cardAdventurer(0, &state);
Cards in starting hand: 
3, 0, 17, 
Random Seed: 10001
Failed Item(s): 
Invalid draw from deck. 

Running tests!Test# 3
Function Tested: cardAdventurer(0, &state);
Cards in starting hand: 
22, 10, 10, 24, 7, 8, 3, 
Random Seed: 10002
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Running tests!Test# 1
Function Tested: cardAdventurer(0, &state);
Cards in starting hand: 
11, 17, 1, 1, 12, 16, 1, 
Random Seed: 10000
Failed Item(s): 
Invalid draw from deck. 

Running tests!Test# 2
Function Tested: cardAdventurer(0, &state);
Cards in starting hand: 
3, 0, 17, 
Random Seed: 10001
Failed Item(s): 
Invalid draw from deck. 

Running tests!Test# 3
Function Tested: cardAdventurer(0, &state);
Cards in starting hand: 
22, 10, 10, 24, 7, 8, 3, 
Random Seed: 10002
Failed Item(s): 
Invalid draw from deck. 

Running tests!Test# 4
Function Tested: cardAdventurer(0, &state);
Cards in starting hand: 
18, 2, 3, 
Random Seed: 10003
Failed Item(s): 
Invalid draw from deck. 

Running tests!Test# 5
Function Tested: cardAdventurer(0, &state);
Cards in starting hand: 
9, 12, 14, 22, 5, 17, 
Random Seed: 10004
Failed Item(s): 
Invalid draw from deck. 

Total Tests: 10000
Total Passed: 0
Total Failed: 5
File 'dominion.c'
Lines executed:17.30% of 578
Branches executed:16.67% of 432
Taken at least once:13.89% of 432
Calls executed:7.37% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 240 returned 100% blocks executed 83%
      240:    8:int compare(const void* a, const void* b) {
      240:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      240:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       64:   12:    return -1;
      176:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 9 returned 100% blocks executed 95%
        9:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        9:   44:  SelectStream(1);
call    0 returned 100%
        9:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        9:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 22% (fallthrough)
branch  3 taken 78%
        -:   49:    {
        2:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        7:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       77:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      770:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      700:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        7:   73:  if (numPlayers == 2)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
        -:   74:    {
        5:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        2:   77:  else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:    {
        2:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        7:   87:  if (numPlayers == 2)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
        -:   88:    {
        5:   89:      state->supplyCount[estate] = 8;
        5:   90:      state->supplyCount[duchy] = 8;
        5:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        2:   95:      state->supplyCount[estate] = 12;
        2:   96:      state->supplyCount[duchy] = 12;
        2:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        7:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        7:  102:  state->supplyCount[silver] = 40;
        7:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      147:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1155:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1085:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       70:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
       14:  115:		  if (numPlayers == 2){ 
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
        5:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        2:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       63:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       70:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1015:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       23:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  139:    {
       16:  140:      state->deckCount[i] = 0;
       64:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       48:  143:	  state->deck[i][j] = estate;
       48:  144:	  state->deckCount[i]++;
        -:  145:	}
      128:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      112:  148:	  state->deck[i][j] = copper;
      112:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       23:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  155:    {
       16:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       23:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       16:  166:      state->handCount[i] = 0;
       16:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      196:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      189:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        7:  182:  state->outpostPlayed = 0;
        7:  183:  state->phase = 0;
        7:  184:  state->numActions = 1;
        7:  185:  state->numBuys = 1;
        7:  186:  state->playedCardCount = 0;
        7:  187:  state->whoseTurn = 0;
        7:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       42:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       35:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        7:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        7:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 16 returned 100% blocks executed 94%
       16:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       16:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       16:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
       16:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      192:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      160:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      160:  216:    newDeck[newDeckPos] = state->deck[player][card];
      160:  217:    newDeckPos++;
      542:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
      382:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      160:  221:    state->deckCount[player]--;
        -:  222:  }
      176:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      160:  224:    state->deck[player][i] = newDeck[i];
      160:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       16:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 35 returned 100% blocks executed 38%
       35:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       35:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       35:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       35:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       35:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       35:  576:    state->deckCount[player]--;
       35:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       35:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        -:  658:  //int drawntreasure=0;
        -:  659:  //int cardDrawn;
        -:  660:  //int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
        -:  668:    {
        -:  669:						
        -:  670:    case feast:
        -:  671:      //gain card with cost up to 5
        -:  672:      //Backup hand
    #####:  673:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  674:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  675:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  676:      }
        -:  677:      //Backup hand
        -:  678:
        -:  679:      //Update Coins for Buy
    #####:  680:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  681:      x = 1;//Condition to loop on
    #####:  682:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  683:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  684:	  if (DEBUG)
        -:  685:	    printf("None of that card left, sorry!\n");
        -:  686:
        -:  687:	  if (DEBUG){
        -:  688:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  689:	  }
        -:  690:	}
    #####:  691:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  692:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  693:
        -:  694:	  if (DEBUG){
        -:  695:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  696:	  }
        -:  697:	}
        -:  698:	else{
        -:  699:
        -:  700:	  if (DEBUG){
        -:  701:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  702:	  }
        -:  703:
    #####:  704:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  705:	  x = 0;//No more buying cards
        -:  706:
        -:  707:	  if (DEBUG){
        -:  708:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  709:	  }
        -:  710:
        -:  711:	}
        -:  712:      }     
        -:  713:
        -:  714:      //Reset Hand
    #####:  715:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  716:	state->hand[currentPlayer][i] = temphand[i];
    #####:  717:	temphand[i] = -1;
        -:  718:      }
        -:  719:      //Reset Hand
        -:  720:      			
    #####:  721:      return 0;
        -:  722:			
        -:  723:    case gardens:
    #####:  724:      return -1;
        -:  725:			
        -:  726:    case mine:
    #####:  727:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  728:
    #####:  729:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  730:	{
    #####:  731:	  return -1;
        -:  732:	}
        -:  733:		
    #####:  734:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  735:	{
    #####:  736:	  return -1;
        -:  737:	}
        -:  738:
    #####:  739:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:
    #####:  744:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  745:
        -:  746:      //discard card from hand
    #####:  747:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  748:
        -:  749:      //discard trashed card
    #####:  750:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  751:	{
    #####:  752:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  753:	    {
    #####:  754:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  755:	      break;
        -:  756:	    }
        -:  757:	}
        -:  758:			
    #####:  759:      return 0;
        -:  760:			
        -:  761:    case remodel:
    #####:  762:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  763:
    #####:  764:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  765:	{
    #####:  766:	  return -1;
        -:  767:	}
        -:  768:
    #####:  769:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  770:
        -:  771:      //discard card from hand
    #####:  772:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  773:
        -:  774:      //discard trashed card
    #####:  775:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  776:	{
    #####:  777:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  778:	    {
    #####:  779:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  780:	      break;
        -:  781:	    }
        -:  782:	}
        -:  783:
        -:  784:
    #####:  785:      return 0;
        -:  786:		
        -:  787:    /*case smithy:
        -:  788:      //+3 Cards
        -:  789:      for (i = 0; i < 3; i++)
        -:  790:	{
        -:  791:	  drawCard(currentPlayer, state);
        -:  792:	}
        -:  793:			
        -:  794:      //discard card from hand
        -:  795:      discardCard(handPos, currentPlayer, state, 0);
        -:  796:      return 0;
        -:  797:	*/
        -:  798:		
        -:  799:    case baron:
    #####:  800:      state->numBuys++;//Increase buys by 1!
    #####:  801:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  802:	int p = 0;//Iterator for hand!
    #####:  803:	int card_not_discarded = 1;//Flag for discard set!
    #####:  804:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  805:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  806:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  807:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  808:	    state->discardCount[currentPlayer]++;
    #####:  809:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  810:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  811:	    }
    #####:  812:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  813:	    state->handCount[currentPlayer]--;
    #####:  814:	    card_not_discarded = 0;//Exit the loop
        -:  815:	  }
    #####:  816:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  817:	    if(DEBUG) {
        -:  818:	      printf("No estate cards in your hand, invalid choice\n");
        -:  819:	      printf("Must gain an estate if there are any\n");
        -:  820:	    }
    #####:  821:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  822:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  823:	      state->supplyCount[estate]--;//Decrement estates
    #####:  824:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  825:		isGameOver(state);
call    0 never executed
        -:  826:	      }
        -:  827:	    }
    #####:  828:	    card_not_discarded = 0;//Exit the loop
        -:  829:	  }
        -:  830:			    
        -:  831:	  else{
    #####:  832:	    p++;//Next card
        -:  833:	  }
        -:  834:	}
        -:  835:      }
        -:  836:			    
        -:  837:      else{
    #####:  838:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  839:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  840:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  841:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  842:	    isGameOver(state);
call    0 never executed
        -:  843:	  }
        -:  844:	}
        -:  845:      }
        -:  846:	    
        -:  847:      
    #####:  848:      return 0;
        -:  849:		
        -:  850:    case great_hall:
        -:  851:      //+1 Card
    #####:  852:      drawCard(currentPlayer, state);
call    0 never executed
        -:  853:			
        -:  854:      //+1 Actions
    #####:  855:      state->numActions++;
        -:  856:			
        -:  857:      //discard card from hand
    #####:  858:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  859:      return 0;
        -:  860:		
        -:  861:    case minion:
        -:  862:      //+1 action
    #####:  863:      state->numActions++;
        -:  864:			
        -:  865:      //discard card from hand
    #####:  866:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  867:			
    #####:  868:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  869:	{
    #####:  870:	  state->coins = state->coins + 2;
        -:  871:	}
        -:  872:			
    #####:  873:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  874:	{
        -:  875:	  //discard hand
    #####:  876:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  877:	    {
    #####:  878:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  879:	    }
        -:  880:				
        -:  881:	  //draw 4
    #####:  882:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  883:	    {
    #####:  884:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  885:	    }
        -:  886:				
        -:  887:	  //other players discard hand and redraw if hand size > 4
    #####:  888:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  889:	    {
    #####:  890:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  891:		{
    #####:  892:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  893:		    {
        -:  894:		      //discard hand
    #####:  895:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  896:			{
    #####:  897:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  898:			}
        -:  899:							
        -:  900:		      //draw 4
    #####:  901:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  902:			{
    #####:  903:			  drawCard(i, state);
call    0 never executed
        -:  904:			}
        -:  905:		    }
        -:  906:		}
        -:  907:	    }
        -:  908:				
        -:  909:	}
    #####:  910:      return 0;
        -:  911:		
        -:  912:    case steward:
    #####:  913:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  914:	{
        -:  915:	  //+2 cards
    #####:  916:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  917:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  918:	}
    #####:  919:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  920:	{
        -:  921:	  //+2 coins
    #####:  922:	  state->coins = state->coins + 2;
        -:  923:	}
        -:  924:      else
        -:  925:	{
        -:  926:	  //trash 2 cards in hand
    #####:  927:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  928:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  929:	}
        -:  930:			
        -:  931:      //discard card from hand
    #####:  932:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  933:      return 0;
        -:  934:		
        -:  935:    case tribute:
    #####:  936:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  937:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  938:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  939:	  state->deckCount[nextPlayer]--;
        -:  940:	}
    #####:  941:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  942:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  943:	  state->discardCount[nextPlayer]--;
        -:  944:	}
        -:  945:	else{
        -:  946:	  //No Card to Reveal
        -:  947:	  if (DEBUG){
        -:  948:	    printf("No cards to reveal\n");
        -:  949:	  }
        -:  950:	}
        -:  951:      }
        -:  952:	    
        -:  953:      else{
    #####:  954:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  955:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  956:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  957:	    state->deckCount[nextPlayer]++;
    #####:  958:	    state->discard[nextPlayer][i] = -1;
    #####:  959:	    state->discardCount[nextPlayer]--;
        -:  960:	  }
        -:  961:			    
    #####:  962:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  963:	} 
    #####:  964:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  965:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  966:	state->deckCount[nextPlayer]--;
    #####:  967:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  968:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  969:	state->deckCount[nextPlayer]--;
        -:  970:      }    
        -:  971:		       
    #####:  972:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  973:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  974:	state->playedCardCount++;
    #####:  975:	tributeRevealedCards[1] = -1;
        -:  976:      }
        -:  977:
    #####:  978:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  979:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  980:	  state->coins += 2;
        -:  981:	}
        -:  982:		    
    #####:  983:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  984:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  985:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  986:	}
        -:  987:	else{//Action Card
    #####:  988:	  state->numActions = state->numActions + 2;
        -:  989:	}
        -:  990:      }
        -:  991:	    
    #####:  992:      return 0;
        -:  993:		
        -:  994:    case ambassador:
    #####:  995:      j = 0;		//used to check if player has enough cards to discard
        -:  996:
    #####:  997:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  998:	{
    #####:  999:	  return -1;				
        -: 1000:	}
        -: 1001:
    #####: 1002:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1003:	{
    #####: 1004:	  return -1;
        -: 1005:	}
        -: 1006:
    #####: 1007:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1008:	{
    #####: 1009:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1010:	    {
    #####: 1011:	      j++;
        -: 1012:	    }
        -: 1013:	}
    #####: 1014:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1015:	{
    #####: 1016:	  return -1;				
        -: 1017:	}
        -: 1018:
        -: 1019:      if (DEBUG) 
        -: 1020:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1021:
        -: 1022:      //increase supply count for choosen card by amount being discarded
    #####: 1023:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1024:			
        -: 1025:      //each other player gains a copy of revealed card
    #####: 1026:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1027:	{
    #####: 1028:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1029:	    {
    #####: 1030:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1031:	    }
        -: 1032:	}
        -: 1033:
        -: 1034:      //discard played card from hand
    #####: 1035:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1036:
        -: 1037:      //trash copies of cards returned to supply
    #####: 1038:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1039:	{
    #####: 1040:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1041:	    {
    #####: 1042:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1043:		{
    #####: 1044:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1045:		  break;
        -: 1046:		}
        -: 1047:	    }
        -: 1048:	}			
        -: 1049:
    #####: 1050:      return 0;
        -: 1051:		
        -: 1052:    case cutpurse:
        -: 1053:
    #####: 1054:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1055:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1056:	{
    #####: 1057:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1058:	    {
    #####: 1059:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1060:		{
    #####: 1061:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1062:		    {
    #####: 1063:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1064:		      break;
        -: 1065:		    }
    #####: 1066:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1067:		    {
    #####: 1068:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1069:			{
        -: 1070:			  if (DEBUG)
        -: 1071:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1072:			}	
    #####: 1073:		      break;
        -: 1074:		    }		
        -: 1075:		}
        -: 1076:					
        -: 1077:	    }
        -: 1078:				
        -: 1079:	}				
        -: 1080:
        -: 1081:      //discard played card from hand
    #####: 1082:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1083:
    #####: 1084:      return 0;
        -: 1085:
        -: 1086:		
        -: 1087:    case embargo: 
        -: 1088:      //+2 Coins
    #####: 1089:      state->coins = state->coins + 2;
        -: 1090:			
        -: 1091:      //see if selected pile is in play
    #####: 1092:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1093:	{
    #####: 1094:	  return -1;
        -: 1095:	}
        -: 1096:			
        -: 1097:      //add embargo token to selected supply pile
    #####: 1098:      state->embargoTokens[choice1]++;
        -: 1099:			
        -: 1100:      //trash card
    #####: 1101:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1102:      return 0;
        -: 1103:		
        -: 1104:    case salvager:
        -: 1105:      //+1 buy
    #####: 1106:      state->numBuys++;
        -: 1107:			
    #####: 1108:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1109:	{
        -: 1110:	  //gain coins equal to trashed card
    #####: 1111:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1112:	  //trash card
    #####: 1113:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1114:	}
        -: 1115:			
        -: 1116:      //discard card
    #####: 1117:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1118:      return 0;
        -: 1119:		
        -: 1120:    case sea_hag:
    #####: 1121:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1122:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1123:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1124:	  state->discardCount[i]++;
    #####: 1125:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1126:	}
        -: 1127:      }
    #####: 1128:      return 0;
        -: 1129:		
        -: 1130:    case treasure_map:
        -: 1131:      //search hand for another treasure_map
    #####: 1132:      index = -1;
    #####: 1133:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1134:	{
    #####: 1135:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1136:	    {
    #####: 1137:	      index = i;
    #####: 1138:	      break;
        -: 1139:	    }
        -: 1140:	}
    #####: 1141:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1142:	{
        -: 1143:	  //trash both treasure cards
    #####: 1144:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1145:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1146:
        -: 1147:	  //gain 4 Gold cards
    #####: 1148:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1149:	    {
    #####: 1150:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1151:	    }
        -: 1152:				
        -: 1153:	  //return success
    #####: 1154:	  return 1;
        -: 1155:	}
        -: 1156:			
        -: 1157:      //no second treasure_map found in hand
    #####: 1158:      return -1;
        -: 1159:    }
        -: 1160:
        -: 1161:    //Add refactored functions for selected card enums
    #####: 1162:    if(card == smithy)
branch  0 never executed
branch  1 never executed
        -: 1163:    {
    #####: 1164:    	int result = cardSmithy(currentPlayer, state, handPos);
call    0 never executed
    #####: 1165:    	if ((result == 0))
branch  0 never executed
branch  1 never executed
        -: 1166:    	{
    #####: 1167:    		return 0;
        -: 1168:    	} else
        -: 1169:    		{
    #####: 1170:    			return -1;
        -: 1171:    		}
        -: 1172:    }
        -: 1173:
    #####: 1174:    if(card == adventurer)
branch  0 never executed
branch  1 never executed
        -: 1175:    {
    #####: 1176:    	int result = cardAdventurer(currentPlayer, state);
call    0 never executed
    #####: 1177:    	if ((result == 0))
branch  0 never executed
branch  1 never executed
        -: 1178:    	{
    #####: 1179:    		return 0;
        -: 1180:    	} else
        -: 1181:    		{
    #####: 1182:    			return -1;
        -: 1183:    		}
        -: 1184:    }
        -: 1185:	
    #####: 1186:	if(card == village)
branch  0 never executed
branch  1 never executed
        -: 1187:    {
    #####: 1188:    	int result = cardVillage(currentPlayer, state, handPos);
call    0 never executed
    #####: 1189:    	if ((result == 0))
branch  0 never executed
branch  1 never executed
        -: 1190:    	{
    #####: 1191:    		return 0;
        -: 1192:    	} else
        -: 1193:    		{
    #####: 1194:    			return -1;
        -: 1195:    		}
        -: 1196:    }
        -: 1197:	
    #####: 1198:	if(card == council_room)
branch  0 never executed
branch  1 never executed
        -: 1199:    {
    #####: 1200:    	int result = cardCouncil_room(currentPlayer, state, handPos);
call    0 never executed
    #####: 1201:    	if ((result == 0))
branch  0 never executed
branch  1 never executed
        -: 1202:    	{
    #####: 1203:    		return 0;
        -: 1204:    	} else
        -: 1205:    		{
    #####: 1206:    			return -1;
        -: 1207:    		}
        -: 1208:    }
        -: 1209:
    #####: 1210:    if(card == outpost)
branch  0 never executed
branch  1 never executed
        -: 1211:    {
    #####: 1212:    	int result = cardOutpost(currentPlayer, state, handPos);
call    0 never executed
    #####: 1213:    	if ((result == 0))
branch  0 never executed
branch  1 never executed
        -: 1214:    	{
    #####: 1215:    		return 0;
        -: 1216:    	} else
        -: 1217:    		{
    #####: 1218:    			return -1;
        -: 1219:    		}
        -: 1220:    }
        -: 1221:
    #####: 1222:  return -1;
        -: 1223:}
        -: 1224:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1225:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1226:{
        -: 1227:	
        -: 1228:  //if card is not trashed, added to Played pile 
    #####: 1229:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1230:    {
        -: 1231:      //add card to played pile
    #####: 1232:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1233:      state->playedCardCount++;
        -: 1234:    }
        -: 1235:	
        -: 1236:  //set played card to -1
    #####: 1237:  state->hand[currentPlayer][handPos] = -1;
        -: 1238:	
        -: 1239:  //remove card from player's hand
    #####: 1240:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1241:    {
        -: 1242:      //reduce number of cards in hand
    #####: 1243:      state->handCount[currentPlayer]--;
        -: 1244:    }
    #####: 1245:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1246:    {
        -: 1247:      //reduce number of cards in hand
    #####: 1248:      state->handCount[currentPlayer]--;
        -: 1249:    }
        -: 1250:  else 	
        -: 1251:    {
        -: 1252:      //replace discarded card with last card in hand
    #####: 1253:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1254:      //set last card to -1
    #####: 1255:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1256:      //reduce number of cards in hand
    #####: 1257:      state->handCount[currentPlayer]--;
        -: 1258:    }
        -: 1259:	
    #####: 1260:  return 0;
        -: 1261:}
        -: 1262:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1263:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1264:{
        -: 1265:  //Note: supplyPos is enum of choosen card
        -: 1266:	
        -: 1267:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1268:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1269:    {
    #####: 1270:      return -1;
        -: 1271:    }
        -: 1272:	
        -: 1273:  //added card for [whoseTurn] current player:
        -: 1274:  // toFlag = 0 : add to discard
        -: 1275:  // toFlag = 1 : add to deck
        -: 1276:  // toFlag = 2 : add to hand
        -: 1277:
    #####: 1278:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1279:    {
    #####: 1280:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1281:      state->deckCount[player]++;
        -: 1282:    }
    #####: 1283:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1284:    {
    #####: 1285:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1286:      state->handCount[player]++;
        -: 1287:    }
        -: 1288:  else
        -: 1289:    {
    #####: 1290:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1291:      state->discardCount[player]++;
        -: 1292:    }
        -: 1293:	
        -: 1294:  //decrease number in supply pile
    #####: 1295:  state->supplyCount[supplyPos]--;
        -: 1296:	 
    #####: 1297:  return 0;
        -: 1298:}
        -: 1299:
function updateCoins called 7 returned 100% blocks executed 82%
        7: 1300:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1301:{
        -: 1302:  int i;
        -: 1303:	
        -: 1304:  //reset coin count
        7: 1305:  state->coins = 0;
        -: 1306:
        -: 1307:  //add coins for each Treasure card in player's hand
       42: 1308:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1309:    {
       35: 1310:      if (state->hand[player][i] == copper)
branch  0 taken 77% (fallthrough)
branch  1 taken 23%
        -: 1311:	{
       27: 1312:	  state->coins += 1;
        -: 1313:	}
        8: 1314:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1315:	{
    #####: 1316:	  state->coins += 2;
        -: 1317:	}
        8: 1318:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1319:	{
    #####: 1320:	  state->coins += 3;
        -: 1321:	}	
        -: 1322:    }	
        -: 1323:
        -: 1324:  //add bonus
        7: 1325:  state->coins += bonus;
        -: 1326:
        7: 1327:  return 0;
        -: 1328:}
        -: 1329:
function cardSmithy called 0 returned 0% blocks executed 0%
    #####: 1330:int cardSmithy(int currentPlayer, struct gameState *state, int handPos)
        -: 1331:{
        -: 1332:	//+3 Cards in hand
        -: 1333:	int i;
    #####: 1334:	for(i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1335:	{
    #####: 1336:		drawCard(currentPlayer, state);
call    0 never executed
        -: 1337:	}
        -: 1338:
    #####: 1339:	discardCard(handPos, currentPlayer, state, i);
call    0 never executed
    #####: 1340:	return 0;
        -: 1341:}
        -: 1342:
function cardAdventurer called 8 returned 100% blocks executed 43%
        8: 1343:int cardAdventurer(int currentPlayer, struct gameState *state)
        -: 1344:{
        -: 1345:	int drawntreasure;
        -: 1346:	int cardDrawn;
        -: 1347:	int z;
        -: 1348:	int temphand[MAX_HAND];
        -: 1349:
       16: 1350:	while(drawntreasure<2)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -: 1351:	{
    #####: 1352:		if(state->deckCount[currentPlayer] < 1)
branch  0 never executed
branch  1 never executed
        -: 1353:			{
    #####: 1354:				shuffle(currentPlayer, state);
call    0 never executed
        -: 1355:			}
        -: 1356:
    #####: 1357:		drawCard(currentPlayer, state);
call    0 never executed
    #####: 1358:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
    #####: 1359:		if (cardDrawn == silver ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1360:			cardDrawn == copper)
        -: 1361:			{
    #####: 1362:				drawntreasure ++;
        -: 1363:			}
        -: 1364:		else{
    #####: 1365:			temphand[z] = cardDrawn;
    #####: 1366:			state->handCount[currentPlayer]--;
    #####: 1367:			z++;
        -: 1368:		}
        -: 1369:	}
        -: 1370:
       16: 1371:	while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####: 1372:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1];
    #####: 1373:		z=z-1;
        -: 1374:	}
        8: 1375:	return 0;
        -: 1376:}
        -: 1377:
function cardVillage called 0 returned 0% blocks executed 0%
    #####: 1378:int cardVillage(int currentPlayer, struct gameState *state, int handPos)
        -: 1379:{
        -: 1380:	//Draw one card
    #####: 1381:	drawCard(currentPlayer, state);
call    0 never executed
        -: 1382:
        -: 1383:	//Gain two actions
    #####: 1384:	state->numActions = state->numPlayers + 2;
        -: 1385:
        -: 1386:	//discard the played card from that hand
    #####: 1387:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1388:
    #####: 1389:	return 0;
        -: 1390:}
        -: 1391:
function cardCouncil_room called 0 returned 0% blocks executed 0%
    #####: 1392:int cardCouncil_room(int currentPlayer, struct gameState *state, int handPos)
        -: 1393:{
        -: 1394:	int i;
        -: 1395:	int p;
        -: 1396:	
        -: 1397:	//Draw 4 cards
    #####: 1398:	for(i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1399:	{
    #####: 1400:		drawCard(currentPlayer, state);
call    0 never executed
        -: 1401:	}
        -: 1402:
        -: 1403:	//+1 buy
    #####: 1404:	state->numBuys++;
        -: 1405:
        -: 1406:	//Each other player draws a card
    #####: 1407:	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1408:	{
    #####: 1409:		if(p != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1410:		{
    #####: 1411:			drawCard(i, state);
call    0 never executed
        -: 1412:		}
        -: 1413:	}
        -: 1414:
        -: 1415:	//put played card in discard pile
    #####: 1416:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1417:
    #####: 1418:	return 0;
        -: 1419:}
        -: 1420:
function cardOutpost called 0 returned 0% blocks executed 0%
    #####: 1421:int cardOutpost(int currentPlayer, struct gameState *state, int handPos)
        -: 1422:{
        -: 1423:	//check outpost flag
        -: 1424:	int i;
    #####: 1425:	i = state->outpostPlayed;
        -: 1426:
        -: 1427:	//set outpost flag
    #####: 1428:	if (i != NULL)
branch  0 never executed
branch  1 never executed
        -: 1429:	{
    #####: 1430:		state->outpostPlayed++;		
        -: 1431:	}
        -: 1432:
        -: 1433:	//discard card
    #####: 1434:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1435:	return 0;
        -: 1436:}
        -: 1437:
        -: 1438:
        -: 1439://end of dominion.c
        -: 1440:

Running tests!
Test# 1

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 17, 1, 1, 12, 16, 1, 
Random Seed: 10000
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 2

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
3, 0, 17, 
Random Seed: 10001
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 3

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
22, 10, 10, 24, 7, 8, 3, 
Random Seed: 10002
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 4

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 2, 3, 
Random Seed: 10003
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 5

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 12, 14, 22, 5, 17, 
Random Seed: 10004
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 6

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 24, 1, 11, 3, 1, 4, 
Random Seed: 10005
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 7

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 17, 2, 1, 24, 13, 4, 2, 3, 
Random Seed: 10006
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 8

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
6, 
Random Seed: 10007
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 9

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 10, 11, 14, 17, 4, 
Random Seed: 10008
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 10

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 12, 15, 0, 
Random Seed: 10009
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 11

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
5, 22, 10, 7, 14, 
Random Seed: 10010
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 12

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
12, 2, 14, 16, 7, 13, 22, 13, 10, 
Random Seed: 10011
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 13

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
22, 7, 18, 16, 12, 6, 1, 
Random Seed: 10012
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 14

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 
Random Seed: 10013
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 15

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 9, 8, 21, 18, 22, 12, 3, 
Random Seed: 10014
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 16

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 1, 23, 8, 23, 12, 21, 
Random Seed: 10015
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 17

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 1, 11, 9, 15, 19, 13, 18, 
Random Seed: 10016
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 18

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
22, 25, 16, 5, 
Random Seed: 10017
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 19

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 5, 0, 3, 17, 
Random Seed: 10018
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 20

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 
Random Seed: 10019
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 21

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 1, 2, 13, 20, 21, 
Random Seed: 10020
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 22

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
5, 5, 
Random Seed: 10021
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 23

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 16, 23, 22, 15, 16, 2, 0, 2, 
Random Seed: 10022
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 24

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 7, 25, 21, 5, 17, 10, 12, 
Random Seed: 10023
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 25

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 25, 9, 10, 15, 16, 15, 23, 
Random Seed: 10024
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 26

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 10, 8, 19, 25, 24, 
Random Seed: 10025
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 27

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 1, 7, 7, 10, 8, 2, 
Random Seed: 10026
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 28

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 4, 13, 3, 19, 14, 12, 5, 6, 
Random Seed: 10027
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 29

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
3, 
Random Seed: 10028
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 30

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 6, 15, 23, 8, 16, 
Random Seed: 10029
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 31

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 24, 19, 
Random Seed: 10030
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 32

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 6, 3, 4, 22, 7, 
Random Seed: 10031
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 33

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 8, 14, 7, 14, 17, 3, 
Random Seed: 10032
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 34

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
10, 
Random Seed: 10033
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 35

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 
Random Seed: 10034
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 36

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 15, 16, 14, 16, 12, 18, 
Random Seed: 10035
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 37

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 6, 20, 
Random Seed: 10036
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 38

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 24, 16, 23, 13, 25, 11, 6, 3, 6, 
Random Seed: 10037
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 39

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 19, 17, 22, 
Random Seed: 10038
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 40

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 18, 0, 3, 
Random Seed: 10039
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 41

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
6, 20, 20, 12, 14, 16, 2, 
Random Seed: 10040
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 42

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 1, 4, 19, 14, 10, 
Random Seed: 10041
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 43

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 14, 0, 2, 7, 22, 3, 21, 12, 23, 
Random Seed: 10042
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 44

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
3, 17, 24, 23, 11, 12, 13, 3, 16, 19, 
Random Seed: 10043
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 45

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
22, 0, 6, 12, 11, 
Random Seed: 10044
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 46

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 20, 
Random Seed: 10045
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 47

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 8, 1, 
Random Seed: 10046
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 48

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 20, 12, 
Random Seed: 10047
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 49

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
12, 4, 24, 0, 
Random Seed: 10048
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 50

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 12, 
Random Seed: 10049
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 51

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 0, 9, 23, 11, 14, 
Random Seed: 10050
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 52

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 16, 5, 12, 25, 7, 
Random Seed: 10051
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 53

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 7, 9, 14, 20, 21, 18, 20, 
Random Seed: 10052
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 54

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 15, 0, 24, 20, 11, 24, 
Random Seed: 10053
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 55

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
12, 20, 14, 19, 4, 7, 25, 17, 8, 
Random Seed: 10054
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 56

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
5, 18, 10, 15, 6, 
Random Seed: 10055
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 57

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 1, 8, 15, 25, 25, 17, 25, 20, 
Random Seed: 10056
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 58

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 12, 11, 20, 3, 5, 
Random Seed: 10057
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 59

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
6, 
Random Seed: 10058
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 60

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 
Random Seed: 10059
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 61

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
6, 8, 14, 14, 14, 1, 15, 15, 
Random Seed: 10060
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 62

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 11, 22, 
Random Seed: 10061
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 63

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 15, 9, 13, 0, 3, 16, 7, 
Random Seed: 10062
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 64

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 21, 22, 3, 19, 
Random Seed: 10063
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 65

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 12, 24, 15, 15, 15, 
Random Seed: 10064
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 66

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 23, 13, 18, 15, 20, 18, 6, 3, 
Random Seed: 10065
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 67

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 23, 16, 12, 1, 5, 9, 
Random Seed: 10066
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 68

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 21, 20, 3, 9, 18, 20, 24, 8, 1, 
Random Seed: 10067
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 69

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 12, 22, 18, 8, 16, 24, 14, 24, 
Random Seed: 10068
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 70

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 24, 12, 25, 4, 21, 24, 15, 25, 
Random Seed: 10069
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 71

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
4, 6, 4, 1, 4, 14, 2, 5, 
Random Seed: 10070
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 72

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 18, 23, 3, 8, 23, 19, 8, 6, 18, 
Random Seed: 10071
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 73

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
4, 7, 10, 2, 7, 
Random Seed: 10072
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 74

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
5, 11, 8, 11, 17, 9, 
Random Seed: 10073
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 75

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 23, 25, 19, 
Random Seed: 10074
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 76

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 21, 1, 18, 15, 10, 24, 7, 
Random Seed: 10075
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 77

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 1, 15, 15, 10, 
Random Seed: 10076
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 78

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 3, 3, 1, 20, 14, 19, 1, 1, 16, 
Random Seed: 10077
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 79

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 
Random Seed: 10078
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 80

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
5, 23, 9, 20, 9, 9, 3, 3, 
Random Seed: 10079
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 81

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
6, 4, 8, 16, 21, 3, 6, 0, 
Random Seed: 10080
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 82

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 22, 
Random Seed: 10081
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 83

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 20, 1, 22, 4, 22, 15, 9, 21, 
Random Seed: 10082
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 84

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
4, 7, 11, 9, 23, 
Random Seed: 10083
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 85

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 15, 8, 22, 20, 16, 25, 3, 25, 20, 
Random Seed: 10084
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 86

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 1, 25, 21, 0, 5, 
Random Seed: 10085
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 87

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 15, 16, 22, 
Random Seed: 10086
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 88

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 5, 22, 14, 21, 24, 3, 3, 
Random Seed: 10087
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 89

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 21, 1, 20, 17, 
Random Seed: 10088
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 90

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
12, 6, 24, 9, 6, 5, 3, 23, 21, 19, 
Random Seed: 10089
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 91

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 13, 4, 18, 11, 18, 15, 11, 22, 
Random Seed: 10090
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 92

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 
Random Seed: 10091
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 93

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 11, 
Random Seed: 10092
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 94

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
10, 13, 7, 10, 
Random Seed: 10093
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 95

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 0, 13, 11, 
Random Seed: 10094
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 96

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
5, 
Random Seed: 10095
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 97

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 2, 3, 3, 
Random Seed: 10096
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 98

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 14, 24, 21, 4, 6, 20, 
Random Seed: 10097
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 99

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
22, 2, 
Random Seed: 10098
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 100

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
12, 14, 23, 4, 16, 12, 17, 9, 
Random Seed: 10099
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 101

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 
Random Seed: 10100
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 102

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
22, 11, 10, 14, 1, 12, 4, 0, 7, 10, 
Random Seed: 10101
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 103

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 
Random Seed: 10102
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 104

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
4, 7, 7, 
Random Seed: 10103
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 105

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
4, 24, 12, 16, 
Random Seed: 10104
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 106

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 11, 
Random Seed: 10105
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 107

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 13, 
Random Seed: 10106
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 108

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
3, 25, 
Random Seed: 10107
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 109

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 0, 18, 9, 4, 20, 24, 6, 
Random Seed: 10108
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 110

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 20, 
Random Seed: 10109
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 111

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 15, 13, 
Random Seed: 10110
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 112

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 
Random Seed: 10111
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 113

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 16, 18, 9, 23, 21, 10, 16, 3, 14, 
Random Seed: 10112
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 114

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 21, 17, 22, 2, 19, 3, 18, 
Random Seed: 10113
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 115

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 
Random Seed: 10114
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 116

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 15, 
Random Seed: 10115
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 117

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 15, 
Random Seed: 10116
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 118

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 17, 1, 5, 
Random Seed: 10117
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 119

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 16, 8, 5, 15, 6, 
Random Seed: 10118
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 120

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
10, 17, 
Random Seed: 10119
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 121

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
5, 23, 18, 13, 21, 20, 2, 5, 19, 
Random Seed: 10120
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 122

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 19, 6, 
Random Seed: 10121
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 123

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
12, 
Random Seed: 10122
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 124

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 15, 24, 2, 5, 6, 
Random Seed: 10123
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 125

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 20, 13, 20, 1, 11, 12, 
Random Seed: 10124
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 126

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 
Random Seed: 10125
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 127

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 10, 11, 4, 5, 18, 25, 1, 
Random Seed: 10126
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 128

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 0, 12, 15, 4, 19, 21, 7, 
Random Seed: 10127
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 129

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
3, 3, 9, 4, 16, 21, 20, 24, 6, 15, 
Random Seed: 10128
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 130

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 
Random Seed: 10129
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 131

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
5, 17, 15, 
Random Seed: 10130
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 132

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 0, 23, 3, 15, 2, 22, 12, 
Random Seed: 10131
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 133

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 12, 18, 10, 18, 10, 5, 
Random Seed: 10132
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 134

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 4, 22, 23, 6, 23, 13, 13, 
Random Seed: 10133
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 135

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
22, 11, 19, 22, 9, 22, 13, 13, 
Random Seed: 10134
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 136

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
22, 9, 2, 10, 3, 12, 4, 14, 
Random Seed: 10135
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 137

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 7, 24, 
Random Seed: 10136
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 138

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
6, 21, 22, 20, 9, 1, 
Random Seed: 10137
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 139

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 15, 8, 19, 2, 21, 14, 6, 
Random Seed: 10138
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 140

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 
Random Seed: 10139
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 141

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 7, 
Random Seed: 10140
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 142

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
3, 18, 24, 2, 
Random Seed: 10141
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 143

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
10, 11, 4, 4, 22, 7, 23, 19, 
Random Seed: 10142
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 144

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 0, 16, 22, 16, 22, 15, 16, 7, 
Random Seed: 10143
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 145

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
4, 1, 13, 21, 5, 6, 21, 
Random Seed: 10144
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 146

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
3, 
Random Seed: 10145
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 147

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 0, 
Random Seed: 10146
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 148

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 25, 23, 11, 2, 23, 3, 25, 13, 
Random Seed: 10147
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 149

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
6, 9, 11, 0, 15, 14, 15, 
Random Seed: 10148
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 150

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 5, 6, 21, 8, 2, 
Random Seed: 10149
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 151

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 12, 10, 1, 11, 9, 
Random Seed: 10150
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 152

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
6, 19, 16, 21, 21, 7, 1, 6, 18, 3, 
Random Seed: 10151
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 153

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 7, 4, 18, 13, 10, 16, 
Random Seed: 10152
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 154

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
22, 17, 16, 
Random Seed: 10153
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 155

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 21, 12, 7, 
Random Seed: 10154
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 156

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 1, 17, 
Random Seed: 10155
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 157

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 7, 4, 24, 4, 13, 19, 12, 17, 
Random Seed: 10156
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 158

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
3, 4, 24, 16, 2, 17, 6, 11, 20, 0, 
Random Seed: 10157
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 159

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 21, 4, 8, 23, 22, 9, 
Random Seed: 10158
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 160

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 14, 
Random Seed: 10159
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 161

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 
Random Seed: 10160
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 162

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 23, 7, 23, 3, 8, 15, 5, 25, 
Random Seed: 10161
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 163

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
22, 24, 1, 6, 5, 24, 11, 16, 21, 
Random Seed: 10162
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 164

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 0, 17, 21, 17, 11, 24, 0, 
Random Seed: 10163
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 165

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 3, 17, 2, 13, 9, 10, 
Random Seed: 10164
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 166

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 11, 5, 5, 17, 10, 4, 4, 
Random Seed: 10165
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 167

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 3, 8, 15, 20, 5, 7, 8, 3, 9, 
Random Seed: 10166
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 168

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 7, 17, 13, 23, 2, 23, 12, 9, 2, 
Random Seed: 10167
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 169

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 
Random Seed: 10168
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 170

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 23, 3, 17, 12, 
Random Seed: 10169
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 171

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
4, 1, 
Random Seed: 10170
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 172

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 12, 22, 15, 12, 7, 22, 3, 21, 19, 
Random Seed: 10171
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 173

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
5, 16, 20, 4, 4, 4, 23, 
Random Seed: 10172
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 174

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 9, 8, 6, 18, 10, 12, 21, 
Random Seed: 10173
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 175

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
6, 5, 22, 21, 
Random Seed: 10174
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 176

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 22, 0, 15, 3, 19, 20, 19, 15, 1, 
Random Seed: 10175
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 177

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 6, 
Random Seed: 10176
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 178

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 
Random Seed: 10177
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 179

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 9, 13, 
Random Seed: 10178
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 180

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 12, 8, 10, 9, 25, 18, 3, 22, 
Random Seed: 10179
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 181

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 13, 14, 21, 3, 17, 20, 24, 15, 
Random Seed: 10180
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 182

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 20, 11, 10, 
Random Seed: 10181
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 183

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 12, 23, 13, 0, 5, 0, 
Random Seed: 10182
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 184

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 15, 2, 10, 9, 
Random Seed: 10183
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 185

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 23, 3, 17, 19, 3, 6, 
Random Seed: 10184
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 186

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 18, 2, 2, 25, 24, 1, 13, 21, 16, 
Random Seed: 10185
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 187

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 2, 9, 
Random Seed: 10186
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 188

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 21, 2, 13, 
Random Seed: 10187
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 189

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
12, 0, 18, 8, 3, 25, 6, 22, 
Random Seed: 10188
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 190

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 19, 25, 25, 22, 15, 22, 
Random Seed: 10189
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 191

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 5, 9, 10, 
Random Seed: 10190
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 192

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 10, 4, 11, 7, 
Random Seed: 10191
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 193

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 2, 7, 15, 3, 13, 11, 20, 
Random Seed: 10192
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 194

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 15, 13, 11, 6, 
Random Seed: 10193
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 195

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 10, 4, 22, 22, 20, 24, 18, 6, 4, 
Random Seed: 10194
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 196

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 4, 23, 15, 12, 12, 18, 1, 0, 
Random Seed: 10195
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 197

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
12, 3, 6, 25, 
Random Seed: 10196
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 198

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
10, 16, 25, 23, 20, 21, 19, 
Random Seed: 10197
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 199

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 23, 1, 18, 
Random Seed: 10198
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 200

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 10, 6, 11, 25, 
Random Seed: 10199
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 201

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 15, 3, 13, 18, 9, 14, 11, 21, 
Random Seed: 10200
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 202

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
22, 23, 23, 19, 19, 16, 14, 6, 
Random Seed: 10201
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 203

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 0, 8, 0, 10, 16, 
Random Seed: 10202
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 204

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 25, 10, 7, 5, 25, 2, 14, 13, 13, 
Random Seed: 10203
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 205

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 
Random Seed: 10204
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 206

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 4, 4, 5, 18, 13, 18, 12, 14, 20, 
Random Seed: 10205
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 207

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 14, 3, 18, 6, 2, 5, 14, 7, 
Random Seed: 10206
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 208

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 18, 7, 
Random Seed: 10207
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 209

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 22, 19, 14, 0, 
Random Seed: 10208
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 210

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 13, 14, 
Random Seed: 10209
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 211

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 5, 19, 16, 
Random Seed: 10210
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 212

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
10, 
Random Seed: 10211
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 213

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 
Random Seed: 10212
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 214

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 9, 8, 12, 16, 
Random Seed: 10213
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 215

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 18, 11, 6, 21, 11, 2, 
Random Seed: 10214
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 216

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 
Random Seed: 10215
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 217

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 6, 22, 19, 
Random Seed: 10216
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 218

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
4, 4, 19, 19, 22, 
Random Seed: 10217
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 219

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
5, 13, 
Random Seed: 10218
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 220

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 21, 15, 3, 9, 23, 24, 20, 25, 
Random Seed: 10219
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 221

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 19, 0, 19, 1, 25, 15, 2, 
Random Seed: 10220
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 222

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 14, 14, 5, 17, 4, 12, 6, 5, 10, 
Random Seed: 10221
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 223

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 21, 10, 25, 21, 6, 1, 14, 
Random Seed: 10222
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 224

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 6, 14, 9, 7, 3, 13, 0, 24, 22, 
Random Seed: 10223
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 225

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 8, 19, 14, 17, 0, 
Random Seed: 10224
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 226

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 
Random Seed: 10225
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 227

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 4, 25, 22, 5, 15, 3, 0, 
Random Seed: 10226
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 228

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 7, 18, 18, 21, 19, 16, 19, 10, 5, 
Random Seed: 10227
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 229

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 11, 9, 
Random Seed: 10228
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 230

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 2, 16, 23, 
Random Seed: 10229
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 231

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 
Random Seed: 10230
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 232

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 19, 3, 12, 5, 17, 19, 25, 11, 16, 
Random Seed: 10231
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 233

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
10, 4, 9, 
Random Seed: 10232
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 234

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
10, 18, 10, 11, 5, 4, 15, 23, 
Random Seed: 10233
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 235

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 2, 
Random Seed: 10234
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 236

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 21, 3, 
Random Seed: 10235
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 237

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 
Random Seed: 10236
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 238

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 18, 22, 12, 
Random Seed: 10237
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 239

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 11, 25, 
Random Seed: 10238
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 240

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
10, 19, 12, 14, 8, 10, 
Random Seed: 10239
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 241

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
5, 23, 19, 6, 15, 
Random Seed: 10240
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 242

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 16, 8, 24, 18, 17, 18, 16, 5, 22, 
Random Seed: 10241
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 243

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 16, 
Random Seed: 10242
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 244

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 6, 3, 16, 17, 13, 11, 
Random Seed: 10243
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 245

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 
Random Seed: 10244
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 246

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 21, 12, 22, 13, 20, 20, 5, 13, 
Random Seed: 10245
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 247

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 11, 14, 24, 21, 6, 12, 11, 8, 20, 
Random Seed: 10246
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 248

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 3, 11, 24, 0, 
Random Seed: 10247
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 249

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 20, 0, 14, 18, 13, 
Random Seed: 10248
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 250

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 0, 2, 18, 
Random Seed: 10249
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 251

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 20, 12, 14, 
Random Seed: 10250
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 252

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
22, 2, 16, 
Random Seed: 10251
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 253

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
22, 10, 16, 22, 6, 23, 24, 0, 25, 
Random Seed: 10252
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 254

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 0, 8, 10, 0, 12, 4, 24, 
Random Seed: 10253
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 255

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 16, 
Random Seed: 10254
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 256

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 0, 6, 6, 23, 
Random Seed: 10255
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 257

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 17, 24, 13, 16, 23, 16, 
Random Seed: 10256
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 258

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 5, 14, 
Random Seed: 10257
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 259

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 7, 21, 14, 10, 8, 8, 0, 
Random Seed: 10258
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 260

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 12, 21, 
Random Seed: 10259
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 261

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 1, 
Random Seed: 10260
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 262

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 
Random Seed: 10261
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 263

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 24, 23, 13, 9, 2, 
Random Seed: 10262
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 264

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 17, 13, 12, 8, 23, 23, 
Random Seed: 10263
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 265

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 7, 14, 21, 4, 13, 6, 
Random Seed: 10264
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 266

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 16, 17, 8, 23, 16, 6, 22, 
Random Seed: 10265
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 267

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 6, 23, 17, 23, 10, 5, 7, 
Random Seed: 10266
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 268

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 8, 13, 7, 22, 8, 11, 
Random Seed: 10267
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 269

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
12, 1, 15, 4, 18, 25, 3, 8, 6, 
Random Seed: 10268
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 270

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 23, 19, 25, 16, 18, 
Random Seed: 10269
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 271

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 
Random Seed: 10270
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 272

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 1, 12, 9, 0, 22, 22, 
Random Seed: 10271
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 273

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 13, 4, 15, 5, 3, 
Random Seed: 10272
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 274

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 20, 
Random Seed: 10273
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 275

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 23, 12, 10, 15, 21, 6, 17, 17, 6, 
Random Seed: 10274
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 276

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 4, 20, 17, 0, 6, 4, 
Random Seed: 10275
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 277

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
10, 2, 0, 15, 22, 15, 1, 16, 17, 14, 
Random Seed: 10276
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 278

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 22, 8, 
Random Seed: 10277
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 279

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 16, 10, 21, 11, 5, 1, 7, 22, 
Random Seed: 10278
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 280

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 15, 9, 12, 17, 
Random Seed: 10279
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 281

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 1, 4, 6, 21, 18, 20, 11, 20, 16, 
Random Seed: 10280
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 282

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 21, 10, 4, 18, 
Random Seed: 10281
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 283

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 3, 7, 21, 19, 9, 12, 4, 
Random Seed: 10282
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 284

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 1, 21, 20, 5, 3, 
Random Seed: 10283
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 285

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 2, 22, 
Random Seed: 10284
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 286

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 9, 19, 1, 15, 11, 24, 
Random Seed: 10285
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 287

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
3, 8, 2, 22, 18, 
Random Seed: 10286
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 288

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 22, 19, 16, 17, 15, 
Random Seed: 10287
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 289

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
4, 
Random Seed: 10288
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 290

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 22, 6, 5, 
Random Seed: 10289
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 291

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 16, 4, 11, 14, 5, 
Random Seed: 10290
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 292

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 19, 16, 8, 10, 19, 23, 
Random Seed: 10291
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 293

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 25, 4, 16, 21, 11, 
Random Seed: 10292
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 294

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 
Random Seed: 10293
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 295

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 1, 9, 1, 17, 15, 12, 8, 23, 
Random Seed: 10294
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 296

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 1, 18, 19, 13, 14, 18, 21, 3, 
Random Seed: 10295
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 297

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 2, 15, 22, 18, 
Random Seed: 10296
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 298

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 23, 17, 
Random Seed: 10297
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 299

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 4, 25, 8, 14, 22, 14, 
Random Seed: 10298
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 300

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 8, 4, 2, 22, 23, 23, 1, 
Random Seed: 10299
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 301

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 12, 
Random Seed: 10300
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 302

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
6, 13, 2, 15, 12, 21, 0, 20, 16, 6, 
Random Seed: 10301
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 303

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 18, 14, 10, 1, 5, 20, 6, 9, 
Random Seed: 10302
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 304

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 20, 16, 1, 9, 2, 11, 21, 
Random Seed: 10303
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 305

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 0, 12, 
Random Seed: 10304
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 306

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 12, 8, 2, 13, 4, 22, 3, 14, 
Random Seed: 10305
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 307

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 5, 20, 4, 12, 3, 0, 3, 
Random Seed: 10306
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 308

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 20, 5, 18, 20, 4, 21, 9, 0, 
Random Seed: 10307
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 309

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 8, 21, 2, 
Random Seed: 10308
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 310

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 5, 17, 16, 16, 22, 13, 20, 
Random Seed: 10309
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 311

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 14, 24, 4, 21, 18, 11, 
Random Seed: 10310
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 312

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 11, 24, 18, 10, 17, 
Random Seed: 10311
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 313

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 
Random Seed: 10312
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 314

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
6, 18, 14, 23, 
Random Seed: 10313
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 315

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 24, 24, 
Random Seed: 10314
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 316

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 19, 14, 25, 16, 7, 12, 6, 24, 
Random Seed: 10315
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 317

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 24, 4, 15, 5, 0, 4, 18, 9, 11, 
Random Seed: 10316
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 318

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 21, 3, 4, 
Random Seed: 10317
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 319

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 11, 24, 6, 0, 25, 23, 9, 
Random Seed: 10318
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 320

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 17, 23, 7, 17, 3, 24, 24, 3, 3, 
Random Seed: 10319
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 321

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 3, 
Random Seed: 10320
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 322

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 18, 7, 22, 23, 
Random Seed: 10321
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 323

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 25, 9, 24, 22, 20, 
Random Seed: 10322
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 324

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
5, 5, 0, 12, 23, 3, 13, 23, 
Random Seed: 10323
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 325

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 24, 8, 17, 12, 
Random Seed: 10324
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 326

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
4, 17, 13, 4, 10, 23, 
Random Seed: 10325
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 327

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 2, 9, 5, 16, 10, 
Random Seed: 10326
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 328

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 23, 20, 16, 12, 18, 
Random Seed: 10327
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 329

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 
Random Seed: 10328
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 330

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 10, 22, 
Random Seed: 10329
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 331

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 8, 22, 24, 5, 0, 11, 15, 4, 
Random Seed: 10330
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 332

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 6, 5, 17, 19, 4, 14, 
Random Seed: 10331
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 333

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 
Random Seed: 10332
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 334

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 13, 8, 
Random Seed: 10333
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 335

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
4, 11, 15, 18, 19, 14, 18, 0, 14, 3, 
Random Seed: 10334
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 336

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 10, 14, 6, 17, 5, 1, 23, 19, 
Random Seed: 10335
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 337

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
3, 1, 11, 19, 16, 19, 
Random Seed: 10336
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 338

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 24, 
Random Seed: 10337
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 339

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 20, 9, 20, 8, 14, 10, 
Random Seed: 10338
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 340

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
22, 18, 22, 16, 24, 
Random Seed: 10339
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 341

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 13, 3, 23, 16, 16, 18, 6, 
Random Seed: 10340
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 342

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 8, 7, 1, 0, 0, 
Random Seed: 10341
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 343

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 6, 0, 6, 11, 14, 3, 3, 
Random Seed: 10342
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 344

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
3, 9, 8, 25, 24, 13, 24, 14, 
Random Seed: 10343
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 345

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 14, 25, 17, 24, 8, 19, 
Random Seed: 10344
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 346

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 8, 5, 23, 8, 12, 
Random Seed: 10345
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 347

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 14, 10, 10, 19, 21, 20, 18, 20, 
Random Seed: 10346
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 348

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 14, 9, 5, 2, 10, 24, 
Random Seed: 10347
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 349

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 24, 4, 10, 8, 9, 10, 18, 21, 20, 
Random Seed: 10348
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 350

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
10, 
Random Seed: 10349
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 351

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
4, 0, 21, 22, 20, 
Random Seed: 10350
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 352

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 19, 0, 9, 23, 10, 
Random Seed: 10351
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 353

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
3, 1, 23, 9, 
Random Seed: 10352
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 354

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 22, 2, 16, 16, 23, 5, 1, 1, 
Random Seed: 10353
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 355

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 0, 3, 21, 5, 20, 0, 0, 
Random Seed: 10354
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 356

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 5, 17, 22, 10, 21, 20, 20, 
Random Seed: 10355
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 357

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 3, 8, 5, 21, 5, 10, 
Random Seed: 10356
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 358

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 5, 8, 20, 11, 4, 
Random Seed: 10357
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 359

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
6, 0, 0, 15, 
Random Seed: 10358
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 360

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 22, 19, 4, 
Random Seed: 10359
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 361

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 22, 4, 16, 5, 12, 13, 12, 24, 12, 
Random Seed: 10360
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 362

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 4, 11, 4, 8, 
Random Seed: 10361
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 363

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 
Random Seed: 10362
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 364

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
5, 15, 21, 14, 12, 16, 20, 
Random Seed: 10363
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 365

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 3, 12, 
Random Seed: 10364
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 366

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 
Random Seed: 10365
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 367

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 25, 16, 
Random Seed: 10366
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 368

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
22, 0, 23, 6, 13, 
Random Seed: 10367
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 369

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
3, 23, 1, 20, 20, 
Random Seed: 10368
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 370

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
10, 12, 13, 16, 22, 
Random Seed: 10369
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 371

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 0, 3, 8, 22, 0, 
Random Seed: 10370
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 372

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 0, 10, 16, 25, 16, 6, 
Random Seed: 10371
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 373

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 7, 16, 5, 3, 8, 12, 
Random Seed: 10372
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 374

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 
Random Seed: 10373
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 375

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 11, 14, 17, 14, 
Random Seed: 10374
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 376

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 6, 4, 7, 8, 14, 23, 7, 
Random Seed: 10375
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 377

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 21, 
Random Seed: 10376
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 378

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 22, 3, 19, 10, 18, 18, 11, 24, 
Random Seed: 10377
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 379

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 0, 19, 
Random Seed: 10378
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 380

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
6, 15, 3, 12, 24, 11, 3, 23, 
Random Seed: 10379
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 381

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
3, 
Random Seed: 10380
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 382

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 15, 17, 17, 
Random Seed: 10381
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 383

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 
Random Seed: 10382
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 384

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
12, 11, 17, 
Random Seed: 10383
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 385

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 7, 22, 14, 16, 13, 19, 
Random Seed: 10384
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 386

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
6, 7, 
Random Seed: 10385
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 387

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 
Random Seed: 10386
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 388

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 7, 6, 18, 1, 0, 4, 2, 15, 11, 
Random Seed: 10387
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 389

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 3, 24, 21, 13, 23, 12, 3, 12, 
Random Seed: 10388
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 390

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 14, 15, 11, 16, 8, 
Random Seed: 10389
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 391

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 
Random Seed: 10390
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 392

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 9, 19, 8, 12, 8, 19, 
Random Seed: 10391
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 393

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 8, 10, 18, 23, 
Random Seed: 10392
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 394

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 22, 12, 10, 22, 0, 1, 
Random Seed: 10393
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 395

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 8, 4, 
Random Seed: 10394
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 396

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 22, 2, 16, 4, 
Random Seed: 10395
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 397

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 19, 10, 24, 3, 22, 17, 1, 6, 
Random Seed: 10396
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 398

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 9, 15, 0, 11, 18, 7, 6, 
Random Seed: 10397
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 399

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
10, 25, 7, 7, 21, 11, 
Random Seed: 10398
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 400

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 23, 3, 22, 9, 2, 2, 6, 19, 
Random Seed: 10399
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 401

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 
Random Seed: 10400
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 402

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 24, 18, 15, 16, 25, 21, 20, 16, 
Random Seed: 10401
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 403

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 15, 19, 11, 15, 21, 14, 14, 
Random Seed: 10402
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 404

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 0, 15, 6, 
Random Seed: 10403
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 405

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
22, 
Random Seed: 10404
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 406

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 
Random Seed: 10405
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 407

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
6, 
Random Seed: 10406
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 408

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
5, 5, 
Random Seed: 10407
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 409

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 9, 24, 4, 4, 11, 19, 25, 0, 8, 
Random Seed: 10408
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 410

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 2, 2, 14, 25, 22, 
Random Seed: 10409
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 411

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
22, 24, 7, 25, 6, 15, 16, 11, 22, 5, 
Random Seed: 10410
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 412

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 8, 15, 20, 20, 9, 21, 22, 
Random Seed: 10411
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 413

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 1, 25, 13, 17, 24, 9, 3, 
Random Seed: 10412
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 414

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 21, 6, 7, 12, 24, 20, 8, 
Random Seed: 10413
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 415

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 24, 16, 9, 19, 
Random Seed: 10414
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 416

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 8, 13, 
Random Seed: 10415
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 417

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 12, 8, 7, 13, 19, 10, 3, 
Random Seed: 10416
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 418

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 11, 22, 13, 12, 18, 23, 18, 
Random Seed: 10417
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 419

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 16, 4, 11, 
Random Seed: 10418
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 420

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 13, 13, 15, 9, 
Random Seed: 10419
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 421

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 12, 17, 13, 24, 
Random Seed: 10420
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 422

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 
Random Seed: 10421
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 423

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 9, 
Random Seed: 10422
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 424

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 7, 3, 4, 0, 21, 10, 13, 
Random Seed: 10423
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 425

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 14, 23, 7, 23, 2, 11, 16, 16, 
Random Seed: 10424
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 426

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 0, 21, 3, 22, 25, 14, 8, 
Random Seed: 10425
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 427

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 22, 22, 23, 24, 17, 
Random Seed: 10426
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 428

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 17, 
Random Seed: 10427
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 429

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 10, 3, 20, 21, 
Random Seed: 10428
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 430

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 25, 2, 25, 20, 5, 21, 19, 21, 
Random Seed: 10429
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 431

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 24, 6, 
Random Seed: 10430
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 432

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
4, 3, 4, 17, 21, 21, 
Random Seed: 10431
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 433

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 4, 6, 7, 1, 2, 19, 2, 
Random Seed: 10432
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 434

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
3, 23, 4, 25, 17, 25, 
Random Seed: 10433
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 435

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 5, 7, 25, 
Random Seed: 10434
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 436

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
5, 5, 
Random Seed: 10435
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 437

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 
Random Seed: 10436
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 438

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 5, 12, 25, 9, 16, 19, 11, 17, 
Random Seed: 10437
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 439

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 23, 16, 8, 24, 22, 9, 14, 1, 18, 
Random Seed: 10438
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 440

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
5, 20, 9, 11, 23, 
Random Seed: 10439
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 441

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
3, 3, 20, 17, 3, 3, 8, 
Random Seed: 10440
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 442

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 16, 5, 18, 15, 21, 2, 14, 20, 
Random Seed: 10441
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 443

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 3, 17, 25, 10, 12, 10, 
Random Seed: 10442
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 444

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 8, 16, 3, 2, 7, 6, 7, 
Random Seed: 10443
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 445

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 19, 25, 3, 13, 14, 1, 
Random Seed: 10444
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 446

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 3, 4, 
Random Seed: 10445
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 447

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 18, 19, 12, 
Random Seed: 10446
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 448

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 2, 
Random Seed: 10447
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 449

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 4, 22, 16, 12, 14, 23, 10, 9, 22, 
Random Seed: 10448
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 450

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
12, 16, 14, 
Random Seed: 10449
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 451

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 23, 4, 3, 21, 24, 
Random Seed: 10450
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 452

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 14, 6, 7, 14, 19, 15, 20, 
Random Seed: 10451
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 453

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
6, 8, 4, 18, 
Random Seed: 10452
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 454

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
10, 
Random Seed: 10453
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 455

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 8, 6, 14, 2, 5, 20, 5, 1, 20, 
Random Seed: 10454
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 456

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 17, 17, 5, 5, 12, 22, 
Random Seed: 10455
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 457

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
4, 
Random Seed: 10456
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 458

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 
Random Seed: 10457
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 459

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 13, 25, 2, 15, 7, 10, 5, 
Random Seed: 10458
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 460

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 16, 
Random Seed: 10459
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 461

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 3, 22, 11, 20, 3, 
Random Seed: 10460
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 462

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 20, 13, 6, 5, 25, 14, 
Random Seed: 10461
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 463

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 23, 8, 5, 14, 15, 17, 22, 2, 9, 
Random Seed: 10462
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 464

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
3, 23, 13, 6, 19, 0, 2, 
Random Seed: 10463
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 465

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 24, 15, 22, 4, 20, 23, 21, 
Random Seed: 10464
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 466

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 1, 14, 6, 18, 
Random Seed: 10465
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 467

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 7, 8, 15, 1, 14, 12, 15, 20, 5, 
Random Seed: 10466
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 468

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 10, 
Random Seed: 10467
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 469

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 6, 7, 20, 5, 2, 25, 
Random Seed: 10468
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 470

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 2, 6, 22, 8, 
Random Seed: 10469
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 471

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 16, 2, 19, 4, 16, 10, 
Random Seed: 10470
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 472

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 
Random Seed: 10471
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 473

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
12, 
Random Seed: 10472
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 474

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 16, 11, 8, 21, 13, 9, 
Random Seed: 10473
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 475

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 
Random Seed: 10474
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 476

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
10, 20, 2, 
Random Seed: 10475
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 477

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 3, 6, 25, 19, 16, 0, 17, 18, 0, 
Random Seed: 10476
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 478

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
10, 
Random Seed: 10477
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 479

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 7, 4, 
Random Seed: 10478
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 480

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 7, 
Random Seed: 10479
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 481

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 
Random Seed: 10480
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 482

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 14, 15, 
Random Seed: 10481
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 483

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 11, 10, 14, 
Random Seed: 10482
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 484

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
5, 24, 13, 25, 
Random Seed: 10483
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 485

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 0, 0, 2, 4, 0, 25, 
Random Seed: 10484
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 486

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
12, 24, 3, 24, 15, 
Random Seed: 10485
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 487

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
6, 24, 23, 
Random Seed: 10486
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 488

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 15, 15, 20, 
Random Seed: 10487
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 489

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
10, 19, 
Random Seed: 10488
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 490

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 19, 12, 
Random Seed: 10489
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 491

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 20, 20, 21, 9, 21, 0, 
Random Seed: 10490
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 492

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 
Random Seed: 10491
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 493

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 
Random Seed: 10492
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 494

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 25, 10, 24, 22, 7, 12, 6, 
Random Seed: 10493
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 495

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 21, 3, 2, 16, 3, 
Random Seed: 10494
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 496

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 12, 23, 22, 13, 4, 8, 10, 25, 
Random Seed: 10495
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 497

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 0, 13, 
Random Seed: 10496
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 498

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 15, 22, 25, 
Random Seed: 10497
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 499

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 13, 21, 10, 15, 11, 15, 
Random Seed: 10498
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 500

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 19, 23, 13, 6, 4, 23, 17, 5, 
Random Seed: 10499
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 501

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 3, 12, 20, 18, 25, 11, 14, 1, 8, 
Random Seed: 10500
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 502

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 10, 22, 10, 23, 11, 17, 23, 1, 
Random Seed: 10501
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 503

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 19, 
Random Seed: 10502
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 504

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
12, 4, 16, 11, 5, 19, 23, 
Random Seed: 10503
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 505

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 10, 1, 2, 18, 16, 12, 13, 
Random Seed: 10504
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 506

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 25, 21, 
Random Seed: 10505
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 507

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 4, 20, 15, 24, 21, 
Random Seed: 10506
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 508

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 19, 22, 7, 15, 
Random Seed: 10507
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 509

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 
Random Seed: 10508
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 510

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
4, 24, 
Random Seed: 10509
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 511

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
10, 1, 24, 20, 1, 23, 17, 20, 22, 
Random Seed: 10510
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 512

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 7, 23, 15, 12, 9, 17, 7, 
Random Seed: 10511
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 513

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
22, 
Random Seed: 10512
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 514

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 25, 1, 
Random Seed: 10513
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 515

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 
Random Seed: 10514
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 516

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 1, 7, 19, 0, 0, 15, 25, 18, 
Random Seed: 10515
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 517

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 13, 9, 15, 
Random Seed: 10516
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 518

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 
Random Seed: 10517
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 519

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 
Random Seed: 10518
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 520

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
22, 9, 16, 3, 9, 
Random Seed: 10519
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 521

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 
Random Seed: 10520
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 522

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 20, 10, 5, 9, 9, 25, 0, 2, 1, 
Random Seed: 10521
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 523

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 14, 15, 15, 
Random Seed: 10522
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 524

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 4, 8, 9, 15, 24, 
Random Seed: 10523
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 525

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
5, 21, 20, 4, 5, 
Random Seed: 10524
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 526

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 3, 9, 0, 3, 
Random Seed: 10525
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 527

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
6, 1, 18, 24, 15, 9, 14, 
Random Seed: 10526
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 528

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 17, 13, 10, 
Random Seed: 10527
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 529

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 7, 18, 21, 1, 22, 2, 25, 
Random Seed: 10528
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 530

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
3, 5, 21, 8, 17, 1, 14, 18, 
Random Seed: 10529
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 531

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 5, 2, 24, 12, 3, 17, 25, 16, 
Random Seed: 10530
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 532

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 6, 4, 
Random Seed: 10531
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 533

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 14, 9, 24, 9, 14, 
Random Seed: 10532
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 534

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 22, 8, 
Random Seed: 10533
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 535

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
3, 0, 2, 
Random Seed: 10534
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 536

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 22, 8, 19, 23, 24, 18, 9, 16, 25, 
Random Seed: 10535
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 537

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 15, 19, 19, 13, 2, 9, 
Random Seed: 10536
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 538

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 17, 
Random Seed: 10537
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 539

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
10, 22, 22, 14, 9, 1, 16, 7, 9, 9, 
Random Seed: 10538
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 540

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 14, 0, 
Random Seed: 10539
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 541

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
4, 
Random Seed: 10540
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 542

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 8, 7, 2, 18, 0, 
Random Seed: 10541
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 543

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 6, 23, 3, 2, 19, 19, 13, 
Random Seed: 10542
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 544

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 5, 18, 2, 17, 22, 16, 19, 
Random Seed: 10543
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 545

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 
Random Seed: 10544
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 546

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 22, 21, 1, 16, 23, 14, 
Random Seed: 10545
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 547

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 14, 22, 
Random Seed: 10546
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 548

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 12, 3, 25, 9, 11, 17, 11, 
Random Seed: 10547
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 549

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 24, 14, 24, 22, 1, 12, 21, 25, 7, 
Random Seed: 10548
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 550

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
4, 13, 7, 21, 8, 21, 19, 7, 
Random Seed: 10549
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 551

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 10, 7, 5, 23, 
Random Seed: 10550
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 552

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 16, 20, 24, 4, 19, 22, 8, 5, 
Random Seed: 10551
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 553

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 18, 
Random Seed: 10552
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 554

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
6, 6, 14, 16, 1, 7, 
Random Seed: 10553
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 555

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 18, 21, 25, 25, 18, 2, 
Random Seed: 10554
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 556

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 12, 18, 25, 5, 
Random Seed: 10555
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 557

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 12, 19, 0, 
Random Seed: 10556
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 558

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 12, 24, 10, 2, 1, 17, 
Random Seed: 10557
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 559

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 20, 7, 11, 19, 25, 13, 11, 20, 
Random Seed: 10558
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 560

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 10, 5, 
Random Seed: 10559
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 561

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 19, 14, 20, 25, 6, 16, 12, 4, 0, 
Random Seed: 10560
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 562

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 
Random Seed: 10561
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 563

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
3, 
Random Seed: 10562
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 564

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 7, 24, 3, 19, 20, 14, 19, 9, 24, 
Random Seed: 10563
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 565

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 19, 11, 10, 13, 12, 16, 3, 24, 
Random Seed: 10564
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 566

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 1, 23, 5, 
Random Seed: 10565
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 567

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 20, 16, 0, 18, 19, 21, 
Random Seed: 10566
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 568

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 0, 7, 15, 18, 3, 8, 5, 
Random Seed: 10567
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 569

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 5, 1, 16, 
Random Seed: 10568
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 570

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 3, 5, 14, 24, 7, 7, 18, 23, 
Random Seed: 10569
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 571

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 3, 2, 2, 19, 2, 12, 8, 
Random Seed: 10570
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 572

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 25, 4, 16, 18, 9, 
Random Seed: 10571
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 573

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
12, 25, 17, 15, 7, 5, 14, 
Random Seed: 10572
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 574

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 14, 24, 21, 9, 3, 23, 13, 22, 
Random Seed: 10573
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 575

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 21, 16, 25, 22, 20, 15, 17, 
Random Seed: 10574
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 576

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 18, 8, 19, 9, 
Random Seed: 10575
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 577

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 5, 17, 
Random Seed: 10576
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 578

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 5, 4, 18, 5, 18, 
Random Seed: 10577
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 579

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 23, 4, 
Random Seed: 10578
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 580

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 6, 12, 19, 12, 21, 21, 6, 
Random Seed: 10579
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 581

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 22, 18, 15, 3, 
Random Seed: 10580
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 582

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 0, 3, 3, 20, 10, 21, 11, 16, 15, 
Random Seed: 10581
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 583

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 9, 25, 7, 22, 
Random Seed: 10582
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 584

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 15, 2, 0, 5, 18, 24, 0, 8, 
Random Seed: 10583
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 585

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 0, 
Random Seed: 10584
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 586

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
4, 6, 22, 1, 19, 15, 16, 
Random Seed: 10585
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 587

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 13, 
Random Seed: 10586
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 588

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 3, 23, 6, 20, 25, 6, 2, 18, 4, 
Random Seed: 10587
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 589

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 13, 11, 8, 25, 24, 14, 6, 22, 
Random Seed: 10588
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 590

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 8, 5, 23, 2, 19, 7, 3, 
Random Seed: 10589
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 591

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 13, 9, 25, 19, 
Random Seed: 10590
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 592

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 13, 21, 8, 0, 9, 
Random Seed: 10591
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 593

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 7, 10, 3, 23, 11, 17, 
Random Seed: 10592
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 594

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 7, 12, 23, 
Random Seed: 10593
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 595

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
12, 12, 7, 21, 14, 
Random Seed: 10594
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 596

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 3, 21, 
Random Seed: 10595
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 597

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 14, 
Random Seed: 10596
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 598

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 12, 
Random Seed: 10597
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 599

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 23, 21, 17, 14, 9, 0, 2, 9, 
Random Seed: 10598
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 600

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 1, 4, 
Random Seed: 10599
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 601

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 2, 1, 12, 25, 6, 25, 22, 
Random Seed: 10600
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 602

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 21, 19, 11, 25, 4, 8, 21, 23, 
Random Seed: 10601
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 603

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 
Random Seed: 10602
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 604

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 25, 14, 18, 3, 8, 
Random Seed: 10603
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 605

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
12, 11, 22, 11, 19, 23, 8, 
Random Seed: 10604
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 606

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 14, 24, 19, 13, 5, 4, 8, 4, 4, 
Random Seed: 10605
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 607

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 6, 21, 6, 21, 16, 9, 
Random Seed: 10606
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 608

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 18, 13, 19, 5, 8, 16, 
Random Seed: 10607
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 609

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 23, 
Random Seed: 10608
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 610

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 2, 25, 25, 13, 5, 3, 
Random Seed: 10609
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 611

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
10, 
Random Seed: 10610
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 612

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 7, 
Random Seed: 10611
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 613

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 25, 24, 7, 
Random Seed: 10612
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 614

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
12, 22, 9, 2, 23, 5, 1, 14, 
Random Seed: 10613
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 615

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 2, 21, 4, 7, 
Random Seed: 10614
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 616

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 
Random Seed: 10615
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 617

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
3, 
Random Seed: 10616
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 618

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 9, 15, 4, 8, 24, 18, 1, 12, 
Random Seed: 10617
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 619

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 16, 18, 18, 5, 21, 14, 24, 
Random Seed: 10618
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 620

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
4, 6, 11, 
Random Seed: 10619
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 621

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 6, 5, 6, 8, 7, 16, 25, 13, 
Random Seed: 10620
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 622

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
6, 3, 12, 25, 16, 2, 
Random Seed: 10621
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 623

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 20, 3, 9, 20, 
Random Seed: 10622
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 624

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 9, 8, 12, 
Random Seed: 10623
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 625

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 16, 15, 3, 25, 7, 5, 13, 7, 
Random Seed: 10624
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 626

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
10, 18, 20, 3, 21, 9, 11, 17, 
Random Seed: 10625
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 627

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 0, 
Random Seed: 10626
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 628

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 4, 7, 11, 17, 16, 6, 9, 7, 12, 
Random Seed: 10627
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 629

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 24, 25, 25, 19, 9, 18, 
Random Seed: 10628
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 630

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 24, 0, 6, 4, 19, 9, 
Random Seed: 10629
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 631

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 4, 23, 
Random Seed: 10630
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 632

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 8, 
Random Seed: 10631
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 633

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 14, 9, 7, 9, 7, 6, 
Random Seed: 10632
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 634

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 2, 15, 6, 17, 13, 8, 24, 18, 
Random Seed: 10633
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 635

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 19, 
Random Seed: 10634
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 636

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 7, 22, 7, 
Random Seed: 10635
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 637

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
5, 8, 14, 14, 15, 23, 23, 21, 6, 
Random Seed: 10636
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 638

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 14, 21, 0, 
Random Seed: 10637
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 639

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 19, 6, 9, 
Random Seed: 10638
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 640

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 25, 
Random Seed: 10639
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 641

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
22, 25, 25, 22, 4, 
Random Seed: 10640
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 642

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 23, 
Random Seed: 10641
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 643

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 16, 
Random Seed: 10642
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 644

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 
Random Seed: 10643
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 645

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 7, 8, 3, 3, 16, 12, 23, 
Random Seed: 10644
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 646

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 9, 22, 19, 8, 
Random Seed: 10645
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 647

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 6, 2, 10, 3, 11, 
Random Seed: 10646
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 648

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
3, 19, 10, 
Random Seed: 10647
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 649

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 5, 7, 25, 8, 10, 
Random Seed: 10648
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 650

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 
Random Seed: 10649
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 651

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
6, 16, 5, 1, 1, 1, 19, 17, 
Random Seed: 10650
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 652

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 13, 8, 5, 13, 12, 1, 0, 
Random Seed: 10651
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 653

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 24, 9, 17, 6, 21, 6, 
Random Seed: 10652
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 654

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 12, 11, 8, 17, 13, 
Random Seed: 10653
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 655

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
6, 0, 4, 3, 4, 19, 14, 10, 9, 2, 
Random Seed: 10654
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 656

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 13, 0, 16, 25, 17, 25, 20, 
Random Seed: 10655
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 657

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 15, 16, 
Random Seed: 10656
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 658

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 2, 
Random Seed: 10657
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 659

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
10, 11, 11, 13, 15, 4, 3, 
Random Seed: 10658
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 660

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
5, 14, 24, 24, 2, 25, 16, 3, 18, 15, 
Random Seed: 10659
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 661

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 1, 10, 9, 16, 9, 19, 
Random Seed: 10660
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 662

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 2, 5, 10, 17, 
Random Seed: 10661
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 663

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 24, 
Random Seed: 10662
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 664

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
12, 5, 0, 
Random Seed: 10663
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 665

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 19, 24, 8, 19, 19, 4, 
Random Seed: 10664
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 666

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 10, 12, 6, 4, 6, 6, 8, 
Random Seed: 10665
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 667

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 10, 9, 24, 10, 18, 1, 24, 23, 
Random Seed: 10666
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 668

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
5, 22, 
Random Seed: 10667
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 669

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 5, 24, 11, 25, 1, 0, 11, 16, 9, 
Random Seed: 10668
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 670

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 
Random Seed: 10669
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 671

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 25, 24, 
Random Seed: 10670
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 672

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
10, 13, 24, 8, 12, 4, 25, 17, 0, 12, 
Random Seed: 10671
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 673

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 23, 22, 19, 0, 23, 4, 18, 6, 20, 
Random Seed: 10672
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 674

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 5, 
Random Seed: 10673
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 675

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
3, 5, 18, 15, 18, 
Random Seed: 10674
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 676

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
6, 22, 25, 25, 25, 11, 24, 10, 4, 21, 
Random Seed: 10675
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 677

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 6, 4, 16, 12, 0, 7, 11, 
Random Seed: 10676
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 678

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 
Random Seed: 10677
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 679

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 8, 
Random Seed: 10678
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 680

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 5, 2, 25, 
Random Seed: 10679
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 681

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 19, 1, 10, 0, 24, 
Random Seed: 10680
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 682

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
22, 25, 3, 14, 
Random Seed: 10681
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 683

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 0, 25, 9, 22, 15, 2, 25, 23, 10, 
Random Seed: 10682
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 684

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 0, 
Random Seed: 10683
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 685

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
4, 
Random Seed: 10684
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 686

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 13, 21, 6, 6, 19, 4, 8, 
Random Seed: 10685
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 687

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 2, 15, 22, 3, 
Random Seed: 10686
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 688

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 4, 21, 17, 16, 17, 18, 
Random Seed: 10687
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 689

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 9, 22, 23, 5, 5, 10, 0, 11, 
Random Seed: 10688
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 690

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 1, 20, 11, 
Random Seed: 10689
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 691

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 20, 3, 
Random Seed: 10690
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 692

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 6, 11, 14, 22, 3, 6, 6, 23, 
Random Seed: 10691
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 693

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 25, 
Random Seed: 10692
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 694

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 23, 14, 6, 20, 5, 7, 14, 19, 
Random Seed: 10693
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 695

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 4, 17, 24, 21, 
Random Seed: 10694
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 696

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 2, 1, 13, 11, 9, 10, 14, 0, 
Random Seed: 10695
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 697

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 8, 1, 22, 22, 7, 
Random Seed: 10696
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 698

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 7, 22, 25, 
Random Seed: 10697
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 699

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
5, 
Random Seed: 10698
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 700

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 3, 20, 9, 8, 23, 24, 
Random Seed: 10699
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 701

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 9, 9, 16, 25, 
Random Seed: 10700
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 702

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 
Random Seed: 10701
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 703

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 22, 2, 
Random Seed: 10702
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 704

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 3, 3, 16, 9, 20, 8, 9, 25, 3, 
Random Seed: 10703
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 705

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 19, 2, 11, 4, 12, 22, 22, 
Random Seed: 10704
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 706

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 13, 10, 21, 22, 
Random Seed: 10705
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 707

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 14, 24, 2, 
Random Seed: 10706
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 708

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 13, 25, 23, 14, 4, 19, 24, 8, 
Random Seed: 10707
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 709

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 18, 14, 17, 17, 1, 21, 
Random Seed: 10708
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 710

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
5, 
Random Seed: 10709
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 711

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 11, 16, 6, 11, 20, 25, 3, 6, 14, 
Random Seed: 10710
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 712

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 10, 0, 0, 19, 15, 3, 14, 7, 19, 
Random Seed: 10711
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 713

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 
Random Seed: 10712
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 714

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 
Random Seed: 10713
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 715

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
4, 1, 15, 20, 7, 
Random Seed: 10714
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 716

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
6, 5, 23, 22, 10, 2, 
Random Seed: 10715
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 717

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 1, 13, 17, 6, 4, 1, 1, 12, 
Random Seed: 10716
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 718

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 
Random Seed: 10717
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 719

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 
Random Seed: 10718
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 720

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
3, 13, 13, 10, 15, 4, 18, 20, 1, 
Random Seed: 10719
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 721

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
3, 
Random Seed: 10720
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 722

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 20, 
Random Seed: 10721
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 723

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 20, 4, 3, 
Random Seed: 10722
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 724

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 24, 3, 18, 
Random Seed: 10723
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 725

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
12, 4, 14, 1, 
Random Seed: 10724
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 726

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
5, 9, 2, 6, 25, 6, 11, 16, 9, 21, 
Random Seed: 10725
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 727

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
22, 12, 20, 2, 16, 3, 11, 20, 1, 
Random Seed: 10726
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 728

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 16, 24, 
Random Seed: 10727
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 729

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 22, 12, 7, 5, 14, 14, 6, 
Random Seed: 10728
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 730

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 6, 
Random Seed: 10729
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 731

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 18, 22, 3, 22, 12, 
Random Seed: 10730
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 732

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
6, 9, 25, 
Random Seed: 10731
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 733

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 
Random Seed: 10732
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 734

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 
Random Seed: 10733
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 735

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 
Random Seed: 10734
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 736

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
3, 20, 5, 2, 19, 2, 
Random Seed: 10735
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 737

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
12, 17, 10, 8, 22, 
Random Seed: 10736
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 738

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
4, 17, 4, 
Random Seed: 10737
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 739

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 
Random Seed: 10738
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 740

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 24, 8, 17, 16, 21, 
Random Seed: 10739
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 741

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 17, 22, 1, 12, 1, 12, 4, 
Random Seed: 10740
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 742

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 25, 4, 24, 21, 10, 17, 25, 0, 9, 
Random Seed: 10741
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 743

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 
Random Seed: 10742
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 744

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 10, 22, 
Random Seed: 10743
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 745

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 22, 
Random Seed: 10744
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 746

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 13, 12, 13, 
Random Seed: 10745
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 747

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 8, 2, 24, 6, 23, 9, 23, 24, 11, 
Random Seed: 10746
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 748

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 1, 19, 21, 
Random Seed: 10747
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 749

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 25, 13, 6, 23, 13, 
Random Seed: 10748
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 750

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 6, 11, 20, 9, 5, 2, 12, 4, 
Random Seed: 10749
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 751

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 10, 12, 2, 19, 11, 19, 20, 
Random Seed: 10750
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 752

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 10, 9, 20, 23, 15, 17, 12, 8, 
Random Seed: 10751
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 753

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 0, 9, 24, 8, 13, 12, 12, 24, 23, 
Random Seed: 10752
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 754

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 5, 
Random Seed: 10753
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 755

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 24, 25, 16, 19, 11, 25, 16, 
Random Seed: 10754
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 756

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 23, 24, 1, 12, 
Random Seed: 10755
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 757

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 11, 11, 12, 
Random Seed: 10756
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 758

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 22, 2, 22, 6, 9, 0, 3, 
Random Seed: 10757
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 759

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
4, 1, 21, 16, 0, 11, 0, 16, 23, 
Random Seed: 10758
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 760

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 9, 4, 3, 8, 15, 15, 21, 14, 14, 
Random Seed: 10759
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 761

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 6, 20, 
Random Seed: 10760
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 762

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 
Random Seed: 10761
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 763

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
4, 17, 5, 22, 18, 17, 22, 10, 16, 
Random Seed: 10762
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 764

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 5, 5, 19, 16, 22, 8, 13, 12, 23, 
Random Seed: 10763
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 765

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 3, 
Random Seed: 10764
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 766

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 19, 12, 
Random Seed: 10765
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 767

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
4, 0, 19, 24, 19, 17, 8, 11, 
Random Seed: 10766
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 768

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 19, 15, 21, 11, 14, 5, 24, 0, 
Random Seed: 10767
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 769

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 22, 24, 19, 19, 11, 14, 5, 
Random Seed: 10768
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 770

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 10, 6, 7, 
Random Seed: 10769
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 771

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 15, 11, 4, 19, 6, 
Random Seed: 10770
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 772

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 9, 21, 15, 10, 
Random Seed: 10771
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 773

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 24, 8, 4, 19, 
Random Seed: 10772
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 774

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 3, 5, 10, 13, 11, 20, 19, 11, 
Random Seed: 10773
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 775

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 18, 4, 4, 13, 20, 23, 23, 
Random Seed: 10774
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 776

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 17, 24, 
Random Seed: 10775
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 777

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 23, 11, 3, 15, 10, 8, 21, 23, 
Random Seed: 10776
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 778

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 15, 21, 
Random Seed: 10777
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 779

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 1, 4, 25, 14, 0, 22, 13, 15, 
Random Seed: 10778
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 780

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 10, 15, 1, 20, 12, 12, 
Random Seed: 10779
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 781

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 7, 0, 24, 
Random Seed: 10780
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 782

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 20, 6, 0, 22, 2, 
Random Seed: 10781
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 783

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 
Random Seed: 10782
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 784

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 7, 17, 
Random Seed: 10783
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 785

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 23, 18, 3, 17, 6, 18, 17, 
Random Seed: 10784
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 786

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 12, 15, 5, 25, 8, 
Random Seed: 10785
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 787

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
10, 23, 8, 
Random Seed: 10786
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 788

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 6, 1, 9, 
Random Seed: 10787
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 789

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
22, 17, 
Random Seed: 10788
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 790

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 1, 
Random Seed: 10789
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 791

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 
Random Seed: 10790
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 792

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
12, 8, 18, 
Random Seed: 10791
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 793

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 11, 15, 0, 
Random Seed: 10792
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 794

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
10, 
Random Seed: 10793
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 795

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 16, 15, 7, 4, 
Random Seed: 10794
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 796

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 8, 
Random Seed: 10795
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 797

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 12, 0, 
Random Seed: 10796
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 798

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
6, 
Random Seed: 10797
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 799

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 
Random Seed: 10798
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 800

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 6, 6, 21, 3, 23, 
Random Seed: 10799
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 801

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 2, 3, 0, 
Random Seed: 10800
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 802

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 16, 6, 21, 16, 15, 
Random Seed: 10801
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 803

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 8, 25, 0, 0, 1, 
Random Seed: 10802
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 804

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 22, 1, 1, 
Random Seed: 10803
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 805

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 
Random Seed: 10804
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 806

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 2, 22, 13, 14, 8, 
Random Seed: 10805
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 807

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 21, 21, 
Random Seed: 10806
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 808

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 23, 11, 25, 23, 11, 2, 24, 
Random Seed: 10807
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 809

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
22, 
Random Seed: 10808
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 810

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 13, 25, 15, 6, 10, 17, 5, 0, 7, 
Random Seed: 10809
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 811

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
12, 1, 24, 9, 7, 25, 11, 
Random Seed: 10810
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 812

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
10, 1, 
Random Seed: 10811
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 813

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 5, 10, 23, 12, 
Random Seed: 10812
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 814

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 9, 1, 
Random Seed: 10813
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 815

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 15, 22, 2, 2, 22, 16, 
Random Seed: 10814
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 816

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 13, 22, 12, 17, 7, 24, 20, 5, 
Random Seed: 10815
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 817

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
10, 24, 
Random Seed: 10816
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 818

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 6, 1, 20, 
Random Seed: 10817
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 819

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 3, 
Random Seed: 10818
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 820

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
5, 3, 12, 23, 9, 9, 24, 24, 5, 
Random Seed: 10819
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 821

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 8, 
Random Seed: 10820
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 822

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 8, 4, 21, 
Random Seed: 10821
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 823

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
5, 8, 6, 25, 17, 19, 17, 21, 20, 7, 
Random Seed: 10822
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 824

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 
Random Seed: 10823
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 825

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
3, 0, 
Random Seed: 10824
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 826

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 3, 24, 
Random Seed: 10825
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 827

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 18, 25, 23, 13, 4, 2, 18, 
Random Seed: 10826
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 828

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 6, 4, 
Random Seed: 10827
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 829

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 21, 
Random Seed: 10828
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 830

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 9, 12, 20, 10, 
Random Seed: 10829
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 831

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 3, 2, 18, 20, 19, 12, 
Random Seed: 10830
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 832

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 24, 21, 20, 12, 8, 14, 18, 
Random Seed: 10831
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 833

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 12, 22, 5, 15, 13, 14, 3, 7, 0, 
Random Seed: 10832
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 834

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 6, 15, 18, 1, 11, 
Random Seed: 10833
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 835

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
4, 6, 21, 1, 0, 7, 11, 16, 2, 23, 
Random Seed: 10834
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 836

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
12, 16, 4, 1, 5, 21, 6, 15, 21, 9, 
Random Seed: 10835
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 837

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 20, 15, 16, 5, 21, 13, 11, 
Random Seed: 10836
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 838

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 3, 18, 0, 19, 
Random Seed: 10837
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 839

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 21, 11, 3, 
Random Seed: 10838
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 840

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 23, 20, 23, 20, 3, 2, 15, 21, 
Random Seed: 10839
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 841

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 1, 2, 1, 14, 3, 9, 
Random Seed: 10840
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 842

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
3, 4, 2, 23, 6, 15, 19, 19, 20, 21, 
Random Seed: 10841
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 843

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 4, 2, 14, 10, 4, 4, 5, 0, 10, 
Random Seed: 10842
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 844

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 19, 19, 18, 
Random Seed: 10843
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 845

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 8, 6, 5, 6, 
Random Seed: 10844
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 846

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 6, 17, 24, 16, 20, 
Random Seed: 10845
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 847

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 8, 4, 
Random Seed: 10846
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 848

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 8, 1, 2, 13, 15, 21, 
Random Seed: 10847
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 849

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 9, 
Random Seed: 10848
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 850

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 18, 19, 2, 15, 20, 8, 6, 20, 24, 
Random Seed: 10849
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 851

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 
Random Seed: 10850
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 852

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 
Random Seed: 10851
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 853

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
10, 17, 12, 12, 7, 1, 10, 16, 
Random Seed: 10852
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 854

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 23, 25, 14, 15, 18, 18, 6, 12, 
Random Seed: 10853
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 855

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 2, 18, 22, 
Random Seed: 10854
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 856

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 22, 7, 4, 8, 1, 16, 21, 8, 
Random Seed: 10855
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 857

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 4, 21, 25, 4, 21, 15, 19, 
Random Seed: 10856
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 858

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 2, 10, 15, 10, 13, 9, 7, 12, 
Random Seed: 10857
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 859

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
10, 14, 6, 
Random Seed: 10858
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 860

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 15, 25, 17, 22, 23, 
Random Seed: 10859
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 861

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 2, 15, 
Random Seed: 10860
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 862

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
4, 22, 25, 6, 8, 16, 19, 23, 
Random Seed: 10861
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 863

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 6, 4, 19, 23, 10, 12, 12, 10, 
Random Seed: 10862
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 864

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 0, 13, 1, 20, 
Random Seed: 10863
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 865

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 0, 3, 15, 
Random Seed: 10864
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 866

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 6, 19, 17, 6, 20, 19, 
Random Seed: 10865
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 867

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 11, 
Random Seed: 10866
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 868

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 14, 21, 2, 2, 22, 2, 16, 0, 24, 
Random Seed: 10867
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 869

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 4, 
Random Seed: 10868
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 870

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 11, 25, 10, 6, 18, 
Random Seed: 10869
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 871

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 
Random Seed: 10870
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 872

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
12, 19, 5, 23, 
Random Seed: 10871
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 873

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 
Random Seed: 10872
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 874

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 25, 14, 
Random Seed: 10873
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 875

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 24, 9, 22, 6, 10, 
Random Seed: 10874
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 876

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 11, 1, 5, 3, 4, 18, 11, 9, 6, 
Random Seed: 10875
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 877

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
3, 0, 11, 23, 21, 9, 
Random Seed: 10876
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 878

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 
Random Seed: 10877
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 879

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 4, 6, 15, 12, 18, 15, 6, 
Random Seed: 10878
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 880

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 8, 6, 13, 2, 
Random Seed: 10879
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 881

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 0, 14, 13, 0, 25, 10, 23, 
Random Seed: 10880
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 882

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 8, 6, 17, 1, 
Random Seed: 10881
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 883

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 22, 18, 5, 4, 23, 8, 14, 6, 14, 
Random Seed: 10882
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 884

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 
Random Seed: 10883
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 885

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 16, 
Random Seed: 10884
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 886

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 19, 11, 0, 19, 9, 10, 
Random Seed: 10885
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 887

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 11, 1, 1, 7, 19, 7, 
Random Seed: 10886
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 888

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 4, 
Random Seed: 10887
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 889

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 9, 
Random Seed: 10888
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 890

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
4, 2, 0, 15, 16, 18, 8, 3, 20, 
Random Seed: 10889
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 891

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
4, 2, 14, 16, 13, 18, 17, 20, 11, 
Random Seed: 10890
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 892

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
4, 17, 14, 
Random Seed: 10891
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 893

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 17, 15, 8, 21, 17, 10, 10, 7, 
Random Seed: 10892
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 894

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
12, 24, 23, 
Random Seed: 10893
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 895

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 15, 21, 12, 7, 12, 9, 21, 15, 21, 
Random Seed: 10894
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 896

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
10, 7, 5, 10, 24, 20, 18, 21, 13, 
Random Seed: 10895
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 897

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
22, 9, 2, 8, 9, 0, 9, 12, 1, 
Random Seed: 10896
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 898

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 8, 22, 25, 5, 13, 
Random Seed: 10897
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 899

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 6, 14, 0, 16, 12, 20, 10, 7, 9, 
Random Seed: 10898
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 900

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
5, 0, 20, 14, 9, 22, 
Random Seed: 10899
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 901

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 24, 7, 13, 9, 
Random Seed: 10900
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 902

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 18, 11, 23, 14, 
Random Seed: 10901
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 903

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 10, 25, 11, 
Random Seed: 10902
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 904

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 13, 0, 0, 13, 20, 16, 25, 
Random Seed: 10903
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 905

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 16, 16, 8, 
Random Seed: 10904
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 906

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 20, 15, 8, 5, 13, 22, 24, 
Random Seed: 10905
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 907

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
10, 0, 24, 7, 
Random Seed: 10906
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 908

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 
Random Seed: 10907
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 909

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
10, 6, 10, 11, 24, 2, 10, 
Random Seed: 10908
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 910

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 
Random Seed: 10909
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 911

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 18, 10, 17, 25, 23, 15, 25, 0, 2, 
Random Seed: 10910
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 912

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 17, 11, 
Random Seed: 10911
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 913

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
22, 17, 
Random Seed: 10912
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 914

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 
Random Seed: 10913
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 915

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
4, 20, 21, 24, 13, 17, 17, 23, 11, 1, 
Random Seed: 10914
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 916

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 6, 10, 3, 10, 
Random Seed: 10915
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 917

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
15, 13, 18, 12, 0, 16, 3, 0, 
Random Seed: 10916
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 918

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
10, 0, 13, 5, 23, 11, 20, 15, 4, 17, 
Random Seed: 10917
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 919

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 13, 11, 
Random Seed: 10918
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 920

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 2, 19, 21, 17, 8, 13, 3, 
Random Seed: 10919
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 921

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 10, 0, 16, 
Random Seed: 10920
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 922

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
6, 
Random Seed: 10921
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 923

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 20, 17, 
Random Seed: 10922
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 924

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
19, 8, 21, 8, 
Random Seed: 10923
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 925

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 9, 16, 2, 6, 7, 10, 19, 
Random Seed: 10924
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 926

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 22, 5, 1, 14, 2, 5, 20, 2, 7, 
Random Seed: 10925
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 927

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 12, 12, 
Random Seed: 10926
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 928

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 
Random Seed: 10927
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 929

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
23, 14, 0, 15, 16, 8, 22, 1, 1, 11, 
Random Seed: 10928
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 930

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 3, 4, 24, 6, 10, 18, 10, 
Random Seed: 10929
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 931

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 20, 22, 
Random Seed: 10930
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 932

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 8, 22, 9, 7, 10, 11, 22, 1, 
Random Seed: 10931
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 933

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 22, 6, 0, 0, 16, 
Random Seed: 10932
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 934

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 11, 16, 10, 24, 
Random Seed: 10933
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 935

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 6, 15, 6, 22, 10, 14, 18, 19, 22, 
Random Seed: 10934
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 936

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 6, 0, 15, 
Random Seed: 10935
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 937

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
22, 12, 25, 14, 17, 5, 
Random Seed: 10936
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 938

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
22, 14, 5, 8, 
Random Seed: 10937
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 939

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 25, 20, 12, 9, 10, 6, 
Random Seed: 10938
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 940

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 11, 3, 
Random Seed: 10939
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 941

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 5, 13, 
Random Seed: 10940
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 942

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 2, 11, 19, 8, 18, 17, 23, 23, 1, 
Random Seed: 10941
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 943

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 3, 7, 3, 14, 17, 
Random Seed: 10942
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 944

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 23, 4, 5, 19, 20, 
Random Seed: 10943
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 945

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 14, 18, 23, 18, 3, 19, 1, 23, 
Random Seed: 10944
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 946

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 14, 4, 7, 5, 10, 14, 
Random Seed: 10945
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 947

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
5, 23, 19, 7, 22, 24, 12, 15, 18, 
Random Seed: 10946
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 948

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 0, 8, 1, 18, 13, 20, 
Random Seed: 10947
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 949

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 19, 4, 
Random Seed: 10948
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 950

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 2, 8, 25, 13, 8, 6, 10, 2, 
Random Seed: 10949
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 951

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 2, 
Random Seed: 10950
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 952

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 14, 0, 14, 24, 2, 7, 11, 24, 
Random Seed: 10951
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 953

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
5, 22, 
Random Seed: 10952
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 954

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 14, 5, 4, 15, 20, 14, 
Random Seed: 10953
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 955

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 12, 14, 20, 
Random Seed: 10954
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 956

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 3, 5, 19, 19, 3, 21, 
Random Seed: 10955
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 957

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 3, 10, 1, 25, 12, 
Random Seed: 10956
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 958

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 11, 25, 18, 
Random Seed: 10957
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 959

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 12, 8, 0, 2, 2, 
Random Seed: 10958
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 960

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 21, 24, 15, 
Random Seed: 10959
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 961

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
12, 17, 18, 8, 
Random Seed: 10960
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 962

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
10, 21, 19, 16, 16, 21, 3, 17, 
Random Seed: 10961
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 963

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 1, 25, 17, 3, 3, 19, 
Random Seed: 10962
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 964

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
17, 19, 22, 8, 8, 
Random Seed: 10963
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 965

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 
Random Seed: 10964
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 966

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
22, 25, 
Random Seed: 10965
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 967

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 
Random Seed: 10966
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 968

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 12, 6, 3, 24, 15, 7, 
Random Seed: 10967
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 969

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
12, 3, 1, 8, 1, 
Random Seed: 10968
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 970

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 2, 12, 24, 23, 14, 18, 2, 13, 
Random Seed: 10969
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 971

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 12, 
Random Seed: 10970
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 972

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
2, 16, 
Random Seed: 10971
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 973

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 20, 15, 14, 2, 1, 17, 
Random Seed: 10972
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 974

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
20, 
Random Seed: 10973
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 975

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 
Random Seed: 10974
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 976

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 2, 19, 13, 4, 
Random Seed: 10975
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 977

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 17, 
Random Seed: 10976
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 978

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 24, 17, 18, 
Random Seed: 10977
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 979

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
12, 21, 21, 15, 
Random Seed: 10978
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 980

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
21, 10, 9, 21, 0, 
Random Seed: 10979
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 981

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
3, 22, 2, 
Random Seed: 10980
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 982

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
6, 6, 
Random Seed: 10981
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 983

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
25, 13, 8, 13, 13, 1, 
Random Seed: 10982
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 984

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 20, 18, 6, 11, 17, 
Random Seed: 10983
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 985

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
1, 6, 3, 4, 9, 
Random Seed: 10984
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 986

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
5, 8, 7, 16, 17, 15, 
Random Seed: 10985
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 987

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 0, 9, 
Random Seed: 10986
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 988

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
10, 11, 11, 21, 7, 5, 4, 18, 
Random Seed: 10987
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 989

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
0, 0, 
Random Seed: 10988
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 990

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
4, 16, 11, 13, 24, 20, 
Random Seed: 10989
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 991

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 11, 1, 11, 1, 3, 22, 4, 18, 
Random Seed: 10990
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 992

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
3, 4, 
Random Seed: 10991
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 993

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
8, 14, 
Random Seed: 10992
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 994

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
16, 9, 
Random Seed: 10993
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 995

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
13, 9, 11, 
Random Seed: 10994
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 996

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
7, 24, 23, 20, 11, 0, 6, 12, 3, 2, 
Random Seed: 10995
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 997

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 6, 1, 18, 5, 12, 2, 
Random Seed: 10996
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 998

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
14, 12, 5, 6, 12, 19, 15, 
Random Seed: 10997
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 999

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 5, 24, 22, 
Random Seed: 10998
Failed Item(s): 
Invalid draw from deck. 

Running tests!
Test# 1000

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
24, 7, 24, 2, 12, 15, 24, 23, 23, 1, 
Random Seed: 10999
Failed Item(s): 
Invalid draw from deck. 

Total Tests: 10000
Total Passed: 0
Total Failed: 1000
File 'dominion.c'
Lines executed:17.30% of 578
Branches executed:16.67% of 432
Taken at least once:13.89% of 432
Calls executed:7.37% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 26040 returned 100% blocks executed 83%
    26040:    8:int compare(const void* a, const void* b) {
    26040:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    26040:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
     6944:   12:    return -1;
    19096:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1000 returned 100% blocks executed 95%
     1000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     1000:   44:  SelectStream(1);
call    0 returned 100%
     1000:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     1000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 30% (fallthrough)
branch  3 taken 70%
        -:   49:    {
      301:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      699:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     7689:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
    76890:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
    69900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      699:   73:  if (numPlayers == 2)
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
        -:   74:    {
      361:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      338:   77:  else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:    {
      338:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      699:   87:  if (numPlayers == 2)
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
        -:   88:    {
      361:   89:      state->supplyCount[estate] = 8;
      361:   90:      state->supplyCount[duchy] = 8;
      361:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      338:   95:      state->supplyCount[estate] = 12;
      338:   96:      state->supplyCount[duchy] = 12;
      338:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      699:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      699:  102:  state->supplyCount[silver] = 40;
      699:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    14679:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   115335:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   108345:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     6990:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
     1398:  115:		  if (numPlayers == 2){ 
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
      361:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      338:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     6291:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     6990:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   101355:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     2435:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  139:    {
     1736:  140:      state->deckCount[i] = 0;
     6944:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
     5208:  143:	  state->deck[i][j] = estate;
     5208:  144:	  state->deckCount[i]++;
        -:  145:	}
    13888:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    12152:  148:	  state->deck[i][j] = copper;
    12152:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     2435:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  155:    {
     1736:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     2435:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     1736:  166:      state->handCount[i] = 0;
     1736:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    19572:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
    18873:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      699:  182:  state->outpostPlayed = 0;
      699:  183:  state->phase = 0;
      699:  184:  state->numActions = 1;
      699:  185:  state->numBuys = 1;
      699:  186:  state->playedCardCount = 0;
      699:  187:  state->whoseTurn = 0;
      699:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     4194:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     3495:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
      699:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
      699:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 1736 returned 100% blocks executed 94%
     1736:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     1736:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     1736:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
     1736:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    20832:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    17360:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    17360:  216:    newDeck[newDeckPos] = state->deck[player][card];
    17360:  217:    newDeckPos++;
    58104:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
    40744:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    17360:  221:    state->deckCount[player]--;
        -:  222:  }
    19096:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    17360:  224:    state->deck[player][i] = newDeck[i];
    17360:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     1736:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 3495 returned 100% blocks executed 38%
     3495:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     3495:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     3495:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     3495:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     3495:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     3495:  576:    state->deckCount[player]--;
     3495:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     3495:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        -:  658:  //int drawntreasure=0;
        -:  659:  //int cardDrawn;
        -:  660:  //int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
        -:  668:    {
        -:  669:						
        -:  670:    case feast:
        -:  671:      //gain card with cost up to 5
        -:  672:      //Backup hand
    #####:  673:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  674:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  675:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  676:      }
        -:  677:      //Backup hand
        -:  678:
        -:  679:      //Update Coins for Buy
    #####:  680:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  681:      x = 1;//Condition to loop on
    #####:  682:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  683:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  684:	  if (DEBUG)
        -:  685:	    printf("None of that card left, sorry!\n");
        -:  686:
        -:  687:	  if (DEBUG){
        -:  688:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  689:	  }
        -:  690:	}
    #####:  691:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  692:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  693:
        -:  694:	  if (DEBUG){
        -:  695:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  696:	  }
        -:  697:	}
        -:  698:	else{
        -:  699:
        -:  700:	  if (DEBUG){
        -:  701:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  702:	  }
        -:  703:
    #####:  704:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  705:	  x = 0;//No more buying cards
        -:  706:
        -:  707:	  if (DEBUG){
        -:  708:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  709:	  }
        -:  710:
        -:  711:	}
        -:  712:      }     
        -:  713:
        -:  714:      //Reset Hand
    #####:  715:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  716:	state->hand[currentPlayer][i] = temphand[i];
    #####:  717:	temphand[i] = -1;
        -:  718:      }
        -:  719:      //Reset Hand
        -:  720:      			
    #####:  721:      return 0;
        -:  722:			
        -:  723:    case gardens:
    #####:  724:      return -1;
        -:  725:			
        -:  726:    case mine:
    #####:  727:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  728:
    #####:  729:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  730:	{
    #####:  731:	  return -1;
        -:  732:	}
        -:  733:		
    #####:  734:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  735:	{
    #####:  736:	  return -1;
        -:  737:	}
        -:  738:
    #####:  739:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:
    #####:  744:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  745:
        -:  746:      //discard card from hand
    #####:  747:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  748:
        -:  749:      //discard trashed card
    #####:  750:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  751:	{
    #####:  752:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  753:	    {
    #####:  754:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  755:	      break;
        -:  756:	    }
        -:  757:	}
        -:  758:			
    #####:  759:      return 0;
        -:  760:			
        -:  761:    case remodel:
    #####:  762:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  763:
    #####:  764:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  765:	{
    #####:  766:	  return -1;
        -:  767:	}
        -:  768:
    #####:  769:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  770:
        -:  771:      //discard card from hand
    #####:  772:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  773:
        -:  774:      //discard trashed card
    #####:  775:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  776:	{
    #####:  777:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  778:	    {
    #####:  779:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  780:	      break;
        -:  781:	    }
        -:  782:	}
        -:  783:
        -:  784:
    #####:  785:      return 0;
        -:  786:		
        -:  787:    /*case smithy:
        -:  788:      //+3 Cards
        -:  789:      for (i = 0; i < 3; i++)
        -:  790:	{
        -:  791:	  drawCard(currentPlayer, state);
        -:  792:	}
        -:  793:			
        -:  794:      //discard card from hand
        -:  795:      discardCard(handPos, currentPlayer, state, 0);
        -:  796:      return 0;
        -:  797:	*/
        -:  798:		
        -:  799:    case baron:
    #####:  800:      state->numBuys++;//Increase buys by 1!
    #####:  801:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  802:	int p = 0;//Iterator for hand!
    #####:  803:	int card_not_discarded = 1;//Flag for discard set!
    #####:  804:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  805:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  806:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  807:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  808:	    state->discardCount[currentPlayer]++;
    #####:  809:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  810:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  811:	    }
    #####:  812:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  813:	    state->handCount[currentPlayer]--;
    #####:  814:	    card_not_discarded = 0;//Exit the loop
        -:  815:	  }
    #####:  816:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  817:	    if(DEBUG) {
        -:  818:	      printf("No estate cards in your hand, invalid choice\n");
        -:  819:	      printf("Must gain an estate if there are any\n");
        -:  820:	    }
    #####:  821:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  822:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  823:	      state->supplyCount[estate]--;//Decrement estates
    #####:  824:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  825:		isGameOver(state);
call    0 never executed
        -:  826:	      }
        -:  827:	    }
    #####:  828:	    card_not_discarded = 0;//Exit the loop
        -:  829:	  }
        -:  830:			    
        -:  831:	  else{
    #####:  832:	    p++;//Next card
        -:  833:	  }
        -:  834:	}
        -:  835:      }
        -:  836:			    
        -:  837:      else{
    #####:  838:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  839:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  840:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  841:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  842:	    isGameOver(state);
call    0 never executed
        -:  843:	  }
        -:  844:	}
        -:  845:      }
        -:  846:	    
        -:  847:      
    #####:  848:      return 0;
        -:  849:		
        -:  850:    case great_hall:
        -:  851:      //+1 Card
    #####:  852:      drawCard(currentPlayer, state);
call    0 never executed
        -:  853:			
        -:  854:      //+1 Actions
    #####:  855:      state->numActions++;
        -:  856:			
        -:  857:      //discard card from hand
    #####:  858:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  859:      return 0;
        -:  860:		
        -:  861:    case minion:
        -:  862:      //+1 action
    #####:  863:      state->numActions++;
        -:  864:			
        -:  865:      //discard card from hand
    #####:  866:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  867:			
    #####:  868:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  869:	{
    #####:  870:	  state->coins = state->coins + 2;
        -:  871:	}
        -:  872:			
    #####:  873:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  874:	{
        -:  875:	  //discard hand
    #####:  876:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  877:	    {
    #####:  878:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  879:	    }
        -:  880:				
        -:  881:	  //draw 4
    #####:  882:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  883:	    {
    #####:  884:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  885:	    }
        -:  886:				
        -:  887:	  //other players discard hand and redraw if hand size > 4
    #####:  888:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  889:	    {
    #####:  890:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  891:		{
    #####:  892:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  893:		    {
        -:  894:		      //discard hand
    #####:  895:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  896:			{
    #####:  897:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  898:			}
        -:  899:							
        -:  900:		      //draw 4
    #####:  901:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  902:			{
    #####:  903:			  drawCard(i, state);
call    0 never executed
        -:  904:			}
        -:  905:		    }
        -:  906:		}
        -:  907:	    }
        -:  908:				
        -:  909:	}
    #####:  910:      return 0;
        -:  911:		
        -:  912:    case steward:
    #####:  913:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  914:	{
        -:  915:	  //+2 cards
    #####:  916:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  917:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  918:	}
    #####:  919:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  920:	{
        -:  921:	  //+2 coins
    #####:  922:	  state->coins = state->coins + 2;
        -:  923:	}
        -:  924:      else
        -:  925:	{
        -:  926:	  //trash 2 cards in hand
    #####:  927:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  928:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  929:	}
        -:  930:			
        -:  931:      //discard card from hand
    #####:  932:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  933:      return 0;
        -:  934:		
        -:  935:    case tribute:
    #####:  936:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  937:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  938:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  939:	  state->deckCount[nextPlayer]--;
        -:  940:	}
    #####:  941:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  942:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  943:	  state->discardCount[nextPlayer]--;
        -:  944:	}
        -:  945:	else{
        -:  946:	  //No Card to Reveal
        -:  947:	  if (DEBUG){
        -:  948:	    printf("No cards to reveal\n");
        -:  949:	  }
        -:  950:	}
        -:  951:      }
        -:  952:	    
        -:  953:      else{
    #####:  954:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  955:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  956:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  957:	    state->deckCount[nextPlayer]++;
    #####:  958:	    state->discard[nextPlayer][i] = -1;
    #####:  959:	    state->discardCount[nextPlayer]--;
        -:  960:	  }
        -:  961:			    
    #####:  962:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  963:	} 
    #####:  964:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  965:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  966:	state->deckCount[nextPlayer]--;
    #####:  967:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  968:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  969:	state->deckCount[nextPlayer]--;
        -:  970:      }    
        -:  971:		       
    #####:  972:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  973:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  974:	state->playedCardCount++;
    #####:  975:	tributeRevealedCards[1] = -1;
        -:  976:      }
        -:  977:
    #####:  978:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  979:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  980:	  state->coins += 2;
        -:  981:	}
        -:  982:		    
    #####:  983:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  984:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  985:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  986:	}
        -:  987:	else{//Action Card
    #####:  988:	  state->numActions = state->numActions + 2;
        -:  989:	}
        -:  990:      }
        -:  991:	    
    #####:  992:      return 0;
        -:  993:		
        -:  994:    case ambassador:
    #####:  995:      j = 0;		//used to check if player has enough cards to discard
        -:  996:
    #####:  997:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  998:	{
    #####:  999:	  return -1;				
        -: 1000:	}
        -: 1001:
    #####: 1002:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1003:	{
    #####: 1004:	  return -1;
        -: 1005:	}
        -: 1006:
    #####: 1007:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1008:	{
    #####: 1009:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1010:	    {
    #####: 1011:	      j++;
        -: 1012:	    }
        -: 1013:	}
    #####: 1014:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1015:	{
    #####: 1016:	  return -1;				
        -: 1017:	}
        -: 1018:
        -: 1019:      if (DEBUG) 
        -: 1020:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1021:
        -: 1022:      //increase supply count for choosen card by amount being discarded
    #####: 1023:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1024:			
        -: 1025:      //each other player gains a copy of revealed card
    #####: 1026:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1027:	{
    #####: 1028:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1029:	    {
    #####: 1030:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1031:	    }
        -: 1032:	}
        -: 1033:
        -: 1034:      //discard played card from hand
    #####: 1035:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1036:
        -: 1037:      //trash copies of cards returned to supply
    #####: 1038:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1039:	{
    #####: 1040:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1041:	    {
    #####: 1042:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1043:		{
    #####: 1044:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1045:		  break;
        -: 1046:		}
        -: 1047:	    }
        -: 1048:	}			
        -: 1049:
    #####: 1050:      return 0;
        -: 1051:		
        -: 1052:    case cutpurse:
        -: 1053:
    #####: 1054:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1055:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1056:	{
    #####: 1057:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1058:	    {
    #####: 1059:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1060:		{
    #####: 1061:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1062:		    {
    #####: 1063:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1064:		      break;
        -: 1065:		    }
    #####: 1066:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1067:		    {
    #####: 1068:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1069:			{
        -: 1070:			  if (DEBUG)
        -: 1071:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1072:			}	
    #####: 1073:		      break;
        -: 1074:		    }		
        -: 1075:		}
        -: 1076:					
        -: 1077:	    }
        -: 1078:				
        -: 1079:	}				
        -: 1080:
        -: 1081:      //discard played card from hand
    #####: 1082:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1083:
    #####: 1084:      return 0;
        -: 1085:
        -: 1086:		
        -: 1087:    case embargo: 
        -: 1088:      //+2 Coins
    #####: 1089:      state->coins = state->coins + 2;
        -: 1090:			
        -: 1091:      //see if selected pile is in play
    #####: 1092:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1093:	{
    #####: 1094:	  return -1;
        -: 1095:	}
        -: 1096:			
        -: 1097:      //add embargo token to selected supply pile
    #####: 1098:      state->embargoTokens[choice1]++;
        -: 1099:			
        -: 1100:      //trash card
    #####: 1101:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1102:      return 0;
        -: 1103:		
        -: 1104:    case salvager:
        -: 1105:      //+1 buy
    #####: 1106:      state->numBuys++;
        -: 1107:			
    #####: 1108:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1109:	{
        -: 1110:	  //gain coins equal to trashed card
    #####: 1111:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1112:	  //trash card
    #####: 1113:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1114:	}
        -: 1115:			
        -: 1116:      //discard card
    #####: 1117:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1118:      return 0;
        -: 1119:		
        -: 1120:    case sea_hag:
    #####: 1121:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1122:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1123:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1124:	  state->discardCount[i]++;
    #####: 1125:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1126:	}
        -: 1127:      }
    #####: 1128:      return 0;
        -: 1129:		
        -: 1130:    case treasure_map:
        -: 1131:      //search hand for another treasure_map
    #####: 1132:      index = -1;
    #####: 1133:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1134:	{
    #####: 1135:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1136:	    {
    #####: 1137:	      index = i;
    #####: 1138:	      break;
        -: 1139:	    }
        -: 1140:	}
    #####: 1141:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1142:	{
        -: 1143:	  //trash both treasure cards
    #####: 1144:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1145:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1146:
        -: 1147:	  //gain 4 Gold cards
    #####: 1148:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1149:	    {
    #####: 1150:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1151:	    }
        -: 1152:				
        -: 1153:	  //return success
    #####: 1154:	  return 1;
        -: 1155:	}
        -: 1156:			
        -: 1157:      //no second treasure_map found in hand
    #####: 1158:      return -1;
        -: 1159:    }
        -: 1160:
        -: 1161:    //Add refactored functions for selected card enums
    #####: 1162:    if(card == smithy)
branch  0 never executed
branch  1 never executed
        -: 1163:    {
    #####: 1164:    	int result = cardSmithy(currentPlayer, state, handPos);
call    0 never executed
    #####: 1165:    	if ((result == 0))
branch  0 never executed
branch  1 never executed
        -: 1166:    	{
    #####: 1167:    		return 0;
        -: 1168:    	} else
        -: 1169:    		{
    #####: 1170:    			return -1;
        -: 1171:    		}
        -: 1172:    }
        -: 1173:
    #####: 1174:    if(card == adventurer)
branch  0 never executed
branch  1 never executed
        -: 1175:    {
    #####: 1176:    	int result = cardAdventurer(currentPlayer, state);
call    0 never executed
    #####: 1177:    	if ((result == 0))
branch  0 never executed
branch  1 never executed
        -: 1178:    	{
    #####: 1179:    		return 0;
        -: 1180:    	} else
        -: 1181:    		{
    #####: 1182:    			return -1;
        -: 1183:    		}
        -: 1184:    }
        -: 1185:	
    #####: 1186:	if(card == village)
branch  0 never executed
branch  1 never executed
        -: 1187:    {
    #####: 1188:    	int result = cardVillage(currentPlayer, state, handPos);
call    0 never executed
    #####: 1189:    	if ((result == 0))
branch  0 never executed
branch  1 never executed
        -: 1190:    	{
    #####: 1191:    		return 0;
        -: 1192:    	} else
        -: 1193:    		{
    #####: 1194:    			return -1;
        -: 1195:    		}
        -: 1196:    }
        -: 1197:	
    #####: 1198:	if(card == council_room)
branch  0 never executed
branch  1 never executed
        -: 1199:    {
    #####: 1200:    	int result = cardCouncil_room(currentPlayer, state, handPos);
call    0 never executed
    #####: 1201:    	if ((result == 0))
branch  0 never executed
branch  1 never executed
        -: 1202:    	{
    #####: 1203:    		return 0;
        -: 1204:    	} else
        -: 1205:    		{
    #####: 1206:    			return -1;
        -: 1207:    		}
        -: 1208:    }
        -: 1209:
    #####: 1210:    if(card == outpost)
branch  0 never executed
branch  1 never executed
        -: 1211:    {
    #####: 1212:    	int result = cardOutpost(currentPlayer, state, handPos);
call    0 never executed
    #####: 1213:    	if ((result == 0))
branch  0 never executed
branch  1 never executed
        -: 1214:    	{
    #####: 1215:    		return 0;
        -: 1216:    	} else
        -: 1217:    		{
    #####: 1218:    			return -1;
        -: 1219:    		}
        -: 1220:    }
        -: 1221:
    #####: 1222:  return -1;
        -: 1223:}
        -: 1224:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1225:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1226:{
        -: 1227:	
        -: 1228:  //if card is not trashed, added to Played pile 
    #####: 1229:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1230:    {
        -: 1231:      //add card to played pile
    #####: 1232:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1233:      state->playedCardCount++;
        -: 1234:    }
        -: 1235:	
        -: 1236:  //set played card to -1
    #####: 1237:  state->hand[currentPlayer][handPos] = -1;
        -: 1238:	
        -: 1239:  //remove card from player's hand
    #####: 1240:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1241:    {
        -: 1242:      //reduce number of cards in hand
    #####: 1243:      state->handCount[currentPlayer]--;
        -: 1244:    }
    #####: 1245:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1246:    {
        -: 1247:      //reduce number of cards in hand
    #####: 1248:      state->handCount[currentPlayer]--;
        -: 1249:    }
        -: 1250:  else 	
        -: 1251:    {
        -: 1252:      //replace discarded card with last card in hand
    #####: 1253:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1254:      //set last card to -1
    #####: 1255:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1256:      //reduce number of cards in hand
    #####: 1257:      state->handCount[currentPlayer]--;
        -: 1258:    }
        -: 1259:	
    #####: 1260:  return 0;
        -: 1261:}
        -: 1262:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1263:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1264:{
        -: 1265:  //Note: supplyPos is enum of choosen card
        -: 1266:	
        -: 1267:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1268:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1269:    {
    #####: 1270:      return -1;
        -: 1271:    }
        -: 1272:	
        -: 1273:  //added card for [whoseTurn] current player:
        -: 1274:  // toFlag = 0 : add to discard
        -: 1275:  // toFlag = 1 : add to deck
        -: 1276:  // toFlag = 2 : add to hand
        -: 1277:
    #####: 1278:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1279:    {
    #####: 1280:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1281:      state->deckCount[player]++;
        -: 1282:    }
    #####: 1283:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1284:    {
    #####: 1285:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1286:      state->handCount[player]++;
        -: 1287:    }
        -: 1288:  else
        -: 1289:    {
    #####: 1290:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1291:      state->discardCount[player]++;
        -: 1292:    }
        -: 1293:	
        -: 1294:  //decrease number in supply pile
    #####: 1295:  state->supplyCount[supplyPos]--;
        -: 1296:	 
    #####: 1297:  return 0;
        -: 1298:}
        -: 1299:
function updateCoins called 699 returned 100% blocks executed 82%
      699: 1300:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1301:{
        -: 1302:  int i;
        -: 1303:	
        -: 1304:  //reset coin count
      699: 1305:  state->coins = 0;
        -: 1306:
        -: 1307:  //add coins for each Treasure card in player's hand
     4194: 1308:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1309:    {
     3495: 1310:      if (state->hand[player][i] == copper)
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
        -: 1311:	{
     2714: 1312:	  state->coins += 1;
        -: 1313:	}
      781: 1314:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1315:	{
    #####: 1316:	  state->coins += 2;
        -: 1317:	}
      781: 1318:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1319:	{
    #####: 1320:	  state->coins += 3;
        -: 1321:	}	
        -: 1322:    }	
        -: 1323:
        -: 1324:  //add bonus
      699: 1325:  state->coins += bonus;
        -: 1326:
      699: 1327:  return 0;
        -: 1328:}
        -: 1329:
function cardSmithy called 0 returned 0% blocks executed 0%
    #####: 1330:int cardSmithy(int currentPlayer, struct gameState *state, int handPos)
        -: 1331:{
        -: 1332:	//+3 Cards in hand
        -: 1333:	int i;
    #####: 1334:	for(i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1335:	{
    #####: 1336:		drawCard(currentPlayer, state);
call    0 never executed
        -: 1337:	}
        -: 1338:
    #####: 1339:	discardCard(handPos, currentPlayer, state, i);
call    0 never executed
    #####: 1340:	return 0;
        -: 1341:}
        -: 1342:
function cardAdventurer called 1000 returned 100% blocks executed 43%
     1000: 1343:int cardAdventurer(int currentPlayer, struct gameState *state)
        -: 1344:{
        -: 1345:	int drawntreasure;
        -: 1346:	int cardDrawn;
        -: 1347:	int z;
        -: 1348:	int temphand[MAX_HAND];
        -: 1349:
     2000: 1350:	while(drawntreasure<2)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -: 1351:	{
    #####: 1352:		if(state->deckCount[currentPlayer] < 1)
branch  0 never executed
branch  1 never executed
        -: 1353:			{
    #####: 1354:				shuffle(currentPlayer, state);
call    0 never executed
        -: 1355:			}
        -: 1356:
    #####: 1357:		drawCard(currentPlayer, state);
call    0 never executed
    #####: 1358:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
    #####: 1359:		if (cardDrawn == silver ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1360:			cardDrawn == copper)
        -: 1361:			{
    #####: 1362:				drawntreasure ++;
        -: 1363:			}
        -: 1364:		else{
    #####: 1365:			temphand[z] = cardDrawn;
    #####: 1366:			state->handCount[currentPlayer]--;
    #####: 1367:			z++;
        -: 1368:		}
        -: 1369:	}
        -: 1370:
     2000: 1371:	while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####: 1372:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1];
    #####: 1373:		z=z-1;
        -: 1374:	}
     1000: 1375:	return 0;
        -: 1376:}
        -: 1377:
function cardVillage called 0 returned 0% blocks executed 0%
    #####: 1378:int cardVillage(int currentPlayer, struct gameState *state, int handPos)
        -: 1379:{
        -: 1380:	//Draw one card
    #####: 1381:	drawCard(currentPlayer, state);
call    0 never executed
        -: 1382:
        -: 1383:	//Gain two actions
    #####: 1384:	state->numActions = state->numPlayers + 2;
        -: 1385:
        -: 1386:	//discard the played card from that hand
    #####: 1387:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1388:
    #####: 1389:	return 0;
        -: 1390:}
        -: 1391:
function cardCouncil_room called 0 returned 0% blocks executed 0%
    #####: 1392:int cardCouncil_room(int currentPlayer, struct gameState *state, int handPos)
        -: 1393:{
        -: 1394:	int i;
        -: 1395:	int p;
        -: 1396:	
        -: 1397:	//Draw 4 cards
    #####: 1398:	for(i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1399:	{
    #####: 1400:		drawCard(currentPlayer, state);
call    0 never executed
        -: 1401:	}
        -: 1402:
        -: 1403:	//+1 buy
    #####: 1404:	state->numBuys++;
        -: 1405:
        -: 1406:	//Each other player draws a card
    #####: 1407:	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1408:	{
    #####: 1409:		if(p != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1410:		{
    #####: 1411:			drawCard(i, state);
call    0 never executed
        -: 1412:		}
        -: 1413:	}
        -: 1414:
        -: 1415:	//put played card in discard pile
    #####: 1416:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1417:
    #####: 1418:	return 0;
        -: 1419:}
        -: 1420:
function cardOutpost called 0 returned 0% blocks executed 0%
    #####: 1421:int cardOutpost(int currentPlayer, struct gameState *state, int handPos)
        -: 1422:{
        -: 1423:	//check outpost flag
        -: 1424:	int i;
    #####: 1425:	i = state->outpostPlayed;
        -: 1426:
        -: 1427:	//set outpost flag
    #####: 1428:	if (i != NULL)
branch  0 never executed
branch  1 never executed
        -: 1429:	{
    #####: 1430:		state->outpostPlayed++;		
        -: 1431:	}
        -: 1432:
        -: 1433:	//discard card
    #####: 1434:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1435:	return 0;
        -: 1436:}
        -: 1437:
        -: 1438:
        -: 1439://end of dominion.c
        -: 1440:

Running test!
Test# 1

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 17, 1, 1, 12, 16, 1, 
Random Seed: 10000
Failed Item(s): 
Invalid draw from deck. 

Running test!
Test# 2

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
3, 0, 17, 
Random Seed: 10001
Failed Item(s): 
Invalid draw from deck. 

Running test!
Test# 3

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
22, 10, 10, 24, 7, 8, 3, 
Random Seed: 10002
Failed Item(s): 
Invalid draw from deck. 

Running test!
Test# 4

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
18, 2, 3, 
Random Seed: 10003
Failed Item(s): 
Invalid draw from deck. 

Running test!
Test# 5

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
9, 12, 14, 22, 5, 17, 
Random Seed: 10004
Failed Item(s): 
Invalid draw from deck. 

Total Tests: 1000
Total Passed: 0
Total Failed: 5
File 'dominion.c'
Lines executed:17.30% of 578
Branches executed:16.67% of 432
Taken at least once:13.89% of 432
Calls executed:7.37% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 135 returned 100% blocks executed 83%
      135:    8:int compare(const void* a, const void* b) {
      135:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      135:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       36:   12:    return -1;
       99:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 5 returned 100% blocks executed 95%
        5:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        5:   44:  SelectStream(1);
call    0 returned 100%
        5:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        5:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 20% (fallthrough)
branch  3 taken 80%
        -:   49:    {
        1:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        4:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       44:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      440:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        4:   73:  if (numPlayers == 2)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -:   74:    {
        3:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        1:   77:  else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        4:   87:  if (numPlayers == 2)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -:   88:    {
        3:   89:      state->supplyCount[estate] = 8;
        3:   90:      state->supplyCount[duchy] = 8;
        3:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        1:   95:      state->supplyCount[estate] = 12;
        1:   96:      state->supplyCount[duchy] = 12;
        1:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        4:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        4:  102:  state->supplyCount[silver] = 40;
        4:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       84:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      660:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      620:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       40:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
        8:  115:		  if (numPlayers == 2){ 
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        3:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        1:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       36:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       40:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      580:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       13:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  139:    {
        9:  140:      state->deckCount[i] = 0;
       36:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       27:  143:	  state->deck[i][j] = estate;
       27:  144:	  state->deckCount[i]++;
        -:  145:	}
       72:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       63:  148:	  state->deck[i][j] = copper;
       63:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       13:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  155:    {
        9:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       13:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        9:  166:      state->handCount[i] = 0;
        9:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      112:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      108:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        4:  182:  state->outpostPlayed = 0;
        4:  183:  state->phase = 0;
        4:  184:  state->numActions = 1;
        4:  185:  state->numBuys = 1;
        4:  186:  state->playedCardCount = 0;
        4:  187:  state->whoseTurn = 0;
        4:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       24:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       20:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        4:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        4:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 9 returned 100% blocks executed 94%
        9:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        9:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        9:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
        9:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      108:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       90:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
       90:  216:    newDeck[newDeckPos] = state->deck[player][card];
       90:  217:    newDeckPos++;
      298:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
      208:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       90:  221:    state->deckCount[player]--;
        -:  222:  }
       99:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       90:  224:    state->deck[player][i] = newDeck[i];
       90:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        9:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 20 returned 100% blocks executed 38%
       20:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       20:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       20:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       20:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       20:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       20:  576:    state->deckCount[player]--;
       20:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       20:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        -:  658:  //int drawntreasure=0;
        -:  659:  //int cardDrawn;
        -:  660:  //int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
        -:  668:    {
        -:  669:						
        -:  670:    case feast:
        -:  671:      //gain card with cost up to 5
        -:  672:      //Backup hand
    #####:  673:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  674:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  675:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  676:      }
        -:  677:      //Backup hand
        -:  678:
        -:  679:      //Update Coins for Buy
    #####:  680:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  681:      x = 1;//Condition to loop on
    #####:  682:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  683:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  684:	  if (DEBUG)
        -:  685:	    printf("None of that card left, sorry!\n");
        -:  686:
        -:  687:	  if (DEBUG){
        -:  688:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  689:	  }
        -:  690:	}
    #####:  691:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  692:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  693:
        -:  694:	  if (DEBUG){
        -:  695:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  696:	  }
        -:  697:	}
        -:  698:	else{
        -:  699:
        -:  700:	  if (DEBUG){
        -:  701:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  702:	  }
        -:  703:
    #####:  704:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  705:	  x = 0;//No more buying cards
        -:  706:
        -:  707:	  if (DEBUG){
        -:  708:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  709:	  }
        -:  710:
        -:  711:	}
        -:  712:      }     
        -:  713:
        -:  714:      //Reset Hand
    #####:  715:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  716:	state->hand[currentPlayer][i] = temphand[i];
    #####:  717:	temphand[i] = -1;
        -:  718:      }
        -:  719:      //Reset Hand
        -:  720:      			
    #####:  721:      return 0;
        -:  722:			
        -:  723:    case gardens:
    #####:  724:      return -1;
        -:  725:			
        -:  726:    case mine:
    #####:  727:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  728:
    #####:  729:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  730:	{
    #####:  731:	  return -1;
        -:  732:	}
        -:  733:		
    #####:  734:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  735:	{
    #####:  736:	  return -1;
        -:  737:	}
        -:  738:
    #####:  739:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:
    #####:  744:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  745:
        -:  746:      //discard card from hand
    #####:  747:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  748:
        -:  749:      //discard trashed card
    #####:  750:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  751:	{
    #####:  752:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  753:	    {
    #####:  754:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  755:	      break;
        -:  756:	    }
        -:  757:	}
        -:  758:			
    #####:  759:      return 0;
        -:  760:			
        -:  761:    case remodel:
    #####:  762:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  763:
    #####:  764:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  765:	{
    #####:  766:	  return -1;
        -:  767:	}
        -:  768:
    #####:  769:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  770:
        -:  771:      //discard card from hand
    #####:  772:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  773:
        -:  774:      //discard trashed card
    #####:  775:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  776:	{
    #####:  777:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  778:	    {
    #####:  779:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  780:	      break;
        -:  781:	    }
        -:  782:	}
        -:  783:
        -:  784:
    #####:  785:      return 0;
        -:  786:		
        -:  787:    /*case smithy:
        -:  788:      //+3 Cards
        -:  789:      for (i = 0; i < 3; i++)
        -:  790:	{
        -:  791:	  drawCard(currentPlayer, state);
        -:  792:	}
        -:  793:			
        -:  794:      //discard card from hand
        -:  795:      discardCard(handPos, currentPlayer, state, 0);
        -:  796:      return 0;
        -:  797:	*/
        -:  798:		
        -:  799:    case baron:
    #####:  800:      state->numBuys++;//Increase buys by 1!
    #####:  801:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  802:	int p = 0;//Iterator for hand!
    #####:  803:	int card_not_discarded = 1;//Flag for discard set!
    #####:  804:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  805:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  806:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  807:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  808:	    state->discardCount[currentPlayer]++;
    #####:  809:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  810:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  811:	    }
    #####:  812:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  813:	    state->handCount[currentPlayer]--;
    #####:  814:	    card_not_discarded = 0;//Exit the loop
        -:  815:	  }
    #####:  816:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  817:	    if(DEBUG) {
        -:  818:	      printf("No estate cards in your hand, invalid choice\n");
        -:  819:	      printf("Must gain an estate if there are any\n");
        -:  820:	    }
    #####:  821:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  822:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  823:	      state->supplyCount[estate]--;//Decrement estates
    #####:  824:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  825:		isGameOver(state);
call    0 never executed
        -:  826:	      }
        -:  827:	    }
    #####:  828:	    card_not_discarded = 0;//Exit the loop
        -:  829:	  }
        -:  830:			    
        -:  831:	  else{
    #####:  832:	    p++;//Next card
        -:  833:	  }
        -:  834:	}
        -:  835:      }
        -:  836:			    
        -:  837:      else{
    #####:  838:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  839:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  840:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  841:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  842:	    isGameOver(state);
call    0 never executed
        -:  843:	  }
        -:  844:	}
        -:  845:      }
        -:  846:	    
        -:  847:      
    #####:  848:      return 0;
        -:  849:		
        -:  850:    case great_hall:
        -:  851:      //+1 Card
    #####:  852:      drawCard(currentPlayer, state);
call    0 never executed
        -:  853:			
        -:  854:      //+1 Actions
    #####:  855:      state->numActions++;
        -:  856:			
        -:  857:      //discard card from hand
    #####:  858:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  859:      return 0;
        -:  860:		
        -:  861:    case minion:
        -:  862:      //+1 action
    #####:  863:      state->numActions++;
        -:  864:			
        -:  865:      //discard card from hand
    #####:  866:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  867:			
    #####:  868:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  869:	{
    #####:  870:	  state->coins = state->coins + 2;
        -:  871:	}
        -:  872:			
    #####:  873:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  874:	{
        -:  875:	  //discard hand
    #####:  876:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  877:	    {
    #####:  878:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  879:	    }
        -:  880:				
        -:  881:	  //draw 4
    #####:  882:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  883:	    {
    #####:  884:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  885:	    }
        -:  886:				
        -:  887:	  //other players discard hand and redraw if hand size > 4
    #####:  888:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  889:	    {
    #####:  890:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  891:		{
    #####:  892:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  893:		    {
        -:  894:		      //discard hand
    #####:  895:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  896:			{
    #####:  897:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  898:			}
        -:  899:							
        -:  900:		      //draw 4
    #####:  901:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  902:			{
    #####:  903:			  drawCard(i, state);
call    0 never executed
        -:  904:			}
        -:  905:		    }
        -:  906:		}
        -:  907:	    }
        -:  908:				
        -:  909:	}
    #####:  910:      return 0;
        -:  911:		
        -:  912:    case steward:
    #####:  913:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  914:	{
        -:  915:	  //+2 cards
    #####:  916:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  917:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  918:	}
    #####:  919:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  920:	{
        -:  921:	  //+2 coins
    #####:  922:	  state->coins = state->coins + 2;
        -:  923:	}
        -:  924:      else
        -:  925:	{
        -:  926:	  //trash 2 cards in hand
    #####:  927:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  928:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  929:	}
        -:  930:			
        -:  931:      //discard card from hand
    #####:  932:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  933:      return 0;
        -:  934:		
        -:  935:    case tribute:
    #####:  936:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  937:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  938:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  939:	  state->deckCount[nextPlayer]--;
        -:  940:	}
    #####:  941:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  942:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  943:	  state->discardCount[nextPlayer]--;
        -:  944:	}
        -:  945:	else{
        -:  946:	  //No Card to Reveal
        -:  947:	  if (DEBUG){
        -:  948:	    printf("No cards to reveal\n");
        -:  949:	  }
        -:  950:	}
        -:  951:      }
        -:  952:	    
        -:  953:      else{
    #####:  954:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  955:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  956:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  957:	    state->deckCount[nextPlayer]++;
    #####:  958:	    state->discard[nextPlayer][i] = -1;
    #####:  959:	    state->discardCount[nextPlayer]--;
        -:  960:	  }
        -:  961:			    
    #####:  962:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  963:	} 
    #####:  964:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  965:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  966:	state->deckCount[nextPlayer]--;
    #####:  967:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  968:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  969:	state->deckCount[nextPlayer]--;
        -:  970:      }    
        -:  971:		       
    #####:  972:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  973:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  974:	state->playedCardCount++;
    #####:  975:	tributeRevealedCards[1] = -1;
        -:  976:      }
        -:  977:
    #####:  978:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  979:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  980:	  state->coins += 2;
        -:  981:	}
        -:  982:		    
    #####:  983:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  984:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  985:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  986:	}
        -:  987:	else{//Action Card
    #####:  988:	  state->numActions = state->numActions + 2;
        -:  989:	}
        -:  990:      }
        -:  991:	    
    #####:  992:      return 0;
        -:  993:		
        -:  994:    case ambassador:
    #####:  995:      j = 0;		//used to check if player has enough cards to discard
        -:  996:
    #####:  997:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  998:	{
    #####:  999:	  return -1;				
        -: 1000:	}
        -: 1001:
    #####: 1002:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1003:	{
    #####: 1004:	  return -1;
        -: 1005:	}
        -: 1006:
    #####: 1007:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1008:	{
    #####: 1009:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1010:	    {
    #####: 1011:	      j++;
        -: 1012:	    }
        -: 1013:	}
    #####: 1014:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1015:	{
    #####: 1016:	  return -1;				
        -: 1017:	}
        -: 1018:
        -: 1019:      if (DEBUG) 
        -: 1020:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1021:
        -: 1022:      //increase supply count for choosen card by amount being discarded
    #####: 1023:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1024:			
        -: 1025:      //each other player gains a copy of revealed card
    #####: 1026:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1027:	{
    #####: 1028:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1029:	    {
    #####: 1030:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1031:	    }
        -: 1032:	}
        -: 1033:
        -: 1034:      //discard played card from hand
    #####: 1035:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1036:
        -: 1037:      //trash copies of cards returned to supply
    #####: 1038:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1039:	{
    #####: 1040:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1041:	    {
    #####: 1042:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1043:		{
    #####: 1044:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1045:		  break;
        -: 1046:		}
        -: 1047:	    }
        -: 1048:	}			
        -: 1049:
    #####: 1050:      return 0;
        -: 1051:		
        -: 1052:    case cutpurse:
        -: 1053:
    #####: 1054:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1055:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1056:	{
    #####: 1057:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1058:	    {
    #####: 1059:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1060:		{
    #####: 1061:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1062:		    {
    #####: 1063:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1064:		      break;
        -: 1065:		    }
    #####: 1066:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1067:		    {
    #####: 1068:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1069:			{
        -: 1070:			  if (DEBUG)
        -: 1071:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1072:			}	
    #####: 1073:		      break;
        -: 1074:		    }		
        -: 1075:		}
        -: 1076:					
        -: 1077:	    }
        -: 1078:				
        -: 1079:	}				
        -: 1080:
        -: 1081:      //discard played card from hand
    #####: 1082:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1083:
    #####: 1084:      return 0;
        -: 1085:
        -: 1086:		
        -: 1087:    case embargo: 
        -: 1088:      //+2 Coins
    #####: 1089:      state->coins = state->coins + 2;
        -: 1090:			
        -: 1091:      //see if selected pile is in play
    #####: 1092:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1093:	{
    #####: 1094:	  return -1;
        -: 1095:	}
        -: 1096:			
        -: 1097:      //add embargo token to selected supply pile
    #####: 1098:      state->embargoTokens[choice1]++;
        -: 1099:			
        -: 1100:      //trash card
    #####: 1101:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1102:      return 0;
        -: 1103:		
        -: 1104:    case salvager:
        -: 1105:      //+1 buy
    #####: 1106:      state->numBuys++;
        -: 1107:			
    #####: 1108:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1109:	{
        -: 1110:	  //gain coins equal to trashed card
    #####: 1111:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1112:	  //trash card
    #####: 1113:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1114:	}
        -: 1115:			
        -: 1116:      //discard card
    #####: 1117:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1118:      return 0;
        -: 1119:		
        -: 1120:    case sea_hag:
    #####: 1121:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1122:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1123:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1124:	  state->discardCount[i]++;
    #####: 1125:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1126:	}
        -: 1127:      }
    #####: 1128:      return 0;
        -: 1129:		
        -: 1130:    case treasure_map:
        -: 1131:      //search hand for another treasure_map
    #####: 1132:      index = -1;
    #####: 1133:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1134:	{
    #####: 1135:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1136:	    {
    #####: 1137:	      index = i;
    #####: 1138:	      break;
        -: 1139:	    }
        -: 1140:	}
    #####: 1141:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1142:	{
        -: 1143:	  //trash both treasure cards
    #####: 1144:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1145:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1146:
        -: 1147:	  //gain 4 Gold cards
    #####: 1148:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1149:	    {
    #####: 1150:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1151:	    }
        -: 1152:				
        -: 1153:	  //return success
    #####: 1154:	  return 1;
        -: 1155:	}
        -: 1156:			
        -: 1157:      //no second treasure_map found in hand
    #####: 1158:      return -1;
        -: 1159:    }
        -: 1160:
        -: 1161:    //Add refactored functions for selected card enums
    #####: 1162:    if(card == smithy)
branch  0 never executed
branch  1 never executed
        -: 1163:    {
    #####: 1164:    	int result = cardSmithy(currentPlayer, state, handPos);
call    0 never executed
    #####: 1165:    	if ((result == 0))
branch  0 never executed
branch  1 never executed
        -: 1166:    	{
    #####: 1167:    		return 0;
        -: 1168:    	} else
        -: 1169:    		{
    #####: 1170:    			return -1;
        -: 1171:    		}
        -: 1172:    }
        -: 1173:
    #####: 1174:    if(card == adventurer)
branch  0 never executed
branch  1 never executed
        -: 1175:    {
    #####: 1176:    	int result = cardAdventurer(currentPlayer, state);
call    0 never executed
    #####: 1177:    	if ((result == 0))
branch  0 never executed
branch  1 never executed
        -: 1178:    	{
    #####: 1179:    		return 0;
        -: 1180:    	} else
        -: 1181:    		{
    #####: 1182:    			return -1;
        -: 1183:    		}
        -: 1184:    }
        -: 1185:	
    #####: 1186:	if(card == village)
branch  0 never executed
branch  1 never executed
        -: 1187:    {
    #####: 1188:    	int result = cardVillage(currentPlayer, state, handPos);
call    0 never executed
    #####: 1189:    	if ((result == 0))
branch  0 never executed
branch  1 never executed
        -: 1190:    	{
    #####: 1191:    		return 0;
        -: 1192:    	} else
        -: 1193:    		{
    #####: 1194:    			return -1;
        -: 1195:    		}
        -: 1196:    }
        -: 1197:	
    #####: 1198:	if(card == council_room)
branch  0 never executed
branch  1 never executed
        -: 1199:    {
    #####: 1200:    	int result = cardCouncil_room(currentPlayer, state, handPos);
call    0 never executed
    #####: 1201:    	if ((result == 0))
branch  0 never executed
branch  1 never executed
        -: 1202:    	{
    #####: 1203:    		return 0;
        -: 1204:    	} else
        -: 1205:    		{
    #####: 1206:    			return -1;
        -: 1207:    		}
        -: 1208:    }
        -: 1209:
    #####: 1210:    if(card == outpost)
branch  0 never executed
branch  1 never executed
        -: 1211:    {
    #####: 1212:    	int result = cardOutpost(currentPlayer, state, handPos);
call    0 never executed
    #####: 1213:    	if ((result == 0))
branch  0 never executed
branch  1 never executed
        -: 1214:    	{
    #####: 1215:    		return 0;
        -: 1216:    	} else
        -: 1217:    		{
    #####: 1218:    			return -1;
        -: 1219:    		}
        -: 1220:    }
        -: 1221:
    #####: 1222:  return -1;
        -: 1223:}
        -: 1224:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1225:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1226:{
        -: 1227:	
        -: 1228:  //if card is not trashed, added to Played pile 
    #####: 1229:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1230:    {
        -: 1231:      //add card to played pile
    #####: 1232:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1233:      state->playedCardCount++;
        -: 1234:    }
        -: 1235:	
        -: 1236:  //set played card to -1
    #####: 1237:  state->hand[currentPlayer][handPos] = -1;
        -: 1238:	
        -: 1239:  //remove card from player's hand
    #####: 1240:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1241:    {
        -: 1242:      //reduce number of cards in hand
    #####: 1243:      state->handCount[currentPlayer]--;
        -: 1244:    }
    #####: 1245:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1246:    {
        -: 1247:      //reduce number of cards in hand
    #####: 1248:      state->handCount[currentPlayer]--;
        -: 1249:    }
        -: 1250:  else 	
        -: 1251:    {
        -: 1252:      //replace discarded card with last card in hand
    #####: 1253:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1254:      //set last card to -1
    #####: 1255:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1256:      //reduce number of cards in hand
    #####: 1257:      state->handCount[currentPlayer]--;
        -: 1258:    }
        -: 1259:	
    #####: 1260:  return 0;
        -: 1261:}
        -: 1262:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1263:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1264:{
        -: 1265:  //Note: supplyPos is enum of choosen card
        -: 1266:	
        -: 1267:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1268:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1269:    {
    #####: 1270:      return -1;
        -: 1271:    }
        -: 1272:	
        -: 1273:  //added card for [whoseTurn] current player:
        -: 1274:  // toFlag = 0 : add to discard
        -: 1275:  // toFlag = 1 : add to deck
        -: 1276:  // toFlag = 2 : add to hand
        -: 1277:
    #####: 1278:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1279:    {
    #####: 1280:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1281:      state->deckCount[player]++;
        -: 1282:    }
    #####: 1283:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1284:    {
    #####: 1285:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1286:      state->handCount[player]++;
        -: 1287:    }
        -: 1288:  else
        -: 1289:    {
    #####: 1290:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1291:      state->discardCount[player]++;
        -: 1292:    }
        -: 1293:	
        -: 1294:  //decrease number in supply pile
    #####: 1295:  state->supplyCount[supplyPos]--;
        -: 1296:	 
    #####: 1297:  return 0;
        -: 1298:}
        -: 1299:
function updateCoins called 4 returned 100% blocks executed 82%
        4: 1300:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1301:{
        -: 1302:  int i;
        -: 1303:	
        -: 1304:  //reset coin count
        4: 1305:  state->coins = 0;
        -: 1306:
        -: 1307:  //add coins for each Treasure card in player's hand
       24: 1308:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1309:    {
       20: 1310:      if (state->hand[player][i] == copper)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -: 1311:	{
       15: 1312:	  state->coins += 1;
        -: 1313:	}
        5: 1314:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1315:	{
    #####: 1316:	  state->coins += 2;
        -: 1317:	}
        5: 1318:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1319:	{
    #####: 1320:	  state->coins += 3;
        -: 1321:	}	
        -: 1322:    }	
        -: 1323:
        -: 1324:  //add bonus
        4: 1325:  state->coins += bonus;
        -: 1326:
        4: 1327:  return 0;
        -: 1328:}
        -: 1329:
function cardSmithy called 0 returned 0% blocks executed 0%
    #####: 1330:int cardSmithy(int currentPlayer, struct gameState *state, int handPos)
        -: 1331:{
        -: 1332:	//+3 Cards in hand
        -: 1333:	int i;
    #####: 1334:	for(i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1335:	{
    #####: 1336:		drawCard(currentPlayer, state);
call    0 never executed
        -: 1337:	}
        -: 1338:
    #####: 1339:	discardCard(handPos, currentPlayer, state, i);
call    0 never executed
    #####: 1340:	return 0;
        -: 1341:}
        -: 1342:
function cardAdventurer called 5 returned 100% blocks executed 43%
        5: 1343:int cardAdventurer(int currentPlayer, struct gameState *state)
        -: 1344:{
        -: 1345:	int drawntreasure;
        -: 1346:	int cardDrawn;
        -: 1347:	int z;
        -: 1348:	int temphand[MAX_HAND];
        -: 1349:
       10: 1350:	while(drawntreasure<2)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -: 1351:	{
    #####: 1352:		if(state->deckCount[currentPlayer] < 1)
branch  0 never executed
branch  1 never executed
        -: 1353:			{
    #####: 1354:				shuffle(currentPlayer, state);
call    0 never executed
        -: 1355:			}
        -: 1356:
    #####: 1357:		drawCard(currentPlayer, state);
call    0 never executed
    #####: 1358:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
    #####: 1359:		if (cardDrawn == silver ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1360:			cardDrawn == copper)
        -: 1361:			{
    #####: 1362:				drawntreasure ++;
        -: 1363:			}
        -: 1364:		else{
    #####: 1365:			temphand[z] = cardDrawn;
    #####: 1366:			state->handCount[currentPlayer]--;
    #####: 1367:			z++;
        -: 1368:		}
        -: 1369:	}
        -: 1370:
       10: 1371:	while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####: 1372:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1];
    #####: 1373:		z=z-1;
        -: 1374:	}
        5: 1375:	return 0;
        -: 1376:}
        -: 1377:
function cardVillage called 0 returned 0% blocks executed 0%
    #####: 1378:int cardVillage(int currentPlayer, struct gameState *state, int handPos)
        -: 1379:{
        -: 1380:	//Draw one card
    #####: 1381:	drawCard(currentPlayer, state);
call    0 never executed
        -: 1382:
        -: 1383:	//Gain two actions
    #####: 1384:	state->numActions = state->numPlayers + 2;
        -: 1385:
        -: 1386:	//discard the played card from that hand
    #####: 1387:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1388:
    #####: 1389:	return 0;
        -: 1390:}
        -: 1391:
function cardCouncil_room called 0 returned 0% blocks executed 0%
    #####: 1392:int cardCouncil_room(int currentPlayer, struct gameState *state, int handPos)
        -: 1393:{
        -: 1394:	int i;
        -: 1395:	int p;
        -: 1396:	
        -: 1397:	//Draw 4 cards
    #####: 1398:	for(i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1399:	{
    #####: 1400:		drawCard(currentPlayer, state);
call    0 never executed
        -: 1401:	}
        -: 1402:
        -: 1403:	//+1 buy
    #####: 1404:	state->numBuys++;
        -: 1405:
        -: 1406:	//Each other player draws a card
    #####: 1407:	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1408:	{
    #####: 1409:		if(p != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1410:		{
    #####: 1411:			drawCard(i, state);
call    0 never executed
        -: 1412:		}
        -: 1413:	}
        -: 1414:
        -: 1415:	//put played card in discard pile
    #####: 1416:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1417:
    #####: 1418:	return 0;
        -: 1419:}
        -: 1420:
function cardOutpost called 0 returned 0% blocks executed 0%
    #####: 1421:int cardOutpost(int currentPlayer, struct gameState *state, int handPos)
        -: 1422:{
        -: 1423:	//check outpost flag
        -: 1424:	int i;
    #####: 1425:	i = state->outpostPlayed;
        -: 1426:
        -: 1427:	//set outpost flag
    #####: 1428:	if (i != NULL)
branch  0 never executed
branch  1 never executed
        -: 1429:	{
    #####: 1430:		state->outpostPlayed++;		
        -: 1431:	}
        -: 1432:
        -: 1433:	//discard card
    #####: 1434:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1435:	return 0;
        -: 1436:}
        -: 1437:
        -: 1438:
        -: 1439://end of dominion.c
        -: 1440:

Running test!
Test# 1

Function Tested: cardAdventurer(0, &state);

Cards in starting hand: 
11, 17, 1, 1, 12, 16, 1, 
Random Seed: 10000
Failed Item(s): 
Invalid draw from deck. 

Total Tests: 1
Total Passed: 0
Total Failed: 1
File 'dominion.c'
Lines executed:16.09% of 578
Branches executed:16.20% of 432
Taken at least once:12.73% of 432
Calls executed:7.37% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 30 returned 100% blocks executed 83%
       30:    8:int compare(const void* a, const void* b) {
       30:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
       30:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
        8:   12:    return -1;
       22:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 1 returned 100% blocks executed 88%
        1:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        1:   44:  SelectStream(1);
call    0 returned 100%
        1:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        1:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        1:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       11:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      110:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        1:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        1:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        1:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  102:  state->supplyCount[silver] = 40;
        1:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       21:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
      165:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
      155:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       10:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
        2:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
        9:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       10:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      145:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
        3:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
        2:  140:      state->deckCount[i] = 0;
        8:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
        6:  143:	  state->deck[i][j] = estate;
        6:  144:	  state->deckCount[i]++;
        -:  145:	}
       16:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       14:  148:	  state->deck[i][j] = copper;
       14:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
        3:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
        2:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
        3:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        2:  166:      state->handCount[i] = 0;
        2:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       28:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
       27:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        1:  182:  state->outpostPlayed = 0;
        1:  183:  state->phase = 0;
        1:  184:  state->numActions = 1;
        1:  185:  state->numBuys = 1;
        1:  186:  state->playedCardCount = 0;
        1:  187:  state->whoseTurn = 0;
        1:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
        6:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        1:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        1:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 2 returned 100% blocks executed 94%
        2:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        2:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        2:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
        2:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       24:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       20:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
       20:  216:    newDeck[newDeckPos] = state->deck[player][card];
       20:  217:    newDeckPos++;
       70:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
       50:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       20:  221:    state->deckCount[player]--;
        -:  222:  }
       22:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       20:  224:    state->deck[player][i] = newDeck[i];
       20:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        2:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 5 returned 100% blocks executed 38%
        5:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
        5:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
        5:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
        5:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  576:    state->deckCount[player]--;
        5:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
        5:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    #####:  653:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    #####:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        -:  658:  //int drawntreasure=0;
        -:  659:  //int cardDrawn;
        -:  660:  //int z = 0;// this is the counter for the temp hand
    #####:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    #####:  667:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
        -:  668:    {
        -:  669:						
        -:  670:    case feast:
        -:  671:      //gain card with cost up to 5
        -:  672:      //Backup hand
    #####:  673:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  674:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  675:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  676:      }
        -:  677:      //Backup hand
        -:  678:
        -:  679:      //Update Coins for Buy
    #####:  680:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  681:      x = 1;//Condition to loop on
    #####:  682:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  683:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  684:	  if (DEBUG)
        -:  685:	    printf("None of that card left, sorry!\n");
        -:  686:
        -:  687:	  if (DEBUG){
        -:  688:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  689:	  }
        -:  690:	}
    #####:  691:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  692:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  693:
        -:  694:	  if (DEBUG){
        -:  695:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  696:	  }
        -:  697:	}
        -:  698:	else{
        -:  699:
        -:  700:	  if (DEBUG){
        -:  701:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  702:	  }
        -:  703:
    #####:  704:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  705:	  x = 0;//No more buying cards
        -:  706:
        -:  707:	  if (DEBUG){
        -:  708:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  709:	  }
        -:  710:
        -:  711:	}
        -:  712:      }     
        -:  713:
        -:  714:      //Reset Hand
    #####:  715:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  716:	state->hand[currentPlayer][i] = temphand[i];
    #####:  717:	temphand[i] = -1;
        -:  718:      }
        -:  719:      //Reset Hand
        -:  720:      			
    #####:  721:      return 0;
        -:  722:			
        -:  723:    case gardens:
    #####:  724:      return -1;
        -:  725:			
        -:  726:    case mine:
    #####:  727:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  728:
    #####:  729:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  730:	{
    #####:  731:	  return -1;
        -:  732:	}
        -:  733:		
    #####:  734:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  735:	{
    #####:  736:	  return -1;
        -:  737:	}
        -:  738:
    #####:  739:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  740:	{
    #####:  741:	  return -1;
        -:  742:	}
        -:  743:
    #####:  744:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  745:
        -:  746:      //discard card from hand
    #####:  747:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  748:
        -:  749:      //discard trashed card
    #####:  750:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  751:	{
    #####:  752:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  753:	    {
    #####:  754:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  755:	      break;
        -:  756:	    }
        -:  757:	}
        -:  758:			
    #####:  759:      return 0;
        -:  760:			
        -:  761:    case remodel:
    #####:  762:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  763:
    #####:  764:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  765:	{
    #####:  766:	  return -1;
        -:  767:	}
        -:  768:
    #####:  769:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  770:
        -:  771:      //discard card from hand
    #####:  772:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  773:
        -:  774:      //discard trashed card
    #####:  775:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  776:	{
    #####:  777:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  778:	    {
    #####:  779:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  780:	      break;
        -:  781:	    }
        -:  782:	}
        -:  783:
        -:  784:
    #####:  785:      return 0;
        -:  786:		
        -:  787:    /*case smithy:
        -:  788:      //+3 Cards
        -:  789:      for (i = 0; i < 3; i++)
        -:  790:	{
        -:  791:	  drawCard(currentPlayer, state);
        -:  792:	}
        -:  793:			
        -:  794:      //discard card from hand
        -:  795:      discardCard(handPos, currentPlayer, state, 0);
        -:  796:      return 0;
        -:  797:	*/
        -:  798:		
        -:  799:    case baron:
    #####:  800:      state->numBuys++;//Increase buys by 1!
    #####:  801:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  802:	int p = 0;//Iterator for hand!
    #####:  803:	int card_not_discarded = 1;//Flag for discard set!
    #####:  804:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  805:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  806:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  807:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  808:	    state->discardCount[currentPlayer]++;
    #####:  809:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  810:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  811:	    }
    #####:  812:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  813:	    state->handCount[currentPlayer]--;
    #####:  814:	    card_not_discarded = 0;//Exit the loop
        -:  815:	  }
    #####:  816:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  817:	    if(DEBUG) {
        -:  818:	      printf("No estate cards in your hand, invalid choice\n");
        -:  819:	      printf("Must gain an estate if there are any\n");
        -:  820:	    }
    #####:  821:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  822:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  823:	      state->supplyCount[estate]--;//Decrement estates
    #####:  824:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  825:		isGameOver(state);
call    0 never executed
        -:  826:	      }
        -:  827:	    }
    #####:  828:	    card_not_discarded = 0;//Exit the loop
        -:  829:	  }
        -:  830:			    
        -:  831:	  else{
    #####:  832:	    p++;//Next card
        -:  833:	  }
        -:  834:	}
        -:  835:      }
        -:  836:			    
        -:  837:      else{
    #####:  838:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  839:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  840:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  841:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  842:	    isGameOver(state);
call    0 never executed
        -:  843:	  }
        -:  844:	}
        -:  845:      }
        -:  846:	    
        -:  847:      
    #####:  848:      return 0;
        -:  849:		
        -:  850:    case great_hall:
        -:  851:      //+1 Card
    #####:  852:      drawCard(currentPlayer, state);
call    0 never executed
        -:  853:			
        -:  854:      //+1 Actions
    #####:  855:      state->numActions++;
        -:  856:			
        -:  857:      //discard card from hand
    #####:  858:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  859:      return 0;
        -:  860:		
        -:  861:    case minion:
        -:  862:      //+1 action
    #####:  863:      state->numActions++;
        -:  864:			
        -:  865:      //discard card from hand
    #####:  866:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  867:			
    #####:  868:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  869:	{
    #####:  870:	  state->coins = state->coins + 2;
        -:  871:	}
        -:  872:			
    #####:  873:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  874:	{
        -:  875:	  //discard hand
    #####:  876:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  877:	    {
    #####:  878:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  879:	    }
        -:  880:				
        -:  881:	  //draw 4
    #####:  882:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  883:	    {
    #####:  884:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  885:	    }
        -:  886:				
        -:  887:	  //other players discard hand and redraw if hand size > 4
    #####:  888:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  889:	    {
    #####:  890:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  891:		{
    #####:  892:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  893:		    {
        -:  894:		      //discard hand
    #####:  895:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  896:			{
    #####:  897:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  898:			}
        -:  899:							
        -:  900:		      //draw 4
    #####:  901:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  902:			{
    #####:  903:			  drawCard(i, state);
call    0 never executed
        -:  904:			}
        -:  905:		    }
        -:  906:		}
        -:  907:	    }
        -:  908:				
        -:  909:	}
    #####:  910:      return 0;
        -:  911:		
        -:  912:    case steward:
    #####:  913:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  914:	{
        -:  915:	  //+2 cards
    #####:  916:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  917:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  918:	}
    #####:  919:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  920:	{
        -:  921:	  //+2 coins
    #####:  922:	  state->coins = state->coins + 2;
        -:  923:	}
        -:  924:      else
        -:  925:	{
        -:  926:	  //trash 2 cards in hand
    #####:  927:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  928:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  929:	}
        -:  930:			
        -:  931:      //discard card from hand
    #####:  932:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  933:      return 0;
        -:  934:		
        -:  935:    case tribute:
    #####:  936:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  937:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  938:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  939:	  state->deckCount[nextPlayer]--;
        -:  940:	}
    #####:  941:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  942:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  943:	  state->discardCount[nextPlayer]--;
        -:  944:	}
        -:  945:	else{
        -:  946:	  //No Card to Reveal
        -:  947:	  if (DEBUG){
        -:  948:	    printf("No cards to reveal\n");
        -:  949:	  }
        -:  950:	}
        -:  951:      }
        -:  952:	    
        -:  953:      else{
    #####:  954:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  955:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  956:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  957:	    state->deckCount[nextPlayer]++;
    #####:  958:	    state->discard[nextPlayer][i] = -1;
    #####:  959:	    state->discardCount[nextPlayer]--;
        -:  960:	  }
        -:  961:			    
    #####:  962:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  963:	} 
    #####:  964:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  965:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  966:	state->deckCount[nextPlayer]--;
    #####:  967:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  968:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  969:	state->deckCount[nextPlayer]--;
        -:  970:      }    
        -:  971:		       
    #####:  972:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  973:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  974:	state->playedCardCount++;
    #####:  975:	tributeRevealedCards[1] = -1;
        -:  976:      }
        -:  977:
    #####:  978:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  979:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  980:	  state->coins += 2;
        -:  981:	}
        -:  982:		    
    #####:  983:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  984:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  985:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  986:	}
        -:  987:	else{//Action Card
    #####:  988:	  state->numActions = state->numActions + 2;
        -:  989:	}
        -:  990:      }
        -:  991:	    
    #####:  992:      return 0;
        -:  993:		
        -:  994:    case ambassador:
    #####:  995:      j = 0;		//used to check if player has enough cards to discard
        -:  996:
    #####:  997:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  998:	{
    #####:  999:	  return -1;				
        -: 1000:	}
        -: 1001:
    #####: 1002:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1003:	{
    #####: 1004:	  return -1;
        -: 1005:	}
        -: 1006:
    #####: 1007:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1008:	{
    #####: 1009:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1010:	    {
    #####: 1011:	      j++;
        -: 1012:	    }
        -: 1013:	}
    #####: 1014:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1015:	{
    #####: 1016:	  return -1;				
        -: 1017:	}
        -: 1018:
        -: 1019:      if (DEBUG) 
        -: 1020:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1021:
        -: 1022:      //increase supply count for choosen card by amount being discarded
    #####: 1023:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1024:			
        -: 1025:      //each other player gains a copy of revealed card
    #####: 1026:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1027:	{
    #####: 1028:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1029:	    {
    #####: 1030:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1031:	    }
        -: 1032:	}
        -: 1033:
        -: 1034:      //discard played card from hand
    #####: 1035:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1036:
        -: 1037:      //trash copies of cards returned to supply
    #####: 1038:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1039:	{
    #####: 1040:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1041:	    {
    #####: 1042:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1043:		{
    #####: 1044:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1045:		  break;
        -: 1046:		}
        -: 1047:	    }
        -: 1048:	}			
        -: 1049:
    #####: 1050:      return 0;
        -: 1051:		
        -: 1052:    case cutpurse:
        -: 1053:
    #####: 1054:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1055:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1056:	{
    #####: 1057:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1058:	    {
    #####: 1059:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1060:		{
    #####: 1061:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1062:		    {
    #####: 1063:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1064:		      break;
        -: 1065:		    }
    #####: 1066:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1067:		    {
    #####: 1068:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1069:			{
        -: 1070:			  if (DEBUG)
        -: 1071:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1072:			}	
    #####: 1073:		      break;
        -: 1074:		    }		
        -: 1075:		}
        -: 1076:					
        -: 1077:	    }
        -: 1078:				
        -: 1079:	}				
        -: 1080:
        -: 1081:      //discard played card from hand
    #####: 1082:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1083:
    #####: 1084:      return 0;
        -: 1085:
        -: 1086:		
        -: 1087:    case embargo: 
        -: 1088:      //+2 Coins
    #####: 1089:      state->coins = state->coins + 2;
        -: 1090:			
        -: 1091:      //see if selected pile is in play
    #####: 1092:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1093:	{
    #####: 1094:	  return -1;
        -: 1095:	}
        -: 1096:			
        -: 1097:      //add embargo token to selected supply pile
    #####: 1098:      state->embargoTokens[choice1]++;
        -: 1099:			
        -: 1100:      //trash card
    #####: 1101:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1102:      return 0;
        -: 1103:		
        -: 1104:    case salvager:
        -: 1105:      //+1 buy
    #####: 1106:      state->numBuys++;
        -: 1107:			
    #####: 1108:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1109:	{
        -: 1110:	  //gain coins equal to trashed card
    #####: 1111:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1112:	  //trash card
    #####: 1113:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1114:	}
        -: 1115:			
        -: 1116:      //discard card
    #####: 1117:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1118:      return 0;
        -: 1119:		
        -: 1120:    case sea_hag:
    #####: 1121:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1122:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1123:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1124:	  state->discardCount[i]++;
    #####: 1125:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1126:	}
        -: 1127:      }
    #####: 1128:      return 0;
        -: 1129:		
        -: 1130:    case treasure_map:
        -: 1131:      //search hand for another treasure_map
    #####: 1132:      index = -1;
    #####: 1133:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1134:	{
    #####: 1135:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1136:	    {
    #####: 1137:	      index = i;
    #####: 1138:	      break;
        -: 1139:	    }
        -: 1140:	}
    #####: 1141:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1142:	{
        -: 1143:	  //trash both treasure cards
    #####: 1144:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1145:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1146:
        -: 1147:	  //gain 4 Gold cards
    #####: 1148:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1149:	    {
    #####: 1150:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1151:	    }
        -: 1152:				
        -: 1153:	  //return success
    #####: 1154:	  return 1;
        -: 1155:	}
        -: 1156:			
        -: 1157:      //no second treasure_map found in hand
    #####: 1158:      return -1;
        -: 1159:    }
        -: 1160:
        -: 1161:    //Add refactored functions for selected card enums
    #####: 1162:    if(card == smithy)
branch  0 never executed
branch  1 never executed
        -: 1163:    {
    #####: 1164:    	int result = cardSmithy(currentPlayer, state, handPos);
call    0 never executed
    #####: 1165:    	if ((result == 0))
branch  0 never executed
branch  1 never executed
        -: 1166:    	{
    #####: 1167:    		return 0;
        -: 1168:    	} else
        -: 1169:    		{
    #####: 1170:    			return -1;
        -: 1171:    		}
        -: 1172:    }
        -: 1173:
    #####: 1174:    if(card == adventurer)
branch  0 never executed
branch  1 never executed
        -: 1175:    {
    #####: 1176:    	int result = cardAdventurer(currentPlayer, state);
call    0 never executed
    #####: 1177:    	if ((result == 0))
branch  0 never executed
branch  1 never executed
        -: 1178:    	{
    #####: 1179:    		return 0;
        -: 1180:    	} else
        -: 1181:    		{
    #####: 1182:    			return -1;
        -: 1183:    		}
        -: 1184:    }
        -: 1185:	
    #####: 1186:	if(card == village)
branch  0 never executed
branch  1 never executed
        -: 1187:    {
    #####: 1188:    	int result = cardVillage(currentPlayer, state, handPos);
call    0 never executed
    #####: 1189:    	if ((result == 0))
branch  0 never executed
branch  1 never executed
        -: 1190:    	{
    #####: 1191:    		return 0;
        -: 1192:    	} else
        -: 1193:    		{
    #####: 1194:    			return -1;
        -: 1195:    		}
        -: 1196:    }
        -: 1197:	
    #####: 1198:	if(card == council_room)
branch  0 never executed
branch  1 never executed
        -: 1199:    {
    #####: 1200:    	int result = cardCouncil_room(currentPlayer, state, handPos);
call    0 never executed
    #####: 1201:    	if ((result == 0))
branch  0 never executed
branch  1 never executed
        -: 1202:    	{
    #####: 1203:    		return 0;
        -: 1204:    	} else
        -: 1205:    		{
    #####: 1206:    			return -1;
        -: 1207:    		}
        -: 1208:    }
        -: 1209:
    #####: 1210:    if(card == outpost)
branch  0 never executed
branch  1 never executed
        -: 1211:    {
    #####: 1212:    	int result = cardOutpost(currentPlayer, state, handPos);
call    0 never executed
    #####: 1213:    	if ((result == 0))
branch  0 never executed
branch  1 never executed
        -: 1214:    	{
    #####: 1215:    		return 0;
        -: 1216:    	} else
        -: 1217:    		{
    #####: 1218:    			return -1;
        -: 1219:    		}
        -: 1220:    }
        -: 1221:
    #####: 1222:  return -1;
        -: 1223:}
        -: 1224:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1225:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1226:{
        -: 1227:	
        -: 1228:  //if card is not trashed, added to Played pile 
    #####: 1229:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1230:    {
        -: 1231:      //add card to played pile
    #####: 1232:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1233:      state->playedCardCount++;
        -: 1234:    }
        -: 1235:	
        -: 1236:  //set played card to -1
    #####: 1237:  state->hand[currentPlayer][handPos] = -1;
        -: 1238:	
        -: 1239:  //remove card from player's hand
    #####: 1240:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1241:    {
        -: 1242:      //reduce number of cards in hand
    #####: 1243:      state->handCount[currentPlayer]--;
        -: 1244:    }
    #####: 1245:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1246:    {
        -: 1247:      //reduce number of cards in hand
    #####: 1248:      state->handCount[currentPlayer]--;
        -: 1249:    }
        -: 1250:  else 	
        -: 1251:    {
        -: 1252:      //replace discarded card with last card in hand
    #####: 1253:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1254:      //set last card to -1
    #####: 1255:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1256:      //reduce number of cards in hand
    #####: 1257:      state->handCount[currentPlayer]--;
        -: 1258:    }
        -: 1259:	
    #####: 1260:  return 0;
        -: 1261:}
        -: 1262:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1263:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1264:{
        -: 1265:  //Note: supplyPos is enum of choosen card
        -: 1266:	
        -: 1267:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1268:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1269:    {
    #####: 1270:      return -1;
        -: 1271:    }
        -: 1272:	
        -: 1273:  //added card for [whoseTurn] current player:
        -: 1274:  // toFlag = 0 : add to discard
        -: 1275:  // toFlag = 1 : add to deck
        -: 1276:  // toFlag = 2 : add to hand
        -: 1277:
    #####: 1278:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1279:    {
    #####: 1280:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1281:      state->deckCount[player]++;
        -: 1282:    }
    #####: 1283:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1284:    {
    #####: 1285:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1286:      state->handCount[player]++;
        -: 1287:    }
        -: 1288:  else
        -: 1289:    {
    #####: 1290:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1291:      state->discardCount[player]++;
        -: 1292:    }
        -: 1293:	
        -: 1294:  //decrease number in supply pile
    #####: 1295:  state->supplyCount[supplyPos]--;
        -: 1296:	 
    #####: 1297:  return 0;
        -: 1298:}
        -: 1299:
function updateCoins called 1 returned 100% blocks executed 82%
        1: 1300:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1301:{
        -: 1302:  int i;
        -: 1303:	
        -: 1304:  //reset coin count
        1: 1305:  state->coins = 0;
        -: 1306:
        -: 1307:  //add coins for each Treasure card in player's hand
        6: 1308:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1309:    {
        5: 1310:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1311:	{
        4: 1312:	  state->coins += 1;
        -: 1313:	}
        1: 1314:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1315:	{
    #####: 1316:	  state->coins += 2;
        -: 1317:	}
        1: 1318:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1319:	{
    #####: 1320:	  state->coins += 3;
        -: 1321:	}	
        -: 1322:    }	
        -: 1323:
        -: 1324:  //add bonus
        1: 1325:  state->coins += bonus;
        -: 1326:
        1: 1327:  return 0;
        -: 1328:}
        -: 1329:
function cardSmithy called 0 returned 0% blocks executed 0%
    #####: 1330:int cardSmithy(int currentPlayer, struct gameState *state, int handPos)
        -: 1331:{
        -: 1332:	//+3 Cards in hand
        -: 1333:	int i;
    #####: 1334:	for(i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -: 1335:	{
    #####: 1336:		drawCard(currentPlayer, state);
call    0 never executed
        -: 1337:	}
        -: 1338:
    #####: 1339:	discardCard(handPos, currentPlayer, state, i);
call    0 never executed
    #####: 1340:	return 0;
        -: 1341:}
        -: 1342:
function cardAdventurer called 1 returned 100% blocks executed 43%
        1: 1343:int cardAdventurer(int currentPlayer, struct gameState *state)
        -: 1344:{
        -: 1345:	int drawntreasure;
        -: 1346:	int cardDrawn;
        -: 1347:	int z;
        -: 1348:	int temphand[MAX_HAND];
        -: 1349:
        2: 1350:	while(drawntreasure<2)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -: 1351:	{
    #####: 1352:		if(state->deckCount[currentPlayer] < 1)
branch  0 never executed
branch  1 never executed
        -: 1353:			{
    #####: 1354:				shuffle(currentPlayer, state);
call    0 never executed
        -: 1355:			}
        -: 1356:
    #####: 1357:		drawCard(currentPlayer, state);
call    0 never executed
    #####: 1358:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
    #####: 1359:		if (cardDrawn == silver ||
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1360:			cardDrawn == copper)
        -: 1361:			{
    #####: 1362:				drawntreasure ++;
        -: 1363:			}
        -: 1364:		else{
    #####: 1365:			temphand[z] = cardDrawn;
    #####: 1366:			state->handCount[currentPlayer]--;
    #####: 1367:			z++;
        -: 1368:		}
        -: 1369:	}
        -: 1370:
        2: 1371:	while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####: 1372:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1];
    #####: 1373:		z=z-1;
        -: 1374:	}
        1: 1375:	return 0;
        -: 1376:}
        -: 1377:
function cardVillage called 0 returned 0% blocks executed 0%
    #####: 1378:int cardVillage(int currentPlayer, struct gameState *state, int handPos)
        -: 1379:{
        -: 1380:	//Draw one card
    #####: 1381:	drawCard(currentPlayer, state);
call    0 never executed
        -: 1382:
        -: 1383:	//Gain two actions
    #####: 1384:	state->numActions = state->numPlayers + 2;
        -: 1385:
        -: 1386:	//discard the played card from that hand
    #####: 1387:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1388:
    #####: 1389:	return 0;
        -: 1390:}
        -: 1391:
function cardCouncil_room called 0 returned 0% blocks executed 0%
    #####: 1392:int cardCouncil_room(int currentPlayer, struct gameState *state, int handPos)
        -: 1393:{
        -: 1394:	int i;
        -: 1395:	int p;
        -: 1396:	
        -: 1397:	//Draw 4 cards
    #####: 1398:	for(i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1399:	{
    #####: 1400:		drawCard(currentPlayer, state);
call    0 never executed
        -: 1401:	}
        -: 1402:
        -: 1403:	//+1 buy
    #####: 1404:	state->numBuys++;
        -: 1405:
        -: 1406:	//Each other player draws a card
    #####: 1407:	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1408:	{
    #####: 1409:		if(p != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1410:		{
    #####: 1411:			drawCard(i, state);
call    0 never executed
        -: 1412:		}
        -: 1413:	}
        -: 1414:
        -: 1415:	//put played card in discard pile
    #####: 1416:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1417:
    #####: 1418:	return 0;
        -: 1419:}
        -: 1420:
function cardOutpost called 0 returned 0% blocks executed 0%
    #####: 1421:int cardOutpost(int currentPlayer, struct gameState *state, int handPos)
        -: 1422:{
        -: 1423:	//check outpost flag
        -: 1424:	int i;
    #####: 1425:	i = state->outpostPlayed;
        -: 1426:
        -: 1427:	//set outpost flag
    #####: 1428:	if (i != NULL)
branch  0 never executed
branch  1 never executed
        -: 1429:	{
    #####: 1430:		state->outpostPlayed++;		
        -: 1431:	}
        -: 1432:
        -: 1433:	//discard card
    #####: 1434:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1435:	return 0;
        -: 1436:}
        -: 1437:
        -: 1438:
        -: 1439://end of dominion.c
        -: 1440:
