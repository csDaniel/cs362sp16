Testing the getCost functionThis test passed: Return values are appropriate
This test passed. 
getCost returned a default value -1 for a card that doesn't exist
File 'dominion.c'
Lines executed:16.37% of 568
Branches executed:22.43% of 419
Taken at least once:13.37% of 419
Calls executed:7.00% of 100
Creating 'dominion.c.gcov'

Testing the gainCard functionSuccess! Card total increased!
Success! Deck total increased!
File 'dominion.c'
Lines executed:18.49% of 568
Branches executed:23.87% of 419
Taken at least once:14.32% of 419
Calls executed:8.00% of 100
Creating 'dominion.c.gcov'

Testing the discardCard functionSuccess! Card total decreased!
Success! Card discarded successfully.
File 'dominion.c'
Lines executed:20.60% of 568
Branches executed:25.30% of 419
Taken at least once:15.51% of 419
Calls executed:8.00% of 100
Creating 'dominion.c.gcov'

Testing the isGameOver function
Game is over, test was successful.
Test passed on acceptable value, game is not over.
File 'dominion.c'
Lines executed:22.01% of 568
Branches executed:27.21% of 419
Taken at least once:16.95% of 419
Calls executed:8.00% of 100
Creating 'dominion.c.gcov'



Testing the Adventurer card.

Current player hand count: 5Adventurer test failed.
 gS.handCount[currPlayer] should be: 7, but is 5 
 afterCoins should be: 6,  but is 4 
 Incorrect treasure drawn.
File 'dominion.c'
Lines executed:24.47% of 568
Branches executed:28.64% of 419
Taken at least once:18.38% of 419
Calls executed:9.00% of 100
Creating 'dominion.c.gcov'



Testing the smithy card

Before Smithy handCount: 5
Smithy test failed.
 Hand Total is 4, but should be: 7File 'dominion.c'
Lines executed:25.53% of 568
Branches executed:29.12% of 419
Taken at least once:18.62% of 419
Calls executed:11.00% of 100
Creating 'dominion.c.gcov'



Testing the Village card.

Before actions: 1
After actions: 4
Village card test passed.
Village action test failed.
File 'dominion.c'
Lines executed:26.94% of 568
Branches executed:29.59% of 419
Taken at least once:19.09% of 419
Calls executed:14.00% of 100
Creating 'dominion.c.gcov'



Testing the Great Hall card.

Before actions: 1
After actions: 2
Great Hall card test passed.
Great Hall action test passed.
File 'dominion.c'
Lines executed:28.70% of 568
Branches executed:35.08% of 419
Taken at least once:19.57% of 419
Calls executed:17.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 300 returned 100% blocks executed 83%
      300:    8:int compare(const void* a, const void* b) {
      300:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:  return 1;
      300:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       80:   12:  return -1;
      220:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:  }
        -:   36:
function initializeGame called 8 returned 100% blocks executed 94%
        8:   37:  int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:    struct gameState *state) {
        -:   39:
        -:   40:      int i;
        -:   41:      int j;
        -:   42:      int it;
        -:   43:      //set up random number generator
        8:   44:      SelectStream(1);
call    0 returned 100%
        8:   45:      PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:      //check number of players
        8:   48:      if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:      {
    #####:   50:        return -1;
        -:   51:      }
        -:   52:
        -:   53:      //set number of players
        8:   54:      state->numPlayers = numPlayers;
        -:   55:
        -:   56:      //check selected kingdom cards are different
       88:   57:      for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:      {
      880:   59:        for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      800:   61:          if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:          {
    #####:   63:            return -1;
        -:   64:          }
        -:   65:        }
        -:   66:      }
        -:   67:
        -:   68:
        -:   69:      //initialize supply
        -:   70:      ///////////////////////////////
        -:   71:
        -:   72:      //set number of Curse cards
        8:   73:      if (numPlayers == 2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   74:      {
        4:   75:        state->supplyCount[curse] = 10;
        -:   76:      }
        4:   77:      else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:      {
        4:   79:        state->supplyCount[curse] = 20;
        -:   80:      }
        -:   81:      else
        -:   82:      {
    #####:   83:        state->supplyCount[curse] = 30;
        -:   84:      }
        -:   85:
        -:   86:      //set number of Victory cards
        8:   87:      if (numPlayers == 2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   88:      {
        4:   89:        state->supplyCount[estate] = 8;
        4:   90:        state->supplyCount[duchy] = 8;
        4:   91:        state->supplyCount[province] = 8;
        -:   92:      }
        -:   93:      else
        -:   94:      {
        4:   95:        state->supplyCount[estate] = 12;
        4:   96:        state->supplyCount[duchy] = 12;
        4:   97:        state->supplyCount[province] = 12;
        -:   98:      }
        -:   99:
        -:  100:      //set number of Treasure cards
        8:  101:      state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  102:      state->supplyCount[silver] = 40;
        8:  103:      state->supplyCount[gold] = 30;
        -:  104:
        -:  105:      //set number of Kingdom cards
      168:  106:      for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:      {
     1320:  108:        for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:        {
     1240:  110:          if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:          {
        -:  112:            //check if card is a 'Victory' Kingdom card
       80:  113:            if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:            {
       32:  115:              if (numPlayers == 2){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        8:  116:                state->supplyCount[i] = 8;
        -:  117:              }
        8:  118:              else{ state->supplyCount[i] = 12; }
        -:  119:            }
        -:  120:            else
        -:  121:            {
       64:  122:              state->supplyCount[i] = 10;
        -:  123:            }
       80:  124:            break;
        -:  125:          }
        -:  126:          else    //card is not in the set choosen for the game
        -:  127:          {
     1160:  128:            state->supplyCount[i] = -1;
        -:  129:          }
        -:  130:        }
        -:  131:
        -:  132:      }
        -:  133:
        -:  134:      ////////////////////////
        -:  135:      //supply intilization complete
        -:  136:
        -:  137:      //set player decks
       28:  138:      for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  139:      {
       20:  140:        state->deckCount[i] = 0;
       80:  141:        for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:        {
       60:  143:          state->deck[i][j] = estate;
       60:  144:          state->deckCount[i]++;
        -:  145:        }
      160:  146:        for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:        {
      140:  148:          state->deck[i][j] = copper;
      140:  149:          state->deckCount[i]++;
        -:  150:        }
        -:  151:      }
        -:  152:
        -:  153:      //shuffle player decks
       28:  154:      for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  155:      {
       20:  156:        if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:        {
    #####:  158:          return -1;
        -:  159:        }
        -:  160:      }
        -:  161:
        -:  162:      //draw player hands
       28:  163:      for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  164:      {
        -:  165:        //initialize hand size to zero
       20:  166:        state->handCount[i] = 0;
       20:  167:        state->discardCount[i] = 0;
        -:  168:        //draw 5 cards
        -:  169:        // for (j = 0; j < 5; j++)
        -:  170:        //	{
        -:  171:        //	  drawCard(i, state);
        -:  172:        //	}
        -:  173:      }
        -:  174:
        -:  175:      //set embargo tokens to 0 for all supply piles
      224:  176:      for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:      {
      216:  178:        state->embargoTokens[i] = 0;
        -:  179:      }
        -:  180:
        -:  181:      //initialize first player's turn
        8:  182:      state->outpostPlayed = 0;
        8:  183:      state->phase = 0;
        8:  184:      state->numActions = 1;
        8:  185:      state->numBuys = 1;
        8:  186:      state->playedCardCount = 0;
        8:  187:      state->whoseTurn = 0;
        8:  188:      state->handCount[state->whoseTurn] = 0;
        -:  189:      //int it; move to top
        -:  190:
        -:  191:      //Moved draw cards to here, only drawing at the start of a turn
       48:  192:      for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       40:  193:        drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:      }
        -:  195:
        8:  196:      updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        8:  198:      return 0;
        -:  199:    }
        -:  200:
function shuffle called 20 returned 100% blocks executed 94%
       20:  201:    int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:      int newDeck[MAX_DECK];
       20:  205:      int newDeckPos = 0;
        -:  206:      int card;
        -:  207:      int i;
        -:  208:
       20:  209:      if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:      return -1;
       20:  211:      qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:      /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      240:  214:      while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      200:  215:        card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      200:  216:        newDeck[newDeckPos] = state->deck[player][card];
      200:  217:        newDeckPos++;
      648:  218:        for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
      448:  219:          state->deck[player][i] = state->deck[player][i+1];
        -:  220:        }
      200:  221:        state->deckCount[player]--;
        -:  222:      }
      220:  223:      for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      200:  224:        state->deck[player][i] = newDeck[i];
      200:  225:        state->deckCount[player]++;
        -:  226:      }
        -:  227:
       20:  228:      return 0;
        -:  229:    }
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:    int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:    {
        -:  233:      int card;
    #####:  234:      int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:      //check if it is the right phase
    #####:  237:      if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:      {
    #####:  239:        return -1;
        -:  240:      }
        -:  241:
        -:  242:      //check if player has enough actions
    #####:  243:      if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:      {
    #####:  245:        return -1;
        -:  246:      }
        -:  247:
        -:  248:      //get card played
    #####:  249:      card = handCard(handPos, state);
call    0 never executed
        -:  250:
        -:  251:      //check if selected card is an action
    #####:  252:      if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:      {
    #####:  254:        return -1;
        -:  255:      }
        -:  256:
        -:  257:      //play card
    #####:  258:      if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:      {
    #####:  260:        return -1;
        -:  261:      }
        -:  262:
        -:  263:      //reduce number of actions
    #####:  264:      state->numActions--;
        -:  265:
        -:  266:      //update coins (Treasure cards may be added with card draws)
    #####:  267:      updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:
    #####:  269:      return 0;
        -:  270:    }
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:    int buyCard(int supplyPos, struct gameState *state) {
        -:  273:      int who;
        -:  274:      if (DEBUG){
        -:  275:        printf("Entering buyCard...\n");
        -:  276:      }
        -:  277:
        -:  278:      // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:      who = state->whoseTurn;
        -:  281:
    #####:  282:      if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:        if (DEBUG)
        -:  284:        printf("You do not have any buys left\n");
    #####:  285:        return -1;
    #####:  286:      } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:        if (DEBUG)
        -:  288:        printf("There are not any of that type of card left\n");
    #####:  289:        return -1;
    #####:  290:      } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:        if (DEBUG)
        -:  292:        printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:        return -1;
        -:  294:      } else {
    #####:  295:        state->phase=1;
        -:  296:        //state->supplyCount[supplyPos]--;
    #####:  297:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:
    #####:  299:        state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:        state->numBuys--;
        -:  301:        if (DEBUG)
        -:  302:        printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:      }
        -:  304:
        -:  305:      //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:      //state->discardCount[who]++;
        -:  307:
    #####:  308:      return 0;
        -:  309:    }
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:    int numHandCards(struct gameState *state) {
    #####:  312:      return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:    }
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:    int handCard(int handPos, struct gameState *state) {
    #####:  316:      int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:      return state->hand[currentPlayer][handPos];
        -:  318:    }
        -:  319:
function supplyCount called 2 returned 100% blocks executed 100%
        2:  320:    int supplyCount(int card, struct gameState *state) {
        2:  321:      return state->supplyCount[card];
        -:  322:    }
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:    int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:      int i;
    #####:  326:      int count = 0;
        -:  327:
    #####:  328:      for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:      {
    #####:  330:        if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:      }
        -:  332:
    #####:  333:      for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:      {
    #####:  335:        if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:      }
        -:  337:
    #####:  338:      for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:      {
    #####:  340:        if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:      }
        -:  342:
    #####:  343:      return count;
        -:  344:    }
        -:  345:
function whoseTurn called 8 returned 100% blocks executed 100%
        8:  346:    int whoseTurn(struct gameState *state) {
        8:  347:      return state->whoseTurn;
        -:  348:    }
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:    int endTurn(struct gameState *state) {
        -:  351:      int k;
        -:  352:      int i;
    #####:  353:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:
        -:  355:      //Discard hand
    #####:  356:      for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:      }
    #####:  360:      state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:      //Code for determining the player
    #####:  363:      if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  364:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:      }
        -:  366:      else{
    #####:  367:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:      }
        -:  369:
    #####:  370:      state->outpostPlayed = 0;
    #####:  371:      state->phase = 0;
    #####:  372:      state->numActions = 1;
    #####:  373:      state->coins = 0;
    #####:  374:      state->numBuys = 1;
    #####:  375:      state->playedCardCount = 0;
    #####:  376:      state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:      //int k; move to top
        -:  379:      //Next player draws hand
    #####:  380:      for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:        drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:      }
        -:  383:
        -:  384:      //Update money
    #####:  385:      updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:      return 0;
        -:  388:    }
        -:  389:
function isGameOver called 3 returned 100% blocks executed 82%
        3:  390:    int isGameOver(struct gameState *state) {
        -:  391:      int i;
        -:  392:      int j;
        -:  393:
        -:  394:      //if stack of Province cards is empty, the game ends
        3:  395:      if (state->supplyCount[province] == 0)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  396:      {
        1:  397:        return 1;
        -:  398:      }
        -:  399:
        -:  400:      //if three supply pile are at 0, the game ends
        2:  401:      j = 0;
       52:  402:      for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:      {
       50:  404:        if (state->supplyCount[i] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  405:        {
    #####:  406:          j++;
        -:  407:        }
        -:  408:      }
        2:  409:      if ( j >= 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  410:      {
    #####:  411:        return 1;
        -:  412:      }
        -:  413:
        2:  414:      return 0;
        -:  415:    }
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:    int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:      int i;
    #####:  420:      int score = 0;
        -:  421:      //score from hand
    #####:  422:      for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:      {
    #####:  424:        if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:        if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:        if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:        if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:        if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:      }
        -:  431:
        -:  432:      //score from discard
    #####:  433:      for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:      {
    #####:  435:        if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:        if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:        if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:        if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:        if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:      }
        -:  442:
        -:  443:      //score from deck
    #####:  444:      for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:      {
    #####:  446:        if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:        if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:        if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:        if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:        if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:      }
        -:  453:
    #####:  454:      return score;
        -:  455:    }
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:    int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:      int i;
        -:  459:      int j;
        -:  460:      int highScore;
        -:  461:      int currentPlayer;
        -:  462:
        -:  463:      //get score for each player
    #####:  464:      for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:      {
        -:  466:        //set unused player scores to -9999
    #####:  467:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:        {
    #####:  469:          players[i] = -9999;
        -:  470:        }
        -:  471:        else
        -:  472:        {
    #####:  473:          players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:        }
        -:  475:      }
        -:  476:
        -:  477:      //find highest score
    #####:  478:      j = 0;
    #####:  479:      for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:      {
    #####:  481:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:        {
    #####:  483:          j = i;
        -:  484:        }
        -:  485:      }
    #####:  486:      highScore = players[j];
        -:  487:
        -:  488:      //add 1 to players who had less turns
    #####:  489:      currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:      for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:      {
    #####:  492:        if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:        {
    #####:  494:          players[i]++;
        -:  495:        }
        -:  496:      }
        -:  497:
        -:  498:      //find new highest score
    #####:  499:      j = 0;
    #####:  500:      for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:      {
    #####:  502:        if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:        {
    #####:  504:          j = i;
        -:  505:        }
        -:  506:      }
    #####:  507:      highScore = players[j];
        -:  508:
        -:  509:      //set winners in array to 1 and rest to 0
    #####:  510:      for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:      {
    #####:  512:        if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:        {
    #####:  514:          players[i] = 1;
        -:  515:        }
        -:  516:        else
        -:  517:        {
    #####:  518:          players[i] = 0;
        -:  519:        }
        -:  520:      }
        -:  521:
    #####:  522:      return 0;
        -:  523:    }
        -:  524:
function drawCard called 42 returned 100% blocks executed 38%
       42:  525:    int drawCard(int player, struct gameState *state)
        -:  526:    {	int count;
        -:  527:      int deckCounter;
       42:  528:      if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:
        -:  530:        //Step 1 Shuffle the discard pile back into a deck
        -:  531:        int i;
        -:  532:        //Move discard to deck
    #####:  533:        for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:          state->deck[player][i] = state->discard[player][i];
    #####:  535:          state->discard[player][i] = -1;
        -:  536:        }
        -:  537:
    #####:  538:        state->deckCount[player] = state->discardCount[player];
    #####:  539:        state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:        //Shufffle the deck
    #####:  542:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:
        -:  544:        if (DEBUG){//Debug statements
        -:  545:          printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:        }
        -:  547:
    #####:  548:        state->discardCount[player] = 0;
        -:  549:
        -:  550:        //Step 2 Draw Card
    #####:  551:        count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:        if (DEBUG){//Debug statements
        -:  554:          printf("Current hand count: %d\n", count);
        -:  555:        }
        -:  556:
    #####:  557:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:        if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:        return -1;
        -:  561:
    #####:  562:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:        state->deckCount[player]--;
    #####:  564:        state->handCount[player]++;//Increment hand count
        -:  565:      }
        -:  566:
        -:  567:      else{
       42:  568:        int count = state->handCount[player];//Get current hand count for player
        -:  569:        int deckCounter;
        -:  570:        if (DEBUG){//Debug statements
        -:  571:          printf("Current hand count: %d\n", count);
        -:  572:        }
        -:  573:
       42:  574:        deckCounter = state->deckCount[player];//Create holder for the deck count
       42:  575:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       42:  576:        state->deckCount[player]--;
       42:  577:        state->handCount[player]++;//Increment hand count
        -:  578:      }
        -:  579:
       42:  580:      return 0;
        -:  581:    }
        -:  582:
function getCost called 2 returned 100% blocks executed 13%
        2:  583:    int getCost(int cardNumber)
        -:  584:    {
        2:  585:      switch( cardNumber )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 50%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 50%
        -:  586:      {
        -:  587:        case curse:
    #####:  588:        return 0;
        -:  589:        case estate:
    #####:  590:        return 2;
        -:  591:        case duchy:
    #####:  592:        return 5;
        -:  593:        case province:
    #####:  594:        return 8;
        -:  595:        case copper:
    #####:  596:        return 0;
        -:  597:        case silver:
    #####:  598:        return 3;
        -:  599:        case gold:
    #####:  600:        return 6;
        -:  601:        case adventurer:
        1:  602:        return 6;
        -:  603:        case council_room:
    #####:  604:        return 5;
        -:  605:        case feast:
    #####:  606:        return 4;
        -:  607:        case gardens:
    #####:  608:        return 4;
        -:  609:        case mine:
    #####:  610:        return 5;
        -:  611:        case remodel:
    #####:  612:        return 4;
        -:  613:        case smithy:
    #####:  614:        return 4;
        -:  615:        case village:
    #####:  616:        return 3;
        -:  617:        case baron:
    #####:  618:        return 4;
        -:  619:        case great_hall:
    #####:  620:        return 3;
        -:  621:        case minion:
    #####:  622:        return 5;
        -:  623:        case steward:
    #####:  624:        return 3;
        -:  625:        case tribute:
    #####:  626:        return 5;
        -:  627:        case ambassador:
    #####:  628:        return 3;
        -:  629:        case cutpurse:
    #####:  630:        return 4;
        -:  631:        case embargo:
    #####:  632:        return 2;
        -:  633:        case outpost:
    #####:  634:        return 5;
        -:  635:        case salvager:
    #####:  636:        return 4;
        -:  637:        case sea_hag:
    #####:  638:        return 4;
        -:  639:        case treasure_map:
    #####:  640:        return 4;
        -:  641:      }
        -:  642:
        1:  643:      return -1;
        -:  644:    }
        -:  645:
        -:  646:    /***************** Implementation of Five Cards as Functions *****************/
        -:  647:
function playAdventurerCard called 1 returned 100% blocks executed 44%
        1:  648:    int playAdventurerCard(struct gameState *state){
        1:  649:      int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  650:      int drawntreasure;
        -:  651:      int cardDrawn;
        -:  652:      int temphand[MAX_HAND];
        1:  653:      int z = 0;
        -:  654:
        2:  655:      while(drawntreasure<2){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  656:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  657:          shuffle(currentPlayer, state);
call    0 never executed
        -:  658:        }
    #####:  659:        drawCard(currentPlayer, state);
call    0 never executed
    #####:  660:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  661:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  662:        drawntreasure++;
        -:  663:        else{
    #####:  664:          temphand[z]=cardDrawn;
    #####:  665:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  666:          z++;
        -:  667:        }
        -:  668:      }
        2:  669:      while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  670:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  671:        z=z-1;
        -:  672:      }
        -:  673:
        1:  674:      return 0;
        -:  675:
        -:  676:    }
        -:  677:
function playSmithyCard called 1 returned 100% blocks executed 75%
        1:  678:    int playSmithyCard(struct gameState *state, int handPos){
        1:  679:      int currentPlayer = whoseTurn(state);
call    0 returned 100%
        1:  680:      int i = 0;
        -:  681:      //+3 Cards
        1:  682:      for (i = 0; i > 3; i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  683:        drawCard(currentPlayer, state);
call    0 never executed
        -:  684:      }
        -:  685:
        -:  686:      //discard card from hand
        1:  687:      discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
        1:  688:      return 0;
        -:  689:    }
        -:  690:
function playFeastCard called 0 returned 0% blocks executed 0%
    #####:  691:    int playFeastCard(struct gameState *state, int choice1){
    #####:  692:      int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  693:      int i = 0;
        -:  694:      int x;
        -:  695:      int temphand[MAX_HAND];
        -:  696:
        -:  697:      //gain card with cost up to 5
        -:  698:      //Backup hand
    #####:  699:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  700:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  701:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  702:      }
        -:  703:      //Backup hand
        -:  704:
        -:  705:      //Update Coins for Buy
    #####:  706:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  707:      x = 1;//Condition to loop on
    #####:  708:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  709:        if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  710:          if (DEBUG)
        -:  711:          printf("None of that card left, sorry!\n");
        -:  712:          if (DEBUG){
        -:  713:            printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  714:          }
        -:  715:        }
    #####:  716:        else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  717:          printf("That card is too expensive!\n");
call    0 never executed
        -:  718:          if (DEBUG){
        -:  719:            printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  720:          }
        -:  721:        }
        -:  722:        else{
        -:  723:          if (DEBUG){
        -:  724:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  725:          }
        -:  726:
    #####:  727:          x = 0;//No more buying cards
        -:  728:
        -:  729:          if (DEBUG){
        -:  730:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  731:          }
        -:  732:        }
    #####:  733:        gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
        -:  734:      }
        -:  735:      //Reset Hand
    #####:  736:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  737:        state->hand[currentPlayer][i] = temphand[i];
    #####:  738:        temphand[i] = -1;
        -:  739:      }
        -:  740:      //Reset Hand
    #####:  741:      return 0;
        -:  742:    }
        -:  743:
function playVillageCard called 1 returned 100% blocks executed 100%
        1:  744:    int playVillageCard(struct gameState *state, int handPos){
        1:  745:      int currentPlayer = whoseTurn(state);
call    0 returned 100%
        1:  746:      int i = 0;
        -:  747:      //+1 Card
        1:  748:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  749:
        -:  750:      //+2 Actions
        4:  751:      for (i = 0; i < 3; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:  752:        state->numActions++;
        -:  753:      }
        -:  754:
        -:  755:      //discard played card from hand
        1:  756:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  757:
        1:  758:      return 0;
        -:  759:    }
        -:  760:
function playMinionCard called 0 returned 0% blocks executed 0%
    #####:  761:    int playMinionCard(struct gameState *state, int choice1, int choice2, int handPos){
    #####:  762:      int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  763:      int i = 0;
    #####:  764:      int j = 0;
        -:  765:      //+1 action
    #####:  766:      state->numActions++;
        -:  767:
        -:  768:      //discard card from hand
    #####:  769:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  770:
    #####:  771:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  772:      {
    #####:  773:        state->coins = state->coins + 2;
        -:  774:      }
        -:  775:
    #####:  776:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  777:      {
        -:  778:        //discard hand
    #####:  779:        while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  780:        {
    #####:  781:          discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  782:        }
        -:  783:
        -:  784:        //draw 4
    #####:  785:        for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  786:        {
    #####:  787:          drawCard(currentPlayer, state);
call    0 never executed
        -:  788:        }
        -:  789:
        -:  790:        //other players discard hand and redraw if hand size > 4
    #####:  791:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  792:        {
    #####:  793:          if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  794:          {
    #####:  795:            if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  796:            {
        -:  797:              //draw 4
    #####:  798:              for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  799:              {
    #####:  800:                drawCard(i, state);
call    0 never executed
        -:  801:              }
        -:  802:              //discard hand
    #####:  803:              while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  804:              {
    #####:  805:                discardCard(handPos, i, state, 0);
call    0 never executed
        -:  806:              }
        -:  807:            }
        -:  808:          }
        -:  809:        }
        -:  810:      }
    #####:  811:      return 0;
        -:  812:    }
        -:  813:
        -:  814:    /***************** END Five Cards as Functions ********************************/
        -:  815:
function cardEffect called 1 returned 100% blocks executed 4%
        1:  816:    int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  817:    {
        -:  818:      int i;
        -:  819:      int j;
        -:  820:      int k;
        -:  821:      int index;
        1:  822:      int currentPlayer = whoseTurn(state);
call    0 returned 100%
        1:  823:      int nextPlayer = currentPlayer + 1;
        -:  824:
        1:  825:      int tributeRevealedCards[2] = {-1, -1};
        1:  826:      if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  827:        nextPlayer = 0;
        -:  828:      }
        -:  829:
        -:  830:
        -:  831:      //uses switch to select card and perform actions
        1:  832:      switch( card )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 100%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  833:      {
        -:  834:        case adventurer:
    #####:  835:        return playAdventurerCard(state);
call    0 never executed
        -:  836:
        -:  837:        case council_room:
        -:  838:        //+4 Cards
    #####:  839:        for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  840:        {
    #####:  841:          drawCard(currentPlayer, state);
call    0 never executed
        -:  842:        }
        -:  843:
        -:  844:        //+1 Buy
    #####:  845:        state->numBuys++;
        -:  846:
        -:  847:        //Each other player draws a card
    #####:  848:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  849:        {
    #####:  850:          if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  851:          {
    #####:  852:            drawCard(i, state);
call    0 never executed
        -:  853:          }
        -:  854:        }
        -:  855:
        -:  856:        //put played card in played card pile
    #####:  857:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  858:
    #####:  859:        return 0;
        -:  860:
        -:  861:        case feast:
    #####:  862:        return playFeastCard(state, choice1);
call    0 never executed
        -:  863:
        -:  864:        case gardens:
    #####:  865:        return -1;
        -:  866:
        -:  867:        case mine:
    #####:  868:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  869:
    #####:  870:        if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  871:        {
    #####:  872:          return -1;
        -:  873:        }
        -:  874:
    #####:  875:        if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  876:        {
    #####:  877:          return -1;
        -:  878:        }
        -:  879:
    #####:  880:        if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  881:        {
    #####:  882:          return -1;
        -:  883:        }
        -:  884:
    #####:  885:        gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  886:
        -:  887:        //discard card from hand
    #####:  888:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  889:
        -:  890:        //discard trashed card
    #####:  891:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  892:        {
    #####:  893:          if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  894:          {
    #####:  895:            discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  896:            break;
        -:  897:          }
        -:  898:        }
        -:  899:
    #####:  900:        return 0;
        -:  901:
        -:  902:        case remodel:
    #####:  903:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  904:
    #####:  905:        if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  906:        {
    #####:  907:          return -1;
        -:  908:        }
        -:  909:
    #####:  910:        gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  911:
        -:  912:        //discard card from hand
    #####:  913:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  914:
        -:  915:        //discard trashed card
    #####:  916:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  917:        {
    #####:  918:          if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  919:          {
    #####:  920:            discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  921:            break;
        -:  922:          }
        -:  923:        }
        -:  924:
        -:  925:
    #####:  926:        return 0;
        -:  927:
        -:  928:        case smithy:
    #####:  929:        return playSmithyCard(state, handPos);
call    0 never executed
        -:  930:
        -:  931:        case village:
    #####:  932:        return playVillageCard(state, handPos);
call    0 never executed
        -:  933:
        -:  934:        case baron:
    #####:  935:        state->numBuys++;//Increase buys by 1!
    #####:  936:        if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  937:          int p = 0;//Iterator for hand!
    #####:  938:          int card_not_discarded = 1;//Flag for discard set!
    #####:  939:          while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  940:            if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  941:              state->coins += 4;//Add 4 coins to the amount of coins
    #####:  942:              state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  943:              state->discardCount[currentPlayer]++;
    #####:  944:              for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  945:                state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  946:              }
    #####:  947:              state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  948:              state->handCount[currentPlayer]--;
    #####:  949:              card_not_discarded = 0;//Exit the loop
        -:  950:            }
    #####:  951:            else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  952:              if(DEBUG) {
        -:  953:                printf("No estate cards in your hand, invalid choice\n");
        -:  954:                printf("Must gain an estate if there are any\n");
        -:  955:              }
    #####:  956:              if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  957:                gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  958:                state->supplyCount[estate]--;//Decrement estates
    #####:  959:                if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  960:                  isGameOver(state);
call    0 never executed
        -:  961:                }
        -:  962:              }
    #####:  963:              card_not_discarded = 0;//Exit the loop
        -:  964:            }
        -:  965:
        -:  966:            else{
    #####:  967:              p++;//Next card
        -:  968:            }
        -:  969:          }
        -:  970:        }
        -:  971:
        -:  972:        else{
    #####:  973:          if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  974:            gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  975:            state->supplyCount[estate]--;//Decrement Estates
    #####:  976:            if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  977:              isGameOver(state);
call    0 never executed
        -:  978:            }
        -:  979:          }
        -:  980:        }
        -:  981:
        -:  982:
    #####:  983:        return 0;
        -:  984:
        -:  985:        case great_hall:
        -:  986:        //+1 Card
        1:  987:        drawCard(currentPlayer, state);
call    0 returned 100%
        -:  988:
        -:  989:        //+1 Actions
        1:  990:        state->numActions++;
        -:  991:
        -:  992:        //discard card from hand
        1:  993:        discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  994:        return 0;
        -:  995:
        -:  996:        case minion:
    #####:  997:        return playMinionCard(state, choice1, choice2, handPos);
call    0 never executed
        -:  998:
        -:  999:        case steward:
    #####: 1000:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1001:        {
        -: 1002:          //+2 cards
    #####: 1003:          drawCard(currentPlayer, state);
call    0 never executed
    #####: 1004:          drawCard(currentPlayer, state);
call    0 never executed
        -: 1005:        }
    #####: 1006:        else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1007:        {
        -: 1008:          //+2 coins
    #####: 1009:          state->coins = state->coins + 2;
        -: 1010:        }
        -: 1011:        else
        -: 1012:        {
        -: 1013:          //trash 2 cards in hand
    #####: 1014:          discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1015:          discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1016:        }
        -: 1017:
        -: 1018:        //discard card from hand
    #####: 1019:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1020:        return 0;
        -: 1021:
        -: 1022:        case tribute:
    #####: 1023:        if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1024:          if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1025:            tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1026:            state->deckCount[nextPlayer]--;
        -: 1027:          }
    #####: 1028:          else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1029:            tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1030:            state->discardCount[nextPlayer]--;
        -: 1031:          }
        -: 1032:          else{
        -: 1033:            //No Card to Reveal
        -: 1034:            if (DEBUG){
        -: 1035:              printf("No cards to reveal\n");
        -: 1036:            }
        -: 1037:          }
        -: 1038:        }
        -: 1039:
        -: 1040:        else{
    #####: 1041:          if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1042:            for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1043:              state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1044:              state->deckCount[nextPlayer]++;
    #####: 1045:              state->discard[nextPlayer][i] = -1;
    #####: 1046:              state->discardCount[nextPlayer]--;
        -: 1047:            }
        -: 1048:
    #####: 1049:            shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1050:          }
    #####: 1051:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1052:          state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1053:          state->deckCount[nextPlayer]--;
    #####: 1054:          tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1055:          state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1056:          state->deckCount[nextPlayer]--;
        -: 1057:        }
        -: 1058:
    #####: 1059:        if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1060:          state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1061:          state->playedCardCount++;
    #####: 1062:          tributeRevealedCards[1] = -1;
        -: 1063:        }
        -: 1064:
    #####: 1065:        for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1066:          if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1067:            state->coins += 2;
        -: 1068:          }
        -: 1069:
    #####: 1070:          else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1071:            drawCard(currentPlayer, state);
call    0 never executed
    #####: 1072:            drawCard(currentPlayer, state);
call    0 never executed
        -: 1073:          }
        -: 1074:          else{//Action Card
    #####: 1075:            state->numActions = state->numActions + 2;
        -: 1076:          }
        -: 1077:        }
        -: 1078:
    #####: 1079:        return 0;
        -: 1080:
        -: 1081:        case ambassador:
    #####: 1082:        j = 0;		//used to check if player has enough cards to discard
        -: 1083:
    #####: 1084:        if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1085:        {
    #####: 1086:          return -1;
        -: 1087:        }
        -: 1088:
    #####: 1089:        if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1090:        {
    #####: 1091:          return -1;
        -: 1092:        }
        -: 1093:
    #####: 1094:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1095:        {
    #####: 1096:          if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1097:          {
    #####: 1098:            j++;
        -: 1099:          }
        -: 1100:        }
    #####: 1101:        if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1102:        {
    #####: 1103:          return -1;
        -: 1104:        }
        -: 1105:
        -: 1106:        if (DEBUG)
        -: 1107:        printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1108:
        -: 1109:        //increase supply count for choosen card by amount being discarded
    #####: 1110:        state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1111:
        -: 1112:        //each other player gains a copy of revealed card
    #####: 1113:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1114:        {
    #####: 1115:          if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1116:          {
    #####: 1117:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1118:          }
        -: 1119:        }
        -: 1120:
        -: 1121:        //discard played card from hand
    #####: 1122:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1123:
        -: 1124:        //trash copies of cards returned to supply
    #####: 1125:        for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1126:        {
    #####: 1127:          for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1128:          {
    #####: 1129:            if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1130:            {
    #####: 1131:              discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1132:              break;
        -: 1133:            }
        -: 1134:          }
        -: 1135:        }
        -: 1136:
    #####: 1137:        return 0;
        -: 1138:
        -: 1139:        case cutpurse:
        -: 1140:
    #####: 1141:        updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1142:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1143:        {
    #####: 1144:          if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1145:          {
    #####: 1146:            for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1147:            {
    #####: 1148:              if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1149:              {
    #####: 1150:                discardCard(j, i, state, 0);
call    0 never executed
    #####: 1151:                break;
        -: 1152:              }
    #####: 1153:              if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1154:              {
    #####: 1155:                for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1156:                {
        -: 1157:                  if (DEBUG)
        -: 1158:                  printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1159:                }
    #####: 1160:                break;
        -: 1161:              }
        -: 1162:            }
        -: 1163:
        -: 1164:          }
        -: 1165:
        -: 1166:        }
        -: 1167:
        -: 1168:        //discard played card from hand
    #####: 1169:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1170:
    #####: 1171:        return 0;
        -: 1172:
        -: 1173:
        -: 1174:        case embargo:
        -: 1175:        //+2 Coins
    #####: 1176:        state->coins = state->coins + 2;
        -: 1177:
        -: 1178:        //see if selected pile is in play
    #####: 1179:        if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1180:        {
    #####: 1181:          return -1;
        -: 1182:        }
        -: 1183:
        -: 1184:        //add embargo token to selected supply pile
    #####: 1185:        state->embargoTokens[choice1]++;
        -: 1186:
        -: 1187:        //trash card
    #####: 1188:        discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1189:        return 0;
        -: 1190:
        -: 1191:        case outpost:
        -: 1192:        //set outpost flag
    #####: 1193:        state->outpostPlayed++;
        -: 1194:
        -: 1195:        //discard card
    #####: 1196:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1197:        return 0;
        -: 1198:
        -: 1199:        case salvager:
        -: 1200:        //+1 buy
    #####: 1201:        state->numBuys++;
        -: 1202:
    #####: 1203:        if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1204:        {
        -: 1205:          //gain coins equal to trashed card
    #####: 1206:          state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1207:          //trash card
    #####: 1208:          discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1209:        }
        -: 1210:
        -: 1211:        //discard card
    #####: 1212:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1213:        return 0;
        -: 1214:
        -: 1215:        case sea_hag:
    #####: 1216:        for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1217:          if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1218:            state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1219:            state->discardCount[i]++;
    #####: 1220:            state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1221:          }
        -: 1222:        }
    #####: 1223:        return 0;
        -: 1224:
        -: 1225:        case treasure_map:
        -: 1226:        //search hand for another treasure_map
    #####: 1227:        index = -1;
    #####: 1228:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1229:        {
    #####: 1230:          if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1231:          {
    #####: 1232:            index = i;
    #####: 1233:            break;
        -: 1234:          }
        -: 1235:        }
    #####: 1236:        if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1237:        {
        -: 1238:          //trash both treasure cards
    #####: 1239:          discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1240:          discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1241:
        -: 1242:          //gain 4 Gold cards
    #####: 1243:          for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1244:          {
    #####: 1245:            gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1246:          }
        -: 1247:
        -: 1248:          //return success
    #####: 1249:          return 1;
        -: 1250:        }
        -: 1251:
        -: 1252:        //no second treasure_map found in hand
    #####: 1253:        return -1;
        -: 1254:      }
        -: 1255:
    #####: 1256:      return -1;
        -: 1257:    }
        -: 1258:
function discardCard called 5 returned 100% blocks executed 89%
        5: 1259:    int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1260:    {
        -: 1261:
        -: 1262:      //if card is not trashed, added to Played pile
        5: 1263:      if (trashFlag < 1)
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
        -: 1264:      {
        -: 1265:        //add card to played pile
        3: 1266:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        3: 1267:        state->playedCardCount++;
        -: 1268:      }
        -: 1269:
        -: 1270:      //set played card to -1
        5: 1271:      state->hand[currentPlayer][handPos] = -1;
        -: 1272:
        -: 1273:      //remove card from player's hand
        5: 1274:      if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -: 1275:      {
        -: 1276:        //reduce number of cards in hand
        1: 1277:        state->handCount[currentPlayer]--;
        -: 1278:      }
        4: 1279:      else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1280:      {
        -: 1281:        //reduce number of cards in hand
    #####: 1282:        state->handCount[currentPlayer]--;
        -: 1283:      }
        -: 1284:      else
        -: 1285:      {
        -: 1286:        //replace discarded card with last card in hand
        4: 1287:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1288:        //set last card to -1
        4: 1289:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1290:        //reduce number of cards in hand
        4: 1291:        state->handCount[currentPlayer]--;
        -: 1292:      }
        -: 1293:
        5: 1294:      return 0;
        -: 1295:    }
        -: 1296:
function gainCard called 2 returned 100% blocks executed 80%
        2: 1297:    int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1298:    {
        -: 1299:      //Note: supplyPos is enum of choosen card
        -: 1300:
        -: 1301:      //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1302:      if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1303:      {
    #####: 1304:        return -1;
        -: 1305:      }
        -: 1306:
        -: 1307:      //added card for [whoseTurn] current player:
        -: 1308:      // toFlag = 0 : add to discard
        -: 1309:      // toFlag = 1 : add to deck
        -: 1310:      // toFlag = 2 : add to hand
        -: 1311:
        2: 1312:      if (toFlag == 1)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1313:      {
        1: 1314:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1315:        state->deckCount[player]++;
        -: 1316:      }
        1: 1317:      else if (toFlag == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1318:      {
        1: 1319:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1320:        state->handCount[player]++;
        -: 1321:      }
        -: 1322:      else
        -: 1323:      {
    #####: 1324:        state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1325:        state->discardCount[player]++;
        -: 1326:      }
        -: 1327:
        -: 1328:      //decrease number in supply pile
        2: 1329:      state->supplyCount[supplyPos]--;
        -: 1330:
        2: 1331:      return 0;
        -: 1332:    }
        -: 1333:
function updateCoins called 8 returned 100% blocks executed 82%
        8: 1334:    int updateCoins(int player, struct gameState *state, int bonus)
        -: 1335:    {
        -: 1336:      int i;
        -: 1337:
        -: 1338:      //reset coin count
        8: 1339:      state->coins = 0;
        -: 1340:
        -: 1341:      //add coins for each Treasure card in player's hand
       48: 1342:      for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1343:      {
       40: 1344:        if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1345:        {
       32: 1346:          state->coins += 1;
        -: 1347:        }
        8: 1348:        else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1349:        {
    #####: 1350:          state->coins += 2;
        -: 1351:        }
        8: 1352:        else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1353:        {
    #####: 1354:          state->coins += 3;
        -: 1355:        }
        -: 1356:      }
        -: 1357:
        -: 1358:      //add bonus
        8: 1359:      state->coins += bonus;
        -: 1360:
        8: 1361:      return 0;
        -: 1362:    }
        -: 1363:
        -: 1364:
        -: 1365:    //end of dominion.c
