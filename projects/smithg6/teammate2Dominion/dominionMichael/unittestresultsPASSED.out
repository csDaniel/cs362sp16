Testing the getCost functionThis test passed: Return values are appropriate
This test passed. 
getCost returned a default value -1 for a card that doesn't exist
File 'dominion.c'
Lines executed:16.26% of 572
Branches executed:22.22% of 423
Taken at least once:13.24% of 423
Calls executed:7.00% of 100
Creating 'dominion.c.gcov'

Testing the gainCard functionSuccess! Card total increased!
Success! Deck total increased!
File 'dominion.c'
Lines executed:18.36% of 572
Branches executed:23.64% of 423
Taken at least once:14.18% of 423
Calls executed:8.00% of 100
Creating 'dominion.c.gcov'

Testing the discardCard functionSuccess! Card total decreased!
Success! Card discarded successfully.
File 'dominion.c'
Lines executed:20.45% of 572
Branches executed:25.06% of 423
Taken at least once:15.37% of 423
Calls executed:8.00% of 100
Creating 'dominion.c.gcov'

Testing the isGameOver function
Game is over, test was successful.
Test passed, game recognized corrupted state and ended game.
File 'dominion.c'
Lines executed:22.55% of 572
Branches executed:27.90% of 423
Taken at least once:17.97% of 423
Calls executed:8.00% of 100
Creating 'dominion.c.gcov'



Testing the Adventurer card.

Current player hand count: 5Adventurer test passed. Treasure total matches.
File 'dominion.c'
Lines executed:26.05% of 572
Branches executed:30.26% of 423
Taken at least once:20.09% of 423
Calls executed:10.00% of 100
Creating 'dominion.c.gcov'



Testing the smithy card

Before Smithy handCount: 5
Smithy test passed.
Hand Total is 7
File 'dominion.c'
Lines executed:27.27% of 572
Branches executed:30.73% of 423
Taken at least once:20.57% of 423
Calls executed:13.00% of 100
Creating 'dominion.c.gcov'



Testing the Village card.

Before actions: 1
After actions: 3
Village card test passed.
Village action test passed.
File 'dominion.c'
Lines executed:28.67% of 572
Branches executed:31.21% of 423
Taken at least once:21.04% of 423
Calls executed:16.00% of 100
Creating 'dominion.c.gcov'



Testing the Great Hall card.

Before actions: 1
After actions: 2
Great Hall card test passed.
Great Hall action test passed.
File 'dominion.c'
Lines executed:30.42% of 572
Branches executed:36.64% of 423
Taken at least once:21.51% of 423
Calls executed:19.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 300 returned 100% blocks executed 83%
      300:    8:int compare(const void* a, const void* b) {
      300:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:  return 1;
      300:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       80:   12:  return -1;
      220:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:  }
        -:   36:
function initializeGame called 8 returned 100% blocks executed 94%
        8:   37:  int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:    struct gameState *state) {
        -:   39:
        -:   40:      int i;
        -:   41:      int j;
        -:   42:      int it;
        -:   43:      //set up random number generator
        8:   44:      SelectStream(1);
call    0 returned 100%
        8:   45:      PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:
        -:   47:      //check number of players
        8:   48:      if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:      {
    #####:   50:        return -1;
        -:   51:      }
        -:   52:
        -:   53:      //set number of players
        8:   54:      state->numPlayers = numPlayers;
        -:   55:
        -:   56:      //check selected kingdom cards are different
       88:   57:      for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:      {
      880:   59:        for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      800:   61:          if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:          {
    #####:   63:            return -1;
        -:   64:          }
        -:   65:        }
        -:   66:      }
        -:   67:
        -:   68:
        -:   69:      //initialize supply
        -:   70:      ///////////////////////////////
        -:   71:
        -:   72:      //set number of Curse cards
        8:   73:      if (numPlayers == 2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   74:      {
        4:   75:        state->supplyCount[curse] = 10;
        -:   76:      }
        4:   77:      else if (numPlayers == 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   78:      {
        4:   79:        state->supplyCount[curse] = 20;
        -:   80:      }
        -:   81:      else
        -:   82:      {
    #####:   83:        state->supplyCount[curse] = 30;
        -:   84:      }
        -:   85:
        -:   86:      //set number of Victory cards
        8:   87:      if (numPlayers == 2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   88:      {
        4:   89:        state->supplyCount[estate] = 8;
        4:   90:        state->supplyCount[duchy] = 8;
        4:   91:        state->supplyCount[province] = 8;
        -:   92:      }
        -:   93:      else
        -:   94:      {
        4:   95:        state->supplyCount[estate] = 12;
        4:   96:        state->supplyCount[duchy] = 12;
        4:   97:        state->supplyCount[province] = 12;
        -:   98:      }
        -:   99:
        -:  100:      //set number of Treasure cards
        8:  101:      state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  102:      state->supplyCount[silver] = 40;
        8:  103:      state->supplyCount[gold] = 30;
        -:  104:
        -:  105:      //set number of Kingdom cards
      168:  106:      for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:      {
     1320:  108:        for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:        {
     1240:  110:          if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:          {
        -:  112:            //check if card is a 'Victory' Kingdom card
       80:  113:            if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:            {
       32:  115:              if (numPlayers == 2){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        8:  116:                state->supplyCount[i] = 8;
        -:  117:              }
        8:  118:              else{ state->supplyCount[i] = 12; }
        -:  119:            }
        -:  120:            else
        -:  121:            {
       64:  122:              state->supplyCount[i] = 10;
        -:  123:            }
       80:  124:            break;
        -:  125:          }
        -:  126:          else    //card is not in the set choosen for the game
        -:  127:          {
     1160:  128:            state->supplyCount[i] = -1;
        -:  129:          }
        -:  130:        }
        -:  131:
        -:  132:      }
        -:  133:
        -:  134:      ////////////////////////
        -:  135:      //supply intilization complete
        -:  136:
        -:  137:      //set player decks
       28:  138:      for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  139:      {
       20:  140:        state->deckCount[i] = 0;
       80:  141:        for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:        {
       60:  143:          state->deck[i][j] = estate;
       60:  144:          state->deckCount[i]++;
        -:  145:        }
      160:  146:        for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:        {
      140:  148:          state->deck[i][j] = copper;
      140:  149:          state->deckCount[i]++;
        -:  150:        }
        -:  151:      }
        -:  152:
        -:  153:      //shuffle player decks
       28:  154:      for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  155:      {
       20:  156:        if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:        {
    #####:  158:          return -1;
        -:  159:        }
        -:  160:      }
        -:  161:
        -:  162:      //draw player hands
       28:  163:      for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        -:  164:      {
        -:  165:        //initialize hand size to zero
       20:  166:        state->handCount[i] = 0;
       20:  167:        state->discardCount[i] = 0;
        -:  168:        //draw 5 cards
        -:  169:        // for (j = 0; j < 5; j++)
        -:  170:        //	{
        -:  171:        //	  drawCard(i, state);
        -:  172:        //	}
        -:  173:      }
        -:  174:
        -:  175:      //set embargo tokens to 0 for all supply piles
      224:  176:      for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:      {
      216:  178:        state->embargoTokens[i] = 0;
        -:  179:      }
        -:  180:
        -:  181:      //initialize first player's turn
        8:  182:      state->outpostPlayed = 0;
        8:  183:      state->phase = 0;
        8:  184:      state->numActions = 1;
        8:  185:      state->numBuys = 1;
        8:  186:      state->playedCardCount = 0;
        8:  187:      state->whoseTurn = 0;
        8:  188:      state->handCount[state->whoseTurn] = 0;
        -:  189:      //int it; move to top
        -:  190:
        -:  191:      //Moved draw cards to here, only drawing at the start of a turn
       48:  192:      for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       40:  193:        drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:      }
        -:  195:
        8:  196:      updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        8:  198:      return 0;
        -:  199:    }
        -:  200:
function shuffle called 20 returned 100% blocks executed 94%
       20:  201:    int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:      int newDeck[MAX_DECK];
       20:  205:      int newDeckPos = 0;
        -:  206:      int card;
        -:  207:      int i;
        -:  208:
       20:  209:      if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:      return -1;
       20:  211:      qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  212:      /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      240:  214:      while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      200:  215:        card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      200:  216:        newDeck[newDeckPos] = state->deck[player][card];
      200:  217:        newDeckPos++;
      648:  218:        for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
      448:  219:          state->deck[player][i] = state->deck[player][i+1];
        -:  220:        }
      200:  221:        state->deckCount[player]--;
        -:  222:      }
      220:  223:      for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      200:  224:        state->deck[player][i] = newDeck[i];
      200:  225:        state->deckCount[player]++;
        -:  226:      }
        -:  227:
       20:  228:      return 0;
        -:  229:    }
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:    int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:    {
        -:  233:      int card;
    #####:  234:      int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:      //check if it is the right phase
    #####:  237:      if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:      {
    #####:  239:        return -1;
        -:  240:      }
        -:  241:
        -:  242:      //check if player has enough actions
    #####:  243:      if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:      {
    #####:  245:        return -1;
        -:  246:      }
        -:  247:
        -:  248:      //get card played
    #####:  249:      card = handCard(handPos, state);
call    0 never executed
        -:  250:
        -:  251:      //check if selected card is an action
    #####:  252:      if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:      {
    #####:  254:        return -1;
        -:  255:      }
        -:  256:
        -:  257:      //play card
    #####:  258:      if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:      {
    #####:  260:        return -1;
        -:  261:      }
        -:  262:
        -:  263:      //reduce number of actions
    #####:  264:      state->numActions--;
        -:  265:
        -:  266:      //update coins (Treasure cards may be added with card draws)
    #####:  267:      updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:
    #####:  269:      return 0;
        -:  270:    }
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:    int buyCard(int supplyPos, struct gameState *state) {
        -:  273:      int who;
        -:  274:      if (DEBUG){
        -:  275:        printf("Entering buyCard...\n");
        -:  276:      }
        -:  277:
        -:  278:      // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:      who = state->whoseTurn;
        -:  281:
    #####:  282:      if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:        if (DEBUG)
        -:  284:        printf("You do not have any buys left\n");
    #####:  285:        return -1;
    #####:  286:      } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:        if (DEBUG)
        -:  288:        printf("There are not any of that type of card left\n");
    #####:  289:        return -1;
    #####:  290:      } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:        if (DEBUG)
        -:  292:        printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:        return -1;
        -:  294:      } else {
    #####:  295:        state->phase=1;
        -:  296:        //state->supplyCount[supplyPos]--;
    #####:  297:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:
    #####:  299:        state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:        state->numBuys--;
        -:  301:        if (DEBUG)
        -:  302:        printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:      }
        -:  304:
        -:  305:      //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:      //state->discardCount[who]++;
        -:  307:
    #####:  308:      return 0;
        -:  309:    }
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:    int numHandCards(struct gameState *state) {
    #####:  312:      return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:    }
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:    int handCard(int handPos, struct gameState *state) {
    #####:  316:      int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:      return state->hand[currentPlayer][handPos];
        -:  318:    }
        -:  319:
function supplyCount called 2 returned 100% blocks executed 100%
        2:  320:    int supplyCount(int card, struct gameState *state) {
        2:  321:      return state->supplyCount[card];
        -:  322:    }
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:    int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:      int i;
    #####:  326:      int count = 0;
        -:  327:
    #####:  328:      for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:      {
    #####:  330:        if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:      }
        -:  332:
    #####:  333:      for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:      {
    #####:  335:        if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:      }
        -:  337:
    #####:  338:      for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:      {
    #####:  340:        if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:      }
        -:  342:
    #####:  343:      return count;
        -:  344:    }
        -:  345:
function whoseTurn called 8 returned 100% blocks executed 100%
        8:  346:    int whoseTurn(struct gameState *state) {
        8:  347:      return state->whoseTurn;
        -:  348:    }
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:    int endTurn(struct gameState *state) {
        -:  351:      int k;
        -:  352:      int i;
    #####:  353:      int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:
        -:  355:      //Discard hand
    #####:  356:      for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:      }
    #####:  360:      state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:      //Code for determining the player
    #####:  363:      if (currentPlayer < (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  364:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:      }
        -:  366:      else{
    #####:  367:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:      }
        -:  369:
    #####:  370:      state->outpostPlayed = 0;
    #####:  371:      state->phase = 0;
    #####:  372:      state->numActions = 1;
    #####:  373:      state->coins = 0;
    #####:  374:      state->numBuys = 1;
    #####:  375:      state->playedCardCount = 0;
    #####:  376:      state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:      //int k; move to top
        -:  379:      //Next player draws hand
    #####:  380:      for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:        drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:      }
        -:  383:
        -:  384:      //Update money
    #####:  385:      updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:      return 0;
        -:  388:    }
        -:  389:
function isGameOver called 3 returned 100% blocks executed 94%
        3:  390:    int isGameOver(struct gameState *state) {
        -:  391:      int i;
        -:  392:      int j;
        -:  393:
       78:  394:      for(i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  395:      {
       75:  396:          if(state->supplyCount[i] < 0)
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        9:  397:            state->supplyCount[i] = 0;
        -:  398:      }
        -:  399:    
        -:  400:      //if stack of Province cards is empty, the game ends
        3:  401:      if (state->supplyCount[province] == 0)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -:  402:      {
        2:  403:        return 1;
        -:  404:      }
        -:  405:
        -:  406:      //if three supply pile are at 0, the game ends
        1:  407:      j = 0;
       26:  408:      for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  409:      {
       25:  410:        if (state->supplyCount[i] == 0)
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
        -:  411:        {
        8:  412:          j++;
        -:  413:        }
        -:  414:      }
        1:  415:      if ( j >= 3)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  416:      {
        1:  417:        return 1;
        -:  418:      }
        -:  419:
    #####:  420:      return 0;
        -:  421:    }
        -:  422:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  423:    int scoreFor (int player, struct gameState *state) {
        -:  424:
        -:  425:      int i;
    #####:  426:      int score = 0;
        -:  427:      //score from hand
    #####:  428:      for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  429:      {
    #####:  430:        if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  431:        if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  432:        if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  433:        if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  434:        if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  435:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  436:      }
        -:  437:
        -:  438:      //score from discard
    #####:  439:      for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  440:      {
    #####:  441:        if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  442:        if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  443:        if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  444:        if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  445:        if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  446:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  447:      }
        -:  448:
        -:  449:      //score from deck
    #####:  450:      for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  451:      {
    #####:  452:        if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  453:        if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  454:        if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  455:        if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  456:        if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  457:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  458:      }
        -:  459:
    #####:  460:      return score;
        -:  461:    }
        -:  462:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  463:    int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  464:      int i;
        -:  465:      int j;
        -:  466:      int highScore;
        -:  467:      int currentPlayer;
        -:  468:
        -:  469:      //get score for each player
    #####:  470:      for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  471:      {
        -:  472:        //set unused player scores to -9999
    #####:  473:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  474:        {
    #####:  475:          players[i] = -9999;
        -:  476:        }
        -:  477:        else
        -:  478:        {
    #####:  479:          players[i] = scoreFor (i, state);
call    0 never executed
        -:  480:        }
        -:  481:      }
        -:  482:
        -:  483:      //find highest score
    #####:  484:      j = 0;
    #####:  485:      for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  486:      {
    #####:  487:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  488:        {
    #####:  489:          j = i;
        -:  490:        }
        -:  491:      }
    #####:  492:      highScore = players[j];
        -:  493:
        -:  494:      //add 1 to players who had less turns
    #####:  495:      currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  496:      for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  497:      {
    #####:  498:        if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  499:        {
    #####:  500:          players[i]++;
        -:  501:        }
        -:  502:      }
        -:  503:
        -:  504:      //find new highest score
    #####:  505:      j = 0;
    #####:  506:      for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  507:      {
    #####:  508:        if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  509:        {
    #####:  510:          j = i;
        -:  511:        }
        -:  512:      }
    #####:  513:      highScore = players[j];
        -:  514:
        -:  515:      //set winners in array to 1 and rest to 0
    #####:  516:      for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  517:      {
    #####:  518:        if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  519:        {
    #####:  520:          players[i] = 1;
        -:  521:        }
        -:  522:        else
        -:  523:        {
    #####:  524:          players[i] = 0;
        -:  525:        }
        -:  526:      }
        -:  527:
    #####:  528:      return 0;
        -:  529:    }
        -:  530:
function drawCard called 47 returned 100% blocks executed 38%
       47:  531:    int drawCard(int player, struct gameState *state)
        -:  532:    {	int count;
        -:  533:      int deckCounter;
       47:  534:      if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  535:
        -:  536:        //Step 1 Shuffle the discard pile back into a deck
        -:  537:        int i;
        -:  538:        //Move discard to deck
    #####:  539:        for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  540:          state->deck[player][i] = state->discard[player][i];
    #####:  541:          state->discard[player][i] = -1;
        -:  542:        }
        -:  543:
    #####:  544:        state->deckCount[player] = state->discardCount[player];
    #####:  545:        state->discardCount[player] = 0;//Reset discard
        -:  546:
        -:  547:        //Shufffle the deck
    #####:  548:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  549:
        -:  550:        if (DEBUG){//Debug statements
        -:  551:          printf("Deck count now: %d\n", state->deckCount[player]);
        -:  552:        }
        -:  553:
    #####:  554:        state->discardCount[player] = 0;
        -:  555:
        -:  556:        //Step 2 Draw Card
    #####:  557:        count = state->handCount[player];//Get current player's hand count
        -:  558:
        -:  559:        if (DEBUG){//Debug statements
        -:  560:          printf("Current hand count: %d\n", count);
        -:  561:        }
        -:  562:
    #####:  563:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  564:
    #####:  565:        if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  566:        return -1;
        -:  567:
    #####:  568:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  569:        state->deckCount[player]--;
    #####:  570:        state->handCount[player]++;//Increment hand count
        -:  571:      }
        -:  572:
        -:  573:      else{
       47:  574:        int count = state->handCount[player];//Get current hand count for player
        -:  575:        int deckCounter;
        -:  576:        if (DEBUG){//Debug statements
        -:  577:          printf("Current hand count: %d\n", count);
        -:  578:        }
        -:  579:
       47:  580:        deckCounter = state->deckCount[player];//Create holder for the deck count
       47:  581:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       47:  582:        state->deckCount[player]--;
       47:  583:        state->handCount[player]++;//Increment hand count
        -:  584:      }
        -:  585:
       47:  586:      return 0;
        -:  587:    }
        -:  588:
function getCost called 2 returned 100% blocks executed 13%
        2:  589:    int getCost(int cardNumber)
        -:  590:    {
        2:  591:      switch( cardNumber )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 50%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 50%
        -:  592:      {
        -:  593:        case curse:
    #####:  594:        return 0;
        -:  595:        case estate:
    #####:  596:        return 2;
        -:  597:        case duchy:
    #####:  598:        return 5;
        -:  599:        case province:
    #####:  600:        return 8;
        -:  601:        case copper:
    #####:  602:        return 0;
        -:  603:        case silver:
    #####:  604:        return 3;
        -:  605:        case gold:
    #####:  606:        return 6;
        -:  607:        case adventurer:
        1:  608:        return 6;
        -:  609:        case council_room:
    #####:  610:        return 5;
        -:  611:        case feast:
    #####:  612:        return 4;
        -:  613:        case gardens:
    #####:  614:        return 4;
        -:  615:        case mine:
    #####:  616:        return 5;
        -:  617:        case remodel:
    #####:  618:        return 4;
        -:  619:        case smithy:
    #####:  620:        return 4;
        -:  621:        case village:
    #####:  622:        return 3;
        -:  623:        case baron:
    #####:  624:        return 4;
        -:  625:        case great_hall:
    #####:  626:        return 3;
        -:  627:        case minion:
    #####:  628:        return 5;
        -:  629:        case steward:
    #####:  630:        return 3;
        -:  631:        case tribute:
    #####:  632:        return 5;
        -:  633:        case ambassador:
    #####:  634:        return 3;
        -:  635:        case cutpurse:
    #####:  636:        return 4;
        -:  637:        case embargo:
    #####:  638:        return 2;
        -:  639:        case outpost:
    #####:  640:        return 5;
        -:  641:        case salvager:
    #####:  642:        return 4;
        -:  643:        case sea_hag:
    #####:  644:        return 4;
        -:  645:        case treasure_map:
    #####:  646:        return 4;
        -:  647:      }
        -:  648:
        1:  649:      return -1;
        -:  650:    }
        -:  651:
        -:  652:    /***************** Implementation of Five Cards as Functions *****************/
        -:  653:
function playAdventurerCard called 1 returned 100% blocks executed 69%
        1:  654:    int playAdventurerCard(struct gameState *state){
        1:  655:      int currentPlayer = whoseTurn(state);
call    0 returned 100%
        1:  656:      int drawntreasure = 0;
        -:  657:      int cardDrawn;
        -:  658:      int temphand[MAX_HAND];
        1:  659:      int z = 0;
        -:  660:
        4:  661:      while(drawntreasure<2){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:  662:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  663:          shuffle(currentPlayer, state);
call    0 never executed
        -:  664:        }
        2:  665:        drawCard(currentPlayer, state);
call    0 returned 100%
        2:  666:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        2:  667:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        2:  668:        drawntreasure++;
        -:  669:        else{
    #####:  670:          temphand[z]=cardDrawn;
    #####:  671:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  672:          z++;
        -:  673:        }
        -:  674:      }
        2:  675:      while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  676:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  677:        z=z-1;
        -:  678:      }
        -:  679:
        1:  680:      return 0;
        -:  681:
        -:  682:    }
        -:  683:
function playSmithyCard called 1 returned 100% blocks executed 100%
        1:  684:    int playSmithyCard(struct gameState *state, int handPos){
        1:  685:      int currentPlayer = whoseTurn(state);
call    0 returned 100%
        1:  686:      int i = 0;
        -:  687:      //+3 Cards
        4:  688:      for (i = 0; i < 3; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:  689:        drawCard(currentPlayer, state);
call    0 returned 100%
        -:  690:      }
        -:  691:
        -:  692:      //discard card from hand
        1:  693:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  694:      return 0;
        -:  695:    }
        -:  696:
function playFeastCard called 0 returned 0% blocks executed 0%
    #####:  697:    int playFeastCard(struct gameState *state, int choice1){
    #####:  698:      int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  699:      int i = 0;
        -:  700:      int x;
        -:  701:      int temphand[MAX_HAND];
        -:  702:
        -:  703:      //gain card with cost up to 5
        -:  704:      //Backup hand
    #####:  705:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  706:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  707:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  708:      }
        -:  709:      //Backup hand
        -:  710:
        -:  711:      //Update Coins for Buy
    #####:  712:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  713:      x = 1;//Condition to loop on
    #####:  714:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  715:        if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  716:          if (DEBUG)
        -:  717:          printf("None of that card left, sorry!\n");
        -:  718:          if (DEBUG){
        -:  719:            printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  720:          }
        -:  721:        }
    #####:  722:        else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  723:          printf("That card is too expensive!\n");
call    0 never executed
        -:  724:          if (DEBUG){
        -:  725:            printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  726:          }
        -:  727:        }
        -:  728:        else{
        -:  729:          if (DEBUG){
        -:  730:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  731:          }
        -:  732:
    #####:  733:          x = 0;//No more buying cards
        -:  734:
        -:  735:          if (DEBUG){
        -:  736:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  737:          }
        -:  738:        }
    #####:  739:        gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
        -:  740:      }
        -:  741:      //Reset Hand
    #####:  742:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  743:        state->hand[currentPlayer][i] = temphand[i];
    #####:  744:        temphand[i] = -1;
        -:  745:      }
        -:  746:      //Reset Hand
    #####:  747:      return 0;
        -:  748:    }
        -:  749:
function playVillageCard called 1 returned 100% blocks executed 100%
        1:  750:    int playVillageCard(struct gameState *state, int handPos){
        1:  751:      int currentPlayer = whoseTurn(state);
call    0 returned 100%
        1:  752:      int i = 0;
        -:  753:      //+1 Card
        1:  754:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  755:
        -:  756:      //+2 Actions
        3:  757:      for (i = 0; i < 2; i++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:  758:        state->numActions++;
        -:  759:      }
        -:  760:
        -:  761:      //discard played card from hand
        1:  762:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  763:
        1:  764:      return 0;
        -:  765:    }
        -:  766:
function playMinionCard called 0 returned 0% blocks executed 0%
    #####:  767:    int playMinionCard(struct gameState *state, int choice1, int choice2, int handPos){
    #####:  768:      int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  769:      int i = 0;
    #####:  770:      int j = 0;
        -:  771:      //+1 action
    #####:  772:      state->numActions++;
        -:  773:
        -:  774:      //discard card from hand
    #####:  775:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  776:
    #####:  777:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  778:      {
    #####:  779:        state->coins = state->coins + 2;
        -:  780:      }
        -:  781:
    #####:  782:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  783:      {
        -:  784:        //discard hand
    #####:  785:        while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  786:        {
    #####:  787:          discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  788:        }
        -:  789:
        -:  790:        //draw 4
    #####:  791:        for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  792:        {
    #####:  793:          drawCard(currentPlayer, state);
call    0 never executed
        -:  794:        }
        -:  795:
        -:  796:        //other players discard hand and redraw if hand size > 4
    #####:  797:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  798:        {
    #####:  799:          if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  800:          {
    #####:  801:            if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  802:            {
        -:  803:              //draw 4
    #####:  804:              for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  805:              {
    #####:  806:                drawCard(i, state);
call    0 never executed
        -:  807:              }
        -:  808:              //discard hand
    #####:  809:              while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  810:              {
    #####:  811:                discardCard(handPos, i, state, 0);
call    0 never executed
        -:  812:              }
        -:  813:            }
        -:  814:          }
        -:  815:        }
        -:  816:      }
    #####:  817:      return 0;
        -:  818:    }
        -:  819:
        -:  820:    /***************** END Five Cards as Functions ********************************/
        -:  821:
function cardEffect called 1 returned 100% blocks executed 4%
        1:  822:    int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  823:    {
        -:  824:      int i;
        -:  825:      int j;
        -:  826:      int k;
        -:  827:      int index;
        1:  828:      int currentPlayer = whoseTurn(state);
call    0 returned 100%
        1:  829:      int nextPlayer = currentPlayer + 1;
        -:  830:
        1:  831:      int tributeRevealedCards[2] = {-1, -1};
        1:  832:      if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  833:        nextPlayer = 0;
        -:  834:      }
        -:  835:
        -:  836:
        -:  837:      //uses switch to select card and perform actions
        1:  838:      switch( card )
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 100%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  839:      {
        -:  840:        case adventurer:
    #####:  841:        return playAdventurerCard(state);
call    0 never executed
        -:  842:
        -:  843:        case council_room:
        -:  844:        //+4 Cards
    #####:  845:        for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  846:        {
    #####:  847:          drawCard(currentPlayer, state);
call    0 never executed
        -:  848:        }
        -:  849:
        -:  850:        //+1 Buy
    #####:  851:        state->numBuys++;
        -:  852:
        -:  853:        //Each other player draws a card
    #####:  854:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  855:        {
    #####:  856:          if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  857:          {
    #####:  858:            drawCard(i, state);
call    0 never executed
        -:  859:          }
        -:  860:        }
        -:  861:
        -:  862:        //put played card in played card pile
    #####:  863:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  864:
    #####:  865:        return 0;
        -:  866:
        -:  867:        case feast:
    #####:  868:        return playFeastCard(state, choice1);
call    0 never executed
        -:  869:
        -:  870:        case gardens:
    #####:  871:        return -1;
        -:  872:
        -:  873:        case mine:
    #####:  874:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  875:
    #####:  876:        if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  877:        {
    #####:  878:          return -1;
        -:  879:        }
        -:  880:
    #####:  881:        if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  882:        {
    #####:  883:          return -1;
        -:  884:        }
        -:  885:
    #####:  886:        if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  887:        {
    #####:  888:          return -1;
        -:  889:        }
        -:  890:
    #####:  891:        gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  892:
        -:  893:        //discard card from hand
    #####:  894:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  895:
        -:  896:        //discard trashed card
    #####:  897:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  898:        {
    #####:  899:          if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  900:          {
    #####:  901:            discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  902:            break;
        -:  903:          }
        -:  904:        }
        -:  905:
    #####:  906:        return 0;
        -:  907:
        -:  908:        case remodel:
    #####:  909:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  910:
    #####:  911:        if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  912:        {
    #####:  913:          return -1;
        -:  914:        }
        -:  915:
    #####:  916:        gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  917:
        -:  918:        //discard card from hand
    #####:  919:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  920:
        -:  921:        //discard trashed card
    #####:  922:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  923:        {
    #####:  924:          if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  925:          {
    #####:  926:            discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  927:            break;
        -:  928:          }
        -:  929:        }
        -:  930:
        -:  931:
    #####:  932:        return 0;
        -:  933:
        -:  934:        case smithy:
    #####:  935:        return playSmithyCard(state, handPos);
call    0 never executed
        -:  936:
        -:  937:        case village:
    #####:  938:        return playVillageCard(state, handPos);
call    0 never executed
        -:  939:
        -:  940:        case baron:
    #####:  941:        state->numBuys++;//Increase buys by 1!
    #####:  942:        if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  943:          int p = 0;//Iterator for hand!
    #####:  944:          int card_not_discarded = 1;//Flag for discard set!
    #####:  945:          while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  946:            if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  947:              state->coins += 4;//Add 4 coins to the amount of coins
    #####:  948:              state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  949:              state->discardCount[currentPlayer]++;
    #####:  950:              for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  951:                state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  952:              }
    #####:  953:              state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  954:              state->handCount[currentPlayer]--;
    #####:  955:              card_not_discarded = 0;//Exit the loop
        -:  956:            }
    #####:  957:            else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  958:              if(DEBUG) {
        -:  959:                printf("No estate cards in your hand, invalid choice\n");
        -:  960:                printf("Must gain an estate if there are any\n");
        -:  961:              }
    #####:  962:              if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  963:                gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  964:                state->supplyCount[estate]--;//Decrement estates
    #####:  965:                if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  966:                  isGameOver(state);
call    0 never executed
        -:  967:                }
        -:  968:              }
    #####:  969:              card_not_discarded = 0;//Exit the loop
        -:  970:            }
        -:  971:
        -:  972:            else{
    #####:  973:              p++;//Next card
        -:  974:            }
        -:  975:          }
        -:  976:        }
        -:  977:
        -:  978:        else{
    #####:  979:          if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  980:            gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  981:            state->supplyCount[estate]--;//Decrement Estates
    #####:  982:            if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  983:              isGameOver(state);
call    0 never executed
        -:  984:            }
        -:  985:          }
        -:  986:        }
        -:  987:
        -:  988:
    #####:  989:        return 0;
        -:  990:
        -:  991:        case great_hall:
        -:  992:        //+1 Card
        1:  993:        drawCard(currentPlayer, state);
call    0 returned 100%
        -:  994:
        -:  995:        //+1 Actions
        1:  996:        state->numActions++;
        -:  997:
        -:  998:        //discard card from hand
        1:  999:        discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1: 1000:        return 0;
        -: 1001:
        -: 1002:        case minion:
    #####: 1003:        return playMinionCard(state, choice1, choice2, handPos);
call    0 never executed
        -: 1004:
        -: 1005:        case steward:
    #####: 1006:        if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1007:        {
        -: 1008:          //+2 cards
    #####: 1009:          drawCard(currentPlayer, state);
call    0 never executed
    #####: 1010:          drawCard(currentPlayer, state);
call    0 never executed
        -: 1011:        }
    #####: 1012:        else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1013:        {
        -: 1014:          //+2 coins
    #####: 1015:          state->coins = state->coins + 2;
        -: 1016:        }
        -: 1017:        else
        -: 1018:        {
        -: 1019:          //trash 2 cards in hand
    #####: 1020:          discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1021:          discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1022:        }
        -: 1023:
        -: 1024:        //discard card from hand
    #####: 1025:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1026:        return 0;
        -: 1027:
        -: 1028:        case tribute:
    #####: 1029:        if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1030:          if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1031:            tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1032:            state->deckCount[nextPlayer]--;
        -: 1033:          }
    #####: 1034:          else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1035:            tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1036:            state->discardCount[nextPlayer]--;
        -: 1037:          }
        -: 1038:          else{
        -: 1039:            //No Card to Reveal
        -: 1040:            if (DEBUG){
        -: 1041:              printf("No cards to reveal\n");
        -: 1042:            }
        -: 1043:          }
        -: 1044:        }
        -: 1045:
        -: 1046:        else{
    #####: 1047:          if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1048:            for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1049:              state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1050:              state->deckCount[nextPlayer]++;
    #####: 1051:              state->discard[nextPlayer][i] = -1;
    #####: 1052:              state->discardCount[nextPlayer]--;
        -: 1053:            }
        -: 1054:
    #####: 1055:            shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1056:          }
    #####: 1057:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1058:          state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1059:          state->deckCount[nextPlayer]--;
    #####: 1060:          tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1061:          state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1062:          state->deckCount[nextPlayer]--;
        -: 1063:        }
        -: 1064:
    #####: 1065:        if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
branch  0 never executed
branch  1 never executed
    #####: 1066:          state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1067:          state->playedCardCount++;
    #####: 1068:          tributeRevealedCards[1] = -1;
        -: 1069:        }
        -: 1070:
    #####: 1071:        for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1072:          if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1073:            state->coins += 2;
        -: 1074:          }
        -: 1075:
    #####: 1076:          else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1077:            drawCard(currentPlayer, state);
call    0 never executed
    #####: 1078:            drawCard(currentPlayer, state);
call    0 never executed
        -: 1079:          }
        -: 1080:          else{//Action Card
    #####: 1081:            state->numActions = state->numActions + 2;
        -: 1082:          }
        -: 1083:        }
        -: 1084:
    #####: 1085:        return 0;
        -: 1086:
        -: 1087:        case ambassador:
    #####: 1088:        j = 0;		//used to check if player has enough cards to discard
        -: 1089:
    #####: 1090:        if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1091:        {
    #####: 1092:          return -1;
        -: 1093:        }
        -: 1094:
    #####: 1095:        if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1096:        {
    #####: 1097:          return -1;
        -: 1098:        }
        -: 1099:
    #####: 1100:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1101:        {
    #####: 1102:          if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1103:          {
    #####: 1104:            j++;
        -: 1105:          }
        -: 1106:        }
    #####: 1107:        if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1108:        {
    #####: 1109:          return -1;
        -: 1110:        }
        -: 1111:
        -: 1112:        if (DEBUG)
        -: 1113:        printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1114:
        -: 1115:        //increase supply count for choosen card by amount being discarded
    #####: 1116:        state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1117:
        -: 1118:        //each other player gains a copy of revealed card
    #####: 1119:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1120:        {
    #####: 1121:          if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1122:          {
    #####: 1123:            gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1124:          }
        -: 1125:        }
        -: 1126:
        -: 1127:        //discard played card from hand
    #####: 1128:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1129:
        -: 1130:        //trash copies of cards returned to supply
    #####: 1131:        for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1132:        {
    #####: 1133:          for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1134:          {
    #####: 1135:            if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1136:            {
    #####: 1137:              discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1138:              break;
        -: 1139:            }
        -: 1140:          }
        -: 1141:        }
        -: 1142:
    #####: 1143:        return 0;
        -: 1144:
        -: 1145:        case cutpurse:
        -: 1146:
    #####: 1147:        updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1148:        for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1149:        {
    #####: 1150:          if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1151:          {
    #####: 1152:            for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1153:            {
    #####: 1154:              if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1155:              {
    #####: 1156:                discardCard(j, i, state, 0);
call    0 never executed
    #####: 1157:                break;
        -: 1158:              }
    #####: 1159:              if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1160:              {
    #####: 1161:                for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1162:                {
        -: 1163:                  if (DEBUG)
        -: 1164:                  printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1165:                }
    #####: 1166:                break;
        -: 1167:              }
        -: 1168:            }
        -: 1169:
        -: 1170:          }
        -: 1171:
        -: 1172:        }
        -: 1173:
        -: 1174:        //discard played card from hand
    #####: 1175:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1176:
    #####: 1177:        return 0;
        -: 1178:
        -: 1179:
        -: 1180:        case embargo:
        -: 1181:        //+2 Coins
    #####: 1182:        state->coins = state->coins + 2;
        -: 1183:
        -: 1184:        //see if selected pile is in play
    #####: 1185:        if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1186:        {
    #####: 1187:          return -1;
        -: 1188:        }
        -: 1189:
        -: 1190:        //add embargo token to selected supply pile
    #####: 1191:        state->embargoTokens[choice1]++;
        -: 1192:
        -: 1193:        //trash card
    #####: 1194:        discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1195:        return 0;
        -: 1196:
        -: 1197:        case outpost:
        -: 1198:        //set outpost flag
    #####: 1199:        state->outpostPlayed++;
        -: 1200:
        -: 1201:        //discard card
    #####: 1202:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1203:        return 0;
        -: 1204:
        -: 1205:        case salvager:
        -: 1206:        //+1 buy
    #####: 1207:        state->numBuys++;
        -: 1208:
    #####: 1209:        if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1210:        {
        -: 1211:          //gain coins equal to trashed card
    #####: 1212:          state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1213:          //trash card
    #####: 1214:          discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1215:        }
        -: 1216:
        -: 1217:        //discard card
    #####: 1218:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1219:        return 0;
        -: 1220:
        -: 1221:        case sea_hag:
    #####: 1222:        for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1223:          if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1224:            state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1225:            state->discardCount[i]++;
    #####: 1226:            state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1227:          }
        -: 1228:        }
    #####: 1229:        return 0;
        -: 1230:
        -: 1231:        case treasure_map:
        -: 1232:        //search hand for another treasure_map
    #####: 1233:        index = -1;
    #####: 1234:        for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1235:        {
    #####: 1236:          if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1237:          {
    #####: 1238:            index = i;
    #####: 1239:            break;
        -: 1240:          }
        -: 1241:        }
    #####: 1242:        if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1243:        {
        -: 1244:          //trash both treasure cards
    #####: 1245:          discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1246:          discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1247:
        -: 1248:          //gain 4 Gold cards
    #####: 1249:          for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1250:          {
    #####: 1251:            gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1252:          }
        -: 1253:
        -: 1254:          //return success
    #####: 1255:          return 1;
        -: 1256:        }
        -: 1257:
        -: 1258:        //no second treasure_map found in hand
    #####: 1259:        return -1;
        -: 1260:      }
        -: 1261:
    #####: 1262:      return -1;
        -: 1263:    }
        -: 1264:
function discardCard called 5 returned 100% blocks executed 89%
        5: 1265:    int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1266:    {
        -: 1267:
        -: 1268:      //if card is not trashed, added to Played pile
        5: 1269:      if (trashFlag < 1)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1270:      {
        -: 1271:        //add card to played pile
        4: 1272:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        4: 1273:        state->playedCardCount++;
        -: 1274:      }
        -: 1275:
        -: 1276:      //set played card to -1
        5: 1277:      state->hand[currentPlayer][handPos] = -1;
        -: 1278:
        -: 1279:      //remove card from player's hand
        5: 1280:      if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -: 1281:      {
        -: 1282:        //reduce number of cards in hand
        1: 1283:        state->handCount[currentPlayer]--;
        -: 1284:      }
        4: 1285:      else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1286:      {
        -: 1287:        //reduce number of cards in hand
    #####: 1288:        state->handCount[currentPlayer]--;
        -: 1289:      }
        -: 1290:      else
        -: 1291:      {
        -: 1292:        //replace discarded card with last card in hand
        4: 1293:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1294:        //set last card to -1
        4: 1295:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1296:        //reduce number of cards in hand
        4: 1297:        state->handCount[currentPlayer]--;
        -: 1298:      }
        -: 1299:
        5: 1300:      return 0;
        -: 1301:    }
        -: 1302:
function gainCard called 2 returned 100% blocks executed 80%
        2: 1303:    int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1304:    {
        -: 1305:      //Note: supplyPos is enum of choosen card
        -: 1306:
        -: 1307:      //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1308:      if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1309:      {
    #####: 1310:        return -1;
        -: 1311:      }
        -: 1312:
        -: 1313:      //added card for [whoseTurn] current player:
        -: 1314:      // toFlag = 0 : add to discard
        -: 1315:      // toFlag = 1 : add to deck
        -: 1316:      // toFlag = 2 : add to hand
        -: 1317:
        2: 1318:      if (toFlag == 1)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1319:      {
        1: 1320:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1321:        state->deckCount[player]++;
        -: 1322:      }
        1: 1323:      else if (toFlag == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1324:      {
        1: 1325:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1326:        state->handCount[player]++;
        -: 1327:      }
        -: 1328:      else
        -: 1329:      {
    #####: 1330:        state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1331:        state->discardCount[player]++;
        -: 1332:      }
        -: 1333:
        -: 1334:      //decrease number in supply pile
        2: 1335:      state->supplyCount[supplyPos]--;
        -: 1336:
        2: 1337:      return 0;
        -: 1338:    }
        -: 1339:
function updateCoins called 8 returned 100% blocks executed 82%
        8: 1340:    int updateCoins(int player, struct gameState *state, int bonus)
        -: 1341:    {
        -: 1342:      int i;
        -: 1343:
        -: 1344:      //reset coin count
        8: 1345:      state->coins = 0;
        -: 1346:
        -: 1347:      //add coins for each Treasure card in player's hand
       48: 1348:      for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1349:      {
       40: 1350:        if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1351:        {
       32: 1352:          state->coins += 1;
        -: 1353:        }
        8: 1354:        else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1355:        {
    #####: 1356:          state->coins += 2;
        -: 1357:        }
        8: 1358:        else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1359:        {
    #####: 1360:          state->coins += 3;
        -: 1361:        }
        -: 1362:      }
        -: 1363:
        -: 1364:      //add bonus
        8: 1365:      state->coins += bonus;
        -: 1366:
        8: 1367:      return 0;
        -: 1368:    }
        -: 1369:
        -: 1370:
        -: 1371:    //end of dominion.c
