        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * cardtest4.c
        -:    3: *
        -:    4: 
        -:    5: */
        -:    6:
        -:    7:/*
        -:    8: * Include the following lines in your makefile:
        -:    9: *
        -:   10: * cardtest4: cardtest4.c dominion.o rngs.o
        -:   11: *      gcc -o cardtest1 -g  cardtest4.c dominion.o rngs.o $(CFLAGS)
        -:   12: */
        -:   13:
        -:   14:
        -:   15:#include "dominion.h"
        -:   16:#include "dominion_helpers.h"
        -:   17:#include <string.h>
        -:   18:#include <stdio.h>
        -:   19:#include <assert.h>
        -:   20:#include "rngs.h"
        -:   21:#include <stdlib.h>
        -:   22:
        -:   23:#define TESTCARD "great hall"
        -:   24:
function main called 1 returned 100% blocks executed 55%
        -:   25:int main() {
        1:   26:    int newCards = 0;
        1:   27:    int discarded = 1;
        1:   28:    int xtraCoins = 0;
        1:   29:    int shuffledCards = 0;
        -:   30:    
        -:   31:    int i, j, m;
        1:   32:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        -:   33:    int remove1, remove2;
        1:   34:    int seed = 1000;
        1:   35:    int numPlayers = 2;
        1:   36:    int thisPlayer = 0;
        -:   37:    struct gameState G, testG;
        1:   38:    int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   39:        sea_hag, tribute, smithy, council_room};
        -:   40:    
        -:   41:    // initialize a game state and player cards
        1:   42:    initializeGame(numPlayers, k, seed, &G);
        -:   43:    
        1:   44:    printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   45:    
        -:   46:    // ----------- TEST 1: +1 card,--------------
        1:   47:    printf("TEST 1: +1 card\n");
        -:   48:    
        -:   49:    // copy the game state to a test case
        1:   50:    memcpy(&testG, &G, sizeof(struct gameState));
        1:   51:    choice1 = 1;
        1:   52:    cardEffect(great_hall, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   53:    
        1:   54:    newCards = 1;
        1:   55:    xtraCoins = 0;
        1:   56:    printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        1:   57:    printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
        1:   58:    printf("coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
        2:   59:    assert(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded);
branch  0 taken 0%
branch  1 taken 100%
        2:   60:    assert(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards + shuffledCards);
branch  0 taken 0%
branch  1 taken 100%
        2:   61:    assert(testG.coins == G.coins + xtraCoins);
branch  0 taken 0%
branch  1 taken 100%
        -:   62:    
        -:   63:    
        -:   64:    // ----------- TEST 2: +1 actions,--------------
        1:   65:    printf("TEST 2: +1 actions\n");
        -:   66:    
        -:   67:    // copy the game state to a test case
        1:   68:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   69:    
        1:   70:    int actionsBackup = testG.numActions;
        -:   71:    
        -:   72:    
        -:   73:    
        1:   74:    choice1 = 1;
        1:   75:    cardEffect(great_hall, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   76:    
        2:   77:    assert(testG.numActions == actionsBackup + 1);
branch  0 taken 0%
branch  1 taken 100%
        -:   78:    
        1:   79:    printf("Number of actions expected: %d\n", actionsBackup + 1);
        1:   80:    printf("Number of actions found: %d\n", testG.numActions);
        -:   81:    
        -:   82:    
        1:   83:    printf("\n >>>>> SUCCESS: Testing complete %s <<<<<\n\n", TESTCARD);
        -:   84:    
        -:   85:    
        1:   86:    return 0;
        -:   87:}
        -:   88:
