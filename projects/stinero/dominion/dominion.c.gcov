        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
function compare called 456 returned 100% blocks executed 100%
      456:   10:int compare(const void* a, const void* b) {
      456:   11:  if (*(int*)a > *(int*)b)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
       18:   12:    return 1;
      438:   13:  if (*(int*)a < *(int*)b)
branch  0 taken 26% (fallthrough)
branch  1 taken 74%
      113:   14:    return -1;
      325:   15:  return 0;
        -:   16:}
        -:   17:
function newGame called 0 returned 0% blocks executed 0%
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
function initializeGame called 12 returned 100% blocks executed 89%
       12:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
       12:   46:  SelectStream(1);
call    0 returned 100%
       12:   47:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   48:  
        -:   49:  //check number of players
       12:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
       12:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
      132:   59:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:    {
     1320:   61:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   62:        {
     1200:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
       12:   75:  if (numPlayers == 2)
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
        -:   76:    {
       10:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
        2:   79:  else if (numPlayers == 3)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:   80:    {
        1:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
        1:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
       12:   89:  if (numPlayers == 2)
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
        -:   90:    {
       10:   91:      state->supplyCount[estate] = 8;
       10:   92:      state->supplyCount[duchy] = 8;
       10:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
        2:   97:      state->supplyCount[estate] = 12;
        2:   98:      state->supplyCount[duchy] = 12;
        2:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
       12:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       12:  104:  state->supplyCount[silver] = 40;
       12:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
      252:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  109:    {
     1980:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  111:	{
     1860:  112:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
      120:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  116:		{
    #####:  117:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  118:		    state->supplyCount[i] = 8; 
        -:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
      120:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
      120:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
     1740:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
       39:  140:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  141:    {
       27:  142:      state->deckCount[i] = 0;
      108:  143:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  144:	{
       81:  145:	  state->deck[i][j] = estate;
       81:  146:	  state->deckCount[i]++;
        -:  147:	}
      216:  148:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  149:	{
      189:  150:	  state->deck[i][j] = copper;
      189:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
       39:  156:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  157:    {
       27:  158:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
       39:  165:  for (i = 0; i < numPlayers; i++)
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
       27:  168:      state->handCount[i] = 0;
       27:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
      336:  178:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  179:    {
      324:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
       12:  184:  state->outpostPlayed = 0;
       12:  185:  state->phase = 0;
       12:  186:  state->numActions = 1;
       12:  187:  state->numBuys = 1;
       12:  188:  state->playedCardCount = 0;
       12:  189:  state->whoseTurn = 0;
       12:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
       72:  194:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       60:  195:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  196:  }
        -:  197:
       12:  198:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  199:
       12:  200:  return 0;
        -:  201:}
        -:  202:
function shuffle called 52 returned 100% blocks executed 100%
       52:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
       52:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
       52:  211:  if (state->deckCount[player] < 1)
branch  0 taken 38% (fallthrough)
branch  1 taken 62%
       20:  212:    return -1;
        -:  213:
        -:  214:
       32:  215:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  216:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  217:
      363:  218:  while (state->deckCount[player] > 0)
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
        -:  219:  {
      299:  220:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      299:  221:    newDeck[newDeckPos] = state->deck[player][card];
      299:  222:    newDeckPos++;
        -:  223:
     1076:  224:    for (i = card; i < state->deckCount[player]-1; i++)
branch  0 taken 72%
branch  1 taken 28% (fallthrough)
        -:  225:    {
      777:  226:      state->deck[player][i] = state->deck[player][i+1];
        -:  227:    }
        -:  228:
      299:  229:    state->deckCount[player]--;
        -:  230:  }
        -:  231:
      331:  232:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
      299:  233:    state->deck[player][i] = newDeck[i];
      299:  234:    state->deckCount[player]++;
        -:  235:  }
        -:  236:
       32:  237:  return 0;
        -:  238:}
        -:  239:
function playCard called 0 returned 0% blocks executed 0%
    #####:  240:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  241:{	
        -:  242:  int card;
    #####:  243:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  244:
        -:  245:  //check if it is the right phase
    #####:  246:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  247:    {
    #####:  248:      return -1;
        -:  249:    }
        -:  250:	
        -:  251:  //check if player has enough actions
    #####:  252:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //get card played
    #####:  258:  card = handCard(handPos, state);
call    0 never executed
        -:  259:	
        -:  260:  //check if selected card is an action
    #####:  261:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  262:    {
    #####:  263:      return -1;
        -:  264:    }
        -:  265:	
        -:  266:  //play card
    #####:  267:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  268:    {
    #####:  269:      return -1;
        -:  270:    }
        -:  271:	
        -:  272:  //reduce number of actions
    #####:  273:  state->numActions--;
        -:  274:
        -:  275:  //update coins (Treasure cards may be added with card draws)
    #####:  276:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  277:	
    #####:  278:  return 0;
        -:  279:}
        -:  280:
function buyCard called 1 returned 100% blocks executed 43%
        1:  281:int buyCard(int supplyPos, struct gameState *state) {
        -:  282:  int who;
        -:  283:  if (DEBUG){
        -:  284:    printf("Entering buyCard...\n");
        -:  285:  }
        -:  286:
        -:  287:  // I don't know what to do about the phase thing.
        -:  288:
        1:  289:  who = state->whoseTurn;
        -:  290:
        1:  291:  if (state->numBuys < 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  292:    if (DEBUG)
        -:  293:      printf("You do not have any buys left\n");
    #####:  294:    return -1;
        1:  295:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:  296:    if (DEBUG)
        -:  297:      printf("There are not any of that type of card left\n");
        1:  298:    return -1;
    #####:  299:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  300:    if (DEBUG) 
        -:  301:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  302:    return -1;
        -:  303:  } else {
    #####:  304:    state->phase=1;
        -:  305:    //state->supplyCount[supplyPos]--;
    #####:  306:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  307:  
    #####:  308:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  309:    state->numBuys--;
        -:  310:    if (DEBUG)
        -:  311:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  312:  }
        -:  313:
        -:  314:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  315:  //state->discardCount[who]++;
        -:  316:    
    #####:  317:  return 0;
        -:  318:}
        -:  319:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  320:int numHandCards(struct gameState *state) {
    #####:  321:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  322:}
        -:  323:
function handCard called 0 returned 0% blocks executed 0%
    #####:  324:int handCard(int handPos, struct gameState *state) {
    #####:  325:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  326:  return state->hand[currentPlayer][handPos];
        -:  327:}
        -:  328:
function supplyCount called 10 returned 100% blocks executed 100%
       10:  329:int supplyCount(int card, struct gameState *state) {
       10:  330:  return state->supplyCount[card];
        -:  331:}
        -:  332:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  333:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  334:  int i;
    #####:  335:  int count = 0;
        -:  336:
    #####:  337:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  338:    {
    #####:  339:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  340:    }
        -:  341:
    #####:  342:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  343:    {
    #####:  344:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  345:    }
        -:  346:
    #####:  347:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  348:    {
    #####:  349:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  350:    }
        -:  351:
    #####:  352:  return count;
        -:  353:}
        -:  354:
function whoseTurn called 31 returned 100% blocks executed 100%
       31:  355:int whoseTurn(struct gameState *state) {
       31:  356:  return state->whoseTurn;
        -:  357:}
        -:  358:
function endTurn called 6 returned 100% blocks executed 100%
        6:  359:int endTurn(struct gameState *state) {
        -:  360:  int k;
        -:  361:  int i;
        6:  362:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  363:  
        -:  364:  //Discard hand
       36:  365:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       30:  366:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       30:  367:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  368:  }
        6:  369:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  370:    
        -:  371:  //Code for determining the player
        6:  372:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        3:  373:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  374:  }
        -:  375:  else{
        3:  376:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  377:  }
        -:  378:
        6:  379:  state->outpostPlayed = 0;
        6:  380:  state->phase = 0;
        6:  381:  state->numActions = 1;
        6:  382:  state->coins = 0;
        6:  383:  state->numBuys = 1;
        6:  384:  state->playedCardCount = 0;
        6:  385:  state->handCount[state->whoseTurn] = 0;
        -:  386:
        -:  387:  //int k; move to top
        -:  388:  //Next player draws hand
       36:  389:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       30:  390:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  391:  }
        -:  392:
        -:  393:  //Update money
        6:  394:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  395:
        6:  396:  return 0;
        -:  397:}
        -:  398:
function isGameOver called 1 returned 100% blocks executed 73%
        1:  399:int isGameOver(struct gameState *state) {
        -:  400:  int i;
        -:  401:  int j;
        -:  402:	
        -:  403:  //if stack of Province cards is empty, the game ends
        1:  404:  if (state->supplyCount[province] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  405:    {
    #####:  406:      return 1;
        -:  407:    }
        -:  408:
        -:  409:  //if three supply pile are at 0, the game ends
        1:  410:  j = 0;
       26:  411:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  412:    {
       25:  413:      if (state->supplyCount[i] == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  414:	{
    #####:  415:	  j++;
        -:  416:	}
        -:  417:    }
        1:  418:  if ( j >= 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  419:    {
    #####:  420:      return 1;
        -:  421:    }
        -:  422:
        1:  423:  return 0;
        -:  424:}
        -:  425:
function scoreFor called 2 returned 100% blocks executed 32%
        2:  426:int scoreFor (int player, struct gameState *state) {
        -:  427:
        -:  428:  int i;
        2:  429:  int score = 0;
        -:  430:  //score from hand
       14:  431:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -:  432:    {
       12:  433:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       12:  434:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
       12:  435:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       12:  436:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       12:  437:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
       12:  438:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:  439:    }
        -:  440:
        -:  441:  //score from discard
        2:  442:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  443:    {
    #####:  444:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  445:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  446:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  450:    }
        -:  451:
        -:  452:  //score from deck
        2:  453:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  454:    {
    #####:  455:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  456:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  457:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  458:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  459:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  460:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  461:    }
        -:  462:
        2:  463:  return score;
        -:  464:}
        -:  465:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  466:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  467:  int i;	
        -:  468:  int j;
        -:  469:  int highScore;
        -:  470:  int currentPlayer;
        -:  471:
        -:  472:  //get score for each player
    #####:  473:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  474:    {
        -:  475:      //set unused player scores to -9999
    #####:  476:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  477:	{
    #####:  478:	  players[i] = -9999;
        -:  479:	}
        -:  480:      else
        -:  481:	{
    #####:  482:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  483:	}
        -:  484:    }
        -:  485:
        -:  486:  //find highest score
    #####:  487:  j = 0;
    #####:  488:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  489:    {
    #####:  490:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  491:	{
    #####:  492:	  j = i;
        -:  493:	}
        -:  494:    }
    #####:  495:  highScore = players[j];
        -:  496:
        -:  497:  //add 1 to players who had less turns
    #####:  498:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  500:    {
    #####:  501:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  502:	{
    #####:  503:	  players[i]++;
        -:  504:	}
        -:  505:    }
        -:  506:
        -:  507:  //find new highest score
    #####:  508:  j = 0;
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  510:    {
    #####:  511:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  512:	{
    #####:  513:	  j = i;
        -:  514:	}
        -:  515:    }
    #####:  516:  highScore = players[j];
        -:  517:
        -:  518:  //set winners in array to 1 and rest to 0
    #####:  519:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  520:    {
    #####:  521:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  522:	{
    #####:  523:	  players[i] = 1;
        -:  524:	}
        -:  525:      else
        -:  526:	{
    #####:  527:	  players[i] = 0;
        -:  528:	}
        -:  529:    }
        -:  530:
    #####:  531:  return 0;
        -:  532:}
        -:  533:
function drawCard called 173 returned 100% blocks executed 100%
      173:  534:int drawCard(int player, struct gameState *state)
        -:  535:{
        -:  536:  int count;
        -:  537:  int deckCounter;
      173:  538:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  539:    
        -:  540:    //Step 1 Shuffle the discard pile back into a deck
        -:  541:    int i;
        -:  542:    //Move discard to deck
       35:  543:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 66%
branch  1 taken 34% (fallthrough)
       23:  544:      state->deck[player][i] = state->discard[player][i];
       23:  545:      state->discard[player][i] = -1;
        -:  546:    }
        -:  547:
       12:  548:    state->deckCount[player] = state->discardCount[player];
       12:  549:    state->discardCount[player] = 0;//Reset discard
        -:  550:
        -:  551:    //Shufffle the deck
       12:  552:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  553:   
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  556:    }
        -:  557:    
       12:  558:    state->discardCount[player] = 0;
        -:  559:
        -:  560:    //Step 2 Draw Card
       12:  561:    count = state->handCount[player];//Get current player's hand count
        -:  562:    
        -:  563:    if (DEBUG){//Debug statements
        -:  564:      printf("Current hand count: %d\n", count);
        -:  565:    }
        -:  566:    
       12:  567:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  568:
       12:  569:    if (deckCounter == 0)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        9:  570:      return -1;
        -:  571:
        3:  572:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        3:  573:    state->deckCount[player]--;
        3:  574:    state->handCount[player]++;//Increment hand count
        -:  575:  }
        -:  576:
        -:  577:  else{
      161:  578:    int count = state->handCount[player];//Get current hand count for player
        -:  579:    int deckCounter;
        -:  580:    if (DEBUG){//Debug statements
        -:  581:      printf("Current hand count: %d\n", count);
        -:  582:    }
        -:  583:
      161:  584:    deckCounter = state->deckCount[player];//Create holder for the deck count
      161:  585:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      161:  586:    state->deckCount[player]--;
      161:  587:    state->handCount[player]++;//Increment hand count
        -:  588:  }
        -:  589:
      164:  590:  return 0;
        -:  591:}
        -:  592:
function getCost called 0 returned 0% blocks executed 0%
    #####:  593:int getCost(int cardNumber)
        -:  594:{
    #####:  595:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  596:    {
        -:  597:    case curse:
    #####:  598:      return 0;
        -:  599:    case estate:
    #####:  600:      return 2;
        -:  601:    case duchy:
    #####:  602:      return 5;
        -:  603:    case province:
    #####:  604:      return 8;
        -:  605:    case copper:
    #####:  606:      return 0;
        -:  607:    case silver:
    #####:  608:      return 3;
        -:  609:    case gold:
    #####:  610:      return 6;
        -:  611:    case adventurer:
    #####:  612:      return 6;
        -:  613:    case council_room:
    #####:  614:      return 5;
        -:  615:    case feast:
    #####:  616:      return 4;
        -:  617:    case gardens:
    #####:  618:      return 4;
        -:  619:    case mine:
    #####:  620:      return 5;
        -:  621:    case remodel:
    #####:  622:      return 4;
        -:  623:    case smithy:
    #####:  624:      return 4;
        -:  625:    case village:
    #####:  626:      return 3;
        -:  627:    case baron:
    #####:  628:      return 4;
        -:  629:    case great_hall:
    #####:  630:      return 3;
        -:  631:    case minion:
    #####:  632:      return 5;
        -:  633:    case steward:
    #####:  634:      return 3;
        -:  635:    case tribute:
    #####:  636:      return 5;
        -:  637:    case ambassador:
    #####:  638:      return 3;
        -:  639:    case cutpurse:
    #####:  640:      return 4;
        -:  641:    case embargo: 
    #####:  642:      return 2;
        -:  643:    case outpost:
    #####:  644:      return 5;
        -:  645:    case salvager:
    #####:  646:      return 4;
        -:  647:    case sea_hag:
    #####:  648:      return 4;
        -:  649:    case treasure_map:
    #####:  650:      return 4;
        -:  651:    }
        -:  652:	
    #####:  653:  return -1;
        -:  654:}
        -:  655:
function cardEffect called 25 returned 100% blocks executed 6%
       25:  656:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  657:{
        -:  658:  int i;
        -:  659:  int j;
        -:  660:  int k;
        -:  661:  int x;
        -:  662:  int index;
       25:  663:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  664:  int temphand[MAX_HAND];
       25:  665:  int nextPlayer = currentPlayer + 1;
        -:  666:
       25:  667:  int tributeRevealedCards[2] = {-1, -1};
       25:  668:  int returnMe=0;
       25:  669:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        1:  670:    nextPlayer = 0;
        -:  671:  }
        -:  672:  
        -:  673:	
        -:  674:  //uses switch to select card and perform actions
       25:  675:  switch( card ) 
branch  0 taken 20%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 68%
branch  7 taken 0%
branch  8 taken 12%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  676:    {
        -:  677:    case adventurer:
        5:  678:    returnMe = adventurerPlay(currentPlayer, handPos, state);
call    0 returned 100%
        5:  679:    return returnMe;
        -:  680:			
        -:  681:    case council_room:
        -:  682:      //+4 Cards
    #####:  683:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  684:	{
    #####:  685:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  686:	}
        -:  687:			
        -:  688:      //+1 Buy
    #####:  689:      state->numBuys++;
        -:  690:			
        -:  691:      //Each other player draws a card
    #####:  692:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  693:	{
    #####:  694:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  695:	    {
    #####:  696:	      drawCard(i, state);
call    0 never executed
        -:  697:	    }
        -:  698:	}
        -:  699:			
        -:  700:      //put played card in played card pile
    #####:  701:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  702:			
    #####:  703:      return 0;
        -:  704:			
        -:  705:    case feast:
        -:  706:      //gain card with cost up to 5
        -:  707:      //Backup hand
    #####:  708:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  709:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  710:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  711:      }
        -:  712:      //Backup hand
        -:  713:
        -:  714:      //Update Coins for Buy
    #####:  715:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  716:      x = 1;//Condition to loop on
    #####:  717:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  718:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  719:	  if (DEBUG)
        -:  720:	    printf("None of that card left, sorry!\n");
        -:  721:
        -:  722:	  if (DEBUG){
        -:  723:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  724:	  }
        -:  725:	}
    #####:  726:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  727:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  728:
        -:  729:	  if (DEBUG){
        -:  730:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  731:	  }
        -:  732:	}
        -:  733:	else{
        -:  734:
        -:  735:	  if (DEBUG){
        -:  736:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  737:	  }
        -:  738:
    #####:  739:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  740:	  x = 0;//No more buying cards
        -:  741:
        -:  742:	  if (DEBUG){
        -:  743:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  744:	  }
        -:  745:
        -:  746:	}
        -:  747:      }     
        -:  748:
        -:  749:      //Reset Hand
    #####:  750:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  751:	state->hand[currentPlayer][i] = temphand[i];
    #####:  752:	temphand[i] = -1;
        -:  753:      }
        -:  754:      //Reset Hand
        -:  755:      			
    #####:  756:      return 0;
        -:  757:			
        -:  758:    case gardens:
    #####:  759:      return -1;
        -:  760:			
        -:  761:    case mine:
    #####:  762:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  763:
    #####:  764:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  765:	{
    #####:  766:	  return -1;
        -:  767:	}
        -:  768:		
    #####:  769:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  770:	{
    #####:  771:	  return -1;
        -:  772:	}
        -:  773:
    #####:  774:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  775:	{
    #####:  776:	  return -1;
        -:  777:	}
        -:  778:
    #####:  779:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  780:
        -:  781:      //discard card from hand
    #####:  782:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  783:
        -:  784:      //discard trashed card
    #####:  785:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  786:	{
    #####:  787:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  788:	    {
    #####:  789:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  790:	      break;
        -:  791:	    }
        -:  792:	}
        -:  793:			
    #####:  794:      return 0;
        -:  795:			
        -:  796:    case remodel:
    #####:  797:    remodelPlay(currentPlayer, choice1, choice2, handPos, state);
call    0 never executed
    #####:  798:    return 0;
        -:  799:		
        -:  800:    case smithy:
       17:  801:    smithPlay(currentPlayer, handPos, state);
call    0 returned 100%
       17:  802:    return 0;
        -:  803:		
        -:  804:    case village:
        -:  805:      //+1 Card
    #####:  806:      drawCard(currentPlayer, state);
call    0 never executed
        -:  807:			
        -:  808:      //+2 Actions
    #####:  809:      state->numActions = state->numActions + 2;
        -:  810:			
        -:  811:      //discard played card from hand
    #####:  812:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  813:      return 0;
        -:  814:		
        -:  815:    case baron:
        3:  816:   	baronPlay(currentPlayer, choice1, handPos, state);
call    0 returned 100%
        3:  817:    return 0;
        -:  818:		
        -:  819:    case great_hall:
        -:  820:      //+1 Card
    #####:  821:      drawCard(currentPlayer, state);
call    0 never executed
        -:  822:			
        -:  823:      //+1 Actions
    #####:  824:      state->numActions++;
        -:  825:			
        -:  826:      //discard card from hand
    #####:  827:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  828:      return 0;
        -:  829:		
        -:  830:    case minion:
        -:  831:      //+1 action
    #####:  832:      state->numActions++;
        -:  833:			
        -:  834:      //discard card from hand
    #####:  835:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  836:			
    #####:  837:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  838:	{
    #####:  839:	  state->coins = state->coins + 2;
        -:  840:	}
        -:  841:			
    #####:  842:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  843:	{
        -:  844:	  //discard hand
    #####:  845:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  846:	    {
    #####:  847:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  848:	    }
        -:  849:				
        -:  850:	  //draw 4
    #####:  851:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  852:	    {
    #####:  853:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  854:	    }
        -:  855:				
        -:  856:	  //other players discard hand and redraw if hand size > 4
    #####:  857:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  858:	    {
    #####:  859:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  860:		{
    #####:  861:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  862:		    {
        -:  863:		      //discard hand
    #####:  864:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  865:			{
    #####:  866:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  867:			}
        -:  868:							
        -:  869:		      //draw 4
    #####:  870:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  871:			{
    #####:  872:			  drawCard(i, state);
call    0 never executed
        -:  873:			}
        -:  874:		    }
        -:  875:		}
        -:  876:	    }
        -:  877:				
        -:  878:	}
    #####:  879:      return 0;
        -:  880:		
        -:  881:    case steward:
    #####:  882:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  883:	{
        -:  884:	  //+2 cards
    #####:  885:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  886:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  887:	}
    #####:  888:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  889:	{
        -:  890:	  //+2 coins
    #####:  891:	  state->coins = state->coins + 2;
        -:  892:	}
        -:  893:      else
        -:  894:	{
        -:  895:	  //trash 2 cards in hand
    #####:  896:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  897:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  898:	}
        -:  899:			
        -:  900:      //discard card from hand
    #####:  901:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  902:      return 0;
        -:  903:		
        -:  904:    case tribute:
    #####:  905:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  906:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  907:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  908:	  state->deckCount[nextPlayer]--;
        -:  909:	}
    #####:  910:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  911:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  912:	  state->discardCount[nextPlayer]--;
        -:  913:	}
        -:  914:	else{
        -:  915:	  //No Card to Reveal
        -:  916:	  if (DEBUG){
        -:  917:	    printf("No cards to reveal\n");
        -:  918:	  }
        -:  919:	}
        -:  920:      }
        -:  921:	    
        -:  922:      else{
    #####:  923:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  924:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  925:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  926:	    state->deckCount[nextPlayer]++;
    #####:  927:	    state->discard[nextPlayer][i] = -1;
    #####:  928:	    state->discardCount[nextPlayer]--;
        -:  929:	  }
        -:  930:			    
    #####:  931:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  932:	} 
    #####:  933:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  934:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  935:	state->deckCount[nextPlayer]--;
    #####:  936:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  937:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  938:	state->deckCount[nextPlayer]--;
        -:  939:      }    
        -:  940:		       
    #####:  941:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  942:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  943:	state->playedCardCount++;
    #####:  944:	tributeRevealedCards[1] = -1;
        -:  945:      }
        -:  946:
    #####:  947:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  948:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  949:	  state->coins += 2;
        -:  950:	}
        -:  951:		    
    #####:  952:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  953:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  954:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  955:	}
        -:  956:	else{//Action Card
    #####:  957:	  state->numActions = state->numActions + 2;
        -:  958:	}
        -:  959:      }
        -:  960:	    
    #####:  961:      return 0;
        -:  962:		
        -:  963:    case ambassador:
    #####:  964:      j = 0;		//used to check if player has enough cards to discard
        -:  965:
    #####:  966:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  967:	{
    #####:  968:	  return -1;				
        -:  969:	}
        -:  970:
    #####:  971:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  972:	{
    #####:  973:	  return -1;
        -:  974:	}
        -:  975:
    #####:  976:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  977:	{
    #####:  978:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  979:	    {
    #####:  980:	      j++;
        -:  981:	    }
        -:  982:	}
    #####:  983:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  984:	{
    #####:  985:	  return -1;				
        -:  986:	}
        -:  987:
        -:  988:      if (DEBUG) 
        -:  989:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  990:
        -:  991:      //increase supply count for choosen card by amount being discarded
    #####:  992:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  993:			
        -:  994:      //each other player gains a copy of revealed card
    #####:  995:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  996:	{
    #####:  997:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  998:	    {
    #####:  999:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1000:	    }
        -: 1001:	}
        -: 1002:
        -: 1003:      //discard played card from hand
    #####: 1004:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1005:
        -: 1006:      //trash copies of cards returned to supply
    #####: 1007:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1008:	{
    #####: 1009:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1010:	    {
    #####: 1011:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1012:		{
    #####: 1013:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1014:		  break;
        -: 1015:		}
        -: 1016:	    }
        -: 1017:	}			
        -: 1018:
    #####: 1019:      return 0;
        -: 1020:		
        -: 1021:    case cutpurse:
        -: 1022:
    #####: 1023:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1024:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1025:	{
    #####: 1026:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1027:	    {
    #####: 1028:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1029:		{
    #####: 1030:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1031:		    {
    #####: 1032:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1033:		      break;
        -: 1034:		    }
    #####: 1035:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1036:		    {
    #####: 1037:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1038:			{
        -: 1039:			  if (DEBUG)
        -: 1040:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1041:			}	
    #####: 1042:		      break;
        -: 1043:		    }		
        -: 1044:		}
        -: 1045:					
        -: 1046:	    }
        -: 1047:				
        -: 1048:	}				
        -: 1049:
        -: 1050:      //discard played card from hand
    #####: 1051:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1052:
    #####: 1053:      return 0;
        -: 1054:
        -: 1055:		
        -: 1056:    case embargo: 
        -: 1057:      //+2 Coins
    #####: 1058:      state->coins = state->coins + 2;
        -: 1059:			
        -: 1060:      //see if selected pile is in play
    #####: 1061:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1062:	{
    #####: 1063:	  return -1;
        -: 1064:	}
        -: 1065:			
        -: 1066:      //add embargo token to selected supply pile
    #####: 1067:      state->embargoTokens[choice1]++;
        -: 1068:			
        -: 1069:      //trash card
    #####: 1070:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1071:      return 0;
        -: 1072:		
        -: 1073:    case outpost:
        -: 1074:      //set outpost flag
    #####: 1075:      state->outpostPlayed++;
        -: 1076:			
        -: 1077:      //discard card
    #####: 1078:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1079:      return 0;
        -: 1080:		
        -: 1081:    case salvager:
        -: 1082:      //+1 buy
    #####: 1083:      state->numBuys++;
        -: 1084:			
    #####: 1085:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1086:	{
        -: 1087:	  //gain coins equal to trashed card
    #####: 1088:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1089:	  //trash card
    #####: 1090:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1091:	}
        -: 1092:			
        -: 1093:      //discard card
    #####: 1094:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1095:      return 0;
        -: 1096:		
        -: 1097:    case sea_hag:
    #####: 1098:   	seahagPlay(currentPlayer, state, handPos);
call    0 never executed
    #####: 1099:    return 0;
        -: 1100:		
        -: 1101:    case treasure_map:
        -: 1102:      //search hand for another treasure_map
    #####: 1103:      index = -1;
    #####: 1104:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1105:	{
    #####: 1106:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1107:	    {
    #####: 1108:	      index = i;
    #####: 1109:	      break;
        -: 1110:	    }
        -: 1111:	}
    #####: 1112:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1113:	{
        -: 1114:	  //trash both treasure cards
    #####: 1115:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1116:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1117:
        -: 1118:	  //gain 4 Gold cards
    #####: 1119:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1120:	    {
    #####: 1121:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1122:	    }
        -: 1123:				
        -: 1124:	  //return success
    #####: 1125:	  return 1;
        -: 1126:	}
        -: 1127:			
        -: 1128:      //no second treasure_map found in hand
    #####: 1129:      return -1;
        -: 1130:    }
        -: 1131:	
    #####: 1132:  return -1;
        -: 1133:}
        -: 1134:
function seahagPlay called 5 returned 100% blocks executed 100%
        5: 1135:int seahagPlay(int currentPlayer, struct gameState *state, int handpos){
        -: 1136:	int i;
        -: 1137:
       15: 1138:	for (i = 0; i < state->numPlayers; i++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       10: 1139:	if (i != currentPlayer)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1140:	{
        5: 1141:		discardCard(state->deck[i][state->deckCount[i]--], i, state, 0);
call    0 returned 100%
        5: 1142:		state->deck[i][state->deckCount[i]] = curse;//Top card now a curse
        5: 1143:		state->deckCount[i]++;
        -: 1144:	}
        -: 1145:    }
        -: 1146:
        5: 1147:    discardCard(handpos, currentPlayer, state, 0);
call    0 returned 100%
        5: 1148:    state->discard[currentPlayer][state->discardCount[currentPlayer]] = sea_hag;
        5: 1149:    state->discardCount[currentPlayer]++;
        -: 1150:
        5: 1151:    return 0;
        -: 1152:}
        -: 1153:
        -: 1154:
function baronPlay called 4 returned 100% blocks executed 94%
        4: 1155:int baronPlay(int currentPlayer, int choice1, int handPos,
        -: 1156:		struct gameState *state) {
        4: 1157:	state->numBuys++; //No Matter what we get + 1 buy.
        -: 1158:	int p;
        -: 1159:	int card_not_discarded;
        -: 1160:
        4: 1161:	if (choice1 == 0) //Boolean true or going to discard an estate
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1162:			{
        2: 1163:		card_not_discarded = 0;
       10: 1164:		for (p = 0; p < state->handCount[currentPlayer]; p++) {
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
        9: 1165:			if (state->hand[currentPlayer][p] == estate) {
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        1: 1166:				state->coins += 4;
        1: 1167:				discardCard(p, currentPlayer, state, 0);
call    0 returned 100%
        1: 1168:				card_not_discarded = 1;
        1: 1169:				break;
        -: 1170:			}
        -: 1171:		}
        -: 1172:	}
        4: 1173:	if(choice1 != 0 || card_not_discarded != 1)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
        3: 1174:		if (supplyCount(estate, state) > 0)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -: 1175:		{
        3: 1176:			gainCard(estate, state, 0, currentPlayer); //Gain an estate
call    0 returned 100%
        3: 1177:			state->supplyCount[estate]--; //Decrement Estates
        3: 1178:			if (supplyCount(estate, state) == 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1179:			{
    #####: 1180:				isGameOver(state);
call    0 never executed
        -: 1181:			}
        -: 1182:		}
        4: 1183:return 0;
        -: 1184:}
        -: 1185:
function remodelPlay called 0 returned 0% blocks executed 0%
    #####: 1186:int remodelPlay(int currentPlayer, int choice1, int choice2, int handPos, struct gameState *state)
        -: 1187:{
        -: 1188:	int j;
        -: 1189:	int i;
    #####: 1190:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1191:
    #####: 1192:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -: 1193:	{
    #####: 1194:	  return -1; //card is too expensive and will not work. return an error.
        -: 1195:	}
        -: 1196:
    #####: 1197:    gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -: 1198:
        -: 1199:    //discard remodel card from hand
    #####: 1200:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1201:
        -: 1202:    //trash the choice card
    #####: 1203:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1204:	{
    #####: 1205:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -: 1206:	    {
    #####: 1207:	      discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####: 1208:	      break;
        -: 1209:	    }
        -: 1210:	}
    #####: 1211:    return 0;
        -: 1212:}
        -: 1213:
function adventurerPlay called 5 returned 100% blocks executed 94%
        5: 1214:int adventurerPlay(int currentPlayer, int handPos, struct gameState *state)
        -: 1215:{
        -: 1216:
        -: 1217:	int drawntreasure;
        -: 1218:	int z;
        -: 1219:	int cardDrawn;
        -: 1220:	int temphand[MAX_HAND];
        -: 1221:	int i;
        5: 1222:	z = 0;
        5: 1223:	drawntreasure = 0;
        -: 1224:	int shuffleCount;
        5: 1225:	shuffleCount = 0;
        -: 1226:
       35: 1227:	while (drawntreasure < 2)
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        -: 1228:	{
       30: 1229:		if (state->deckCount[currentPlayer] < 1)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1230:		{//if the deck is empty we need to shuffle discard and add to deck
       10: 1231:			shuffle(currentPlayer, state);
call    0 returned 100%
       10: 1232:			shuffleCount++;
       10: 1233:			if(shuffleCount==2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1234:			{
        5: 1235:				break; // breaks an infinite loop in rare case of no treasure in hand/deck.
        -: 1236:			}
        -: 1237:		}
        -: 1238:
       25: 1239:		drawCard(currentPlayer, state);
call    0 returned 100%
       25: 1240:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]]-1;//top card of hand is most recently drawn card.
        -: 1241:
       25: 1242:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -: 1243:		{
    #####: 1244:			drawntreasure++;
        -: 1245:		}
        -: 1246:		else
        -: 1247:		{
       25: 1248:			temphand[z] = cardDrawn;
       25: 1249:			state->handCount[currentPlayer] = state->handCount[currentPlayer] - 1;
       25: 1250:			z++;
        -: 1251:		}
        -: 1252:	}
       30: 1253:	for (i =0; i < z; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1254:	{
       50: 1255:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] =
       25: 1256:				temphand[i];
        -: 1257:	}
        -: 1258:
        5: 1259:	return 0;
        -: 1260:}
        -: 1261:
function smithPlay called 17 returned 100% blocks executed 61%
       17: 1262:int smithPlay(int currentPlayer, int handPos, struct gameState *state){
        -: 1263:
        -: 1264:int i;
        -: 1265:int bool; //to trigger if the deck has less than 3 cards and has been shuffled.
       17: 1266:bool = 0;
        -: 1267://if the deck has less than 3 cards re-shuffle the
        -: 1268://deck so the smithy card can be played.
       34: 1269:while(*(state->handCount) <= 3)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -: 1270:
        -: 1271:{
    #####: 1272:    for (i = 0; i < state->discardCount[currentPlayer];i++){
branch  0 never executed
branch  1 never executed
    #####: 1273:      state->deck[currentPlayer][i] = state->discard[currentPlayer][i];
    #####: 1274:      state->discard[currentPlayer][i] = -1;
        -: 1275:    }
        -: 1276:
    #####: 1277:    state->deckCount[currentPlayer] = state->discardCount[currentPlayer];
    #####: 1278:    state->discardCount[currentPlayer] = 0;
        -: 1279:
    #####: 1280:    shuffle(currentPlayer, state);
call    0 never executed
    #####: 1281:    bool =+ 1;
    #####: 1282:    if(bool == 2)
branch  0 never executed
branch  1 never executed
        -: 1283:    {
    #####: 1284:    	break;
        -: 1285:    }
        -: 1286:}
        -: 1287:
        -: 1288://If there are not enough cards in the deck to play the hand then return without drawing cards.
       17: 1289:if(*(state->handCount) <=3 || bool == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -: 1290:{
    #####: 1291:return 0;
        -: 1292:}
       68: 1293:for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -: 1294:	{
       51: 1295:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1296:	}
        -: 1297://discard card from hand
       17: 1298:discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1299:
       17: 1300:return 0;
        -: 1301:
        -: 1302:}
        -: 1303:
function discardCard called 102 returned 100% blocks executed 89%
      102: 1304:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1305:{
        -: 1306:	
        -: 1307:  //if card is not trashed, added to Played pile 
      102: 1308:  if (trashFlag < 1)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -: 1309:    {
        -: 1310:      //add card to played pile
      101: 1311:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      101: 1312:      state->playedCardCount++;
        -: 1313:    }
        -: 1314:	
        -: 1315:  //set played card to -1
      102: 1316:  state->hand[currentPlayer][handPos] = -1;
        -: 1317:	
        -: 1318:  //remove card from player's hand
      102: 1319:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1320:    {
        -: 1321:      //reduce number of cards in hand
        1: 1322:      state->handCount[currentPlayer]--;
        -: 1323:    }
      101: 1324:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1325:    {
        -: 1326:      //reduce number of cards in hand
    #####: 1327:      state->handCount[currentPlayer]--;
        -: 1328:    }
        -: 1329:  else 	
        -: 1330:    {
        -: 1331:      //replace discarded card with last card in hand
      101: 1332:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1333:      //set last card to -1
      101: 1334:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1335:      //reduce number of cards in hand
      101: 1336:      state->handCount[currentPlayer]--;
        -: 1337:    }
        -: 1338:	
      102: 1339:  return 0;
        -: 1340:}
        -: 1341:
function gainCard called 3 returned 100% blocks executed 70%
        3: 1342:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1343:{
        -: 1344:  //Note: supplyPos is enum of choosen card
        -: 1345:	
        -: 1346:  //check if supply pile is empty (0) or card is not used in game (-1)
        3: 1347:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1348:    {
    #####: 1349:      return -1;
        -: 1350:    }
        -: 1351:	
        -: 1352:  //added card for [whoseTurn] current player:
        -: 1353:  // toFlag = 0 : add to discard
        -: 1354:  // toFlag = 1 : add to deck
        -: 1355:  // toFlag = 2 : add to hand
        -: 1356:
        3: 1357:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1358:    {
    #####: 1359:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1360:      state->deckCount[player]++;
        -: 1361:    }
        3: 1362:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1363:    {
    #####: 1364:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1365:      state->handCount[player]++;
        -: 1366:    }
        -: 1367:  else
        -: 1368:    {
        3: 1369:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        3: 1370:      state->discardCount[player]++;
        -: 1371:    }
        -: 1372:	
        -: 1373:  //decrease number in supply pile
        3: 1374:  state->supplyCount[supplyPos]--;
        -: 1375:	 
        3: 1376:  return 0;
        -: 1377:}
        -: 1378:
function updateCoins called 22 returned 100% blocks executed 100%
       22: 1379:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1380:{
        -: 1381:  int i;
        -: 1382:	
        -: 1383:  //reset coin count
       22: 1384:  state->coins = 0;
        -: 1385:
        -: 1386:  //add coins for each Treasure card in player's hand
      132: 1387:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1388:    {
      110: 1389:      if (state->hand[player][i] == copper)
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
        -: 1390:	{
       73: 1391:	  state->coins += 1;
        -: 1392:	}
       37: 1393:      else if (state->hand[player][i] == silver)
branch  0 taken 32% (fallthrough)
branch  1 taken 68%
        -: 1394:	{
       12: 1395:	  state->coins += 2;
        -: 1396:	}
       25: 1397:      else if (state->hand[player][i] == gold)
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
        -: 1398:	{
        4: 1399:	  state->coins += 3;
        -: 1400:	}	
        -: 1401:    }	
        -: 1402:
        -: 1403:  //add bonus
       22: 1404:  state->coins += bonus;
        -: 1405:
       22: 1406:  return 0;
        -: 1407:}
        -: 1408:
        -: 1409:
        -: 1410://end of dominion.c
        -: 1411:
