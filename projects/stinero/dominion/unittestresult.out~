File 'dominion.c'
Lines executed:43.18% of 572
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:52
        -:    0:Programs:11
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
        -:    9:
    20751:   10:int compare(const void* a, const void* b) {
    20751:   11:  if (*(int*)a > *(int*)b)
     9231:   12:    return 1;
    11520:   13:  if (*(int*)a < *(int*)b)
     9548:   14:    return -1;
     1972:   15:  return 0;
        -:   16:}
        -:   17:
    #####:   18:struct gameState* newGame() {
    #####:   19:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
    #####:   23:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:		  int k8, int k9, int k10) {
    #####:   25:  int* k = malloc(10 * sizeof(int));
    #####:   26:  k[0] = k1;
    #####:   27:  k[1] = k2;
    #####:   28:  k[2] = k3;
    #####:   29:  k[3] = k4;
    #####:   30:  k[4] = k5;
    #####:   31:  k[5] = k6;
    #####:   32:  k[6] = k7;
    #####:   33:  k[7] = k8;
    #####:   34:  k[8] = k9;
    #####:   35:  k[9] = k10;
    #####:   36:  return k;
        -:   37:}
        -:   38:
       73:   39:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   40:		   struct gameState *state) {
        -:   41:
        -:   42:  int i;
        -:   43:  int j;
        -:   44:  int it;			
        -:   45:  //set up random number generator
       73:   46:  SelectStream(1);
       73:   47:  PutSeed((long)randomSeed);
        -:   48:  
        -:   49:  //check number of players
       73:   50:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   51:    {
    #####:   52:      return -1;
        -:   53:    }
        -:   54:
        -:   55:  //set number of players
       73:   56:  state->numPlayers = numPlayers;
        -:   57:
        -:   58:  //check selected kingdom cards are different
      803:   59:  for (i = 0; i < 10; i++)
        -:   60:    {
     8030:   61:      for (j = 0; j < 10; j++)
        -:   62:        {
     7300:   63:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   64:	    {
    #####:   65:	      return -1;
        -:   66:	    }
        -:   67:        }
        -:   68:    }
        -:   69:
        -:   70:
        -:   71:  //initialize supply
        -:   72:  ///////////////////////////////
        -:   73:
        -:   74:  //set number of Curse cards
       73:   75:  if (numPlayers == 2)
        -:   76:    {
       61:   77:      state->supplyCount[curse] = 10;
        -:   78:    }
       12:   79:  else if (numPlayers == 3)
        -:   80:    {
        6:   81:      state->supplyCount[curse] = 20;
        -:   82:    }
        -:   83:  else
        -:   84:    {
        6:   85:      state->supplyCount[curse] = 30;
        -:   86:    }
        -:   87:
        -:   88:  //set number of Victory cards
       73:   89:  if (numPlayers == 2)
        -:   90:    {
       61:   91:      state->supplyCount[estate] = 8;
       61:   92:      state->supplyCount[duchy] = 8;
       61:   93:      state->supplyCount[province] = 8;
        -:   94:    }
        -:   95:  else
        -:   96:    {
       12:   97:      state->supplyCount[estate] = 12;
       12:   98:      state->supplyCount[duchy] = 12;
       12:   99:      state->supplyCount[province] = 12;
        -:  100:    }
        -:  101:
        -:  102:  //set number of Treasure cards
       73:  103:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       73:  104:  state->supplyCount[silver] = 40;
       73:  105:  state->supplyCount[gold] = 30;
        -:  106:
        -:  107:  //set number of Kingdom cards
     1533:  108:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  109:    {
    12045:  110:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  111:	{
    11315:  112:	  if (kingdomCards[j] == i)
        -:  113:	    {
        -:  114:	      //check if card is a 'Victory' Kingdom card
      730:  115:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  116:		{
    #####:  117:		  if (numPlayers == 2){ 
    #####:  118:		    state->supplyCount[i] = 8; 
        -:  119:		  }
    #####:  120:		  else{ state->supplyCount[i] = 12; }
        -:  121:		}
        -:  122:	      else
        -:  123:		{
      730:  124:		  state->supplyCount[i] = 10;
        -:  125:		}
      730:  126:	      break;
        -:  127:	    }
        -:  128:	  else    //card is not in the set choosen for the game
        -:  129:	    {
    10585:  130:	      state->supplyCount[i] = -1;
        -:  131:	    }
        -:  132:	}
        -:  133:
        -:  134:    }
        -:  135:
        -:  136:  ////////////////////////
        -:  137:  //supply intilization complete
        -:  138:
        -:  139:  //set player decks
      237:  140:  for (i = 0; i < numPlayers; i++)
        -:  141:    {
      164:  142:      state->deckCount[i] = 0;
      656:  143:      for (j = 0; j < 3; j++)
        -:  144:	{
      492:  145:	  state->deck[i][j] = estate;
      492:  146:	  state->deckCount[i]++;
        -:  147:	}
     1312:  148:      for (j = 3; j < 10; j++)
        -:  149:	{
     1148:  150:	  state->deck[i][j] = copper;
     1148:  151:	  state->deckCount[i]++;		
        -:  152:	}
        -:  153:    }
        -:  154:
        -:  155:  //shuffle player decks
      237:  156:  for (i = 0; i < numPlayers; i++)
        -:  157:    {
      164:  158:      if ( shuffle(i, state) < 0 )
        -:  159:	{
    #####:  160:	  return -1;
        -:  161:	}
        -:  162:    }
        -:  163:
        -:  164:  //draw player hands
      237:  165:  for (i = 0; i < numPlayers; i++)
        -:  166:    {  
        -:  167:      //initialize hand size to zero
      164:  168:      state->handCount[i] = 0;
      164:  169:      state->discardCount[i] = 0;
        -:  170:      //draw 5 cards
        -:  171:      // for (j = 0; j < 5; j++)
        -:  172:      //	{
        -:  173:      //	  drawCard(i, state);
        -:  174:      //	}
        -:  175:    }
        -:  176:  
        -:  177:  //set embargo tokens to 0 for all supply piles
     2044:  178:  for (i = 0; i <= treasure_map; i++)
        -:  179:    {
     1971:  180:      state->embargoTokens[i] = 0;
        -:  181:    }
        -:  182:
        -:  183:  //initialize first player's turn
       73:  184:  state->outpostPlayed = 0;
       73:  185:  state->phase = 0;
       73:  186:  state->numActions = 1;
       73:  187:  state->numBuys = 1;
       73:  188:  state->playedCardCount = 0;
       73:  189:  state->whoseTurn = 0;
       73:  190:  state->handCount[state->whoseTurn] = 0;
        -:  191:  //int it; move to top
        -:  192:
        -:  193:  //Moved draw cards to here, only drawing at the start of a turn
      438:  194:  for (it = 0; it < 5; it++){
      365:  195:    drawCard(state->whoseTurn, state);
        -:  196:  }
        -:  197:
       73:  198:  updateCoins(state->whoseTurn, state, 0);
        -:  199:
       73:  200:  return 0;
        -:  201:}
        -:  202:
      335:  203:int shuffle(int player, struct gameState *state) {
        -:  204: 
        -:  205:
        -:  206:  int newDeck[MAX_DECK];
      335:  207:  int newDeckPos = 0;
        -:  208:  int card;
        -:  209:  int i;
        -:  210:
      335:  211:  if (state->deckCount[player] < 1)
      135:  212:    return -1;
        -:  213:
        -:  214:
      200:  215:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  216:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  217:
     4641:  218:  while (state->deckCount[player] > 0)
        -:  219:  {
     4241:  220:    card = floor(Random() * state->deckCount[player]);
     4241:  221:    newDeck[newDeckPos] = state->deck[player][card];
     4241:  222:    newDeckPos++;
        -:  223:
   251698:  224:    for (i = card; i < state->deckCount[player]-1; i++)
        -:  225:    {
   247457:  226:      state->deck[player][i] = state->deck[player][i+1];
        -:  227:    }
        -:  228:
     4241:  229:    state->deckCount[player]--;
        -:  230:  }
        -:  231:
     4441:  232:  for (i = 0; i < newDeckPos; i++) {
     4241:  233:    state->deck[player][i] = newDeck[i];
     4241:  234:    state->deckCount[player]++;
        -:  235:  }
        -:  236:
      200:  237:  return 0;
        -:  238:}
        -:  239:
    #####:  240:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  241:{	
        -:  242:  int card;
    #####:  243:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  244:
        -:  245:  //check if it is the right phase
    #####:  246:  if (state->phase != 0)
        -:  247:    {
    #####:  248:      return -1;
        -:  249:    }
        -:  250:	
        -:  251:  //check if player has enough actions
    #####:  252:  if ( state->numActions < 1 )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //get card played
    #####:  258:  card = handCard(handPos, state);
        -:  259:	
        -:  260:  //check if selected card is an action
    #####:  261:  if ( card < adventurer || card > treasure_map )
        -:  262:    {
    #####:  263:      return -1;
        -:  264:    }
        -:  265:	
        -:  266:  //play card
    #####:  267:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  268:    {
    #####:  269:      return -1;
        -:  270:    }
        -:  271:	
        -:  272:  //reduce number of actions
    #####:  273:  state->numActions--;
        -:  274:
        -:  275:  //update coins (Treasure cards may be added with card draws)
    #####:  276:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  277:	
    #####:  278:  return 0;
        -:  279:}
        -:  280:
        6:  281:int buyCard(int supplyPos, struct gameState *state) {
        -:  282:  int who;
        -:  283:  if (DEBUG){
        -:  284:    printf("Entering buyCard...\n");
        -:  285:  }
        -:  286:
        -:  287:  // I don't know what to do about the phase thing.
        -:  288:
        6:  289:  who = state->whoseTurn;
        -:  290:
        6:  291:  if (state->numBuys < 1){
        -:  292:    if (DEBUG)
        -:  293:      printf("You do not have any buys left\n");
    #####:  294:    return -1;
        6:  295:  } else if (supplyCount(supplyPos, state) <1){
        -:  296:    if (DEBUG)
        -:  297:      printf("There are not any of that type of card left\n");
        6:  298:    return -1;
    #####:  299:  } else if (state->coins < getCost(supplyPos)){
        -:  300:    if (DEBUG) 
        -:  301:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  302:    return -1;
        -:  303:  } else {
    #####:  304:    state->phase=1;
        -:  305:    //state->supplyCount[supplyPos]--;
    #####:  306:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  307:  
    #####:  308:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  309:    state->numBuys--;
        -:  310:    if (DEBUG)
        -:  311:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  312:  }
        -:  313:
        -:  314:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  315:  //state->discardCount[who]++;
        -:  316:    
    #####:  317:  return 0;
        -:  318:}
        -:  319:
    #####:  320:int numHandCards(struct gameState *state) {
    #####:  321:  return state->handCount[ whoseTurn(state) ];
        -:  322:}
        -:  323:
    #####:  324:int handCard(int handPos, struct gameState *state) {
    #####:  325:  int currentPlayer = whoseTurn(state);
    #####:  326:  return state->hand[currentPlayer][handPos];
        -:  327:}
        -:  328:
       60:  329:int supplyCount(int card, struct gameState *state) {
       60:  330:  return state->supplyCount[card];
        -:  331:}
        -:  332:
    #####:  333:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  334:  int i;
    #####:  335:  int count = 0;
        -:  336:
    #####:  337:  for (i = 0; i < state->deckCount[player]; i++)
        -:  338:    {
    #####:  339:      if (state->deck[player][i] == card) count++;
        -:  340:    }
        -:  341:
    #####:  342:  for (i = 0; i < state->handCount[player]; i++)
        -:  343:    {
    #####:  344:      if (state->hand[player][i] == card) count++;
        -:  345:    }
        -:  346:
    #####:  347:  for (i = 0; i < state->discardCount[player]; i++)
        -:  348:    {
    #####:  349:      if (state->discard[player][i] == card) count++;
        -:  350:    }
        -:  351:
    #####:  352:  return count;
        -:  353:}
        -:  354:
      191:  355:int whoseTurn(struct gameState *state) {
      191:  356:  return state->whoseTurn;
        -:  357:}
        -:  358:
       36:  359:int endTurn(struct gameState *state) {
        -:  360:  int k;
        -:  361:  int i;
       36:  362:  int currentPlayer = whoseTurn(state);
        -:  363:  
        -:  364:  //Discard hand
      216:  365:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      180:  366:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      180:  367:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  368:  }
       36:  369:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  370:    
        -:  371:  //Code for determining the player
       36:  372:  if (currentPlayer < (state->numPlayers - 1)){ 
       18:  373:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  374:  }
        -:  375:  else{
       18:  376:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  377:  }
        -:  378:
       36:  379:  state->outpostPlayed = 0;
       36:  380:  state->phase = 0;
       36:  381:  state->numActions = 1;
       36:  382:  state->coins = 0;
       36:  383:  state->numBuys = 1;
       36:  384:  state->playedCardCount = 0;
       36:  385:  state->handCount[state->whoseTurn] = 0;
        -:  386:
        -:  387:  //int k; move to top
        -:  388:  //Next player draws hand
      216:  389:  for (k = 0; k < 5; k++){
      180:  390:    drawCard(state->whoseTurn, state);//Draw a card
        -:  391:  }
        -:  392:
        -:  393:  //Update money
       36:  394:  updateCoins(state->whoseTurn, state , 0);
        -:  395:
       36:  396:  return 0;
        -:  397:}
        -:  398:
        6:  399:int isGameOver(struct gameState *state) {
        -:  400:  int i;
        -:  401:  int j;
        -:  402:	
        -:  403:  //if stack of Province cards is empty, the game ends
        6:  404:  if (state->supplyCount[province] == 0)
        -:  405:    {
    #####:  406:      return 1;
        -:  407:    }
        -:  408:
        -:  409:  //if three supply pile are at 0, the game ends
        6:  410:  j = 0;
      156:  411:  for (i = 0; i < 25; i++)
        -:  412:    {
      150:  413:      if (state->supplyCount[i] == 0)
        -:  414:	{
    #####:  415:	  j++;
        -:  416:	}
        -:  417:    }
        6:  418:  if ( j >= 3)
        -:  419:    {
    #####:  420:      return 1;
        -:  421:    }
        -:  422:
        6:  423:  return 0;
        -:  424:}
        -:  425:
       12:  426:int scoreFor (int player, struct gameState *state) {
        -:  427:
        -:  428:  int i;
       12:  429:  int score = 0;
        -:  430:  //score from hand
       84:  431:  for (i = 0; i < state->handCount[player]; i++)
        -:  432:    {
       72:  433:      if (state->hand[player][i] == curse) { score = score - 1; };
       72:  434:      if (state->hand[player][i] == estate) { score = score + 1; };
       72:  435:      if (state->hand[player][i] == duchy) { score = score + 3; };
       72:  436:      if (state->hand[player][i] == province) { score = score + 6; };
       72:  437:      if (state->hand[player][i] == great_hall) { score = score + 1; };
       72:  438:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  439:    }
        -:  440:
        -:  441:  //score from discard
       12:  442:  for (i = 0; i < state->discardCount[player]; i++)
        -:  443:    {
    #####:  444:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  445:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  446:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  447:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  448:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  449:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  450:    }
        -:  451:
        -:  452:  //score from deck
       12:  453:  for (i = 0; i < state->discardCount[player]; i++)
        -:  454:    {
    #####:  455:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  456:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  457:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  458:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  459:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  460:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  461:    }
        -:  462:
       12:  463:  return score;
        -:  464:}
        -:  465:
    #####:  466:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  467:  int i;	
        -:  468:  int j;
        -:  469:  int highScore;
        -:  470:  int currentPlayer;
        -:  471:
        -:  472:  //get score for each player
    #####:  473:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  474:    {
        -:  475:      //set unused player scores to -9999
    #####:  476:      if (i >= state->numPlayers)
        -:  477:	{
    #####:  478:	  players[i] = -9999;
        -:  479:	}
        -:  480:      else
        -:  481:	{
    #####:  482:	  players[i] = scoreFor (i, state);
        -:  483:	}
        -:  484:    }
        -:  485:
        -:  486:  //find highest score
    #####:  487:  j = 0;
    #####:  488:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  489:    {
    #####:  490:      if (players[i] > players[j])
        -:  491:	{
    #####:  492:	  j = i;
        -:  493:	}
        -:  494:    }
    #####:  495:  highScore = players[j];
        -:  496:
        -:  497:  //add 1 to players who had less turns
    #####:  498:  currentPlayer = whoseTurn(state);
    #####:  499:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  500:    {
    #####:  501:      if ( players[i] == highScore && i > currentPlayer )
        -:  502:	{
    #####:  503:	  players[i]++;
        -:  504:	}
        -:  505:    }
        -:  506:
        -:  507:  //find new highest score
    #####:  508:  j = 0;
    #####:  509:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  510:    {
    #####:  511:      if ( players[i] > players[j] )
        -:  512:	{
    #####:  513:	  j = i;
        -:  514:	}
        -:  515:    }
    #####:  516:  highScore = players[j];
        -:  517:
        -:  518:  //set winners in array to 1 and rest to 0
    #####:  519:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  520:    {
    #####:  521:      if ( players[i] == highScore )
        -:  522:	{
    #####:  523:	  players[i] = 1;
        -:  524:	}
        -:  525:      else
        -:  526:	{
    #####:  527:	  players[i] = 0;
        -:  528:	}
        -:  529:    }
        -:  530:
    #####:  531:  return 0;
        -:  532:}
        -:  533:
     7068:  534:int drawCard(int player, struct gameState *state)
        -:  535:{
        -:  536:  int count;
        -:  537:  int deckCounter;
     7068:  538:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  539:    
        -:  540:    //Step 1 Shuffle the discard pile back into a deck
        -:  541:    int i;
        -:  542:    //Move discard to deck
     2648:  543:    for (i = 0; i < state->discardCount[player];i++){
     2565:  544:      state->deck[player][i] = state->discard[player][i];
     2565:  545:      state->discard[player][i] = -1;
        -:  546:    }
        -:  547:
       83:  548:    state->deckCount[player] = state->discardCount[player];
       83:  549:    state->discardCount[player] = 0;//Reset discard
        -:  550:
        -:  551:    //Shufffle the deck
       83:  552:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  553:   
        -:  554:    if (DEBUG){//Debug statements
        -:  555:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  556:    }
        -:  557:    
       83:  558:    state->discardCount[player] = 0;
        -:  559:
        -:  560:    //Step 2 Draw Card
       83:  561:    count = state->handCount[player];//Get current player's hand count
        -:  562:    
        -:  563:    if (DEBUG){//Debug statements
        -:  564:      printf("Current hand count: %d\n", count);
        -:  565:    }
        -:  566:    
       83:  567:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  568:
       83:  569:    if (deckCounter == 0)
       59:  570:      return -1;
        -:  571:
       24:  572:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       24:  573:    state->deckCount[player]--;
       24:  574:    state->handCount[player]++;//Increment hand count
        -:  575:  }
        -:  576:
        -:  577:  else{
     6985:  578:    int count = state->handCount[player];//Get current hand count for player
        -:  579:    int deckCounter;
        -:  580:    if (DEBUG){//Debug statements
        -:  581:      printf("Current hand count: %d\n", count);
        -:  582:    }
        -:  583:
     6985:  584:    deckCounter = state->deckCount[player];//Create holder for the deck count
     6985:  585:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     6985:  586:    state->deckCount[player]--;
     6985:  587:    state->handCount[player]++;//Increment hand count
        -:  588:  }
        -:  589:
     7009:  590:  return 0;
        -:  591:}
        -:  592:
    #####:  593:int getCost(int cardNumber)
        -:  594:{
    #####:  595:  switch( cardNumber ) 
        -:  596:    {
        -:  597:    case curse:
    #####:  598:      return 0;
        -:  599:    case estate:
    #####:  600:      return 2;
        -:  601:    case duchy:
    #####:  602:      return 5;
        -:  603:    case province:
    #####:  604:      return 8;
        -:  605:    case copper:
    #####:  606:      return 0;
        -:  607:    case silver:
    #####:  608:      return 3;
        -:  609:    case gold:
    #####:  610:      return 6;
        -:  611:    case adventurer:
    #####:  612:      return 6;
        -:  613:    case council_room:
    #####:  614:      return 5;
        -:  615:    case feast:
    #####:  616:      return 4;
        -:  617:    case gardens:
    #####:  618:      return 4;
        -:  619:    case mine:
    #####:  620:      return 5;
        -:  621:    case remodel:
    #####:  622:      return 4;
        -:  623:    case smithy:
    #####:  624:      return 4;
        -:  625:    case village:
    #####:  626:      return 3;
        -:  627:    case baron:
    #####:  628:      return 4;
        -:  629:    case great_hall:
    #####:  630:      return 3;
        -:  631:    case minion:
    #####:  632:      return 5;
        -:  633:    case steward:
    #####:  634:      return 3;
        -:  635:    case tribute:
    #####:  636:      return 5;
        -:  637:    case ambassador:
    #####:  638:      return 3;
        -:  639:    case cutpurse:
    #####:  640:      return 4;
        -:  641:    case embargo: 
    #####:  642:      return 2;
        -:  643:    case outpost:
    #####:  644:      return 5;
        -:  645:    case salvager:
    #####:  646:      return 4;
        -:  647:    case sea_hag:
    #####:  648:      return 4;
        -:  649:    case treasure_map:
    #####:  650:      return 4;
        -:  651:    }
        -:  652:	
    #####:  653:  return -1;
        -:  654:}
        -:  655:
      155:  656:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  657:{
        -:  658:  int i;
        -:  659:  int j;
        -:  660:  int k;
        -:  661:  int x;
        -:  662:  int index;
      155:  663:  int currentPlayer = whoseTurn(state);
        -:  664:  int temphand[MAX_HAND];
      155:  665:  int nextPlayer = currentPlayer + 1;
        -:  666:
      155:  667:  int tributeRevealedCards[2] = {-1, -1};
      155:  668:  int returnMe=0;
      155:  669:  if (nextPlayer > (state->numPlayers - 1)){
        7:  670:    nextPlayer = 0;
        -:  671:  }
        -:  672:  
        -:  673:	
        -:  674:  //uses switch to select card and perform actions
      155:  675:  switch( card ) 
        -:  676:    {
        -:  677:    case adventurer:
       35:  678:    returnMe = adventurerPlay(currentPlayer, handPos, state);
       35:  679:    return returnMe;
        -:  680:			
        -:  681:    case council_room:
        -:  682:      //+4 Cards
    #####:  683:      for (i = 0; i < 4; i++)
        -:  684:	{
    #####:  685:	  drawCard(currentPlayer, state);
        -:  686:	}
        -:  687:			
        -:  688:      //+1 Buy
    #####:  689:      state->numBuys++;
        -:  690:			
        -:  691:      //Each other player draws a card
    #####:  692:      for (i = 0; i < state->numPlayers; i++)
        -:  693:	{
    #####:  694:	  if ( i != currentPlayer )
        -:  695:	    {
    #####:  696:	      drawCard(i, state);
        -:  697:	    }
        -:  698:	}
        -:  699:			
        -:  700:      //put played card in played card pile
    #####:  701:      discardCard(handPos, currentPlayer, state, 0);
        -:  702:			
    #####:  703:      return 0;
        -:  704:			
        -:  705:    case feast:
        -:  706:      //gain card with cost up to 5
        -:  707:      //Backup hand
    #####:  708:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  709:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  710:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  711:      }
        -:  712:      //Backup hand
        -:  713:
        -:  714:      //Update Coins for Buy
    #####:  715:      updateCoins(currentPlayer, state, 5);
    #####:  716:      x = 1;//Condition to loop on
    #####:  717:      while( x == 1) {//Buy one card
    #####:  718:	if (supplyCount(choice1, state) <= 0){
        -:  719:	  if (DEBUG)
        -:  720:	    printf("None of that card left, sorry!\n");
        -:  721:
        -:  722:	  if (DEBUG){
        -:  723:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  724:	  }
        -:  725:	}
    #####:  726:	else if (state->coins < getCost(choice1)){
    #####:  727:	  printf("That card is too expensive!\n");
        -:  728:
        -:  729:	  if (DEBUG){
        -:  730:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  731:	  }
        -:  732:	}
        -:  733:	else{
        -:  734:
        -:  735:	  if (DEBUG){
        -:  736:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  737:	  }
        -:  738:
    #####:  739:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  740:	  x = 0;//No more buying cards
        -:  741:
        -:  742:	  if (DEBUG){
        -:  743:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  744:	  }
        -:  745:
        -:  746:	}
        -:  747:      }     
        -:  748:
        -:  749:      //Reset Hand
    #####:  750:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  751:	state->hand[currentPlayer][i] = temphand[i];
    #####:  752:	temphand[i] = -1;
        -:  753:      }
        -:  754:      //Reset Hand
        -:  755:      			
    #####:  756:      return 0;
        -:  757:			
        -:  758:    case gardens:
    #####:  759:      return -1;
        -:  760:			
        -:  761:    case mine:
    #####:  762:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  763:
    #####:  764:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  765:	{
    #####:  766:	  return -1;
        -:  767:	}
        -:  768:		
    #####:  769:      if (choice2 > treasure_map || choice2 < curse)
        -:  770:	{
    #####:  771:	  return -1;
        -:  772:	}
        -:  773:
    #####:  774:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  775:	{
    #####:  776:	  return -1;
        -:  777:	}
        -:  778:
    #####:  779:      gainCard(choice2, state, 2, currentPlayer);
        -:  780:
        -:  781:      //discard card from hand
    #####:  782:      discardCard(handPos, currentPlayer, state, 0);
        -:  783:
        -:  784:      //discard trashed card
    #####:  785:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  786:	{
    #####:  787:	  if (state->hand[currentPlayer][i] == j)
        -:  788:	    {
    #####:  789:	      discardCard(i, currentPlayer, state, 0);			
    #####:  790:	      break;
        -:  791:	    }
        -:  792:	}
        -:  793:			
    #####:  794:      return 0;
        -:  795:			
        -:  796:    case remodel:
    #####:  797:    remodelPlay(currentPlayer, choice1, choice2, handPos, state);
    #####:  798:    return 0;
        -:  799:		
        -:  800:    case smithy:
      102:  801:    smithPlay(currentPlayer, handPos, state);
      102:  802:    return 0;
        -:  803:		
        -:  804:    case village:
        -:  805:      //+1 Card
    #####:  806:      drawCard(currentPlayer, state);
        -:  807:			
        -:  808:      //+2 Actions
    #####:  809:      state->numActions = state->numActions + 2;
        -:  810:			
        -:  811:      //discard played card from hand
    #####:  812:      discardCard(handPos, currentPlayer, state, 0);
    #####:  813:      return 0;
        -:  814:		
        -:  815:    case baron:
       18:  816:   	baronPlay(currentPlayer, choice1, handPos, state);
       18:  817:    return 0;
        -:  818:		
        -:  819:    case great_hall:
        -:  820:      //+1 Card
    #####:  821:      drawCard(currentPlayer, state);
        -:  822:			
        -:  823:      //+1 Actions
    #####:  824:      state->numActions++;
        -:  825:			
        -:  826:      //discard card from hand
    #####:  827:      discardCard(handPos, currentPlayer, state, 0);
    #####:  828:      return 0;
        -:  829:		
        -:  830:    case minion:
        -:  831:      //+1 action
    #####:  832:      state->numActions++;
        -:  833:			
        -:  834:      //discard card from hand
    #####:  835:      discardCard(handPos, currentPlayer, state, 0);
        -:  836:			
    #####:  837:      if (choice1)		//+2 coins
        -:  838:	{
    #####:  839:	  state->coins = state->coins + 2;
        -:  840:	}
        -:  841:			
    #####:  842:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  843:	{
        -:  844:	  //discard hand
    #####:  845:	  while(numHandCards(state) > 0)
        -:  846:	    {
    #####:  847:	      discardCard(handPos, currentPlayer, state, 0);
        -:  848:	    }
        -:  849:				
        -:  850:	  //draw 4
    #####:  851:	  for (i = 0; i < 4; i++)
        -:  852:	    {
    #####:  853:	      drawCard(currentPlayer, state);
        -:  854:	    }
        -:  855:				
        -:  856:	  //other players discard hand and redraw if hand size > 4
    #####:  857:	  for (i = 0; i < state->numPlayers; i++)
        -:  858:	    {
    #####:  859:	      if (i != currentPlayer)
        -:  860:		{
    #####:  861:		  if ( state->handCount[i] > 4 )
        -:  862:		    {
        -:  863:		      //discard hand
    #####:  864:		      while( state->handCount[i] > 0 )
        -:  865:			{
    #####:  866:			  discardCard(handPos, i, state, 0);
        -:  867:			}
        -:  868:							
        -:  869:		      //draw 4
    #####:  870:		      for (j = 0; j < 4; j++)
        -:  871:			{
    #####:  872:			  drawCard(i, state);
        -:  873:			}
        -:  874:		    }
        -:  875:		}
        -:  876:	    }
        -:  877:				
        -:  878:	}
    #####:  879:      return 0;
        -:  880:		
        -:  881:    case steward:
    #####:  882:      if (choice1 == 1)
        -:  883:	{
        -:  884:	  //+2 cards
    #####:  885:	  drawCard(currentPlayer, state);
    #####:  886:	  drawCard(currentPlayer, state);
        -:  887:	}
    #####:  888:      else if (choice1 == 2)
        -:  889:	{
        -:  890:	  //+2 coins
    #####:  891:	  state->coins = state->coins + 2;
        -:  892:	}
        -:  893:      else
        -:  894:	{
        -:  895:	  //trash 2 cards in hand
    #####:  896:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  897:	  discardCard(choice3, currentPlayer, state, 1);
        -:  898:	}
        -:  899:			
        -:  900:      //discard card from hand
    #####:  901:      discardCard(handPos, currentPlayer, state, 0);
    #####:  902:      return 0;
        -:  903:		
        -:  904:    case tribute:
    #####:  905:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  906:	if (state->deckCount[nextPlayer] > 0){
    #####:  907:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  908:	  state->deckCount[nextPlayer]--;
        -:  909:	}
    #####:  910:	else if (state->discardCount[nextPlayer] > 0){
    #####:  911:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  912:	  state->discardCount[nextPlayer]--;
        -:  913:	}
        -:  914:	else{
        -:  915:	  //No Card to Reveal
        -:  916:	  if (DEBUG){
        -:  917:	    printf("No cards to reveal\n");
        -:  918:	  }
        -:  919:	}
        -:  920:      }
        -:  921:	    
        -:  922:      else{
    #####:  923:	if (state->deckCount[nextPlayer] == 0){
    #####:  924:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  925:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  926:	    state->deckCount[nextPlayer]++;
    #####:  927:	    state->discard[nextPlayer][i] = -1;
    #####:  928:	    state->discardCount[nextPlayer]--;
        -:  929:	  }
        -:  930:			    
    #####:  931:	  shuffle(nextPlayer,state);//Shuffle the deck
        -:  932:	} 
    #####:  933:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  934:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  935:	state->deckCount[nextPlayer]--;
    #####:  936:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  937:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  938:	state->deckCount[nextPlayer]--;
        -:  939:      }    
        -:  940:		       
    #####:  941:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  942:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  943:	state->playedCardCount++;
    #####:  944:	tributeRevealedCards[1] = -1;
        -:  945:      }
        -:  946:
    #####:  947:      for (i = 0; i <= 2; i ++){
    #####:  948:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  949:	  state->coins += 2;
        -:  950:	}
        -:  951:		    
    #####:  952:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  953:	  drawCard(currentPlayer, state);
    #####:  954:	  drawCard(currentPlayer, state);
        -:  955:	}
        -:  956:	else{//Action Card
    #####:  957:	  state->numActions = state->numActions + 2;
        -:  958:	}
        -:  959:      }
        -:  960:	    
    #####:  961:      return 0;
        -:  962:		
        -:  963:    case ambassador:
    #####:  964:      j = 0;		//used to check if player has enough cards to discard
        -:  965:
    #####:  966:      if (choice2 > 2 || choice2 < 0)
        -:  967:	{
    #####:  968:	  return -1;				
        -:  969:	}
        -:  970:
    #####:  971:      if (choice1 == handPos)
        -:  972:	{
    #####:  973:	  return -1;
        -:  974:	}
        -:  975:
    #####:  976:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  977:	{
    #####:  978:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  979:	    {
    #####:  980:	      j++;
        -:  981:	    }
        -:  982:	}
    #####:  983:      if (j < choice2)
        -:  984:	{
    #####:  985:	  return -1;				
        -:  986:	}
        -:  987:
        -:  988:      if (DEBUG) 
        -:  989:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  990:
        -:  991:      //increase supply count for choosen card by amount being discarded
    #####:  992:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  993:			
        -:  994:      //each other player gains a copy of revealed card
    #####:  995:      for (i = 0; i < state->numPlayers; i++)
        -:  996:	{
    #####:  997:	  if (i != currentPlayer)
        -:  998:	    {
    #####:  999:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1000:	    }
        -: 1001:	}
        -: 1002:
        -: 1003:      //discard played card from hand
    #####: 1004:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1005:
        -: 1006:      //trash copies of cards returned to supply
    #####: 1007:      for (j = 0; j < choice2; j++)
        -: 1008:	{
    #####: 1009:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1010:	    {
    #####: 1011:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1012:		{
    #####: 1013:		  discardCard(i, currentPlayer, state, 1);
    #####: 1014:		  break;
        -: 1015:		}
        -: 1016:	    }
        -: 1017:	}			
        -: 1018:
    #####: 1019:      return 0;
        -: 1020:		
        -: 1021:    case cutpurse:
        -: 1022:
    #####: 1023:      updateCoins(currentPlayer, state, 2);
    #####: 1024:      for (i = 0; i < state->numPlayers; i++)
        -: 1025:	{
    #####: 1026:	  if (i != currentPlayer)
        -: 1027:	    {
    #####: 1028:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1029:		{
    #####: 1030:		  if (state->hand[i][j] == copper)
        -: 1031:		    {
    #####: 1032:		      discardCard(j, i, state, 0);
    #####: 1033:		      break;
        -: 1034:		    }
    #####: 1035:		  if (j == state->handCount[i])
        -: 1036:		    {
    #####: 1037:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1038:			{
        -: 1039:			  if (DEBUG)
        -: 1040:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1041:			}	
    #####: 1042:		      break;
        -: 1043:		    }		
        -: 1044:		}
        -: 1045:					
        -: 1046:	    }
        -: 1047:				
        -: 1048:	}				
        -: 1049:
        -: 1050:      //discard played card from hand
    #####: 1051:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1052:
    #####: 1053:      return 0;
        -: 1054:
        -: 1055:		
        -: 1056:    case embargo: 
        -: 1057:      //+2 Coins
    #####: 1058:      state->coins = state->coins + 2;
        -: 1059:			
        -: 1060:      //see if selected pile is in play
    #####: 1061:      if ( state->supplyCount[choice1] == -1 )
        -: 1062:	{
    #####: 1063:	  return -1;
        -: 1064:	}
        -: 1065:			
        -: 1066:      //add embargo token to selected supply pile
    #####: 1067:      state->embargoTokens[choice1]++;
        -: 1068:			
        -: 1069:      //trash card
    #####: 1070:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1071:      return 0;
        -: 1072:		
        -: 1073:    case outpost:
        -: 1074:      //set outpost flag
    #####: 1075:      state->outpostPlayed++;
        -: 1076:			
        -: 1077:      //discard card
    #####: 1078:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1079:      return 0;
        -: 1080:		
        -: 1081:    case salvager:
        -: 1082:      //+1 buy
    #####: 1083:      state->numBuys++;
        -: 1084:			
    #####: 1085:      if (choice1)
        -: 1086:	{
        -: 1087:	  //gain coins equal to trashed card
    #####: 1088:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1089:	  //trash card
    #####: 1090:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1091:	}
        -: 1092:			
        -: 1093:      //discard card
    #####: 1094:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1095:      return 0;
        -: 1096:		
        -: 1097:    case sea_hag:
    #####: 1098:   	seahagPlay(currentPlayer, state, handPos);
    #####: 1099:    return 0;
        -: 1100:		
        -: 1101:    case treasure_map:
        -: 1102:      //search hand for another treasure_map
    #####: 1103:      index = -1;
    #####: 1104:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1105:	{
    #####: 1106:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1107:	    {
    #####: 1108:	      index = i;
    #####: 1109:	      break;
        -: 1110:	    }
        -: 1111:	}
    #####: 1112:      if (index > -1)
        -: 1113:	{
        -: 1114:	  //trash both treasure cards
    #####: 1115:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1116:	  discardCard(index, currentPlayer, state, 1);
        -: 1117:
        -: 1118:	  //gain 4 Gold cards
    #####: 1119:	  for (i = 0; i < 4; i++)
        -: 1120:	    {
    #####: 1121:	      gainCard(gold, state, 1, currentPlayer);
        -: 1122:	    }
        -: 1123:				
        -: 1124:	  //return success
    #####: 1125:	  return 1;
        -: 1126:	}
        -: 1127:			
        -: 1128:      //no second treasure_map found in hand
    #####: 1129:      return -1;
        -: 1130:    }
        -: 1131:	
    #####: 1132:  return -1;
        -: 1133:}
        -: 1134:
       30: 1135:int seahagPlay(int currentPlayer, struct gameState *state, int handpos){
        -: 1136:	int i;
        -: 1137:
       90: 1138:	for (i = 0; i < state->numPlayers; i++){
       60: 1139:	if (i != currentPlayer)
        -: 1140:	{
       30: 1141:		discardCard(state->deck[i][state->deckCount[i]--], i, state, 0);
       30: 1142:		state->deck[i][state->deckCount[i]] = curse;//Top card now a curse
       30: 1143:		state->deckCount[i]++;
        -: 1144:	}
        -: 1145:    }
        -: 1146:
       30: 1147:    discardCard(handpos, currentPlayer, state, 0);
       30: 1148:    state->discard[currentPlayer][state->discardCount[currentPlayer]] = sea_hag;
       30: 1149:    state->discardCount[currentPlayer]++;
        -: 1150:
       30: 1151:    return 0;
        -: 1152:}
        -: 1153:
        -: 1154:
       24: 1155:int baronPlay(int currentPlayer, int choice1, int handPos,
        -: 1156:		struct gameState *state) {
       24: 1157:	state->numBuys++; //No Matter what we get + 1 buy.
        -: 1158:	int p;
        -: 1159:	int card_not_discarded;
        -: 1160:
       24: 1161:	if (choice1 == 0) //Boolean true or going to discard an estate
        -: 1162:			{
       12: 1163:		card_not_discarded = 0;
       60: 1164:		for (p = 0; p < state->handCount[currentPlayer]; p++) {
       54: 1165:			if (state->hand[currentPlayer][p] == estate) {
        6: 1166:				state->coins += 4;
        6: 1167:				discardCard(p, currentPlayer, state, 0);
        6: 1168:				card_not_discarded = 1;
        6: 1169:				break;
        -: 1170:			}
        -: 1171:		}
        -: 1172:	}
       24: 1173:	if(choice1 != 0 || card_not_discarded != 1)
       18: 1174:		if (supplyCount(estate, state) > 0)
        -: 1175:		{
       18: 1176:			gainCard(estate, state, 0, currentPlayer); //Gain an estate
       18: 1177:			state->supplyCount[estate]--; //Decrement Estates
       18: 1178:			if (supplyCount(estate, state) == 0)
        -: 1179:			{
    #####: 1180:				isGameOver(state);
        -: 1181:			}
        -: 1182:		}
       24: 1183:return 0;
        -: 1184:}
        -: 1185:
    #####: 1186:int remodelPlay(int currentPlayer, int choice1, int choice2, int handPos, struct gameState *state)
        -: 1187:{
        -: 1188:	int j;
        -: 1189:	int i;
    #####: 1190:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1191:
    #####: 1192:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1193:	{
    #####: 1194:	  return -1; //card is too expensive and will not work. return an error.
        -: 1195:	}
        -: 1196:
    #####: 1197:    gainCard(choice2, state, 0, currentPlayer);
        -: 1198:
        -: 1199:    //discard remodel card from hand
    #####: 1200:    discardCard(handPos, currentPlayer, state, 0);
        -: 1201:
        -: 1202:    //trash the choice card
    #####: 1203:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1204:	{
    #####: 1205:	  if (state->hand[currentPlayer][i] == j)
        -: 1206:	    {
    #####: 1207:	      discardCard(i, currentPlayer, state, 0);
    #####: 1208:	      break;
        -: 1209:	    }
        -: 1210:	}
    #####: 1211:    return 0;
        -: 1212:}
        -: 1213:
       35: 1214:int adventurerPlay(int currentPlayer, int handPos, struct gameState *state)
        -: 1215:{
        -: 1216:
        -: 1217:	int drawntreasure;
        -: 1218:	int z;
        -: 1219:	int cardDrawn;
        -: 1220:	int temphand[MAX_HAND];
        -: 1221:	int i;
       35: 1222:	z = 0;
       35: 1223:	drawntreasure = 0;
        -: 1224:	int shuffleCount;
       35: 1225:	shuffleCount = 0;
        -: 1226:
      245: 1227:	while (drawntreasure < 2)
        -: 1228:	{
      210: 1229:		if (state->deckCount[currentPlayer] < 1)
        -: 1230:		{//if the deck is empty we need to shuffle discard and add to deck
       70: 1231:			shuffle(currentPlayer, state);
       70: 1232:			shuffleCount++;
       70: 1233:			if(shuffleCount==2)
        -: 1234:			{
       35: 1235:				break; // breaks an infinite loop in rare case of no treasure in hand/deck.
        -: 1236:			}
        -: 1237:		}
        -: 1238:
      175: 1239:		drawCard(currentPlayer, state);
      175: 1240:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]]-1;//top card of hand is most recently drawn card.
        -: 1241:
      175: 1242:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -: 1243:		{
    #####: 1244:			drawntreasure++;
        -: 1245:		}
        -: 1246:		else
        -: 1247:		{
      175: 1248:			temphand[z] = cardDrawn;
      175: 1249:			state->handCount[currentPlayer] = state->handCount[currentPlayer] - 1;
      175: 1250:			z++;
        -: 1251:		}
        -: 1252:	}
      210: 1253:	for (i =0; i < z; i++)
        -: 1254:	{
      350: 1255:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] =
      175: 1256:				temphand[i];
        -: 1257:	}
        -: 1258:
       35: 1259:	return 0;
        -: 1260:}
        -: 1261:
      102: 1262:int smithPlay(int currentPlayer, int handPos, struct gameState *state){
        -: 1263:
        -: 1264:int i;
        -: 1265:int bool; //to trigger if the deck has less than 3 cards and has been shuffled.
      102: 1266:bool = 0;
        -: 1267://if the deck has less than 3 cards re-shuffle the
        -: 1268://deck so the smithy card can be played.
      204: 1269:while(*(state->handCount) <= 3)
        -: 1270:
        -: 1271:{
    #####: 1272:    for (i = 0; i < state->discardCount[currentPlayer];i++){
    #####: 1273:      state->deck[currentPlayer][i] = state->discard[currentPlayer][i];
    #####: 1274:      state->discard[currentPlayer][i] = -1;
        -: 1275:    }
        -: 1276:
    #####: 1277:    state->deckCount[currentPlayer] = state->discardCount[currentPlayer];
    #####: 1278:    state->discardCount[currentPlayer] = 0;
        -: 1279:
    #####: 1280:    shuffle(currentPlayer, state);
    #####: 1281:    bool =+ 1;
    #####: 1282:    if(bool == 2)
        -: 1283:    {
    #####: 1284:    	break;
        -: 1285:    }
        -: 1286:}
        -: 1287:
        -: 1288://If there are not enough cards in the deck to play the hand then return without drawing cards.
      102: 1289:if(*(state->handCount) <=3 || bool == 2)
        -: 1290:{
    #####: 1291:return 0;
        -: 1292:}
      408: 1293:for (i = 0; i < 3; i++)
        -: 1294:	{
      306: 1295:	  drawCard(currentPlayer, state);
        -: 1296:	}
        -: 1297://discard card from hand
      102: 1298:discardCard(handPos, currentPlayer, state, 0);
        -: 1299:
      102: 1300:return 0;
        -: 1301:
        -: 1302:}
        -: 1303:
      679: 1304:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1305:{
        -: 1306:	
        -: 1307:  //if card is not trashed, added to Played pile 
      679: 1308:  if (trashFlag < 1)
        -: 1309:    {
        -: 1310:      //add card to played pile
      673: 1311:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      673: 1312:      state->playedCardCount++;
        -: 1313:    }
        -: 1314:	
        -: 1315:  //set played card to -1
      679: 1316:  state->hand[currentPlayer][handPos] = -1;
        -: 1317:	
        -: 1318:  //remove card from player's hand
      679: 1319:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1320:    {
        -: 1321:      //reduce number of cards in hand
        7: 1322:      state->handCount[currentPlayer]--;
        -: 1323:    }
      672: 1324:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1325:    {
        -: 1326:      //reduce number of cards in hand
    #####: 1327:      state->handCount[currentPlayer]--;
        -: 1328:    }
        -: 1329:  else 	
        -: 1330:    {
        -: 1331:      //replace discarded card with last card in hand
      672: 1332:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1333:      //set last card to -1
      672: 1334:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1335:      //reduce number of cards in hand
      672: 1336:      state->handCount[currentPlayer]--;
        -: 1337:    }
        -: 1338:	
      679: 1339:  return 0;
        -: 1340:}
        -: 1341:
       18: 1342:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1343:{
        -: 1344:  //Note: supplyPos is enum of choosen card
        -: 1345:	
        -: 1346:  //check if supply pile is empty (0) or card is not used in game (-1)
       18: 1347:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1348:    {
    #####: 1349:      return -1;
        -: 1350:    }
        -: 1351:	
        -: 1352:  //added card for [whoseTurn] current player:
        -: 1353:  // toFlag = 0 : add to discard
        -: 1354:  // toFlag = 1 : add to deck
        -: 1355:  // toFlag = 2 : add to hand
        -: 1356:
       18: 1357:  if (toFlag == 1)
        -: 1358:    {
    #####: 1359:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1360:      state->deckCount[player]++;
        -: 1361:    }
       18: 1362:  else if (toFlag == 2)
        -: 1363:    {
    #####: 1364:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1365:      state->handCount[player]++;
        -: 1366:    }
        -: 1367:  else
        -: 1368:    {
       18: 1369:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       18: 1370:      state->discardCount[player]++;
        -: 1371:    }
        -: 1372:	
        -: 1373:  //decrease number in supply pile
       18: 1374:  state->supplyCount[supplyPos]--;
        -: 1375:	 
       18: 1376:  return 0;
        -: 1377:}
        -: 1378:
      133: 1379:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1380:{
        -: 1381:  int i;
        -: 1382:	
        -: 1383:  //reset coin count
      133: 1384:  state->coins = 0;
        -: 1385:
        -: 1386:  //add coins for each Treasure card in player's hand
      798: 1387:  for (i = 0; i < state->handCount[player]; i++)
        -: 1388:    {
      665: 1389:      if (state->hand[player][i] == copper)
        -: 1390:	{
      442: 1391:	  state->coins += 1;
        -: 1392:	}
      223: 1393:      else if (state->hand[player][i] == silver)
        -: 1394:	{
       72: 1395:	  state->coins += 2;
        -: 1396:	}
      151: 1397:      else if (state->hand[player][i] == gold)
        -: 1398:	{
       24: 1399:	  state->coins += 3;
        -: 1400:	}	
        -: 1401:    }	
        -: 1402:
        -: 1403:  //add bonus
      133: 1404:  state->coins += bonus;
        -: 1405:
      133: 1406:  return 0;
        -: 1407:}
        -: 1408:
        -: 1409:
        -: 1410://end of dominion.c
        -: 1411:
