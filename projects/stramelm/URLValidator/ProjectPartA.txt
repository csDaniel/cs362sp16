-------------------------------
Project Part A
-------------------------------

Cash Stramel (stramelm)
Diana O'Haver (ohaverd)
Kelby Faessler (faesslek)

-------------------------------
explain testIsValid() function:
-------------------------------

testIsValid() is an overloaded function

  The first version returns void and accepts two input arguments.  It makes
  calls to the second version of testIsValid() and to setUp(). 
  
  The second version of testIsValid accepts two arguments.  The first argument
  is an array of arrays of ResultPair[] objects, which consist of partial URLs
  and true/false values indicated their validity.  The second argument is an
  option for how URLValidator should proceed.

  Inside testIsValid(Object[], long):
    - create instance of UrlValidator object
    - create different URL's which are combinations of the different elements of
      the five arrays of ResultPair[] objects
        1. testUrlScheme [length = 9]
        2. testUrlAuthority [length = 19]
        3. testUrlPort [length = 7]
        4. testPath [length = 10]
        5. testUrlQuery [length = 3]

-------------------------------
how many total URLs is it testing?
-------------------------------

On the surface the answer would appear to be 9*19*7*10*3 = 35910.  That is the
number of combinations of possible URL's given the five arrays of ResultPair[]
objects that the code starts with.

However, when we inserted a counter it was only 8*19*7*10*3 = 31920.  This is
the number of URL's that showed up in a file that we were writing to.

When the code reaches the last index in testUrlScheme, where the value is an
empty string, the first URL tested using this empty string prefix is
"www.google.com:80/test1?action=view".  In this case the value of "expected" is
true, but when the URL is actually tested using the urlVal.isValid() method
the returned value "result" is false.

A couple of lines later assertEquals() is called.  The assertion fails because
expected != result and the code throws an assertion - ending the program.  At
this point the final 1*19*7*10*3 = 3990 URL's are not tested.

To be more exact, it's (31920 + 1) URL's that are testing, because that last one
causes the failed assertion and it's (3990 - 1) that aren't tested.

-------------------------------
give an example of a valid URL being tested
-------------------------------

http://www.google.com:80/test1?action=view

-------------------------------
give an example of an invalid URL being tested
-------------------------------

http://www.google.com:80/..?action=view

-------------------------------
how is it building all the URLs?
-------------------------------

The code cycles through the elements of the five arrays of ResultPair[] objects
and creates unique URLs by appending the different elements of each array.

For example:

firstURL =
  testUrlScheme[0] +
  testUrlAuthority[0] +
  testUrlPort[0] +
  testPath[0] +
  testUrlQuery[0]

secondURL =
  testUrlScheme[0] +
  testUrlAuthority[0] +
  testUrlPort[0] +
  testPath[0] +
  testUrlQuery[1]

A complete list of all 31920 URLs can be found in the file urls_tested.txt in
the same folder as this one.

-------------------------------
are these tests very different than unit/card tests we
  wrote in terms of concepts & complexity?
-------------------------------

The concepts are similar because we are feeding in different valid and invalid
inputs including boundary conditions and we are able to compare the output to
expected results.

The tests are less complex in the sense that we are just doing simple string
validation compared to dominion that is working with objects and has greater
chance of more serious errors include memory allocation and read errors that
drive segmentation faults.

Additionally, the results are simple boolean values.  In the dominion testing
the results are game states (structs) with multiple variable attributes.
