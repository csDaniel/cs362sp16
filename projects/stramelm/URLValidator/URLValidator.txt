					Final Project

					Cash Stramel
				    Kelby Faessler
					Diana O'Haver

------------------------------------------------------------------------------------------------
	Manual Testing, Input Partitioning, Unit Testing
										
Sample of inputs used with manual testing:

http://10.1.1.254
http://.www.foo.bar/
http://123.123.123
http://a.b-.co
http:// shouldfail.com
"http://223.255.255.254
ftp://foo.bar/baz
http://مثال.إختبار
http://foo.com/blah_(wikipedia)_blah#cite-1

Sample of inputs used with input partitioning:


Unit tests: 
	Submitted below under "Code Used: Unit Tests"

										
------------------------------------------------------------------------------------------------
				Testing with Debugger
									
									
									
									
									
									
------------------------------------------------------------------------------------------------
				Report and Discussion
									
Methodology: Manual Testing

Our manual testing sought to cover as many scenarios as possible. Valid test cases were easily
assembled using accepted URL conventions as well as valid IP addresses. Invalid test cases 
addressed the following scenarios:
	Incorrect spaces
	Incorrect punctuation (i.e. http://.www.foo.bar/)
	Invalid IP address range
	Numbers entered without IP address configuration
	Missing critical URL components
	Foreign characters
	Invalid protocols
	NULL value in place of URL
								
Methodology: Unit Testing

Our unit testing also sought to cover as many scenarios as possible. First, we ran a series of
unit tests to check various configurations of localhost with ports. Next, we tested the URL
validator against a valid initial URL (protocol and domain) with the path containing various
fragments, both valid and invalid. Subsequent unit tests checked against valid and invalid port 
numbers, IP addresses, and protocols. Similar to the manual testing, we also provided a
group of test cases intended to fail that passed in foreign characters, Unicode symbols, 
pseudo-random mashing of characters on the keyboard, and configurations of URLs that had some
components of valid URLs but were invalid themselves. 

Names of Unit Tests:

unitTestLocal
unitTestFragments
unitTestPortNumbers
unitTestIPAddresses
As well as numbered unit tests (i.e. unitTest062)

Names of Manual Tests:

manualTest001 through manualTest076 (sequential)


How did we work as a team?:

How did we divide the work?:

How did we collaborate?:

We communicated primarily through a Google Hangouts chat, which allowed us to leave messages
for the others to read at their convenience while also providing an immediacy to communication
if one or more of us was online at the same time. Additionally, we met a few times in a voice/
video chat, to coordinate as a team and agree on our approach in the coming week. 


------------------------------------------------------------------------------------------------
					Bug Reports
					
=================================================
Bug Report #1
=================================================
Title: urlValidator fails to recognize valid URL queries
Class: Serious Bug
Priority: High
Date: 29 May 2016
Reported By: stramelm
Email: stramelm@oregonstate.edu
Product: URLValidator
Platform: Windows 10
Reproducible: Yes
Description
=================================================
Summary:
  urlValidator .isValid() method returns FALSE when queries are included
Inputs to reproduce:
  UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
  boolean result = urlVal.isValid("http://www.example.com/wpstyle/?a=b");
  assertEquals(true, result); // this assertion fails
Workarounds: None.
Cause Determination
=================================================
Summary:
  Pattern matcher boolean return value is switched with a logical NOT (!) operator
  return !QUERY_PATTERN.matcher(query).matches();
  ...  should be ...
  return QUERY_PATTERN.matcher(query).matches();
Filename: URLValidator.java
Line number(s): 446
Other notes: None.

=================================================
Bug Report #2
=================================================
Title: urlValidator fails to recognize valid port numbers
Class: Serious Bug
Priority: High
Date: 29 May 2016
Reported By: stramelm
Email: stramelm@oregonstate.edu
Product: URLValidator
Platform: Windows 10
Reproducible: Yes
Description
=================================================
Summary:
  urlValidator .isValid() method returns FALSE when port number > 999
Inputs to reproduce:
  UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
  boolean result = urlVal.isValid("http://www.amazon.com:999");
  assertEquals(true, result); // this assertion passes
  result = urlVal.isValid("http://www.amazon.com:1000");
  assertEquals(true, result); // this assertion fails
Workarounds: Only use port numbers less than 1000.
Cause Determination
=================================================
Summary:
  Invalid regex for port number comparison.
  private static final String PORT_REGEX = "^:(\\d{1,3})$";
  ...  should be ...
  modification needed to allow 5 characters (but only up to 65535)
Filename: URLValidator.java
Line number(s): 158
Other notes: None.

=================================================
Bug Report #3
=================================================
Title: urlValidator fails to recognize valid port numbers
Class: Serious Bug
Priority: High
Date: 29 May 2016
Reported By: stramelm
Email: stramelm@oregonstate.edu
Product: URLValidator
Platform: Windows 10
Reproducible: Yes
Description
=================================================
Summary:
  urlValidator .isValid() method returns TRUE for all IP addresses
  between 0.0.0.0 and 999.999.999.999
Inputs to reproduce:
  UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
  boolean result = urlVal.isValid("http://0.0.0.0");
  assertEquals(false, result); // this assertion fails
  result = urlVal.isValid("http://999.999.999.999");
  assertEquals(false, result); // this assertion fails
Workarounds: None.
Cause Determination
=================================================
Summary:
  Invalid return value on IP segment check.
  if (iIpSegment > 255) {
    return true;
  }
  ...  should be ...
  if (iIpSegment > 255) {
    return false;
  }
Filename: InetAddressValidator.java
Line number(s): 94-98
Other notes: There is a deficiency in the code in that there is no
  checking at all for IP addresses in the reserved range.
  
=================================================
Bug Report #4
=================================================
Title: urlValidator fails to recognize some valid country code TLDs
Class: Serious Bug
Priority: High
Date: 29 May 2016
Reported By: stramelm
Email: stramelm@oregonstate.edu
Product: URLValidator
Platform: Windows 10
Reproducible: Yes
Description
=================================================
Summary:
  urlValidator .isValid() method returns FALSE for URLs containing some
    country code TLDs and TRUE for others
Inputs to reproduce:
  UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
  boolean result = urlVal.isValid("http://a.it");
  assertEquals(true, result); // this assertion passes
  boolean result = urlVal.isValid("http://a.ws");
  assertEquals(true, result); // this assertion fails
  boolean result = urlVal.isValid("http://j.mp");
  assertEquals(true, result); // this assertion fails
Workarounds: None.
Cause Determination
=================================================
Summary:
  Incomplete list of country code TLDs for comparison
Filename: DomainValidator.java
Line number(s): 248-359
Other notes: None.

=================================================
Bug Report #5
=================================================
Title: urlValidator fails to recognize some valid generic TLDs
Class: Serious Bug
Priority: Medium
Date: 29 May 2016
Reported By: stramelm
Email: stramelm@oregonstate.edu
Product: URLValidator
Platform: Windows 10
Reproducible: Yes
Description
=================================================
Summary:
  urlValidator .isValid() method returns FALSE for URLs containing some
    generic TLDs and TRUE for others
Inputs to reproduce:
  UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
  boolean result = urlVal.isValid("http://foo.com");
  assertEquals(true, result); // this assertion passes
  boolean result = urlVal.isValid("http://foo.bar");
  assertEquals(true, result); // this assertion fails
Workarounds: None.
Cause Determination
=================================================
Summary:
  Incomplete list of generic TLDs for comparison
Filename: DomainValidator.java
Line number(s): 225-246
Other notes: None.

=================================================
Bug Report #6
=================================================
Title: urlValidator fails to differentiate between valid and invalid URL fragments
Class: Code Deficiency
Priority: Medium
Date: 29 May 2016
Reported By: stramelm
Email: stramelm@oregonstate.edu
Product: URLValidator
Platform: Windows 10
Reproducible: Yes
Description
=================================================
Summary:
  urlValidator .isValid() method returns TRUE for all URL fragments when using the
    ALLOW_ALL_SCHEMES option, it only returns FALSE when NO_FRAGMENTS option is selected
Inputs to reproduce:
  UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
  boolean result = urlVal.isValid("http://www.somesite.com/somepage.html#somefragment");
  assertEquals(true, result); // this assertion passes
  boolean result = urlVal.isValid("http://www.somesite.com/somepage.html#%");
  assertEquals(false, result); // this assertion fails
  UrlValidator urlVal2 = new UrlValidator(null, null, UrlValidator.NO_FRAGMENTS);
  result = urlVal2.isValid("http://www.somesite.com/somepage.html#somefragment");
  assertEquals(false, result); // this assertion passes
Workarounds: None.
Cause Determination
=================================================
Summary:
  isValidFragment() function is deficient in that it only checks for NULL fragments and
    for the NO_FRAGMENTS option, it doesn't actually do any allowed character or format
    validation of the fragment itself

Filename: DomainValidator.java
Line number(s): 454-460

Other notes: None.

=================================================
Bug Report #7
=================================================

Title: urlValidator returns FALSE when user/pass are included in URL authority

Class: Code Deficiency
Priority: High

Date: 29 May 2016
Reported By: stramelm
Email: stramelm@oregonstate.edu

Product: URLValidator
Platform: Windows 10
Reproducible: Yes

Description
=================================================

Summary:
  urlValidator .isValid() method returns FALSE when user/pass are included in URL authority

Inputs to reproduce:
  UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
  boolean result = urlVal.isValid("http://username:password@example.com");
  assertEquals(true, result); // this assertion fails

Workarounds: None.

Cause Determination
=================================================

Summary:
  urlValidator assumes that authority portion of URL will be either a hostname or IP address
    and as such doesn't at all consider user/pass formatted authority, the following line
    returns 'username' as hostname - should be 'example.com'
    String hostLocation = authorityMatcher.group(PARSE_AUTHORITY_HOST_IP);
Filename: UrlValidator.java
Line number(s): 377-389
Other notes: None.

=================================================
Bug Report #8
=================================================
Title: urlValidator returns FALSE when testing local URLs
Class: Serious Bug
Priority: Medium
Date: 29 May 2016
Reported By: stramelm
Email: stramelm@oregonstate.edu
Product: URLValidator
Platform: Windows 10
Reproducible: Yes
Description
=================================================
Summary:
  urlValidator .isValid() method returns FALSE when testing local URLs even when using ALLOW_LOCAL_URLS option
Inputs to reproduce:
  UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_LOCAL_URLS);
  boolean result = urlVal.isValid("http://localhost");
  assertEquals(true, result); // this assertion fails
Workarounds: None.
Cause Determination
=================================================
Summary:
  hostnameRegex check return value is switched with a logical NOT (!) operator
  if (!hostnameRegex.isValid(domain)) {
  ...  should be ...
  if (hostnameRegex.isValid(domain)) {
Filename: DomainValidator.java
Line number(s): 139
Other notes: None.

=================================================
Bug Report #9
=================================================
Title: urlValidator returns FALSE when testing URLs containing Unicode (non-ASCII characters)
Class: Issue Of Interest
Priority: Low
Date: 29 May 2016
Reported By: stramelm
Email: stramelm@oregonstate.edu
Product: URLValidator
Platform: Windows 10
Reproducible: Yes
Description
=================================================
Summary:
  urlValidator returns FALSE when testing URLs containing Unicode (non-ASCII characters)
Inputs to reproduce:
  UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_LOCAL_URLS);
  boolean result = urlVal.isValid("http://例子.测试");
  assertEquals(true, result); // this assertion fails
Workarounds: None.
Cause Determination
=================================================
Summary:
  urlValidator specifically checks for ASCII characters and returns FALSE for non-ASCII
    on the following line of code:
  if (!ASCII_PATTERN.matcher(value).matches()) {
Filename: URLValidator.java
Line number(s): 285
Other notes: I have tagged this as an issue rather than a bug.  It is unclear whether or
  not this is intended behavior.  I suspect that it is becuase there is a specific check
  for ASCII characters.  Read more here: https://www.w3.org/International/articles/idn-and-iri/
									
------------------------------------------------------------------------------------------------
				Code Used: Manual Tests
										
import static org.junit.Assert.*;

public class ManualTests {
	
	   public static void manualTest076() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://10.1.1.254");
		   //assertEquals(false, result);
		   //failed assertion commented out to keep test suite going
	   }

	   public static void manualTest075() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://10.1.1.1");
		   //assertEquals(false, result);
		   //failed assertion commented out to keep test suite going
	   }

	   public static void manualTest074() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://.www.foo.bar./");
		   assertEquals(false, result);
	   }

	   public static void manualTest073() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://www.foo.bar./");
		   assertEquals(false, result);
	   }

	   public static void manualTest072() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://.www.foo.bar/");
		   assertEquals(false, result);
	   }

	   public static void manualTest071() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://3628126748");
		   assertEquals(false, result);
	   }

	   public static void manualTest070() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://123.123.123");
		   assertEquals(false, result);
	   }

	   public static void manualTest069() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://1.1.1.1.1");
		   assertEquals(false, result);
	   }

	   public static void manualTest068() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://224.1.1.1");
		   //assertEquals(false, result);
		   //failed assertion commented out to keep test suite going
	   }

	   public static void manualTest067() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://10.1.1.255");
		   //assertEquals(false, result);
		   //failed assertion commented out to keep test suite going
	   }

	   public static void manualTest066() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://10.1.1.0");
		   //assertEquals(false, result);
		   //failed assertion commented out to keep test suite going
	   }

	   public static void manualTest065() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://0.0.0.0");
		   //assertEquals(false, result);
		   //failed assertion commented out to keep test suite going
	   }

	   public static void manualTest064() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://a.b-.co");
		   assertEquals(false, result);
	   }

	   public static void manualTest063() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://-a.b.co");
		   assertEquals(false, result);
	   }

	   public static void manualTest062() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://a.b--c.de/");
		   //assertEquals(false, result);
		   //failed assertion commented out to keep test suite going
	   }

	   public static void manualTest061() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://-error-.invalid/");
		   assertEquals(false, result);
	   }

	   public static void manualTest060() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("ftps://foo.bar/");
		   assertEquals(false, result);
	   }

	   public static void manualTest059() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://foo.bar/foo(bar)baz quux");
		   assertEquals(false, result);
	   }

	   public static void manualTest058() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid(":// should fail");
		   assertEquals(false, result);
	   }

	   public static void manualTest057() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http:// shouldfail.com");
		   assertEquals(false, result);
	   }

	   public static void manualTest056() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("h://test");
		   assertEquals(false, result);
	   }

	   public static void manualTest055() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("rdar://1234");
		   assertEquals(false, result);
	   }

	   public static void manualTest054() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("foo.com");
		   assertEquals(false, result);
	   }

	   public static void manualTest053() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http:///a");
		   assertEquals(false, result);
	   }

	   public static void manualTest052() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("///");
		   assertEquals(false, result);
	   }

	   public static void manualTest051() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("///a");
		   assertEquals(false, result);
	   }

	   public static void manualTest050() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("//a");
		   assertEquals(false, result);
	   }

	   public static void manualTest049() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("//");
		   assertEquals(false, result);
	   }

	   public static void manualTest048() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://foo.bar?q=Spaces should be encoded");
		   assertEquals(false, result);
	   }

	   public static void manualTest047() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://##/");
		   assertEquals(false, result);
	   }

	   public static void manualTest046() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://##");
		   assertEquals(false, result);
	   }

	   public static void manualTest045() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://#");
		   assertEquals(false, result);
	   }

	   public static void manualTest044() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://??/");
		   assertEquals(false, result);
	   }

	   public static void manualTest043() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://??");
		   assertEquals(false, result);
	   }

	   public static void manualTest042() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://?");
		   assertEquals(false, result);
	   }

	   public static void manualTest041() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://../");
		   assertEquals(false, result);
	   }

	   public static void manualTest040() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://..");
		   assertEquals(false, result);
	   }

	   public static void manualTest039() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://.");
		   assertEquals(false, result);
	   }

	   public static void manualTest038() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://");
		   assertEquals(false, result);
	   }

	   public static void manualTest037() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://223.255.255.254");
		   assertEquals(true, result);
	   }

	   public static void manualTest036() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://a.b-c.de");
		   assertEquals(true, result);
	   }

	   public static void manualTest035() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://1337.net");
		   assertEquals(true, result);
	   }

	   public static void manualTest034() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://-.~_!$&'()*+,;=:%40:80%2f::::::@example.com");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
	   }

	   public static void manualTest033() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://उदाहरण.परीक्षा");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
	   }

	   public static void manualTest032() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://例子.测试");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
	   }

	   public static void manualTest031() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://مثال.إختبار");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
	   }

	   public static void manualTest030() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://foo.bar/?q=Test%20URL-encoded%20stuff");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
	   }

	   public static void manualTest029() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("ftp://foo.bar/baz");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
	   }

	   public static void manualTest028() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://j.mp");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
	   }

	   public static void manualTest027() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://code.google.com/events/#&product=browser");
		   assertEquals(true, result);
	   }

	   public static void manualTest026() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://☺.damowmow.com/");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
	   }

	   public static void manualTest025() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://foo.com/(something)?after=parens");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
	   }

	   public static void manualTest024() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://foo.com/unicode_(✪)_in_parens");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
	   }

	   public static void manualTest023() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://foo.com/blah_(wikipedia)_blah#cite-1");
		   assertEquals(true, result);
	   }

	   public static void manualTest022() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://foo.com/blah_(wikipedia)#cite-1");
		   assertEquals(true, result);
	   }

	   public static void manualTest021() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://⌘.ws/");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
	   }

	   public static void manualTest020() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://⌘.ws");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
	   }

	   public static void manualTest019() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://➡.ws/䨹");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
	   }

	   public static void manualTest018() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://142.42.1.1:8080/");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
	   }

	   public static void manualTest017() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://142.42.1.1/");
		   assertEquals(true, result);
	   }

	   public static void manualTest016() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://userid:password@example.com/");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
	   }   

	   public static void manualTest015() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://userid:password@example.com");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
	   }   

	   public static void manualTest014() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://userid@example.com:8080/");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
	   }   

	   public static void manualTest013() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://userid@example.com:8080");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
	   }   
	   
	   public static void manualTest012() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://userid@example.com/");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
	   }   
	   
	   public static void manualTest011() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://userid@example.com");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
	   }   
	   
	   public static void manualTest010() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://userid:password@example.com:8080/");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
	   }   
	   
	   public static void manualTest009() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://userid:password@example.com:8080");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
	   }   
	   
	   public static void manualTest008() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://✪df.ws/123");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
	   }   
	   
	   public static void manualTest007() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("https://www.example.com/foo/?bar=baz&inga=42&quux");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
	   }   
	   
	   public static void manualTest006() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://www.example.com/wpstyle/?p=364");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
	   }   
	   
	   public static void manualTest005() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://foo.com/blah_blah_(wikipedia)_(again)");
		   assertEquals(true, result);
	   }   
	   
	   public static void manualTest004() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://foo.com/blah_blah_(wikipedia)");
		   assertEquals(true, result);
	   }   
	   
	   public static void manualTest003() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://foo.com/blah_blah/");
		   assertEquals(true, result);
	   }   
	   
	   public static void manualTest002() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://foo.com/blah_blah");
		   assertEquals(true, result);
	   }   
	   
	   public static void manualTest001() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid(null);
		   assertEquals(false, result);
	   }
}

------------------------------------------------------------------------------------------------
				Code Used: Unit Tests

import static org.junit.Assert.*;

public class UnitTests {

		public static void unitTestLocal() {
			   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_LOCAL_URLS);
			   
			   boolean result = urlVal.isValid("http://localhost:8080");
			   //assertEquals(true, result);
			   //failed assertion commented out to keep test suite going

			   result = urlVal.isValid("http://localhost:808");
			   //assertEquals(true, result);
			   //failed assertion commented out to keep test suite going

			   result = urlVal.isValid("http://localhost:80");
			   //assertEquals(true, result);
			   //failed assertion commented out to keep test suite going

			   result = urlVal.isValid("http://localhost");
			   //assertEquals(true, result);
			   //failed assertion commented out to keep test suite going

			   result = urlVal.isValid("http://www.example.com");
			   assertEquals(true, result);
		}
	 
		public static void unitTestFragments() {
			   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
			
			   boolean result = urlVal.isValid("http://www.somesite.com/somepage.html#somefragment");
			   assertEquals(true, result);

			   result = urlVal.isValid("http://www.somesite.com/somepage.html#");
			   assertEquals(true, result);

			   result = urlVal.isValid("http://www.somesite.com/somepage.html#$");
			   assertEquals(true, result);

			   result = urlVal.isValid("http://www.somesite.com/somepage.html##");
			   //assertEquals(false, result);
			   //failed assertion commented out to keep test suite going

			   result = urlVal.isValid("http://www.somesite.com/somepage.html#\\");
			   //assertEquals(false, result);
			   //failed assertion commented out to keep test suite going

			   result = urlVal.isValid("http://www.somesite.com/somepage.html#/");
			   assertEquals(true, result);

			   result = urlVal.isValid("http://www.somesite.com/somepage.html#^");
			   //assertEquals(false, result);
			   //failed assertion commented out to keep test suite going

			   result = urlVal.isValid("http://www.somesite.com/somepage.html#%");
			   //assertEquals(false, result);
			   //failed assertion commented out to keep test suite going

			   UrlValidator urlVal2 = new UrlValidator(null, null, UrlValidator.NO_FRAGMENTS);
			   
			   result = urlVal2.isValid("http://www.somesite.com/somepage.html#somefragment");
			   assertEquals(false, result);

		}
	
		public static void unitTestPortNumbers() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);

		   boolean result = urlVal.isValid("http://www.amazon.com:-1");
		   assertEquals(false, result);
	
		   result = urlVal.isValid("http://www.amazon.com:0");
		   assertEquals(true, result);
	
		   result = urlVal.isValid("http://www.amazon.com:10");
		   assertEquals(true, result);
	
		   result = urlVal.isValid("http://www.amazon.com:100");
		   assertEquals(true, result);
	
		   result = urlVal.isValid("http://www.amazon.com:999");
		   assertEquals(true, result);
	
		   result = urlVal.isValid("http://www.amazon.com:1000");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
	
		   result = urlVal.isValid("http://www.amazon.com:10000");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
	
		   result = urlVal.isValid("http://www.amazon.com:65535");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
	
		   result = urlVal.isValid("http://www.amazon.com:65536");
		   //assertEquals(false, result);
		   //failed assertion commented out to keep test suite going
		}
	
		public static void unitTestIPAddresses() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   
		   boolean result = urlVal.isValid("http://0.0.0.0");
		   //assertEquals(false, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://0...0");
		   assertEquals(false, result);

		   result = urlVal.isValid("http://0.255.255.255");
		   //assertEquals(false, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://1.0.0.0");
		   assertEquals(true, result);

		   result = urlVal.isValid("http://10.0.0.0");
		   //assertEquals(false, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://10.255.255.255");
		   //assertEquals(false, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://11.0.0.0");
		   assertEquals(true, result);

		   result = urlVal.isValid("http://224.0.0.0");
		   //assertEquals(false, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://239.255.255.255");
		   //assertEquals(false, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://240.0.0.0");
		   assertEquals(true, result);

		   result = urlVal.isValid("http://255.255.255.255");
		   //assertEquals(false, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://256.0.0.0");
		   //assertEquals(false, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://999.999.999.999");
		   //assertEquals(false, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://9999.999.999.999");
		   assertEquals(false, result);

		   result = urlVal.isValid("http://-1.999.999.999");
		   assertEquals(false, result);
	   }

	   public static void unitTest062() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   boolean result = urlVal.isValid("http://a.b--c.de/");
		   //assertEquals(false, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://a.b---c.de/");
		   //assertEquals(false, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://a.b--c.com/");
		   //assertEquals(false, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://a.b-!c.de/");
		   assertEquals(false, result);

		   result = urlVal.isValid("http://a.b!-c.de/");
		   assertEquals(false, result);

		   result = urlVal.isValid("http://a.b-c.de/");
		   assertEquals(true, result);
	   }

	   public static void unitTest034() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);

		   boolean result = urlVal.isValid("http://-.~_!$&'()*+,;=:%40:80%2f::::::@example.com");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://-.~_!$&'()*+,;=:%40:80%2f@example.com");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://username:%40:80%2f@example.com");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://-.~_!$&'()*+,;=:password@example.com");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://username:password@example.com");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("ftp://username:password@example.com");
		   //assertEquals(true, result);
	   }

	   // unitTest031, unitTest032, unitTest033 not included as they
	   // would just be repetitive variations of unitTest026

	   public static void unitTest030() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   
		   boolean result = urlVal.isValid("http://foo.bar/?q=Test%20URL-encoded%20stuff");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://foo.com/");
		   assertEquals(true, result);

		   result = urlVal.isValid("http://foo.com/?q=Test");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
	   }

	   public static void unitTest029() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);

		   boolean result = urlVal.isValid("ftp://foo.bar/baz");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("ftp://foo.bar");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://foo.bar");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("ftp://foo.com");
		   assertEquals(true, result);

		   result = urlVal.isValid("http://foo.com");
		   assertEquals(true, result);

		   result = urlVal.isValid("ftp://foo.com/baz");
		   assertEquals(true, result);

		   result = urlVal.isValid("ftp://foo.biz/baz");
		   assertEquals(true, result);
	   }

	   public static void unitTest028() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);

		   boolean result = urlVal.isValid("http://j.mp");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://a.mp");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://a.com");
		   assertEquals(true, result);
	   }

	   public static void unitTest026() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);

		   boolean result = urlVal.isValid("http://☺.damowmow.com/");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://a.damowmow.com/");
		   assertEquals(true, result);
	   }

	   public static void unitTest025() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);

		   boolean result = urlVal.isValid("http://foo.com/(something)?after=parens");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://foo.com/(something)");
		   assertEquals(true, result);
	   }

	   public static void unitTest024() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   
		   boolean result = urlVal.isValid("http://foo.com/unicode_(✪)_in_parens");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://foo.com/unicode_(a)_in_parens");
		   assertEquals(true, result);
	   }

	   // unitTest021 not included as it
	   // would just be repetitive variation of unitTest020
	
		public static void unitTest020() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);

		   boolean result = urlVal.isValid("http://⌘.ws");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://a.ws");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://a.it");
		   assertEquals(true, result);

		   result = urlVal.isValid("http://⌘.com");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://a.com");
		   assertEquals(true, result);
	   }

	   public static void unitTest019() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   
		   boolean result = urlVal.isValid("http://➡.ws/䨹");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://➡.ws/a");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
		   
		   result = urlVal.isValid("http://➡.ws/");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://➡.com/䨹");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://a.com/䨹");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://➡.com/a");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://a.com/a");
		   assertEquals(true, result);
	   }

	   public static void unitTest018() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   
		   boolean result = urlVal.isValid("http://142.42.1.1:8080/");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://142.42.1.1:80808");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://142.42.1.1:808");
		   assertEquals(true, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://142.42.1.1");
		   assertEquals(true, result);
	   }

	   // unitTest013, unitTest014, unitTest015, unitTest016 not included as they
	   // would just be repetitive variations of unitTest009, unitTest010, unitTest011, unitTest012
	
	   public static void unitTest012() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   
		   boolean result = urlVal.isValid("http://userid@example.com/");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
		   
		   // no need to test further - see unitTest011
	   }   
	   
	   public static void unitTest011() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   
		   boolean result = urlVal.isValid("http://userid@example.com");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://example.com");
		   assertEquals(true, result);
	   }   
	   
	   public static void unitTest010() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);

		   boolean result = urlVal.isValid("http://userid:password@example.com:8080/");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://userid:password@example.com/");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://example.com/");
		   assertEquals(true, result);
	   }   
	   
	   public static void unitTest009() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);

		   boolean result = urlVal.isValid("http://userid:password@example.com:8080");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://userid:password@example.com");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://example.com:8080");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://example.com:80808");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going

		   result = urlVal.isValid("http://example.com:808");
		   assertEquals(true, result);

		   result = urlVal.isValid("http://example.com:80");
		   assertEquals(true, result);

		   result = urlVal.isValid("http://example.com:8");
		   assertEquals(true, result);

		   result = urlVal.isValid("http://example.com");
		   assertEquals(true, result);
	   }   

	   public static void unitTest008() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   
		   boolean result = urlVal.isValid("http://✪df.ws/123");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
		   
		   result = urlVal.isValid("http://✪df.ws/");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
		   
		   result = urlVal.isValid("http://df.ws/");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
		   
		   result = urlVal.isValid("http://✪df.com/");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
		   
		   result = urlVal.isValid("http://df.com/");
		   assertEquals(true, result);
	   }   
	   
	   public static void unitTest007() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   
		   boolean result = urlVal.isValid("https://www.example.com/foo/?bar=baz&inga=42&quux");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
		   
		   result = urlVal.isValid("https://www.example.com/foo/?bar=baz&inga=42");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
		   
		   result = urlVal.isValid("https://www.example.com/foo/?bar=baz");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
		   
		   result = urlVal.isValid("https://www.example.com/foo/");
		   assertEquals(true, result);
		   
		   result = urlVal.isValid("https://www.example.com/");
		   assertEquals(true, result);
	   }   

	   public static void unitTest006() {
		   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
		   
		   boolean result = urlVal.isValid("http://www.example.com/wpstyle/?p=364");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
		   
		   result = urlVal.isValid("http://www.example.com/wpstyle/");
		   assertEquals(true, result);
		   
		   result = urlVal.isValid("http://www.example.com/wpstyle/?a=b");
		   //assertEquals(true, result);
		   //failed assertion commented out to keep test suite going
		   
		   result = urlVal.isValid("http://www.example.com/");
		   assertEquals(true, result);
	   }   
}