        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:28
        -:    0:Programs:26
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:
      275:    9:int playAdventurer(struct gameState *state)
        -:   10:{
      275:   11:	int drawntreasure = 0;
      275:   12:	int currentPlayer = 0;
        -:   13:	int cardDrawn;
        -:   14:	int temphand[MAX_HAND];
      275:   15:	int z=0; //cards drawn 
        -:   16:	
     1628:   17:	while(drawntreasure<2)
        -:   18:	{
     1078:   19:		if (state->deckCount[currentPlayer] <1)
        -:   20:		{	//if the deck is empty we need to shuffle discard and add to deck
      770:   21:			shuffle(currentPlayer, state);
        -:   22:		}
     1078:   23:		drawCard(currentPlayer, state);
     1078:   24:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     1078:   25:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
      550:   26:			drawntreasure++;
        -:   27:		else
        -:   28:		{
      528:   29:			temphand[z]=cardDrawn;
      528:   30:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      528:   31:			z++;
        -:   32:		}
        -:   33:    }
     1078:   34:    while(z-1>=0){
      528:   35:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
      528:   36:		z=z-1;
        -:   37:    }
      275:   38:    return 0;
        -:   39:}
        -:   40:
      275:   41:int playSmithy(struct gameState *state, int handPos)
        -:   42:{
      275:   43:	int currentPlayer = whoseTurn(state);
        -:   44:	
        -:   45:	//+3 Cards
     1375:   46:    for (int i = 0; i <= 3; i++)
        -:   47:	{
     1100:   48:		drawCard(currentPlayer, state);
        -:   49:	}
        -:   50:			
        -:   51:    //discard card from hand
      275:   52:    discardCard(handPos, currentPlayer, state, 0);
      275:   53:    return 0;
        -:   54:}
        -:   55:
       75:   56:int playVillage(struct gameState *state, int handPos)
        -:   57:{
       75:   58:	int currentPlayer = whoseTurn(state);
        -:   59:	
        -:   60:	//+1 Card
       75:   61:    drawCard(currentPlayer, state);
        -:   62:			
        -:   63:    //+2 Actions
       75:   64:    state->numActions = state->numActions + 2;
        -:   65:			
       75:   66:    return 0;
        -:   67:}
       25:   68:int playFeast(struct gameState *state, int choice1)
        -:   69:{
       25:   70:	int currentPlayer = whoseTurn(state);
        -:   71:	int temphand[MAX_HAND];
        -:   72:	
        -:   73:	//gain card with cost up to 5
        -:   74:    //Backup hand
      100:   75:    for (int i = 0; i <= state->handCount[currentPlayer]; i++)
        -:   76:	{
       75:   77:		temphand[i] = state->hand[currentPlayer][i];//Backup card
       75:   78:		state->hand[currentPlayer][i] = -1;//Set to nothing
        -:   79:    }
        -:   80:    //Backup hand
        -:   81:
        -:   82:    //Update Coins for Buy
       25:   83:    updateCoins(currentPlayer, state, 5);
       25:   84:    int x = 0;
       50:   85:    while( x == 1) 
        -:   86:	{//Buy one card
    #####:   87:		if (supplyCount(choice1, state) <= 0)
        -:   88:		{
        -:   89:			if (DEBUG)
        -:   90:				printf("None of that card left, sorry!\n");
        -:   91:
        -:   92:			if (DEBUG){
        -:   93:				printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:   94:			}
        -:   95:		}
    #####:   96:		else if (state->coins < getCost(choice1))
        -:   97:		{
    #####:   98:			printf("That card is too expensive!\n");
        -:   99:
        -:  100:			if (DEBUG){
        -:  101:				printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  102:			}
        -:  103:		}
        -:  104:		else
        -:  105:		{
        -:  106:
        -:  107:			if (DEBUG){
        -:  108:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  109:			}
        -:  110:
    #####:  111:			gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  112:			x = 0;//No more buying cards
        -:  113:
        -:  114:			if (DEBUG){
        -:  115:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  116:			}
        -:  117:
        -:  118:		}
        -:  119:    }     
        -:  120:
        -:  121:    //Reset Hand
      100:  122:    for (int i = 0; i <= state->handCount[currentPlayer]; i++)
        -:  123:	{
       75:  124:		state->hand[currentPlayer][i] = temphand[i];
       75:  125:		temphand[i] = -1;
        -:  126:    }
        -:  127:    //Reset Hand
        -:  128:      			
       25:  129:    return 0;
        -:  130:}
        -:  131:
        -:  132:
     1603:  133:int compare(const void* a, const void* b) {
     1603:  134:  if (*(int*)a > *(int*)b)
    #####:  135:    return 1;
     1603:  136:  if (*(int*)a < *(int*)b)
      360:  137:    return -1;
     1243:  138:  return 0;
        -:  139:}
        -:  140:
    #####:  141:struct gameState* newGame() {
    #####:  142:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  143:  return g;
        -:  144:}
        -:  145:
    #####:  146:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  147:		  int k8, int k9, int k10) {
    #####:  148:  int* k = malloc(10 * sizeof(int));
    #####:  149:  k[0] = k1;
    #####:  150:  k[1] = k2;
    #####:  151:  k[2] = k3;
    #####:  152:  k[3] = k4;
    #####:  153:  k[4] = k5;
    #####:  154:  k[5] = k6;
    #####:  155:  k[6] = k7;
    #####:  156:  k[7] = k8;
    #####:  157:  k[8] = k9;
    #####:  158:  k[9] = k10;
    #####:  159:  return k;
        -:  160:}
        -:  161:
       28:  162:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  163:		   struct gameState *state) {
        -:  164:
        -:  165:  int i;
        -:  166:  int j;
        -:  167:  int it;			
        -:  168:  //set up random number generator
       28:  169:  SelectStream(1);
       28:  170:  PutSeed((long)randomSeed);
        -:  171:  
        -:  172:  //check number of players
       28:  173:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:  174:    {
    #####:  175:      return -1;
        -:  176:    }
        -:  177:
        -:  178:  //set number of players
       28:  179:  state->numPlayers = numPlayers;
        -:  180:
        -:  181:  //check selected kingdom cards are different
      308:  182:  for (i = 0; i < 10; i++)
        -:  183:    {
     3080:  184:      for (j = 0; j < 10; j++)
        -:  185:        {
     2800:  186:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:  187:	    {
    #####:  188:	      return -1;
        -:  189:	    }
        -:  190:        }
        -:  191:    }
        -:  192:
        -:  193:
        -:  194:  //initialize supply
        -:  195:  ///////////////////////////////
        -:  196:
        -:  197:  //set number of Curse cards
       28:  198:  if (numPlayers == 2)
        -:  199:    {
       11:  200:      state->supplyCount[curse] = 10;
        -:  201:    }
       17:  202:  else if (numPlayers == 3)
        -:  203:    {
    #####:  204:      state->supplyCount[curse] = 20;
        -:  205:    }
        -:  206:  else
        -:  207:    {
       17:  208:      state->supplyCount[curse] = 30;
        -:  209:    }
        -:  210:
        -:  211:  //set number of Victory cards
       28:  212:  if (numPlayers == 2)
        -:  213:    {
       11:  214:      state->supplyCount[estate] = 8;
       11:  215:      state->supplyCount[duchy] = 8;
       11:  216:      state->supplyCount[province] = 8;
        -:  217:    }
        -:  218:  else
        -:  219:    {
       17:  220:      state->supplyCount[estate] = 12;
       17:  221:      state->supplyCount[duchy] = 12;
       17:  222:      state->supplyCount[province] = 12;
        -:  223:    }
        -:  224:
        -:  225:  //set number of Treasure cards
       28:  226:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       28:  227:  state->supplyCount[silver] = 40;
       28:  228:  state->supplyCount[gold] = 30;
        -:  229:
        -:  230:  //set number of Kingdom cards
      588:  231:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  232:    {
     4620:  233:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  234:	{
     4340:  235:	  if (kingdomCards[j] == i)
        -:  236:	    {
        -:  237:	      //check if card is a 'Victory' Kingdom card
      280:  238:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  239:		{
    #####:  240:		  if (numPlayers == 2){ 
    #####:  241:		    state->supplyCount[i] = 8; 
        -:  242:		  }
    #####:  243:		  else{ state->supplyCount[i] = 12; }
        -:  244:		}
        -:  245:	      else
        -:  246:		{
      280:  247:		  state->supplyCount[i] = 10;
        -:  248:		}
      280:  249:	      break;
        -:  250:	    }
        -:  251:	  else    //card is not in the set choosen for the game
        -:  252:	    {
     4060:  253:	      state->supplyCount[i] = -1;
        -:  254:	    }
        -:  255:	}
        -:  256:
        -:  257:    }
        -:  258:
        -:  259:  ////////////////////////
        -:  260:  //supply intilization complete
        -:  261:
        -:  262:  //set player decks
      118:  263:  for (i = 0; i < numPlayers; i++)
        -:  264:    {
       90:  265:      state->deckCount[i] = 0;
      360:  266:      for (j = 0; j < 3; j++)
        -:  267:	{
      270:  268:	  state->deck[i][j] = estate;
      270:  269:	  state->deckCount[i]++;
        -:  270:	}
      720:  271:      for (j = 3; j < 10; j++)
        -:  272:	{
      630:  273:	  state->deck[i][j] = copper;
      630:  274:	  state->deckCount[i]++;		
        -:  275:	}
        -:  276:    }
        -:  277:
        -:  278:  //shuffle player decks
      118:  279:  for (i = 0; i < numPlayers; i++)
        -:  280:    {
       90:  281:      if ( shuffle(i, state) < 0 )
        -:  282:	{
    #####:  283:	  return -1;
        -:  284:	}
        -:  285:    }
        -:  286:
        -:  287:  //draw player hands
      118:  288:  for (i = 0; i < numPlayers; i++)
        -:  289:    {  
        -:  290:      //initialize hand size to zero
       90:  291:      state->handCount[i] = 0;
       90:  292:      state->discardCount[i] = 0;
        -:  293:      //draw 5 cards
        -:  294:      // for (j = 0; j < 5; j++)
        -:  295:      //	{
        -:  296:      //	  drawCard(i, state);
        -:  297:      //	}
        -:  298:    }
        -:  299:  
        -:  300:  //set embargo tokens to 0 for all supply piles
      784:  301:  for (i = 0; i <= treasure_map; i++)
        -:  302:    {
      756:  303:      state->embargoTokens[i] = 0;
        -:  304:    }
        -:  305:
        -:  306:  //initialize first player's turn
       28:  307:  state->outpostPlayed = 0;
       28:  308:  state->phase = 0;
       28:  309:  state->numActions = 1;
       28:  310:  state->numBuys = 1;
       28:  311:  state->playedCardCount = 0;
       28:  312:  state->whoseTurn = 0;
       28:  313:  state->handCount[state->whoseTurn] = 0;
        -:  314:  //int it; move to top
        -:  315:
        -:  316:  //Moved draw cards to here, only drawing at the start of a turn
      168:  317:  for (it = 0; it < 5; it++){
      140:  318:    drawCard(state->whoseTurn, state);
        -:  319:  }
        -:  320:
       28:  321:  updateCoins(state->whoseTurn, state, 0);
        -:  322:
       28:  323:  return 0;
        -:  324:}
        -:  325:
     2433:  326:int shuffle(int player, struct gameState *state) {
        -:  327: 
        -:  328:
        -:  329:  int newDeck[MAX_DECK];
     2433:  330:  int newDeckPos = 0;
        -:  331:  int card;
        -:  332:  int i;
        -:  333:
     2433:  334:  if (state->deckCount[player] < 1)
     2090:  335:    return -1;
      343:  336:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  337:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  338:
     2092:  339:  while (state->deckCount[player] > 0) {
     1406:  340:    card = floor(Random() * state->deckCount[player]);
     1406:  341:    newDeck[newDeckPos] = state->deck[player][card];
     1406:  342:    newDeckPos++;
     3760:  343:    for (i = card; i < state->deckCount[player]-1; i++) {
     2354:  344:      state->deck[player][i] = state->deck[player][i+1];
        -:  345:    }
     1406:  346:    state->deckCount[player]--;
        -:  347:  }
     1749:  348:  for (i = 0; i < newDeckPos; i++) {
     1406:  349:    state->deck[player][i] = newDeck[i];
     1406:  350:    state->deckCount[player]++;
        -:  351:  }
        -:  352:
      343:  353:  return 0;
        -:  354:}
        -:  355:
    #####:  356:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  357:{	
        -:  358:  int card;
    #####:  359:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  360:
        -:  361:  //check if it is the right phase
    #####:  362:  if (state->phase != 0)
        -:  363:    {
    #####:  364:      return -1;
        -:  365:    }
        -:  366:	
        -:  367:  //check if player has enough actions
    #####:  368:  if ( state->numActions < 1 )
        -:  369:    {
    #####:  370:      return -1;
        -:  371:    }
        -:  372:	
        -:  373:  //get card played
    #####:  374:  card = handCard(handPos, state);
        -:  375:	
        -:  376:  //check if selected card is an action
    #####:  377:  if ( card < adventurer || card > treasure_map )
        -:  378:    {
    #####:  379:      return -1;
        -:  380:    }
        -:  381:	
        -:  382:  //play card
    #####:  383:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  384:    {
    #####:  385:      return -1;
        -:  386:    }
        -:  387:	
        -:  388:  //reduce number of actions
    #####:  389:  state->numActions--;
        -:  390:
        -:  391:  //update coins (Treasure cards may be added with card draws)
    #####:  392:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  393:	
    #####:  394:  return 0;
        -:  395:}
        -:  396:
    #####:  397:int buyCard(int supplyPos, struct gameState *state) {
        -:  398:  int who;
        -:  399:  if (DEBUG){
        -:  400:    printf("Entering buyCard...\n");
        -:  401:  }
        -:  402:
        -:  403:  // I don't know what to do about the phase thing.
        -:  404:
    #####:  405:  who = state->whoseTurn;
        -:  406:
    #####:  407:  if (state->numBuys < 1){
        -:  408:    if (DEBUG)
        -:  409:      printf("You do not have any buys left\n");
    #####:  410:    return -1;
    #####:  411:  } else if (supplyCount(supplyPos, state) <1){
        -:  412:    if (DEBUG)
        -:  413:      printf("There are not any of that type of card left\n");
    #####:  414:    return -1;
    #####:  415:  } else if (state->coins < getCost(supplyPos)){
        -:  416:    if (DEBUG) 
        -:  417:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  418:    return -1;
        -:  419:  } else {
    #####:  420:    state->phase=1;
        -:  421:    //state->supplyCount[supplyPos]--;
    #####:  422:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  423:  
    #####:  424:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  425:    state->numBuys--;
        -:  426:    if (DEBUG)
        -:  427:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  428:  }
        -:  429:
        -:  430:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  431:  //state->discardCount[who]++;
        -:  432:    
    #####:  433:  return 0;
        -:  434:}
        -:  435:
    #####:  436:int numHandCards(struct gameState *state) {
    #####:  437:  return state->handCount[ whoseTurn(state) ];
        -:  438:}
        -:  439:
    #####:  440:int handCard(int handPos, struct gameState *state) {
    #####:  441:  int currentPlayer = whoseTurn(state);
    #####:  442:  return state->hand[currentPlayer][handPos];
        -:  443:}
        -:  444:
    #####:  445:int supplyCount(int card, struct gameState *state) {
    #####:  446:  return state->supplyCount[card];
        -:  447:}
        -:  448:
    #####:  449:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  450:  int i;
    #####:  451:  int count = 0;
        -:  452:
    #####:  453:  for (i = 0; i < state->deckCount[player]; i++)
        -:  454:    {
    #####:  455:      if (state->deck[player][i] == card) count++;
        -:  456:    }
        -:  457:
    #####:  458:  for (i = 0; i < state->handCount[player]; i++)
        -:  459:    {
    #####:  460:      if (state->hand[player][i] == card) count++;
        -:  461:    }
        -:  462:
    #####:  463:  for (i = 0; i < state->discardCount[player]; i++)
        -:  464:    {
    #####:  465:      if (state->discard[player][i] == card) count++;
        -:  466:    }
        -:  467:
    #####:  468:  return count;
        -:  469:}
        -:  470:
      425:  471:int whoseTurn(struct gameState *state) {
      425:  472:  return state->whoseTurn;
        -:  473:}
        -:  474:
    #####:  475:int endTurn(struct gameState *state) {
        -:  476:  int k;
        -:  477:  int i;
    #####:  478:  int currentPlayer = whoseTurn(state);
        -:  479:  
        -:  480:  //Discard hand
    #####:  481:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  482:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  483:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  484:  }
    #####:  485:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  486:    
        -:  487:  //Code for determining the player
    #####:  488:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  489:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  490:  }
        -:  491:  else{
    #####:  492:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  493:  }
        -:  494:
    #####:  495:  state->outpostPlayed = 0;
    #####:  496:  state->phase = 0;
    #####:  497:  state->numActions = 1;
    #####:  498:  state->coins = 0;
    #####:  499:  state->numBuys = 1;
    #####:  500:  state->playedCardCount = 0;
    #####:  501:  state->handCount[state->whoseTurn] = 0;
        -:  502:
        -:  503:  //int k; move to top
        -:  504:  //Next player draws hand
    #####:  505:  for (k = 0; k < 5; k++){
    #####:  506:    drawCard(state->whoseTurn, state);//Draw a card
        -:  507:  }
        -:  508:
        -:  509:  //Update money
    #####:  510:  updateCoins(state->whoseTurn, state , 0);
        -:  511:
    #####:  512:  return 0;
        -:  513:}
        -:  514:
    #####:  515:int isGameOver(struct gameState *state) {
        -:  516:  int i;
        -:  517:  int j;
        -:  518:	
        -:  519:  //if stack of Province cards is empty, the game ends
    #####:  520:  if (state->supplyCount[province] == 0)
        -:  521:    {
    #####:  522:      return 1;
        -:  523:    }
        -:  524:
        -:  525:  //if three supply pile are at 0, the game ends
    #####:  526:  j = 0;
    #####:  527:  for (i = 0; i < 25; i++)
        -:  528:    {
    #####:  529:      if (state->supplyCount[i] == 0)
        -:  530:	{
    #####:  531:	  j++;
        -:  532:	}
        -:  533:    }
    #####:  534:  if ( j >= 3)
        -:  535:    {
    #####:  536:      return 1;
        -:  537:    }
        -:  538:
    #####:  539:  return 0;
        -:  540:}
        -:  541:
    #####:  542:int scoreFor (int player, struct gameState *state) {
        -:  543:
        -:  544:  int i;
    #####:  545:  int score = 0;
        -:  546:  //score from hand
    #####:  547:  for (i = 0; i < state->handCount[player]; i++)
        -:  548:    {
    #####:  549:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  550:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  551:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  552:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  553:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  554:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  555:    }
        -:  556:
        -:  557:  //score from discard
    #####:  558:  for (i = 0; i < state->discardCount[player]; i++)
        -:  559:    {
    #####:  560:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  561:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  562:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  563:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  564:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  565:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  566:    }
        -:  567:
        -:  568:  //score from deck
    #####:  569:  for (i = 0; i < state->discardCount[player]; i++)
        -:  570:    {
    #####:  571:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  572:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  573:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  574:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  575:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  576:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  577:    }
        -:  578:
    #####:  579:  return score;
        -:  580:}
        -:  581:
    #####:  582:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  583:  int i;	
        -:  584:  int j;
        -:  585:  int highScore;
        -:  586:  int currentPlayer;
        -:  587:
        -:  588:  //get score for each player
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  590:    {
        -:  591:      //set unused player scores to -9999
    #####:  592:      if (i >= state->numPlayers)
        -:  593:	{
    #####:  594:	  players[i] = -9999;
        -:  595:	}
        -:  596:      else
        -:  597:	{
    #####:  598:	  players[i] = scoreFor (i, state);
        -:  599:	}
        -:  600:    }
        -:  601:
        -:  602:  //find highest score
    #####:  603:  j = 0;
    #####:  604:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  605:    {
    #####:  606:      if (players[i] > players[j])
        -:  607:	{
    #####:  608:	  j = i;
        -:  609:	}
        -:  610:    }
    #####:  611:  highScore = players[j];
        -:  612:
        -:  613:  //add 1 to players who had less turns
    #####:  614:  currentPlayer = whoseTurn(state);
    #####:  615:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  616:    {
    #####:  617:      if ( players[i] == highScore && i > currentPlayer )
        -:  618:	{
    #####:  619:	  players[i]++;
        -:  620:	}
        -:  621:    }
        -:  622:
        -:  623:  //find new highest score
    #####:  624:  j = 0;
    #####:  625:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  626:    {
    #####:  627:      if ( players[i] > players[j] )
        -:  628:	{
    #####:  629:	  j = i;
        -:  630:	}
        -:  631:    }
    #####:  632:  highScore = players[j];
        -:  633:
        -:  634:  //set winners in array to 1 and rest to 0
    #####:  635:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  636:    {
    #####:  637:      if ( players[i] == highScore )
        -:  638:	{
    #####:  639:	  players[i] = 1;
        -:  640:	}
        -:  641:      else
        -:  642:	{
    #####:  643:	  players[i] = 0;
        -:  644:	}
        -:  645:    }
        -:  646:
    #####:  647:  return 0;
        -:  648:}
        -:  649:
     2543:  650:int drawCard(int player, struct gameState *state)
        -:  651:{	int count;
        -:  652:  int deckCounter;
     2543:  653:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  654:    
        -:  655:    //Step 1 Shuffle the discard pile back into a deck
        -:  656:    int i;
        -:  657:    //Move discard to deck
     2079:  658:    for (i = 0; i < state->discardCount[player];i++){
      506:  659:      state->deck[player][i] = state->discard[player][i];
      506:  660:      state->discard[player][i] = -1;
        -:  661:    }
        -:  662:
     1573:  663:    state->deckCount[player] = state->discardCount[player];
     1573:  664:    state->discardCount[player] = 0;//Reset discard
        -:  665:
        -:  666:    //Shufffle the deck
     1573:  667:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  668:   
        -:  669:    if (DEBUG){//Debug statements
        -:  670:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  671:    }
        -:  672:    
     1573:  673:    state->discardCount[player] = 0;
        -:  674:
        -:  675:    //Step 2 Draw Card
     1573:  676:    count = state->handCount[player];//Get current player's hand count
        -:  677:    
        -:  678:    if (DEBUG){//Debug statements
        -:  679:      printf("Current hand count: %d\n", count);
        -:  680:    }
        -:  681:    
     1573:  682:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  683:
     1573:  684:    if (deckCounter == 0)
     1320:  685:      return -1;
        -:  686:
      253:  687:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      253:  688:    state->deckCount[player]--;
      253:  689:    state->handCount[player]++;//Increment hand count
        -:  690:  }
        -:  691:
        -:  692:  else{
      970:  693:    int count = state->handCount[player];//Get current hand count for player
        -:  694:    int deckCounter;
        -:  695:    if (DEBUG){//Debug statements
        -:  696:      printf("Current hand count: %d\n", count);
        -:  697:    }
        -:  698:
      970:  699:    deckCounter = state->deckCount[player];//Create holder for the deck count
      970:  700:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      970:  701:    state->deckCount[player]--;
      970:  702:    state->handCount[player]++;//Increment hand count
        -:  703:  }
        -:  704:
     1223:  705:  return 0;
        -:  706:}
        -:  707:
    #####:  708:int getCost(int cardNumber)
        -:  709:{
    #####:  710:  switch( cardNumber ) 
        -:  711:    {
        -:  712:    case curse:
    #####:  713:      return 0;
        -:  714:    case estate:
    #####:  715:      return 2;
        -:  716:    case duchy:
    #####:  717:      return 5;
        -:  718:    case province:
    #####:  719:      return 8;
        -:  720:    case copper:
    #####:  721:      return 0;
        -:  722:    case silver:
    #####:  723:      return 3;
        -:  724:    case gold:
    #####:  725:      return 6;
        -:  726:    case adventurer:
    #####:  727:      return 6;
        -:  728:    case council_room:
    #####:  729:      return 5;
        -:  730:    case feast:
    #####:  731:      return 4;
        -:  732:    case gardens:
    #####:  733:      return 4;
        -:  734:    case mine:
    #####:  735:      return 5;
        -:  736:    case remodel:
    #####:  737:      return 4;
        -:  738:    case smithy:
    #####:  739:      return 4;
        -:  740:    case village:
    #####:  741:      return 3;
        -:  742:    case baron:
    #####:  743:      return 4;
        -:  744:    case great_hall:
    #####:  745:      return 3;
        -:  746:    case minion:
    #####:  747:      return 5;
        -:  748:    case steward:
    #####:  749:      return 3;
        -:  750:    case tribute:
    #####:  751:      return 5;
        -:  752:    case ambassador:
    #####:  753:      return 3;
        -:  754:    case cutpurse:
    #####:  755:      return 4;
        -:  756:    case embargo: 
    #####:  757:      return 2;
        -:  758:    case outpost:
    #####:  759:      return 5;
        -:  760:    case salvager:
    #####:  761:      return 4;
        -:  762:    case sea_hag:
    #####:  763:      return 4;
        -:  764:    case treasure_map:
    #####:  765:      return 4;
        -:  766:    }
        -:  767:	
    #####:  768:  return -1;
        -:  769:}
        -:  770:
       50:  771:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  772:{
        -:  773:  int i;
        -:  774:  int j;
        -:  775:  int k;
        -:  776:  int x;
        -:  777:  int index;
       50:  778:  int currentPlayer = whoseTurn(state);
       50:  779:  int nextPlayer = currentPlayer + 1;
        -:  780:
       50:  781:  int tributeRevealedCards[2] = {-1, -1};
        -:  782:  int temphand[MAX_HAND];// moved above the if statement
       50:  783:  int drawntreasure=0;
        -:  784:  int cardDrawn;
       50:  785:  int z = 0;// this is the counter for the temp hand
       50:  786:  if (nextPlayer > (state->numPlayers - 1)){
        9:  787:    nextPlayer = 0;
        -:  788:  }
        -:  789:  
        -:  790:	
        -:  791:  //uses switch to select card and perform actions
       50:  792:  switch( card ) 
        -:  793:    {
        -:  794:    case adventurer:
    #####:  795:      while(drawntreasure<2){
    #####:  796:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  797:	  shuffle(currentPlayer, state);
        -:  798:	}
    #####:  799:	drawCard(currentPlayer, state);
    #####:  800:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  801:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  802:	  drawntreasure++;
        -:  803:	else{
    #####:  804:	  temphand[z]=cardDrawn;
    #####:  805:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  806:	  z++;
        -:  807:	}
        -:  808:      }
    #####:  809:      while(z-1>=0){
    #####:  810:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  811:	z=z-1;
        -:  812:      }
    #####:  813:      return 0;
        -:  814:			
        -:  815:    case council_room:
        -:  816:      //+4 Cards
    #####:  817:      for (i = 0; i < 4; i++)
        -:  818:	{
    #####:  819:	  drawCard(currentPlayer, state);
        -:  820:	}
        -:  821:			
        -:  822:      //+1 Buy
    #####:  823:      state->numBuys++;
        -:  824:			
        -:  825:      //Each other player draws a card
    #####:  826:      for (i = 0; i < state->numPlayers; i++)
        -:  827:	{
    #####:  828:	  if ( i != currentPlayer )
        -:  829:	    {
    #####:  830:	      drawCard(i, state);
        -:  831:	    }
        -:  832:	}
        -:  833:			
        -:  834:      //put played card in played card pile
    #####:  835:      discardCard(handPos, currentPlayer, state, 0);
        -:  836:			
    #####:  837:      return 0;
        -:  838:			
        -:  839:    case feast:
        -:  840:      //gain card with cost up to 5
        -:  841:      //Backup hand
    #####:  842:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  843:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  844:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  845:      }
        -:  846:      //Backup hand
        -:  847:
        -:  848:      //Update Coins for Buy
    #####:  849:      updateCoins(currentPlayer, state, 5);
    #####:  850:      x = 1;//Condition to loop on
    #####:  851:      while( x == 1) {//Buy one card
    #####:  852:	if (supplyCount(choice1, state) <= 0){
        -:  853:	  if (DEBUG)
        -:  854:	    printf("None of that card left, sorry!\n");
        -:  855:
        -:  856:	  if (DEBUG){
        -:  857:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  858:	  }
        -:  859:	}
    #####:  860:	else if (state->coins < getCost(choice1)){
    #####:  861:	  printf("That card is too expensive!\n");
        -:  862:
        -:  863:	  if (DEBUG){
        -:  864:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  865:	  }
        -:  866:	}
        -:  867:	else{
        -:  868:
        -:  869:	  if (DEBUG){
        -:  870:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  871:	  }
        -:  872:
    #####:  873:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  874:	  x = 0;//No more buying cards
        -:  875:
        -:  876:	  if (DEBUG){
        -:  877:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  878:	  }
        -:  879:
        -:  880:	}
        -:  881:      }     
        -:  882:
        -:  883:      //Reset Hand
    #####:  884:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  885:	state->hand[currentPlayer][i] = temphand[i];
    #####:  886:	temphand[i] = -1;
        -:  887:      }
        -:  888:      //Reset Hand
        -:  889:      			
    #####:  890:      return 0;
        -:  891:			
        -:  892:    case gardens:
    #####:  893:      return -1;
        -:  894:			
        -:  895:    case mine:
    #####:  896:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  897:
    #####:  898:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  899:	{
    #####:  900:	  return -1;
        -:  901:	}
        -:  902:		
    #####:  903:      if (choice2 > treasure_map || choice2 < curse)
        -:  904:	{
    #####:  905:	  return -1;
        -:  906:	}
        -:  907:
    #####:  908:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  909:	{
    #####:  910:	  return -1;
        -:  911:	}
        -:  912:
    #####:  913:      gainCard(choice2, state, 2, currentPlayer);
        -:  914:
        -:  915:      //discard card from hand
    #####:  916:      discardCard(handPos, currentPlayer, state, 0);
        -:  917:
        -:  918:      //discard trashed card
    #####:  919:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  920:	{
    #####:  921:	  if (state->hand[currentPlayer][i] == j)
        -:  922:	    {
    #####:  923:	      discardCard(i, currentPlayer, state, 0);			
    #####:  924:	      break;
        -:  925:	    }
        -:  926:	}
        -:  927:			
    #####:  928:      return 0;
        -:  929:			
        -:  930:    case remodel:
    #####:  931:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  932:
    #####:  933:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  934:	{
    #####:  935:	  return -1;
        -:  936:	}
        -:  937:
    #####:  938:      gainCard(choice2, state, 0, currentPlayer);
        -:  939:
        -:  940:      //discard card from hand
    #####:  941:      discardCard(handPos, currentPlayer, state, 0);
        -:  942:
        -:  943:      //discard trashed card
    #####:  944:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  945:	{
    #####:  946:	  if (state->hand[currentPlayer][i] == j)
        -:  947:	    {
    #####:  948:	      discardCard(i, currentPlayer, state, 0);			
    #####:  949:	      break;
        -:  950:	    }
        -:  951:	}
        -:  952:
        -:  953:
    #####:  954:      return 0;
        -:  955:		
        -:  956:    case smithy:
        -:  957:      //+3 Cards
      200:  958:      for (i = 0; i < 3; i++)
        -:  959:	{
      150:  960:	  drawCard(currentPlayer, state);
        -:  961:	}
        -:  962:			
        -:  963:      //discard card from hand
       50:  964:      discardCard(handPos, currentPlayer, state, 0);
       50:  965:      return 0;
        -:  966:		
        -:  967:    case village:
        -:  968:      //+1 Card
    #####:  969:      drawCard(currentPlayer, state);
        -:  970:			
        -:  971:      //+2 Actions
    #####:  972:      state->numActions = state->numActions + 2;
        -:  973:			
        -:  974:      //discard played card from hand
    #####:  975:      discardCard(handPos, currentPlayer, state, 0);
    #####:  976:      return 0;
        -:  977:		
        -:  978:    case baron:
    #####:  979:      state->numBuys++;//Increase buys by 1!
    #####:  980:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  981:	int p = 0;//Iterator for hand!
    #####:  982:	int card_not_discarded = 1;//Flag for discard set!
    #####:  983:	while(card_not_discarded){
    #####:  984:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  985:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  986:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  987:	    state->discardCount[currentPlayer]++;
    #####:  988:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  989:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  990:	    }
    #####:  991:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  992:	    state->handCount[currentPlayer]--;
    #####:  993:	    card_not_discarded = 0;//Exit the loop
        -:  994:	  }
    #####:  995:	  else if (p > state->handCount[currentPlayer]){
        -:  996:	    if(DEBUG) {
        -:  997:	      printf("No estate cards in your hand, invalid choice\n");
        -:  998:	      printf("Must gain an estate if there are any\n");
        -:  999:	    }
    #####: 1000:	    if (supplyCount(estate, state) > 0){
    #####: 1001:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1002:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1003:	      if (supplyCount(estate, state) == 0){
    #####: 1004:		isGameOver(state);
        -: 1005:	      }
        -: 1006:	    }
    #####: 1007:	    card_not_discarded = 0;//Exit the loop
        -: 1008:	  }
        -: 1009:			    
        -: 1010:	  else{
    #####: 1011:	    p++;//Next card
        -: 1012:	  }
        -: 1013:	}
        -: 1014:      }
        -: 1015:			    
        -: 1016:      else{
    #####: 1017:	if (supplyCount(estate, state) > 0){
    #####: 1018:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1019:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1020:	  if (supplyCount(estate, state) == 0){
    #####: 1021:	    isGameOver(state);
        -: 1022:	  }
        -: 1023:	}
        -: 1024:      }
        -: 1025:	    
        -: 1026:      
    #####: 1027:      return 0;
        -: 1028:		
        -: 1029:    case great_hall:
        -: 1030:      //+1 Card
    #####: 1031:      drawCard(currentPlayer, state);
        -: 1032:			
        -: 1033:      //+1 Actions
    #####: 1034:      state->numActions++;
        -: 1035:			
        -: 1036:      //discard card from hand
    #####: 1037:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1038:      return 0;
        -: 1039:		
        -: 1040:    case minion:
        -: 1041:      //+1 action
    #####: 1042:      state->numActions++;
        -: 1043:			
        -: 1044:      //discard card from hand
    #####: 1045:      discardCard(handPos, currentPlayer, state, 0);
        -: 1046:			
    #####: 1047:      if (choice1)		//+2 coins
        -: 1048:	{
    #####: 1049:	  state->coins = state->coins + 2;
        -: 1050:	}
        -: 1051:			
    #####: 1052:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1053:	{
        -: 1054:	  //discard hand
    #####: 1055:	  while(numHandCards(state) > 0)
        -: 1056:	    {
    #####: 1057:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1058:	    }
        -: 1059:				
        -: 1060:	  //draw 4
    #####: 1061:	  for (i = 0; i < 4; i++)
        -: 1062:	    {
    #####: 1063:	      drawCard(currentPlayer, state);
        -: 1064:	    }
        -: 1065:				
        -: 1066:	  //other players discard hand and redraw if hand size > 4
    #####: 1067:	  for (i = 0; i < state->numPlayers; i++)
        -: 1068:	    {
    #####: 1069:	      if (i != currentPlayer)
        -: 1070:		{
    #####: 1071:		  if ( state->handCount[i] > 4 )
        -: 1072:		    {
        -: 1073:		      //discard hand
    #####: 1074:		      while( state->handCount[i] > 0 )
        -: 1075:			{
    #####: 1076:			  discardCard(handPos, i, state, 0);
        -: 1077:			}
        -: 1078:							
        -: 1079:		      //draw 4
    #####: 1080:		      for (j = 0; j < 4; j++)
        -: 1081:			{
    #####: 1082:			  drawCard(i, state);
        -: 1083:			}
        -: 1084:		    }
        -: 1085:		}
        -: 1086:	    }
        -: 1087:				
        -: 1088:	}
    #####: 1089:      return 0;
        -: 1090:		
        -: 1091:    case steward:
    #####: 1092:      if (choice1 == 1)
        -: 1093:	{
        -: 1094:	  //+2 cards
    #####: 1095:	  drawCard(currentPlayer, state);
    #####: 1096:	  drawCard(currentPlayer, state);
        -: 1097:	}
    #####: 1098:      else if (choice1 == 2)
        -: 1099:	{
        -: 1100:	  //+2 coins
    #####: 1101:	  state->coins = state->coins + 2;
        -: 1102:	}
        -: 1103:      else
        -: 1104:	{
        -: 1105:	  //trash 2 cards in hand
    #####: 1106:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1107:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1108:	}
        -: 1109:			
        -: 1110:      //discard card from hand
    #####: 1111:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1112:      return 0;
        -: 1113:		
        -: 1114:    case tribute:
    #####: 1115:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1116:	if (state->deckCount[nextPlayer] > 0){
    #####: 1117:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1118:	  state->deckCount[nextPlayer]--;
        -: 1119:	}
    #####: 1120:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1121:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1122:	  state->discardCount[nextPlayer]--;
        -: 1123:	}
        -: 1124:	else{
        -: 1125:	  //No Card to Reveal
        -: 1126:	  if (DEBUG){
        -: 1127:	    printf("No cards to reveal\n");
        -: 1128:	  }
        -: 1129:	}
        -: 1130:      }
        -: 1131:	    
        -: 1132:      else{
    #####: 1133:	if (state->deckCount[nextPlayer] == 0){
    #####: 1134:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1135:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1136:	    state->deckCount[nextPlayer]++;
    #####: 1137:	    state->discard[nextPlayer][i] = -1;
    #####: 1138:	    state->discardCount[nextPlayer]--;
        -: 1139:	  }
        -: 1140:			    
    #####: 1141:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1142:	} 
    #####: 1143:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1144:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1145:	state->deckCount[nextPlayer]--;
    #####: 1146:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1147:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1148:	state->deckCount[nextPlayer]--;
        -: 1149:      }    
        -: 1150:		       
    #####: 1151:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1152:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1153:	state->playedCardCount++;
    #####: 1154:	tributeRevealedCards[1] = -1;
        -: 1155:      }
        -: 1156:
    #####: 1157:      for (i = 0; i <= 2; i ++){
    #####: 1158:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1159:	  state->coins += 2;
        -: 1160:	}
        -: 1161:		    
    #####: 1162:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1163:	  drawCard(currentPlayer, state);
    #####: 1164:	  drawCard(currentPlayer, state);
        -: 1165:	}
        -: 1166:	else{//Action Card
    #####: 1167:	  state->numActions = state->numActions + 2;
        -: 1168:	}
        -: 1169:      }
        -: 1170:	    
    #####: 1171:      return 0;
        -: 1172:		
        -: 1173:    case ambassador:
    #####: 1174:      j = 0;		//used to check if player has enough cards to discard
        -: 1175:
    #####: 1176:      if (choice2 > 2 || choice2 < 0)
        -: 1177:	{
    #####: 1178:	  return -1;				
        -: 1179:	}
        -: 1180:
    #####: 1181:      if (choice1 == handPos)
        -: 1182:	{
    #####: 1183:	  return -1;
        -: 1184:	}
        -: 1185:
    #####: 1186:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1187:	{
    #####: 1188:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1189:	    {
    #####: 1190:	      j++;
        -: 1191:	    }
        -: 1192:	}
    #####: 1193:      if (j < choice2)
        -: 1194:	{
    #####: 1195:	  return -1;				
        -: 1196:	}
        -: 1197:
        -: 1198:      if (DEBUG) 
        -: 1199:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1200:
        -: 1201:      //increase supply count for choosen card by amount being discarded
    #####: 1202:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1203:			
        -: 1204:      //each other player gains a copy of revealed card
    #####: 1205:      for (i = 0; i < state->numPlayers; i++)
        -: 1206:	{
    #####: 1207:	  if (i != currentPlayer)
        -: 1208:	    {
    #####: 1209:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1210:	    }
        -: 1211:	}
        -: 1212:
        -: 1213:      //discard played card from hand
    #####: 1214:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1215:
        -: 1216:      //trash copies of cards returned to supply
    #####: 1217:      for (j = 0; j < choice2; j++)
        -: 1218:	{
    #####: 1219:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1220:	    {
    #####: 1221:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1222:		{
    #####: 1223:		  discardCard(i, currentPlayer, state, 1);
    #####: 1224:		  break;
        -: 1225:		}
        -: 1226:	    }
        -: 1227:	}			
        -: 1228:
    #####: 1229:      return 0;
        -: 1230:		
        -: 1231:    case cutpurse:
        -: 1232:
    #####: 1233:      updateCoins(currentPlayer, state, 2);
    #####: 1234:      for (i = 0; i < state->numPlayers; i++)
        -: 1235:	{
    #####: 1236:	  if (i != currentPlayer)
        -: 1237:	    {
    #####: 1238:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1239:		{
    #####: 1240:		  if (state->hand[i][j] == copper)
        -: 1241:		    {
    #####: 1242:		      discardCard(j, i, state, 0);
    #####: 1243:		      break;
        -: 1244:		    }
    #####: 1245:		  if (j == state->handCount[i])
        -: 1246:		    {
    #####: 1247:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1248:			{
        -: 1249:			  if (DEBUG)
        -: 1250:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1251:			}	
    #####: 1252:		      break;
        -: 1253:		    }		
        -: 1254:		}
        -: 1255:					
        -: 1256:	    }
        -: 1257:				
        -: 1258:	}				
        -: 1259:
        -: 1260:      //discard played card from hand
    #####: 1261:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1262:
    #####: 1263:      return 0;
        -: 1264:
        -: 1265:		
        -: 1266:    case embargo: 
        -: 1267:      //+2 Coins
    #####: 1268:      state->coins = state->coins + 2;
        -: 1269:			
        -: 1270:      //see if selected pile is in play
    #####: 1271:      if ( state->supplyCount[choice1] == -1 )
        -: 1272:	{
    #####: 1273:	  return -1;
        -: 1274:	}
        -: 1275:			
        -: 1276:      //add embargo token to selected supply pile
    #####: 1277:      state->embargoTokens[choice1]++;
        -: 1278:			
        -: 1279:      //trash card
    #####: 1280:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1281:      return 0;
        -: 1282:		
        -: 1283:    case outpost:
        -: 1284:      //set outpost flag
    #####: 1285:      state->outpostPlayed++;
        -: 1286:			
        -: 1287:      //discard card
    #####: 1288:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1289:      return 0;
        -: 1290:		
        -: 1291:    case salvager:
        -: 1292:      //+1 buy
    #####: 1293:      state->numBuys++;
        -: 1294:			
    #####: 1295:      if (choice1)
        -: 1296:	{
        -: 1297:	  //gain coins equal to trashed card
    #####: 1298:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1299:	  //trash card
    #####: 1300:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1301:	}
        -: 1302:			
        -: 1303:      //discard card
    #####: 1304:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1305:      return 0;
        -: 1306:		
        -: 1307:    case sea_hag:
    #####: 1308:      for (i = 0; i < state->numPlayers; i++){
    #####: 1309:	if (i != currentPlayer){
    #####: 1310:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1311:	  state->discardCount[i]++;
    #####: 1312:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1313:	}
        -: 1314:      }
    #####: 1315:      return 0;
        -: 1316:		
        -: 1317:    case treasure_map:
        -: 1318:      //search hand for another treasure_map
    #####: 1319:      index = -1;
    #####: 1320:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1321:	{
    #####: 1322:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1323:	    {
    #####: 1324:	      index = i;
    #####: 1325:	      break;
        -: 1326:	    }
        -: 1327:	}
    #####: 1328:      if (index > -1)
        -: 1329:	{
        -: 1330:	  //trash both treasure cards
    #####: 1331:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1332:	  discardCard(index, currentPlayer, state, 1);
        -: 1333:
        -: 1334:	  //gain 4 Gold cards
    #####: 1335:	  for (i = 0; i < 4; i++)
        -: 1336:	    {
    #####: 1337:	      gainCard(gold, state, 1, currentPlayer);
        -: 1338:	    }
        -: 1339:				
        -: 1340:	  //return success
    #####: 1341:	  return 1;
        -: 1342:	}
        -: 1343:			
        -: 1344:      //no second treasure_map found in hand
    #####: 1345:      return -1;
        -: 1346:    }
        -: 1347:	
    #####: 1348:  return -1;
        -: 1349:}
        -: 1350:
      325: 1351:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1352:{
        -: 1353:	
        -: 1354:  //if card is not trashed, added to Played pile 
      325: 1355:  if (trashFlag < 1)
        -: 1356:    {
        -: 1357:      //add card to played pile
      325: 1358:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      325: 1359:      state->playedCardCount++;
        -: 1360:    }
        -: 1361:	
        -: 1362:  //set played card to -1
      325: 1363:  state->hand[currentPlayer][handPos] = -1;
        -: 1364:	
        -: 1365:  //remove card from player's hand
      325: 1366:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1367:    {
        -: 1368:      //reduce number of cards in hand
       34: 1369:      state->handCount[currentPlayer]--;
        -: 1370:    }
      291: 1371:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1372:    {
        -: 1373:      //reduce number of cards in hand
        2: 1374:      state->handCount[currentPlayer]--;
        -: 1375:    }
        -: 1376:  else 	
        -: 1377:    {
        -: 1378:      //replace discarded card with last card in hand
      289: 1379:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1380:      //set last card to -1
      289: 1381:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1382:      //reduce number of cards in hand
      289: 1383:      state->handCount[currentPlayer]--;
        -: 1384:    }
        -: 1385:	
      325: 1386:  return 0;
        -: 1387:}
        -: 1388:
    #####: 1389:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1390:{
        -: 1391:  //Note: supplyPos is enum of choosen card
        -: 1392:	
        -: 1393:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1394:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1395:    {
    #####: 1396:      return -1;
        -: 1397:    }
        -: 1398:	
        -: 1399:  //added card for [whoseTurn] current player:
        -: 1400:  // toFlag = 0 : add to discard
        -: 1401:  // toFlag = 1 : add to deck
        -: 1402:  // toFlag = 2 : add to hand
        -: 1403:
    #####: 1404:  if (toFlag == 1)
        -: 1405:    {
    #####: 1406:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1407:      state->deckCount[player]++;
        -: 1408:    }
    #####: 1409:  else if (toFlag == 2)
        -: 1410:    {
    #####: 1411:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1412:      state->handCount[player]++;
        -: 1413:    }
        -: 1414:  else
        -: 1415:    {
    #####: 1416:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1417:      state->discardCount[player]++;
        -: 1418:    }
        -: 1419:	
        -: 1420:  //decrease number in supply pile
    #####: 1421:  state->supplyCount[supplyPos]--;
        -: 1422:	 
    #####: 1423:  return 0;
        -: 1424:}
        -: 1425:
       53: 1426:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1427:{
        -: 1428:  int i;
        -: 1429:	
        -: 1430:  //reset coin count
       53: 1431:  state->coins = 0;
        -: 1432:
        -: 1433:  //add coins for each Treasure card in player's hand
      243: 1434:  for (i = 0; i < state->handCount[player]; i++)
        -: 1435:    {
      190: 1436:      if (state->hand[player][i] == copper)
        -: 1437:	{
      112: 1438:	  state->coins += 1;
        -: 1439:	}
       78: 1440:      else if (state->hand[player][i] == silver)
        -: 1441:	{
    #####: 1442:	  state->coins += 2;
        -: 1443:	}
       78: 1444:      else if (state->hand[player][i] == gold)
        -: 1445:	{
    #####: 1446:	  state->coins += 3;
        -: 1447:	}	
        -: 1448:    }	
        -: 1449:
        -: 1450:  //add bonus
       53: 1451:  state->coins += bonus;
        -: 1452:
       53: 1453:  return 0;
        -: 1454:}
        -: 1455:
        -: 1456:
        -: 1457://end of dominion.c
        -: 1458:
