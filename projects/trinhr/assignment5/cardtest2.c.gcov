        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8://This is a unit test for the card Adventurer function.
        -:    9://int adventurerCard(struct gameState *state, int currentPlayer, int handPos);
        -:   10://Input: int currentplayer --> current player
        -:   11://	 struct gamestate
        -:   12://	 int handPos
        -:   13://Business Rules:
        -:   14://1. It needs to draw cards from the players own deck until
        -:   15://two treasure cards are revealed. 
        -:   16://2. The two treasure cards are added to the the player's hand.
        -:   17://3. The non-treasure cards drawn need to be discarded.
        -:   18://4. Other players state should be unchanged.
        -:   19://5. The supplyCount should be unchanged. 
        -:   20:
        -:   21:
function main called 2 returned 100% blocks executed 71%
        2:   22:int main () {
        -:   23:
        -:   24:  struct gameState actual, expected;
        2:   25:  int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   26:	       remodel, smithy, village, baron, great_hall};
        2:   27:  int num_players = 2;
        2:   28:  initializeGame(num_players, k, 1, &actual);
call    0 returned 100%
        -:   29:
        2:   30:  int player = 0;
        2:   31:  int handpos = 0;
        -:   32:  //Set up player's deck.
        2:   33:  actual.deckCount[player] = 5;
        2:   34:  actual.deck[player][0] = village;
        2:   35:  actual.deck[player][1] = gold;
        2:   36:  actual.deck[player][2] = smithy;
        2:   37:  actual.deck[player][3] = feast;
        2:   38:  actual.deck[player][4] = copper;
        -:   39:
        -:   40:  //Set up player's hand.
        2:   41:  actual.handCount[player] = 2;
        2:   42:  actual.hand[player][0] = adventurer;
        2:   43:  actual.hand[player][1] = mine;
        -:   44:  
        2:   45:  actual.discardCount[player] = 0;
        -:   46:
        2:   47:  memcpy(&expected, &actual, sizeof(struct gameState));
        -:   48:  //Copy the game state to the pre game state test case.
        2:   49:  assert(memcmp(&expected, &actual, sizeof(struct gameState)) == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        2:   50:  printf("The state of the actual and expected both initialized in the same state.\n");
call    0 returned 100%
        -:   51:
        -:   52:  //Expected Results
        2:   53:  int discarded = 2;
        2:   54:  int discarded_adventurer = 1;
        2:   55:  int treasure_cards = 2;
        2:   56:  expected.handCount[player] = actual.handCount[player] - discarded_adventurer + treasure_cards;
        2:   57:  expected.deckCount[player] -= treasure_cards;
        2:   58:  expected.deckCount[player] -= discarded;
        2:   59:  expected.discardCount[player] = discarded_adventurer + discarded; 
        -:   60: 
        -:   61:
        2:   62:  if( adventurerCard(&actual, player, handpos) == 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2:   63:	printf("The adventurer card was called successfully.\n");
call    0 returned 100%
        -:   64:  }else{
    #####:   65:	printf("The adventurer card failed to be called.i\n");
call    0 never executed
        -:   66:  }
        -:   67:
        -:   68:
        2:   69:  printf("ACTUAL HANDCOUNT:%i EXPECTED HANDCOUNT: %i\n", actual.handCount[player], expected.handCount[player]);
call    0 returned 100%
        2:   70:  assert( actual.handCount[player] == expected.handCount[player]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        2:   71:  assert( actual.hand[player][handpos] != adventurer );
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   72:
        2:   73:  printf("ACTUAL DISCARD COUNT:%i EXPECTED DISCARD COUNT: %i\n", actual.discardCount[player], expected.discardCount[player]);
call    0 returned 100%
        -:   74: // assert( expected.discardCount[player] == actual.discardCount[player] );
        -:   75: 
        2:   76:  printf("ACTUAL DECKCOUNT:%i EXPECTED DECKCOUNT: %i\n", actual.deckCount[player], expected.deckCount[player]);
call    0 returned 100%
        -:   77: // assert( actual.deckCount[player] == expected.deckCount[player]);
        -:   78:
        -:   79:  
        2:   80:  int player2 = 1;
        -:   81:  //Check that no other players were altered.
        2:   82:  assert( expected.deckCount[player2] == actual.deckCount[player2] );
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        2:   83:  assert( expected.handCount[player2] == actual.handCount[player2] );
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   84:
        2:   85:  assert(memcmp(&actual.supplyCount, &expected.supplyCount, sizeof(expected.supplyCount)) == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        2:   86:  printf("The kingdom and treasure piles were unaffected./n");
call    0 returned 100%
        -:   87:
        2:   88:  return 0;
        -:   89:}
