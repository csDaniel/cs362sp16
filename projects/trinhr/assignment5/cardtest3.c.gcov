        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8://This is a unit test for the card Village function.
        -:    9://int villageCard(int currentPlayer, struct gameState *state, int handPos);
        -:   10:// Input:   int currentplayer -> currentplayer
        -:   11://          struct gameState *state -> data about the game
        -:   12://          int handPos -> Position of where the card is so it can be discarded later.
        -:   13://Business Rules:
        -:   14://1. It adds one card to the player's hand.
        -:   15://2. The card added has to be from the player's deck.
        -:   16://3. It gives the player 2 actions. 
        -:   17://4. Other players' states should be unchanged.
        -:   18:
function main called 2 returned 100% blocks executed 67%
        2:   19:int main () {
        -:   20:
        -:   21:  struct gameState actual, expected;
        2:   22:  int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   23:	       remodel, smithy, village, baron, great_hall};
        2:   24:  int num_players = 2;
        2:   25:  initializeGame(num_players, k, 1, &actual);
call    0 returned 100%
        -:   26:
        2:   27:  int player = 0;
        -:   28:  //Set up player's deck.
        2:   29:  actual.hand[player][0] = village;
        2:   30:  actual.hand[player][1] = gold;
        -:   31:  //+1 card from the deck -1 village card = the same.
        2:   32:  actual.handCount[player] = 2;
        -:   33:
        2:   34:  memcpy(&expected, &actual, sizeof(struct gameState));
        -:   35:
        -:   36:  //Copy the game state to the pre game state test case.
        2:   37:  assert(memcmp(&expected, &actual, sizeof(struct gameState)) == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        2:   38:  printf("The state of the actual and expected both initialized the same.\n");
call    0 returned 100%
        -:   39:
        -:   40:  //Set up expected results.
        2:   41:  expected.deckCount[player] = actual.deckCount[player] - 1;
        2:   42:  expected.numActions = 2;
        -:   43:
        2:   44:  int handpos = 0;
        -:   45:
        2:   46:  if( villageCard(player, &actual, handpos) == 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2:   47:	printf("The village card was called successfully.\n");
call    0 returned 100%
        -:   48:  }else{
    #####:   49:	printf("The village card failed to be called.i\n");
call    0 never executed
        -:   50:  }
        -:   51:
        -:   52:  //Check results.
        -:   53:  //a card was taken from the deck successfully.
        2:   54:  assert( expected.deckCount[player] == actual.deckCount[player] );
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   55:  //+ 1 card from the deck -1 village card. Hand Count should be the same.
        2:   56:  assert( expected.handCount[player] == actual.handCount[player] );
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   57:  //Check that the player has two actions left.
        2:   58:  assert( expected.numActions == actual.numActions );
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   59:  //Check that the village card is discarded.
        2:   60:  assert( actual.hand[player][0] != village );
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        2:   61:  printf("The function executed successfully for the player.\n");
call    0 returned 100%
        -:   62:
        2:   63:  int player2 = 1;
        -:   64:  //Check that no other players were not altered.
        2:   65:  assert( expected.deckCount[player2] == actual.deckCount[player2] );
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        2:   66:  assert( expected.handCount[player2] == actual.handCount[player2] );
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        2:   67:  printf("The function didn't alter other player's state.\n");
call    0 returned 100%
        -:   68:
        2:   69:  return 0;
        -:   70:
        -:   71:}
        -:   72:
