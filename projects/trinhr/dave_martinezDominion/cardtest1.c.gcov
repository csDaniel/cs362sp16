        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8://This is a unit test for the Card Smithy.
        -:    9://1. Adds 3 cards to the current player's hand.
        -:   10://2. The 3 cards have to come from the player's deck.
        -:   11://3. Other players state must be unchanged. 
        -:   12://4. No state change should occur to the victory and kingdom card piles. 
function main called 2 returned 100% blocks executed 68%
        2:   13:int main () {
        -:   14:
        2:   15:  int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   16:	       remodel, smithy, village, baron, great_hall};
        -:   17:
        -:   18:  struct gameState expected, actual;
        2:   19:  int numPlayers = 2;
        2:   20:  int seed = 500;
        2:   21:  int player = 1;  
        2:   22:  int handpos = 0;
        -:   23:
        2:   24:  initializeGame(numPlayers, k, seed, &actual);
call    0 returned 100%
        2:   25:  actual.hand[player][0] = smithy;  
        -:   26:
        -:   27:  //Copy the game state to the post game state test case.
        2:   28:  memcpy(&expected, &actual, sizeof(struct gameState));
        2:   29:  assert(memcmp(&actual, &expected, sizeof(struct gameState)) == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        2:   30:  printf("Both PRE & POST GAME STATES ARE EQUIVALENT before calling the function.\n");
call    0 returned 100%
        -:   31:
        -:   32:  //Set up the Expected Results.
        2:   33:  int discardedSmithy = 1;
        2:   34:  int newCards = 3;
        -:   35:
        2:   36:  if( smithyCard(player, &actual, handpos) == 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2:   37:	printf("The smithy card was called successfully.\n");
call    0 returned 100%
        -:   38:  }else{
    #####:   39:	printf("The smithy card failed to be called.i\n");
call    0 never executed
        -:   40:  }
        -:   41:
        -:   42:  //Set up Expected Results.
        2:   43:  expected.deckCount[player] -= newCards;
        2:   44:  expected.handCount[player] = expected.handCount[player] - discardedSmithy + newCards;
        -:   45:
        -:   46:  //smithyCard(currentplayer, &actual, handPos);  
        -:   47:  //1. +3 cards to the current player's hand. 
        2:   48:  assert( actual.deckCount[player] == expected.deckCount[player]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        2:   49:  printf("The cards were drawn from the player's own deck.\n");
call    0 returned 100%
        -:   50:
        -:   51:  //2. +3 cards -1 Discarded Smithy Card. 
        2:   52:  assert( actual.handCount[player] == expected.handCount[player]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        2:   53:  assert( actual.hand[player][handpos] != smithy );
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        2:   54:  printf("The player's hand count matched before and after the call to the function.\n");
call    0 returned 100%
        -:   55:
        2:   56:  int player2 = 1;
        -:   57:  //Check that no other players were altered.
        2:   58:  assert( expected.deckCount[player2] == actual.deckCount[player2] );
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        2:   59:  assert( expected.handCount[player2] == actual.handCount[player2] );
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   60:
        2:   61:  assert(memcmp(&actual.supplyCount, &expected.supplyCount, sizeof(expected.supplyCount)) == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        2:   62:  printf("The kingdom and treasure piles were unaffected./n");
call    0 returned 100%
        -:   63:
        2:   64:  return 0;
        -:   65:}
        -:   66:
        -:   67:
        -:   68:
