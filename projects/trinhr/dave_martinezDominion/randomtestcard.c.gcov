        -:    0:Source:randomtestcard.c
        -:    0:Graph:randomtestcard.gcno
        -:    0:Data:randomtestcard.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8:#include <math.h>
        -:    9:#include <time.h>
        -:   10://This is a unit test for the card Village function using random testing.
        -:   11://int villageCard(int currentPlayer, struct gameState *state, int handPos);
        -:   12:// Input:   int currentplayer -> currentplayer
        -:   13://          struct gameState *state -> data about the game
        -:   14://          int handPos -> Position of where the card is so it can be discarded later.
        -:   15://Business Rules:
        -:   16://1. It adds one card to the player's hand.
        -:   17://2. The card added has to be from the player's deck.
        -:   18://3. It gives the player 2 actions. 
        -:   19://4. Other players' states should be unchanged.
        -:   20:// +1 Card to the Current Player's Hand.
        -:   21:// +2 Actions to the Current Player Only.
        -:   22:// Discards the Village Card from the current player's hand. 
        -:   23:// Break the code and make sure the tests detect the problem.
        -:   24:// Ensure the card's function works with various states of the game state.
        -:   25:// Varying deck sizes and players(?) 
        -:   26:
function main called 1 returned 100% blocks executed 69%
        1:   27:int main () {
        -:   28:        //Set Random Generator.
        1:   29:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:   30: 	struct gameState pre,post;
        -:   31:
        -:   32: 	int i;
        -:   33: 	int player;
        1:   34:	int pass = 1;
        1:   35:	int passCtr = 0;
        1:   36:	int runs = 10000;
        1:   37:	int failedTests[runs];
        1:   38:	int testsCtr = 0;
        -:   39:
    10001:   40: 	for(i = 0; i < runs; i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   41:
    10000:   42:        	printf("\nRANDOM GAME %i\n:",i);
call    0 returned 100%
        -:   43:		//Set up a Random player.
    10000:   44: 		player = floor( rand() % MAX_PLAYERS);
call    0 returned 100%
    10000:   45:		printf("CURRENT PLAYER: %i\n",player);
call    0 returned 100%
        -:   46: 
        -:   47:		//Randomize the DECK, DISCARD AND HAND.
    10000:   48:		pre.deckCount[player] = floor( rand() % MAX_DECK);
call    0 returned 100%
    10000:   49:		printf("DECK COUNT: %i\n", pre.deckCount[player]);
call    0 returned 100%
    10000:   50:		pre.discardCount[player] = floor( rand() % MAX_DECK);
call    0 returned 100%
    10000:   51:		printf("DISCARDCOUNT: %i\n", pre.discardCount[player]);
call    0 returned 100%
    10000:   52:		pre.handCount[player] = floor( rand() % MAX_HAND + 1);
call    0 returned 100%
    10000:   53:		printf("HANDCOUNT: %i\n", pre.handCount[player]);
call    0 returned 100%
        -:   54:
        -:   55:		//Randomize the villager card in the player's hand.
        -:   56:		int handPos;
    10000:   57:        	int max_handpos = pre.handCount[player];
    10000:   58:		handPos = floor( rand() % max_handpos );
call    0 returned 100%
    10000:   59:        	printf("POSITION of VILLAGE CARD IN HAND: %i\n", handPos);
call    0 returned 100%
    10000:   60:		pre.hand[player][handPos] = village;
        -:   61:
        -:   62:		//Randomize the number of actions.
    10000:   63:		int maxActions = 15;
    10000:   64:		pre.numActions = floor( rand() % maxActions );
call    0 returned 100%
    10000:   65:		printf("NUMBER OF ACTIONS PRE: %i\n", pre.numActions);
call    0 returned 100%
        -:   66:
    10000:   67: 		memcpy( &post, &pre, sizeof(struct gameState));
        -:   68:
        -:   69:		//Call the function.
    10000:   70:		printf("Calling the function.\n");
call    0 returned 100%
        -:   71:
        -:   72:		//Save the state of the game.
        -:   73:		int returnVal;
    10000:   74:		returnVal = villageCard(player, &post, handPos);
call    0 returned 100%
        -:   75:
        -:   76:		//Oracle Code: Check that it works.
        -:   77:		//Check that the number of actions increased by 2.
    10000:   78:		if( pre.numActions + 2 ==  post.numActions ){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    10000:   79:			printf("The player correctly gains +2 actions.\n");
call    0 returned 100%
        -:   80:		}else{
    #####:   81:			printf("ERROR: PRE-ACTIONS:%i POST-ACTIONS:%i\n", pre.numActions, post.numActions);
call    0 never executed
    #####:   82:			pass = 0;
        -:   83:		}
        -:   84:
        -:   85:		//Check that a card was drawn drom the deck.
        -:   86:		//Deck should be decremented by one.
    10000:   87:		if( pre.deckCount[player] == 0 ){
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       17:   88:			if( post.deckCount[player] + 1 == pre.discardCount[player] ){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:   89:				
        -:   90:			}else{
    #####:   91:				printf("ERROR: PRE-DISCARD COUNT: %i POST-DECKCOUNT:%i  \n", pre.discardCount[player], post.deckCount[player]); 
call    0 never executed
    #####:   92:				pass = 0;
        -:   93:			}
        -:   94:
        -:   95:		}else{
     9983:   96:			if( pre.deckCount[player] -1  == post.deckCount[player] ){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     9983:   97:				printf("The card was successfully drawn from the player's deck.\n");
call    0 returned 100%
        -:   98:			}else{
    #####:   99:				printf("ERROR: PRE-DECKCOUNT: %i POST-DECKCOUNT:%i\n", pre.deckCount[player], post.deckCount[player]);
call    0 never executed
    #####:  100:				pass = 0;
        -:  101:			}
        -:  102:		}
        -:  103:
        -:  104:		//Hand Size shouldn't change. +1 New card -1Village.
    10000:  105:		if( pre.handCount[player] != post.handCount[player] ){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  106:			printf("Either the village card was not discarded or a new card was not successfully added to the hand.\n");
call    0 never executed
    #####:  107:			pass = 0;
        -:  108:		}
        -:  109:	
        -:  110:		//Check that the Village card is no longer in that position.
    10000:  111:		if( post.hand[player][handPos] != village ){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    10000:  112:			printf("The village card used is successfully not in the hand.\n");
call    0 returned 100%
        -:  113:		}else{
    #####:  114:			printf("The village card used is still in the hand.\n");
call    0 never executed
    #####:  115:			pass = 0;
        -:  116:		}
        -:  117:	
        -:  118:		//Check that the game had no issues.
    10000:  119:		if(  returnVal != 0 ){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  120:			printf("ERROR:CALLED FN RETURNED AN ERROR.\n");
call    0 never executed
    #####:  121:			pass = 0;
        -:  122:		}
        -:  123:	
        -:  124:		//Check that no other game state has been altered.
        -:  125:		//Set the changed variables to be equal to each other.
    10000:  126:		post.numActions = pre.numActions;
    10000:  127:		post.deckCount[player] = pre.deckCount[player];
    10000:  128:		pre.handCount[player] = post.handCount[player];
    10000:  129:		post.hand[player][handPos] = village; 
        -:  130:
    10000:  131:		if( memcmp(&pre, &post, sizeof(struct gameState)) == 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  132:			printf("ERROR: GAME STATE VARIABLES WERE CHANGED THAT SHOULDN't HAVE.\n");
call    0 never executed
    #####:  133:			pass = 0;
        -:  134:		}
        -:  135:	
        -:  136:		//CHECK IF ALL TESTS PASSED.
    10000:  137:		if( pass == 1 ){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
    10000:  138:			printf("ALL TESTS PASSED.\n");
call    0 returned 100%
    10000:  139:			passCtr++;
        -:  140:		}else{
    #####:  141:			printf("ERROR: TEST(S) FAILED.\n");
call    0 never executed
    #####:  142:			failedTests[testsCtr] = i;
    #####:  143:			testsCtr++;		
        -:  144:		}
        -:  145:		//RESET THE PASS BOOLEAN.
    10000:  146:		pass = 1;	
        -:  147:
        -:  148:  	}
        -:  149:
        1:  150:	printf("%i passed out of  %i RUNS\n\n\n", passCtr, runs );
call    0 returned 100%
        -:  151:	int k;
        1:  152:	for( k = 0; k < testsCtr; k++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  153:		printf("FAILED: RUN %i", failedTests[k]);
call    0 never executed
        -:  154:	}
        -:  155:	
        1:  156:	return 0;
        -:  157: 
        -:  158:} 
        -:  159:
