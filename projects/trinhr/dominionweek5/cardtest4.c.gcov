        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <stdlib.h>
        -:    8://This is a unit test for the card cutPurse function.
        -:    9://Business Rules:
        -:   10://1. The Player gets 2 coins.
        -:   11://2. Other players have to discard a copper if they heve one.
        -:   12://3. If the other players don't have a copper they show their hand.
        -:   13://4. No other state change should occur.
        -:   14://
        -:   15:int cutPurseCard(int currentPlayer, struct gameState *state, int handPos);
        -:   16:
function main called 2 returned 100% blocks executed 71%
        2:   17:int main () {
        -:   18:
        2:   19:  int k[10] = {adventurer, council_room, feast, gardens, mine,
        -:   20:	       remodel, smithy, village, baron, great_hall};
        -:   21:
        -:   22:  struct gameState expected, actual;
        2:   23:  int numPlayers = 2;
        2:   24:  int seed = 500;
        2:   25:  int player = 0;  
        2:   26:  int handpos = 0;
        -:   27:
        2:   28:  initializeGame(numPlayers, k, seed, &actual);
call    0 returned 100%
        -:   29:
        -:   30:  //Case for when the other player has a copper.
        2:   31:  int player2 = 1;
        -:   32:  //Set up player decks.
        2:   33:  actual.discardCount[player] = 0;
        2:   34:  actual.handCount[player] = 1;
        2:   35:  actual.hand[player][0] = cutpurse;
        2:   36:  actual.hand[player2][0] = village;
        2:   37:  actual.hand[player2][1] = copper;
        2:   38:  actual.handCount[player2] = 2;
        2:   39:  actual.coins = 0;
        -:   40:  
        -:   41:
        -:   42:  //Copy the game state to the post game state test case.
        2:   43:  memcpy(&expected, &actual, sizeof(struct gameState));
        2:   44:  assert(memcmp(&actual, &expected, sizeof(struct gameState)) == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        2:   45:  printf("Both PRE & POST GAME STATES ARE EQUIVALENT before calling the function.\n");
call    0 returned 100%
        -:   46: 
        -:   47: //Set up Expected Results for current Player after Playing the Card.
        2:   48:  expected.coins = actual.coins + 2;
        2:   49:  expected.handCount[player] -= 1;
        2:   50:  expected.discardCount[player] = actual.discardCount[player];
        2:   51:  expected.handCount[player2] = actual.handCount[player2] - 1;  
        2:   52:  expected.discardCount[player2] = actual.discardCount[player2] + 1;
        -:   53:
        2:   54:  if( cutPurseCard(player, &actual, handpos) == 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2:   55:	printf("The cutPurse card was called successfully.\n");
call    0 returned 100%
        -:   56:  }else{
    #####:   57:	printf("The cutPurse card failed to be called.i\n");
call    0 never executed
        -:   58:  }
        -:   59:
        -:   60:  //Set up exptected results for other player.
        -:   61://  expected.handCount[player2] -= 1;
        -:   62: // expected.discardCount[player2] += 1;
        -:   63:  
        -:   64:  //1.Current Player Gains 2 coins.
        -:   65:  //2.No other state change for the player.
        2:   66:  printf("EXPECTED COINS: %i, ACTUAL: %i\n", expected.coins, actual.coins);
call    0 returned 100%
        2:   67:  assert( expected.coins == actual.coins );
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        2:   68:  printf("EXPECTED HAND COUNT: %i ACTUAL HAND COUNT: %i for CURRENT PLAYER.\n", expected.handCount[player], actual.handCount[player]);
call    0 returned 100%
        2:   69:  assert( expected.handCount[player] == actual.handCount[player] );
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   70:  
        -:   71:  //Check that other players lose a copper.
        2:   72:  assert( actual.hand[player2][1] != copper );
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        2:   73:  assert( actual.handCount[player2] == expected.handCount[player2]);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        2:   74:  printf("EXPECTED HAND COUNT: %i ACTUAL HAND COUNT: %i for CURRENT PLAYER.\n", expected.handCount[player2], actual.handCount[player2]);
call    0 returned 100%
        2:   75:  assert(memcmp(&actual.supplyCount, &expected.supplyCount, sizeof(expected.supplyCount)) == 0);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        2:   76:  printf("The kingdom and treasure piles were unaffected.\n");
call    0 returned 100%
        -:   77: 
        2:   78:  return 0;
        -:   79: 
        -:   80:}				
        -:   81:
        -:   82:
        -:   83:
        -:   84:
