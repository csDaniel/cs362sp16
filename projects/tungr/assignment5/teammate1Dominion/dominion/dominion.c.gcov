        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 4997 returned 100% blocks executed 100%
     4997:    8:int compare(const void* a, const void* b) {
     4997:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
     1408:   10:    return 1;
     3589:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 54% (fallthrough)
branch  1 taken 46%
     1934:   12:    return -1;
     1655:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 2 returned 100% blocks executed 100%
        2:   16:struct gameState* newGame() {
        2:   17:  struct gameState* g = malloc(sizeof(struct gameState));
        2:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 20 returned 100% blocks executed 89%
       20:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       20:   44:  SelectStream(1);
call    0 returned 100%
       20:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       20:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       20:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      220:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     2200:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     2000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       20:   73:  if (numPlayers == 2)
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
        -:   74:    {
        6:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       14:   77:  else if (numPlayers == 3)
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
        -:   78:    {
        4:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
       10:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       20:   87:  if (numPlayers == 2)
branch  0 taken 30% (fallthrough)
branch  1 taken 70%
        -:   88:    {
        6:   89:      state->supplyCount[estate] = 8;
        6:   90:      state->supplyCount[duchy] = 8;
        6:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       14:   95:      state->supplyCount[estate] = 12;
       14:   96:      state->supplyCount[duchy] = 12;
       14:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       20:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       20:  102:  state->supplyCount[silver] = 40;
       20:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      420:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     3300:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     3100:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      200:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      200:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      200:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     2900:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       84:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  139:    {
       64:  140:      state->deckCount[i] = 0;
      256:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
      192:  143:	  state->deck[i][j] = estate;
      192:  144:	  state->deckCount[i]++;
        -:  145:	}
      512:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      448:  148:	  state->deck[i][j] = copper;
      448:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       84:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  155:    {
       64:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       84:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 76%
branch  1 taken 24% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       64:  166:      state->handCount[i] = 0;
       64:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      560:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      540:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       20:  182:  state->outpostPlayed = 0;
       20:  183:  state->phase = 0;
       20:  184:  state->numActions = 1;
       20:  185:  state->numBuys = 1;
       20:  186:  state->playedCardCount = 0;
       20:  187:  state->whoseTurn = 0;
       20:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      120:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      100:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       20:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       20:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 171 returned 100% blocks executed 100%
      171:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      171:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      171:  209:  if (state->deckCount[player] < 1)
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
       83:  210:    return -1;
       88:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     1505:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
     1329:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     1329:  216:    newDeck[newDeckPos] = state->deck[player][card];
     1329:  217:    newDeckPos++;
     9024:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 85%
branch  1 taken 15% (fallthrough)
     7695:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     1329:  221:    state->deckCount[player]--;
        -:  222:  }
     1348:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
     1260:  224:    state->deck[player][i] = newDeck[i];
     1260:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       88:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
    #####:  233:  int card;
        -:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
    #####:  236:  //check if it is the right phase
branch  0 never executed
branch  1 never executed
        -:  237:  if (state->phase != 0)
    #####:  238:    {
        -:  239:      return -1;
        -:  240:    }
        -:  241:	
    #####:  242:  //check if player has enough actions
branch  0 never executed
branch  1 never executed
        -:  243:  if ( state->numActions < 1 )
    #####:  244:    {
        -:  245:      return -1;
        -:  246:    }
        -:  247:	
    #####:  248:  //get card played
call    0 never executed
        -:  249:  card = handCard(handPos, state);
        -:  250:	
    #####:  251:  //check if selected card is an action
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  252:  if ( card < adventurer || card > treasure_map )
    #####:  253:    {
        -:  254:      return -1;
        -:  255:    }
        -:  256:	
    #####:  257:  //play card
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    #####:  259:    {
        -:  260:      return -1;
        -:  261:    }
        -:  262:	
    #####:  263:  //reduce number of actions
        -:  264:  state->numActions--;
        -:  265:
    #####:  266:  //update coins (Treasure cards may be added with card draws)
call    0 never executed
        -:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
    #####:  268:	
        -:  269:  return 0;
        -:  270:}
function buyCard called 0 returned 0% blocks executed 0%
    #####:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
    #####:  279:
        -:  280:  who = state->whoseTurn;
    #####:  281:
branch  0 never executed
branch  1 never executed
        -:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
    #####:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
    #####:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
    #####:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        -:  293:    return -1;
    #####:  294:  } else {
        -:  295:    state->phase=1;
    #####:  296:    //state->supplyCount[supplyPos]--;
call    0 never executed
        -:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
    #####:  298:  
call    0 never executed
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
        -:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
    #####:  307:    
        -:  308:  return 0;
        -:  309:}
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  310:
    #####:  311:int numHandCards(struct gameState *state) {
call    0 never executed
        -:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
function handCard called 0 returned 0% blocks executed 0%
    #####:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
call    0 never executed
    #####:  316:  int currentPlayer = whoseTurn(state);
        -:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
        -:  321:  return state->supplyCount[card];
        -:  322:}
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
    #####:  325:  int i;
        -:  326:  int count = 0;
    #####:  327:
branch  0 never executed
branch  1 never executed
        -:  328:  for (i = 0; i < state->deckCount[player]; i++)
    #####:  329:    {
branch  0 never executed
branch  1 never executed
        -:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
    #####:  332:
branch  0 never executed
branch  1 never executed
        -:  333:  for (i = 0; i < state->handCount[player]; i++)
    #####:  334:    {
branch  0 never executed
branch  1 never executed
        -:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
    #####:  337:
branch  0 never executed
branch  1 never executed
        -:  338:  for (i = 0; i < state->discardCount[player]; i++)
    #####:  339:    {
branch  0 never executed
branch  1 never executed
        -:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
    #####:  342:
        -:  343:  return count;
        -:  344:}
function whoseTurn called 158 returned 100% blocks executed 100%
      158:  345:
      158:  346:int whoseTurn(struct gameState *state) {
        -:  347:  return state->whoseTurn;
        -:  348:}
function endTurn called 0 returned 0% blocks executed 0%
    #####:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
    #####:  352:  int i;
call    0 never executed
        -:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
    #####:  355:  //Discard hand
branch  0 never executed
branch  1 never executed
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
        -:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  359:  }
        -:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
    #####:  362:  //Code for determining the player
branch  0 never executed
branch  1 never executed
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
        -:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
    #####:  366:  else{
        -:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
    #####:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
        -:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
    #####:  379:  //Next player draws hand
branch  0 never executed
branch  1 never executed
    #####:  380:  for (k = 0; k < 5; k++){
call    0 never executed
        -:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
    #####:  384:  //Update money
call    0 never executed
        -:  385:  updateCoins(state->whoseTurn, state , 0);
    #####:  386:
        -:  387:  return 0;
        -:  388:}
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
    #####:  394:  //if stack of Province cards is empty, the game ends
branch  0 never executed
branch  1 never executed
        -:  395:  if (state->supplyCount[province] == 0)
    #####:  396:    {
        -:  397:      return 1;
        -:  398:    }
        -:  399:
    #####:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
branch  0 never executed
branch  1 never executed
        -:  402:  for (i = 0; i < 25; i++)
    #####:  403:    {
branch  0 never executed
branch  1 never executed
        -:  404:      if (state->supplyCount[i] == 0)
    #####:  405:	{
        -:  406:	  j++;
        -:  407:	}
    #####:  408:    }
branch  0 never executed
branch  1 never executed
        -:  409:  if ( j >= 3)
    #####:  410:    {
        -:  411:      return 1;
        -:  412:    }
    #####:  413:
        -:  414:  return 0;
        -:  415:}
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
    #####:  419:  int i;
        -:  420:  int score = 0;
    #####:  421:  //score from hand
branch  0 never executed
branch  1 never executed
        -:  422:  for (i = 0; i < state->handCount[player]; i++)
    #####:  423:    {
branch  0 never executed
branch  1 never executed
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
    #####:  432:  //score from discard
branch  0 never executed
branch  1 never executed
        -:  433:  for (i = 0; i < state->discardCount[player]; i++)
    #####:  434:    {
branch  0 never executed
branch  1 never executed
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
    #####:  443:  //score from deck
branch  0 never executed
branch  1 never executed
        -:  444:  for (i = 0; i < state->discardCount[player]; i++)
    #####:  445:    {
branch  0 never executed
branch  1 never executed
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
    #####:  453:
        -:  454:  return score;
        -:  455:}
function getWinners called 0 returned 0% blocks executed 0%
    #####:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
    #####:  463:  //get score for each player
branch  0 never executed
branch  1 never executed
        -:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
    #####:  466:      //set unused player scores to -9999
branch  0 never executed
branch  1 never executed
        -:  467:      if (i >= state->numPlayers)
    #####:  468:	{
        -:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
    #####:  472:	{
call    0 never executed
        -:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
    #####:  477:  //find highest score
    #####:  478:  j = 0;
branch  0 never executed
branch  1 never executed
        -:  479:  for (i = 0; i < MAX_PLAYERS; i++)
    #####:  480:    {
branch  0 never executed
branch  1 never executed
        -:  481:      if (players[i] > players[j])
    #####:  482:	{
        -:  483:	  j = i;
        -:  484:	}
    #####:  485:    }
        -:  486:  highScore = players[j];
        -:  487:
    #####:  488:  //add 1 to players who had less turns
call    0 never executed
    #####:  489:  currentPlayer = whoseTurn(state);
branch  0 never executed
branch  1 never executed
        -:  490:  for (i = 0; i < MAX_PLAYERS; i++)
    #####:  491:    {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  492:      if ( players[i] == highScore && i > currentPlayer )
    #####:  493:	{
        -:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
    #####:  498:  //find new highest score
    #####:  499:  j = 0;
branch  0 never executed
branch  1 never executed
        -:  500:  for (i = 0; i < MAX_PLAYERS; i++)
    #####:  501:    {
branch  0 never executed
branch  1 never executed
        -:  502:      if ( players[i] > players[j] )
    #####:  503:	{
        -:  504:	  j = i;
        -:  505:	}
    #####:  506:    }
        -:  507:  highScore = players[j];
        -:  508:
    #####:  509:  //set winners in array to 1 and rest to 0
branch  0 never executed
branch  1 never executed
        -:  510:  for (i = 0; i < MAX_PLAYERS; i++)
    #####:  511:    {
branch  0 never executed
branch  1 never executed
        -:  512:      if ( players[i] == highScore )
    #####:  513:	{
        -:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
    #####:  517:	{
        -:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
    #####:  521:
        -:  522:  return 0;
        -:  523:}
function drawCard called 760 returned 100% blocks executed 100%
      760:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
      760:  527:  int deckCounter;
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
        -:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
      749:  532:    //Move discard to deck
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
      689:  533:    for (i = 0; i < state->discardCount[player];i++){
      689:  534:      state->deck[player][i] = state->discard[player][i];
        -:  535:      state->discard[player][i] = -1;
        -:  536:    }
       60:  537:
       60:  538:    state->deckCount[player] = state->discardCount[player];
        -:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
       60:  541:    //Shufffle the deck
call    0 returned 100%
        -:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
       60:  547:    
        -:  548:    state->discardCount[player] = 0;
        -:  549:
       60:  550:    //Step 2 Draw Card
        -:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
       60:  556:    
        -:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
       60:  558:
branch  0 taken 60% (fallthrough)
branch  1 taken 40%
       36:  559:    if (deckCounter == 0)
        -:  560:      return -1;
       24:  561:
       24:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       24:  563:    state->deckCount[player]--;
        -:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
      700:  567:  else{
        -:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
      700:  573:
      700:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      700:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      700:  576:    state->deckCount[player]--;
        -:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
      724:  579:
        -:  580:  return 0;
        -:  581:}
function getCost called 0 returned 0% blocks executed 0%
    #####:  582:
    #####:  583:int getCost(int cardNumber)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  584:{
        -:  585:  switch( cardNumber ) 
    #####:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
        -:  640:      return 4;
    #####:  641:    }
        -:  642:	
        -:  643:  return -1;
function cardEffect called 64 returned 100% blocks executed 5%
       64:  644:}
        -:  645:
        -:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
       64:  651:  int x;
call    0 returned 100%
       64:  652:  int index;
       64:  653:  int currentPlayer = whoseTurn(state);
        -:  654:  int nextPlayer = currentPlayer + 1;
       64:  655:
        -:  656:  int tributeRevealedCards[2] = {-1, -1};
       64:  657:  int temphand[MAX_HAND];// moved above the if statement
        -:  658:  int drawntreasure=0;
       64:  659:  int cardDrawn;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  660:  int z = 0;// this is the counter for the temp hand
        -:  661:  if (nextPlayer > (state->numPlayers - 1)){
        -:  662:    nextPlayer = 0;
        -:  663:  }
       64:  664:  
branch  0 taken 47%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 53%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  665:	
       30:  666:  //uses switch to select card and perform actions
call    0 returned 100%
        -:  667:  switch( card ) 
        -:  668:    {
       30:  669:    case adventurer:
call    0 returned 100%
       30:  670:		playAdventurer(state);
        -:  671:      /*while(drawntreasure<2){
    #####:  672:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
call    0 never executed
    #####:  673:	  shuffle(currentPlayer, state);
        -:  674:	}
        -:  675:	drawCard(currentPlayer, state);
    #####:  676:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  677:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  678:	  drawntreasure++;
    #####:  679:	else{
    #####:  680:	  temphand[z]=cardDrawn;
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  681:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  682:	  z++;
    #####:  683:	}
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  684:      }
        -:  685:      while(z-1>=0){
    #####:  686:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  687:	z=z-1;
        -:  688:      }
    #####:  689:      return 0;*/
call    0 never executed
        -:  690:			
        -:  691:    case council_room:
    #####:  692:	playCouncil_Room(state);
call    0 never executed
        -:  693:      //+4 Cards
        -:  694:     /* for (i = 0; i < 4; i++)
    #####:  695:	{
branch  0 never executed
branch  1 never executed
    #####:  696:	  drawCard(currentPlayer, state);
branch  0 never executed
branch  1 never executed
    #####:  697:	}
call    0 never executed
    #####:  698:			
        -:  699:      //+1 Buy
        -:  700:      state->numBuys++;
    #####:  701:			
        -:  702:      //Each other player draws a card
        -:  703:      for (i = 0; i < state->numPlayers; i++)
    #####:  704:	{
        -:  705:	  if ( i != currentPlayer )
    #####:  706:	    {
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  707:	      drawCard(i, state);
        -:  708:	    }
    #####:  709:	}
call    0 never executed
        -:  710:			
    #####:  711:      //put played card in played card pile
call    0 never executed
        -:  712:      */
    #####:  713:      discardCard(handPos, currentPlayer, state, 0);
branch  0 never executed
branch  1 never executed
    #####:  714:      return 0;
branch  0 never executed
branch  1 never executed
    #####:  715:			
call    0 never executed
    #####:  716:    case feast:
        -:  717:      //gain card with cost up to 5
        -:  718:      //Backup hand
    #####:  719:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -:  720:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  721:	state->hand[currentPlayer][i] = -1;//Set to nothing
call    0 never executed
        -:  722:      }
        -:  723:      //Backup hand
       34:  724:
call    0 returned 100%
       34:  725:      //Update Coins for Buy
        -:  726:      updateCoins(currentPlayer, state, 5);
        -:  727:      x = 1;//Condition to loop on
    #####:  728:      while( x == 1) {//Buy one card
    #####:  729:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
    #####:  730:	  if (DEBUG)
    #####:  731:	    printf("None of that card left, sorry!\n");
    #####:  732:
branch  0 never executed
branch  1 never executed
    #####:  733:	  if (DEBUG){
branch  0 never executed
branch  1 never executed
    #####:  734:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
    #####:  735:	  }
    #####:  736:	}
    #####:  737:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  738:	  printf("That card is too expensive!\n");
        -:  739:
    #####:  740:	  if (DEBUG){
    #####:  741:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
    #####:  742:	  }
        -:  743:	}
    #####:  744:	else{
branch  0 never executed
branch  1 never executed
        -:  745:
        -:  746:	  if (DEBUG){
        -:  747:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  748:	  }
    #####:  749:
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  750:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  751:	  x = 0;//No more buying cards
    #####:  752:
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  753:	  if (DEBUG){
call    0 never executed
        -:  754:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  755:	  }
    #####:  756:
        -:  757:	}
        -:  758:      }     
    #####:  759:
        -:  760:      //Reset Hand
        -:  761:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -:  762:	state->hand[currentPlayer][i] = temphand[i];
        -:  763:	temphand[i] = -1;
    #####:  764:      }
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  765:      //Reset Hand
call    0 never executed
    #####:  766:      			
    #####:  767:      return 0;
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  768:			
call    0 never executed
        -:  769:    case gardens:
        -:  770:      return -1;
        -:  771:			
    #####:  772:    case mine:
        -:  773:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  774:
        -:  775:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
    #####:  776:	{
call    0 never executed
        -:  777:	  return -1;
        -:  778:	}
    #####:  779:		
        -:  780:      if (choice2 > treasure_map || choice2 < curse)
        -:  781:	{
    #####:  782:	  return -1;
call    0 never executed
    #####:  783:	}
        -:  784:
        -:  785:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  786:	{
    #####:  787:	  return -1;
        -:  788:	}
    #####:  789:
call    0 never executed
        -:  790:      gainCard(choice2, state, 2, currentPlayer);
    #####:  791:
branch  0 never executed
branch  1 never executed
    #####:  792:      //discard card from hand
        -:  793:      discardCard(handPos, currentPlayer, state, 0);
    #####:  794:
branch  0 never executed
branch  1 never executed
        -:  795:      //discard trashed card
    #####:  796:      for (i = 0; i < state->handCount[currentPlayer]; i++)
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  797:	{
call    0 never executed
        -:  798:	  if (state->hand[currentPlayer][i] == j)
        -:  799:	    {
    #####:  800:	      discardCard(i, currentPlayer, state, 0);			
branch  0 never executed
branch  1 never executed
    #####:  801:	      break;
call    0 never executed
        -:  802:	    }
        -:  803:	}
    #####:  804:			
branch  0 never executed
branch  1 never executed
    #####:  805:      return 0;
branch  0 never executed
branch  1 never executed
    #####:  806:			
branch  0 never executed
branch  1 never executed
        -:  807:    case remodel:
    #####:  808:		playRemodel(state, handPos, currentPlayer, choice1, choice2);
branch  0 never executed
branch  1 never executed
    #####:  809:    /*  j = state->hand[currentPlayer][choice1];  //store card we will trash
call    0 never executed
        -:  810:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  811:	{
    #####:  812:	  return -1;
branch  0 never executed
branch  1 never executed
    #####:  813:	}
call    0 never executed
        -:  814:      gainCard(choice2, state, 0, currentPlayer);
        -:  815:      //discard card from hand
        -:  816:      discardCard(handPos, currentPlayer, state, 0);
        -:  817:      //discard trashed card
        -:  818:      for (i = 0; i < state->handCount[currentPlayer]; i++)
    #####:  819:	{
        -:  820:	  if (state->hand[currentPlayer][i] == j)
        -:  821:	    {
        -:  822:	      discardCard(i, currentPlayer, state, 0);			
    #####:  823:	      break;
branch  0 never executed
branch  1 never executed
        -:  824:	    }
    #####:  825:	}
call    0 never executed
    #####:  826:      return 0;
call    0 never executed
        -:  827:	*/
    #####:  828:	
branch  0 never executed
branch  1 never executed
        -:  829:    case smithy:
    #####:  830:      //+3 Cards
        -:  831:	  playSmithy(state, handPos, currentPlayer);
        -:  832:     /* for (i = 0; i < 3; i++)
        -:  833:	{
    #####:  834:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  835:	}
call    0 never executed
        -:  836:			
        -:  837:      //discard card from hand
    #####:  838:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  839:      return 0;*/
        -:  840:		
        -:  841:    case village:
        -:  842:		playVillage(state, handPos, currentPlayer);
    #####:  843:      //+1 Card
branch  0 never executed
branch  1 never executed
    #####:  844:     /* drawCard(currentPlayer, state);
branch  0 never executed
branch  1 never executed
    #####:  845:			
    #####:  846:      //+2 Actions
        -:  847:      state->numActions = state->numActions + 2;
    #####:  848:			
branch  0 never executed
branch  1 never executed
    #####:  849:      //discard played card from hand
    #####:  850:      discardCard(handPos, currentPlayer, state, 0);
        -:  851:      return 0;*/
        -:  852:		
        -:  853:    case baron:
        -:  854:      state->numBuys++;//Increase buys by 1!
        -:  855:      if (choice1 > 0){//Boolean true or going to discard an estate
        -:  856:	int p = 0;//Iterator for hand!
        -:  857:	int card_not_discarded = 1;//Flag for discard set!
        -:  858:	while(card_not_discarded){
        -:  859:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  860:	    state->coins += 4;//Add 4 coins to the amount of coins
branch  0 never executed
branch  1 never executed
    #####:  861:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
branch  0 never executed
branch  1 never executed
    #####:  862:	    state->discardCount[currentPlayer]++;
    #####:  863:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  864:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  865:	    }
        -:  866:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  867:	    state->handCount[currentPlayer]--;
call    0 never executed
        -:  868:	    card_not_discarded = 0;//Exit the loop
    #####:  869:	  }
    #####:  870:	  else if (p > state->handCount[currentPlayer]){
    #####:  871:	    if(DEBUG) {
    #####:  872:	      printf("No estate cards in your hand, invalid choice\n");
    #####:  873:	      printf("Must gain an estate if there are any\n");
    #####:  874:	    }
        -:  875:	    if (supplyCount(estate, state) > 0){
    #####:  876:	      gainCard(estate, state, 0, currentPlayer);
branch  0 never executed
branch  1 never executed
    #####:  877:	      state->supplyCount[estate]--;//Decrement estates
    #####:  878:	      if (supplyCount(estate, state) == 0){
    #####:  879:		isGameOver(state);
        -:  880:	      }
    #####:  881:	    }
branch  0 never executed
branch  1 never executed
    #####:  882:	    card_not_discarded = 0;//Exit the loop
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  883:	  }
        -:  884:			    
    #####:  885:	  else{
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  886:	    p++;//Next card
call    0 never executed
    #####:  887:	  }
call    0 never executed
        -:  888:	}
        -:  889:      }
    #####:  890:			    
        -:  891:      else{
        -:  892:	if (supplyCount(estate, state) > 0){
    #####:  893:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        -:  894:	  state->supplyCount[estate]--;//Decrement Estates
        -:  895:	  if (supplyCount(estate, state) == 0){
        -:  896:	    isGameOver(state);
    #####:  897:	  }
    #####:  898:	}
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  899:      }
        -:  900:	    
    #####:  901:      
branch  0 never executed
branch  1 never executed
    #####:  902:      return 0;
        -:  903:		
    #####:  904:    case great_hall:
branch  0 never executed
branch  1 never executed
    #####:  905:      //+1 Card
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  906:      drawCard(currentPlayer, state);
        -:  907:			
        -:  908:      //+1 Actions
    #####:  909:      state->numActions++;
branch  0 never executed
branch  1 never executed
    #####:  910:			
        -:  911:      //discard card from hand
        -:  912:      discardCard(handPos, currentPlayer, state, 0);
        -:  913:      return 0;
        -:  914:		
        -:  915:    case minion:
    #####:  916:      //+1 action
        -:  917:      state->numActions++;
    #####:  918:			
branch  0 never executed
branch  1 never executed
    #####:  919:      //discard card from hand
branch  0 never executed
branch  1 never executed
    #####:  920:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  921:			
        -:  922:      if (choice1)		//+2 coins
        -:  923:	{
    #####:  924:	  state->coins = state->coins + 2;
call    0 never executed
        -:  925:	}
        -:  926:			
    #####:  927:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
    #####:  928:	{
branch  0 never executed
branch  1 never executed
    #####:  929:	  //discard hand
branch  0 never executed
branch  1 never executed
    #####:  930:	  while(numHandCards(state) > 0)
call    0 never executed
    #####:  931:	    {
        -:  932:	      discardCard(handPos, currentPlayer, state, 0);
        -:  933:	    }
        -:  934:				
    #####:  935:	  //draw 4
        -:  936:	  for (i = 0; i < 4; i++)
        -:  937:	    {
        -:  938:	      drawCard(currentPlayer, state);
    #####:  939:	    }
call    0 never executed
    #####:  940:				
branch  0 never executed
branch  1 never executed
    #####:  941:	  //other players discard hand and redraw if hand size > 4
branch  0 never executed
branch  1 never executed
    #####:  942:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
    #####:  943:	    {
branch  0 never executed
branch  1 never executed
    #####:  944:	      if (i != currentPlayer)
call    0 never executed
    #####:  945:		{
        -:  946:		  if ( state->handCount[i] > 4 )
    #####:  947:		    {
branch  0 never executed
branch  1 never executed
    #####:  948:		      //discard hand
branch  0 never executed
branch  1 never executed
        -:  949:		      while( state->handCount[i] > 0 )
        -:  950:			{
        -:  951:			  discardCard(handPos, i, state, 0);
        -:  952:			}
    #####:  953:							
        -:  954:		      //draw 4
        -:  955:		      for (j = 0; j < 4; j++)
        -:  956:			{
        -:  957:			  drawCard(i, state);
        -:  958:			}
    #####:  959:		    }
call    0 never executed
    #####:  960:		}
        -:  961:	    }
        -:  962:				
        -:  963:	}
        -:  964:      return 0;
    #####:  965:		
        -:  966:    case steward:
    #####:  967:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
    #####:  968:	{
        -:  969:	  //+2 cards
        -:  970:	  drawCard(currentPlayer, state);
    #####:  971:	  drawCard(currentPlayer, state);
        -:  972:	}
    #####:  973:      else if (choice1 == 2)
call    0 never executed
    #####:  974:	{
        -:  975:	  //+2 coins
        -:  976:	  state->coins = state->coins + 2;
        -:  977:	}
        -:  978:      else
    #####:  979:	{
        -:  980:	  //trash 2 cards in hand
    #####:  981:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  982:	  discardCard(choice3, currentPlayer, state, 1);
        -:  983:	}
        -:  984:			
        -:  985:      //discard card from hand
        -:  986:      discardCard(handPos, currentPlayer, state, 0);
    #####:  987:      return 0;
    #####:  988:		
branch  0 never executed
branch  1 never executed
        -:  989:    case tribute:
    #####:  990:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
call    0 never executed
call    1 never executed
        -:  991:	if (state->deckCount[nextPlayer] > 0){
    #####:  992:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
call    0 never executed
        -:  993:	  state->deckCount[nextPlayer]--;
        -:  994:	}
        -:  995:	else if (state->discardCount[nextPlayer] > 0){
    #####:  996:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
call    0 never executed
    #####:  997:	  state->discardCount[nextPlayer]--;
        -:  998:	}
        -:  999:	else{
        -: 1000:	  //No Card to Reveal
    #####: 1001:	  if (DEBUG){
branch  0 never executed
branch  1 never executed
    #####: 1002:	    printf("No cards to reveal\n");
branch  0 never executed
branch  1 never executed
    #####: 1003:	  }
    #####: 1004:	}
    #####: 1005:      }
    #####: 1006:	    
        -: 1007:      else{
        -: 1008:	if (state->deckCount[nextPlayer] == 0){
    #####: 1009:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
        -: 1010:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
        -: 1011:	    state->deckCount[nextPlayer]++;
        -: 1012:	    state->discard[nextPlayer][i] = -1;
        -: 1013:	    state->discardCount[nextPlayer]--;
    #####: 1014:	  }
    #####: 1015:			    
branch  0 never executed
branch  1 never executed
    #####: 1016:	  shuffle(nextPlayer,state);//Shuffle the deck
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1017:	} 
    #####: 1018:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1019:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -: 1020:	state->deckCount[nextPlayer]--;
    #####: 1021:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
branch  0 never executed
branch  1 never executed
        -: 1022:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1023:	state->deckCount[nextPlayer]--;
call    0 never executed
    #####: 1024:      }    
call    0 never executed
        -: 1025:		       
        -: 1026:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1027:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
branch  0 never executed
branch  1 never executed
    #####: 1028:	state->playedCardCount++;
call    0 never executed
        -: 1029:	tributeRevealedCards[1] = -1;
        -: 1030:      }
    #####: 1031:
        -: 1032:      for (i = 0; i <= 2; i ++){
        -: 1033:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1034:	  state->coins += 2;
        -: 1035:	}
        -: 1036:		    
       30: 1037:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
        -: 1038:	  drawCard(currentPlayer, state);
        -: 1039:	  drawCard(currentPlayer, state);
function playAdventurer called 30 returned 100% blocks executed 100%
       30: 1040:	}
        -: 1041:	else{//Action Card
       30: 1042:	  state->numActions = state->numActions + 2;
call    0 returned 100%
        -: 1043:	}
       30: 1044:      }
        -: 1045:	    
       30: 1046:      return 0;
      536: 1047:		
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
      476: 1048:    case ambassador:
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
       47: 1049:      j = 0;		//used to check if player has enough cards to discard
call    0 returned 100%
        -: 1050:
      476: 1051:      if (choice2 > 2 || choice2 < 0)
call    0 returned 100%
      476: 1052:	{
      476: 1053:	  return -1;				
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 96% (fallthrough)
branch  3 taken 4%
branch  4 taken 5% (fallthrough)
branch  5 taken 95%
       60: 1054:	}
        -: 1055:
        -: 1056:      if (choice1 == handPos)
      416: 1057:	{
      416: 1058:	  return -1;
      416: 1059:	}
        -: 1060:
        -: 1061:      for (i = 0; i < state->handCount[currentPlayer]; i++)
      476: 1062:	{
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
      416: 1063:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
      416: 1064:	    {
        -: 1065:	      j++;
       30: 1066:	    }
        -: 1067:	}
        -: 1068:      if (j < choice2)
function playSmithy called 0 returned 0% blocks executed 0%
    #####: 1069:	{
        -: 1070:	  return -1;				
    #####: 1071:	}
call    0 never executed
        -: 1072:
        -: 1073:      if (DEBUG) 
    #####: 1074:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
branch  0 never executed
branch  1 never executed
    #####: 1075:
call    0 never executed
        -: 1076:      //increase supply count for choosen card by amount being discarded
        -: 1077:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1078:			
    #####: 1079:      //each other player gains a copy of revealed card
call    0 never executed
    #####: 1080:      for (i = 0; i < state->numPlayers; i++)
        -: 1081:	{
        -: 1082:	  if (i != currentPlayer)
function playVillage called 34 returned 100% blocks executed 100%
       34: 1083:	    {
        -: 1084:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
       34: 1085:	    }
call    0 returned 100%
        -: 1086:	}
       34: 1087:
call    0 returned 100%
        -: 1088:      //discard played card from hand
        -: 1089:      discardCard(handPos, currentPlayer, state, 0);			
       34: 1090:
        -: 1091:      //trash copies of cards returned to supply
        -: 1092:      for (j = 0; j < choice2; j++)
       34: 1093:	{
call    0 returned 100%
       34: 1094:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1095:	    {
        -: 1096:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
function playCouncil_Room called 30 returned 100% blocks executed 100%
       30: 1097:		{
        -: 1098:		  discardCard(i, currentPlayer, state, 1);
        -: 1099:		  break;
        -: 1100:		}
       30: 1101:	    }
call    0 returned 100%
        -: 1102:	}			
      150: 1103:
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
      120: 1104:      return 0;
call    0 returned 100%
        -: 1105:		
        -: 1106:    case cutpurse:
       30: 1107:
        -: 1108:      updateCoins(currentPlayer, state, 2);
      128: 1109:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 77%
branch  1 taken 23% (fallthrough)
       98: 1110:	{
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
       30: 1111:	  if (i != currentPlayer)
call    0 returned 100%
        -: 1112:	    {
        -: 1113:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1114:		{
       30: 1115:		  if (state->hand[i][j] == copper)
call    0 returned 100%
       30: 1116:		    {
        -: 1117:		      discardCard(j, i, state, 0);
        -: 1118:		      break;
function playFeast called 0 returned 0% blocks executed 0%
    #####: 1119:		    }
        -: 1120:		  if (j == state->handCount[i])
        -: 1121:		    {
        -: 1122:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1123:			{
    #####: 1124:			  if (DEBUG)
call    0 never executed
        -: 1125:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1126:			}	
        -: 1127:		      break;
    #####: 1128:		    }		
branch  0 never executed
branch  1 never executed
    #####: 1129:		}
    #####: 1130:					
        -: 1131:	    }
        -: 1132:				
        -: 1133:	}				
    #####: 1134:
call    0 never executed
    #####: 1135:      //discard played card from hand
    #####: 1136:      discardCard(handPos, currentPlayer, state, 0);			
branch  0 never executed
branch  1 never executed
    #####: 1137:
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1138:      return 0;
        -: 1139:
        -: 1140:		
        -: 1141:    case embargo: 
        -: 1142:      //+2 Coins
        -: 1143:      state->coins = state->coins + 2;
        -: 1144:			
    #####: 1145:      //see if selected pile is in play
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1146:      if ( state->supplyCount[choice1] == -1 )
call    0 never executed
        -: 1147:	{
        -: 1148:	  return -1;
        -: 1149:	}
        -: 1150:			
        -: 1151:      //add embargo token to selected supply pile
        -: 1152:      state->embargoTokens[choice1]++;
        -: 1153:			
        -: 1154:      //trash card
    #####: 1155:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1156:      return 0;
        -: 1157:		
        -: 1158:    case outpost:
        -: 1159:      //set outpost flag
        -: 1160:      state->outpostPlayed++;
        -: 1161:			
        -: 1162:      //discard card
    #####: 1163:      discardCard(handPos, currentPlayer, state, 0);
branch  0 never executed
branch  1 never executed
    #####: 1164:      return 0;
    #####: 1165:		
        -: 1166:    case salvager:
        -: 1167:      //+1 buy
    #####: 1168:      state->numBuys++;
        -: 1169:			
function discardCard called 64 returned 100% blocks executed 89%
       64: 1170:      if (choice1)
        -: 1171:	{
        -: 1172:	  //gain coins equal to trashed card
       64: 1173:	  state->coins = state->coins + getCost( handCard(choice1, state) );
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1174:	  //trash card
        -: 1175:	  discardCard(choice1, currentPlayer, state, 1);	
       64: 1176:	}
       64: 1177:			
        -: 1178:      //discard card
        -: 1179:      discardCard(handPos, currentPlayer, state, 0);
        -: 1180:      return 0;
       64: 1181:		
        -: 1182:    case sea_hag:
        -: 1183:      for (i = 0; i < state->numPlayers; i++){
       64: 1184:	if (i != currentPlayer){
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
        -: 1185:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        -: 1186:	  state->discardCount[i]++;
        1: 1187:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1188:	}
       63: 1189:      }
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1190:      return 0;
        -: 1191:		
    #####: 1192:    case treasure_map:
        -: 1193:      //search hand for another treasure_map
        -: 1194:      index = -1;
        -: 1195:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1196:	{
       63: 1197:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1198:	    {
       63: 1199:	      index = i;
        -: 1200:	      break;
       63: 1201:	    }
        -: 1202:	}
        -: 1203:      if (index > -1)
       64: 1204:	{
        -: 1205:	  //trash both treasure cards
        -: 1206:	  discardCard(handPos, currentPlayer, state, 1);
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1207:	  discardCard(index, currentPlayer, state, 1);
        -: 1208:
        -: 1209:	  //gain 4 Gold cards
        -: 1210:	  for (i = 0; i < 4; i++)
    #####: 1211:	    {
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1212:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1213:	    }
        -: 1214:				
        -: 1215:	  //return success
        -: 1216:	  return 1;
        -: 1217:	}
        -: 1218:			
        -: 1219:      //no second treasure_map found in hand
        -: 1220:      return -1;
    #####: 1221:    }
branch  0 never executed
branch  1 never executed
        -: 1222:	
    #####: 1223:  return -1;
    #####: 1224:}
        -: 1225:
    #####: 1226:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
branch  0 never executed
branch  1 never executed
        -: 1227:{
    #####: 1228:	
    #####: 1229:  //if card is not trashed, added to Played pile 
        -: 1230:  if (trashFlag < 1)
        -: 1231:    {
        -: 1232:      //add card to played pile
    #####: 1233:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1234:      state->playedCardCount++;
        -: 1235:    }
        -: 1236:	
        -: 1237:  //set played card to -1
    #####: 1238:  state->hand[currentPlayer][handPos] = -1;
        -: 1239:	
    #####: 1240:  //remove card from player's hand
        -: 1241:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1242:    {
function updateCoins called 20 returned 100% blocks executed 82%
       20: 1243:      //reduce number of cards in hand
        -: 1244:      state->handCount[currentPlayer]--;
        -: 1245:    }
        -: 1246:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
       20: 1247:    {
        -: 1248:      //reduce number of cards in hand
        -: 1249:      state->handCount[currentPlayer]--;
      120: 1250:    }
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1251:  else 	
      100: 1252:    {
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -: 1253:      //replace discarded card with last card in hand
       75: 1254:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1255:      //set last card to -1
       25: 1256:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1257:      //reduce number of cards in hand
    #####: 1258:      state->handCount[currentPlayer]--;
        -: 1259:    }
       25: 1260:	
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1261:  return 0;
    #####: 1262:}
        -: 1263:
        -: 1264:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1265:{
        -: 1266:  //Note: supplyPos is enum of choosen card
       20: 1267:	
        -: 1268:  //check if supply pile is empty (0) or card is not used in game (-1)
       20: 1269:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1270:    {
        -: 1271:      return -1;
        -: 1272:    }
        -: 1273:	
        -: 1274:  //added card for [whoseTurn] current player:
        -: 1275:  // toFlag = 0 : add to discard
        -: 1276:  // toFlag = 1 : add to deck
        -: 1277:  // toFlag = 2 : add to hand
        -: 1278:
        -: 1279:  if (toFlag == 1)
        -: 1280:    {
        -: 1281:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        -: 1282:      state->deckCount[player]++;
        -: 1283:    }
        -: 1284:  else if (toFlag == 2)
        -: 1285:    {
        -: 1286:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        -: 1287:      state->handCount[player]++;
        -: 1288:    }
        -: 1289:  else
        -: 1290:    {
        -: 1291:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        -: 1292:      state->discardCount[player]++;
        -: 1293:    }
        -: 1294:	
        -: 1295:  //decrease number in supply pile
        -: 1296:  state->supplyCount[supplyPos]--;
        -: 1297:	 
        -: 1298:  return 0;
        -: 1299:}
        -: 1300:
        -: 1301:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1302:{
        -: 1303:  int i;
        -: 1304:	
        -: 1305:  //reset coin count
        -: 1306:  state->coins = 0;
        -: 1307:
        -: 1308:  //add coins for each Treasure card in player's hand
        -: 1309:  for (i = 0; i < state->handCount[player]; i++)
        -: 1310:    {
        -: 1311:      if (state->hand[player][i] == copper)
        -: 1312:	{
        -: 1313:	  state->coins += 1;
        -: 1314:	}
        -: 1315:      else if (state->hand[player][i] == silver)
        -: 1316:	{
        -: 1317:	  state->coins += 2;
        -: 1318:	}
        -: 1319:      else if (state->hand[player][i] == gold)
        -: 1320:	{
        -: 1321:	  state->coins += 3;
        -: 1322:	}	
        -: 1323:    }	
        -: 1324:
        -: 1325:  //add bonus
        -: 1326:  state->coins += bonus;
        -: 1327:
        -: 1328:  return 0;
        -: 1329:}
        -: 1330:
        -: 1331:playAdventurer(struct gameState *state)
        -: 1332:{
        -: 1333:    int currentPlayer = whoseTurn(state);
        -: 1334:	int z = 0;
        -: 1335:	int temphand[MAX_HAND];
        -: 1336:	int drawntreasure = 0;
        -: 1337:	int cardDrawn;
        -: 1338:	
        -: 1339:	while(drawntreasure<2){
        -: 1340:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -: 1341:			shuffle(currentPlayer, state);
        -: 1342:		}
        -: 1343:		drawCard(currentPlayer, state);
        -: 1344:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1345:		if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -: 1346:			drawntreasure++;
        -: 1347:		else{
        -: 1348:			temphand[z]=cardDrawn;
        -: 1349:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -: 1350:			z++;
        -: 1351:		}
        -: 1352:    }
        -: 1353:    while(z-1>0){
        -: 1354:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -: 1355:		z=z-1;
        -: 1356:    }
        -: 1357:    return 0;
        -: 1358:}
        -: 1359:
        -: 1360:playSmithy(struct gameState *state, int handPos, int currentPlayer)
        -: 1361:{
        -: 1362:	int i;
        -: 1363:      //+3 Cards
        -: 1364:    for (i = 0; i < 3; i++)
        -: 1365:	{
        -: 1366:	  drawCard(currentPlayer, state);
        -: 1367:	}
        -: 1368:			
        -: 1369:      //discard card from hand
        -: 1370:      discardCard(handPos, currentPlayer, state, 0);
        -: 1371:      return 0;
        -: 1372:}
        -: 1373:
        -: 1374:int playCouncil_Room(struct gameState *state)
        -: 1375:{
        -: 1376:	int currentPlayer = whoseTurn(state);
        -: 1377:    //+4 Cards
        -: 1378:	int i;
        -: 1379:    for (i = 0; i < 4; i++){
        -: 1380:		drawCard(currentPlayer, state);
        -: 1381:	}
        -: 1382:			
        -: 1383:    //+1 Buy
        -: 1384:    state->numBuys++;
        -: 1385:			
        -: 1386:    //Each other player draws a card
        -: 1387:    for (i = 1; i < state->numPlayers; i++){
        -: 1388:		if ( i != currentPlayer )
        -: 1389:		{
        -: 1390:			drawCard(i, state);
        -: 1391:	    }
        -: 1392:	}
        -: 1393:    return 0;
        -: 1394:}
        -: 1395:
        -: 1396:int playRemodel(struct gameState *state, int handPos, int currentPlayer, int choice1, int choice2)
        -: 1397:{
        -: 1398:	int j;
        -: 1399:	j = state->hand[currentPlayer][choice2];  //store card we will trash
        -: 1400:
        -: 1401:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) < getCost(choice2) ){
        -: 1402:	  return -1;
        -: 1403:	}
        -: 1404:	
        -: 1405:	gainCard(choice2, state, 0, currentPlayer);
        -: 1406:
        -: 1407:	//discard card from hand
        -: 1408:    discardCard(handPos, currentPlayer, state, 0);
        -: 1409:	
        -: 1410:    //discard trashed card
        -: 1411:	int i;
        -: 1412:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1413:	{
        -: 1414:		if (state->hand[currentPlayer][i] == j){
        -: 1415:	      discardCard(i, currentPlayer, state, 0);			
        -: 1416:	      break;
        -: 1417:	    }
        -: 1418:	}
        -: 1419:    return 0;
        -: 1420:}
        -: 1421:
        -: 1422:int playVillage(struct gameState *state, int handPos, int currentPlayer)
        -: 1423:{
        -: 1424:   //+1 Card
        -: 1425:      drawCard(currentPlayer, state);
        -: 1426:			
        -: 1427:      //+2 Actions
        -: 1428:      state->numActions = state->numActions + 2;
        -: 1429:			
        -: 1430:      //discard played card from hand
        -: 1431:      discardCard(handPos, currentPlayer, state, 0);
        -: 1432:      return 0;
        -: 1433:}
        -: 1434://end of dominion.c
        -: 1435:
