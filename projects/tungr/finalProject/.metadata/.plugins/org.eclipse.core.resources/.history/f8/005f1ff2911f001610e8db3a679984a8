/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.junit.Test;

import junit.framework.TestCase;

/**
 * Performs Validation Test for url validations.
 *
 * @version $Revision: 1128446 $ $Date: 2011-05-27 13:29:27 -0700 (Fri, 27 May 2011) $
 */
public class UrlValidatorTest extends TestCase {

   private boolean printStatus = false;
   private boolean printIndex = false;//print index that indicates current scheme,host,port,path, query test were using.
   UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
   
   //first three are true
   private String[] schemes = {"http://", "https://", "ftp://", "http://", "htt://", "htts://", "http:", "///"};
   private String[] authorities = {"www.google.com", "amazon.com", "uk.yahoo.com", "0.0.0.0", "www.yahoo.co.uk", "192.174.456.1.", ".4.3.4.5", "www.google.444"};
   private String[] ports = {":0",":6000",":1234",":8080",":39r4",":-244" ,":8000000",":12345678"};
   private String[] paths = {"/mail/","/mail/u/2","/$!37","/spam/","/..","/../","/..//mail","/inbox//mail"};
   private String[] queries = {"/?twenty=20&UnitID=439" , "/?twenty=20&UnitID=439&Kara=see&Cant=kara&This=Kara&Rosa=can't&See=can't&This=Rosa&Sam=Can't&sEe=this",
		   "/search/enhancedlocalsearch?where=46250&loctypes=1/4/5/9/11/13/19/21/1000/1001/1003/&from=hdr",
		   "/webhp?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=google%20maps",
		   "/ ?twenty=20&UnitID=439",
		   "/webhp ?sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=google%20maps",
		   "/webhp? sourceid=chrome-instant&ion=1&espv=2&ie=UTF-8#q=bloomington+indiana%3F",
		   "/webhp?%20sourceid=chrome- instant&ion=1&espv=2&ie=UTF-8#q=bloomington+"};
   
   public UrlValidatorTest(String testName) {
      super(testName);
   }

   public void testManualTest()
   {
	   //UrlValidator urlVal = new UrlValidator(null, null, UrlValidator.ALLOW_ALL_SCHEMES);
	   //System.out.println(urlVal.isValid("htts://www.google.com"));    
   }
   
   /*public void testIsValid()
   {   
	   
	   Boolean expectedValue = true; //true
	   Boolean actualValue = true;
	   
	   for(int i = 0; i<schemes.length; i++){   
		   for(int j = 0; j<authorities.length; j++){
			   for(int k = 0; k<ports.length; k++){
				   	for(int l = 0; l<paths.length; l++){
				   		for(int m = 0; m<queries.length; m++){
						   String URL = new String("");
						   URL = URL + schemes[i] + authorities[j] + ports[k] + paths[l] + queries[m];
						   
						   if(!urlVal.isValid(URL)){
							   
						   } else {
							   
						   }
						   if(expectedValue == true){
							   assertTrue(URL + " should be valid",
						                urlVal.isValid(URL));
						   } else {
						       assertFalse(URL + " should not be valid",
						                urlVal.isValid(URL));   
						   }
					   }
				   }
			   }
		   }
	   }
   }*/
   
   @Test
   public void testSuccessfullyWorkingAsExpected(){
	   String URL = "http://www.google.com/mail";
	   assertTrue(URL + " should be valid", urlVal.isValid(URL));
   }
   
   @Test
   public void testSuccessfullyFailingAsExpected(){
	   String URL = "http://www.google.com:0//mail/?twenty=20&UnitID=439";
	   assertFalse(URL + " should be invalid", urlVal.isValid(URL));	  
	   URL = "www.google.com";
	   assertFalse(URL + " should be invalid", urlVal.isValid(URL));
   }
   
   @Test
   public void testShouldBeWorkingButAreNotWorking(){
	   //authority function -> actually query function 
	   String URL = "http://www.google.com/mail/?twenty=20&UnitID=439";
	   assertFalse(URL + " should be invalid", urlVal.isValid(URL));
	   //port function
	   //URL = "http://www.google.com:3000";
	   //assertFalse(URL + " should be invalid", urlVal.isValid(URL));
	   //
	   URL = "http://www.google.com:70000";
	   assertFalse(URL + " should be invalid", urlVal.isValid(URL));
   }
   
   @Test
   public void testShouldNotBeWorkingButAreWorking(){
	   
   }
}

