------------ Part A ------------
      Review of testIsValid

Team Members: 
Rosa Tung (tungr) 
Sam Nelson (nelsons3) 
Kara Franco (lallyk)

----------- Explain testIsValid function of URLValidator test code -----------

	There are two testIsValid functions in the URLValidator code. The first function calls itself with overloaded parameters 
and then calls setup() to reset the testPartsIndex array. The second testIsValid function takes in the URL objects (the pieces 
that make up a URL; www. http:// etc) and the options provided from URLValidator to build a valid URL. The second testIsValid 
builds combinations of the URL objects into a string, and then checks if the URL is valid with the isValid function of URLValidator. 
This is done by constructing a new object of type UrlValidator, urlVal, that contains no objects, however has the URL valid options. 
Other integer variables are set up, statusPerLine (keeps track of how many URLs per line) and printIndex (keeps track of the printed 
status). If printIndex flag is true, we need to change our statusPerLine to 6. 

	The do while loop performs under the condition that we still have test objects to look at. It will end when there are no 
more test objects. While there are objects, we enter a for loop that appends the pieces of the url together, concatenating the string 
with Stringbuffer. Afterwards we test if the URL is valid with the URLValidator isValid() and store the result. If it's true, we 
print it to the console. assertEquals (part of Junit) makes sure the two booleans, from isValid, are equal. Lastly, we do a final test 
result check, where if the printStatus is true, we double check the printindex, and if that is not true then test if result is equal to the
expected result and if it is, print a  “.”. If not print X. 

----------- Give how many total number of urls it is testing -----------

	The total number of URLs tested is 31,922. We put a counter below the line boolean result = urlVal.isValid(url) which resulted 
in 31,920 URLs. Then we added the two URLs that were tested at the beginning of the testIsValid function. 

----------- Explain how it is building all the urls -----------

	testIsValid calls itself overloaded with an object that contains the parts; testUrlScheme, testURLAuthroity, testUrlPort and 
testQuery and testPath. Each of these object parts are made up of ResultPairs, which are pairs of the URL piece, and their valid status 
(true or false). The parts together test a URL; <scheme>://<authority><path>?<query>.

	In the for loop Stringbuffer is used to make a testBuffer. Stingbuffer the better way to add (concatenate) to a string in Java. 
The for loop appends the pieces of the url together, using the testPartsIndex to track the building. The URL is then converted to a String 
url variable for testing by using the toString() method. The url is then tested with the isValid() function from URLValidator. 

----------- Give an example of valid url being tested and an invalid url being tested by testIsValid() method -----------

Valid:
http://www.google.com
http://www.google.com/
http://www.google.com:80/test1?action=view 

Invalid:
http://www.google.com:80/../?action=view
http://www.google.com:80/../?action=edit&mode=up

----------- Do you think that a real world test (URL Validator's testIsValid() test in this case) is very different than the unit tests and card 
tests that we wrote (in terms of concepts & complexity)? -----------

	Our unit tests and card tests that we wrote differ in both idea and complexity. We did random tests with the complexity 
of at most n2 (at least for our tests) whereas this function tests goes for a brute force approach testing all possible combinations. 
Ultimately by testing all combinations (permutation) the complexity of this real world test is that of n!. This is a worse running time 
than our tests but it is also more thorough. Which one is better depends on the situation and how much you value the accuracy.
