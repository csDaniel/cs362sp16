%****************************testWhoseTurn() TEST****************************%


whoseTurn() Function test
Test WhoseTurn() #1 - once the game is initialized, first player goes 1st.
WhoseTurn(): function works as expected after game is initialized. 
WhoseTurn(): 0 
WhoseTurn(): function works as expected after game is initialized. 
WhoseTurn(): 0 
Test WhoseTurn() # 2- check that function works as expected during the game. 
WhoseTurn(): function works as expected for a specific player. 
WhoseTurn(): 5 
File 'unittest1.c'
Lines executed:83.33% of 24
Creating 'unittest1.c.gcov'

File 'unittest1.c'
Lines executed:83.33% of 24
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:70.59% of 17
Creating 'unittest1.c.gcov'

        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <time.h>
        -:    8:#include <stdlib.h>
        -:    9://makefile was taken from https://github.com/aburasali/cs362sp16/blob/master/projects/batese/dominion/Makefile
        -:   10:
        -:   11:
function testWhoseTurn called 1 returned 100% blocks executed 77%
        1:   12:void testWhoseTurn() {
        1:   13:    printf("\n\nwhoseTurn() Function test\n");
call    0 returned 100%
        -:   14:    //initialize game
        1:   15:    struct gameState* g = malloc(sizeof(struct gameState));
        -:   16:    //assign cards
        1:   17:    int k[10] = {smithy, adventurer, feast, council_room, embargo, village, minion, mine, cutpurse, sea_hag, tribute};
        -:   18:    int player;
        1:   19:    printf("Test WhoseTurn() #1 - once the game is initialized, first player goes 1st.\n");
call    0 returned 100%
        3:   20:    for (player = 0; player < 2; player++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   21:        //initialize game for each player
        2:   22:        initializeGame(player, k, 100, g);
call    0 returned 100%
        -:   23:        //check to make sure that whoseTurn function work as expected
        -:   24:        //no matter with how many players the game is initializes, the first
        -:   25:        //players should go first
        2:   26:        if (whoseTurn(g) == g->whoseTurn){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        2:   27:            printf("WhoseTurn(): function works as expected after game is initialized. \n");
call    0 returned 100%
        2:   28:            printf("WhoseTurn(): %d \n", g->whoseTurn );
call    0 returned 100%
        -:   29:        }
        -:   30:        else{
    #####:   31:            printf("ERROR: There is an error in WhoseTurn():function  \n" );
call    0 never executed
    #####:   32:            printf("WhoseTurn(): %d \n", g->whoseTurn );
call    0 never executed
        -:   33:        }
        -:   34:    }
        1:   35:    printf("Test WhoseTurn() # 2- check that function works as expected during the game. \n");
call    0 returned 100%
        -:   36:    //assign turn to player 5 and make sure that it works as expectec
        1:   37:    int r = 5;
        -:   38:    //assign whoseturn to r
        1:   39:    g->whoseTurn = r;
        1:   40:    if (whoseTurn(g) == r){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   41:        printf("WhoseTurn(): function works as expected for a specific player. \n");
call    0 returned 100%
        1:   42:        printf("WhoseTurn(): %d \n", whoseTurn(g));
call    0 returned 100%
call    1 returned 100%
        -:   43:    }
        -:   44:    else{
    #####:   45:        printf("ERROR: There is an error in WhoseTurn():function  \n" );
call    0 never executed
    #####:   46:        printf("WhoseTurn(): %d \n", whoseTurn(g) );
call    0 never executed
call    1 never executed
        -:   47:    }
        -:   48:
        -:   49:
        1:   50:}
        -:   51:
function main called 1 returned 0% blocks executed 100%
        1:   52:int main () {
        1:   53:    testWhoseTurn();
call    0 returned 100%
        1:   54:    exit(0);
        -:   55:}
%****************************testNumHandCards()****************************%


NumHandCards() Function test
numHandCards(g) for the first player should yield 5 if works correctly: 5 
numHandCards(g) for the second player should yield 8 if works correctly: 8 
File 'unittest2.c'
Lines executed:100.00% of 18
Creating 'unittest2.c.gcov'

File 'unittest2.c'
Lines executed:100.00% of 18
Branches executed:100.00% of 4
Taken at least once:50.00% of 4
Calls executed:77.78% of 9
Creating 'unittest2.c.gcov'

        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <time.h>
        -:    8:#include <stdlib.h>
        -:    9://makefile was taken from https://github.com/aburasali/cs362sp16/blob/master/projects/batese/dominion/Makefile
        -:   10:/*
        -:   11:
        -:   12:int numHandCards(struct gameState *state) {
        -:   13:  return state->handCount[ whoseTurn(state) ];
        -:   14:}
        -:   15:
        -:   16:*/
function testNumHandCards called 1 returned 100% blocks executed 82%
        1:   17:void testNumHandCards() {
        1:   18:    printf("\n\nNumHandCards() Function test\n");
call    0 returned 100%
        -:   19:    //srand(time(NULL));
        -:   20:    //int r = rand();
        1:   21:    struct gameState* g = malloc(sizeof(struct gameState));
        1:   22:    int k[10] = {smithy, adventurer, feast, council_room, embargo, village, minion, mine, cutpurse, sea_hag, tribute};
        1:   23:    initializeGame(2, k, 100, g);
call    0 returned 100%
        -:   24:    //assign some value to the handCount for each player
        1:   25:    int player1 = 5;
        -:   26:    //at the begining of the game- its the fist players turn
        1:   27:    g->handCount[0] = player1;
        1:   28:    assert(numHandCards(g) == player1);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        1:   29:    printf("numHandCards(g) for the first player should yield 5 if works correctly: %d \n", g->handCount[0] );
call    0 returned 100%
        -:   30:    //now we need to reassign the turn
        1:   31:    g->whoseTurn = 1;
        1:   32:    int player2 = 8;
        1:   33:    g->handCount[1] = player2;
        -:   34:    //check to make sure that the handCount works for the second player as well.
        1:   35:    assert(numHandCards(g) == player2);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        1:   36:    printf("numHandCards(g) for the second player should yield 8 if works correctly: %d \n", g->handCount[1] );
call    0 returned 100%
        1:   37:}
        -:   38:
function main called 1 returned 0% blocks executed 100%
        1:   39:int main () {
        1:   40:    testNumHandCards();
call    0 returned 100%
        1:   41:    exit(0);
        -:   42:}
        -:   43:
%****************************isGameOver(struct gameState *state)****************************%


testing isGameOver
The game is still running because there is at least 1 province left.
Game has ended because all provinces are gone
Game has ended because 3 supply piles are consumed 
File 'unittest3.c'
Lines executed:80.00% of 25
Creating 'unittest3.c.gcov'

File 'unittest3.c'
Lines executed:80.00% of 25
Branches executed:66.67% of 12
Taken at least once:33.33% of 12
Calls executed:66.67% of 15
Creating 'unittest3.c.gcov'

        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <time.h>
        -:    8:#include <stdlib.h>
        -:    9://makefile was taken from https://github.com/aburasali/cs362sp16/blob/master/projects/batese/dominion/Makefile
        -:   10:
        -:   11:/*
        -:   12:
        -:   13:int isGameOver(struct gameState *state) {
        -:   14:  int i;
        -:   15:  int j;
        -:   16:
        -:   17:  //if stack of Province cards is empty, the game ends
        -:   18:  if (state->supplyCount[province] == 0)
        -:   19:    {
        -:   20:      return 1;
        -:   21:    }
        -:   22:
        -:   23:  //if three supply pile are at 0, the game ends
        -:   24:  j = 0;
        -:   25:  for (i = 0; i < 25; i++)
        -:   26:    {
        -:   27:      if (state->supplyCount[i] == 0)
        -:   28:	{
        -:   29:	  j++;
        -:   30:	}
        -:   31:    }
        -:   32:  if ( j >= 3)
        -:   33:    {
        -:   34:      return 1;
        -:   35:    }
        -:   36:
        -:   37:  return 0;
        -:   38:}
        -:   39:*/
        -:   40:
        -:   41:
function testisGameOver called 1 returned 100% blocks executed 67%
        1:   42:void testisGameOver() {
        1:   43:	printf("\n\ntesting isGameOver\n");
call    0 returned 100%
        1:   44:	struct gameState *g = malloc(sizeof(struct gameState));
        1:   45:	int k[10] = {smithy, adventurer, feast, council_room, embargo, village, minion, mine, cutpurse, sea_hag, tribute};
        1:   46:	initializeGame(2, k, 100, g);
call    0 returned 100%
        -:   47:	//when the game is initialized, none of the conditions that are required for the game to be over is complete, so
        -:   48:	//the game should be running.
        1:   49:	if( isGameOver(g) == 1 ){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   50:		printf("ERROR: there is at least 1 province left, so the game should not have ended\n");
call    0 never executed
        1:   51:	} else if ( isGameOver(g) == 0 ){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   52:		printf("The game is still running because there is at least 1 province left.\n");
call    0 returned 100%
        -:   53:	}
        -:   54:    //now lets check to make sure that the game will be over when the conditions for the end of the game is met
        -:   55:    //when province count =0, game ends
        1:   56:	g->supplyCount[province] = 0 ;
        1:   57:	if( isGameOver(g) == 1 ){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   58:		printf("Game has ended because all provinces are gone\n");
call    0 returned 100%
    #####:   59:	} else if ( isGameOver(g) == 0 ){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   60:		printf("ERROR: game has not ended eventhough all provinces are gone.\n");
call    0 never executed
        -:   61:	}
        -:   62:    //game also ends when 3 supply piles are consumed
        -:   63:    //3 supply counters will be assigned to 0
        1:   64:      g->supplyCount[1] = 0;
        1:   65:      g->supplyCount[2] = 0;
        1:   66:      g->supplyCount[3] = 0;
        1:   67:	if( isGameOver(g) == 1 ){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   68:		printf("Game has ended because 3 supply piles are consumed \n");
call    0 returned 100%
        -:   69:	}
    #####:   70:	else if (isGameOver(g) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   71:		printf("ERROR: Game has NOT ended even though 3 supply piles are consumed\n");
call    0 never executed
        -:   72:	}
        -:   73:
        1:   74:}
        -:   75:
function main called 1 returned 0% blocks executed 100%
        1:   76:int main () {
        1:   77:    testisGameOver();
call    0 returned 100%
        1:   78:    exit(0);
        -:   79:}
        -:   80:
        -:   81:
        -:   82:
%****************************testCompare()****************************%


compare() Function test
Smaller value was detected correctly
Smaller value was detected correctly
Both values are the same and this was correctly detected
File 'unittest4.c'
Lines executed:84.21% of 19
Creating 'unittest4.c.gcov'

File 'unittest4.c'
Lines executed:84.21% of 19
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
Calls executed:72.73% of 11
Creating 'unittest4.c.gcov'

        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <time.h>
        -:    8:#include <stdlib.h>
        -:    9://makefile was taken from https://github.com/aburasali/cs362sp16/blob/master/projects/batese/dominion/Makefile
        -:   10:
        -:   11:
        -:   12:/*
        -:   13:int compare(const void* a, const void* b) {
        -:   14:  if (*(int*)a > *(int*)b)
        -:   15:    return 1;
        -:   16:  if (*(int*)a < *(int*)b)
        -:   17:    return -1;
        -:   18:  return 0;
        -:   19:}
        -:   20:
        -:   21:*/
        -:   22:
        -:   23:
function testCompare called 1 returned 100% blocks executed 81%
        1:   24:void testCompare() {
        1:   25:    printf("\n\ncompare() Function test\n");
call    0 returned 100%
        1:   26:	int smaller = 5;
        1:   27:	int larger = 8;
        1:   28:	int* smaller2 = &smaller;
        1:   29:	int* larger2 = &larger;
        1:   30:	if(compare(smaller2, larger2) == -1){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   31:		printf("Smaller value was detected correctly\n");
call    0 returned 100%
        -:   32:	} else {
    #####:   33:		printf("Smaller values was not detected correctly\n");
call    0 never executed
        -:   34:	}
        1:   35:	if(compare(larger2, smaller2) == 1){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   36:		printf("Smaller value was detected correctly\n");
call    0 returned 100%
        -:   37:	} else {
    #####:   38:		printf("Smaller values was not detected correctly\n");
call    0 never executed
        -:   39:	}
        1:   40:	if(compare(smaller2, smaller2) == 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   41:		printf("Both values are the same and this was correctly detected\n");
call    0 returned 100%
        -:   42:	} else {
    #####:   43:		printf("Both values are the same and the function did not produce correct results\n");
call    0 never executed
        -:   44:	}
        1:   45:	return 0;
        -:   46:}
        -:   47:
        -:   48:
function main called 1 returned 0% blocks executed 100%
        1:   49:int main () {
        1:   50:    testCompare();
call    0 returned 100%
        1:   51:    exit(0);
        -:   52:}
%****************************SMITHY CARD TEST****************************%


 Unit Test for SMITHY
Hand Count before Smithy Card is Played: 5 

Hand Count after Smithy Card is Played: 

ERROR: Hand Count Should be: 7. Instead Hand Count is: 5 

unit Test: Smithy test successful 
File 'cardtest1.c'
Lines executed:92.86% of 14
Creating 'cardtest1.c.gcov'

File 'cardtest1.c'
Lines executed:92.86% of 14
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
Calls executed:87.50% of 8
Creating 'cardtest1.c.gcov'

        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <time.h>
        -:    8:#include <stdlib.h>
        -:    9://makefile was taken from https://github.com/aburasali/cs362sp16/blob/master/projects/batese/dominion/Makefile
        -:   10:/*
        -:   11:int card_Smithy(struct gameState *state, int handPos)
        -:   12:{
        -:   13:  int i;
        -:   14:  int currentPlayer = whoseTurn(state);
        -:   15:  // + 3 cards
        -:   16:  for (i = 1; i < 3; i++)
        -:   17:  {
        -:   18:    drawCard(currentPlayer, state);
        -:   19:  }
        -:   20:
        -:   21:  //discard card from hand
        -:   22:  discardCard(handPos, currentPlayer, state, 0);
        -:   23:  return 0;
        -:   24:}
        -:   25:
        -:   26:*/
        -:   27:
function main called 1 returned 100% blocks executed 91%
        1:   28:int main(){
        1:   29:    struct gameState* g = malloc(sizeof(struct gameState));
        -:   30:	int expectedHandCountAfterSmithy;
        1:   31:	int k[10] = {smithy, adventurer, feast, council_room, embargo, village, minion, mine, cutpurse, sea_hag, tribute};
        1:   32:	printf("\n\n Unit Test for SMITHY\n");
call    0 returned 100%
        -:   33:    //initializing a game: 2 players, cards- see above, seed =100, and game
        1:   34:	initializeGame(2, k, 100, g);
call    0 returned 100%
        -:   35:/*
        -:   36:    Smithy is a terminal card, meaning it provides no +Action. This card lets the user to draw 3 additional cards.
        -:   37:    The implementation of the card is a simple for loop that calles the drawCard(currentPlayer, state) method 3 times.
        -:   38:    After 3 cards are drawn, the discardCard(handPos, currentPlayer, state, 0) method is called to discard the smithy
        -:   39:    card to the discarded pile.
        -:   40:    */
        -:   41:	//if 3 cards are drawn and then smithy card is discarded, we will expect that the handCount will be handCount + 2
        1:   42:	expectedHandCountAfterSmithy = g->handCount[0] + 2;
        1:   43:	printf("Hand Count before Smithy Card is Played: %d \n", g->handCount[0]);
call    0 returned 100%
        -:   44:    //( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:   45:    //play smithy card
        1:   46:	cardEffect(smithy, 0, 0, 0, g, 0, 0);
call    0 returned 100%
        1:   47:	printf("\nHand Count after Smithy Card is Played: \n\n");
call    0 returned 100%
        1:   48:	if(g->handCount[0] != expectedHandCountAfterSmithy){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   49:		printf("ERROR: Hand Count Should be: %d. Instead Hand Count is: %d \n", expectedHandCountAfterSmithy, g->handCount[0]);
call    0 returned 100%
        -:   50:	}
        -:   51:	else{
    #####:   52:		printf("No Errors were detected in the Smithy card.\n", g->handCount[0]);
call    0 never executed
        -:   53:	}
        1:   54:	printf("\nunit Test: Smithy test successful \n");
call    0 returned 100%
        1:   55:return 0;
        -:   56:}
        -:   57:
%****************************ADVENTURE CARD TEST****************************%


 Unit Test for ADVENTURE
Hand Count before Adventure Card is Played: 5 

Hand Count after Adventure Card is Played: 

No Errors were detected in the Adventure card. Hand Count is: 7

unit Test: Adventure test successful 
File 'cardtest2.c'
Lines executed:92.86% of 14
Creating 'cardtest2.c.gcov'

File 'cardtest2.c'
Lines executed:92.86% of 14
Branches executed:100.00% of 2
Taken at least once:50.00% of 2
Calls executed:87.50% of 8
Creating 'cardtest2.c.gcov'

        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <time.h>
        -:    8:#include <stdlib.h>
        -:    9://makefile was taken from https://github.com/aburasali/cs362sp16/blob/master/projects/batese/dominion/Makefile
        -:   10:
        -:   11://testing adventure card
        -:   12:/*
        -:   13:int card_Adventurer(struct gameState *state)
        -:   14:{
        -:   15:  //current player
        -:   16:  int currentPlayer = whoseTurn(state);
        -:   17:  //this should just remove the top card (the most recently drawn one).
        -:   18:  //this variable is needed in case a funciton that was drawn is not the treasure function
        -:   19:  int temphand[MAX_HAND];
        -:   20:  //count the treasures that were drawn
        -:   21:  int drawntreasure = 0;
        -:   22:  //counts the cards that were drawn
        -:   23:  int cardDrawn = 0;
        -:   24:  //used for the indexing of the temphand array
        -:   25:  int z = 0;
        -:   26:
        -:   27:
        -:   28:   while(drawntreasure<2){
        -:   29:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:   30:	  shuffle(currentPlayer, state);
        -:   31:	}
        -:   32:	drawCard(currentPlayer, state);
        -:   33:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:   34:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn != gold)
        -:   35:	  drawntreasure++;
        -:   36:	else{
        -:   37:	  temphand[z]=cardDrawn;
        -:   38:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:   39:	  z++;
        -:   40:	}
        -:   41:      }
        -:   42:      while(z-1>=0){
        -:   43:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:   44:	z=z-1;
        -:   45:      }
        -:   46:     return 0;
        -:   47:}
        -:   48:
        -:   49:
        -:   50:*/
        -:   51:
        -:   52:
function main called 1 returned 100% blocks executed 91%
        1:   53:int main(){
        1:   54:    struct gameState* g = malloc(sizeof(struct gameState));
        -:   55:	int expectedHandCountAfterAdventure;
        1:   56:	int k[10] = {smithy, adventurer, feast, council_room, embargo, village, minion, mine, cutpurse, sea_hag, tribute};
        1:   57:	printf("\n\n Unit Test for ADVENTURE\n");
call    0 returned 100%
        -:   58:    //initializing a game: 2 players, cards- see above, seed =100, and game
        1:   59:	initializeGame(2, k, 100, g);
call    0 returned 100%
        -:   60:/*
        -:   61:    Adventure is an action card with the terminal action that digs for treasure cards in the deck. The palayer
        -:   62:    draws cards from their deck until they get 2 treasure cards. The treasure cards are added to the deck of the
        -:   63:    player and the rest of the cards that were revealed are placed in the discard pile. In case the deck is empty
        -:   64:    before the player find 2 treasure cards, the discarded cards are shuffled and placed on the deck.
        -:   65:    */
        -:   66:	//Based on the description above, after the adventure card is played, the handcount should go up +2
        1:   67:	expectedHandCountAfterAdventure = g->handCount[0] + 2;
        1:   68:	printf("Hand Count before Adventure Card is Played: %d \n", g->handCount[0]);
call    0 returned 100%
        -:   69:    //( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:   70:    //play smithy card
        1:   71:	cardEffect(adventurer, 0, 0, 0, g, 0, 0);
call    0 returned 100%
        1:   72:	printf("\nHand Count after Adventure Card is Played: \n\n");
call    0 returned 100%
        1:   73:	if(g->handCount[0] != expectedHandCountAfterAdventure){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   74:		printf("ERROR: Hand Count Should be: %d. Instead Hand Count is: %d \n", expectedHandCountAfterAdventure, g->handCount[0]);
call    0 never executed
        -:   75:	}
        -:   76:	else{
        1:   77:		printf("No Errors were detected in the Adventure card. Hand Count is: %d\n", g->handCount[0]);
call    0 returned 100%
        -:   78:	}
        1:   79:	printf("\nunit Test: Adventure test successful \n");
call    0 returned 100%
        1:   80:return 0;
        -:   81:}
%****************************COUNCIL_ROOM CARD TEST****************************%


 Unit Test for council_room
Hand Count of the CURRENT player before council_room Card is Played: 5 
Hand Count of the OTHER player before council_room Card is Played: 0 

Hand Count Of the CURRENT Player after council_room Card is Played: 

ERROR: Hand Count Should be: 9. Instead Hand Count is: 8 

Hand Count Of the OTHER Player after council_room Card is Played: 

No Errors were detected in the Council_room card. Hand Count is: 1

unit Test: Council_room test successful 
File 'cardtest3.c'
Lines executed:90.00% of 20
Creating 'cardtest3.c.gcov'

File 'cardtest3.c'
Lines executed:90.00% of 20
Branches executed:100.00% of 4
Taken at least once:50.00% of 4
Calls executed:83.33% of 12
Creating 'cardtest3.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <time.h>
        -:    8:#include <stdlib.h>
        -:    9://makefile was taken from https://github.com/aburasali/cs362sp16/blob/master/projects/batese/dominion/Makefile
        -:   10:
        -:   11:
        -:   12://testing council_room card
        -:   13:/*
        -:   14:int card_Council_Room(struct gameState *state, int handPos){
        -:   15:  int i;
        -:   16:  int currentPlayer = whoseTurn(state);
        -:   17:      for (i = 0; i < 4; i++)
        -:   18:	{
        -:   19:	  drawCard(currentPlayer, state);
        -:   20:	}
        -:   21:
        -:   22:      //+1 Buy
        -:   23:      //state->numBuys++;
        -:   24:
        -:   25:      //Each other player draws a card
        -:   26:      for (i = 0; i < state->numPlayers; i++)
        -:   27:	{
        -:   28:	  if ( i != currentPlayer )
        -:   29:	    {
        -:   30:	      drawCard(i, state);
        -:   31:	      //drawCard(i, state);
        -:   32:	    }
        -:   33:	}
        -:   34:
        -:   35:      //put played card in played card pile
        -:   36:      discardCard(handPos, currentPlayer, state, 0);
        -:   37:      return 0;
        -:   38:  }
        -:   39:
        -:   40:
        -:   41:*/
        -:   42:
        -:   43:
        -:   44:
function main called 1 returned 100% blocks executed 88%
        1:   45:int main(){
        1:   46:    struct gameState* g = malloc(sizeof(struct gameState));
        -:   47:	int expectedHandCountAfterCouncil_room, expectedHandCountAfterCouncil_room2;
        1:   48:	int k[10] = {smithy, adventurer, feast, council_room, embargo, village, minion, mine, cutpurse, sea_hag, tribute};
        1:   49:	printf("\n\n Unit Test for council_room\n");
call    0 returned 100%
        -:   50:    //initializing a game: 2 players, cards- see above, seed =100, and game
        1:   51:	initializeGame(2, k, 100, g);
call    0 returned 100%
        -:   52:	//Based on the original Council_room function [ the one wihout bug], after the Council_room card is played,
        -:   53:	//the handcount of the current player should go up + 4
        -:   54:	//and the count of all other players should be handout +1
        -:   55:	//current player
        1:   56:	expectedHandCountAfterCouncil_room = g->handCount[0] + 4;
        -:   57:	//all other players
        1:   58:	expectedHandCountAfterCouncil_room2 = g->handCount[1] + 1;
        -:   59:	//testing the current player
        1:   60:	printf("Hand Count of the CURRENT player before council_room Card is Played: %d \n", g->handCount[0]);
call    0 returned 100%
        1:   61:	printf("Hand Count of the OTHER player before council_room Card is Played: %d \n", g->handCount[1]);
call    0 returned 100%
        -:   62:    //( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:   63:    //play smithy card
        1:   64:	cardEffect(council_room, 0, 0, 0, g, 0, 0);
call    0 returned 100%
        1:   65:	printf("\nHand Count Of the CURRENT Player after council_room Card is Played: \n\n");
call    0 returned 100%
        1:   66:	if(g->handCount[0] != expectedHandCountAfterCouncil_room){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   67:		printf("ERROR: Hand Count Should be: %d. Instead Hand Count is: %d \n", expectedHandCountAfterCouncil_room, g->handCount[0]);
call    0 returned 100%
        -:   68:	}
        -:   69:	else{
    #####:   70:		printf("No Errors were detected in the Council_room card. Hand Count is: %d\n", g->handCount[0]);
call    0 never executed
        -:   71:	}
        -:   72:
        1:   73:    printf("\nHand Count Of the OTHER Player after council_room Card is Played: \n\n");
call    0 returned 100%
        1:   74:	if(g->handCount[1] != expectedHandCountAfterCouncil_room2){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   75:		printf("ERROR: Hand Count Should be: %d. Instead Hand Count is: %d \n", expectedHandCountAfterCouncil_room2, g->handCount[1]);
call    0 never executed
        -:   76:	}
        -:   77:	else{
        1:   78:		printf("No Errors were detected in the Council_room card. Hand Count is: %d\n", g->handCount[1]);
call    0 returned 100%
        -:   79:	}
        1:   80:	printf("\nunit Test: Council_room test successful \n");
call    0 returned 100%
        1:   81:return 0;
        -:   82:}
        -:   83:
%****************************VILLAGE CARD TEST****************************%


 Unit Test for Village
Hand Count before Village Card is Played: 5 
Num Action before Village Card is Played: 1 

Hand Count Of the Player after village Card is Played: 

No Errors were detected in the Village card. Hand Count is: 5

Num Action Of the Player after village Card is Played: 

ERROR: Num Action Should be: 3. Instead Hand Count is: 2 

unit Test: Council_room test successful 
File 'cardtest4.c'
Lines executed:90.00% of 20
Creating 'cardtest4.c.gcov'

File 'cardtest4.c'
Lines executed:90.00% of 20
Branches executed:100.00% of 4
Taken at least once:50.00% of 4
Calls executed:83.33% of 12
Creating 'cardtest4.c.gcov'

        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:#include <time.h>
        -:    8:#include <stdlib.h>
        -:    9://makefile was taken from https://github.com/aburasali/cs362sp16/blob/master/projects/batese/dominion/Makefile
        -:   10:
        -:   11:
        -:   12://testing village card
        -:   13:/*
        -:   14:int card_Village(struct gameState *state, int handPos){
        -:   15:      int currentPlayer = whoseTurn(state);
        -:   16:      //+1 Card
        -:   17:      drawCard(currentPlayer, state);
        -:   18:
        -:   19:      //+2 Actions
        -:   20:      state->numActions = state->numActions + 3;
        -:   21:
        -:   22:      //discard played card from hand
        -:   23:      discardCard(handPos, currentPlayer, state, 0);
        -:   24:      return 0;
        -:   25:
        -:   26:
        -:   27:}
        -:   28:
        -:   29:*/
        -:   30:
        -:   31:
        -:   32:
function main called 1 returned 100% blocks executed 88%
        1:   33:int main(){
        1:   34:    struct gameState* g = malloc(sizeof(struct gameState));
        -:   35:	int expectedHandCountAfterVillage, expectednumActionsAfterVillage;
        1:   36:	int k[10] = {smithy, adventurer, feast, council_room, embargo, village, minion, mine, cutpurse, sea_hag, tribute};
        1:   37:	printf("\n\n Unit Test for Village\n");
call    0 returned 100%
        -:   38:    //initializing a game: 2 players, cards- see above, seed =100, and game
        1:   39:	initializeGame(2, k, 100, g);
call    0 returned 100%
        -:   40:    //for the village card, the user draws 1 card, so the hand count should go +1
        1:   41:	expectedHandCountAfterVillage = g->handCount[0];
        -:   42:	//expected number of action will be +2
        1:   43:	expectednumActionsAfterVillage =  g->numActions +2;
        -:   44:	//testing the current player
        1:   45:	printf("Hand Count before Village Card is Played: %d \n", g->handCount[0]);
call    0 returned 100%
        1:   46:	printf("Num Action before Village Card is Played: %d \n", g->numActions);
call    0 returned 100%
        -:   47:
        -:   48:    //( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:   49:    //play smithy card
        1:   50:	cardEffect(village, 0, 0, 0, g, 0, 0);
call    0 returned 100%
        1:   51:	printf("\nHand Count Of the Player after village Card is Played: \n\n");
call    0 returned 100%
        1:   52:	if(g->handCount[0] != expectedHandCountAfterVillage){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   53:		printf("ERROR: Hand Count Should be: %d. Instead Hand Count is: %d \n", expectedHandCountAfterVillage, g->handCount[0]);
call    0 never executed
        -:   54:	}
        -:   55:	else{
        1:   56:		printf("No Errors were detected in the Village card. Hand Count is: %d\n", g->handCount[0]);
call    0 returned 100%
        -:   57:	}
        -:   58:
        1:   59:	printf("\nNum Action Of the Player after village Card is Played: \n\n");
call    0 returned 100%
        1:   60:	if(g->numActions != expectednumActionsAfterVillage){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   61:		printf("ERROR: Num Action Should be: %d. Instead Hand Count is: %d \n", expectednumActionsAfterVillage, g->numActions);
call    0 returned 100%
        -:   62:	}
        -:   63:	else{
    #####:   64:		printf("No Errors were detected in the Village card. Num Action is: %d\n", g->numActions);
call    0 never executed
        -:   65:	}
        -:   66:
        -:   67:
        1:   68:	printf("\nunit Test: Council_room test successful \n");
call    0 returned 100%
        1:   69:return 0;
        -:   70:}
        -:   71:
dominion.c:
%****************************DOMINION CODE COVERAGE****************************%
File 'dominion.c'
Lines executed:33.68% of 570
Creating 'dominion.c.gcov'

File 'dominion.c'
Lines executed:33.68% of 570
Branches executed:31.26% of 419
Taken at least once:24.58% of 419
Calls executed:23.16% of 95
Creating 'dominion.c.gcov'

