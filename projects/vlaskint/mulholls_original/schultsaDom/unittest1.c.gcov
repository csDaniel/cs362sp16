        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "stdlib.h"
        -:    2:#include "stdio.h"
        -:    3:#include "string.h"
        -:    4:#include "math.h"
        -:    5:#include "time.h"
        -:    6:
        -:    7:#include "rngs.h"
        -:    8:#include "dominion.h"
        -:    9:#include "dominion_helpers.h"
        -:   10:#include "unitTestLib.h"
        -:   11:
        -:   12:/* Helper Function to Test Function
        -:   13: *
        -:   14: * Description: This is a simple compare function for qsort
        -:   15: *
        -:   16: * Eval: Should not impact outcome of test. Evaluates state->deck as ints
        -:   17: *     and state->deck is already ints. Organizes the ints in the deck. 
        -:   18: *     state will be evaluated in unit test, so function doesn't require
        -:   19: *     direct unit testing.
        -:   20: */
        -:   21:int compare(const void*, const void* );// Need for predeclaration
        -:   22:/*
        -:   23:  if (*(int*)a > *(int*)b)
        -:   24:    return 1;
        -:   25:  if (*(int*)a < *(int*)b)
        -:   26:    return -1;
        -:   27:  return 0;
        -:   28:}
        -:   29:*/
        -:   30:
        -:   31:/* Function to Be Tested
        -:   32: *
        -:   33: * Description: This function accepts a player number and the gamestate and "shuffles" that players deck.
        -:   34: *     The way it shuffles the deck is by:
        -:   35: *     - organizing the current players deck //state affected - vars:deck[player], deckCount[player]
        -:   36: *     WHILE LOOP - Runs for size of state->deckCount[]
        -:   37: *     - A random index is selected and stored in card   //player/state unaffected
        -:   38: *     - The selected card gets copied in a new deck     //player/state unaffected
        -:   39: *     - The selected card gets removed from old deck    //state affected - vars:deck[]
        -:   40: *     - The size of old deck gets decremented		 //state affected - vars:deckCount[]
        -:   41: *     FOR LOOP - Runs for size of new deck
        -:   42: *     - new deck at index i, is copied into old deck i	 //state affected - vars:deck[]
        -:   43: *     - Old deck is incremented			 //state affected - vars:deckCount[] 
        -:   44: *
        -:   45: * Eval: 
        -:   46: *
        -:   47: * Game state variables that will be affected are deck[player][i], and deckCount[player]. 
        -:   48: * The deckCount should be the same after the function runs, even though it is changed in the function
        -:   49: * The deck[player] should contain the same cards after the function as it does before the function
        -:   50: * Ensure that other variables in state are the same. 
        -:   51: * Ensure that original player variable remains unchanged.
        -:   52: * It appears that the function may, rarely, access outside its deck range when
        -:   53: *    randomly picking the cards from the deck to put into newDeck.
        -:   54: *    If Random() = 1, card = deckCount and the highest card position
        -:   55: *    is deckCount - 1.
        -:   56: */
        -:   57:/*
        -:   58:int shuffle(int player, struct gameState *state) {
        -:   59: 
        -:   60:
        -:   61:  int newDeck[MAX_DECK];
        -:   62:  int newDeckPos = 0;
        -:   63:  int card;
        -:   64:  int i;
        -:   65:
        -:   66:  if (state->deckCount[player] < 1)
        -:   67:    return -1;
        -:   68:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:   69:   SORT CARDS IN DECK TO ENSURE DETERMINISM! 
        -:   70:
        -:   71:  while (state->deckCount[player] > 0) {
        -:   72:    card = floor(Random() * state->deckCount[player]);
        -:   73:    newDeck[newDeckPos] = state->deck[player][card];
        -:   74:    newDeckPos++;
        -:   75:    for (i = card; i < state->deckCount[player]-1; i++) {
        -:   76:      state->deck[player][i] = state->deck[player][i+1];
        -:   77:    }
        -:   78:    state->deckCount[player]--;
        -:   79:  }
        -:   80:  for (i = 0; i < newDeckPos; i++) {
        -:   81:    state->deck[player][i] = newDeck[i];
        -:   82:    state->deckCount[player]++;
        -:   83:  }
        -:   84:
        -:   85:  return 0;
        -:   86:}
        -:   87:*/
        -:   88:
function basicReturnTest called 3 returned 100% blocks executed 70%
        3:   89:int basicReturnTest(struct gameState* state){
        -:   90:
        3:   91:   int i, retVal=0;
        -:   92:
       12:   93:   for(i = 0; i < state->numPlayers; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   94:      //Run shuffle on each player in state
        9:   95:      retVal = shuffle(i, state);
call    0 returned 100%
        -:   96:      //Only non-zero return value
        9:   97:      if(state->deckCount[i] == 0 && retVal != -1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
    #####:   98:		 printf("basicReturnTest: Player %i wrong shuffle return value\n", i+1);
call    0 never executed
    #####:   99:		 return -1;
        -:  100:      }
        -:  101:   }
        3:  102:   return retVal;
        -:  103:}
        -:  104:
function stateTest called 3 returned 100% blocks executed 69%
        3:  105:int stateTest(struct gameState* state){
        -:  106:
        3:  107:   struct gameState* cpy = (struct gameState*)(malloc(sizeof(struct gameState)));
        3:  108:   memcpy(cpy, state, sizeof(struct gameState));
        -:  109:
        -:  110:   int i, retVal;
        -:  111:
       12:  112:   for(i = 0; i < state->numPlayers; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        9:  113:      retVal = shuffle(i, state);
call    0 returned 100%
        9:  114:      if(retVal == -1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  115:		 printf("stateTest -1: Player %i cards not shuffled\n", i+1);
call    0 never executed
    #####:  116:		 free(cpy);
    #####:  117:		 return -1;
        -:  118:      } else {
        9:  119:    	  retVal = checkState(cpy, state);
call    0 returned 100%
        -:  120:		 //Checks if deck is shuffled
        9:  121:		 if(retVal != -18){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  122:			printf("stateTest %i: State error\n", retVal);
call    0 never executed
    #####:  123:			free(cpy);
    #####:  124:			return -2;
        -:  125:		 }
        -:  126:      }
        -:  127:   }
        3:  128:   return 0;
        -:  129:}
        -:  130:
function cardTypeCountTest called 3 returned 100% blocks executed 65%
        3:  131:int cardTypeCountTest(struct gameState* state){
        3:  132:   struct gameState* cpy = (struct gameState*)(malloc(sizeof(struct gameState)));
        3:  133:   memcpy(cpy, state, sizeof(struct gameState));
        -:  134:
        -:  135:   int i, retVal;
        -:  136:
       12:  137:   for(i = 0; i < state->numPlayers; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        9:  138:      retVal = shuffle(i, state);
call    0 returned 100%
        9:  139:      if(retVal == -1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  140:		 printf("cardTypeCountTest -1: Player %i has no deck\n", i+1);
call    0 never executed
    #####:  141:		 free(cpy);
    #####:  142:		 return -1;
        -:  143:      } else {
        9:  144:		 retVal = checkDeckCount(cpy, state);
call    0 returned 100%
        9:  145:		 if(retVal){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  146:			printf("cardTypeCountTest %i: Total card count doesn't match\n", retVal);
call    0 never executed
    #####:  147:			free(cpy);
    #####:  148:			return -2;
        -:  149:		 }
        9:  150:		 retVal = checkDeck(cpy, state);
call    0 returned 100%
        9:  151:		 if(retVal){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  152:			printf("cardTypeCountTest %i: Decks don't have the same amount of each type of card\n", retVal);
call    0 never executed
    #####:  153:			free(cpy);
    #####:  154:			return -3;
        -:  155:		 }
        -:  156:      }
        -:  157:   }
        3:  158:   return 0;
        -:  159:}
        -:  160:
function discardCardCountTest called 3 returned 100% blocks executed 65%
        3:  161:int discardCardCountTest(struct gameState* state){
        3:  162:   struct gameState* cpy = (struct gameState*)(malloc(sizeof(struct gameState)));
        3:  163:   memcpy(cpy, state, sizeof(struct gameState));
        -:  164:
        -:  165:   int i, retVal;
        -:  166:
       12:  167:   for(i = 0; i < state->numPlayers; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        9:  168:      retVal = shuffle(i, state);
call    0 returned 100%
        9:  169:      if(retVal == -1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  170:		 printf("discardCardCountTest -1: Player %i has no deck\n", i+1);
call    0 never executed
    #####:  171:		 free(cpy);
    #####:  172:		 return -1;
        -:  173:      } else {
        9:  174:		 retVal = checkDiscardCount(cpy, state);
call    0 returned 100%
        9:  175:		 if(retVal){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  176:			printf("discardCardCountTest %i: Total discard count doesn't match\n", retVal);
call    0 never executed
    #####:  177:			free(cpy);
    #####:  178:			return -2;
        -:  179:		 }
        9:  180:		 retVal = checkDiscard(cpy, state);
call    0 returned 100%
        9:  181:		 if(retVal){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  182:			printf("discardCardCountTest %i: Discards don't have the same amount of each type of card\n", retVal);
call    0 never executed
    #####:  183:			free(cpy);
    #####:  184:			return -3;
        -:  185:		 }
        -:  186:      }
        -:  187:   }
        3:  188:   return 0;
        -:  189:}
        -:  190:
function unitTest called 1 returned 100% blocks executed 89%
        1:  191:int unitTest(){
        -:  192:
        1:  193:   printf("\n+--------------------------------UNIT TEST 1----------------------------+\n");
call    0 returned 100%
        -:  194:   //Create Zeroed Gamestate;
        1:  195:   struct gameState* testState = (struct gameState*)(malloc(sizeof(struct gameState)));
        1:  196:   memset(testState, 0, sizeof(struct gameState));
        1:  197:   int i, retVal = 0;
        -:  198:
        1:  199:   printf("+------zeroStateTest--------+\n\n");
call    0 returned 100%
        -:  200:   //Zero Test
        1:  201:   retVal = shuffle(0,testState);
call    0 returned 100%
        1:  202:   if(retVal != -1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  203:      printf("unitTest %i: Failed Zero State Test\n", retVal);
call    0 never executed
        -:  204:      //return -1;
        -:  205:   } else {
        1:  206:      printf("zeroStateTest: Successful\n");
call    0 returned 100%
        -:  207:   }
        -:  208:
        1:  209:   printf("\n+------basicReturnTest------+\n\n");
call    0 returned 100%
        -:  210:   //Basic Return Value Test for game with players 2, 3, and 4
        4:  211:   for(i = 2; i <= 4; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:  212:      setupRandomTestState(i, testState);
call    0 returned 100%
        3:  213:      retVal = basicReturnTest(testState);
call    0 returned 100%
        3:  214:      if(retVal){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  215:	 printf("unitTest %i: Failed Basic Return Value test for Player %i\n", retVal, i);
call    0 never executed
        -:  216:	 //return -2;
        -:  217:      } else {
        3:  218:	 printf("basicReturnTest (%i players): Successful\n", i);
call    0 returned 100%
        -:  219:      }
        -:  220:   }
        -:  221:
        1:  222:   printf("\n+--------StateTest----------+\n\n");
call    0 returned 100%
        -:  223:   //Checks to ensure only state change is deck is now shuffled
        4:  224:   for(i = 2; i <= 4; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:  225:      setupRandomTestState(i, testState);
call    0 returned 100%
        3:  226:      retVal = stateTest(testState);
call    0 returned 100%
        3:  227:      if(retVal){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  228:	 printf("unitTest %i: Failed State Test\n", retVal);
call    0 never executed
        -:  229:	 //return -3;
        -:  230:      } else {
        3:  231:	 printf("stateTest (%i players): Successful\n", i);
call    0 returned 100%
        -:  232:      }
        -:  233:   }
        -:  234:
        1:  235:   printf("\n+-----cardTypeCountTest----+\n\n");
call    0 returned 100%
        -:  236:   //Checks to ensure the total count, and count of each type of card is the same
        4:  237:   for(i = 2; i <= 4; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:  238:      setupRandomTestState(i, testState);
call    0 returned 100%
        3:  239:      retVal = cardTypeCountTest(testState);
call    0 returned 100%
        3:  240:      if(retVal){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  241:	 printf("unitTest %i: Failed Card Type Count\n", retVal);
call    0 never executed
        -:  242:	 //return -4;
        -:  243:      } else {
        3:  244:	 printf("cardTypeCountTest (%i players): Successful\n", i);
call    0 returned 100%
        -:  245:      }
        -:  246:   }
        -:  247:
        1:  248:   printf("\n+---discardCardCountTest---+\n\n");
call    0 returned 100%
        -:  249:   //Checks to see if discard is affected, comment from dominion.h states assumed empty
        4:  250:   for(i = 2; i <= 4; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:  251:      setupRandomTestState(i, testState);
call    0 returned 100%
        3:  252:      retVal = discardCardCountTest(testState);
call    0 returned 100%
        3:  253:      if(retVal){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  254:	 printf("unitTest %i: Failed Discard Card Type Count\n", retVal);
call    0 never executed
        -:  255:	 //return -5;
        -:  256:      } else {
        3:  257:	 printf("discardCardCountTest (%i players): Successful\n", i);
call    0 returned 100%
        -:  258:      }
        -:  259:   }
        -:  260:
        -:  261:
        1:  262:   free(testState);
        1:  263:   return retVal;
        -:  264:}
        -:  265:
function main called 1 returned 100% blocks executed 100%
        1:  266:int main(){
        1:  267:   int testVal = unitTest();
call    0 returned 100%
        1:  268:   printf("Outcome: %i\n", testVal);
call    0 returned 100%
        1:  269:   return 0;
        -:  270:}
        -:  271:
        -:  272:
        -:  273:
