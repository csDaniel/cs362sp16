        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "stdlib.h"
        -:    2:#include "stdio.h"
        -:    3:#include "string.h"
        -:    4:#include "math.h"
        -:    5:
        -:    6:#include "dominion.h"
        -:    7:#include "dominion_helpers.h"
        -:    8:#include "unitTestLib.h"
        -:    9:
        -:   10:/* Function to Be Tested
        -:   11:*
        -:   12:* Description This function checks the game state to see if the game should
        -:   13:*    be over. If the province count is 0, the game ends. If three supply
        -:   14:*    piles are at 0, the game ends.
        -:   15:*
        -:   16:*    The way it checks is by
        -:   17:*	 - IF supplyCount of provinces is 0, RETURN 1 //state accessed
        -:   18:*	 FOR LOOP - for each of the supply piles 0-25
        -:   19:*	 - If supplyCount of supply is 0, count++     //state accessed
        -:   20:*	 - If count >= 3 (3 supply piles counted), RETURN 1
        -:   21:*	 RETURN 0 if function hasn't returned 1
        -:   22:*
        -:   23:* Eval
        -:   24:*
        -:   25:* Game state is only read, and should remain unchanged.
        -:   26:* Only a 1 or a 0 is returned.
        -:   27:* If there are 0 cards in the province pile, a 1 was returned
        -:   28:* If there are 3 or more piles with 0 supply, a 1 is returned
        -:   29:* If the 2 end game conditions aren't met, a 0 is returned
        -:   30:* It appears that the check for 3 empty supplies only checks the first 24
        -:   31:*    supplies and not up to the 27 supplies.
        -:   32:*/
        -:   33:/*
        -:   34:int isGameOver(struct gameState *state) {
        -:   35: int i;
        -:   36: int j;
        -:   37:
        -:   38: //if stack of Province cards is empty, the game ends
        -:   39: if (state->supplyCount[province] == 0)
        -:   40:   {
        -:   41:	 return 1;
        -:   42:   }
        -:   43:
        -:   44: //if three supply pile are at 0, the game ends
        -:   45: j = 0;
        -:   46: for (i = 0; i < 25; i++)
        -:   47:   {
        -:   48:	 if (state->supplyCount[i] == 0)
        -:   49:{
        -:   50:  j++;
        -:   51:}
        -:   52:   }
        -:   53: if ( j >= 3)
        -:   54:   {
        -:   55:	 return 1;
        -:   56:   }
        -:   57:
        -:   58: return 0;
        -:   59:}
        -:   60:*/
        -:   61:
        -:   62:
function basicReturnTest called 4 returned 100% blocks executed 71%
        4:   63:int basicReturnTest(struct gameState* state){
        -:   64:
        4:   65:  int retVal = isGameOver(state);
call    0 returned 100%
        4:   66:  int gameOver = checkGameOver(state);
call    0 returned 100%
        -:   67:
        -:   68:  //Only non-zero return value
        4:   69:  if(retVal != gameOver){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   70:	 printf("basicReturnTest - Game Over Conditions Don't Match\n");
call    0 never executed
    #####:   71:	 return -1;
        -:   72:  }
        4:   73:  return 0;
        -:   74:}
        -:   75:
        -:   76:
function allNonProvinceEmptyReturnTest called 3 returned 100% blocks executed 80%
        3:   77:int allNonProvinceEmptyReturnTest(struct gameState* state){
        -:   78:
        -:   79:	int i;
       84:   80:	for(i = 0; i < treasure_map+1; i++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       81:   81:		state->supplyCount[i] = 0;
        -:   82:	}
        3:   83:	state->supplyCount[province] = 1;
        3:   84:	int retVal = isGameOver(state);
call    0 returned 100%
        3:   85:	if(retVal != checkGameOver(state)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   86:		printf("allNonProvinceEmptyReturnTest - Game Over Evaluation Differs\n");
call    0 never executed
    #####:   87:		return -1;
        -:   88:	}
        -:   89:
        3:   90:	return 0;
        -:   91:}
        -:   92:
        -:   93:
function noEmptySuppliesReturnTest called 9 returned 100% blocks executed 80%
        9:   94:int noEmptySuppliesReturnTest(struct gameState* state){
        -:   95:
        -:   96:	int i;
      252:   97:	for(i = 0; i < treasure_map+1; i++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
      243:   98:		state->supplyCount[i] = 1;
        -:   99:	}
        -:  100:
        9:  101:	int retVal = isGameOver(state);
call    0 returned 100%
        -:  102:
        9:  103:	if(retVal != checkGameOver(state)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:  104:		printf("noEmptySuppliesReturnTest - Game Over Evaluation Differs\n");
call    0 never executed
    #####:  105:		return -1;
        -:  106:	}
        -:  107:
        9:  108:	return 0;
        -:  109:}
        -:  110:
        -:  111:
        -:  112:
function stateTest called 3 returned 100% blocks executed 71%
        3:  113:int stateTest(struct gameState* state){
        -:  114:
        3:  115:	struct gameState* cpy = (struct gameState*)(malloc(sizeof(struct gameState)));
        3:  116:	memcpy(cpy, state, sizeof(struct gameState));
        -:  117:
        3:  118:	isGameOver(state);
call    0 returned 100%
        -:  119:
        3:  120:	int retVal = checkState(cpy, state);
call    0 returned 100%
        -:  121:
        3:  122:	if(retVal){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  123:		printf("stateTest %i State error\n", retVal);
call    0 never executed
    #####:  124:		return -1;
        -:  125:	}
        -:  126:
        3:  127:	free(cpy);
        3:  128:	return 0;
        -:  129:}
        -:  130:
        -:  131:
function unitTest called 1 returned 100% blocks executed 90%
        1:  132:int unitTest(){
        -:  133:
        1:  134:	printf("\n+--------------------------------UNIT TEST 3----------------------------+\n");
call    0 returned 100%
        -:  135:
        -:  136:	//Create Zeroed Gamestate;
        1:  137:	struct gameState* testState = (struct gameState*)(malloc(sizeof(struct gameState)));
        1:  138:	memset(testState, 0, sizeof(struct gameState));
        1:  139:	int i, retVal = 0;
        -:  140:
        1:  141:	printf("+------zeroStateTest--------+\n\n");
call    0 returned 100%
        -:  142:
        -:  143:	//Zero Test
        1:  144:	retVal = basicReturnTest(testState);
call    0 returned 100%
        -:  145:
        1:  146:	if(retVal != 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  147:		printf("unitTest %i Failed Zero State Test\n", retVal);
call    0 never executed
        -:  148:		//return -1;
        -:  149:	} else {
        1:  150:		printf("zeroStateTest Successful\n");
call    0 returned 100%
        -:  151:	}
        -:  152:
        1:  153:	printf("\n+--------basicReturnTest----------+\n\n");
call    0 returned 100%
        -:  154:	//Checks to ensure cards count accross a variety of states for a variety of players
        4:  155:	for(i = 2; i <= 4; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:  156:		setupRandomTestState(i, testState);
call    0 returned 100%
        3:  157:		retVal = basicReturnTest(testState);
call    0 returned 100%
        3:  158:		if(retVal){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  159:			printf("unitTest %i Failed Basic Return Test\n", retVal);
call    0 never executed
        -:  160:			//return -2;
        -:  161:		} else {
        3:  162:			printf("basicReturnTest (%i players) Successful\n", i);
call    0 returned 100%
        -:  163:		}
        -:  164:	}
        -:  165:
        1:  166:	printf("\n+--------allNonProvinceEmptyReturnTest----------+\n\n");
call    0 returned 100%
        -:  167:	//Checks to ensure cards count accross a variety of states for a variety of players
        4:  168:	for(i = 2; i <= 4; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  169:
        3:  170:		setupRandomTestState(i, testState);
call    0 returned 100%
        3:  171:		retVal = allNonProvinceEmptyReturnTest(testState);
call    0 returned 100%
        3:  172:		if(retVal){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  173:			printf("unitTest %i Failed All Non Province Empty Return Test\n", retVal);
call    0 never executed
        -:  174:			//return -3;
        -:  175:		} else {
        3:  176:			printf("allNonProvinceEmptyReturnTest (%i players) Successful\n", i);
call    0 returned 100%
        -:  177:		}
        -:  178:	}
        -:  179:
        1:  180:	printf("\n+--------noEmptySuppliesReturnTest----------+\n\n");
call    0 returned 100%
        -:  181:	//Checks to ensure cards count accross a variety of states for a variety of players
        4:  182:	for(i = 2; i <= 4; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:  183:			setupRandomTestState(i, testState);
call    0 returned 100%
        3:  184:			retVal = noEmptySuppliesReturnTest(testState);
call    0 returned 100%
        3:  185:		if(retVal){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  186:			printf("unitTest %i Failed No Empty Supplies Return Test\n", retVal);
call    0 never executed
        -:  187:			//return -4;
        -:  188:		} else {
        3:  189:			printf("noSuppliesEmptyReturnTest (%i players) Successful\n", i);
call    0 returned 100%
        -:  190:		}
        -:  191:	}
        -:  192:
        -:  193:
        1:  194:	printf("\n+--------provinceEmptyReturnTest----------+\n\n");
call    0 returned 100%
        -:  195:	//Checks to ensure cards count accross a variety of states for a variety of players
        4:  196:	for(i = 2; i <= 4; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:  197:		setupRandomTestState(i, testState);
call    0 returned 100%
        3:  198:		noEmptySuppliesReturnTest(testState); //Sets all supplies to 1
call    0 returned 100%
        3:  199:		testState->supplyCount[province] = 0;
        -:  200:
        3:  201:		if(checkGameOver(testState) != isGameOver(testState)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####:  202:			printf("unitTest - Failed No Empty Supplies Return Test\n");
call    0 never executed
        -:  203:			//return -5;
        -:  204:		} else {
        3:  205:			printf("provinceEmptyReturnTest (%i players) Successful\n", i);
call    0 returned 100%
        -:  206:		}
        -:  207:	}
        -:  208:
        1:  209:	printf("\n+--------SpecificStateTest----------+\n\n");
call    0 returned 100%
        -:  210:	//Checks to ensure cards count accross a variety of states for a variety of players
        4:  211:	for(i = 2; i <= 4; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:  212:		setupRandomTestState(i, testState);
call    0 returned 100%
        3:  213:		noEmptySuppliesReturnTest(testState); //Sets all supplies to 1
call    0 returned 100%
        -:  214:		int j;
       12:  215:		for(j = 24; j < treasure_map+1; j++){ //Sets top 3 supplies to 0
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        9:  216:			testState->supplyCount[j] = 0;
        -:  217:		}
        3:  218:		if(checkGameOver(testState) != isGameOver(testState)){
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        3:  219:			printf("specificStateTest - Failed Specific State Test\n");
call    0 returned 100%
        -:  220:			//return -6;
        -:  221:		} else {
    #####:  222:			printf("provinceEmptyReturnTest (%i players) Successful\n", i);
call    0 never executed
        -:  223:		}
        -:  224:	}
        -:  225:
        1:  226:	printf("\n+--------stateTest----------+\n\n");
call    0 returned 100%
        -:  227:	//Checks to ensure no values in current state are changed after function
        4:  228:	for(i = 2; i <= 4; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:  229:		setupRandomTestState(i, testState);
call    0 returned 100%
        3:  230:		retVal = stateTest(testState);
call    0 returned 100%
        3:  231:		if(retVal){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  232:			printf("unitTest %i Failed State Test\n", retVal);
call    0 never executed
        -:  233:			//return -7;
        -:  234:		} else {
        3:  235:			printf("stateTest (%i players) Successful\n", i);
call    0 returned 100%
        -:  236:		}
        -:  237:	}
        -:  238:
        1:  239:		return 0;
        -:  240:	}
        -:  241:
function main called 1 returned 100% blocks executed 100%
        1:  242:int main(){
        1:  243:	int retVal = unitTest();
call    0 returned 100%
        1:  244:	printf("Outcome %i\n", retVal);
call    0 returned 100%
        1:  245:	return 0;
        -:  246:}
        -:  247:
