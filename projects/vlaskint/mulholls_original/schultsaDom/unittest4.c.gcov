        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "stdlib.h"
        -:    2:#include "string.h"
        -:    3:#include "stdio.h"
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include "unitTestLib.h"
        -:    8:
        -:    9:/* Function to Be Tested
        -:   10: *
        -:   11: * Description: 
        -:   12: *
        -:   13: *    The way it checks is by:
        -:   14: *	 IF trashFlag is not set
        -:   15: *	 -set playedCards tracks the card played from hand  //state affected - vars: playedCard[max]
        -:   16: *	 -playedCardCount is incremented		    //state affected - vars: playedCardCount
        -:   17: *	 ENDIF  
        -:   18: *	 -playedCard from hand is set to -1		    //state affected - vars: hand[player][handpos]
        -:   19: *	 IF card played was last position in hand	 
        -:   20: *	 -remove from hand				    //state affected - vars: handCount[player]
        -:   21: *	 ELSEIF card played was only card
        -:   22: *	 -remove from hand				    //state affected - vars: handCount[player]
        -:   23: *	 ELSE
        -:   24: *	 -copy over card with last card in hand		    //state affected - vars: hand[player][pos]
        -:   25: *	 -remove last card				    //state affected - vars: hand[player][highCardPos]
        -:   26: *	 -decrement handCount				    //state affected - vars: handCount[player]
        -:   27: *
        -:   28: * Eval: 
        -:   29: * 
        -:   30: * DOESN'T ACTUALLY DISCARD TO DISCARD OR INCREMENT DISCARD COUNT
        -:   31: * Game state variables playedCards, playedCardCount, hand[currentPlayer][handPos], and handCount[currentPlayer] altered
        -:   32: * playedCards[playedCardCount] should be:	1) Unchanged OR
        -:   33: *						2) Equal to hand[currentPlayer][handPos] before function ran
        -:   34: * playedCardCount should be:	 1) Unchanged OR
        -:   35: *				 2) Incremented
        -:   36: * state->handCount[currentPlayer] should be decremented only once
        -:   37: * state->hand[currentPlayer][handPos] should be:     1) Equal to -1 OR
        -:   38: *						      2) Equal to the highest card in hand at beginning of turn
        -:   39: * ALWAYS returns 0
        -:   40: * It appears that the "else if" statement is redundant as if its the only card in your hand, it will also be
        -:   41: *    the last card in your hand.
        -:   42: */
        -:   43:/*
        -:   44:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -:   45:{
        -:   46:	
        -:   47:  //if card is not trashed, added to Played pile 
        -:   48:  if (trashFlag < 1)
        -:   49:    {
        -:   50:      //add card to played pile
        -:   51:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        -:   52:      state->playedCardCount++;
        -:   53:    }
        -:   54:	
        -:   55:  //set played card to -1
        -:   56:  state->hand[currentPlayer][handPos] = -1;
        -:   57:	
        -:   58:  //remove card from player's hand
        -:   59:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -:   60:    {
        -:   61:      //reduce number of cards in hand
        -:   62:      state->handCount[currentPlayer]--;
        -:   63:    }
        -:   64:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -:   65:    {
        -:   66:      //reduce number of cards in hand
        -:   67:      state->handCount[currentPlayer]--;
        -:   68:    }
        -:   69:  else 	
        -:   70:    {
        -:   71:      //replace discarded card with last card in hand
        -:   72:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -:   73:      //set last card to -1
        -:   74:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -:   75:      //reduce number of cards in hand
        -:   76:      state->handCount[currentPlayer]--;
        -:   77:    }
        -:   78:	
        -:   79:  return 0;
        -:   80:}
        -:   81:*/
function basicReturnTest called 4 returned 100% blocks executed 59%
        4:   82:int basicReturnTest(struct gameState* state){
        -:   83:
        4:   84:   struct gameState* cpy = (struct gameState*)(malloc(sizeof(struct gameState)));
        4:   85:   memcpy(cpy, state, sizeof(struct gameState));
        -:   86:
        -:   87:   int i, retVal;
       13:   88:   for(i = 0; i < state->numPlayers; i++){
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        9:   89:      retVal = discardCard(0, i, state, 0);
call    0 returned 100%
        9:   90:      int errorTens = i * 10;
        -:   91:      int errorCode;
        9:   92:      if(retVal){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   93:    	 errorCode = -100-errorTens-retVal;
    #####:   94:		 printf("basicReturnTest %i: discardCard Returning Non-zero Value\n", errorCode);
call    0 never executed
    #####:   95:		 return errorCode;
        -:   96:      }
        9:   97:      memcpy(state, cpy, sizeof(struct gameState));
        -:   98:
        9:   99:      retVal = discardCard(state->handCount[i]-1, i, state, 0);
call    0 returned 100%
        9:  100:      if(retVal){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  101:     	 errorCode = -200-errorTens-retVal;
    #####:  102: 		 printf("basicReturnTest %i: discardCard Returning Non-zero Value\n", errorCode);
call    0 never executed
    #####:  103:		 return errorCode;
        -:  104:      }
        9:  105:      memcpy(state, cpy, sizeof(struct gameState));
        -:  106:
        9:  107:      retVal = discardCard(1, i, state, 0);
call    0 returned 100%
        9:  108:      if(retVal){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  109:     	 errorCode = -300-errorTens-retVal;
    #####:  110: 		 printf("basicReturnTest %i: discardCard Returning Non-zero Value\n", errorCode);
call    0 never executed
    #####:  111:		 return errorCode;
        -:  112:      }
        9:  113:      memcpy(state, cpy, sizeof(struct gameState));
        -:  114:
        9:  115:      retVal = discardCard(0, i, state, 1);
call    0 returned 100%
        9:  116:      if(retVal){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  117:     	 errorCode = -400-errorTens-retVal;
    #####:  118: 		 printf("basicReturnTest %i: discardCard Returning Non-zero Value\n", errorCode);
call    0 never executed
    #####:  119:		 return errorCode;
        -:  120:      }
        9:  121:      memcpy(state, cpy, sizeof(struct gameState));
        -:  122:
        9:  123:      retVal = discardCard(state->handCount[i]-1, i, state, 1);
call    0 returned 100%
        9:  124:      if(retVal){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  125:     	 errorCode = -500-errorTens-retVal;
    #####:  126: 		 printf("basicReturnTest %i: discardCard Returning Non-zero Value\n", errorCode);
call    0 never executed
    #####:  127:		 return errorCode;
        -:  128:      }
        9:  129:      memcpy(state, cpy, sizeof(struct gameState));
        -:  130:
        9:  131:      retVal = discardCard(1, i, state, 1);
call    0 returned 100%
        9:  132:      if(retVal){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  133:     	 errorCode = -600-errorTens-retVal;
    #####:  134: 		 printf("basicReturnTest %i: discardCard Returning Non-zero Value\n", errorCode);
call    0 never executed
    #####:  135:		 return errorCode;
        -:  136:      }
        -:  137:
        -:  138:   }
        4:  139:   return 0;
        -:  140:}
        -:  141:
        -:  142://Corrects a state difference in state by matching to cpy's state
        -:  143://Returns the unitTestLib code for which state variable was affected.
function _stateTestHelper called 15 returned 100% blocks executed 71%
       15:  144:int _stateTestHelper(struct gameState* state, struct gameState* cpy, int i){
        -:  145:   int j;
       15:  146:   int retVal = abs(checkState(cpy, state));
call    0 returned 100%
       15:  147:   switch (retVal){
branch  0 taken 20%
branch  1 taken 20%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 20%
branch  5 taken 20%
branch  6 taken 20%
        -:  148:      case 11:
     1503:  149:		 for(j = 0; j < MAX_HAND; j++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     1500:  150:			state->hand[i][j] = cpy->hand[i][j];
        -:  151:		 }
        3:  152:		 return 11;
        -:  153:
        -:  154:      case 12:
        3:  155:		 state->handCount[i] = cpy->handCount[i];
        3:  156:		 return 12;
        -:  157:
        -:  158:      case 13:
    #####:  159: 		 for(j = 0; j < MAX_DECK; j++){
branch  0 never executed
branch  1 never executed
    #####:  160: 			state->discard[i][j] = cpy->discard[i][j];
        -:  161: 		 }
    #####:  162: 		 return 13;
        -:  163:
        -:  164:      case 14:
    #####:  165: 		 state->discardCount[i] = cpy->discardCount[i];
    #####:  166: 		 return 14;
        -:  167:
        -:  168:      case 15:
     1503:  169:		 for(j = 0; j < MAX_DECK; j++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     1500:  170:			state->playedCards[j] = cpy->playedCards[j];
        -:  171:		 }
        3:  172:		 return 15;
        -:  173:
        -:  174:      case 16:
        3:  175:		 state->playedCardCount = cpy->playedCardCount;
        3:  176:		 return 16;
        -:  177:
        -:  178:      default:
        3:  179:	 if(retVal){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  180:	    return retVal;
        -:  181:	 } else {
        3:  182:	    return 0;
        -:  183:	 }
        -:  184:   }
        -:  185:}
        -:  186:
        -:  187://Counts the number of states set to 1 in tracker
function _stateTrackerChecker called 0 returned 0% blocks executed 0%
    #####:  188:int _stateTrackerChecker(int* tracker){
        -:  189:   int i;
    #####:  190:   int count = 0;
    #####:  191:   for(i = 0; i < 19; i++){
branch  0 never executed
branch  1 never executed
    #####:  192:      if(tracker[i] > 0){
branch  0 never executed
branch  1 never executed
    #####:  193:	 count++;
        -:  194:      }
        -:  195:   }
    #####:  196:   return count;
        -:  197:}
        -:  198:
        -:  199://Manages the workings of the individual tests
function _stateTestDiscreteTest called 3 returned 100% blocks executed 53%
        3:  200:int _stateTestDiscreteTest(int handPos, int player, struct gameState* state, struct gameState* cpy, int trash, int totalChanges){
        -:  201:
        -:  202:   //Discard requested card
        3:  203:   discardCard(handPos, player, state, trash);
call    0 returned 100%
        -:  204:
        -:  205:   //Create a state change tracker
        3:  206:   int* stateTracker = (int*)(malloc(19*sizeof(int)));
        3:  207:   memset(stateTracker, 0, 19*sizeof(int));
        -:  208:
        -:  209:   //Flag all the states that were changed by running discardCard()
        -:  210:   int retVal;
        -:  211:   do{
       15:  212:      retVal = _stateTestHelper(state, cpy, player);
call    0 returned 100%
       15:  213:      if(retVal){
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
       12:  214:    	  stateTracker[retVal] = 1;
        -:  215:      }
       15:  216:   } while (retVal);
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  217:
        -:  218:   //discard[] expected change
        3:  219:   if(!stateTracker[13]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:  220:	   return 1;
        -:  221:   }
        -:  222:   //discard count
    #####:  223:   if(!stateTracker[14]){
branch  0 never executed
branch  1 never executed
    #####:  224:	   return 2;
        -:  225:   }
        -:  226:
        -:  227:   //Is card actually discarded?
    #####:  228:   if(state->discard[player][state->discardCount[player]]-1 != cpy->hand[player][handPos]){
branch  0 never executed
branch  1 never executed
    #####:  229:	   return 3;
        -:  230:   }
        -:  231:
        -:  232:   //Count all the total number of states affected
    #####:  233:   int sc = _stateTrackerChecker(stateTracker);
call    0 never executed
        -:  234:
        -:  235:   //If count of changed states from discardCard doesn't match expected...
    #####:  236:   if(sc != totalChanges){
branch  0 never executed
branch  1 never executed
    #####:  237:      return sc-totalChanges;
        -:  238:   } else {
    #####:  239:      return 0;
        -:  240:   }
        -:  241:}
        -:  242:
        -:  243://Total state test 
function stateTest called 3 returned 100% blocks executed 24%
        3:  244:int stateTest(struct gameState* state){
        -:  245:
        3:  246:   struct gameState* cpy = (struct gameState*)(malloc(sizeof(struct gameState)));
        3:  247:   memcpy(cpy, state, sizeof(struct gameState));
        -:  248:
        -:  249:   int i, retVal;
        -:  250:   //For Each Player
        3:  251:   for(i = 0; i < state->numPlayers; i++){
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        3:  252:	  int errorTens = i * 10;
        -:  253:	  int errorCode;
        -:  254:      //Perform test on card in position 0, and non-trash card
        3:  255:      retVal = _stateTestDiscreteTest(0,i,state,cpy,0,6);
call    0 returned 100%
        3:  256:      if(retVal){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:  257:    	 errorCode = -100-errorTens-retVal;
        3:  258:		 printf("stateTest %i: Incorrect State Changes\n", errorCode);
call    0 returned 100%
        3:  259:		 return errorCode;
        -:  260:      }
    #####:  261:      memcpy(state, cpy, sizeof(struct gameState));
        -:  262:
        -:  263:      //Perform test on card in last position of hand, and non-trash card
    #####:  264:      retVal = _stateTestDiscreteTest(state->handCount[i]-1,i,state,cpy,0, 6);
call    0 never executed
    #####:  265:      if(retVal){
branch  0 never executed
branch  1 never executed
    #####:  266:     	 errorCode = -200-errorTens-retVal;
    #####:  267: 		 printf("stateTest %i: Incorrect State Changes\n", errorCode);
call    0 never executed
    #####:  268: 		 return errorCode;
        -:  269:      }
    #####:  270:      memcpy(state, cpy, sizeof(struct gameState));
        -:  271:
        -:  272:      //Perform test on card in position 0, trash card
    #####:  273:      retVal = _stateTestDiscreteTest(0,i,state,cpy,1,4);
call    0 never executed
    #####:  274:      if(retVal){
branch  0 never executed
branch  1 never executed
    #####:  275:     	 errorCode = -300-errorTens-retVal;
    #####:  276: 		 printf("stateTest %i: Incorrect State Changes\n", errorCode);
call    0 never executed
    #####:  277: 		 return errorCode;
        -:  278:      }
    #####:  279:      memcpy(state, cpy, sizeof(struct gameState));
        -:  280:
        -:  281:      //Perform test on card in last position of hand, trash card
    #####:  282:      retVal = _stateTestDiscreteTest(state->handCount[i]-1,i,state,cpy,1,4);
call    0 never executed
    #####:  283:      if(retVal){
branch  0 never executed
branch  1 never executed
    #####:  284:     	 errorCode = -400-errorTens-retVal;
    #####:  285: 		 printf("stateTest %i: Incorrect State Changes\n", errorCode);
call    0 never executed
    #####:  286: 		 return errorCode;
        -:  287:      }
    #####:  288:      memcpy(state, cpy, sizeof(struct gameState));
        -:  289:
        -:  290:      //1 card in hand
    #####:  291:      memset(state->hand[i], -1, state->handCount[i] * sizeof(int));
    #####:  292:      state->handCount[i] = 1;
        -:  293:
        -:  294:      //Perform test on last card in hand, non-trash
    #####:  295:      retVal = _stateTestDiscreteTest(0,i,state,cpy,0,6);
call    0 never executed
    #####:  296:      if(retVal){
branch  0 never executed
branch  1 never executed
    #####:  297:     	 errorCode = -500-errorTens-retVal;
    #####:  298: 		 printf("stateTest %i: Incorrect State Changes\n", errorCode);
call    0 never executed
    #####:  299: 		 return errorCode;
        -:  300:      }
    #####:  301:      memcpy(state, cpy, sizeof(struct gameState));
    #####:  302:      memset(state->hand[i], -1, state->handCount[i] * sizeof(int));
    #####:  303:      state->handCount[i] = 1;
        -:  304:
        -:  305:      //Perform test on last card in hand, trash card
    #####:  306:      retVal = _stateTestDiscreteTest(0,i,state,cpy,1,4);
call    0 never executed
    #####:  307:      if(retVal){
branch  0 never executed
branch  1 never executed
    #####:  308:     	 errorCode = -600-errorTens-retVal;
    #####:  309: 		 printf("stateTest %i: Incorrect State Changes\n", errorCode);
call    0 never executed
    #####:  310: 		 return errorCode;
        -:  311:      }
        -:  312:
        -:  313:   }
    #####:  314:   free(cpy);
    #####:  315:   return 0;
        -:  316:}
        -:  317:
        -:  318:
function unitTest called 1 returned 100% blocks executed 91%
        1:  319:int unitTest(){
        -:  320:
        1:  321:   printf("\n+--------------------------------UNIT TEST 4----------------------------+\n");
call    0 returned 100%
        -:  322:   //Create Zeroed Gamestate;
        1:  323:   struct gameState* testState = (struct gameState*)(malloc(sizeof(struct gameState)));
        1:  324:   memset(testState, 0, sizeof(struct gameState));
        1:  325:   int i, retVal = 0;
        -:  326:
        1:  327:   printf("+------zeroStateTest--------+\n\n");
call    0 returned 100%
        -:  328:   //Zero Test
        1:  329:   retVal = basicReturnTest(testState);
call    0 returned 100%
        1:  330:   if(retVal != 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  331:      printf("unitTest %i: Failed Zero State Test\n", retVal);
call    0 never executed
        -:  332:      //return -1;
        -:  333:   } else {
        1:  334:      printf("zeroStateTest: Successful\n");
call    0 returned 100%
        -:  335:   }
        -:  336:
        1:  337:   printf("\n+--------basicReturnTest----------+\n\n");
call    0 returned 100%
        -:  338:   //Checks to ensure cards count accross a variety of states for a variety of players
        4:  339:   for(i = 2; i <= 4; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:  340:      setupRandomTestState(i, testState);
call    0 returned 100%
        -:  341:      int j;
        -:  342:      //Ensures at least 3 cards in hand
       12:  343:      for(j = 0; j < i; j++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        9:  344:	 testState->handCount[j] += 3;
        9:  345:	 testState->hand[j][testState->handCount[j]-2] = rand() % (treasure_map+1);
call    0 returned 100%
        9:  346:	 testState->hand[j][testState->handCount[j]-3] = rand() % (treasure_map+1);
call    0 returned 100%
        9:  347:	 testState->hand[j][testState->handCount[j]-4] = rand() % (treasure_map+1);
call    0 returned 100%
        -:  348:      }
        3:  349:      retVal = basicReturnTest(testState);
call    0 returned 100%
        3:  350:      if(retVal){   
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  351:	 printf("unitTest %i: Failed Basic Return Test\n", retVal);
call    0 never executed
        -:  352:	 //return -2;
        -:  353:      } else {
        3:  354:	 printf("basicReturnTest (%i players): Successful\n", i);
call    0 returned 100%
        -:  355:      }
        -:  356:   }
        -:  357:
        -:  358:
        1:  359:   printf("\n+--------stateTest----------+\n\n");
call    0 returned 100%
        -:  360:   //Checks to ensure no values in current state are changed after function
        4:  361:   for(i = 2; i <= 4; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:  362:      setupRandomTestState(i, testState);
call    0 returned 100%
        3:  363:      retVal = stateTest(testState);
call    0 returned 100%
        3:  364:      if(retVal){   
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:  365:		 printf("unitTest %i: Failed State Test\n", retVal);
call    0 returned 100%
        -:  366:		 //return -3;
        -:  367:      } else {
    #####:  368:	 printf("stateTest (%i players): Successful\n", i);
call    0 never executed
        -:  369:      }
        -:  370:   }
        -:  371:
        1:  372:   return 0;
        -:  373:}
        -:  374:
function main called 1 returned 100% blocks executed 100%
        1:  375:int main(){
        1:  376:   int retVal = unitTest();
call    0 returned 100%
        1:  377:   printf("Outcome: %i\n", retVal);
call    0 returned 100%
        1:  378:   return 0;
        -:  379:}
