        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "stdlib.h"
        -:    2:#include "stdio.h"
        -:    3:#include "string.h"
        -:    4:
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include "rngs.h"
        -:    8:#include "unitTestLib.h"
        -:    9:
        -:   10:/* Function to Be Tested
        -:   11: *
        -:   12: * Description: This function counts the instances of the card int passed to it 
        -:   13: *    in the hand, deck, and discard piles of the player int passed to it.
        -:   14: *
        -:   15: *    The way it searches is by:
        -:   16: *
        -:   17: *	 FOR LOOP - From 0 to deckCount
        -:   18: *	 - If deck[player][i] == card, count++	//state accessed, card accessed, no variables affected
        -:   19: *	 FOR LOOP - From 0 to handCount
        -:   20: *	 - If hand[player][i] == card, count++	//state accessed, card accessed, no variables affected
        -:   21: *	 FOR LOOP - From 0 to discardCount
        -:   22: *	 - If discard[player][i] == card,count++//state accessed, card accessed, no variables affected
        -:   23: *	 RETURN count
        -:   24: *
        -:   25: * Eval: 
        -:   26: *
        -:   27: * This function should only read data, and not write it.
        -:   28: * Game state should remain unchanged.
        -:   29: * Original player variable should remain unchanged
        -:   30: * Original card variable shoudl remain unchanged.
        -:   31: * The total number of card in deck, hand, and discard should be returned
        -:   32: */
        -:   33:/*
        -:   34:int fullDeckCount(int player, int card, struct gameState *state) {
        -:   35:  int i;
        -:   36:  int count = 0;
        -:   37:
        -:   38:  for (i = 0; i < state->deckCount[player]; i++)
        -:   39:    {
        -:   40:      if (state->deck[player][i] == card) count++;
        -:   41:    }
        -:   42:
        -:   43:  for (i = 0; i < state->handCount[player]; i++)
        -:   44:    {
        -:   45:      if (state->hand[player][i] == card) count++;
        -:   46:    }
        -:   47:
        -:   48:  for (i = 0; i < state->discardCount[player]; i++)
        -:   49:    {
        -:   50:      if (state->discard[player][i] == card) count++;
        -:   51:    }
        -:   52:
        -:   53:  return count;
        -:   54:}
        -:   55:*/
        -:   56:
function basicReturnTest called 4 returned 100% blocks executed 85%
        4:   57:int basicReturnTest(struct gameState* state){
        -:   58:
        -:   59:   int i, j, retVal;
        -:   60:
       13:   61:   for(i = 0; i < state->numPlayers; i++){
branch  0 taken 69%
branch  1 taken 31% (fallthrough)
        -:   62:
        9:   63:      int* myDeckCount = getDeckCount(i, state);
call    0 returned 100%
        -:   64:
        -:   65:      //Count for each Card
      252:   66:      for(j = 0; j < treasure_map+1; j++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
      243:   67:		 retVal = fullDeckCount(i, j, state);
call    0 returned 100%
        -:   68:		 //Only non-zero return value
      243:   69:		 if(retVal != myDeckCount[j]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   70:			printf("basicReturnTest -1: Card Count Differs by %i\n", retVal - myDeckCount[j]);
call    0 never executed
    #####:   71:			return -1;
        -:   72:		 }
        -:   73:      }
        -:   74:
        9:   75:      free(myDeckCount);
        -:   76:   }
        4:   77:   return 0;
        -:   78:}
        -:   79:
function allCardsTargetReturnTest called 3 returned 100% blocks executed 91%
        3:   80:int allCardsTargetReturnTest(struct gameState* state){
        -:   81:
        -:   82:   int i, j, k, retVal;
        -:   83:
       12:   84:   for(i = 0; i < state->numPlayers; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   85:      //Count for each Card
      252:   86:      for(j = 0; j < treasure_map+1; j++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    64044:   87:		 for(k = 0; k < state->deckCount[i]; k++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    63801:   88:			state->deck[i][k] = j;
        -:   89:		 }
    74358:   90:		 for(k = 0; k < state->handCount[i]; k++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    74115:   91:			state->hand[i][k] = j;
        -:   92:		 }
    48438:   93:		 for(k = 0; k < state->discardCount[i]; k++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    48195:   94:			state->discard[i][k] = j;
        -:   95:		 }
        -:   96:
      243:   97:		 int* myDeckCount = getDeckCount(i, state);
call    0 returned 100%
      243:   98:		 retVal = fullDeckCount(i, j, state);
call    0 returned 100%
        -:   99:		 //Only non-zero return value
      243:  100:		 if(retVal != myDeckCount[j]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  101:			printf("allCardsTargetReturnTest -1: Card Count Differs by %i\n", retVal - myDeckCount[j]);
call    0 never executed
    #####:  102:			return -1;
        -:  103:		 }
      243:  104:		 free(myDeckCount);
        -:  105:      }
        -:  106:
        -:  107:   }
        3:  108:   return 0;
        -:  109:}
        -:  110:
function allCardsNotTargetReturnTest called 3 returned 100% blocks executed 91%
        3:  111:int allCardsNotTargetReturnTest(struct gameState* state){
        -:  112:
        -:  113:   int i, j, k, retVal;
        -:  114:
       12:  115:   for(i = 0; i < state->numPlayers; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
     1589:  116:      for(k = 0; k < state->deckCount[i]; k++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     1580:  117:	 state->deck[i][k] = treasure_map+1;
        -:  118:      }
     1521:  119:      for(k = 0; k < state->handCount[i]; k++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     1512:  120:	 state->hand[i][k] = treasure_map+1;
        -:  121:      }
     1865:  122:      for(k = 0; k < state->discardCount[i]; k++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     1856:  123:	 state->discard[i][k] = treasure_map+1;
        -:  124:      }
        9:  125:      int* myDeckCount = getDeckCount(i, state);
call    0 returned 100%
        -:  126:      //Count for each Card
      252:  127:      for(j = 0; j < treasure_map+1; j++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
      243:  128:		 retVal = fullDeckCount(i, j, state);
call    0 returned 100%
        -:  129:		 //Only non-zero return value
      243:  130:		 if(retVal != myDeckCount[j]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  131:			printf("allCardsNotTargetReturnTest -1: Card Count Differs by %i\n", retVal - myDeckCount[j]);
call    0 never executed
    #####:  132:			return -1;
        -:  133:		 }
        -:  134:      }
        9:  135:      free(myDeckCount);
        -:  136:   }
        3:  137:   return 0;
        -:  138:}
        -:  139:
function stateTest called 3 returned 100% blocks executed 85%
        3:  140:int stateTest(struct gameState* state){
        -:  141:
        3:  142:   struct gameState* cpy = (struct gameState*)(malloc(sizeof(struct gameState)));
        3:  143:   memcpy(cpy, state, sizeof(struct gameState));
        -:  144:
        -:  145:   int i, j, retVal;
        -:  146:
       12:  147:   for(i = 0; i < state->numPlayers; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  148:
        -:  149:      //Count for each Card
      252:  150:      for(j = 0; j < treasure_map+1; j++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
      243:  151:	 fullDeckCount(i, j, state);
call    0 returned 100%
      243:  152:	 retVal = checkState(cpy, state);
call    0 returned 100%
        -:  153:
      243:  154:	 if(retVal){ 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  155:	    printf("stateTest %i: State error\n", retVal);
call    0 never executed
    #####:  156:	    return -1;
        -:  157:	 }
        -:  158:      }
        -:  159:   }
        3:  160:   free(cpy);
        3:  161:   return 0;
        -:  162:}
        -:  163:
function unitTest called 1 returned 100% blocks executed 89%
        1:  164:int unitTest(){
        -:  165:
        1:  166:   printf("\n+--------------------------------UNIT TEST 2----------------------------+\n");
call    0 returned 100%
        -:  167:   //Create Zeroed Gamestate;
        1:  168:   struct gameState* testState = (struct gameState*)(malloc(sizeof(struct gameState)));
        1:  169:   memset(testState, 0, sizeof(struct gameState));
        1:  170:   int i, retVal = 0;
        -:  171:
        1:  172:   printf("+------zeroStateTest--------+\n\n");
call    0 returned 100%
        -:  173:   //Zero Test
        1:  174:   retVal = basicReturnTest(testState);
call    0 returned 100%
        1:  175:   if(retVal != 0){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  176:      printf("unitTest %i: Failed Zero State Test\n", retVal);
call    0 never executed
        -:  177:      //return -1;
        -:  178:   } else {
        1:  179:      printf("zeroStateTest: Successful\n");
call    0 returned 100%
        -:  180:   }
        -:  181:
        1:  182:   printf("\n+--------basicReturnTest----------+\n\n");
call    0 returned 100%
        -:  183:   //Checks to ensure cards count accross a variety of states for a variety of players
        4:  184:   for(i = 2; i <= 4; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:  185:      setupRandomTestState(i, testState);
call    0 returned 100%
        3:  186:      retVal = basicReturnTest(testState);
call    0 returned 100%
        3:  187:      if(retVal){   
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  188:	 printf("unitTest %i: Failed Basic Return Test\n", retVal);
call    0 never executed
        -:  189:	 //return -2;
        -:  190:      } else {
        3:  191:	 printf("basicReturnTest (%i players): Successful\n", i);
call    0 returned 100%
        -:  192:      }
        -:  193:   }
        -:  194:
        1:  195:   printf("\n+-------allCardsTargetReturnTest--------+\n\n");
call    0 returned 100%
        -:  196:   //Checks to ensure cards count accross a variety of states for a variety of players
        4:  197:   for(i = 2; i <= 4; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:  198:      setupRandomTestState(i, testState);
call    0 returned 100%
        3:  199:      retVal = allCardsTargetReturnTest(testState);
call    0 returned 100%
        3:  200:      if(retVal){   
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  201:	 printf("unitTest %i: Failed All Cards Target Return Test\n", retVal);
call    0 never executed
        -:  202:	 //return -3;
        -:  203:      } else {
        3:  204:	 printf("allCardsTargetReturnTest (%i players): Successful\n", i);
call    0 returned 100%
        -:  205:      }
        -:  206:   }
        -:  207:
        1:  208:   printf("\n+-------allCardsNotTargetReturnTest--------+\n\n");
call    0 returned 100%
        -:  209:   //Checks to ensure cards count accross a variety of states for a variety of players
        4:  210:   for(i = 2; i <= 4; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:  211:      setupRandomTestState(i, testState);
call    0 returned 100%
        3:  212:      retVal = allCardsNotTargetReturnTest(testState);
call    0 returned 100%
        3:  213:      if(retVal){   
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  214:	 printf("unitTest %i: Failed All Cards Not Target Return Test\n", retVal);
call    0 never executed
        -:  215:	 //return -4;
        -:  216:      } else {
        3:  217:	 printf("allCards Not TargetReturnTest (%i players): Successful\n", i);
call    0 returned 100%
        -:  218:      }
        -:  219:   }
        -:  220:
        1:  221:   printf("\n+--------stateTest----------+\n\n");
call    0 returned 100%
        -:  222:   //Checks to ensure no values in current state are changed after function
        4:  223:   for(i = 2; i <= 4; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3:  224:      setupRandomTestState(i, testState);
call    0 returned 100%
        3:  225:      retVal = stateTest(testState);
call    0 returned 100%
        3:  226:      if(retVal){   
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  227:	 printf("unitTest %i: Failed State Test\n", retVal);
call    0 never executed
        -:  228:	 //return -5;
        -:  229:      } else {
        3:  230:	 printf("stateTest (%i players): Successful\n", i);
call    0 returned 100%
        -:  231:      }
        -:  232:   }
        -:  233:
        1:  234:   return 0;
        -:  235:}
        -:  236:
function main called 1 returned 100% blocks executed 100%
        1:  237:int main(){
        1:  238:   int retVal = unitTest();
call    0 returned 100%
        1:  239:   printf("Outcome: %i\n", retVal);
call    0 returned 100%
        1:  240:   return 0;
        -:  241:}
