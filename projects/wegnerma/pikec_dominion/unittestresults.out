------updateCoins unit test-------
updateCoins: PASS when no coins in hand.
updateCoins: PASS when 5 coppper coins in hand.
updateCoins: PASS when 5 silver coins in hand.
updateCoins: PASS when 5 gold coins in hand.
updateCoins: PASS when 5 copper coins in hand and bonus=5.
updateCoins: PASS when no coins in hand and bonus=5.
updateCoins: PASS when coin and non-coin cards.

-------getCost unit test-------
getCost: PASS for curse card.
getCost: PASS for estate card.
getCost: PASS for duchy card.
getCost: PASS for province card.
getCost: PASS for copper card.
getCost: PASS for silver card.
getCost: PASS for gold card.
getCost: PASS for adventurer card.
getCost: PASS for council_room card.
getCost: PASS for feast card.
getCost: PASS for gardens card.
getCost: PASS for mine card.
getCost: PASS for remodel card.
getCost: PASS for smithy card.
getCost: PASS for village card.
getCost: PASS for baron card.
getCost: PASS for great_hall card.
getCost: PASS for minion card.
getCost: PASS for steward card.
getCost: PASS for tribute card.
getCost: PASS for ambassador card.
getCost: PASS for cutpurse card.
getCost: PASS for embargo card.
getCost: PASS for outpost card.
getCost: PASS for salvager card.
getCost: PASS for sea_hag card.
getCost: PASS for treasure_map card.
getCost: PASS for bad_card card.

------discardCard unit test-------
discardCard: PASS when last card in hand array
discardCard: PASS when first card in hand array
discardCard: PASS when one card in hand
discardCard: PASS when card trashed

------gainCard unit test-------
gainCard: PASS when supply pile is empty
gainCard: PASS when added to deck
gainCard: PASS when added to hand
gainCard: PASS when added to discard

------playAdventurer unit test-------
playAdventurer: FAIL when two treasures are in deck
playAdventurer: FAIL when cards have to be reshuffled
playAdventurer: FAIL when cards in deck and then have to be reshuffled

------playSmithy unit test-------
playSmithy: FAIL when cards are in deck
playSmithy: FAIL when cards are not in deck

------playVillage unit test-------
playVillage: FAIL add actions
playVillage: FAIL discard card
playVillage: PASS draw card

------playGreatHall unit test-------
playGreatHall: PASS add actions
playGreatHall: PASS discard card
playGreatHall: PASS draw card

File 'dominion.c'
Lines executed:27.61% of 565
Branches executed:24.34% of 415
Taken at least once:18.80% of 415
Calls executed:16.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function playAdventurer called 3 returned 100% blocks executed 100%
        3:    8:int playAdventurer (struct gameState *state){
        3:    9:	int drawntreasure =0;
        3:   10:	int z = 0;
        3:   11:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:   12:	int temphand[MAX_HAND];
        -:   13:	int cardDrawn;
        -:   14:	
     1664:   15:	while(drawntreasure<=2){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
     1658:   16:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
     1627:   17:	  shuffle(currentPlayer, state);
call    0 returned 100%
        -:   18:	}
     1658:   19:	drawCard(currentPlayer, state);
call    0 returned 100%
     1658:   20:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
     1658:   21:	if (cardDrawn == copper || cardDrawn == gold)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
        9:   22:	  drawntreasure++;
        -:   23:	else{
     1649:   24:	  temphand[z]=cardDrawn;
     1649:   25:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     1649:   26:	  z++;
        -:   27:	}
        -:   28:      }
      215:   29:      while(z-1>=0){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
      209:   30:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
      209:   31:	z=z-1;
        -:   32:      }
        3:   33:      return 0;
        -:   34:}
        -:   35:
function playSmithy called 2 returned 100% blocks executed 100%
        2:   36:int playSmithy(struct gameState *state, int handPos){
        -:   37:  int i;
        2:   38:   int currentPlayer = whoseTurn(state);
call    0 returned 100%
        6:   39:  for (i = 1; i < 3; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   40:	{
        4:   41:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -:   42:	}
        -:   43:			
        -:   44:      //discard card from hand
        2:   45:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        2:   46:      return 0;
        -:   47:}
        -:   48:
function playFeast called 0 returned 0% blocks executed 0%
    #####:   49:int playFeast(struct gameState *state, int choice1){
    #####:   50:	 int currentPlayer = whoseTurn(state);
call    0 never executed
        -:   51:	int temphand[MAX_HAND];
        -:   52:	int i;
        -:   53:	int x;
        -:   54:      //gain card with cost up to 5
        -:   55:      //Backup hand
    #####:   56:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:   57:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:   58:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:   59:      }
        -:   60:      //Backup hand
        -:   61:
        -:   62:      //Update Coins for Buy
    #####:   63:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:   64:      x = 1;//Condition to loop on
    #####:   65:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:   66:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:   67:	  if (DEBUG)
        -:   68:	    printf("None of that card left, sorry!\n");
        -:   69:
        -:   70:	  if (DEBUG){
        -:   71:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:   72:	  }
        -:   73:	}
    #####:   74:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:   75:	  printf("That card is too expensive!\n");
call    0 never executed
        -:   76:
        -:   77:	  if (DEBUG){
        -:   78:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:   79:	  }
        -:   80:	}
        -:   81:	else{
        -:   82:
        -:   83:	  if (DEBUG){
        -:   84:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:   85:	  }
        -:   86:
    #####:   87:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:   88:	  x = 0;//No more buying cards
        -:   89:
        -:   90:	  if (DEBUG){
        -:   91:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:   92:	  }
        -:   93:
        -:   94:	}
        -:   95:      }     
        -:   96:
        -:   97:      //Reset Hand
    #####:   98:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:   99:	state->hand[currentPlayer][i] = temphand[i];
    #####:  100:	temphand[i] = -1;
        -:  101:      }
        -:  102:      //Reset Hand
        -:  103:      			
    #####:  104:      return 0;
        -:  105:}
        -:  106:
function playVillage called 1 returned 100% blocks executed 100%
        1:  107:int playVillage(struct gameState *state, int handPos){
        -:  108:	  //+1 Card
        1:  109:	  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        1:  110:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  111:			
        -:  112:      //+2 Actions
        1:  113:      state->numActions = state->numActions + 1;
        -:  114:			
        -:  115:      //discard played card from hand
        1:  116:      discardCard(handPos, currentPlayer, state,2);
call    0 returned 100%
        1:  117:      return 0;
        -:  118:} 
        -:  119:
function playCutpurse called 0 returned 0% blocks executed 0%
    #####:  120:int playCutpurse(struct gameState *state, int handPos) {
        -:  121:      int i;
        -:  122:      int j;
        -:  123:      int k;
    #####:  124:      int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  125:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  126:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  127:	{
    #####:  128:	  if (i == currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  129:	    {
    #####:  130:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  131:		{
    #####:  132:		  if (state->hand[i][j] == silver)
branch  0 never executed
branch  1 never executed
        -:  133:		    {
    #####:  134:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  135:		      break;
        -:  136:		    }
    #####:  137:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  138:		    {
    #####:  139:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  140:			{
        -:  141:			  if (DEBUG)
        -:  142:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  143:			}	
    #####:  144:		      break;
        -:  145:		    }		
        -:  146:		}
        -:  147:					
        -:  148:	    }
        -:  149:				
        -:  150:	}				
        -:  151:
        -:  152:      //discard played card from hand
    #####:  153:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  154:
    #####:  155:      return 0;
        -:  156:}
        -:  157:
        -:  158:
function compare called 34 returned 100% blocks executed 83%
       34:  159:int compare(const void* a, const void* b) {
       34:  160:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  161:    return 1;
       34:  162:  if (*(int*)a < *(int*)b)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        2:  163:    return -1;
       32:  164:  return 0;
        -:  165:}
        -:  166:
function newGame called 0 returned 0% blocks executed 0%
    #####:  167:struct gameState* newGame() {
    #####:  168:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:  169:  return g;
        -:  170:}
        -:  171:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:  172:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  173:		  int k8, int k9, int k10) {
    #####:  174:  int* k = malloc(10 * sizeof(int));
    #####:  175:  k[0] = k1;
    #####:  176:  k[1] = k2;
    #####:  177:  k[2] = k3;
    #####:  178:  k[3] = k4;
    #####:  179:  k[4] = k5;
    #####:  180:  k[5] = k6;
    #####:  181:  k[6] = k7;
    #####:  182:  k[7] = k8;
    #####:  183:  k[8] = k9;
    #####:  184:  k[9] = k10;
    #####:  185:  return k;
        -:  186:}
        -:  187:
function initializeGame called 0 returned 0% blocks executed 0%
    #####:  188:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  189:		   struct gameState *state) {
        -:  190:
        -:  191:  int i;
        -:  192:  int j;
        -:  193:  int it;			
        -:  194:  //set up random number generator
    #####:  195:  SelectStream(1);
call    0 never executed
    #####:  196:  PutSeed((long)randomSeed);
call    0 never executed
        -:  197:  
        -:  198:  //check number of players
    #####:  199:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  200:    {
    #####:  201:      return -1;
        -:  202:    }
        -:  203:
        -:  204:  //set number of players
    #####:  205:  state->numPlayers = numPlayers;
        -:  206:
        -:  207:  //check selected kingdom cards are different
    #####:  208:  for (i = 0; i < 10; i++)
branch  0 never executed
branch  1 never executed
        -:  209:    {
    #####:  210:      for (j = 0; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:  211:        {
    #####:  212:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  213:	    {
    #####:  214:	      return -1;
        -:  215:	    }
        -:  216:        }
        -:  217:    }
        -:  218:
        -:  219:
        -:  220:  //initialize supply
        -:  221:  ///////////////////////////////
        -:  222:
        -:  223:  //set number of Curse cards
    #####:  224:  if (numPlayers == 2)
branch  0 never executed
branch  1 never executed
        -:  225:    {
    #####:  226:      state->supplyCount[curse] = 10;
        -:  227:    }
    #####:  228:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:  229:    {
    #####:  230:      state->supplyCount[curse] = 20;
        -:  231:    }
        -:  232:  else
        -:  233:    {
    #####:  234:      state->supplyCount[curse] = 30;
        -:  235:    }
        -:  236:
        -:  237:  //set number of Victory cards
    #####:  238:  if (numPlayers == 2)
branch  0 never executed
branch  1 never executed
        -:  239:    {
    #####:  240:      state->supplyCount[estate] = 8;
    #####:  241:      state->supplyCount[duchy] = 8;
    #####:  242:      state->supplyCount[province] = 8;
        -:  243:    }
        -:  244:  else
        -:  245:    {
    #####:  246:      state->supplyCount[estate] = 12;
    #####:  247:      state->supplyCount[duchy] = 12;
    #####:  248:      state->supplyCount[province] = 12;
        -:  249:    }
        -:  250:
        -:  251:  //set number of Treasure cards
    #####:  252:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  253:  state->supplyCount[silver] = 40;
    #####:  254:  state->supplyCount[gold] = 30;
        -:  255:
        -:  256:  //set number of Kingdom cards
    #####:  257:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 never executed
branch  1 never executed
        -:  258:    {
    #####:  259:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 never executed
branch  1 never executed
        -:  260:	{
    #####:  261:	  if (kingdomCards[j] == i)
branch  0 never executed
branch  1 never executed
        -:  262:	    {
        -:  263:	      //check if card is a 'Victory' Kingdom card
    #####:  264:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  265:		{
    #####:  266:		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  267:		    state->supplyCount[i] = 8; 
        -:  268:		  }
    #####:  269:		  else{ state->supplyCount[i] = 12; }
        -:  270:		}
        -:  271:	      else
        -:  272:		{
    #####:  273:		  state->supplyCount[i] = 10;
        -:  274:		}
    #####:  275:	      break;
        -:  276:	    }
        -:  277:	  else    //card is not in the set choosen for the game
        -:  278:	    {
    #####:  279:	      state->supplyCount[i] = -1;
        -:  280:	    }
        -:  281:	}
        -:  282:
        -:  283:    }
        -:  284:
        -:  285:  ////////////////////////
        -:  286:  //supply intilization complete
        -:  287:
        -:  288:  //set player decks
    #####:  289:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  290:    {
    #####:  291:      state->deckCount[i] = 0;
    #####:  292:      for (j = 0; j < 3; j++)
branch  0 never executed
branch  1 never executed
        -:  293:	{
    #####:  294:	  state->deck[i][j] = estate;
    #####:  295:	  state->deckCount[i]++;
        -:  296:	}
    #####:  297:      for (j = 3; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:  298:	{
    #####:  299:	  state->deck[i][j] = copper;
    #####:  300:	  state->deckCount[i]++;		
        -:  301:	}
        -:  302:    }
        -:  303:
        -:  304:  //shuffle player decks
    #####:  305:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  306:    {
    #####:  307:      if ( shuffle(i, state) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  308:	{
    #####:  309:	  return -1;
        -:  310:	}
        -:  311:    }
        -:  312:
        -:  313:  //draw player hands
    #####:  314:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  315:    {  
        -:  316:      //initialize hand size to zero
    #####:  317:      state->handCount[i] = 0;
    #####:  318:      state->discardCount[i] = 0;
        -:  319:      //draw 5 cards
        -:  320:      // for (j = 0; j < 5; j++)
        -:  321:      //	{
        -:  322:      //	  drawCard(i, state);
        -:  323:      //	}
        -:  324:    }
        -:  325:  
        -:  326:  //set embargo tokens to 0 for all supply piles
    #####:  327:  for (i = 0; i <= treasure_map; i++)
branch  0 never executed
branch  1 never executed
        -:  328:    {
    #####:  329:      state->embargoTokens[i] = 0;
        -:  330:    }
        -:  331:
        -:  332:  //initialize first player's turn
    #####:  333:  state->outpostPlayed = 0;
    #####:  334:  state->phase = 0;
    #####:  335:  state->numActions = 1;
    #####:  336:  state->numBuys = 1;
    #####:  337:  state->playedCardCount = 0;
    #####:  338:  state->whoseTurn = 0;
    #####:  339:  state->handCount[state->whoseTurn] = 0;
        -:  340:  //int it; move to top
        -:  341:
        -:  342:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  343:  for (it = 0; it < 5; it++){
branch  0 never executed
branch  1 never executed
    #####:  344:    drawCard(state->whoseTurn, state);
call    0 never executed
        -:  345:  }
        -:  346:
    #####:  347:  updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  348:
    #####:  349:  return 0;
        -:  350:}
        -:  351:
function shuffle called 3255 returned 100% blocks executed 100%
     3255:  352:int shuffle(int player, struct gameState *state) {
        -:  353: 
        -:  354:
        -:  355:  int newDeck[MAX_DECK];
     3255:  356:  int newDeckPos = 0;
        -:  357:  int card;
        -:  358:  int i;
        -:  359:
     3255:  360:  if (state->deckCount[player] < 1)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     3252:  361:    return -1;
        3:  362:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  363:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  364:
       30:  365:  while (state->deckCount[player] > 0) {
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
       24:  366:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
       24:  367:    newDeck[newDeckPos] = state->deck[player][card];
       24:  368:    newDeckPos++;
       84:  369:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
       60:  370:      state->deck[player][i] = state->deck[player][i+1];
        -:  371:    }
       24:  372:    state->deckCount[player]--;
        -:  373:  }
       27:  374:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 89%
branch  1 taken 11% (fallthrough)
       24:  375:    state->deck[player][i] = newDeck[i];
       24:  376:    state->deckCount[player]++;
        -:  377:  }
        -:  378:
        3:  379:  return 0;
        -:  380:}
        -:  381:
function playCard called 0 returned 0% blocks executed 0%
    #####:  382:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  383:{	
        -:  384:  int card;
    #####:  385:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  386:
        -:  387:  //check if it is the right phase
    #####:  388:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  389:    {
    #####:  390:      return -1;
        -:  391:    }
        -:  392:	
        -:  393:  //check if player has enough actions
    #####:  394:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  395:    {
    #####:  396:      return -1;
        -:  397:    }
        -:  398:	
        -:  399:  //get card played
    #####:  400:  card = handCard(handPos, state);
call    0 never executed
        -:  401:	
        -:  402:  //check if selected card is an action
    #####:  403:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  404:    {
    #####:  405:      return -1;
        -:  406:    }
        -:  407:	
        -:  408:  //play card
    #####:  409:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  410:    {
    #####:  411:      return -1;
        -:  412:    }
        -:  413:	
        -:  414:  //reduce number of actions
    #####:  415:  state->numActions--;
        -:  416:
        -:  417:  //update coins (Treasure cards may be added with card draws)
    #####:  418:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  419:	
    #####:  420:  return 0;
        -:  421:}
        -:  422:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  423:int buyCard(int supplyPos, struct gameState *state) {
        -:  424:  int who;
        -:  425:  if (DEBUG){
        -:  426:    printf("Entering buyCard...\n");
        -:  427:  }
        -:  428:
        -:  429:  // I don't know what to do about the phase thing.
        -:  430:
    #####:  431:  who = state->whoseTurn;
        -:  432:
    #####:  433:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  434:    if (DEBUG)
        -:  435:      printf("You do not have any buys left\n");
    #####:  436:    return -1;
    #####:  437:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  438:    if (DEBUG)
        -:  439:      printf("There are not any of that type of card left\n");
    #####:  440:    return -1;
    #####:  441:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  442:    if (DEBUG) 
        -:  443:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  444:    return -1;
        -:  445:  } else {
    #####:  446:    state->phase=1;
        -:  447:    //state->supplyCount[supplyPos]--;
    #####:  448:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  449:  
    #####:  450:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  451:    state->numBuys--;
        -:  452:    if (DEBUG)
        -:  453:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  454:  }
        -:  455:
        -:  456:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  457:  //state->discardCount[who]++;
        -:  458:    
    #####:  459:  return 0;
        -:  460:}
        -:  461:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  462:int numHandCards(struct gameState *state) {
    #####:  463:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  464:}
        -:  465:
function handCard called 0 returned 0% blocks executed 0%
    #####:  466:int handCard(int handPos, struct gameState *state) {
    #####:  467:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  468:  return state->hand[currentPlayer][handPos];
        -:  469:}
        -:  470:
function supplyCount called 4 returned 100% blocks executed 100%
        4:  471:int supplyCount(int card, struct gameState *state) {
        4:  472:  return state->supplyCount[card];
        -:  473:}
        -:  474:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  475:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  476:  int i;
    #####:  477:  int count = 0;
        -:  478:
    #####:  479:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  482:    }
        -:  483:
    #####:  484:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  485:    {
    #####:  486:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  487:    }
        -:  488:
    #####:  489:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  490:    {
    #####:  491:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  492:    }
        -:  493:
    #####:  494:  return count;
        -:  495:}
        -:  496:
function whoseTurn called 7 returned 100% blocks executed 100%
        7:  497:int whoseTurn(struct gameState *state) {
        7:  498:  return state->whoseTurn;
        -:  499:}
        -:  500:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  501:int endTurn(struct gameState *state) {
        -:  502:  int k;
        -:  503:  int i;
    #####:  504:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  505:  
        -:  506:  //Discard hand
    #####:  507:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  508:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  509:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  510:  }
    #####:  511:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  512:    
        -:  513:  //Code for determining the player
    #####:  514:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  515:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  516:  }
        -:  517:  else{
    #####:  518:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  519:  }
        -:  520:
    #####:  521:  state->outpostPlayed = 0;
    #####:  522:  state->phase = 0;
    #####:  523:  state->numActions = 1;
    #####:  524:  state->coins = 0;
    #####:  525:  state->numBuys = 1;
    #####:  526:  state->playedCardCount = 0;
    #####:  527:  state->handCount[state->whoseTurn] = 0;
        -:  528:
        -:  529:  //int k; move to top
        -:  530:  //Next player draws hand
    #####:  531:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  532:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  533:  }
        -:  534:
        -:  535:  //Update money
    #####:  536:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  537:
    #####:  538:  return 0;
        -:  539:}
        -:  540:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  541:int isGameOver(struct gameState *state) {
        -:  542:  int i;
        -:  543:  int j;
        -:  544:	
        -:  545:  //if stack of Province cards is empty, the game ends
    #####:  546:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  547:    {
    #####:  548:      return 1;
        -:  549:    }
        -:  550:
        -:  551:  //if three supply pile are at 0, the game ends
    #####:  552:  j = 0;
    #####:  553:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  554:    {
    #####:  555:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  556:	{
    #####:  557:	  j++;
        -:  558:	}
        -:  559:    }
    #####:  560:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  561:    {
    #####:  562:      return 1;
        -:  563:    }
        -:  564:
    #####:  565:  return 0;
        -:  566:}
        -:  567:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  568:int scoreFor (int player, struct gameState *state) {
        -:  569:
        -:  570:  int i;
    #####:  571:  int score = 0;
        -:  572:  //score from hand
    #####:  573:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  574:    {
    #####:  575:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  576:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  577:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  578:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  579:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  580:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  581:    }
        -:  582:
        -:  583:  //score from discard
    #####:  584:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  585:    {
    #####:  586:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  587:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  588:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  589:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  590:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  591:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  592:    }
        -:  593:
        -:  594:  //score from deck
    #####:  595:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  596:    {
    #####:  597:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  598:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  599:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  600:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  601:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  602:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  603:    }
        -:  604:
    #####:  605:  return score;
        -:  606:}
        -:  607:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  608:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  609:  int i;	
        -:  610:  int j;
        -:  611:  int highScore;
        -:  612:  int currentPlayer;
        -:  613:
        -:  614:  //get score for each player
    #####:  615:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  616:    {
        -:  617:      //set unused player scores to -9999
    #####:  618:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  619:	{
    #####:  620:	  players[i] = -9999;
        -:  621:	}
        -:  622:      else
        -:  623:	{
    #####:  624:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  625:	}
        -:  626:    }
        -:  627:
        -:  628:  //find highest score
    #####:  629:  j = 0;
    #####:  630:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  631:    {
    #####:  632:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  633:	{
    #####:  634:	  j = i;
        -:  635:	}
        -:  636:    }
    #####:  637:  highScore = players[j];
        -:  638:
        -:  639:  //add 1 to players who had less turns
    #####:  640:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  641:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  642:    {
    #####:  643:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  644:	{
    #####:  645:	  players[i]++;
        -:  646:	}
        -:  647:    }
        -:  648:
        -:  649:  //find new highest score
    #####:  650:  j = 0;
    #####:  651:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  652:    {
    #####:  653:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  654:	{
    #####:  655:	  j = i;
        -:  656:	}
        -:  657:    }
    #####:  658:  highScore = players[j];
        -:  659:
        -:  660:  //set winners in array to 1 and rest to 0
    #####:  661:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  662:    {
    #####:  663:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  664:	{
    #####:  665:	  players[i] = 1;
        -:  666:	}
        -:  667:      else
        -:  668:	{
    #####:  669:	  players[i] = 0;
        -:  670:	}
        -:  671:    }
        -:  672:
    #####:  673:  return 0;
        -:  674:}
        -:  675:
function drawCard called 1664 returned 100% blocks executed 100%
     1664:  676:int drawCard(int player, struct gameState *state)
        -:  677:{	int count;
        -:  678:  int deckCounter;
     1664:  679:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 98% (fallthrough)
branch  1 taken 2%
        -:  680:    
        -:  681:    //Step 1 Shuffle the discard pile back into a deck
        -:  682:    int i;
        -:  683:    //Move discard to deck
     1652:  684:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 1%
branch  1 taken 99% (fallthrough)
       24:  685:      state->deck[player][i] = state->discard[player][i];
       24:  686:      state->discard[player][i] = -1;
        -:  687:    }
        -:  688:
     1628:  689:    state->deckCount[player] = state->discardCount[player];
     1628:  690:    state->discardCount[player] = 0;//Reset discard
        -:  691:
        -:  692:    //Shufffle the deck
     1628:  693:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  694:   
        -:  695:    if (DEBUG){//Debug statements
        -:  696:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  697:    }
        -:  698:    
     1628:  699:    state->discardCount[player] = 0;
        -:  700:
        -:  701:    //Step 2 Draw Card
     1628:  702:    count = state->handCount[player];//Get current player's hand count
        -:  703:    
        -:  704:    if (DEBUG){//Debug statements
        -:  705:      printf("Current hand count: %d\n", count);
        -:  706:    }
        -:  707:    
     1628:  708:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  709:
     1628:  710:    if (deckCounter == 0)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
     1625:  711:      return -1;
        -:  712:
        3:  713:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        3:  714:    state->deckCount[player]--;
        3:  715:    state->handCount[player]++;//Increment hand count
        -:  716:  }
        -:  717:
        -:  718:  else{
       36:  719:    int count = state->handCount[player];//Get current hand count for player
        -:  720:    int deckCounter;
        -:  721:    if (DEBUG){//Debug statements
        -:  722:      printf("Current hand count: %d\n", count);
        -:  723:    }
        -:  724:
       36:  725:    deckCounter = state->deckCount[player];//Create holder for the deck count
       36:  726:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       36:  727:    state->deckCount[player]--;
       36:  728:    state->handCount[player]++;//Increment hand count
        -:  729:  }
        -:  730:
       39:  731:  return 0;
        -:  732:}
        -:  733:
function getCost called 28 returned 100% blocks executed 100%
       28:  734:int getCost(int cardNumber)
        -:  735:{
       28:  736:  switch( cardNumber ) 
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 4%
        -:  737:    {
        -:  738:    case curse:
        1:  739:      return 0;
        -:  740:    case estate:
        1:  741:      return 2;
        -:  742:    case duchy:
        1:  743:      return 5;
        -:  744:    case province:
        1:  745:      return 8;
        -:  746:    case copper:
        1:  747:      return 0;
        -:  748:    case silver:
        1:  749:      return 3;
        -:  750:    case gold:
        1:  751:      return 6;
        -:  752:    case adventurer:
        1:  753:      return 6;
        -:  754:    case council_room:
        1:  755:      return 5;
        -:  756:    case feast:
        1:  757:      return 4;
        -:  758:    case gardens:
        1:  759:      return 4;
        -:  760:    case mine:
        1:  761:      return 5;
        -:  762:    case remodel:
        1:  763:      return 4;
        -:  764:    case smithy:
        1:  765:      return 4;
        -:  766:    case village:
        1:  767:      return 3;
        -:  768:    case baron:
        1:  769:      return 4;
        -:  770:    case great_hall:
        1:  771:      return 3;
        -:  772:    case minion:
        1:  773:      return 5;
        -:  774:    case steward:
        1:  775:      return 3;
        -:  776:    case tribute:
        1:  777:      return 5;
        -:  778:    case ambassador:
        1:  779:      return 3;
        -:  780:    case cutpurse:
        1:  781:      return 4;
        -:  782:    case embargo: 
        1:  783:      return 2;
        -:  784:    case outpost:
        1:  785:      return 5;
        -:  786:    case salvager:
        1:  787:      return 4;
        -:  788:    case sea_hag:
        1:  789:      return 4;
        -:  790:    case treasure_map:
        1:  791:      return 4;
        -:  792:    }
        -:  793:	
        1:  794:  return -1;
        -:  795:}
        -:  796:
function cardEffect called 1 returned 100% blocks executed 4%
        1:  797:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  798:{
        -:  799:  int i;
        -:  800:  int j;
        -:  801:  int k;
        -:  802:  int x;
        -:  803:  int index;
        1:  804:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        1:  805:  int nextPlayer = currentPlayer + 1;
        -:  806:
        1:  807:  int tributeRevealedCards[2] = {-1, -1};
        -:  808:  int temphand[MAX_HAND];// moved above the if statement
        1:  809:  int drawntreasure=0;
        -:  810:  int cardDrawn;
        1:  811:  int z = 0;// this is the counter for the temp hand
        1:  812:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  813:    nextPlayer = 0;
        -:  814:  }
        -:  815:  
        -:  816:	
        -:  817:  //uses switch to select card and perform actions
        1:  818:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 100%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  819:    {
        -:  820:    case adventurer:
    #####:  821:		return playAdventurer (state);
call    0 never executed
        -:  822:			
        -:  823:    case council_room:
        -:  824:      //+4 Cards
    #####:  825:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  826:	{
    #####:  827:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  828:	}
        -:  829:			
        -:  830:      //+1 Buy
    #####:  831:      state->numBuys++;
        -:  832:			
        -:  833:      //Each other player draws a card
    #####:  834:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  835:	{
    #####:  836:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  837:	    {
    #####:  838:	      drawCard(i, state);
call    0 never executed
        -:  839:	    }
        -:  840:	}
        -:  841:			
        -:  842:      //put played card in played card pile
    #####:  843:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  844:			
    #####:  845:      return 0;
        -:  846:	
        -:  847:	case feast:
    #####:  848:		return playFeast(state, choice1);
call    0 never executed
        -:  849:   
        -:  850:    case gardens:
    #####:  851:      return -1;
        -:  852:			
        -:  853:    case mine:
    #####:  854:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  855:
    #####:  856:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  857:	{
    #####:  858:	  return -1;
        -:  859:	}
        -:  860:		
    #####:  861:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  862:	{
    #####:  863:	  return -1;
        -:  864:	}
        -:  865:
    #####:  866:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  867:	{
    #####:  868:	  return -1;
        -:  869:	}
        -:  870:
    #####:  871:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  872:
        -:  873:      //discard card from hand
    #####:  874:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  875:
        -:  876:      //discard trashed card
    #####:  877:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  878:	{
    #####:  879:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  880:	    {
    #####:  881:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  882:	      break;
        -:  883:	    }
        -:  884:	}
        -:  885:			
    #####:  886:      return 0;
        -:  887:			
        -:  888:    case remodel:
    #####:  889:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  890:
    #####:  891:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  892:	{
    #####:  893:	  return -1;
        -:  894:	}
        -:  895:
    #####:  896:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  897:
        -:  898:      //discard card from hand
    #####:  899:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  900:
        -:  901:      //discard trashed card
    #####:  902:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  903:	{
    #####:  904:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  905:	    {
    #####:  906:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  907:	      break;
        -:  908:	    }
        -:  909:	}
        -:  910:
        -:  911:
    #####:  912:      return 0;
        -:  913:		
        -:  914:	case smithy:
    #####:  915:		return playSmithy(state, handPos);	
call    0 never executed
        -:  916:  
        -:  917:	
        -:  918:	case village:
    #####:  919:		return playVillage(state, handPos);
call    0 never executed
        -:  920:	
        -:  921:
        -:  922:    case baron:
    #####:  923:      state->numBuys++;//Increase buys by 1!
    #####:  924:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  925:	int p = 0;//Iterator for hand!
    #####:  926:	int card_not_discarded = 1;//Flag for discard set!
    #####:  927:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  928:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  929:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  930:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  931:	    state->discardCount[currentPlayer]++;
    #####:  932:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  933:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  934:	    }
    #####:  935:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  936:	    state->handCount[currentPlayer]--;
    #####:  937:	    card_not_discarded = 0;//Exit the loop
        -:  938:	  }
    #####:  939:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  940:	    if(DEBUG) {
        -:  941:	      printf("No estate cards in your hand, invalid choice\n");
        -:  942:	      printf("Must gain an estate if there are any\n");
        -:  943:	    }
    #####:  944:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  945:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  946:	      state->supplyCount[estate]--;//Decrement estates
    #####:  947:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  948:		isGameOver(state);
call    0 never executed
        -:  949:	      }
        -:  950:	    }
    #####:  951:	    card_not_discarded = 0;//Exit the loop
        -:  952:	  }
        -:  953:			    
        -:  954:	  else{
    #####:  955:	    p++;//Next card
        -:  956:	  }
        -:  957:	}
        -:  958:      }
        -:  959:			    
        -:  960:      else{
    #####:  961:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  962:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  963:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  964:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  965:	    isGameOver(state);
call    0 never executed
        -:  966:	  }
        -:  967:	}
        -:  968:      }
        -:  969:	    
        -:  970:      
    #####:  971:      return 0;
        -:  972:		
        -:  973:    case great_hall:
        -:  974:      //+1 Card
        1:  975:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  976:			
        -:  977:      //+1 Actions
        1:  978:      state->numActions++;
        -:  979:			
        -:  980:      //discard card from hand
        1:  981:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  982:      return 0;
        -:  983:		
        -:  984:    case minion:
        -:  985:      //+1 action
    #####:  986:      state->numActions++;
        -:  987:			
        -:  988:      //discard card from hand
    #####:  989:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  990:			
    #####:  991:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  992:	{
    #####:  993:	  state->coins = state->coins + 2;
        -:  994:	}
        -:  995:			
    #####:  996:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  997:	{
        -:  998:	  //discard hand
    #####:  999:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1000:	    {
    #####: 1001:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1002:	    }
        -: 1003:				
        -: 1004:	  //draw 4
    #####: 1005:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1006:	    {
    #####: 1007:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1008:	    }
        -: 1009:				
        -: 1010:	  //other players discard hand and redraw if hand size > 4
    #####: 1011:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1012:	    {
    #####: 1013:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1014:		{
    #####: 1015:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1016:		    {
        -: 1017:		      //discard hand
    #####: 1018:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1019:			{
    #####: 1020:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1021:			}
        -: 1022:							
        -: 1023:		      //draw 4
    #####: 1024:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1025:			{
    #####: 1026:			  drawCard(i, state);
call    0 never executed
        -: 1027:			}
        -: 1028:		    }
        -: 1029:		}
        -: 1030:	    }
        -: 1031:				
        -: 1032:	}
    #####: 1033:      return 0;
        -: 1034:		
        -: 1035:    case steward:
    #####: 1036:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1037:	{
        -: 1038:	  //+2 cards
    #####: 1039:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1040:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1041:	}
    #####: 1042:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1043:	{
        -: 1044:	  //+2 coins
    #####: 1045:	  state->coins = state->coins + 2;
        -: 1046:	}
        -: 1047:      else
        -: 1048:	{
        -: 1049:	  //trash 2 cards in hand
    #####: 1050:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1051:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1052:	}
        -: 1053:			
        -: 1054:      //discard card from hand
    #####: 1055:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1056:      return 0;
        -: 1057:		
        -: 1058:    case tribute:
    #####: 1059:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1060:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1061:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1062:	  state->deckCount[nextPlayer]--;
        -: 1063:	}
    #####: 1064:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1065:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1066:	  state->discardCount[nextPlayer]--;
        -: 1067:	}
        -: 1068:	else{
        -: 1069:	  //No Card to Reveal
        -: 1070:	  if (DEBUG){
        -: 1071:	    printf("No cards to reveal\n");
        -: 1072:	  }
        -: 1073:	}
        -: 1074:      }
        -: 1075:	    
        -: 1076:      else{
    #####: 1077:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1078:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1079:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1080:	    state->deckCount[nextPlayer]++;
    #####: 1081:	    state->discard[nextPlayer][i] = -1;
    #####: 1082:	    state->discardCount[nextPlayer]--;
        -: 1083:	  }
        -: 1084:			    
    #####: 1085:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1086:	} 
    #####: 1087:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1088:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1089:	state->deckCount[nextPlayer]--;
    #####: 1090:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1091:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1092:	state->deckCount[nextPlayer]--;
        -: 1093:      }    
        -: 1094:		       
    #####: 1095:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1096:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1097:	state->playedCardCount++;
    #####: 1098:	tributeRevealedCards[1] = -1;
        -: 1099:      }
        -: 1100:
    #####: 1101:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1102:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1103:	  state->coins += 2;
        -: 1104:	}
        -: 1105:		    
    #####: 1106:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1107:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1108:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1109:	}
        -: 1110:	else{//Action Card
    #####: 1111:	  state->numActions = state->numActions + 2;
        -: 1112:	}
        -: 1113:      }
        -: 1114:	    
    #####: 1115:      return 0;
        -: 1116:		
        -: 1117:    case ambassador:
    #####: 1118:      j = 0;		//used to check if player has enough cards to discard
        -: 1119:
    #####: 1120:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1121:	{
    #####: 1122:	  return -1;				
        -: 1123:	}
        -: 1124:
    #####: 1125:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1126:	{
    #####: 1127:	  return -1;
        -: 1128:	}
        -: 1129:
    #####: 1130:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1131:	{
    #####: 1132:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1133:	    {
    #####: 1134:	      j++;
        -: 1135:	    }
        -: 1136:	}
    #####: 1137:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1138:	{
    #####: 1139:	  return -1;				
        -: 1140:	}
        -: 1141:
        -: 1142:      if (DEBUG) 
        -: 1143:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1144:
        -: 1145:      //increase supply count for choosen card by amount being discarded
    #####: 1146:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1147:			
        -: 1148:      //each other player gains a copy of revealed card
    #####: 1149:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1150:	{
    #####: 1151:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1152:	    {
    #####: 1153:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1154:	    }
        -: 1155:	}
        -: 1156:
        -: 1157:      //discard played card from hand
    #####: 1158:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1159:
        -: 1160:      //trash copies of cards returned to supply
    #####: 1161:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1162:	{
    #####: 1163:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1164:	    {
    #####: 1165:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1166:		{
    #####: 1167:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1168:		  break;
        -: 1169:		}
        -: 1170:	    }
        -: 1171:	}			
        -: 1172:
    #####: 1173:      return 0;
        -: 1174:	
        -: 1175:	
        -: 1176:    case cutpurse:
    #####: 1177:		return playCutpurse(state, handPos);
call    0 never executed
        -: 1178:	
        -: 1179:		
        -: 1180:    case embargo: 
        -: 1181:      //+2 Coins
    #####: 1182:      state->coins = state->coins + 2;
        -: 1183:			
        -: 1184:      //see if selected pile is in play
    #####: 1185:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1186:	{
    #####: 1187:	  return -1;
        -: 1188:	}
        -: 1189:			
        -: 1190:      //add embargo token to selected supply pile
    #####: 1191:      state->embargoTokens[choice1]++;
        -: 1192:			
        -: 1193:      //trash card
    #####: 1194:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1195:      return 0;
        -: 1196:		
        -: 1197:    case outpost:
        -: 1198:      //set outpost flag
    #####: 1199:      state->outpostPlayed++;
        -: 1200:			
        -: 1201:      //discard card
    #####: 1202:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1203:      return 0;
        -: 1204:		
        -: 1205:    case salvager:
        -: 1206:      //+1 buy
    #####: 1207:      state->numBuys++;
        -: 1208:			
    #####: 1209:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1210:	{
        -: 1211:	  //gain coins equal to trashed card
    #####: 1212:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1213:	  //trash card
    #####: 1214:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1215:	}
        -: 1216:			
        -: 1217:      //discard card
    #####: 1218:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1219:      return 0;
        -: 1220:		
        -: 1221:    case sea_hag:
    #####: 1222:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1223:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1224:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1225:	  state->discardCount[i]++;
    #####: 1226:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1227:	}
        -: 1228:      }
    #####: 1229:      return 0;
        -: 1230:		
        -: 1231:    case treasure_map:
        -: 1232:      //search hand for another treasure_map
    #####: 1233:      index = -1;
    #####: 1234:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1235:	{
    #####: 1236:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1237:	    {
    #####: 1238:	      index = i;
    #####: 1239:	      break;
        -: 1240:	    }
        -: 1241:	}
    #####: 1242:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1243:	{
        -: 1244:	  //trash both treasure cards
    #####: 1245:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1246:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1247:
        -: 1248:	  //gain 4 Gold cards
    #####: 1249:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1250:	    {
    #####: 1251:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1252:	    }
        -: 1253:				
        -: 1254:	  //return success
    #####: 1255:	  return 1;
        -: 1256:	}
        -: 1257:			
        -: 1258:      //no second treasure_map found in hand
    #####: 1259:      return -1;
        -: 1260:    }
        -: 1261:	
    #####: 1262:  return -1;
        -: 1263:}
        -: 1264:
function discardCard called 8 returned 100% blocks executed 89%
        8: 1265:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1266:{
        -: 1267:	
        -: 1268:  //if card is not trashed, added to Played pile 
        8: 1269:  if (trashFlag < 1)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1270:    {
        -: 1271:      //add card to played pile
        4: 1272:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        4: 1273:      state->playedCardCount++;
        -: 1274:    }
        -: 1275:	
        -: 1276:  //set played card to -1
        8: 1277:  state->hand[currentPlayer][handPos] = -1;
        -: 1278:	
        -: 1279:  //remove card from player's hand
        8: 1280:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 38% (fallthrough)
branch  1 taken 63%
        -: 1281:    {
        -: 1282:      //reduce number of cards in hand
        3: 1283:      state->handCount[currentPlayer]--;
        -: 1284:    }
        5: 1285:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1286:    {
        -: 1287:      //reduce number of cards in hand
    #####: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:  else 	
        -: 1291:    {
        -: 1292:      //replace discarded card with last card in hand
        5: 1293:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1294:      //set last card to -1
        5: 1295:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1296:      //reduce number of cards in hand
        5: 1297:      state->handCount[currentPlayer]--;
        -: 1298:    }
        -: 1299:	
        8: 1300:  return 0;
        -: 1301:}
        -: 1302:
function gainCard called 4 returned 100% blocks executed 100%
        4: 1303:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1304:{
        -: 1305:  //Note: supplyPos is enum of choosen card
        -: 1306:	
        -: 1307:  //check if supply pile is empty (0) or card is not used in game (-1)
        4: 1308:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 25% (fallthrough)
branch  2 taken 75%
        -: 1309:    {
        1: 1310:      return -1;
        -: 1311:    }
        -: 1312:	
        -: 1313:  //added card for [whoseTurn] current player:
        -: 1314:  // toFlag = 0 : add to discard
        -: 1315:  // toFlag = 1 : add to deck
        -: 1316:  // toFlag = 2 : add to hand
        -: 1317:
        3: 1318:  if (toFlag == 1)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1319:    {
        1: 1320:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1321:      state->deckCount[player]++;
        -: 1322:    }
        2: 1323:  else if (toFlag == 2)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -: 1324:    {
        1: 1325:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1326:      state->handCount[player]++;
        -: 1327:    }
        -: 1328:  else
        -: 1329:    {
        1: 1330:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1331:      state->discardCount[player]++;
        -: 1332:    }
        -: 1333:	
        -: 1334:  //decrease number in supply pile
        3: 1335:  state->supplyCount[supplyPos]--;
        -: 1336:	 
        3: 1337:  return 0;
        -: 1338:}
        -: 1339:
function updateCoins called 7 returned 100% blocks executed 100%
        7: 1340:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1341:{
        -: 1342:  int i;
        -: 1343:	
        -: 1344:  //reset coin count
        7: 1345:  state->coins = 0;
        -: 1346:
        -: 1347:  //add coins for each Treasure card in player's hand
       42: 1348:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1349:    {
       35: 1350:      if (state->hand[player][i] == copper)
branch  0 taken 31% (fallthrough)
branch  1 taken 69%
        -: 1351:	{
       11: 1352:	  state->coins += 1;
        -: 1353:	}
       24: 1354:      else if (state->hand[player][i] == silver)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -: 1355:	{
        6: 1356:	  state->coins += 2;
        -: 1357:	}
       18: 1358:      else if (state->hand[player][i] == gold)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -: 1359:	{
        6: 1360:	  state->coins += 3;
        -: 1361:	}	
        -: 1362:    }	
        -: 1363:
        -: 1364:  //add bonus
        7: 1365:  state->coins += bonus;
        -: 1366:
        7: 1367:  return 0;
        -: 1368:}
        -: 1369:
        -: 1370:
        -: 1371://end of dominion.c
        -: 1372:
