        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
   241581:    8:int compare(const void* a, const void* b) {
   241581:    9:  if (*(int*)a > *(int*)b)
    98091:   10:    return 1;
   143490:   11:  if (*(int*)a < *(int*)b)
    57973:   12:    return -1;
    85517:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
     1000:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     1000:   44:  SelectStream(1);
     1000:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
     1000:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     1000:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    11000:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
   110000:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
   100000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     1000:   73:  if (numPlayers == 2)
        -:   74:    {
      243:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      757:   77:  else if (numPlayers == 3)
        -:   78:    {
      347:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      410:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     1000:   87:  if (numPlayers == 2)
        -:   88:    {
      243:   89:      state->supplyCount[estate] = 8;
      243:   90:      state->supplyCount[duchy] = 8;
      243:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      757:   95:      state->supplyCount[estate] = 12;
      757:   96:      state->supplyCount[duchy] = 12;
      757:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     1000:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     1000:  102:  state->supplyCount[silver] = 40;
     1000:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    21000:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
   165000:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
   155000:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    10000:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
     2000:  115:		  if (numPlayers == 2){ 
      243:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      757:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     9000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    10000:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   145000:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     4167:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
     3167:  140:      state->deckCount[i] = 0;
    12668:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
     9501:  143:	  state->deck[i][j] = estate;
     9501:  144:	  state->deckCount[i]++;
        -:  145:	}
    25336:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    22169:  148:	  state->deck[i][j] = copper;
    22169:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     4167:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
     3167:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     4167:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     3167:  166:      state->handCount[i] = 0;
     3167:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    28000:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    27000:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     1000:  182:  state->outpostPlayed = 0;
     1000:  183:  state->phase = 0;
     1000:  184:  state->numActions = 1;
     1000:  185:  state->numBuys = 1;
     1000:  186:  state->playedCardCount = 0;
     1000:  187:  state->whoseTurn = 0;
     1000:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     6000:  192:  for (it = 0; it < 5; it++){
     5000:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
     1000:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
     1000:  198:  return 0;
        -:  199:}
        -:  200:
     7264:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
     7264:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
     7264:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
     7264:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   117378:  214:  while (state->deckCount[player] > 0) {
   102850:  215:    card = floor(Random() * state->deckCount[player]);
   102850:  216:    newDeck[newDeckPos] = state->deck[player][card];
   102850:  217:    newDeckPos++;
   477283:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   374433:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
   102850:  221:    state->deckCount[player]--;
        -:  222:  }
   110114:  223:  for (i = 0; i < newDeckPos; i++) {
   102850:  224:    state->deck[player][i] = newDeck[i];
   102850:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     7264:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    31787:  320:int supplyCount(int card, struct gameState *state) {
    31787:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    20269:  346:int whoseTurn(struct gameState *state) {
    20269:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    19453:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    19453:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
   116718:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    97265:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    97265:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    19453:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    19453:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    13095:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
     6358:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    19453:  370:  state->outpostPlayed = 0;
    19453:  371:  state->phase = 0;
    19453:  372:  state->numActions = 1;
    19453:  373:  state->coins = 0;
    19453:  374:  state->numBuys = 1;
    19453:  375:  state->playedCardCount = 0;
    19453:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
   116718:  380:  for (k = 0; k < 5; k++){
    97265:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    19453:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    19453:  387:  return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
   105177:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   105177:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    75277:  533:    for (i = 0; i < state->discardCount[player];i++){
    71180:  534:      state->deck[player][i] = state->discard[player][i];
    71180:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
     4097:  538:    state->deckCount[player] = state->discardCount[player];
     4097:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
     4097:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
     4097:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
     4097:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
     4097:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
     4097:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
     4097:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     4097:  563:    state->deckCount[player]--;
     4097:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   101080:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   101080:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   101080:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   101080:  576:    state->deckCount[player]--;
   101080:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   105177:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
      408:  646:void runSmithy(int handPos, struct gameState *state){
        -:  647:    int i;
      408:  648:    int currentPlayer = whoseTurn(state);
        -:  649:    //+3 Cards
     1224:  650:    for (i = 0; i < 2; i++)
        -:  651:    {
      816:  652:        drawCard(currentPlayer, state);
        -:  653:    }
        -:  654:    
        -:  655:    //discard card from hand
      408:  656:    discardCard(handPos, currentPlayer, state, 0);
        -:  657:    
      408:  658:}
        -:  659:
        -:  660:
    #####:  661:void runVillage(int handPos, struct gameState *state){
        -:  662:    int i;
    #####:  663:    int currentPlayer = whoseTurn(state);
        -:  664:    //+1 Card
    #####:  665:    drawCard(currentPlayer, state);
        -:  666:    
        -:  667:    //+2 Actions
    #####:  668:    state->numActions = state->numActions - 2;
        -:  669:    
        -:  670:    //discard played card from hand
    #####:  671:    discardCard(handPos, currentPlayer, state, 0);
        -:  672:    
    #####:  673:}
        -:  674:
    #####:  675:void runAdventurer(struct gameState *state){
        -:  676:    
    #####:  677:        int currentPlayer = whoseTurn(state);
        -:  678:        int temphand[MAX_HAND];// moved above the if statement
    #####:  679:        int drawntreasure=0;
        -:  680:        int cardDrawn;
    #####:  681:        int z = 0;// this is the counter for the temp hand
        -:  682:    
    #####:  683:        while(drawntreasure>=2){
    #####:  684:            if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  685:                shuffle(currentPlayer, state);
        -:  686:            }
    #####:  687:            drawCard(currentPlayer, state);
    #####:  688:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  689:            if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  690:                drawntreasure++;
        -:  691:            else{
    #####:  692:                temphand[z]=cardDrawn;
    #####:  693:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  694:                z++;
        -:  695:            }
        -:  696:        }
    #####:  697:        while(z-1>=0){
    #####:  698:            state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  699:            z=z-1;
        -:  700:        }
        -:  701:
    #####:  702:}
        -:  703:
        -:  704:
    #####:  705:void runCouncil_room(int handPos, struct gameState *state){
        -:  706:    int i;
    #####:  707:    int currentPlayer = whoseTurn(state);
        -:  708:    //+4 Cards
    #####:  709:    for (i = 0; i < 5; i++)
        -:  710:    {
    #####:  711:        drawCard(currentPlayer, state);
        -:  712:    }
        -:  713:    
        -:  714:    
        -:  715:    //Each other player draws a card
    #####:  716:    for (i = 0; i < state->numPlayers; i++)
        -:  717:    {
    #####:  718:        if ( i == currentPlayer )
        -:  719:        {
    #####:  720:            drawCard(i, state);
        -:  721:        }
        -:  722:    }
        -:  723:    
        -:  724:    //put played card in played card pile
    #####:  725:    discardCard(handPos, currentPlayer, state, 0);
        -:  726:
    #####:  727:}
        -:  728:
        -:  729:
        -:  730:
        -:  731:
    #####:  732:int runMine(int handPos, struct gameState *state, int choice1, int choice2, int choice3){
        -:  733:    int i, j;
    #####:  734:    int currentPlayer = whoseTurn(state);
    #####:  735:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  736:    
    #####:  737:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  738:    {
    #####:  739:        return -1;
        -:  740:    }
        -:  741:    
    #####:  742:    if (choice2 > treasure_map || choice2 < curse)
        -:  743:    {
    #####:  744:        return -1;
        -:  745:    }
        -:  746:    
    #####:  747:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  748:    {
    #####:  749:        return -1;
        -:  750:    }
        -:  751:    
    #####:  752:    gainCard(choice2, state, 2, currentPlayer);
        -:  753:    
        -:  754:    //discard card from hand
    #####:  755:    discardCard(handPos, currentPlayer, state, 0);
        -:  756:    
        -:  757:    //discard trashed card
    #####:  758:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  759:    {
    #####:  760:        if (state->hand[currentPlayer][i] == j)
        -:  761:        {
    #####:  762:            discardCard(i, currentPlayer, state, 0);
    #####:  763:            break;
        -:  764:        }
        -:  765:    }
        -:  766:    
    #####:  767:    return 0;
        -:  768:}
        -:  769:
        -:  770:
        -:  771:
        -:  772:
      408:  773:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  774:{
        -:  775:  int i;
        -:  776:  int j;
        -:  777:  int k;
        -:  778:  int x;
        -:  779:  int index;
      408:  780:  int currentPlayer = whoseTurn(state);
      408:  781:  int nextPlayer = currentPlayer + 1;
        -:  782:
      408:  783:  int tributeRevealedCards[2] = {-1, -1};
        -:  784:  int temphand[MAX_HAND];// moved above the if statement
      408:  785:  int drawntreasure=0;
        -:  786:  int cardDrawn;
      408:  787:  int z = 0;// this is the counter for the temp hand
      408:  788:  if (nextPlayer > (state->numPlayers - 1)){
      116:  789:    nextPlayer = 0;
        -:  790:  }
        -:  791:  int returnVal;
        -:  792:  
        -:  793:	
        -:  794:  //uses switch to select card and perform actions
      408:  795:  switch( card ) 
        -:  796:    {
        -:  797:    case adventurer:
        -:  798://      while(drawntreasure<2){
        -:  799://	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  800://	  shuffle(currentPlayer, state);
        -:  801://	}
        -:  802://	drawCard(currentPlayer, state);
        -:  803://	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  804://	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  805://	  drawntreasure++;
        -:  806://	else{
        -:  807://	  temphand[z]=cardDrawn;
        -:  808://	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  809://	  z++;
        -:  810://	}
        -:  811://      }
        -:  812://      while(z-1>=0){
        -:  813://	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  814://	z=z-1;
        -:  815://      }
        -:  816:            
    #####:  817:      runAdventurer(state);
    #####:  818:      return 0;
        -:  819:			
        -:  820:    case council_room:
        -:  821://      //+4 Cards
        -:  822://      for (i = 0; i < 4; i++)
        -:  823://      {
        -:  824://          drawCard(currentPlayer, state);
        -:  825://      }
        -:  826://      
        -:  827://      //+1 Buy
        -:  828://      state->numBuys++;
        -:  829://      
        -:  830://      //Each other player draws a card
        -:  831://      for (i = 0; i < state->numPlayers; i++)
        -:  832://      {
        -:  833://          if ( i != currentPlayer )
        -:  834://          {
        -:  835://              drawCard(i, state);
        -:  836://          }
        -:  837://      }
        -:  838://      
        -:  839://      //put played card in played card pile
        -:  840://      discardCard(handPos, currentPlayer, state, 0);
        -:  841:			
    #####:  842:      runCouncil_room(handPos, state);
    #####:  843:      return 0;
        -:  844:			
        -:  845:    case feast:
        -:  846:      //gain card with cost up to 5
        -:  847:      //Backup hand
    #####:  848:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  849:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  850:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  851:      }
        -:  852:      //Backup hand
        -:  853:
        -:  854:      //Update Coins for Buy
    #####:  855:      updateCoins(currentPlayer, state, 5);
    #####:  856:      x = 1;//Condition to loop on
    #####:  857:      while( x == 1) {//Buy one card
    #####:  858:	if (supplyCount(choice1, state) <= 0){
        -:  859:	  if (DEBUG)
        -:  860:	    printf("None of that card left, sorry!\n");
        -:  861:
        -:  862:	  if (DEBUG){
        -:  863:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  864:	  }
        -:  865:	}
    #####:  866:	else if (state->coins < getCost(choice1)){
    #####:  867:	  printf("That card is too expensive!\n");
        -:  868:
        -:  869:	  if (DEBUG){
        -:  870:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  871:	  }
        -:  872:	}
        -:  873:	else{
        -:  874:
        -:  875:	  if (DEBUG){
        -:  876:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  877:	  }
        -:  878:
    #####:  879:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  880:	  x = 0;//No more buying cards
        -:  881:
        -:  882:	  if (DEBUG){
        -:  883:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  884:	  }
        -:  885:
        -:  886:	}
        -:  887:      }     
        -:  888:
        -:  889:      //Reset Hand
    #####:  890:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  891:	state->hand[currentPlayer][i] = temphand[i];
    #####:  892:	temphand[i] = -1;
        -:  893:      }
        -:  894:      //Reset Hand
        -:  895:      			
    #####:  896:      return 0;
        -:  897:			
        -:  898:    case gardens:
    #####:  899:      return -1;
        -:  900:			
        -:  901:    case mine:
        -:  902://      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  903://
        -:  904://      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  905://	{
        -:  906://	  return -1;
        -:  907://	}
        -:  908://		
        -:  909://      if (choice2 > treasure_map || choice2 < curse)
        -:  910://	{
        -:  911://	  return -1;
        -:  912://	}
        -:  913://
        -:  914://      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  915://	{
        -:  916://	  return -1;
        -:  917://	}
        -:  918://
        -:  919://      gainCard(choice2, state, 2, currentPlayer);
        -:  920://
        -:  921://      //discard card from hand
        -:  922://      discardCard(handPos, currentPlayer, state, 0);
        -:  923://
        -:  924://      //discard trashed card
        -:  925://      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  926://	{
        -:  927://	  if (state->hand[currentPlayer][i] == j)
        -:  928://	    {
        -:  929://	      discardCard(i, currentPlayer, state, 0);			
        -:  930://	      break;
        -:  931://	    }
        -:  932://	}
        -:  933:      
    #####:  934:      returnVal = runMine(handPos, state, choice1, choice2, choice3);
        -:  935:			
    #####:  936:      if (returnVal == 0){
    #####:  937:          return 0;
        -:  938:      }
    #####:  939:      else if(returnVal == -1){
    #####:  940:          return -1;
        -:  941:      }
        -:  942:			
        -:  943:    case remodel:
    #####:  944:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  945:
    #####:  946:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  947:	{
    #####:  948:	  return -1;
        -:  949:	}
        -:  950:
    #####:  951:      gainCard(choice2, state, 0, currentPlayer);
        -:  952:
        -:  953:      //discard card from hand
    #####:  954:      discardCard(handPos, currentPlayer, state, 0);
        -:  955:
        -:  956:      //discard trashed card
    #####:  957:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  958:	{
    #####:  959:	  if (state->hand[currentPlayer][i] == j)
        -:  960:	    {
    #####:  961:	      discardCard(i, currentPlayer, state, 0);			
    #####:  962:	      break;
        -:  963:	    }
        -:  964:	}
        -:  965:
        -:  966:
    #####:  967:      return 0;
        -:  968:		
        -:  969:    case smithy:
        -:  970://      //+3 Cards
        -:  971://      for (i = 0; i < 3; i++)
        -:  972://      {
        -:  973://          drawCard(currentPlayer, state);
        -:  974://      }
        -:  975://      
        -:  976://      //discard card from hand
        -:  977://      discardCard(handPos, currentPlayer, state, 0);
        -:  978:            
      408:  979:      runSmithy(handPos, state);
        -:  980:            
      408:  981:      return 0;
        -:  982:		
        -:  983:    case village:
        -:  984://      //+1 Card
        -:  985://      drawCard(currentPlayer, state);
        -:  986://      
        -:  987://      //+2 Actions
        -:  988://      state->numActions = state->numActions + 2;
        -:  989://      
        -:  990://      //discard played card from hand
        -:  991://      discardCard(handPos, currentPlayer, state, 0);
        -:  992:      
    #####:  993:      runVillage(handPos, state);
    #####:  994:      return 0;
        -:  995:		
        -:  996:    case baron:
    #####:  997:      state->numBuys++;//Increase buys by 1!
    #####:  998:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  999:	int p = 0;//Iterator for hand!
    #####: 1000:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1001:	while(card_not_discarded){
    #####: 1002:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1003:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1004:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1005:	    state->discardCount[currentPlayer]++;
    #####: 1006:	    for (;p < state->handCount[currentPlayer]; p++){
    #####: 1007:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1008:	    }
    #####: 1009:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1010:	    state->handCount[currentPlayer]--;
    #####: 1011:	    card_not_discarded = 0;//Exit the loop
        -: 1012:	  }
    #####: 1013:	  else if (p > state->handCount[currentPlayer]){
        -: 1014:	    if(DEBUG) {
        -: 1015:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1016:	      printf("Must gain an estate if there are any\n");
        -: 1017:	    }
    #####: 1018:	    if (supplyCount(estate, state) > 0){
    #####: 1019:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1020:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1021:	      if (supplyCount(estate, state) == 0){
    #####: 1022:		isGameOver(state);
        -: 1023:	      }
        -: 1024:	    }
    #####: 1025:	    card_not_discarded = 0;//Exit the loop
        -: 1026:	  }
        -: 1027:			    
        -: 1028:	  else{
    #####: 1029:	    p++;//Next card
        -: 1030:	  }
        -: 1031:	}
        -: 1032:      }
        -: 1033:			    
        -: 1034:      else{
    #####: 1035:	if (supplyCount(estate, state) > 0){
    #####: 1036:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1037:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1038:	  if (supplyCount(estate, state) == 0){
    #####: 1039:	    isGameOver(state);
        -: 1040:	  }
        -: 1041:	}
        -: 1042:      }
        -: 1043:	    
        -: 1044:      
    #####: 1045:      return 0;
        -: 1046:		
        -: 1047:    case great_hall:
        -: 1048:      //+1 Card
    #####: 1049:      drawCard(currentPlayer, state);
        -: 1050:			
        -: 1051:      //+1 Actions
    #####: 1052:      state->numActions++;
        -: 1053:			
        -: 1054:      //discard card from hand
    #####: 1055:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1056:      return 0;
        -: 1057:		
        -: 1058:    case minion:
        -: 1059:      //+1 action
    #####: 1060:      state->numActions++;
        -: 1061:			
        -: 1062:      //discard card from hand
    #####: 1063:      discardCard(handPos, currentPlayer, state, 0);
        -: 1064:			
    #####: 1065:      if (choice1)		//+2 coins
        -: 1066:	{
    #####: 1067:	  state->coins = state->coins + 2;
        -: 1068:	}
        -: 1069:			
    #####: 1070:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1071:	{
        -: 1072:	  //discard hand
    #####: 1073:	  while(numHandCards(state) > 0)
        -: 1074:	    {
    #####: 1075:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1076:	    }
        -: 1077:				
        -: 1078:	  //draw 4
    #####: 1079:	  for (i = 0; i < 4; i++)
        -: 1080:	    {
    #####: 1081:	      drawCard(currentPlayer, state);
        -: 1082:	    }
        -: 1083:				
        -: 1084:	  //other players discard hand and redraw if hand size > 4
    #####: 1085:	  for (i = 0; i < state->numPlayers; i++)
        -: 1086:	    {
    #####: 1087:	      if (i != currentPlayer)
        -: 1088:		{
    #####: 1089:		  if ( state->handCount[i] > 4 )
        -: 1090:		    {
        -: 1091:		      //discard hand
    #####: 1092:		      while( state->handCount[i] > 0 )
        -: 1093:			{
    #####: 1094:			  discardCard(handPos, i, state, 0);
        -: 1095:			}
        -: 1096:							
        -: 1097:		      //draw 4
    #####: 1098:		      for (j = 0; j < 4; j++)
        -: 1099:			{
    #####: 1100:			  drawCard(i, state);
        -: 1101:			}
        -: 1102:		    }
        -: 1103:		}
        -: 1104:	    }
        -: 1105:				
        -: 1106:	}
    #####: 1107:      return 0;
        -: 1108:		
        -: 1109:    case steward:
    #####: 1110:      if (choice1 == 1)
        -: 1111:	{
        -: 1112:	  //+2 cards
    #####: 1113:	  drawCard(currentPlayer, state);
    #####: 1114:	  drawCard(currentPlayer, state);
        -: 1115:	}
    #####: 1116:      else if (choice1 == 2)
        -: 1117:	{
        -: 1118:	  //+2 coins
    #####: 1119:	  state->coins = state->coins + 2;
        -: 1120:	}
        -: 1121:      else
        -: 1122:	{
        -: 1123:	  //trash 2 cards in hand
    #####: 1124:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1125:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1126:	}
        -: 1127:			
        -: 1128:      //discard card from hand
    #####: 1129:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1130:      return 0;
        -: 1131:		
        -: 1132:    case tribute:
    #####: 1133:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1134:	if (state->deckCount[nextPlayer] > 0){
    #####: 1135:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1136:	  state->deckCount[nextPlayer]--;
        -: 1137:	}
    #####: 1138:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1139:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1140:	  state->discardCount[nextPlayer]--;
        -: 1141:	}
        -: 1142:	else{
        -: 1143:	  //No Card to Reveal
        -: 1144:	  if (DEBUG){
        -: 1145:	    printf("No cards to reveal\n");
        -: 1146:	  }
        -: 1147:	}
        -: 1148:      }
        -: 1149:	    
        -: 1150:      else{
    #####: 1151:	if (state->deckCount[nextPlayer] == 0){
    #####: 1152:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1153:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1154:	    state->deckCount[nextPlayer]++;
    #####: 1155:	    state->discard[nextPlayer][i] = -1;
    #####: 1156:	    state->discardCount[nextPlayer]--;
        -: 1157:	  }
        -: 1158:			    
    #####: 1159:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1160:	} 
    #####: 1161:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1162:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1163:	state->deckCount[nextPlayer]--;
    #####: 1164:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1165:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1166:	state->deckCount[nextPlayer]--;
        -: 1167:      }    
        -: 1168:		       
    #####: 1169:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1170:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1171:	state->playedCardCount++;
    #####: 1172:	tributeRevealedCards[1] = -1;
        -: 1173:      }
        -: 1174:
    #####: 1175:      for (i = 0; i <= 2; i ++){
    #####: 1176:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1177:	  state->coins += 2;
        -: 1178:	}
        -: 1179:		    
    #####: 1180:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1181:	  drawCard(currentPlayer, state);
    #####: 1182:	  drawCard(currentPlayer, state);
        -: 1183:	}
        -: 1184:	else{//Action Card
    #####: 1185:	  state->numActions = state->numActions + 2;
        -: 1186:	}
        -: 1187:      }
        -: 1188:	    
    #####: 1189:      return 0;
        -: 1190:		
        -: 1191:    case ambassador:
    #####: 1192:      j = 0;		//used to check if player has enough cards to discard
        -: 1193:
    #####: 1194:      if (choice2 > 2 || choice2 < 0)
        -: 1195:	{
    #####: 1196:	  return -1;				
        -: 1197:	}
        -: 1198:
    #####: 1199:      if (choice1 == handPos)
        -: 1200:	{
    #####: 1201:	  return -1;
        -: 1202:	}
        -: 1203:
    #####: 1204:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1205:	{
    #####: 1206:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1207:	    {
    #####: 1208:	      j++;
        -: 1209:	    }
        -: 1210:	}
    #####: 1211:      if (j < choice2)
        -: 1212:	{
    #####: 1213:	  return -1;				
        -: 1214:	}
        -: 1215:
        -: 1216:      if (DEBUG) 
        -: 1217:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1218:
        -: 1219:      //increase supply count for choosen card by amount being discarded
    #####: 1220:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1221:			
        -: 1222:      //each other player gains a copy of revealed card
    #####: 1223:      for (i = 0; i < state->numPlayers; i++)
        -: 1224:	{
    #####: 1225:	  if (i != currentPlayer)
        -: 1226:	    {
    #####: 1227:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1228:	    }
        -: 1229:	}
        -: 1230:
        -: 1231:      //discard played card from hand
    #####: 1232:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1233:
        -: 1234:      //trash copies of cards returned to supply
    #####: 1235:      for (j = 0; j < choice2; j++)
        -: 1236:	{
    #####: 1237:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1238:	    {
    #####: 1239:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1240:		{
    #####: 1241:		  discardCard(i, currentPlayer, state, 1);
    #####: 1242:		  break;
        -: 1243:		}
        -: 1244:	    }
        -: 1245:	}			
        -: 1246:
    #####: 1247:      return 0;
        -: 1248:		
        -: 1249:    case cutpurse:
        -: 1250:
    #####: 1251:      updateCoins(currentPlayer, state, 2);
    #####: 1252:      for (i = 0; i < state->numPlayers; i++)
        -: 1253:	{
    #####: 1254:	  if (i != currentPlayer)
        -: 1255:	    {
    #####: 1256:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1257:		{
    #####: 1258:		  if (state->hand[i][j] == copper)
        -: 1259:		    {
    #####: 1260:		      discardCard(j, i, state, 0);
    #####: 1261:		      break;
        -: 1262:		    }
    #####: 1263:		  if (j == state->handCount[i])
        -: 1264:		    {
    #####: 1265:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1266:			{
        -: 1267:			  if (DEBUG)
        -: 1268:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1269:			}	
    #####: 1270:		      break;
        -: 1271:		    }		
        -: 1272:		}
        -: 1273:					
        -: 1274:	    }
        -: 1275:				
        -: 1276:	}				
        -: 1277:
        -: 1278:      //discard played card from hand
    #####: 1279:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1280:
    #####: 1281:      return 0;
        -: 1282:
        -: 1283:		
        -: 1284:    case embargo: 
        -: 1285:      //+2 Coins
    #####: 1286:      state->coins = state->coins + 2;
        -: 1287:			
        -: 1288:      //see if selected pile is in play
    #####: 1289:      if ( state->supplyCount[choice1] == -1 )
        -: 1290:	{
    #####: 1291:	  return -1;
        -: 1292:	}
        -: 1293:			
        -: 1294:      //add embargo token to selected supply pile
    #####: 1295:      state->embargoTokens[choice1]++;
        -: 1296:			
        -: 1297:      //trash card
    #####: 1298:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1299:      return 0;
        -: 1300:		
        -: 1301:    case outpost:
        -: 1302:      //set outpost flag
    #####: 1303:      state->outpostPlayed++;
        -: 1304:			
        -: 1305:      //discard card
    #####: 1306:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1307:      return 0;
        -: 1308:		
        -: 1309:    case salvager:
        -: 1310:      //+1 buy
    #####: 1311:      state->numBuys++;
        -: 1312:			
    #####: 1313:      if (choice1)
        -: 1314:	{
        -: 1315:	  //gain coins equal to trashed card
    #####: 1316:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1317:	  //trash card
    #####: 1318:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1319:	}
        -: 1320:			
        -: 1321:      //discard card
    #####: 1322:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1323:      return 0;
        -: 1324:		
        -: 1325:    case sea_hag:
    #####: 1326:      for (i = 0; i < state->numPlayers; i++){
    #####: 1327:	if (i != currentPlayer){
    #####: 1328:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1329:	  state->discardCount[i]++;
    #####: 1330:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1331:	}
        -: 1332:      }
    #####: 1333:      return 0;
        -: 1334:		
        -: 1335:    case treasure_map:
        -: 1336:      //search hand for another treasure_map
    #####: 1337:      index = -1;
    #####: 1338:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1339:	{
    #####: 1340:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1341:	    {
    #####: 1342:	      index = i;
    #####: 1343:	      break;
        -: 1344:	    }
        -: 1345:	}
    #####: 1346:      if (index > -1)
        -: 1347:	{
        -: 1348:	  //trash both treasure cards
    #####: 1349:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1350:	  discardCard(index, currentPlayer, state, 1);
        -: 1351:
        -: 1352:	  //gain 4 Gold cards
    #####: 1353:	  for (i = 0; i < 4; i++)
        -: 1354:	    {
    #####: 1355:	      gainCard(gold, state, 1, currentPlayer);
        -: 1356:	    }
        -: 1357:				
        -: 1358:	  //return success
    #####: 1359:	  return 1;
        -: 1360:	}
        -: 1361:			
        -: 1362:      //no second treasure_map found in hand
    #####: 1363:      return -1;
        -: 1364:    }
        -: 1365:	
    #####: 1366:  return -1;
        -: 1367:}
        -: 1368:
      408: 1369:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1370:{
        -: 1371:	
        -: 1372:  //if card is not trashed, added to Played pile 
      408: 1373:  if (trashFlag < 1)
        -: 1374:    {
        -: 1375:      //add card to played pile
      408: 1376:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      408: 1377:      state->playedCardCount++;
        -: 1378:    }
        -: 1379:	
        -: 1380:  //set played card to -1
      408: 1381:  state->hand[currentPlayer][handPos] = -1;
        -: 1382:	
        -: 1383:  //remove card from player's hand
      408: 1384:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1385:    {
        -: 1386:      //reduce number of cards in hand
    #####: 1387:      state->handCount[currentPlayer]--;
        -: 1388:    }
      408: 1389:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1390:    {
        -: 1391:      //reduce number of cards in hand
    #####: 1392:      state->handCount[currentPlayer]--;
        -: 1393:    }
        -: 1394:  else 	
        -: 1395:    {
        -: 1396:      //replace discarded card with last card in hand
      408: 1397:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1398:      //set last card to -1
      408: 1399:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1400:      //reduce number of cards in hand
      408: 1401:      state->handCount[currentPlayer]--;
        -: 1402:    }
        -: 1403:	
      408: 1404:  return 0;
        -: 1405:}
        -: 1406:
    31787: 1407:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1408:{
        -: 1409:  //Note: supplyPos is enum of choosen card
        -: 1410:	
        -: 1411:  //check if supply pile is empty (0) or card is not used in game (-1)
    31787: 1412:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1413:    {
    #####: 1414:      return -1;
        -: 1415:    }
        -: 1416:	
        -: 1417:  //added card for [whoseTurn] current player:
        -: 1418:  // toFlag = 0 : add to discard
        -: 1419:  // toFlag = 1 : add to deck
        -: 1420:  // toFlag = 2 : add to hand
        -: 1421:
    31787: 1422:  if (toFlag == 1)
        -: 1423:    {
    31787: 1424:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    31787: 1425:      state->deckCount[player]++;
        -: 1426:    }
    #####: 1427:  else if (toFlag == 2)
        -: 1428:    {
    #####: 1429:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1430:      state->handCount[player]++;
        -: 1431:    }
        -: 1432:  else
        -: 1433:    {
    #####: 1434:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1435:      state->discardCount[player]++;
        -: 1436:    }
        -: 1437:	
        -: 1438:  //decrease number in supply pile
    31787: 1439:  state->supplyCount[supplyPos]--;
        -: 1440:	 
    31787: 1441:  return 0;
        -: 1442:}
        -: 1443:
    20453: 1444:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1445:{
        -: 1446:  int i;
        -: 1447:	
        -: 1448:  //reset coin count
    20453: 1449:  state->coins = 0;
        -: 1450:
        -: 1451:  //add coins for each Treasure card in player's hand
   122718: 1452:  for (i = 0; i < state->handCount[player]; i++)
        -: 1453:    {
   102265: 1454:      if (state->hand[player][i] == copper)
        -: 1455:	{
    34410: 1456:	  state->coins += 1;
        -: 1457:	}
    67855: 1458:      else if (state->hand[player][i] == silver)
        -: 1459:	{
    #####: 1460:	  state->coins += 2;
        -: 1461:	}
    67855: 1462:      else if (state->hand[player][i] == gold)
        -: 1463:	{
    #####: 1464:	  state->coins += 3;
        -: 1465:	}	
        -: 1466:    }	
        -: 1467:
        -: 1468:  //add bonus
    20453: 1469:  state->coins += bonus;
        -: 1470:
    20453: 1471:  return 0;
        -: 1472:}
        -: 1473:
        -: 1474:
        -: 1475:
        -: 1476:
        -: 1477:
        -: 1478:
        -: 1479://end of dominion.c
        -: 1480:
