/******************************************************************************
* FINAL PROJECT - ProjectPartA.txt
* AUTHORS: Max Grubb ............. grubbm@oregonstate.edu
*          Wesley Jinks .......... jinksw@oregonstate.edu
*          Nickolas A. Williams .. willian2@oregonstate.edu
* CLASS: CS362
* DATE: 05/08/2016
* NOTES: Explanation of URL Validator from Apache Commons
******************************************************************************/

1. Explain testIsValid() function of UrlValidator test code.

   The testIsValid() function is set up to take two parameters. 
   
   The first is testObjects, which in this case is defined by testUrlParts 
   at the end of the code. The testUrlParts contains a testUrlScheme, 
   testUrlAuthority, testUrlPort, testPath, and testUrlQuerydefines. These 
   are each objects which themselves contain groups of ResultPairs, objects 
   that define strings of each category to test paired with a boolean 
   representing the expected validity.
   
   The second is options, which is just a digit that calls a member of
   UrlValidator that defines what URL setups are within the scope of the 
   validation.
   
   The testIsValid() function asserts that "http://www.google.com"
   and "http://www.google.com/" are both valid, because if Google doesn't
   work it's likely the internet no longer exists.
   
   It then iterates through the strings provided in the testObjects object,
   building longer URLs out of each sub-group of testObjects (i.e. 
   testUrlScheme + testUrlAuthority + testUrlPort, &c). Results are appended
   to the testBuffer and the result value is verified in an assert statement
   against the expected result from the stacked-up ResultPairs object. In 
   other words, if a ResultPairs object has a string that is paired with a
   "false" value, it should invalidate the URL and not validate.
   
   The valid URLs are then printed to the console.

   
2. Total number of URLs testIsValid() is testing.
   
   UrlValidatorTest is set up with:
   - 9 testUrlScheme ResultPairs,
   - 19 testUrlAuthority ResultPairs,
   - 7 testUrlPort ResultPairs,
   - 10 testPath ResultPairs,
   - 15 testUrlPathOptions ResultPairs, and
   - 3 testUrlQuery ResultPairs,
   Therefore we would expect 9 * 19 * 7 * 10 * 15 * 3 = 538,650 URLs tested.

   
3. Explain how testIsValid is building the URLs.
   
   A for loop iterates through each major object in the testObjects object and
   uses it as the basis for a minor test object's string to append to. So, it
   uses the options to define the pattern of the major and minor objects,
   extracts the strings for each ResultPair and appends them together.

   
3a. Example of valid URL being tested by testIsValid().
    
	A valid URL is "h3t://255.255.255.255:80/test1?action=view".
	

3b. Example of invalid URL being tested by testIsValid().

	An invalid URL is "http://255.com:0/..".
	

4. Do you think that a real world test is very different from the unit tests
   and card tests we wrote, in terms of concepts and complexity?
   
   No, a real world-test is not that much different. The tests we wrote are
   probably not as complex as real-world tests, in that real-world tests
   must by necessity delve more deeply into what exactly is causing an error,
   and ultimately find a way of fixing them, while we are not necessarily
   interested in fixing the bugs in this class. However, the concepts are very
   much the same. The complexity is largely a product of how much more time
   and use these tests have seen, but the same iterative methods will go into 
   writing them.