        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:/******************************************************************************
        -:    2:* ASSIGNMENT 5 - cardtest3.c
        -:    3:* AUTHOR: Nickolas A. Williams
        -:    4:* CLASS: CS362
        -:    5:* DATE: 05/22/2016
        -:    6:* NOTES: unit testing of Max Grubb's refactored council_room card
        -:    7:* REQUIREMENTS for council_room:
        -:    8:*  1. Player gets to draw four additional cards
        -:    9:*  2. Player gets an additional buy
        -:   10:*  3. All other players get to draw an additional card
        -:   11:*  4. Council Room is discarded
        -:   12:*  5. Other players only draw an extra card, their other piles are unaffected
        -:   13:*  6. Other players do not get an extra buy
        -:   14:* TESTING tasks for council_room:
        -:   15:*  1. Test that player draws four cards
        -:   16:*  2. Test that the player gets an additional buy
        -:   17:*  3. Test that Council Room is discarded
        -:   18:*  4. Test that this player's other piles are not affected
        -:   19:*  5. Test that other players get to draw a card
        -:   20:*  6. Test that other players' other piles are unaffected
        -:   21:*  7. Test that players do not get an extra buy
        -:   22:******************************************************************************/
        -:   23:
        -:   24:#include "dominion.h"
        -:   25:#include "dominion_helpers.h"
        -:   26:#include <string.h>
        -:   27:#include <stdio.h>
        -:   28:#include <assert.h>
        -:   29:#include "rngs.h"
        -:   30:
        -:   31:// set NOISY_TEST to 0 to remove printfs from output
        -:   32:#define NOISY_TEST 1
        -:   33:
        4:   34:int main() 
        -:   35:{
        -:   36:    int i, j;
        4:   37:    int seed = 1000;
        4:   38:    int numPlayer = 2;
        -:   39:    int r, handCount;
        4:   40:	int maxHandCount = 10;
        -:   41:    int trashflag;
        4:   42:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   43:               , remodel, smithy, village, baron, great_hall};
        -:   44:    struct gameState NormalState;
        -:   45:	struct gameState TestState;
        -:   46:	int errorflag;
        -:   47:
        4:   48:	printf("TESTING playCouncilRoom():\n");
        -:   49:	
       12:   50:	for (i = 0; i < numPlayer; i++)
        -:   51:	{
        8:   52:		memset(&NormalState, 23, sizeof(struct gameState));
        8:   53:		initializeGame(numPlayer, k, seed, &NormalState);
        -:   54:
        8:   55:		int startingHand[1]	= {council_room};
        8:   56:		int startingDeck[4] = {copper, copper, copper, copper};
        -:   57:		int startingDiscard[0];
        -:   58:		
       24:   59:		for (j = 0; j < numPlayer; j++)
        -:   60:		{
       16:   61:			NormalState.handCount[j] = 1;
       16:   62:			NormalState.deckCount[j] = 4;
       16:   63:			NormalState.discardCount[j] = 0;
        -:   64:			
       16:   65:			memcpy(NormalState.hand[j], startingHand, sizeof(int) * 1);
       16:   66:			memcpy(NormalState.deck[j], startingDeck, sizeof(int) * 4);
        -:   67:			memcpy(NormalState.discard[j], startingDiscard, sizeof(int) * 0);
        -:   68:		}
        -:   69:		
        8:   70:		memcpy(&TestState, &NormalState, sizeof(struct gameState));
        -:   71:		int p;
        -:   72:		// p = playCouncilRoom(&TestState, i, 0); --old test call
        8:   73:		p = cardEffect(council_room, 0, 0, 0, &TestState, 0, 0); //new call
        -:   74:		
       24:   75:		for (j = 0; j < numPlayer; j++)
        -:   76:		{
        -:   77:#if (NOISY_TEST == 1)
       16:   78:				printf("Testing Player %d\n", j);
        -:   79:#endif	
        -:   80:			//test the current player
       16:   81:			if (i == j)
        -:   82:			{
        -:   83:				//test handcount
        8:   84:				if (TestState.handCount[i] != (NormalState.handCount[i] + 3))
        -:   85:				{
        4:   86:					errorflag = 1;
        -:   87:				}
        -:   88:#if (NOISY_TEST == 1)
        8:   89:					printf("TestState.handCount[%d] = %d, expected = %d\n", i, TestState.handCount[i], NormalState.handCount[i] + 3);
        -:   90:#endif
        -:   91:				
        -:   92:				//test deckcount
        8:   93:				if (TestState.deckCount[i] != (NormalState.deckCount[i] - 4))
        -:   94:				{
        4:   95:					errorflag = 1;
        -:   96:				}
        -:   97:#if (NOISY_TEST == 1)
        8:   98:					printf("TestState.deckCount[%d] = %d, expected = %d\n", i, TestState.deckCount[i], NormalState.deckCount[i] - 4);
        -:   99:#endif	
        -:  100:				
        -:  101:				//test discardcount
        8:  102:				if (TestState.discardCount[i] != (NormalState.discardCount[i] + 1))
        -:  103:				{
        8:  104:					errorflag = 1;
        -:  105:				}
        -:  106:#if (NOISY_TEST == 1)
        8:  107:				printf("TestState.discardCount[%d] = %d, expected = %d\n", i, TestState.discardCount[i], NormalState.discardCount[i] + 1);
        -:  108:#endif	
        -:  109:
        -:  110:				//test # of buys
        8:  111:				if (TestState.numBuys != (NormalState.numBuys + 1))
        -:  112:				{
    #####:  113:					errorflag = 1;
        -:  114:				}
        -:  115:#if (NOISY_TEST == 1)
        8:  116:				printf("TestState.numBuys = %d, expected = %d\n", TestState.numBuys, NormalState.numBuys + 1);
        -:  117:#endif	
        -:  118:			}
        -:  119:			
        -:  120:			//test the rest of the players
        -:  121:			else
        -:  122:			{
        -:  123:				//test handcount
        8:  124:				if (TestState.handCount[j] != (NormalState.handCount[j] + 1))
        -:  125:				{
        4:  126:					errorflag = 1;
        -:  127:				}
        -:  128:#if (NOISY_TEST == 1)
        8:  129:				printf("TestState.handCount[%d] = %d, expected = %d\n", j, TestState.handCount[j], NormalState.handCount[j] + 1);
        -:  130:#endif
        -:  131:
        -:  132:				//test deckcount
        8:  133:				if (TestState.deckCount[j] != (NormalState.deckCount[j] - 1))
        -:  134:				{
        4:  135:					errorflag = 1;
        -:  136:				}
        -:  137:#if (NOISY_TEST == 1)
        8:  138:				printf("TestState.deckCount[%d] = %d, expected = %d\n", j, TestState.deckCount[j], NormalState.deckCount[j] - 1);
        -:  139:#endif	
        -:  140:				
        -:  141:				//test discardcount
        8:  142:				if (TestState.discardCount[j] != (NormalState.discardCount[j]))
        -:  143:				{
    #####:  144:					errorflag = 1;
        -:  145:				}
        -:  146:#if (NOISY_TEST == 1)
        8:  147:				printf("TestState.discardCount[%d] = %d, expected = %d\n", j, TestState.discardCount[j], NormalState.discardCount[j]);
        -:  148:#endif	
        -:  149:			}
        -:  150:		}
        -:  151:	}
        -:  152:	
        -:  153:	//give error even if not in NOISY_TEST mode
        4:  154:	if (errorflag)
        -:  155:	{
        4:  156:		printf("ERROR: Not all tests were successful.\n");
        -:  157:	}
        4:  158:	return 0;
        -:  159:}
