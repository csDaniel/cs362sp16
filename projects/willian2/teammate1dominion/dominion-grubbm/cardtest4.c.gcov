        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:/******************************************************************************
        -:    2:* ASSIGNMENT 5 - cardtest4.c
        -:    3:* AUTHOR: Nickolas A. Williams
        -:    4:* CLASS: CS362
        -:    5:* DATE: 05/22/2016
        -:    6:* NOTES: unit testing of Max Grubb's salvager card (not refactored)
        -:    7:* REQUIREMENTS for salvager:
        -:    8:*  1. Player gets an additional buy
        -:    9:*  2. Player must trash a card
        -:   10:*  3. Player gets a number of coins equal to trashed card's value
        -:   11:*  4. This card should be discarded to the played pile
        -:   12:*  5. Trashed card should not appear in discard pile
        -:   13:*  6. No other players should be affected
        -:   14:* TESTING tasks for salvager:
        -:   15:*  1. Test that number of buys increases
        -:   16:*  2. Test that chosen card is trashed
        -:   17:*  3. Test that chosen card does not appear in discard pile
        -:   18:*  4. Test that number of coins increases corresponding to discarded value
        -:   19:*  5. Test that no other players are affected
        -:   20:*  6. Test that this card is discarded
        -:   21:******************************************************************************/
        -:   22:
        -:   23:#include "dominion.h"
        -:   24:#include "dominion_helpers.h"
        -:   25:#include <string.h>
        -:   26:#include <stdio.h>
        -:   27:#include <assert.h>
        -:   28:#include "rngs.h"
        -:   29:
        -:   30:// set NOISY_TEST to 0 to remove printfs from output
        -:   31:#define NOISY_TEST 1
        -:   32:
        4:   33:int main() 
        -:   34:{
        -:   35:    int i, j;
        4:   36:    int seed = 1000;
        4:   37:    int numPlayer = 2;
        -:   38:    int r, handCount;
        4:   39:	int maxHandCount = 10;
        -:   40:    int trashflag;
        4:   41:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   42:               , remodel, smithy, village, baron, great_hall};
        -:   43:    struct gameState NormalState;
        -:   44:	struct gameState TestState;
        -:   45:	int errorflag;
        -:   46:
        4:   47:	printf("TESTING playSalvager():\n");
        -:   48:	
       12:   49:	for (i = 0; i < numPlayer; i++)
        -:   50:	{
        8:   51:		memset(&NormalState, 23, sizeof(struct gameState));
        8:   52:		initializeGame(numPlayer, k, seed, &NormalState);
        -:   53:
        8:   54:		int startingHand[2]	= {salvager, adventurer};
        -:   55:		int startingDeck[0];
        -:   56:		int startingDiscard[0];
        -:   57:		
       24:   58:		for (j = 0; j < numPlayer; j++)
        -:   59:		{
       16:   60:			NormalState.handCount[j] = 2;
       16:   61:			NormalState.deckCount[j] = 0;
       16:   62:			NormalState.discardCount[j] = 0;
        -:   63:			
       16:   64:			memcpy(NormalState.hand[j], startingHand, sizeof(int) * 2);
        -:   65:			memcpy(NormalState.deck[j], startingDeck, sizeof(int) * 0);
        -:   66:			memcpy(NormalState.discard[j], startingDiscard, sizeof(int) * 0);
        -:   67:		}
        -:   68:		
        8:   69:		memcpy(&TestState, &NormalState, sizeof(struct gameState));
        -:   70:		int p;
        -:   71:		//p = playSalvager(&TestState, i, 0, 1); --old test call
        8:   72:		p = cardEffect(salvager, 1, 0, 0, &TestState, 0, 0); //new call, handPos 0 choice pos 1
        -:   73:		
       24:   74:		for (j = 0; j < numPlayer; j++)
        -:   75:		{
        -:   76:#if (NOISY_TEST == 1)
       16:   77:				printf("Testing Player %d\n", j);
        -:   78:#endif	
        -:   79:			//test the current player
       16:   80:			if (i == j)
        -:   81:			{
        -:   82:				//test handcount
        8:   83:				if (TestState.handCount[i] != (NormalState.handCount[i] - 2))
        -:   84:				{
        4:   85:					errorflag = 1;
        -:   86:				}
        -:   87:#if (NOISY_TEST == 1)
        8:   88:					printf("TestState.handCount[%d] = %d, expected = %d\n", i, TestState.handCount[i], NormalState.handCount[i] - 2);
        -:   89:#endif
        -:   90:				
        -:   91:				//test deckcount
        8:   92:				if (TestState.deckCount[i] != (NormalState.deckCount[i]))
        -:   93:				{
    #####:   94:					errorflag = 1;
        -:   95:				}
        -:   96:#if (NOISY_TEST == 1)
        8:   97:					printf("TestState.deckCount[%d] = %d, expected = %d\n", i, TestState.deckCount[i], NormalState.deckCount[i]);
        -:   98:#endif	
        -:   99:				
        -:  100:				//test discardcount
        8:  101:				if (TestState.discardCount[i] != (NormalState.discardCount[i]))
        -:  102:				{
    #####:  103:					errorflag = 1;
        -:  104:				}
        -:  105:#if (NOISY_TEST == 1)
        8:  106:				printf("TestState.discardCount[%d] = %d, expected = %d\n", i, TestState.discardCount[i], NormalState.discardCount[i]);
        -:  107:#endif	
        -:  108:
        -:  109:				//test # of coins
        8:  110:				if (TestState.coins != (NormalState.coins + 6))
        -:  111:				{
    #####:  112:					errorflag = 1;
        -:  113:				}
        -:  114:#if (NOISY_TEST == 1)
        8:  115:				printf("TestState.coins = %d, expected = %d\n", TestState.coins, NormalState.coins + 6);
        -:  116:#endif	
        -:  117:			}
        -:  118:			
        -:  119:			//test the rest of the players
        -:  120:			else
        -:  121:			{
        -:  122:				//test handcount
        8:  123:				if (TestState.handCount[j] != (NormalState.handCount[j]))
        -:  124:				{
        4:  125:					errorflag = 1;
        -:  126:				}
        -:  127:#if (NOISY_TEST == 1)
        8:  128:				printf("TestState.handCount[%d] = %d, expected = %d\n", j, TestState.handCount[j], NormalState.handCount[j]);
        -:  129:#endif
        -:  130:
        -:  131:				//test deckcount
        8:  132:				if (TestState.deckCount[j] != (NormalState.deckCount[j]))
        -:  133:				{
    #####:  134:					errorflag = 1;
        -:  135:				}
        -:  136:#if (NOISY_TEST == 1)
        8:  137:				printf("TestState.deckCount[%d] = %d, expected = %d\n", j, TestState.deckCount[j], NormalState.deckCount[j]);
        -:  138:#endif	
        -:  139:				
        -:  140:				//test discardcount
        8:  141:				if (TestState.discardCount[j] != (NormalState.discardCount[j]))
        -:  142:				{
    #####:  143:					errorflag = 1;
        -:  144:				}
        -:  145:#if (NOISY_TEST == 1)
        8:  146:				printf("TestState.discardCount[%d] = %d, expected = %d\n", j, TestState.discardCount[j], NormalState.discardCount[j]);
        -:  147:#endif	
        -:  148:			}
        -:  149:		}
        -:  150:	}
        -:  151:	
        -:  152:	//give error even if not in NOISY_TEST mode
        4:  153:	if (errorflag)
        -:  154:	{
        4:  155:		printf("ERROR: Not all tests were successful.\n");
        -:  156:	}
        4:  157:	return 0;
        -:  158:}
