        -:    0:Source:randomtestcard.c
        -:    0:Graph:randomtestcard.gcno
        -:    0:Data:randomtestcard.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/******************************************************************************
        -:    2:* ASSIGNMENT 5 - randomtestcard.c
        -:    3:* AUTHOR: Nickolas A. Williams
        -:    4:* CLASS: CS362
        -:    5:* DATE: 05/22/2016
        -:    6:* NOTES: random testing Max Grubb's refactored playSmithy() function
        -:    7:* REQUIREMENTS for smithy:
        -:    8:*  1. Player draws exactly three cards
        -:    9:*  2. Cards are drawn only from the player's deck
        -:   10:*  3. Smithy card is discarded
        -:   11:* TESTING tasks for smithy:
        -:   12:*  1. Test that three cards are added to hand
        -:   13:*  2. Test that three cards are drawn from deck
        -:   14:*  3. Test that smithy card was discarded
        -:   15:*  4. Test that if there are <3 cards in deck, 0/1 or -1 cards were added to
        -:   16:*     hand (deck 0 hand -1, deck 1 hand 0, deck 2 hand 1)
        -:   17:*  5. Test that if there are <3 cards in deck, there are no cards left in deck
        -:   18:*  6. Test that if there are <3 cards in deck, smithy still discarded
        -:   19:*  7. Test that other players' hands were not adjusted
        -:   20:*  8. Test that other players' decks were not adjusted
        -:   21:*  9. Test that other players' discards were not adjusted
        -:   22:******************************************************************************/
        -:   23:
        -:   24:#include "dominion.h"
        -:   25:#include "dominion_helpers.h"
        -:   26:#include <string.h>
        -:   27:#include <stdio.h>
        -:   28:#include <assert.h>
        -:   29:#include "rngs.h"
        -:   30:#include <math.h>
        -:   31:#include <stdlib.h>
        -:   32:#include <time.h>
        -:   33:
        -:   34:// set NOISY_TEST to 0 to remove printfs from output
        -:   35:#define NOISY_TEST 0
        -:   36:// set number of tests to perform
        -:   37:#define NUM_TESTS 10000
        -:   38://number of cards in the game as of this build
        -:   39:#define CARDS_IN_GAME 26
        -:   40:
function main called 1 returned 100% blocks executed 91%
        1:   41:int main() 
        -:   42:{
        -:   43:	int i, j;
        -:   44:    int test, player;
        -:   45:    int seed, numPlayer;
        1:   46:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   47:               , remodel, smithy, village, baron, great_hall};
        -:   48:    struct gameState StartState;
        -:   49:	struct gameState TestState;
        -:   50:	int errorflag, generalErrorFlag;
        1:   51:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        1:   52:	int case1 = 0;
        1:   53:	int case2 = 0;
        1:   54:	int case3 = 0;
        1:   55:	int case4 = 0;
        1:   56:	int case5 = 0;
        1:   57:	int case6 = 0;
        1:   58:	int case7 = 0;
        1:   59:	int case8 = 0;
        1:   60:	int case9 = 0;
        -:   61:
        1:   62:	printf("TESTING playSmithy():\n");
call    0 returned 100%
        -:   63:	
    10001:   64:	for (test = 0; test < NUM_TESTS; test++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   65:	{
    10000:   66:		seed = rand(); //provide dominion's fancy RNGesus with a random number
call    0 returned 100%
    10000:   67:		numPlayer = (rand() % 3) + 2; //no fewer than 2 players, no more than 4
call    0 returned 100%
    10000:   68:		errorflag = 0;
        -:   69:		
    10000:   70:		memset(&StartState, 23, sizeof(struct gameState)); //ensures state clear
    10000:   71:		initializeGame(numPlayer, k, seed, &StartState);
call    0 returned 100%
        -:   72:		
        -:   73:		//create hands for every player
    39900:   74:		for (player = 0; player < numPlayer; player++) //for each player
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:   75:		{
        -:   76:			//give player random number of cards in deck, discard, & hand
    29900:   77:			StartState.deckCount[player] = floor(Random() * MAX_DECK);
call    0 returned 100%
    29900:   78:			StartState.discardCount[player] = floor(Random() * MAX_DECK);
call    0 returned 100%
    29900:   79:			StartState.handCount[player] = floor(Random() * MAX_HAND);
call    0 returned 100%
        -:   80:			
  7443112:   81:			for (i = 0; i < StartState.deckCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   82:			{
        -:   83:				//fill deck with random cards
  7413212:   84:				StartState.deck[player][i] = floor(Random() * CARDS_IN_GAME);
call    0 returned 100%
        -:   85:			}
  7499199:   86:			for (i = 0; i < StartState.discardCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   87:			{
        -:   88:				//fill discard with random cards
  7469299:   89:				StartState.discard[player][i] = floor(Random() * CARDS_IN_GAME);
call    0 returned 100%
        -:   90:			}
  7465255:   91:			for (i = 0; i < StartState.handCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   92:			{
        -:   93:				//fill hand with random cards
  7435355:   94:				StartState.hand[player][i] = floor(Random() * CARDS_IN_GAME);
call    0 returned 100%
        -:   95:			}
        -:   96:		}
        -:   97:		
        -:   98:		//pick random player, verify smithy is in hand, if not give them one
        -:   99:		//then, save state and call playSmithy
    10000:  100:		player = rand() % numPlayer;
call    0 returned 100%
    10000:  101:		int smithyInHand = 0;
        -:  102:		int handPos;
   244778:  103:		for (handPos = 0; handPos < StartState.handCount[player]; handPos++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  104:		{
   244217:  105:			if (StartState.hand[player][handPos] == smithy)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -:  106:			{
     9439:  107:				smithyInHand = 1;
     9439:  108:				break;
        -:  109:			}
        -:  110:		}
    10000:  111:		if (smithyInHand == 0)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  112:		{
      561:  113:			handPos = floor(Random() * StartState.handCount[player]);
call    0 returned 100%
      561:  114:			StartState.hand[player][handPos] = smithy;
        -:  115:		}
        -:  116:		
        -:  117:		//set StartState whoseTurn to the playing player for this test
    10000:  118:		StartState.whoseTurn = player;
        -:  119:		//save gamestate for comparison
    10000:  120:		memcpy(&TestState, &StartState, sizeof(struct gameState));
        -:  121:		//call playSmithy()
        -:  122:		//playSmithy(&TestState, player, handPos); --old call
    10000:  123:		cardEffect(smithy, 0, 0, 0, &TestState, handPos, 0); //new call
call    0 returned 100%
        -:  124:
        -:  125:#if (NOISY_TEST == 1)
        -:  126:		printf("\n=====================================\n");
        -:  127:		printf("==   TEST playSmithy() #%d\n", test);
        -:  128:		printf("=====================================\n");
        -:  129:		printf("Player #%d has smithy card.\n", player);
        -:  130:		printf("Cards: %d hand, %d deck, %d discard\n", StartState.handCount[player], StartState.deckCount[player], StartState.discardCount[player]);
        -:  131:#endif
        -:  132:		//PERFORM TESTS ON ALL PLAYERS
    39900:  133:		for (j = 0; j < numPlayer; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  134:		{
        -:  135:#if (NOISY_TEST == 1)
        -:  136:			printf("TESTING PLAYER #%d\n", j);
        -:  137:#endif	
    29900:  138:			if (j == player) //current player tested is caller of playSmithy()
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  139:			{
        -:  140:#if (NOISY_TEST == 1)
        -:  141:				printf("Testing card counts for smithy player\n");
        -:  142:#endif	
        -:  143:				//test card counts for the test state
        -:  144:				//if there are cards in the deck, test that operations performed normally
    10000:  145:				if (StartState.deckCount[j] > 3)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -:  146:				{
        -:  147:					//test that hand has +2 cards (+3 from deck, -1 smithy card)
     9909:  148:					if (TestState.handCount[j] != StartState.handCount[j] + 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  149:					{
    #####:  150:						case1++;
    #####:  151:						errorflag = 1;
        -:  152:					}
        -:  153:					//test that deck has -3 cards
     9909:  154:					if (TestState.deckCount[j] != StartState.deckCount[j] - 3)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  155:					{
    #####:  156:						case2++;
    #####:  157:						errorflag = 1;
        -:  158:					}
        -:  159:					//test that discard has +1 cards (smithy card)
     9909:  160:					if (TestState.discardCount[j] != StartState.discardCount[j] + 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  161:					{
     9909:  162:						case3++;
     9909:  163:						errorflag = 1;
        -:  164:					}
        -:  165:#if (NOISY_TEST == 1)
        -:  166:					printf("Smithy player has: %d hand, %d deck, %d discard.\n", TestState.handCount[j], TestState.deckCount[j], TestState.discardCount[j]);
        -:  167:					printf("         Expected: %d hand, %d deck, %d discard.\n", StartState.handCount[j] + 2, StartState.deckCount[j] - 3, StartState.discardCount[j] + 1);
        -:  168:#endif			
        -:  169:				}
        -:  170:				//there are less than 3 cards in deck to draw, so those should get drawn
        -:  171:				else
        -:  172:				{
        -:  173:					//test that hand has -1 cards (smithy discarded)
       91:  174:					if (TestState.handCount[j] != StartState.handCount[j] + (StartState.deckCount[j] - 1))
branch  0 taken 82% (fallthrough)
branch  1 taken 18%
        -:  175:					{
       75:  176:						case4++;
       75:  177:						errorflag = 1;
        -:  178:					}
        -:  179:					//test that deck is now empty (either started with 0 cards, or all cards drawn)
       91:  180:					if (TestState.deckCount[j] != 0)
branch  0 taken 82% (fallthrough)
branch  1 taken 18%
        -:  181:					{
       75:  182:						case5++;
       75:  183:						errorflag = 1;
        -:  184:					}
        -:  185:					//test that smithy has been discarded
       91:  186:					if (TestState.discardCount[j] != StartState.discardCount[j] + 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  187:					{
       91:  188:						case6++;
       91:  189:						errorflag = 1;
        -:  190:					}
        -:  191:#if (NOISY_TEST == 1)
        -:  192:					printf("Smithy player has: %d hand, %d deck, %d discard.\n", TestState.handCount[j], TestState.deckCount[j], TestState.discardCount[j]);
        -:  193:					printf("         Expected: %d hand, %d deck, %d discard.\n", StartState.handCount[j] + StartState.deckCount[j], 0, TestState.discardCount[j] + 1);
        -:  194:#endif			
        -:  195:				}
        -:  196:			}
        -:  197:
        -:  198:			//test the rest of the players
        -:  199:			else
        -:  200:			{
        -:  201:				//test handcount
    19900:  202:				if (TestState.handCount[j] != (StartState.handCount[j]))
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  203:				{	
        2:  204:					case7++;
        2:  205:					errorflag = 1;
        -:  206:				}
        -:  207:
        -:  208:				//test deckcount
    19900:  209:				if (TestState.deckCount[j] != (StartState.deckCount[j]))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  210:				{
    #####:  211:					case8++;
    #####:  212:					errorflag = 1;
        -:  213:				}
        -:  214:				
        -:  215:				//test discardcount
    19900:  216:				if (TestState.discardCount[j] != (StartState.discardCount[j]))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  217:				{
    #####:  218:					case9++;
    #####:  219:					errorflag = 1;
        -:  220:				}
        -:  221:#if (NOISY_TEST == 1)
        -:  222:				printf("Non-smithy player has: %d hand, %d deck, %d discard.\n", TestState.handCount[j], TestState.deckCount[j], TestState.discardCount[j]);
        -:  223:				printf("             Expected: %d hand, %d deck, %d discard.\n", StartState.handCount[j], StartState.deckCount[j], TestState.discardCount[j]);
        -:  224:#endif		
        -:  225:			}
        -:  226:		}
    10000:  227:		if (errorflag = 1)
        -:  228:		{
    10000:  229:			generalErrorFlag = 1;
        -:  230:#if (NOISY_TEST == 1)
        -:  231:			printf("TEST #%d has failed.\n", test);
        -:  232:#endif	
        -:  233:		}
        -:  234:	}
        -:  235:	
        -:  236:	//give error even if not in NOISY_TEST mode
        1:  237:	if (generalErrorFlag)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  238:	{
        1:  239:		printf("\n===============================================\n");
call    0 returned 100%
        1:  240:		printf("== TEST REPORT FOR playSmithy(), %d TESTS\n", NUM_TESTS);
call    0 returned 100%
        1:  241:		printf("===============================================\n");
call    0 returned 100%
        1:  242:		printf("Failed tests:\n");
call    0 returned 100%
        1:  243:		if (case1 > 0) 
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  244:		{ 
    #####:  245:			printf("Smithy player's hand has +3 cards: %d failed\n", case1);
call    0 never executed
        -:  246:		}
        1:  247:		if (case2 > 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  248:		{ 
    #####:  249:			printf("Smithy player's deck has -3 cards: %d failed\n", case2);
call    0 never executed
        -:  250:		}
        1:  251:		if (case3 > 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  252:		{ 
        1:  253:			printf("Smithy player's discard has +1 cards: %d failed\n", case3);
call    0 returned 100%
        -:  254:		}
        1:  255:		if (case4 > 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  256:		{ 
        1:  257:			printf("SPECIAL CASE, smithy player's hand added 0/1 or -1 cards: %d failed\n", case4);
call    0 returned 100%
        -:  258:		}
        1:  259:		if (case5 > 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  260:		{ 
        1:  261:			printf("SPECIAL CASE, smithy player's deck has 0 cards: %d failed\n", case5);
call    0 returned 100%
        -:  262:		}
        1:  263:		if (case6 > 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  264:		{ 
        1:  265:			printf("SPECIAL CASE, smithy player's discard has +1 cards: %d failed\n", case6);
call    0 returned 100%
        -:  266:		}
        1:  267:		if (case7 > 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  268:		{ 
        1:  269:			printf("Another player's hand adjusted: %d failed\n", case7);
call    0 returned 100%
        -:  270:		}
        1:  271:		if (case8 > 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  272:		{ 
    #####:  273:			printf("Another player's deck adjusted: %d failed\n", case8);
call    0 never executed
        -:  274:		}
        1:  275:		if (case9 > 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  276:		{ 
    #####:  277:			printf("Another player's discard adjusted: %d failed\n", case9);
call    0 never executed
        -:  278:		}
        1:  279:		printf("\n");
call    0 returned 100%
        -:  280:	}
        1:  281:	return 0;
        -:  282:}
