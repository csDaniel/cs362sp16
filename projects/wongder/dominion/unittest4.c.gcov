        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:
function main called 1 returned 100% blocks executed 89%
        1:    9:int main() {
        -:   10:    int i;
        1:   11:    int seed = 1000;
        1:   12:    int numPlayer = 2;
        1:   13:	int player1 = 0;
        1:   14:	int player2 = 1;
        -:   15:	int gameOver;
        -:   16:	int tempCard;
        -:   17:	int blah;
        1:   18:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   19:               , remodel, smithy, village, baron, great_hall};
        -:   20:    struct gameState G, RESET;
        -:   21:	
        1:   22:	initializeGame(numPlayer, k, seed, &RESET);
call    0 returned 100%
        1:   23:	memcpy(&G, &RESET, sizeof(struct gameState));	
        -:   24:	
        -:   25:	//Test discardCard function
        1:   26:	printf("~~~Testing discardCard Function~~~\n");
call    0 returned 100%
        -:   27:	
        1:   28:	printf("--------------------------------------------\n");
call    0 returned 100%
        1:   29:	printf("Test if player 1 hand count decrease by 1\n\n");
call    0 returned 100%
        1:   30:	printf("Before G.handCount = %d\n",G.handCount[player1]);
call    0 returned 100%
        1:   31:	discardCard(0, player1, &G, 0);
call    0 returned 100%
        1:   32:	printf("After G.handCount = %d, expected = 4\n", G.handCount[player1]);
call    0 returned 100%
        1:   33:	if (G.handCount[player1] == 4){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   34:		printf("PASSED.\n");
call    0 returned 100%
        -:   35:	}
        -:   36:	else{
    #####:   37:		printf("FAILED.\n");
call    0 never executed
        -:   38:	}
        1:   39:	printf("--------------------------------------------\n");
call    0 returned 100%
        -:   40:	
        1:   41:	memcpy(&G, &RESET, sizeof(struct gameState)); // reset game state
        -:   42:	
        1:   43:	printf("Test if played pile increase by 1 (trashFlag = 0)\n\n");
call    0 returned 100%
        1:   44:	printf("Before G.playedCardCount = %d\n",G.playedCardCount);
call    0 returned 100%
        1:   45:	discardCard(0, player1, &G, 0);
call    0 returned 100%
        1:   46:	printf("After G.playedCardCount = %d, expected = 1\n", G.playedCardCount);
call    0 returned 100%
        1:   47:	if (G.playedCardCount == 1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   48:		printf("PASSED.\n");
call    0 returned 100%
        -:   49:	}
        -:   50:	else{
    #####:   51:		printf("FAILED.\n");
call    0 never executed
        -:   52:	}
        1:   53:	printf("--------------------------------------------\n");
call    0 returned 100%
        -:   54:	
        1:   55:	memcpy(&G, &RESET, sizeof(struct gameState)); // reset game state
        -:   56:	
        1:   57:	printf("Test if discarded Card is at the top of played pile (trashFlag = 0)\n\n");
call    0 returned 100%
        1:   58:	discardCard(0, player1, &G, 0);
call    0 returned 100%
        1:   59:	printf("discardCard = %d, expected = %d\n", G.playedCards[0], G.hand[player1][0]);
call    0 returned 100%
        1:   60:	if (G.playedCards[0] == G.hand[player1][0]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   61:		printf("PASSED.\n");
call    0 returned 100%
        -:   62:	}
        -:   63:	else{
    #####:   64:		printf("FAILED.\n");
call    0 never executed
        -:   65:	}
        1:   66:	printf("--------------------------------------------\n");
call    0 returned 100%
        -:   67:	
        1:   68:	memcpy(&G, &RESET, sizeof(struct gameState)); // reset game state
        -:   69:	
        1:   70:	printf("Test if player 1 deck is still the same\n\n");
call    0 returned 100%
        1:   71:	blah = G.deckCount[player1];
        1:   72:	discardCard(0, player1, &G, 0);
call    0 returned 100%
        1:   73:	printf("G.deckCount = %d, expected = %d\n", G.deckCount[player1], blah);
call    0 returned 100%
        1:   74:	if (G.deckCount[player1] == blah){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   75:		printf("PASSED.\n");
call    0 returned 100%
        -:   76:	}
        -:   77:	else{
    #####:   78:		printf("FAILED.\n");
call    0 never executed
        -:   79:	}
        1:   80:	printf("--------------------------------------------\n");
call    0 returned 100%
        -:   81:	
        1:   82:	memcpy(&G, &RESET, sizeof(struct gameState)); // reset game state
        -:   83:	
        1:   84:	printf("Test if player 1 still has the card \n\n");
call    0 returned 100%
        1:   85:	printf("Hand before discard:\n");
call    0 returned 100%
        1:   86:	blah = G.handCount[player1];
        1:   87:	i = 0;
        7:   88:	while (G.hand[player1][i] != NULL){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        5:   89:		printf("%d, ", G.hand[player1][i]);
call    0 returned 100%
        5:   90:		i++;
        -:   91:	}
        1:   92:	i = 0;
        1:   93:	discardCard(0, player1, &G, 0);
call    0 returned 100%
        1:   94:	printf("\nHand after discard:\n");
call    0 returned 100%
        6:   95:	while (G.hand[player1][i] != NULL && G.hand[player1][i] != -1){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 80%
branch  3 taken 20% (fallthrough)
        4:   96:		printf("%d, ", G.hand[player1][i]);
call    0 returned 100%
        4:   97:		i++;
        -:   98:	}
        1:   99:	if (G.handCount[player1] != blah){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  100:		printf("\nPASSED.\n");
call    0 returned 100%
        -:  101:	}
        -:  102:	else{
    #####:  103:		printf("FAILED.\n");
call    0 never executed
        -:  104:	}
        1:  105:	printf("--------------------------------------------\n");
call    0 returned 100%
        -:  106:	
        1:  107:	memcpy(&G, &RESET, sizeof(struct gameState)); // reset game state
        -:  108:	
        1:  109:	printf("Test if player 2 discard pile stayed the same\n\n");
call    0 returned 100%
        1:  110:	blah = G.discardCount[player2];
        1:  111:	discardCard(0, player1, &G, 0);
call    0 returned 100%
        1:  112:	printf("G.discardCount = %d, expected = %d\n", G.discardCount[player2], blah);
call    0 returned 100%
        1:  113:	if (G.discardCount[player2] == blah){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  114:		printf("PASSED.\n");
call    0 returned 100%
        -:  115:	}
        -:  116:	else{
    #####:  117:		printf("FAILED.\n");
call    0 never executed
        -:  118:	}
        1:  119:	printf("--------------------------------------------\n");
call    0 returned 100%
        -:  120:	
        1:  121:	memcpy(&G, &RESET, sizeof(struct gameState)); // reset game state
        -:  122:	
        1:  123:	printf("Test if player 1 deck is still the same\n\n");
call    0 returned 100%
        1:  124:	blah = G.deckCount[player1];
        1:  125:	discardCard(0, player1, &G, 0);
call    0 returned 100%
        1:  126:	printf("G.deckCount = %d, expected = %d\n", G.deckCount[player1], blah);
call    0 returned 100%
        1:  127:	if (G.deckCount[player1] == blah){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  128:		printf("PASSED.\n");
call    0 returned 100%
        -:  129:	}
        -:  130:	else{
    #####:  131:		printf("FAILED.\n");
call    0 never executed
        -:  132:	}
        1:  133:	printf("--------------------------------------------\n");
call    0 returned 100%
        -:  134:	
       28:  135:	for (i = 0; i < sizeof(G.supplyCount)/sizeof(int); i++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       27:  136:		memcpy(&G, &RESET, sizeof(struct gameState)); // reset game state
        -:  137:		
       27:  138:		printf("Test if supplyPile[%d] stayed the same\n\n", i);
call    0 returned 100%
       27:  139:		printf("Before G.supplyCount[%d] = %d\n", i, G.supplyCount[0]);
call    0 returned 100%
       27:  140:		drawCard(player1, &G);
call    0 returned 100%
       27:  141:		printf("After G.supplyCount = %d, expected = 10\n", G.supplyCount[0]);
call    0 returned 100%
       27:  142:		if (G.supplyCount[0] == 10){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       27:  143:			printf("PASSED.\n");
call    0 returned 100%
        -:  144:		}
        -:  145:		else{
    #####:  146:			printf("FAILED.\n");
call    0 never executed
        -:  147:		}
       27:  148:		printf("--------------------------------------------\n");
call    0 returned 100%
        -:  149:	}
        -:  150:	
        1:  151:	memcpy(&G, &RESET, sizeof(struct gameState)); // reset game state
        -:  152:	
        1:  153:	printf("Test if player 2 hand count stayed the same\n\n");
call    0 returned 100%
        1:  154:	printf("Before G.handCount = %d\n", G.handCount[player2]);
call    0 returned 100%
        1:  155:	drawCard(player1, &G);
call    0 returned 100%
        1:  156:	printf("After G.handCount = %d, expected = 0\n", G.handCount[player2]);
call    0 returned 100%
        1:  157:	if (G.handCount[player2] == 0){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  158:		printf("PASSED.\n");
call    0 returned 100%
        -:  159:	}
        -:  160:	else{
    #####:  161:		printf("FAILED.\n");
call    0 never executed
        -:  162:	}
        1:  163:	printf("--------------------------------------------\n");
call    0 returned 100%
        -:  164:	
        1:  165:	return 0;
        -:  166:}
